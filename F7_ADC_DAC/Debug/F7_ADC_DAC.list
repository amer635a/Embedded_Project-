
F7_ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001880c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e0c  080189dc  080189dc  000289dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b7e8  0801b7e8  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b7e8  0801b7e8  0002b7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b7f0  0801b7f0  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b7f0  0801b7f0  0002b7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b7f4  0801b7f4  0002b7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801b7f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801b888  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801b928  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008eac  200001d0  0801b9c8  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000907c  0801b9c8  0003907c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000384e2  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007f67  00000000  00000000  000686e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002830  00000000  00000000  00070650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002640  00000000  00000000  00072e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039ce6  00000000  00000000  000754c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042b0c  00000000  00000000  000af1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001167b0  00000000  00000000  000f1cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00208462  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b084  00000000  00000000  002084b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080189c4 	.word	0x080189c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080189c4 	.word	0x080189c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 fcee 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f822 	bl	8000614 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005d0:	f000 fb08 	bl	8000be4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 fb68 	bl	8000ca8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d8:	f000 faa6 	bl	8000b28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005dc:	f000 fad4 	bl	8000b88 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005e0:	f000 f880 	bl	80006e4 <MX_ADC1_Init>
  MX_DAC_Init();
 80005e4:	f000 f8d0 	bl	8000788 <MX_DAC_Init>
  MX_TIM2_Init();
 80005e8:	f000 f9f0 	bl	80009cc <MX_TIM2_Init>
  MX_UART4_Init();
 80005ec:	f000 fa3c 	bl	8000a68 <MX_UART4_Init>
  MX_UART5_Init();
 80005f0:	f000 fa6a 	bl	8000ac8 <MX_UART5_Init>
  MX_I2C1_Init();
 80005f4:	f000 f8f2 	bl	80007dc <MX_I2C1_Init>
  MX_DMA_Init();
 80005f8:	f000 faf4 	bl	8000be4 <MX_DMA_Init>
  MX_I2C2_Init();
 80005fc:	f000 f92e 	bl	800085c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000600:	f000 f96c 	bl	80008dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000604:	f000 f9a8 	bl	8000958 <MX_SPI2_Init>
  MX_LWIP_Init();
 8000608:	f00b f92c 	bl	800b864 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 800060c:	f016 f8fc 	bl	8016808 <rtg_main>
 8000610:	e7fc      	b.n	800060c <main+0x48>
	...

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f017 f900 	bl	8017828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000638:	f006 fd76 	bl	8007128 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a26      	ldr	r2, [pc, #152]	; (80006dc <SystemClock_Config+0xc8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemClock_Config+0xcc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f006 fd55 	bl	8007148 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 fbaa 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 ffe3 	bl	8007690 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d0:	f000 fb94 	bl	8000dfc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0x98>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_ADC1_Init+0x9c>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_ADC1_Init+0x98>)
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_ADC1_Init+0xa0>)
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_ADC1_Init+0x98>)
 8000730:	2201      	movs	r2, #1
 8000732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0x98>)
 800073e:	2201      	movs	r2, #1
 8000740:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_ADC1_Init+0x98>)
 8000744:	f001 fcb2 	bl	80020ac <HAL_ADC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 fb55 	bl	8000dfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0x98>)
 8000764:	f001 ff70 	bl	8002648 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 fb45 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001ec 	.word	0x200001ec
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_DAC_Init+0x4c>)
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_DAC_Init+0x50>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_DAC_Init+0x4c>)
 800079e:	f002 fabe 	bl	8002d1e <HAL_DAC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007a8:	f000 fb28 	bl	8000dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_DAC_Init+0x4c>)
 80007bc:	f002 fb35 	bl	8002e2a <HAL_DAC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007c6:	f000 fb19 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000234 	.word	0x20000234
 80007d8:	40007400 	.word	0x40007400

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	f004 fb6e 	bl	8004ef8 <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 faeb 	bl	8000dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C1_Init+0x74>)
 800082a:	f006 fa9d 	bl	8006d68 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fae2 	bl	8000dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083c:	f006 fadf 	bl	8006dfe <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 fad9 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000248 	.word	0x20000248
 8000854:	40005400 	.word	0x40005400
 8000858:	00808cd2 	.word	0x00808cd2

0800085c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C2_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 44;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C2_Init+0x74>)
 800086e:	222c      	movs	r2, #44	; 0x2c
 8000870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000898:	f004 fb2e 	bl	8004ef8 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 faab 	bl	8000dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008aa:	f006 fa5d 	bl	8006d68 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 faa2 	bl	8000dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008bc:	f006 fa9f 	bl	8006dfe <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fa99 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000029c 	.word	0x2000029c
 80008d4:	40005800 	.word	0x40005800
 80008d8:	00808cd2 	.word	0x00808cd2

080008dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x74>)
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_SPI1_Init+0x74>)
 800093c:	f007 fcbe 	bl	80082bc <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 fa59 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000470 	.word	0x20000470
 8000954:	40013000 	.word	0x40013000

08000958 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <MX_SPI2_Init+0x70>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000970:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000974:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000988:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800099e:	2207      	movs	r2, #7
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_SPI2_Init+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI2_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_SPI2_Init+0x6c>)
 80009b0:	f007 fc84 	bl	80082bc <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009ba:	f000 fa1f 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200004d4 	.word	0x200004d4
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_TIM2_Init+0x98>)
 80009ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_TIM2_Init+0x98>)
 80009f4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM2_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a16:	f008 faaf 	bl	8008f78 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a20:	f000 f9ec 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a32:	f008 fc91 	bl	8009358 <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a3c:	f000 f9de 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a4e:	f008 feaf 	bl	80097b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a58:	f000 f9d0 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200006b8 	.word	0x200006b8

08000a68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <MX_UART4_Init+0x5c>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000aac:	f008 ff2c 	bl	8009908 <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ab6:	f000 f9a1 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000704 	.word	0x20000704
 8000ac4:	40004c00 	.word	0x40004c00

08000ac8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_UART5_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_UART5_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_UART5_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_UART5_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_UART5_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_UART5_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_UART5_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_UART5_Init+0x58>)
 8000b0c:	f008 fefc 	bl	8009908 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 f971 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000078c 	.word	0x2000078c
 8000b24:	40005000 	.word	0x40005000

08000b28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <MX_USART3_UART_Init+0x5c>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b6c:	f008 fecc 	bl	8009908 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b76:	f000 f941 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000814 	.word	0x20000814
 8000b84:	40004800 	.word	0x40004800

08000b88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2206      	movs	r2, #6
 8000b98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bcc:	f006 f963 	bl	8006e96 <HAL_PCD_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f911 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000089c 	.word	0x2000089c

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_DMA_Init+0xc0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <MX_DMA_Init+0xc0>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_DMA_Init+0xc0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_DMA_Init+0xc0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <MX_DMA_Init+0xc0>)
 8000c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_DMA_Init+0xc0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f002 f847 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c24:	200b      	movs	r0, #11
 8000c26:	f002 f860 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200d      	movs	r0, #13
 8000c30:	f002 f83f 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c34:	200d      	movs	r0, #13
 8000c36:	f002 f858 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200e      	movs	r0, #14
 8000c40:	f002 f837 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c44:	200e      	movs	r0, #14
 8000c46:	f002 f850 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f002 f82f 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c54:	200f      	movs	r0, #15
 8000c56:	f002 f848 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2011      	movs	r0, #17
 8000c60:	f002 f827 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c64:	2011      	movs	r0, #17
 8000c66:	f002 f840 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	202f      	movs	r0, #47	; 0x2f
 8000c70:	f002 f81f 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c74:	202f      	movs	r0, #47	; 0x2f
 8000c76:	f002 f838 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f002 f817 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f002 f830 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	203b      	movs	r0, #59	; 0x3b
 8000c90:	f002 f80f 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c94:	203b      	movs	r0, #59	; 0x3b
 8000c96:	f002 f828 	bl	8002cea <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a4a      	ldr	r2, [pc, #296]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <MX_GPIO_Init+0x144>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a44      	ldr	r2, [pc, #272]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b42      	ldr	r3, [pc, #264]	; (8000dec <MX_GPIO_Init+0x144>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_GPIO_Init+0x144>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b39      	ldr	r3, [pc, #228]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_GPIO_Init+0x144>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d54:	4826      	ldr	r0, [pc, #152]	; (8000df0 <MX_GPIO_Init+0x148>)
 8000d56:	f004 f877 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	4825      	ldr	r0, [pc, #148]	; (8000df4 <MX_GPIO_Init+0x14c>)
 8000d60:	f004 f872 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_GPIO_Init+0x150>)
 8000d7c:	f003 feb8 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d80:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_GPIO_Init+0x148>)
 8000d9a:	f003 fea9 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	480f      	ldr	r0, [pc, #60]	; (8000df4 <MX_GPIO_Init+0x14c>)
 8000db6:	f003 fe9b 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_GPIO_Init+0x14c>)
 8000dce:	f003 fe8f 	bl	8004af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2028      	movs	r0, #40	; 0x28
 8000dd8:	f001 ff6b 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f001 ff84 	bl	8002cea <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3730      	adds	r7, #48	; 0x30
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40021800 	.word	0x40021800
 8000df8:	40020800 	.word	0x40020800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_ADC_MspInit+0x84>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12b      	bne.n	8000eca <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_ADC_MspInit+0x88>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_ADC_MspInit+0x88>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_ADC_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_ADC_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_ADC_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_ADC_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <HAL_ADC_MspInit+0x8c>)
 8000eb6:	f003 fe1b 	bl	8004af0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2012      	movs	r0, #18
 8000ec0:	f001 fef7 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ec4:	2012      	movs	r0, #18
 8000ec6:	f001 ff10 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_DAC_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12b      	bne.n	8000f5a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_DAC_MspInit+0x88>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_DAC_MspInit+0x88>)
 8000f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_DAC_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_DAC_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <HAL_DAC_MspInit+0x88>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_DAC_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f32:	2310      	movs	r3, #16
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_DAC_MspInit+0x8c>)
 8000f46:	f003 fdd3 	bl	8004af0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2036      	movs	r0, #54	; 0x36
 8000f50:	f001 feaf 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f54:	2036      	movs	r0, #54	; 0x36
 8000f56:	f001 fec8 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40007400 	.word	0x40007400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ac      	sub	sp, #176	; 0xb0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	2284      	movs	r2, #132	; 0x84
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f016 fc49 	bl	8017828 <memset>
  if(hi2c->Instance==I2C1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <HAL_I2C_MspInit+0x188>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f040 80b9 	bne.w	8001114 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fd93 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff ff1e 	bl	8000dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <HAL_I2C_MspInit+0x18c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <HAL_I2C_MspInit+0x18c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_I2C_MspInit+0x18c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000fd8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4840      	ldr	r0, [pc, #256]	; (8001100 <HAL_I2C_MspInit+0x190>)
 8001000:	f003 fd76 	bl	8004af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001004:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_I2C_MspInit+0x18c>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a3c      	ldr	r2, [pc, #240]	; (80010fc <HAL_I2C_MspInit+0x18c>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_I2C_MspInit+0x18c>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_I2C_MspInit+0x194>)
 800101e:	4a3a      	ldr	r2, [pc, #232]	; (8001108 <HAL_I2C_MspInit+0x198>)
 8001020:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001022:	4b38      	ldr	r3, [pc, #224]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001028:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_I2C_MspInit+0x194>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <HAL_I2C_MspInit+0x194>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800105c:	4829      	ldr	r0, [pc, #164]	; (8001104 <HAL_I2C_MspInit+0x194>)
 800105e:	f001 ff3d 	bl	8002edc <HAL_DMA_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001068:	f7ff fec8 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001070:	63da      	str	r2, [r3, #60]	; 0x3c
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <HAL_I2C_MspInit+0x194>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_I2C_MspInit+0x19c>)
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_I2C_MspInit+0x1a0>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <HAL_I2C_MspInit+0x19c>)
 8001080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001084:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_I2C_MspInit+0x19c>)
 8001088:	2240      	movs	r2, #64	; 0x40
 800108a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_I2C_MspInit+0x19c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_I2C_MspInit+0x19c>)
 8001094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_I2C_MspInit+0x19c>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010ba:	f001 ff0f 	bl	8002edc <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80010c4:	f7ff fe9a 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_I2C_MspInit+0x19c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	201f      	movs	r0, #31
 80010da:	f001 fdea 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010de:	201f      	movs	r0, #31
 80010e0:	f001 fe03 	bl	8002cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2020      	movs	r0, #32
 80010ea:	f001 fde2 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010ee:	2020      	movs	r0, #32
 80010f0:	f001 fdfb 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010f4:	e0be      	b.n	8001274 <HAL_I2C_MspInit+0x304>
 80010f6:	bf00      	nop
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400
 8001104:	200002f0 	.word	0x200002f0
 8001108:	40026010 	.word	0x40026010
 800110c:	20000350 	.word	0x20000350
 8001110:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_I2C_MspInit+0x30c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	f040 80aa 	bne.w	8001274 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001124:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4618      	mov	r0, r3
 8001132:	f006 fcd3 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 800113c:	f7ff fe5e 	bl	8000dfc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <HAL_I2C_MspInit+0x310>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_I2C_MspInit+0x310>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_I2C_MspInit+0x310>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001158:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800115c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001172:	2304      	movs	r3, #4
 8001174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800117c:	4619      	mov	r1, r3
 800117e:	4841      	ldr	r0, [pc, #260]	; (8001284 <HAL_I2C_MspInit+0x314>)
 8001180:	f003 fcb6 	bl	8004af0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001184:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <HAL_I2C_MspInit+0x310>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a3d      	ldr	r2, [pc, #244]	; (8001280 <HAL_I2C_MspInit+0x310>)
 800118a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_I2C_MspInit+0x310>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <HAL_I2C_MspInit+0x318>)
 800119e:	4a3b      	ldr	r2, [pc, #236]	; (800128c <HAL_I2C_MspInit+0x31c>)
 80011a0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011a4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011a8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b37      	ldr	r3, [pc, #220]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b34      	ldr	r3, [pc, #208]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011bc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011dc:	482a      	ldr	r0, [pc, #168]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011de:	f001 fe7d 	bl	8002edc <HAL_DMA_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80011e8:	f7ff fe08 	bl	8000dfc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011f2:	4a25      	ldr	r2, [pc, #148]	; (8001288 <HAL_I2C_MspInit+0x318>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_I2C_MspInit+0x320>)
 80011fa:	4a26      	ldr	r2, [pc, #152]	; (8001294 <HAL_I2C_MspInit+0x324>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001200:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001204:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001208:	2240      	movs	r2, #64	; 0x40
 800120a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_I2C_MspInit+0x320>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001218:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_I2C_MspInit+0x320>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_I2C_MspInit+0x320>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001238:	4815      	ldr	r0, [pc, #84]	; (8001290 <HAL_I2C_MspInit+0x320>)
 800123a:	f001 fe4f 	bl	8002edc <HAL_DMA_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001244:	f7ff fdda 	bl	8000dfc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_I2C_MspInit+0x320>)
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_I2C_MspInit+0x320>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2021      	movs	r0, #33	; 0x21
 800125a:	f001 fd2a 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800125e:	2021      	movs	r0, #33	; 0x21
 8001260:	f001 fd43 	bl	8002cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2022      	movs	r0, #34	; 0x22
 800126a:	f001 fd22 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800126e:	2022      	movs	r0, #34	; 0x22
 8001270:	f001 fd3b 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 8001274:	bf00      	nop
 8001276:	37b0      	adds	r7, #176	; 0xb0
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40005800 	.word	0x40005800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020400 	.word	0x40020400
 8001288:	200003b0 	.word	0x200003b0
 800128c:	40026040 	.word	0x40026040
 8001290:	20000410 	.word	0x20000410
 8001294:	400260b8 	.word	0x400260b8

08001298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a56      	ldr	r2, [pc, #344]	; (8001410 <HAL_SPI_MspInit+0x178>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	f040 80ba 	bne.w	8001430 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	4a54      	ldr	r2, [pc, #336]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c6:	6453      	str	r3, [r2, #68]	; 0x44
 80012c8:	4b52      	ldr	r3, [pc, #328]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b49      	ldr	r3, [pc, #292]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_SPI_MspInit+0x17c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001314:	2305      	movs	r3, #5
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	483e      	ldr	r0, [pc, #248]	; (8001418 <HAL_SPI_MspInit+0x180>)
 8001320:	f003 fbe6 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001324:	2320      	movs	r3, #32
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001334:	2305      	movs	r3, #5
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4837      	ldr	r0, [pc, #220]	; (800141c <HAL_SPI_MspInit+0x184>)
 8001340:	f003 fbd6 	bl	8004af0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001346:	4a37      	ldr	r2, [pc, #220]	; (8001424 <HAL_SPI_MspInit+0x18c>)
 8001348:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800134a:	4b35      	ldr	r3, [pc, #212]	; (8001420 <HAL_SPI_MspInit+0x188>)
 800134c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001350:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_SPI_MspInit+0x188>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001364:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HAL_SPI_MspInit+0x188>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_SPI_MspInit+0x188>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001384:	4826      	ldr	r0, [pc, #152]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001386:	f001 fda9 	bl	8002edc <HAL_DMA_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001390:	f7ff fd34 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_SPI_MspInit+0x188>)
 8001398:	659a      	str	r2, [r3, #88]	; 0x58
 800139a:	4a21      	ldr	r2, [pc, #132]	; (8001420 <HAL_SPI_MspInit+0x188>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013a2:	4a22      	ldr	r2, [pc, #136]	; (800142c <HAL_SPI_MspInit+0x194>)
 80013a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013a8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013e2:	f001 fd7b 	bl	8002edc <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80013ec:	f7ff fd06 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_SPI_MspInit+0x190>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2023      	movs	r0, #35	; 0x23
 8001402:	f001 fc56 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001406:	2023      	movs	r0, #35	; 0x23
 8001408:	f001 fc6f 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800140c:	e0bc      	b.n	8001588 <HAL_SPI_MspInit+0x2f0>
 800140e:	bf00      	nop
 8001410:	40013000 	.word	0x40013000
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	20000538 	.word	0x20000538
 8001424:	40026410 	.word	0x40026410
 8001428:	20000598 	.word	0x20000598
 800142c:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_SPI_MspInit+0x2f8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	f040 80a6 	bne.w	8001588 <HAL_SPI_MspInit+0x2f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146c:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b46      	ldr	r3, [pc, #280]	; (8001594 <HAL_SPI_MspInit+0x2fc>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001484:	230c      	movs	r3, #12
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001494:	2305      	movs	r3, #5
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	483e      	ldr	r0, [pc, #248]	; (8001598 <HAL_SPI_MspInit+0x300>)
 80014a0:	f003 fb26 	bl	8004af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a4:	2308      	movs	r3, #8
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b4:	2305      	movs	r3, #5
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4837      	ldr	r0, [pc, #220]	; (800159c <HAL_SPI_MspInit+0x304>)
 80014c0:	f003 fb16 	bl	8004af0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_SPI_MspInit+0x30c>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001502:	4827      	ldr	r0, [pc, #156]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 8001504:	f001 fcea 	bl	8002edc <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_SPI_MspInit+0x27a>
      Error_Handler();
 800150e:	f7ff fc75 	bl	8000dfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 8001516:	659a      	str	r2, [r3, #88]	; 0x58
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_SPI_MspInit+0x308>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_SPI_MspInit+0x314>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 800155e:	f001 fcbd 	bl	8002edc <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_SPI_MspInit+0x2d4>
      Error_Handler();
 8001568:	f7ff fc48 	bl	8000dfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
 8001572:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_SPI_MspInit+0x310>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2024      	movs	r0, #36	; 0x24
 800157e:	f001 fb98 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001582:	2024      	movs	r0, #36	; 0x24
 8001584:	f001 fbb1 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3738      	adds	r7, #56	; 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40003800 	.word	0x40003800
 8001594:	40023800 	.word	0x40023800
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	200005f8 	.word	0x200005f8
 80015a4:	40026058 	.word	0x40026058
 80015a8:	20000658 	.word	0x20000658
 80015ac:	40026070 	.word	0x40026070

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c0:	d113      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201c      	movs	r0, #28
 80015e0:	f001 fb67 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e4:	201c      	movs	r0, #28
 80015e6:	f001 fb80 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0b0      	sub	sp, #192	; 0xc0
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001614:	2284      	movs	r2, #132	; 0x84
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f016 f905 	bl	8017828 <memset>
  if(huart->Instance==UART4)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a81      	ldr	r2, [pc, #516]	; (8001828 <HAL_UART_MspInit+0x230>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d145      	bne.n	80016b4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800162e:	2300      	movs	r3, #0
 8001630:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	4618      	mov	r0, r3
 8001638:	f006 fa50 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001642:	f7ff fbdb 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001646:	4b79      	ldr	r3, [pc, #484]	; (800182c <HAL_UART_MspInit+0x234>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a78      	ldr	r2, [pc, #480]	; (800182c <HAL_UART_MspInit+0x234>)
 800164c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_UART_MspInit+0x234>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b73      	ldr	r3, [pc, #460]	; (800182c <HAL_UART_MspInit+0x234>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a72      	ldr	r2, [pc, #456]	; (800182c <HAL_UART_MspInit+0x234>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_UART_MspInit+0x234>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001676:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800167a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001690:	2308      	movs	r3, #8
 8001692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800169a:	4619      	mov	r1, r3
 800169c:	4864      	ldr	r0, [pc, #400]	; (8001830 <HAL_UART_MspInit+0x238>)
 800169e:	f003 fa27 	bl	8004af0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2034      	movs	r0, #52	; 0x34
 80016a8:	f001 fb03 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016ac:	2034      	movs	r0, #52	; 0x34
 80016ae:	f001 fb1c 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016b2:	e0b5      	b.n	8001820 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==UART5)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HAL_UART_MspInit+0x23c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d166      	bne.n	800178c <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016cc:	4618      	mov	r0, r3
 80016ce:	f006 fa05 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80016d8:	f7ff fb90 	bl	8000dfc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_UART_MspInit+0x234>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_UART_MspInit+0x234>)
 80016e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_UART_MspInit+0x234>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_UART_MspInit+0x234>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_UART_MspInit+0x234>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_UART_MspInit+0x234>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_UART_MspInit+0x234>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a46      	ldr	r2, [pc, #280]	; (800182c <HAL_UART_MspInit+0x234>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_UART_MspInit+0x234>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001732:	2301      	movs	r3, #1
 8001734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800173e:	2308      	movs	r3, #8
 8001740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001748:	4619      	mov	r1, r3
 800174a:	4839      	ldr	r0, [pc, #228]	; (8001830 <HAL_UART_MspInit+0x238>)
 800174c:	f003 f9d0 	bl	8004af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001750:	2304      	movs	r3, #4
 8001752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175c:	2301      	movs	r3, #1
 800175e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001768:	2308      	movs	r3, #8
 800176a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001772:	4619      	mov	r1, r3
 8001774:	4830      	ldr	r0, [pc, #192]	; (8001838 <HAL_UART_MspInit+0x240>)
 8001776:	f003 f9bb 	bl	8004af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2035      	movs	r0, #53	; 0x35
 8001780:	f001 fa97 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001784:	2035      	movs	r0, #53	; 0x35
 8001786:	f001 fab0 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 800178a:	e049      	b.n	8001820 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	; (800183c <HAL_UART_MspInit+0x244>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d144      	bne.n	8001820 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800179c:	2300      	movs	r3, #0
 800179e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 f999 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80017b0:	f7ff fb24 	bl	8000dfc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_UART_MspInit+0x234>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_UART_MspInit+0x234>)
 80017ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_UART_MspInit+0x234>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_UART_MspInit+0x234>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_UART_MspInit+0x234>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_MspInit+0x234>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017fe:	2307      	movs	r3, #7
 8001800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001808:	4619      	mov	r1, r3
 800180a:	480b      	ldr	r0, [pc, #44]	; (8001838 <HAL_UART_MspInit+0x240>)
 800180c:	f003 f970 	bl	8004af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2027      	movs	r0, #39	; 0x27
 8001816:	f001 fa4c 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800181a:	2027      	movs	r0, #39	; 0x27
 800181c:	f001 fa65 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	37c0      	adds	r7, #192	; 0xc0
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40004c00 	.word	0x40004c00
 800182c:	40023800 	.word	0x40023800
 8001830:	40020800 	.word	0x40020800
 8001834:	40005000 	.word	0x40005000
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40004800 	.word	0x40004800

08001840 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ac      	sub	sp, #176	; 0xb0
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	2284      	movs	r2, #132	; 0x84
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f015 ffe1 	bl	8017828 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186e:	d159      	bne.n	8001924 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001874:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f92b 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800188c:	f7ff fab6 	bl	8000dfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_PCD_MspInit+0xec>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c2:	230a      	movs	r3, #10
 80018c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4818      	ldr	r0, [pc, #96]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018d0:	f003 f90e 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018f0:	f003 f8fe 	bl	8004af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_PCD_MspInit+0xec>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_PCD_MspInit+0xec>)
 80018fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_PCD_MspInit+0xec>)
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6453      	str	r3, [r2, #68]	; 0x44
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_PCD_MspInit+0xec>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	37b0      	adds	r7, #176	; 0xb0
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fb50 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Stream0_IRQHandler+0x10>)
 800198e:	f001 fc45 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002f0 	.word	0x200002f0

0800199c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DMA1_Stream2_IRQHandler+0x10>)
 80019a2:	f001 fc3b 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200003b0 	.word	0x200003b0

080019b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Stream3_IRQHandler+0x10>)
 80019b6:	f001 fc31 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200005f8 	.word	0x200005f8

080019c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DMA1_Stream4_IRQHandler+0x10>)
 80019ca:	f001 fc27 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000658 	.word	0x20000658

080019d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA1_Stream6_IRQHandler+0x10>)
 80019de:	f001 fc1d 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000350 	.word	0x20000350

080019ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <ADC_IRQHandler+0x10>)
 80019f2:	f000 fcf8 	bl	80023e6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001ec 	.word	0x200001ec

08001a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM2_IRQHandler+0x10>)
 8001a06:	f007 fb87 	bl	8009118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200006b8 	.word	0x200006b8

08001a14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <I2C1_EV_IRQHandler+0x10>)
 8001a1a:	f003 fe49 	bl	80056b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000248 	.word	0x20000248

08001a28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <I2C1_ER_IRQHandler+0x10>)
 8001a2e:	f003 fe59 	bl	80056e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000248 	.word	0x20000248

08001a3c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <I2C2_EV_IRQHandler+0x10>)
 8001a42:	f003 fe35 	bl	80056b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000029c 	.word	0x2000029c

08001a50 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <I2C2_ER_IRQHandler+0x10>)
 8001a56:	f003 fe45 	bl	80056e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000029c 	.word	0x2000029c

08001a64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <SPI1_IRQHandler+0x10>)
 8001a6a:	f006 fe5f 	bl	800872c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000470 	.word	0x20000470

08001a78 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <SPI2_IRQHandler+0x10>)
 8001a7e:	f006 fe55 	bl	800872c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200004d4 	.word	0x200004d4

08001a8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <USART3_IRQHandler+0x10>)
 8001a92:	f008 f971 	bl	8009d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000814 	.word	0x20000814

08001aa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001aa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aa8:	f003 fa02 	bl	8004eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream7_IRQHandler+0x10>)
 8001ab6:	f001 fbb1 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000410 	.word	0x20000410

08001ac4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <UART4_IRQHandler+0x10>)
 8001aca:	f008 f955 	bl	8009d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000704 	.word	0x20000704

08001ad8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <UART5_IRQHandler+0x10>)
 8001ade:	f008 f94b 	bl	8009d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000078c 	.word	0x2000078c

08001aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM6_DAC_IRQHandler+0x10>)
 8001af2:	f001 f936 	bl	8002d62 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000234 	.word	0x20000234

08001b00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA2_Stream0_IRQHandler+0x10>)
 8001b06:	f001 fb89 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000538 	.word	0x20000538

08001b14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <DMA2_Stream3_IRQHandler+0x10>)
 8001b1a:	f001 fb7f 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000598 	.word	0x20000598

08001b28 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <ETH_IRQHandler+0x10>)
 8001b2e:	f002 f8f9 	bl	8003d24 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20005784 	.word	0x20005784

08001b3c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <ETH_WKUP_IRQHandler+0x10>)
 8001b42:	f002 f8ef 	bl	8003d24 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20005784 	.word	0x20005784

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:

int _kill(int pid, int sig)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <_kill+0x20>)
 8001b6c:	2216      	movs	r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000906c 	.word	0x2000906c

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe5 	bl	8001b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc0:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_isatty>:

int _isatty(int file)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d205      	bcs.n	8001c3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <_sbrk+0x6c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	20050000 	.word	0x20050000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	20000da4 	.word	0x20000da4
 8001c68:	20009080 	.word	0x20009080
 8001c6c:	2000906c 	.word	0x2000906c

08001c70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb0:	4c0b      	ldr	r4, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cbe:	f7ff ffd7 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f015 fd6f 	bl	80177a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7fe fc7d 	bl	80005c4 <main>
  bx  lr    
 8001cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001cd8:	0801b7f8 	.word	0x0801b7f8
  ldr r2, =_sbss
 8001cdc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001ce0:	2000907c 	.word	0x2000907c

08001ce4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <CAN1_RX0_IRQHandler>

08001ce6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <LAN8742_RegisterBusIO+0x28>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <LAN8742_RegisterBusIO+0x28>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <LAN8742_RegisterBusIO+0x28>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e014      	b.n	8001d3e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d17c      	bne.n	8001e64 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e01c      	b.n	8001dbe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f107 0208 	add.w	r2, r7, #8
 8001d8c:	2112      	movs	r1, #18
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	4798      	blx	r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da03      	bge.n	8001da0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001d98:	f06f 0304 	mvn.w	r3, #4
 8001d9c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001d9e:	e00b      	b.n	8001db8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d105      	bne.n	8001db8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
         break;
 8001db6:	e005      	b.n	8001dc4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b1f      	cmp	r3, #31
 8001dc2:	d9df      	bls.n	8001d84 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b1f      	cmp	r3, #31
 8001dca:	d902      	bls.n	8001dd2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001dcc:	f06f 0302 	mvn.w	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d145      	bne.n	8001e64 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6810      	ldr	r0, [r2, #0]
 8001de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001de4:	2100      	movs	r1, #0
 8001de6:	4798      	blx	r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db37      	blt.n	8001e5e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6810      	ldr	r0, [r2, #0]
 8001df6:	f107 0208 	add.w	r2, r7, #8
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4798      	blx	r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db28      	blt.n	8001e56 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4798      	blx	r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e0e:	e01c      	b.n	8001e4a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4798      	blx	r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e22:	d80e      	bhi.n	8001e42 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6810      	ldr	r0, [r2, #0]
 8001e2c:	f107 0208 	add.w	r2, r7, #8
 8001e30:	2100      	movs	r1, #0
 8001e32:	4798      	blx	r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da07      	bge.n	8001e4a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001e3a:	f06f 0304 	mvn.w	r3, #4
 8001e3e:	613b      	str	r3, [r7, #16]
                 break;
 8001e40:	e010      	b.n	8001e64 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001e42:	f06f 0301 	mvn.w	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
               break;
 8001e48:	e00c      	b.n	8001e64 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1dd      	bne.n	8001e10 <LAN8742_Init+0xc6>
 8001e54:	e006      	b.n	8001e64 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001e56:	f06f 0304 	mvn.w	r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e002      	b.n	8001e64 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001e5e:	f06f 0303 	mvn.w	r3, #3
 8001e62:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d112      	bne.n	8001e90 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4798      	blx	r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001e74:	bf00      	nop
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4798      	blx	r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e88:	d9f5      	bls.n	8001e76 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001e90:	693b      	ldr	r3, [r7, #16]
 }
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6810      	ldr	r0, [r2, #0]
 8001eae:	f107 020c 	add.w	r2, r7, #12
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4798      	blx	r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da02      	bge.n	8001ec2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ebc:	f06f 0304 	mvn.w	r3, #4
 8001ec0:	e06e      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6810      	ldr	r0, [r2, #0]
 8001eca:	f107 020c 	add.w	r2, r7, #12
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4798      	blx	r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da02      	bge.n	8001ede <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ed8:	f06f 0304 	mvn.w	r3, #4
 8001edc:	e060      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e059      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6810      	ldr	r0, [r2, #0]
 8001ef4:	f107 020c 	add.w	r2, r7, #12
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4798      	blx	r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da02      	bge.n	8001f08 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f02:	f06f 0304 	mvn.w	r3, #4
 8001f06:	e04b      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d11b      	bne.n	8001f4a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <LAN8742_GetLinkState+0x90>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f26:	2302      	movs	r3, #2
 8001f28:	e03a      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e033      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f42:	2304      	movs	r3, #4
 8001f44:	e02c      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f46:	2305      	movs	r3, #5
 8001f48:	e02a      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6810      	ldr	r0, [r2, #0]
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	211f      	movs	r1, #31
 8001f58:	4798      	blx	r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da02      	bge.n	8001f66 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f60:	f06f 0304 	mvn.w	r3, #4
 8001f64:	e01c      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f70:	2306      	movs	r3, #6
 8001f72:	e015      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 031c 	and.w	r3, r3, #28
 8001f7a:	2b18      	cmp	r3, #24
 8001f7c:	d101      	bne.n	8001f82 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e00e      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 031c 	and.w	r3, r3, #28
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d101      	bne.n	8001f90 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e007      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 031c 	and.w	r3, r3, #28
 8001f96:	2b14      	cmp	r3, #20
 8001f98:	d101      	bne.n	8001f9e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e000      	b.n	8001fa0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f9e:	2305      	movs	r3, #5
    }				
  }
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 fe75 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f806 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7fe ff26 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fe8f 	bl	8002d06 <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 fe57 	bl	8002cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	20000008 	.word	0x20000008
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008
 8002048:	20000da8 	.word	0x20000da8

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000da8 	.word	0x20000da8

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff ffee 	bl	800204c <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_Delay+0x44>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffde 	bl	800204c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e031      	b.n	8002126 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fec0 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_ADC_Init+0x84>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fbfa 	bl	80028f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
 8002116:	e001      	b.n	800211c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	ffffeefd 	.word	0xffffeefd

08002134 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_Start+0x1a>
 800214a:	2302      	movs	r3, #2
 800214c:	e0ad      	b.n	80022aa <HAL_ADC_Start+0x176>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d018      	beq.n	8002196 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002174:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_ADC_Start+0x184>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_ADC_Start+0x188>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9a      	lsrs	r2, r3, #18
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002188:	e002      	b.n	8002190 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3b01      	subs	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d175      	bne.n	8002290 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <HAL_ADC_Start+0x18c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d106      	bne.n	80021ee <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f023 0206 	bic.w	r2, r3, #6
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002204:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_ADC_Start+0x190>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d143      	bne.n	80022a8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e03a      	b.n	80022a8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <HAL_ADC_Start+0x194>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10e      	bne.n	800225a <HAL_ADC_Start+0x126>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002258:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_ADC_Start+0x190>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d120      	bne.n	80022a8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_ADC_Start+0x198>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d11b      	bne.n	80022a8 <HAL_ADC_Start+0x174>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d114      	bne.n	80022a8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e00b      	b.n	80022a8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f043 0210 	orr.w	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83
 80022c0:	fffff8fe 	.word	0xfffff8fe
 80022c4:	40012300 	.word	0x40012300
 80022c8:	40012000 	.word	0x40012000
 80022cc:	40012200 	.word	0x40012200

080022d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ec:	d113      	bne.n	8002316 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fc:	d10b      	bne.n	8002316 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e063      	b.n	80023de <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002316:	f7ff fe99 	bl	800204c <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800231c:	e021      	b.n	8002362 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d01d      	beq.n	8002362 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_ADC_PollForConversion+0x6c>
 800232c:	f7ff fe8e 	bl	800204c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d212      	bcs.n	8002362 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d00b      	beq.n	8002362 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f043 0204 	orr.w	r2, r3, #4
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e03d      	b.n	80023de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d1d6      	bne.n	800231e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0212 	mvn.w	r2, #18
 8002378:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d123      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11f      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d049      	beq.n	80024b0 <HAL_ADC_IRQHandler+0xca>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d046      	beq.n	80024b0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d12b      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d127      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002468:	2b00      	cmp	r3, #0
 800246a:	d119      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0220 	bic.w	r2, r2, #32
 800247a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f014 f93d 	bl	8016720 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0212 	mvn.w	r2, #18
 80024ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d057      	beq.n	8002576 <HAL_ADC_IRQHandler+0x190>
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d054      	beq.n	8002576 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d139      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800250a:	2b00      	cmp	r3, #0
 800250c:	d12b      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d124      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11d      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d119      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002540:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fabe 	bl	8002ae8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 020c 	mvn.w	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_ADC_IRQHandler+0x1d6>
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d014      	beq.n	80025bc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10d      	bne.n	80025bc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f837 	bl	8002620 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0201 	mvn.w	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d015      	beq.n	80025fe <HAL_ADC_IRQHandler+0x218>
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 0202 	orr.w	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0220 	mvn.w	r2, #32
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f820 	bl	8002634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0220 	mvn.w	r2, #32
 80025fc:	601a      	str	r2, [r3, #0]
  }
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x1c>
 8002660:	2302      	movs	r3, #2
 8002662:	e136      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x28a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b09      	cmp	r3, #9
 8002672:	d93a      	bls.n	80026ea <HAL_ADC_ConfigChannel+0xa2>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800267c:	d035      	beq.n	80026ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68d9      	ldr	r1, [r3, #12]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	3b1e      	subs	r3, #30
 8002694:	2207      	movs	r2, #7
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	400a      	ands	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a8d      	ldr	r2, [pc, #564]	; (80028e0 <HAL_ADC_ConfigChannel+0x298>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	061a      	lsls	r2, r3, #24
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c2:	e035      	b.n	8002730 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4403      	add	r3, r0
 80026dc:	3b1e      	subs	r3, #30
 80026de:	409a      	lsls	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e8:	e022      	b.n	8002730 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6919      	ldr	r1, [r3, #16]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	2207      	movs	r2, #7
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43da      	mvns	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	400a      	ands	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6919      	ldr	r1, [r3, #16]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	4618      	mov	r0, r3
 8002720:	4603      	mov	r3, r0
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4403      	add	r3, r0
 8002726:	409a      	lsls	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b06      	cmp	r3, #6
 8002736:	d824      	bhi.n	8002782 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b05      	subs	r3, #5
 800274a:	221f      	movs	r2, #31
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b05      	subs	r3, #5
 8002774:	fa00 f203 	lsl.w	r2, r0, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
 8002780:	e04c      	b.n	800281c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d824      	bhi.n	80027d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b23      	subs	r3, #35	; 0x23
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b23      	subs	r3, #35	; 0x23
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
 80027d2:	e023      	b.n	800281c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	3b41      	subs	r3, #65	; 0x41
 80027e6:	221f      	movs	r2, #31
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43da      	mvns	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	400a      	ands	r2, r1
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b41      	subs	r3, #65	; 0x41
 8002810:	fa00 f203 	lsl.w	r2, r0, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <HAL_ADC_ConfigChannel+0x29c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1f4>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800282e:	d105      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002836:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800283a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <HAL_ADC_ConfigChannel+0x29c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10f      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x21e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b12      	cmp	r3, #18
 800284c:	d10b      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800284e:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002854:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002858:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002864:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_ADC_ConfigChannel+0x29c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d12b      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x280>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_ADC_ConfigChannel+0x298>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d003      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x23a>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b11      	cmp	r3, #17
 8002880:	d122      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002888:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800288c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002898:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_ADC_ConfigChannel+0x298>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d111      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_ADC_ConfigChannel+0x2a4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_ADC_ConfigChannel+0x2a8>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	10000012 	.word	0x10000012
 80028e4:	40012000 	.word	0x40012000
 80028e8:	40012300 	.word	0x40012300
 80028ec:	20000000 	.word	0x20000000
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028fc:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <ADC_Init+0x1ec>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a77      	ldr	r2, [pc, #476]	; (8002ae0 <ADC_Init+0x1ec>)
 8002902:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002906:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <ADC_Init+0x1ec>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4973      	ldr	r1, [pc, #460]	; (8002ae0 <ADC_Init+0x1ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	021a      	lsls	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <ADC_Init+0x1f0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	e00f      	b.n	80029ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0202 	bic.w	r2, r2, #2
 80029fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	005a      	lsls	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	3b01      	subs	r3, #1
 8002a48:	035a      	lsls	r2, r3, #13
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e007      	b.n	8002a64 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	051a      	lsls	r2, r3, #20
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aa6:	025a      	lsls	r2, r3, #9
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6899      	ldr	r1, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	029a      	lsls	r2, r3, #10
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40012300 	.word	0x40012300
 8002ae4:	0f000001 	.word	0x0f000001

08002ae8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <__NVIC_SetPriorityGrouping+0x40>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <__NVIC_SetPriorityGrouping+0x40>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00
 8002b40:	05fa0000 	.word	0x05fa0000

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4907      	ldr	r1, [pc, #28]	; (8002b98 <__NVIC_EnableIRQ+0x38>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c68:	d301      	bcc.n	8002c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00f      	b.n	8002c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <SysTick_Config+0x40>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c76:	210f      	movs	r1, #15
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f7ff ff8e 	bl	8002b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <SysTick_Config+0x40>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <SysTick_Config+0x40>)
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000e010 	.word	0xe000e010

08002c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff29 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc4:	f7ff ff3e 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff8e 	bl	8002bf0 <NVIC_EncodePriority>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff5d 	bl	8002b9c <__NVIC_SetPriority>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff31 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffa2 	bl	8002c58 <SysTick_Config>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e014      	b.n	8002d5a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	791b      	ldrb	r3, [r3, #4]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe f8cd 	bl	8000ee0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d120      	bne.n	8002dbc <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d118      	bne.n	8002dbc <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002db4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f82d 	bl	8002e16 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dca:	d120      	bne.n	8002e0e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dda:	d118      	bne.n	8002e0e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f043 0202 	orr.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002e06:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f85d 	bl	8002ec8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	795b      	ldrb	r3, [r3, #5]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_DAC_ConfigChannel+0x18>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e03c      	b.n	8002ebc <HAL_DAC_ConfigChannel+0x92>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	22c0      	movs	r2, #192	; 0xc0
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff f8b0 	bl	800204c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e099      	b.n	800302c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f18:	e00f      	b.n	8002f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1a:	f7ff f897 	bl	800204c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d908      	bls.n	8002f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e078      	b.n	800302c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e8      	bne.n	8002f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_DMA_Init+0x158>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d117      	bne.n	8002ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fb23 	bl	800362c <DMA_CheckFifoParam>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e016      	b.n	800302c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fada 	bl	80035c0 <DMA_CalcBaseAndBitshift>
 800300c:	4603      	mov	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	223f      	movs	r2, #63	; 0x3f
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f010803f 	.word	0xf010803f

08003038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DMA_Start_IT+0x26>
 800305a:	2302      	movs	r3, #2
 800305c:	e048      	b.n	80030f0 <HAL_DMA_Start_IT+0xb8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d137      	bne.n	80030e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa6c 	bl	8003564 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0216 	orr.w	r2, r2, #22
 80030a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0208 	orr.w	r2, r2, #8
 80030ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e005      	b.n	80030ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
 80030ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003106:	f7fe ffa1 	bl	800204c <HAL_GetTick>
 800310a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d008      	beq.n	800312a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e052      	b.n	80031d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0216 	bic.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_DMA_Abort+0x62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317a:	e013      	b.n	80031a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800317c:	f7fe ff66 	bl	800204c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b05      	cmp	r3, #5
 8003188:	d90c      	bls.n	80031a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e015      	b.n	80031d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e4      	bne.n	800317c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	223f      	movs	r2, #63	; 0x3f
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00c      	b.n	8003210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2205      	movs	r2, #5
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003228:	4b8e      	ldr	r3, [pc, #568]	; (8003464 <HAL_DMA_IRQHandler+0x248>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a8e      	ldr	r2, [pc, #568]	; (8003468 <HAL_DMA_IRQHandler+0x24c>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0a9b      	lsrs	r3, r3, #10
 8003234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2208      	movs	r2, #8
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01a      	beq.n	8003288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	2208      	movs	r2, #8
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	2201      	movs	r2, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2201      	movs	r2, #1
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	2204      	movs	r2, #4
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2204      	movs	r2, #4
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	2210      	movs	r2, #16
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d043      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03c      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2210      	movs	r2, #16
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d024      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
 800334a:	e01f      	b.n	800338c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
 800335c:	e016      	b.n	800338c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0208 	bic.w	r2, r2, #8
 800337a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2220      	movs	r2, #32
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 808f 	beq.w	80034bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8087 	beq.w	80034bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2220      	movs	r2, #32
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d136      	bne.n	8003434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0216 	bic.w	r2, r2, #22
 80033d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <HAL_DMA_IRQHandler+0x1da>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0208 	bic.w	r2, r2, #8
 8003404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	223f      	movs	r2, #63	; 0x3f
 800340c:	409a      	lsls	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	2b00      	cmp	r3, #0
 8003428:	d07e      	beq.n	8003528 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
        }
        return;
 8003432:	e079      	b.n	8003528 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	2b00      	cmp	r3, #0
 8003456:	d031      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
 8003460:	e02c      	b.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000
 8003468:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e01e      	b.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10f      	bne.n	80034ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0210 	bic.w	r2, r2, #16
 800349a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d032      	beq.n	800352a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d307      	bcc.n	8003504 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f2      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x2cc>
 8003502:	e000      	b.n	8003506 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003504:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	e000      	b.n	800352a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003528:	bf00      	nop
    }
  }
}
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353e:	b2db      	uxtb	r3, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003580:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d108      	bne.n	80035a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035a2:	e007      	b.n	80035b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	3b10      	subs	r3, #16
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <DMA_CalcBaseAndBitshift+0x60>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <DMA_CalcBaseAndBitshift+0x64>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d908      	bls.n	8003600 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <DMA_CalcBaseAndBitshift+0x68>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	1d1a      	adds	r2, r3, #4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	; 0x58
 80035fe:	e006      	b.n	800360e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <DMA_CalcBaseAndBitshift+0x68>)
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	aaaaaaab 	.word	0xaaaaaaab
 8003624:	0801b5a8 	.word	0x0801b5a8
 8003628:	fffffc00 	.word	0xfffffc00

0800362c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d11f      	bne.n	8003686 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d856      	bhi.n	80036fa <DMA_CheckFifoParam+0xce>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <DMA_CheckFifoParam+0x28>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003665 	.word	0x08003665
 8003658:	08003677 	.word	0x08003677
 800365c:	08003665 	.word	0x08003665
 8003660:	080036fb 	.word	0x080036fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d046      	beq.n	80036fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003674:	e043      	b.n	80036fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800367e:	d140      	bne.n	8003702 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e03d      	b.n	8003702 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368e:	d121      	bne.n	80036d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d837      	bhi.n	8003706 <DMA_CheckFifoParam+0xda>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <DMA_CheckFifoParam+0x70>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036b3 	.word	0x080036b3
 80036a4:	080036ad 	.word	0x080036ad
 80036a8:	080036c5 	.word	0x080036c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e030      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d025      	beq.n	800370a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c2:	e022      	b.n	800370a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036cc:	d11f      	bne.n	800370e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036d2:	e01c      	b.n	800370e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d903      	bls.n	80036e2 <DMA_CheckFifoParam+0xb6>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d003      	beq.n	80036e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036e0:	e018      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      break;
 80036e6:	e015      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e00b      	b.n	8003712 <DMA_CheckFifoParam+0xe6>
      break;
 80036fa:	bf00      	nop
 80036fc:	e00a      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
 8003700:	e008      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      break;
 8003702:	bf00      	nop
 8003704:	e006      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      break;
 8003706:	bf00      	nop
 8003708:	e004      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
 800370c:	e002      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      break;   
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
    }
  } 
  
  return status; 
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop

08003724 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06a      	b.n	800380c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2223      	movs	r2, #35	; 0x23
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f008 fb97 	bl	800be7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_ETH_Init+0xf0>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a30      	ldr	r2, [pc, #192]	; (8003814 <HAL_ETH_Init+0xf0>)
 8003754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_ETH_Init+0xf0>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_ETH_Init+0xf4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <HAL_ETH_Init+0xf4>)
 800376c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003770:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_ETH_Init+0xf4>)
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4927      	ldr	r1, [pc, #156]	; (8003818 <HAL_ETH_Init+0xf4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_ETH_Init+0xf4>)
 8003782:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800379a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800379c:	f7fe fc56 	bl	800204c <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80037a2:	e011      	b.n	80037c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80037a4:	f7fe fc52 	bl	800204c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037b2:	d909      	bls.n	80037c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2204      	movs	r2, #4
 80037b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	22e0      	movs	r2, #224	; 0xe0
 80037c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e021      	b.n	800380c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e4      	bne.n	80037a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fee4 	bl	80045a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 ff8b 	bl	80046fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 ffe1 	bl	80047ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	461a      	mov	r2, r3
 80037f2:	2100      	movs	r1, #0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 ff49 	bl	800468c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2210      	movs	r2, #16
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	40013800 	.word	0x40013800

0800381c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382a:	2b10      	cmp	r3, #16
 800382c:	d150      	bne.n	80038d0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2223      	movs	r2, #35	; 0x23
 8003832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f9fd 	bl	8003c3c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0208 	orr.w	r2, r2, #8
 8003850:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800385a:	2001      	movs	r0, #1
 800385c:	f7fe fc02 	bl	8002064 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0204 	orr.w	r2, r2, #4
 8003876:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003880:	2001      	movs	r0, #1
 8003882:	f7fe fbef 	bl	8002064 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fd2a 	bl	80042e8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038aa:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038c2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2223      	movs	r2, #35	; 0x23
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e8:	2b23      	cmp	r3, #35	; 0x23
 80038ea:	d14a      	bne.n	8003982 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2223      	movs	r2, #35	; 0x23
 80038f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800390a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	f023 0302 	bic.w	r3, r3, #2
 800391e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003922:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800393c:	2001      	movs	r0, #1
 800393e:	f7fe fb91 	bl	8002064 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fccc 	bl	80042e8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0208 	bic.w	r2, r2, #8
 800395e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003968:	2001      	movs	r0, #1
 800396a:	f7fe fb7b 	bl	8002064 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2210      	movs	r2, #16
 800397a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e07c      	b.n	8003aac <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b8:	2b23      	cmp	r3, #35	; 0x23
 80039ba:	d176      	bne.n	8003aaa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80039bc:	2200      	movs	r2, #0
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 ff61 	bl	8004888 <ETH_Prepare_Tx_Descriptors>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e065      	b.n	8003aac <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039e0:	f3bf 8f4f 	dsb	sy
}
 80039e4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3206      	adds	r2, #6
 80039ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d904      	bls.n	8003a10 <HAL_ETH_Transmit+0x84>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	1f1a      	subs	r2, r3, #4
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3106      	adds	r1, #6
 8003a1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a24:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003a26:	f7fe fb11 	bl	800204c <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a2c:	e037      	b.n	8003a9e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d011      	beq.n	8003a64 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f043 0208 	orr.w	r2, r3, #8
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e023      	b.n	8003aac <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d018      	beq.n	8003a9e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a6c:	f7fe faee 	bl	800204c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <HAL_ETH_Transmit+0xf6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f043 0204 	orr.w	r2, r3, #4
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003a98:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e006      	b.n	8003aac <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dbc3      	blt.n	8003a2e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0a8      	b.n	8003c32 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae6:	2b23      	cmp	r3, #35	; 0x23
 8003ae8:	d001      	beq.n	8003aee <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0a1      	b.n	8003c32 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	3212      	adds	r2, #18
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b04:	f1c3 0304 	rsb	r3, r3, #4
 8003b08:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003b0a:	e06a      	b.n	8003be2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <HAL_ETH_ReadData+0x88>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d040      	beq.n	8003bbe <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003b70:	3b04      	subs	r3, #4
 8003b72:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003b98:	461a      	mov	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f008 fb3f 	bl	800c220 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	441a      	add	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d902      	bls.n	8003bd0 <HAL_ETH_ReadData+0x11c>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3b04      	subs	r3, #4
 8003bce:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	3212      	adds	r2, #18
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db06      	blt.n	8003bf8 <HAL_ETH_ReadData+0x144>
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d202      	bcs.n	8003bf8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d089      	beq.n	8003b0c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f815 	bl	8003c3c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c50:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	3212      	adds	r2, #18
 8003c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c62:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003c64:	e040      	b.n	8003ce8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d112      	bne.n	8003c94 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	4618      	mov	r0, r3
 8003c74:	f008 faa4 	bl	800c1c0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	74fb      	strb	r3, [r7, #19]
 8003c82:	e007      	b.n	8003c94 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d026      	beq.n	8003ce8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <ETH_UpdateDescriptor+0xe4>)
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	e003      	b.n	8003cb2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003cb0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003cb2:	f3bf 8f5f 	dmb	sy
}
 8003cb6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d902      	bls.n	8003cd6 <ETH_UpdateDescriptor+0x9a>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3b04      	subs	r3, #4
 8003cd4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	3212      	adds	r2, #18
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	617b      	str	r3, [r7, #20]
      desccount--;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <ETH_UpdateDescriptor+0xb8>
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1b8      	bne.n	8003c66 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d00c      	beq.n	8003d18 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d06:	461a      	mov	r2, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	800045f8 	.word	0x800045f8

08003d24 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d112      	bne.n	8003d64 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d109      	bne.n	8003d64 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_ETH_IRQHandler+0x178>)
 8003d5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8ac 	bl	8003ebc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d113      	bne.n	8003d9e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10a      	bne.n	8003d9e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	461a      	mov	r2, r3
 8003d92:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003d96:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f885 	bl	8003ea8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	d14c      	bne.n	8003e4c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc4:	d142      	bne.n	8003e4c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f043 0208 	orr.w	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d11a      	bne.n	8003e20 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <HAL_ETH_IRQHandler+0x17c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003e10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e14:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	22e0      	movs	r2, #224	; 0xe0
 8003e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003e1e:	e012      	b.n	8003e46 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	f248 6380 	movw	r3, #34432	; 0x8680
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f248 6380 	movw	r3, #34432	; 0x8680
 8003e44:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f842 	bl	8003ed0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d10e      	bne.n	8003e78 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f83a 	bl	8003ee4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_ETH_IRQHandler+0x180>)
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <HAL_ETH_IRQHandler+0x180>)
 8003e86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e8a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f833 	bl	8003ef8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	00010040 	.word	0x00010040
 8003ea0:	007e2000 	.word	0x007e2000
 8003ea4:	40013c00 	.word	0x40013c00

08003ea8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 031c 	and.w	r3, r3, #28
 8003f28:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	02db      	lsls	r3, r3, #11
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	019b      	lsls	r3, r3, #6
 8003f3a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0302 	bic.w	r3, r3, #2
 8003f4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003f5c:	f7fe f876 	bl	800204c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f62:	e00d      	b.n	8003f80 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003f64:	f7fe f872 	bl	800204c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d301      	bcc.n	8003f78 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e010      	b.n	8003f9a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ec      	bne.n	8003f64 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 031c 	and.w	r3, r3, #28
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	02db      	lsls	r3, r3, #11
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	019b      	lsls	r3, r3, #6
 8003fd0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ffc:	f7fe f826 	bl	800204c <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004002:	e00d      	b.n	8004020 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004004:	f7fe f822 	bl	800204c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d301      	bcc.n	8004018 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e009      	b.n	800402c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ec      	bne.n	8004004 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d9      	b.n	80041fc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	0c1b      	lsrs	r3, r3, #16
 80041bc:	b29a      	uxth	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e00b      	b.n	8004234 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004222:	2b10      	cmp	r3, #16
 8004224:	d105      	bne.n	8004232 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f883 	bl	8004334 <ETH_SetMACConfig>

    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 031c 	bic.w	r3, r3, #28
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004254:	f003 fc0e 	bl	8007a74 <HAL_RCC_GetHCLKFreq>
 8004258:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d908      	bls.n	8004274 <HAL_ETH_SetMDIOClockRange+0x38>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d804      	bhi.n	8004274 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e027      	b.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d908      	bls.n	800428e <HAL_ETH_SetMDIOClockRange+0x52>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d204      	bcs.n	800428e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f043 030c 	orr.w	r3, r3, #12
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e01a      	b.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4a12      	ldr	r2, [pc, #72]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d303      	bcc.n	800429e <HAL_ETH_SetMDIOClockRange+0x62>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d911      	bls.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d908      	bls.n	80042b8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d804      	bhi.n	80042b8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e005      	b.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f043 0310 	orr.w	r3, r3, #16
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e000      	b.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80042c2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	611a      	str	r2, [r3, #16]
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	01312cff 	.word	0x01312cff
 80042d8:	02160ebf 	.word	0x02160ebf
 80042dc:	03938700 	.word	0x03938700
 80042e0:	05f5e0ff 	.word	0x05f5e0ff
 80042e4:	08f0d17f 	.word	0x08f0d17f

080042e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004306:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800430a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004318:	2001      	movs	r0, #1
 800431a:	f7fd fea3 	bl	8002064 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004328:	6193      	str	r3, [r2, #24]
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4b51      	ldr	r3, [pc, #324]	; (8004490 <ETH_SetMACConfig+0x15c>)
 800434a:	4013      	ands	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	7c1b      	ldrb	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <ETH_SetMACConfig+0x28>
 8004356:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800435a:	e000      	b.n	800435e <ETH_SetMACConfig+0x2a>
 800435c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	7c5b      	ldrb	r3, [r3, #17]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <ETH_SetMACConfig+0x38>
 8004366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800436a:	e000      	b.n	800436e <ETH_SetMACConfig+0x3a>
 800436c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800436e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004374:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	7fdb      	ldrb	r3, [r3, #31]
 800437a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800437c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004382:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	7f92      	ldrb	r2, [r2, #30]
 8004388:	2a00      	cmp	r2, #0
 800438a:	d102      	bne.n	8004392 <ETH_SetMACConfig+0x5e>
 800438c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004390:	e000      	b.n	8004394 <ETH_SetMACConfig+0x60>
 8004392:	2200      	movs	r2, #0
                        macconf->Speed |
 8004394:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	7f1b      	ldrb	r3, [r3, #28]
 800439a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800439c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80043a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80043aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	d102      	bne.n	80043bc <ETH_SetMACConfig+0x88>
 80043b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ba:	e000      	b.n	80043be <ETH_SetMACConfig+0x8a>
 80043bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80043be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	7bdb      	ldrb	r3, [r3, #15]
 80043c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80043c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80043cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043d6:	4313      	orrs	r3, r2
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ee:	2001      	movs	r0, #1
 80043f0:	f7fd fe38 	bl	8002064 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	f64f 7341 	movw	r3, #65345	; 0xff41
 800440a:	4013      	ands	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800441a:	2a00      	cmp	r2, #0
 800441c:	d101      	bne.n	8004422 <ETH_SetMACConfig+0xee>
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	e000      	b.n	8004424 <ETH_SetMACConfig+0xf0>
 8004422:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004424:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800442a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004432:	2a01      	cmp	r2, #1
 8004434:	d101      	bne.n	800443a <ETH_SetMACConfig+0x106>
 8004436:	2208      	movs	r2, #8
 8004438:	e000      	b.n	800443c <ETH_SetMACConfig+0x108>
 800443a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800443c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004444:	2a01      	cmp	r2, #1
 8004446:	d101      	bne.n	800444c <ETH_SetMACConfig+0x118>
 8004448:	2204      	movs	r2, #4
 800444a:	e000      	b.n	800444e <ETH_SetMACConfig+0x11a>
 800444c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800444e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004456:	2a01      	cmp	r2, #1
 8004458:	d101      	bne.n	800445e <ETH_SetMACConfig+0x12a>
 800445a:	2202      	movs	r2, #2
 800445c:	e000      	b.n	8004460 <ETH_SetMACConfig+0x12c>
 800445e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004460:	4313      	orrs	r3, r2
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004478:	2001      	movs	r0, #1
 800447a:	f7fd fdf3 	bl	8002064 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	619a      	str	r2, [r3, #24]
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	ff20810f 	.word	0xff20810f

08004494 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <ETH_SetDMAConfig+0x110>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	7b1b      	ldrb	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <ETH_SetDMAConfig+0x2c>
 80044ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044be:	e000      	b.n	80044c2 <ETH_SetDMAConfig+0x2e>
 80044c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	7b5b      	ldrb	r3, [r3, #13]
 80044c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80044c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	7f52      	ldrb	r2, [r2, #29]
 80044ce:	2a00      	cmp	r2, #0
 80044d0:	d102      	bne.n	80044d8 <ETH_SetDMAConfig+0x44>
 80044d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044d6:	e000      	b.n	80044da <ETH_SetDMAConfig+0x46>
 80044d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80044da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	7b9b      	ldrb	r3, [r3, #14]
 80044e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80044e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80044e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	7f1b      	ldrb	r3, [r3, #28]
 80044ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80044f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	7f9b      	ldrb	r3, [r3, #30]
 80044f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80044f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80044fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004506:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004508:	4313      	orrs	r3, r2
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	461a      	mov	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800452a:	2001      	movs	r0, #1
 800452c:	f7fd fd9a 	bl	8002064 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	461a      	mov	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004548:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800454e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004554:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800455c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800455e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004566:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800456c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800457a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004588:	2001      	movs	r0, #1
 800458a:	f7fd fd6b 	bl	8002064 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	f8de3f23 	.word	0xf8de3f23

080045a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b0a6      	sub	sp, #152	; 0x98
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80045bc:	2300      	movs	r3, #0
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80045e4:	2300      	movs	r3, #0
 80045e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800460a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004614:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800461c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fe86 	bl	8004334 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004628:	2301      	movs	r3, #1
 800462a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800462c:	2301      	movs	r3, #1
 800462e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004636:	2301      	movs	r3, #1
 8004638:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800464a:	2300      	movs	r3, #0
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004654:	2301      	movs	r3, #1
 8004656:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800465c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800465e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004662:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004668:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004670:	2300      	movs	r3, #0
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff08 	bl	8004494 <ETH_SetDMAConfig>
}
 8004684:	bf00      	nop
 8004686:	3798      	adds	r7, #152	; 0x98
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3305      	adds	r3, #5
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	3204      	adds	r2, #4
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <ETH_MACAddressConfig+0x68>)
 80046ae:	4413      	add	r3, r2
 80046b0:	461a      	mov	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3303      	adds	r3, #3
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	061a      	lsls	r2, r3, #24
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3302      	adds	r3, #2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3301      	adds	r3, #1
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	4313      	orrs	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <ETH_MACAddressConfig+0x6c>)
 80046de:	4413      	add	r3, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	6013      	str	r3, [r2, #0]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40028040 	.word	0x40028040
 80046f8:	40028044 	.word	0x40028044

080046fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e03e      	b.n	8004788 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68d9      	ldr	r1, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	440b      	add	r3, r1
 800471a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2200      	movs	r2, #0
 8004732:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	3206      	adds	r2, #6
 800473c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d80c      	bhi.n	800476c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68d9      	ldr	r1, [r3, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e004      	b.n	8004776 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d9bd      	bls.n	800470a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a0:	611a      	str	r2, [r3, #16]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e046      	b.n	800484a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6919      	ldr	r1, [r3, #16]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	440b      	add	r3, r1
 80047cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2200      	movs	r2, #0
 80047d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2200      	movs	r2, #0
 80047de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004800:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	3212      	adds	r2, #18
 8004816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d80c      	bhi.n	800483a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6919      	ldr	r1, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	440b      	add	r3, r1
 8004832:	461a      	mov	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e004      	b.n	8004844 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	461a      	mov	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d9b5      	bls.n	80047bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004888:	b480      	push	{r7}
 800488a:	b08d      	sub	sp, #52	; 0x34
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3318      	adds	r3, #24
 8004898:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ca:	d007      	beq.n	80048dc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	3304      	adds	r3, #4
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80048dc:	2302      	movs	r3, #2
 80048de:	e0ff      	b.n	8004ae0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	4b7d      	ldr	r3, [pc, #500]	; (8004aec <ETH_Prepare_Tx_Descriptors+0x264>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	6852      	ldr	r2, [r2, #4]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004962:	f3bf 8f5f 	dmb	sy
}
 8004966:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004974:	e082      	b.n	8004a7c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d006      	beq.n	8004996 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e005      	b.n	80049a2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	3301      	adds	r3, #1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d902      	bls.n	80049b4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	3b04      	subs	r3, #4
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d6:	d007      	beq.n	80049e8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	3304      	adds	r3, #4
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d029      	beq.n	8004a3c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	e019      	b.n	8004a30 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80049fc:	f3bf 8f5f 	dmb	sy
}
 8004a00:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	3301      	adds	r3, #1
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d902      	bls.n	8004a20 <ETH_Prepare_Tx_Descriptors+0x198>
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	3b04      	subs	r3, #4
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a28:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d3e1      	bcc.n	80049fc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e051      	b.n	8004ae0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	3301      	adds	r3, #1
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4b25      	ldr	r3, [pc, #148]	; (8004aec <ETH_Prepare_Tx_Descriptors+0x264>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	6852      	ldr	r2, [r2, #4]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004a6a:	f3bf 8f5f 	dmb	sy
}
 8004a6e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f af78 	bne.w	8004976 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d006      	beq.n	8004a9a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e005      	b.n	8004aa6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab6:	6979      	ldr	r1, [r7, #20]
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	3304      	adds	r3, #4
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac8:	b672      	cpsid	i
}
 8004aca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004ada:	b662      	cpsie	i
}
 8004adc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3734      	adds	r7, #52	; 0x34
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	ffffe000 	.word	0xffffe000

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	; 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e175      	b.n	8004dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b10:	2201      	movs	r2, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4013      	ands	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	f040 8164 	bne.w	8004df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d005      	beq.n	8004b46 <HAL_GPIO_Init+0x56>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d130      	bne.n	8004ba8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 0201 	and.w	r2, r3, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d017      	beq.n	8004be4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d123      	bne.n	8004c38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	08da      	lsrs	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3208      	adds	r2, #8
 8004bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	220f      	movs	r2, #15
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	08da      	lsrs	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3208      	adds	r2, #8
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	2203      	movs	r2, #3
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 0203 	and.w	r2, r3, #3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80be 	beq.w	8004df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7a:	4b66      	ldr	r3, [pc, #408]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	4a65      	ldr	r2, [pc, #404]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c84:	6453      	str	r3, [r2, #68]	; 0x44
 8004c86:	4b63      	ldr	r3, [pc, #396]	; (8004e14 <HAL_GPIO_Init+0x324>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c92:	4a61      	ldr	r2, [pc, #388]	; (8004e18 <HAL_GPIO_Init+0x328>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	3302      	adds	r3, #2
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	220f      	movs	r2, #15
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <HAL_GPIO_Init+0x32c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d037      	beq.n	8004d2e <HAL_GPIO_Init+0x23e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a57      	ldr	r2, [pc, #348]	; (8004e20 <HAL_GPIO_Init+0x330>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_GPIO_Init+0x23a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a56      	ldr	r2, [pc, #344]	; (8004e24 <HAL_GPIO_Init+0x334>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02b      	beq.n	8004d26 <HAL_GPIO_Init+0x236>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a55      	ldr	r2, [pc, #340]	; (8004e28 <HAL_GPIO_Init+0x338>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d025      	beq.n	8004d22 <HAL_GPIO_Init+0x232>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a54      	ldr	r2, [pc, #336]	; (8004e2c <HAL_GPIO_Init+0x33c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01f      	beq.n	8004d1e <HAL_GPIO_Init+0x22e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <HAL_GPIO_Init+0x340>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d019      	beq.n	8004d1a <HAL_GPIO_Init+0x22a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <HAL_GPIO_Init+0x344>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_GPIO_Init+0x226>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a51      	ldr	r2, [pc, #324]	; (8004e38 <HAL_GPIO_Init+0x348>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00d      	beq.n	8004d12 <HAL_GPIO_Init+0x222>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a50      	ldr	r2, [pc, #320]	; (8004e3c <HAL_GPIO_Init+0x34c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <HAL_GPIO_Init+0x21e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a4f      	ldr	r2, [pc, #316]	; (8004e40 <HAL_GPIO_Init+0x350>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_GPIO_Init+0x21a>
 8004d06:	2309      	movs	r3, #9
 8004d08:	e012      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d0a:	230a      	movs	r3, #10
 8004d0c:	e010      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	e00e      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d12:	2307      	movs	r3, #7
 8004d14:	e00c      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e00a      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d1a:	2305      	movs	r3, #5
 8004d1c:	e008      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e006      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e004      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e002      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_GPIO_Init+0x240>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	f002 0203 	and.w	r2, r2, #3
 8004d36:	0092      	lsls	r2, r2, #2
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d40:	4935      	ldr	r1, [pc, #212]	; (8004e18 <HAL_GPIO_Init+0x328>)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	089b      	lsrs	r3, r3, #2
 8004d46:	3302      	adds	r3, #2
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d72:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d9c:	4a29      	ldr	r2, [pc, #164]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004da2:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dc6:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df0:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_GPIO_Init+0x354>)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	f67f ae86 	bls.w	8004b10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3724      	adds	r7, #36	; 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40013800 	.word	0x40013800
 8004e1c:	40020000 	.word	0x40020000
 8004e20:	40020400 	.word	0x40020400
 8004e24:	40020800 	.word	0x40020800
 8004e28:	40020c00 	.word	0x40020c00
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40021400 	.word	0x40021400
 8004e34:	40021800 	.word	0x40021800
 8004e38:	40021c00 	.word	0x40021c00
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40022400 	.word	0x40022400
 8004e44:	40013c00 	.word	0x40013c00

08004e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
 8004e54:	4613      	mov	r3, r2
 8004e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e58:	787b      	ldrb	r3, [r7, #1]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e5e:	887a      	ldrh	r2, [r7, #2]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e64:	e003      	b.n	8004e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	041a      	lsls	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	619a      	str	r2, [r3, #24]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e8c:	887a      	ldrh	r2, [r7, #2]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	041a      	lsls	r2, r3, #16
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	43d9      	mvns	r1, r3
 8004e98:	887b      	ldrh	r3, [r7, #2]
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	619a      	str	r2, [r3, #24]
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004eba:	4b08      	ldr	r3, [pc, #32]	; (8004edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f806 	bl	8004ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40013c00 	.word	0x40013c00

08004ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e07f      	b.n	800500a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc f826 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	e006      	b.n	8004f80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d104      	bne.n	8004f92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_I2C_Init+0x11c>)
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69d9      	ldr	r1, [r3, #28]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	02008000 	.word	0x02008000

08005018 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	461a      	mov	r2, r3
 8005024:	460b      	mov	r3, r1
 8005026:	817b      	strh	r3, [r7, #10]
 8005028:	4613      	mov	r3, r2
 800502a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	f040 80cd 	bne.w	80051d4 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d101      	bne.n	800504e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	e0c3      	b.n	80051d6 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_I2C_Master_Transmit_DMA+0x44>
 8005058:	2302      	movs	r3, #2
 800505a:	e0bc      	b.n	80051d6 <HAL_I2C_Master_Transmit_DMA+0x1be>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2221      	movs	r2, #33	; 0x21
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2210      	movs	r2, #16
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	893a      	ldrh	r2, [r7, #8]
 8005084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a55      	ldr	r2, [pc, #340]	; (80051e0 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a55      	ldr	r2, [pc, #340]	; (80051e4 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d906      	bls.n	80050aa <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	22ff      	movs	r2, #255	; 0xff
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80050a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e007      	b.n	80050ba <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80050b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d070      	beq.n	80051a4 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d020      	beq.n	800510c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	4a46      	ldr	r2, [pc, #280]	; (80051e8 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 80050d0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	4a45      	ldr	r2, [pc, #276]	; (80051ec <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 80050d8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	2200      	movs	r2, #0
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	2200      	movs	r2, #0
 80050e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3328      	adds	r3, #40	; 0x28
 80050f6:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80050fc:	f7fd ff9c 	bl	8003038 <HAL_DMA_Start_IT>
 8005100:	4603      	mov	r3, r0
 8005102:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d138      	bne.n	800517c <HAL_I2C_Master_Transmit_DMA+0x164>
 800510a:	e013      	b.n	8005134 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e050      	b.n	80051d6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	b2da      	uxtb	r2, r3
 800513a:	8979      	ldrh	r1, [r7, #10]
 800513c:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 fd16 	bl	8006b74 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005162:	2110      	movs	r1, #16
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f001 fd37 	bl	8006bd8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e029      	b.n	80051d0 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f043 0210 	orr.w	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e018      	b.n	80051d6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	8979      	ldrh	r1, [r7, #10]
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f001 fcda 	bl	8006b74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051c8:	2101      	movs	r1, #1
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f001 fd04 	bl	8006bd8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	ffff0000 	.word	0xffff0000
 80051e4:	08005ca5 	.word	0x08005ca5
 80051e8:	08006913 	.word	0x08006913
 80051ec:	08006ac5 	.word	0x08006ac5
 80051f0:	80002000 	.word	0x80002000
 80051f4:	0800584f 	.word	0x0800584f

080051f8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	461a      	mov	r2, r3
 8005204:	460b      	mov	r3, r1
 8005206:	817b      	strh	r3, [r7, #10]
 8005208:	4613      	mov	r3, r2
 800520a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b20      	cmp	r3, #32
 8005216:	f040 80cd 	bne.w	80053b4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005228:	d101      	bne.n	800522e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	e0c3      	b.n	80053b6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_I2C_Master_Receive_DMA+0x44>
 8005238:	2302      	movs	r3, #2
 800523a:	e0bc      	b.n	80053b6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2222      	movs	r2, #34	; 0x22
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2210      	movs	r2, #16
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	893a      	ldrh	r2, [r7, #8]
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a55      	ldr	r2, [pc, #340]	; (80053c0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a55      	ldr	r2, [pc, #340]	; (80053c4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005270:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	2bff      	cmp	r3, #255	; 0xff
 800527a:	d906      	bls.n	800528a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	22ff      	movs	r2, #255	; 0xff
 8005280:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e007      	b.n	800529a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005298:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d070      	beq.n	8005384 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d020      	beq.n	80052ec <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	4a46      	ldr	r2, [pc, #280]	; (80053c8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80052b0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	4a45      	ldr	r2, [pc, #276]	; (80053cc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80052b8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2200      	movs	r2, #0
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	2200      	movs	r2, #0
 80052c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3324      	adds	r3, #36	; 0x24
 80052d4:	4619      	mov	r1, r3
 80052d6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80052dc:	f7fd feac 	bl	8003038 <HAL_DMA_Start_IT>
 80052e0:	4603      	mov	r3, r0
 80052e2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d138      	bne.n	800535c <HAL_I2C_Master_Receive_DMA+0x164>
 80052ea:	e013      	b.n	8005314 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e050      	b.n	80053b6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	b2da      	uxtb	r2, r3
 800531a:	8979      	ldrh	r1, [r7, #10]
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f001 fc26 	bl	8006b74 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005342:	2110      	movs	r1, #16
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f001 fc47 	bl	8006bd8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e029      	b.n	80053b0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f043 0210 	orr.w	r2, r3, #16
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e018      	b.n	80053b6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005388:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	b2da      	uxtb	r2, r3
 8005390:	8979      	ldrh	r1, [r7, #10]
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f001 fbea 	bl	8006b74 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053a8:	2101      	movs	r1, #1
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f001 fc14 	bl	8006bd8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e000      	b.n	80053b6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80053b4:	2302      	movs	r3, #2
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	ffff0000 	.word	0xffff0000
 80053c4:	08005ca5 	.word	0x08005ca5
 80053c8:	080069e9 	.word	0x080069e9
 80053cc:	08006ac5 	.word	0x08006ac5
 80053d0:	80002400 	.word	0x80002400
 80053d4:	0800584f 	.word	0x0800584f

080053d8 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	f040 809b 	bne.w	800552a <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_I2C_Slave_Transmit_DMA+0x28>
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e08f      	b.n	800552c <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005416:	2302      	movs	r3, #2
 8005418:	e088      	b.n	800552c <HAL_I2C_Slave_Transmit_DMA+0x154>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2221      	movs	r2, #33	; 0x21
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a38      	ldr	r2, [pc, #224]	; (8005534 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a38      	ldr	r2, [pc, #224]	; (8005538 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8005458:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	2b00      	cmp	r3, #0
 8005460:	d020      	beq.n	80054a4 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	4a35      	ldr	r2, [pc, #212]	; (800553c <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	4a34      	ldr	r2, [pc, #208]	; (8005540 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8005470:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	2200      	movs	r2, #0
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	2200      	movs	r2, #0
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3328      	adds	r3, #40	; 0x28
 800548e:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005494:	f7fd fdd0 	bl	8003038 <HAL_DMA_Start_IT>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d12f      	bne.n	8005502 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 80054a2:	e013      	b.n	80054cc <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2228      	movs	r2, #40	; 0x28
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e02f      	b.n	800552c <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80054e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f001 fb75 	bl	8006bd8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054fc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e014      	b.n	800552c <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2228      	movs	r2, #40	; 0x28
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	f043 0210 	orr.w	r2, r3, #16
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	ffff0000 	.word	0xffff0000
 8005538:	08005e8b 	.word	0x08005e8b
 800553c:	080069a9 	.word	0x080069a9
 8005540:	08006ac5 	.word	0x08006ac5

08005544 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b20      	cmp	r3, #32
 800555c:	f040 809b 	bne.w	8005696 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_I2C_Slave_Receive_DMA+0x28>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e08f      	b.n	8005698 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005582:	2302      	movs	r3, #2
 8005584:	e088      	b.n	8005698 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2222      	movs	r2, #34	; 0x22
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a38      	ldr	r2, [pc, #224]	; (80056a0 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <HAL_I2C_Slave_Receive_DMA+0x160>)
 80055c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d020      	beq.n	8005610 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	4a35      	ldr	r2, [pc, #212]	; (80056a8 <HAL_I2C_Slave_Receive_DMA+0x164>)
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	4a34      	ldr	r2, [pc, #208]	; (80056ac <HAL_I2C_Slave_Receive_DMA+0x168>)
 80055dc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	2200      	movs	r2, #0
 80055ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3324      	adds	r3, #36	; 0x24
 80055f8:	4619      	mov	r1, r3
 80055fa:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005600:	f7fd fd1a 	bl	8003038 <HAL_DMA_Start_IT>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d12f      	bne.n	800566e <HAL_I2C_Slave_Receive_DMA+0x12a>
 800560e:	e013      	b.n	8005638 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2228      	movs	r2, #40	; 0x28
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e02f      	b.n	8005698 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005646:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f001 fabf 	bl	8006bd8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005668:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e014      	b.n	8005698 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2228      	movs	r2, #40	; 0x28
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	f043 0210 	orr.w	r2, r3, #16
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	ffff0000 	.word	0xffff0000
 80056a4:	08005e8b 	.word	0x08005e8b
 80056a8:	08006a7f 	.word	0x08006a7f
 80056ac:	08006ac5 	.word	0x08006ac5

080056b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
  }
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005718:	f043 0201 	orr.w	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005728:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	0a9b      	lsrs	r3, r3, #10
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	09db      	lsrs	r3, r3, #7
 800573a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005756:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	0a5b      	lsrs	r3, r3, #9
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005774:	f043 0202 	orr.w	r2, r3, #2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005784:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 030b 	and.w	r3, r3, #11
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 ff9f 	bl	80066dc <I2C_ITError>
  }
}
 800579e:	bf00      	nop
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
 80057da:	4613      	mov	r3, r2
 80057dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b088      	sub	sp, #32
 8005852:	af02      	add	r7, sp, #8
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <I2C_Master_ISR_IT+0x1e>
 8005868:	2302      	movs	r3, #2
 800586a:	e114      	b.n	8005a96 <I2C_Master_ISR_IT+0x248>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2210      	movs	r2, #16
 8005892:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	f043 0204 	orr.w	r2, r3, #4
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f001 f812 	bl	80068ca <I2C_Flush_TXDR>
 80058a6:	e0e1      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d023      	beq.n	80058fc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01d      	beq.n	80058fc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0304 	bic.w	r3, r3, #4
 80058c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058fa:	e0b7      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01e      	beq.n	8005946 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005910:	2b00      	cmp	r3, #0
 8005912:	d018      	beq.n	8005946 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005944:	e092      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	09db      	lsrs	r3, r3, #7
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d05d      	beq.n	8005a0e <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	099b      	lsrs	r3, r3, #6
 8005956:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800595a:	2b00      	cmp	r3, #0
 800595c:	d057      	beq.n	8005a0e <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d040      	beq.n	80059ea <I2C_Master_ISR_IT+0x19c>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13c      	bne.n	80059ea <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d90e      	bls.n	80059a6 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	22ff      	movs	r2, #255	; 0xff
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	b2da      	uxtb	r2, r3
 8005994:	8a79      	ldrh	r1, [r7, #18]
 8005996:	2300      	movs	r3, #0
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f001 f8e8 	bl	8006b74 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a4:	e032      	b.n	8005a0c <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059b8:	d00b      	beq.n	80059d2 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	8a79      	ldrh	r1, [r7, #18]
 80059c6:	2000      	movs	r0, #0
 80059c8:	9000      	str	r0, [sp, #0]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f001 f8d2 	bl	8006b74 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059d0:	e01c      	b.n	8005a0c <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	8a79      	ldrh	r1, [r7, #18]
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f001 f8c6 	bl	8006b74 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e8:	e010      	b.n	8005a0c <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f8:	d003      	beq.n	8005a02 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fba9 	bl	8006152 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a00:	e034      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a02:	2140      	movs	r1, #64	; 0x40
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fe69 	bl	80066dc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a0a:	e02f      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
 8005a0c:	e02e      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	099b      	lsrs	r3, r3, #6
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d028      	beq.n	8005a6c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	099b      	lsrs	r3, r3, #6
 8005a1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d022      	beq.n	8005a6c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d119      	bne.n	8005a64 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3e:	d015      	beq.n	8005a6c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a48:	d108      	bne.n	8005a5c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	e007      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fb78 	bl	8006152 <I2C_ITMasterSeqCplt>
 8005a62:	e003      	b.n	8005a6c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a64:	2140      	movs	r1, #64	; 0x40
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fe38 	bl	80066dc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fbfe 	bl	8006288 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <I2C_Slave_ISR_IT+0x24>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0ec      	b.n	8005c9c <I2C_Slave_ISR_IT+0x1fe>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ae2:	6939      	ldr	r1, [r7, #16]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fc99 	bl	800641c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04d      	beq.n	8005b92 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d047      	beq.n	8005b92 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d128      	bne.n	8005b5e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b28      	cmp	r3, #40	; 0x28
 8005b16:	d108      	bne.n	8005b2a <I2C_Slave_ISR_IT+0x8c>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1e:	d104      	bne.n	8005b2a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b20:	6939      	ldr	r1, [r7, #16]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fd84 	bl	8006630 <I2C_ITListenCplt>
 8005b28:	e032      	b.n	8005b90 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b29      	cmp	r3, #41	; 0x29
 8005b34:	d10e      	bne.n	8005b54 <I2C_Slave_ISR_IT+0xb6>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b3c:	d00a      	beq.n	8005b54 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2210      	movs	r2, #16
 8005b44:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 febf 	bl	80068ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fb3d 	bl	80061cc <I2C_ITSlaveSeqCplt>
 8005b52:	e01d      	b.n	8005b90 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2210      	movs	r2, #16
 8005b5a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005b5c:	e096      	b.n	8005c8c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <I2C_Slave_ISR_IT+0xe4>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7e:	f040 8085 	bne.w	8005c8c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	4619      	mov	r1, r3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fda7 	bl	80066dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b8e:	e07d      	b.n	8005c8c <I2C_Slave_ISR_IT+0x1ee>
 8005b90:	e07c      	b.n	8005c8c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	089b      	lsrs	r3, r3, #2
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d030      	beq.n	8005c00 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	089b      	lsrs	r3, r3, #2
 8005ba2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02a      	beq.n	8005c00 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d018      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d14f      	bne.n	8005c90 <I2C_Slave_ISR_IT+0x1f2>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf6:	d04b      	beq.n	8005c90 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fae7 	bl	80061cc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005bfe:	e047      	b.n	8005c90 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	08db      	lsrs	r3, r3, #3
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	08db      	lsrs	r3, r3, #3
 8005c10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005c18:	6939      	ldr	r1, [r7, #16]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fa15 	bl	800604a <I2C_ITAddrCplt>
 8005c20:	e037      	b.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d031      	beq.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02b      	beq.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d018      	beq.n	8005c76 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	851a      	strh	r2, [r3, #40]	; 0x28
 8005c74:	e00d      	b.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c7c:	d002      	beq.n	8005c84 <I2C_Slave_ISR_IT+0x1e6>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 faa1 	bl	80061cc <I2C_ITSlaveSeqCplt>
 8005c8a:	e002      	b.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005c90:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <I2C_Master_ISR_DMA+0x1a>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e0e1      	b.n	8005e82 <I2C_Master_ISR_DMA+0x1de>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	091b      	lsrs	r3, r3, #4
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d017      	beq.n	8005d02 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d011      	beq.n	8005d02 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	f043 0204 	orr.w	r2, r3, #4
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005cf2:	2120      	movs	r1, #32
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 ff6f 	bl	8006bd8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fde5 	bl	80068ca <I2C_Flush_TXDR>
 8005d00:	e0ba      	b.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	09db      	lsrs	r3, r3, #7
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d072      	beq.n	8005df4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	099b      	lsrs	r3, r3, #6
 8005d12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d06c      	beq.n	8005df4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d28:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d04e      	beq.n	8005dd2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d40:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2bff      	cmp	r3, #255	; 0xff
 8005d4a:	d906      	bls.n	8005d5a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	22ff      	movs	r2, #255	; 0xff
 8005d50:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e010      	b.n	8005d7c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d6c:	d003      	beq.n	8005d76 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	e002      	b.n	8005d7c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d7a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	8a79      	ldrh	r1, [r7, #18]
 8005d84:	2300      	movs	r3, #0
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fef2 	bl	8006b74 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b22      	cmp	r3, #34	; 0x22
 8005dac:	d108      	bne.n	8005dc0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dbc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005dbe:	e05b      	b.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005dd0:	e052      	b.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de0:	d003      	beq.n	8005dea <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f9b5 	bl	8006152 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005de8:	e046      	b.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005dea:	2140      	movs	r1, #64	; 0x40
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fc75 	bl	80066dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005df2:	e041      	b.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	099b      	lsrs	r3, r3, #6
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d029      	beq.n	8005e54 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d023      	beq.n	8005e54 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d119      	bne.n	8005e4a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e24:	d027      	beq.n	8005e76 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e2e:	d108      	bne.n	8005e42 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005e40:	e019      	b.n	8005e76 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f985 	bl	8006152 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005e48:	e015      	b.n	8005e76 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e4a:	2140      	movs	r1, #64	; 0x40
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fc45 	bl	80066dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e52:	e010      	b.n	8005e76 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fa0a 	bl	8006288 <I2C_ITMasterCplt>
 8005e74:	e000      	b.n	8005e78 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005e76:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b088      	sub	sp, #32
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <I2C_Slave_ISR_DMA+0x24>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0c9      	b.n	8006042 <I2C_Slave_ISR_DMA+0x1b8>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 faa3 	bl	800641c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 809a 	beq.w	8006018 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	091b      	lsrs	r3, r3, #4
 8005ee8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8093 	beq.w	8006018 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0b9b      	lsrs	r3, r3, #14
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	0bdb      	lsrs	r3, r3, #15
 8005f02:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d07f      	beq.n	800600a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0bdb      	lsrs	r3, r3, #15
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	0b9b      	lsrs	r3, r3, #14
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d007      	beq.n	8005f52 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d128      	bne.n	8005faa <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b28      	cmp	r3, #40	; 0x28
 8005f62:	d108      	bne.n	8005f76 <I2C_Slave_ISR_DMA+0xec>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f6a:	d104      	bne.n	8005f76 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fb5e 	bl	8006630 <I2C_ITListenCplt>
 8005f74:	e048      	b.n	8006008 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b29      	cmp	r3, #41	; 0x29
 8005f80:	d10e      	bne.n	8005fa0 <I2C_Slave_ISR_DMA+0x116>
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f88:	d00a      	beq.n	8005fa0 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2210      	movs	r2, #16
 8005f90:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fc99 	bl	80068ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f917 	bl	80061cc <I2C_ITSlaveSeqCplt>
 8005f9e:	e033      	b.n	8006008 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005fa8:	e034      	b.n	8006014 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f043 0204 	orr.w	r2, r3, #4
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <I2C_Slave_ISR_DMA+0x14a>
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fd2:	d11f      	bne.n	8006014 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b21      	cmp	r3, #33	; 0x21
 8005fd8:	d002      	beq.n	8005fe0 <I2C_Slave_ISR_DMA+0x156>
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b29      	cmp	r3, #41	; 0x29
 8005fde:	d103      	bne.n	8005fe8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2221      	movs	r2, #33	; 0x21
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe6:	e008      	b.n	8005ffa <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b22      	cmp	r3, #34	; 0x22
 8005fec:	d002      	beq.n	8005ff4 <I2C_Slave_ISR_DMA+0x16a>
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff2:	d102      	bne.n	8005ffa <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2222      	movs	r2, #34	; 0x22
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fb6b 	bl	80066dc <I2C_ITError>
      if (treatdmanack == 1U)
 8006006:	e005      	b.n	8006014 <I2C_Slave_ISR_DMA+0x18a>
 8006008:	e004      	b.n	8006014 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2210      	movs	r2, #16
 8006010:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006012:	e011      	b.n	8006038 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8006014:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006016:	e00f      	b.n	8006038 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	08db      	lsrs	r3, r3, #3
 8006028:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f809 	bl	800604a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006060:	2b28      	cmp	r3, #40	; 0x28
 8006062:	d16a      	bne.n	800613a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	0c1b      	lsrs	r3, r3, #16
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b29b      	uxth	r3, r3
 800607e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006082:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006090:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800609e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d138      	bne.n	800611a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80060a8:	897b      	ldrh	r3, [r7, #10]
 80060aa:	09db      	lsrs	r3, r3, #7
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	89bb      	ldrh	r3, [r7, #12]
 80060b0:	4053      	eors	r3, r2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f003 0306 	and.w	r3, r3, #6
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11c      	bne.n	80060f6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80060bc:	897b      	ldrh	r3, [r7, #10]
 80060be:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d13b      	bne.n	800614a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2208      	movs	r2, #8
 80060de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060e8:	89ba      	ldrh	r2, [r7, #12]
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fb6d 	bl	80057ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80060f4:	e029      	b.n	800614a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80060f6:	893b      	ldrh	r3, [r7, #8]
 80060f8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fdd4 	bl	8006cac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800610c:	89ba      	ldrh	r2, [r7, #12]
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fb5b 	bl	80057ce <HAL_I2C_AddrCallback>
}
 8006118:	e017      	b.n	800614a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800611a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fdc4 	bl	8006cac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800612c:	89ba      	ldrh	r2, [r7, #12]
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fb4b 	bl	80057ce <HAL_I2C_AddrCallback>
}
 8006138:	e007      	b.n	800614a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2208      	movs	r2, #8
 8006140:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b21      	cmp	r3, #33	; 0x21
 800616c:	d115      	bne.n	800619a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2211      	movs	r2, #17
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006182:	2101      	movs	r1, #1
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fd91 	bl	8006cac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fb07 	bl	80057a6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006198:	e014      	b.n	80061c4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2212      	movs	r2, #18
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061ae:	2102      	movs	r1, #2
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fd7b 	bl	8006cac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f010 fa9e 	bl	8016700 <HAL_I2C_MasterRxCpltCallback>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	0b9b      	lsrs	r3, r3, #14
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e00d      	b.n	800621e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	0bdb      	lsrs	r3, r3, #15
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800621c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b29      	cmp	r3, #41	; 0x29
 8006228:	d112      	bne.n	8006250 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2228      	movs	r2, #40	; 0x28
 800622e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2221      	movs	r2, #33	; 0x21
 8006236:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006238:	2101      	movs	r1, #1
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fd36 	bl	8006cac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fab6 	bl	80057ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800624e:	e017      	b.n	8006280 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b2a      	cmp	r3, #42	; 0x2a
 800625a:	d111      	bne.n	8006280 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2228      	movs	r2, #40	; 0x28
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2222      	movs	r2, #34	; 0x22
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800626a:	2102      	movs	r1, #2
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fd1d 	bl	8006cac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f010 fa30 	bl	80166e0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2220      	movs	r2, #32
 800629c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b21      	cmp	r3, #33	; 0x21
 80062a8:	d107      	bne.n	80062ba <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062aa:	2101      	movs	r1, #1
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fcfd 	bl	8006cac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2211      	movs	r2, #17
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
 80062b8:	e00c      	b.n	80062d4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b22      	cmp	r3, #34	; 0x22
 80062c4:	d106      	bne.n	80062d4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062c6:	2102      	movs	r1, #2
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fcef 	bl	8006cac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2212      	movs	r2, #18
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b4d      	ldr	r3, [pc, #308]	; (8006414 <I2C_ITMasterCplt+0x18c>)
 80062e0:	400b      	ands	r3, r1
 80062e2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a4a      	ldr	r2, [pc, #296]	; (8006418 <I2C_ITMasterCplt+0x190>)
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2210      	movs	r2, #16
 8006302:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d10b      	bne.n	8006334 <I2C_ITMasterCplt+0xac>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	b2db      	uxtb	r3, r3
 8006330:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006332:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fac8 	bl	80068ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d002      	beq.n	8006352 <I2C_ITMasterCplt+0xca>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f9bf 	bl	80066dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800635e:	e054      	b.n	800640a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b21      	cmp	r3, #33	; 0x21
 800636a:	d124      	bne.n	80063b6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d10b      	bne.n	800639e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff fa31 	bl	80057fe <HAL_I2C_MemTxCpltCallback>
}
 800639c:	e035      	b.n	800640a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff f9f9 	bl	80057a6 <HAL_I2C_MasterTxCpltCallback>
}
 80063b4:	e029      	b.n	800640a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b22      	cmp	r3, #34	; 0x22
 80063c0:	d123      	bne.n	800640a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d10b      	bne.n	80063f4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fa10 	bl	8005812 <HAL_I2C_MemRxCpltCallback>
}
 80063f2:	e00a      	b.n	800640a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f010 f97b 	bl	8016700 <HAL_I2C_MasterRxCpltCallback>
}
 800640a:	bf00      	nop
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	fe00e800 	.word	0xfe00e800
 8006418:	ffff0000 	.word	0xffff0000

0800641c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006438:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2220      	movs	r2, #32
 8006440:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	2b21      	cmp	r3, #33	; 0x21
 8006446:	d002      	beq.n	800644e <I2C_ITSlaveCplt+0x32>
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b29      	cmp	r3, #41	; 0x29
 800644c:	d108      	bne.n	8006460 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800644e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc2a 	bl	8006cac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2221      	movs	r2, #33	; 0x21
 800645c:	631a      	str	r2, [r3, #48]	; 0x30
 800645e:	e00d      	b.n	800647c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2b22      	cmp	r3, #34	; 0x22
 8006464:	d002      	beq.n	800646c <I2C_ITSlaveCplt+0x50>
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b2a      	cmp	r3, #42	; 0x2a
 800646a:	d107      	bne.n	800647c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800646c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fc1b 	bl	8006cac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2222      	movs	r2, #34	; 0x22
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800648a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b64      	ldr	r3, [pc, #400]	; (8006628 <I2C_ITSlaveCplt+0x20c>)
 8006498:	400b      	ands	r3, r1
 800649a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fa14 	bl	80068ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	0b9b      	lsrs	r3, r3, #14
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d013      	beq.n	80064d6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d020      	beq.n	8006508 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d4:	e018      	b.n	8006508 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	0bdb      	lsrs	r3, r3, #15
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d012      	beq.n	8006508 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d020      	beq.n	8006556 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0304 	bic.w	r3, r3, #4
 800651a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006564:	f043 0204 	orr.w	r2, r3, #4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	2b00      	cmp	r3, #0
 8006580:	d010      	beq.n	80065a4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8a7 	bl	80066dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b28      	cmp	r3, #40	; 0x28
 8006598:	d141      	bne.n	800661e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800659a:	6979      	ldr	r1, [r7, #20]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f847 	bl	8006630 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065a2:	e03c      	b.n	800661e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065ac:	d014      	beq.n	80065d8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fe0c 	bl	80061cc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a1d      	ldr	r2, [pc, #116]	; (800662c <I2C_ITSlaveCplt+0x210>)
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff f90a 	bl	80057ea <HAL_I2C_ListenCpltCallback>
}
 80065d6:	e022      	b.n	800661e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b22      	cmp	r3, #34	; 0x22
 80065e2:	d10e      	bne.n	8006602 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f010 f870 	bl	80166e0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006600:	e00d      	b.n	800661e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff f8ce 	bl	80057ba <HAL_I2C_SlaveTxCpltCallback>
}
 800661e:	bf00      	nop
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	fe00e800 	.word	0xfe00e800
 800662c:	ffff0000 	.word	0xffff0000

08006630 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a26      	ldr	r2, [pc, #152]	; (80066d8 <I2C_ITListenCplt+0xa8>)
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d022      	beq.n	80066ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	d012      	beq.n	80066ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066ae:	f248 0103 	movw	r1, #32771	; 0x8003
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fafa 	bl	8006cac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2210      	movs	r2, #16
 80066be:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff f88e 	bl	80057ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	ffff0000 	.word	0xffff0000

080066dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a5d      	ldr	r2, [pc, #372]	; (8006870 <I2C_ITError+0x194>)
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b28      	cmp	r3, #40	; 0x28
 8006712:	d005      	beq.n	8006720 <I2C_ITError+0x44>
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b29      	cmp	r3, #41	; 0x29
 8006718:	d002      	beq.n	8006720 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b2a      	cmp	r3, #42	; 0x2a
 800671e:	d10b      	bne.n	8006738 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006720:	2103      	movs	r1, #3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fac2 	bl	8006cac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2228      	movs	r2, #40	; 0x28
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a50      	ldr	r2, [pc, #320]	; (8006874 <I2C_ITError+0x198>)
 8006734:	635a      	str	r2, [r3, #52]	; 0x34
 8006736:	e011      	b.n	800675c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006738:	f248 0103 	movw	r1, #32771	; 0x8003
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fab5 	bl	8006cac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b60      	cmp	r3, #96	; 0x60
 800674c:	d003      	beq.n	8006756 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d039      	beq.n	80067de <I2C_ITError+0x102>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b11      	cmp	r3, #17
 800676e:	d002      	beq.n	8006776 <I2C_ITError+0x9a>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b21      	cmp	r3, #33	; 0x21
 8006774:	d133      	bne.n	80067de <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006784:	d107      	bne.n	8006796 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006794:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	4618      	mov	r0, r3
 800679c:	f7fc fec8 	bl	8003530 <HAL_DMA_GetState>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d017      	beq.n	80067d6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	4a33      	ldr	r2, [pc, #204]	; (8006878 <I2C_ITError+0x19c>)
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fc fd0c 	bl	80031d8 <HAL_DMA_Abort_IT>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d04d      	beq.n	8006862 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067d4:	e045      	b.n	8006862 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f850 	bl	800687c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067dc:	e041      	b.n	8006862 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d039      	beq.n	800685a <I2C_ITError+0x17e>
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b12      	cmp	r3, #18
 80067ea:	d002      	beq.n	80067f2 <I2C_ITError+0x116>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b22      	cmp	r3, #34	; 0x22
 80067f0:	d133      	bne.n	800685a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	d107      	bne.n	8006812 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006810:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	4618      	mov	r0, r3
 8006818:	f7fc fe8a 	bl	8003530 <HAL_DMA_GetState>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d017      	beq.n	8006852 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	4a14      	ldr	r2, [pc, #80]	; (8006878 <I2C_ITError+0x19c>)
 8006828:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	4618      	mov	r0, r3
 8006838:	f7fc fcce 	bl	80031d8 <HAL_DMA_Abort_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d011      	beq.n	8006866 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006850:	e009      	b.n	8006866 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f812 	bl	800687c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006858:	e005      	b.n	8006866 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f80e 	bl	800687c <I2C_TreatErrorCallback>
  }
}
 8006860:	e002      	b.n	8006868 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006866:	bf00      	nop
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	ffff0000 	.word	0xffff0000
 8006874:	08005a9f 	.word	0x08005a9f
 8006878:	08006b39 	.word	0x08006b39

0800687c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b60      	cmp	r3, #96	; 0x60
 800688e:	d10e      	bne.n	80068ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fe ffc7 	bl	800583a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068ac:	e009      	b.n	80068c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fe ffb2 	bl	8005826 <HAL_I2C_ErrorCallback>
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d103      	bne.n	80068e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2200      	movs	r2, #0
 80068e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d007      	beq.n	8006906 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	619a      	str	r2, [r3, #24]
  }
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800692e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800693a:	2120      	movs	r1, #32
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f94b 	bl	8006bd8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006942:	e02d      	b.n	80069a0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	2bff      	cmp	r3, #255	; 0xff
 800695a:	d903      	bls.n	8006964 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	22ff      	movs	r2, #255	; 0xff
 8006960:	851a      	strh	r2, [r3, #40]	; 0x28
 8006962:	e004      	b.n	800696e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	4619      	mov	r1, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3328      	adds	r3, #40	; 0x28
 800697e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006984:	f7fc fb58 	bl	8003038 <HAL_DMA_Start_IT>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800698e:	2110      	movs	r1, #16
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fea3 	bl	80066dc <I2C_ITError>
}
 8006996:	e003      	b.n	80069a0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006998:	2140      	movs	r1, #64	; 0x40
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f91c 	bl	8006bd8 <I2C_Enable_IRQ>
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069c2:	d002      	beq.n	80069ca <I2C_DMASlaveTransmitCplt+0x22>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069d8:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fbf6 	bl	80061cc <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a04:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a10:	2120      	movs	r1, #32
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f8e0 	bl	8006bd8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006a18:	e02d      	b.n	8006a76 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a22:	441a      	add	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2bff      	cmp	r3, #255	; 0xff
 8006a30:	d903      	bls.n	8006a3a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	22ff      	movs	r2, #255	; 0xff
 8006a36:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a38:	e004      	b.n	8006a44 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3324      	adds	r3, #36	; 0x24
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006a5a:	f7fc faed 	bl	8003038 <HAL_DMA_Start_IT>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006a64:	2110      	movs	r1, #16
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fe38 	bl	80066dc <I2C_ITError>
}
 8006a6c:	e003      	b.n	8006a76 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006a6e:	2140      	movs	r1, #64	; 0x40
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f8b1 	bl	8006bd8 <I2C_Enable_IRQ>
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10e      	bne.n	8006abc <I2C_DMASlaveReceiveCplt+0x3e>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aa4:	d00a      	beq.n	8006abc <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ab4:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7ff fb88 	bl	80061cc <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006aea:	2301      	movs	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006b02:	2301      	movs	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fc fd20 	bl	800354c <HAL_DMA_GetError>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d00e      	beq.n	8006b30 <I2C_DMAError+0x6c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00b      	beq.n	8006b30 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b26:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b28:	2110      	movs	r1, #16
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff fdd6 	bl	80066dc <I2C_ITError>
  }
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	2200      	movs	r2, #0
 8006b54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	2200      	movs	r2, #0
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fe88 	bl	800687c <I2C_TreatErrorCallback>
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	4613      	mov	r3, r2
 8006b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b8c:	7a7b      	ldrb	r3, [r7, #9]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	0d5b      	lsrs	r3, r3, #21
 8006bae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bb2:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <I2C_TransferConfig+0x60>)
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	ea02 0103 	and.w	r1, r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	03ff63ff 	.word	0x03ff63ff

08006bd8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <I2C_Enable_IRQ+0xcc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006bf6:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <I2C_Enable_IRQ+0xd0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d11d      	bne.n	8006c38 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da03      	bge.n	8006c0c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d103      	bne.n	8006c1a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006c18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c1a:	887b      	ldrh	r3, [r7, #2]
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d103      	bne.n	8006c28 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d12c      	bne.n	8006c88 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c34:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c36:	e027      	b.n	8006c88 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da03      	bge.n	8006c48 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c46:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c48:	887b      	ldrh	r3, [r7, #2]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006c58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c5a:	887b      	ldrh	r3, [r7, #2]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006c6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c6c:	887b      	ldrh	r3, [r7, #2]
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d103      	bne.n	8006c7a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006c78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c7a:	887b      	ldrh	r3, [r7, #2]
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d103      	bne.n	8006c88 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f043 0320 	orr.w	r3, r3, #32
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6819      	ldr	r1, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	08005ca5 	.word	0x08005ca5
 8006ca8:	08005e8b 	.word	0x08005e8b

08006cac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006cbc:	887b      	ldrh	r3, [r7, #2]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00f      	beq.n	8006ce6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006ccc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cda:	2b28      	cmp	r3, #40	; 0x28
 8006cdc:	d003      	beq.n	8006ce6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006ce4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00f      	beq.n	8006d10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006cf6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d04:	2b28      	cmp	r3, #40	; 0x28
 8006d06:	d003      	beq.n	8006d10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da03      	bge.n	8006d20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006d1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	2b10      	cmp	r3, #16
 8006d24:	d103      	bne.n	8006d2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006d2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d2e:	887b      	ldrh	r3, [r7, #2]
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d103      	bne.n	8006d3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f043 0320 	orr.w	r3, r3, #32
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d3c:	887b      	ldrh	r3, [r7, #2]
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d103      	bne.n	8006d4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	43da      	mvns	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	400a      	ands	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d138      	bne.n	8006df0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e032      	b.n	8006df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2224      	movs	r2, #36	; 0x24
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6819      	ldr	r1, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d139      	bne.n	8006e88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e033      	b.n	8006e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	; 0x24
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0201 	bic.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e000      	b.n	8006e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e88:	2302      	movs	r3, #2
  }
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e98:	b08f      	sub	sp, #60	; 0x3c
 8006e9a:	af0a      	add	r7, sp, #40	; 0x28
 8006e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e116      	b.n	80070d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa fcbc 	bl	8001840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2203      	movs	r2, #3
 8006ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f004 fa20 	bl	800b32c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	687e      	ldr	r6, [r7, #4]
 8006ef4:	466d      	mov	r5, sp
 8006ef6:	f106 0410 	add.w	r4, r6, #16
 8006efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f0a:	1d33      	adds	r3, r6, #4
 8006f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f0e:	6838      	ldr	r0, [r7, #0]
 8006f10:	f004 f9b4 	bl	800b27c <USB_CoreInit>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e0d7      	b.n	80070d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f004 fa0e 	bl	800b34e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	e04a      	b.n	8006fce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f38:	7bfa      	ldrb	r2, [r7, #15]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	333d      	adds	r3, #61	; 0x3d
 8006f48:	2201      	movs	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f4c:	7bfa      	ldrb	r2, [r7, #15]
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	333c      	adds	r3, #60	; 0x3c
 8006f5c:	7bfa      	ldrb	r2, [r7, #15]
 8006f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f60:	7bfa      	ldrb	r2, [r7, #15]
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	b298      	uxth	r0, r3
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	3344      	adds	r3, #68	; 0x44
 8006f74:	4602      	mov	r2, r0
 8006f76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f78:	7bfa      	ldrb	r2, [r7, #15]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	3340      	adds	r3, #64	; 0x40
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f8c:	7bfa      	ldrb	r2, [r7, #15]
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	3348      	adds	r3, #72	; 0x48
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006fa0:	7bfa      	ldrb	r2, [r7, #15]
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	334c      	adds	r3, #76	; 0x4c
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fb4:	7bfa      	ldrb	r2, [r7, #15]
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	3354      	adds	r3, #84	; 0x54
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
 8006fce:	7bfa      	ldrb	r2, [r7, #15]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d3af      	bcc.n	8006f38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e044      	b.n	8007068 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fde:	7bfa      	ldrb	r2, [r7, #15]
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	440b      	add	r3, r1
 8006fec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ff4:	7bfa      	ldrb	r2, [r7, #15]
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800700a:	7bfa      	ldrb	r2, [r7, #15]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007020:	7bfa      	ldrb	r2, [r7, #15]
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007036:	7bfa      	ldrb	r2, [r7, #15]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	3301      	adds	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d3b5      	bcc.n	8006fde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	687e      	ldr	r6, [r7, #4]
 800707a:	466d      	mov	r5, sp
 800707c:	f106 0410 	add.w	r4, r6, #16
 8007080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800708c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007090:	1d33      	adds	r3, r6, #4
 8007092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007094:	6838      	ldr	r0, [r7, #0]
 8007096:	f004 f9a7 	bl	800b3e8 <USB_DevInit>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e014      	b.n	80070d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d102      	bne.n	80070ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f80b 	bl	80070e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f004 fb65 	bl	800b79e <USB_DevDisconnect>

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080070e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <HAL_PCDEx_ActivateLPM+0x44>)
 8007110:	4313      	orrs	r3, r2
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	10000003 	.word	0x10000003

08007128 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a04      	ldr	r2, [pc, #16]	; (8007144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	bf00      	nop
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40007000 	.word	0x40007000

08007148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007150:	2300      	movs	r3, #0
 8007152:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e291      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8087 	beq.w	800727a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800716c:	4b96      	ldr	r3, [pc, #600]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 030c 	and.w	r3, r3, #12
 8007174:	2b04      	cmp	r3, #4
 8007176:	d00c      	beq.n	8007192 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007178:	4b93      	ldr	r3, [pc, #588]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 030c 	and.w	r3, r3, #12
 8007180:	2b08      	cmp	r3, #8
 8007182:	d112      	bne.n	80071aa <HAL_RCC_OscConfig+0x62>
 8007184:	4b90      	ldr	r3, [pc, #576]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007190:	d10b      	bne.n	80071aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007192:	4b8d      	ldr	r3, [pc, #564]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d06c      	beq.n	8007278 <HAL_RCC_OscConfig+0x130>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d168      	bne.n	8007278 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e26b      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b2:	d106      	bne.n	80071c2 <HAL_RCC_OscConfig+0x7a>
 80071b4:	4b84      	ldr	r3, [pc, #528]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a83      	ldr	r2, [pc, #524]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	e02e      	b.n	8007220 <HAL_RCC_OscConfig+0xd8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10c      	bne.n	80071e4 <HAL_RCC_OscConfig+0x9c>
 80071ca:	4b7f      	ldr	r3, [pc, #508]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a7e      	ldr	r2, [pc, #504]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	4b7c      	ldr	r3, [pc, #496]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a7b      	ldr	r2, [pc, #492]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	e01d      	b.n	8007220 <HAL_RCC_OscConfig+0xd8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071ec:	d10c      	bne.n	8007208 <HAL_RCC_OscConfig+0xc0>
 80071ee:	4b76      	ldr	r3, [pc, #472]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a75      	ldr	r2, [pc, #468]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	4b73      	ldr	r3, [pc, #460]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a72      	ldr	r2, [pc, #456]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e00b      	b.n	8007220 <HAL_RCC_OscConfig+0xd8>
 8007208:	4b6f      	ldr	r3, [pc, #444]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a6e      	ldr	r2, [pc, #440]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800720e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	4b6c      	ldr	r3, [pc, #432]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a6b      	ldr	r2, [pc, #428]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800721a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800721e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d013      	beq.n	8007250 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fa ff10 	bl	800204c <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007230:	f7fa ff0c 	bl	800204c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b64      	cmp	r3, #100	; 0x64
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e21f      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007242:	4b61      	ldr	r3, [pc, #388]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCC_OscConfig+0xe8>
 800724e:	e014      	b.n	800727a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7fa fefc 	bl	800204c <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007258:	f7fa fef8 	bl	800204c <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b64      	cmp	r3, #100	; 0x64
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e20b      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800726a:	4b57      	ldr	r3, [pc, #348]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0x110>
 8007276:	e000      	b.n	800727a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d069      	beq.n	800735a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007286:	4b50      	ldr	r3, [pc, #320]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007292:	4b4d      	ldr	r3, [pc, #308]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 030c 	and.w	r3, r3, #12
 800729a:	2b08      	cmp	r3, #8
 800729c:	d11c      	bne.n	80072d8 <HAL_RCC_OscConfig+0x190>
 800729e:	4b4a      	ldr	r3, [pc, #296]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d116      	bne.n	80072d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072aa:	4b47      	ldr	r3, [pc, #284]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_RCC_OscConfig+0x17a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d001      	beq.n	80072c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e1df      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c2:	4b41      	ldr	r3, [pc, #260]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	493d      	ldr	r1, [pc, #244]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072d6:	e040      	b.n	800735a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d023      	beq.n	8007328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fa feae 	bl	800204c <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f4:	f7fa feaa 	bl	800204c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e1bd      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007306:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f0      	beq.n	80072f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007312:	4b2d      	ldr	r3, [pc, #180]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4929      	ldr	r1, [pc, #164]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007322:	4313      	orrs	r3, r2
 8007324:	600b      	str	r3, [r1, #0]
 8007326:	e018      	b.n	800735a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007328:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fa fe8a 	bl	800204c <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733c:	f7fa fe86 	bl	800204c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e199      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800734e:	4b1e      	ldr	r3, [pc, #120]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d038      	beq.n	80073d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d019      	beq.n	80073a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800736e:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737a:	f7fa fe67 	bl	800204c <HAL_GetTick>
 800737e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007382:	f7fa fe63 	bl	800204c <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e176      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 8007396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0f0      	beq.n	8007382 <HAL_RCC_OscConfig+0x23a>
 80073a0:	e01a      	b.n	80073d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80073a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a6:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <HAL_RCC_OscConfig+0x280>)
 80073a8:	f023 0301 	bic.w	r3, r3, #1
 80073ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ae:	f7fa fe4d 	bl	800204c <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073b4:	e00a      	b.n	80073cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b6:	f7fa fe49 	bl	800204c <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d903      	bls.n	80073cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e15c      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
 80073c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073cc:	4b91      	ldr	r3, [pc, #580]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80073ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ee      	bne.n	80073b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80a4 	beq.w	800752e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073e6:	4b8b      	ldr	r3, [pc, #556]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10d      	bne.n	800740e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80073f2:	4b88      	ldr	r3, [pc, #544]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	4a87      	ldr	r2, [pc, #540]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80073f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fc:	6413      	str	r3, [r2, #64]	; 0x40
 80073fe:	4b85      	ldr	r3, [pc, #532]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007406:	60bb      	str	r3, [r7, #8]
 8007408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800740e:	4b82      	ldr	r3, [pc, #520]	; (8007618 <HAL_RCC_OscConfig+0x4d0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007416:	2b00      	cmp	r3, #0
 8007418:	d118      	bne.n	800744c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800741a:	4b7f      	ldr	r3, [pc, #508]	; (8007618 <HAL_RCC_OscConfig+0x4d0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a7e      	ldr	r2, [pc, #504]	; (8007618 <HAL_RCC_OscConfig+0x4d0>)
 8007420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007426:	f7fa fe11 	bl	800204c <HAL_GetTick>
 800742a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800742c:	e008      	b.n	8007440 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800742e:	f7fa fe0d 	bl	800204c <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b64      	cmp	r3, #100	; 0x64
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e120      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007440:	4b75      	ldr	r3, [pc, #468]	; (8007618 <HAL_RCC_OscConfig+0x4d0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0f0      	beq.n	800742e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d106      	bne.n	8007462 <HAL_RCC_OscConfig+0x31a>
 8007454:	4b6f      	ldr	r3, [pc, #444]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	4a6e      	ldr	r2, [pc, #440]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	6713      	str	r3, [r2, #112]	; 0x70
 8007460:	e02d      	b.n	80074be <HAL_RCC_OscConfig+0x376>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10c      	bne.n	8007484 <HAL_RCC_OscConfig+0x33c>
 800746a:	4b6a      	ldr	r3, [pc, #424]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a69      	ldr	r2, [pc, #420]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
 8007476:	4b67      	ldr	r3, [pc, #412]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	4a66      	ldr	r2, [pc, #408]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800747c:	f023 0304 	bic.w	r3, r3, #4
 8007480:	6713      	str	r3, [r2, #112]	; 0x70
 8007482:	e01c      	b.n	80074be <HAL_RCC_OscConfig+0x376>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b05      	cmp	r3, #5
 800748a:	d10c      	bne.n	80074a6 <HAL_RCC_OscConfig+0x35e>
 800748c:	4b61      	ldr	r3, [pc, #388]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	4a60      	ldr	r2, [pc, #384]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007492:	f043 0304 	orr.w	r3, r3, #4
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
 8007498:	4b5e      	ldr	r3, [pc, #376]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	4a5d      	ldr	r2, [pc, #372]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	6713      	str	r3, [r2, #112]	; 0x70
 80074a4:	e00b      	b.n	80074be <HAL_RCC_OscConfig+0x376>
 80074a6:	4b5b      	ldr	r3, [pc, #364]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	4a5a      	ldr	r2, [pc, #360]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80074ac:	f023 0301 	bic.w	r3, r3, #1
 80074b0:	6713      	str	r3, [r2, #112]	; 0x70
 80074b2:	4b58      	ldr	r3, [pc, #352]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	4a57      	ldr	r2, [pc, #348]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80074b8:	f023 0304 	bic.w	r3, r3, #4
 80074bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d015      	beq.n	80074f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c6:	f7fa fdc1 	bl	800204c <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074cc:	e00a      	b.n	80074e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ce:	f7fa fdbd 	bl	800204c <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074dc:	4293      	cmp	r3, r2
 80074de:	d901      	bls.n	80074e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e0ce      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e4:	4b4b      	ldr	r3, [pc, #300]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0ee      	beq.n	80074ce <HAL_RCC_OscConfig+0x386>
 80074f0:	e014      	b.n	800751c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f2:	f7fa fdab 	bl	800204c <HAL_GetTick>
 80074f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f8:	e00a      	b.n	8007510 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074fa:	f7fa fda7 	bl	800204c <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f241 3288 	movw	r2, #5000	; 0x1388
 8007508:	4293      	cmp	r3, r2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e0b8      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007510:	4b40      	ldr	r3, [pc, #256]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1ee      	bne.n	80074fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d105      	bne.n	800752e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007522:	4b3c      	ldr	r3, [pc, #240]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	4a3b      	ldr	r2, [pc, #236]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800752c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80a4 	beq.w	8007680 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007538:	4b36      	ldr	r3, [pc, #216]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 030c 	and.w	r3, r3, #12
 8007540:	2b08      	cmp	r3, #8
 8007542:	d06b      	beq.n	800761c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d149      	bne.n	80075e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800754c:	4b31      	ldr	r3, [pc, #196]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a30      	ldr	r2, [pc, #192]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007558:	f7fa fd78 	bl	800204c <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007560:	f7fa fd74 	bl	800204c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e087      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007572:	4b28      	ldr	r3, [pc, #160]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f0      	bne.n	8007560 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69da      	ldr	r2, [r3, #28]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	019b      	lsls	r3, r3, #6
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	3b01      	subs	r3, #1
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	4313      	orrs	r3, r2
 80075a4:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075ac:	4b19      	ldr	r3, [pc, #100]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b8:	f7fa fd48 	bl	800204c <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c0:	f7fa fd44 	bl	800204c <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e057      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <HAL_RCC_OscConfig+0x478>
 80075de:	e04f      	b.n	8007680 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0b      	ldr	r2, [pc, #44]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 80075e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fa fd2e 	bl	800204c <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fa fd2a 	bl	800204c <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e03d      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b03      	ldr	r3, [pc, #12]	; (8007614 <HAL_RCC_OscConfig+0x4cc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x4ac>
 8007612:	e035      	b.n	8007680 <HAL_RCC_OscConfig+0x538>
 8007614:	40023800 	.word	0x40023800
 8007618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800761c:	4b1b      	ldr	r3, [pc, #108]	; (800768c <HAL_RCC_OscConfig+0x544>)
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d028      	beq.n	800767c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007634:	429a      	cmp	r2, r3
 8007636:	d121      	bne.n	800767c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007642:	429a      	cmp	r2, r3
 8007644:	d11a      	bne.n	800767c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800764c:	4013      	ands	r3, r2
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007652:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007654:	4293      	cmp	r3, r2
 8007656:	d111      	bne.n	800767c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	3b01      	subs	r3, #1
 8007666:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007668:	429a      	cmp	r2, r3
 800766a:	d107      	bne.n	800767c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007678:	429a      	cmp	r2, r3
 800767a:	d001      	beq.n	8007680 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40023800 	.word	0x40023800

08007690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0d0      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076a8:	4b6a      	ldr	r3, [pc, #424]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d910      	bls.n	80076d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b6:	4b67      	ldr	r3, [pc, #412]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 020f 	bic.w	r2, r3, #15
 80076be:	4965      	ldr	r1, [pc, #404]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c6:	4b63      	ldr	r3, [pc, #396]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0b8      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d020      	beq.n	8007726 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076f0:	4b59      	ldr	r3, [pc, #356]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a58      	ldr	r2, [pc, #352]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 80076f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007708:	4b53      	ldr	r3, [pc, #332]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a52      	ldr	r2, [pc, #328]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 800770e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007712:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007714:	4b50      	ldr	r3, [pc, #320]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	494d      	ldr	r1, [pc, #308]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d040      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d107      	bne.n	800774a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773a:	4b47      	ldr	r3, [pc, #284]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d115      	bne.n	8007772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e07f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d107      	bne.n	8007762 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007752:	4b41      	ldr	r3, [pc, #260]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d109      	bne.n	8007772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e073      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007762:	4b3d      	ldr	r3, [pc, #244]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e06b      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007772:	4b39      	ldr	r3, [pc, #228]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f023 0203 	bic.w	r2, r3, #3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4936      	ldr	r1, [pc, #216]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007780:	4313      	orrs	r3, r2
 8007782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007784:	f7fa fc62 	bl	800204c <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800778a:	e00a      	b.n	80077a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800778c:	f7fa fc5e 	bl	800204c <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f241 3288 	movw	r2, #5000	; 0x1388
 800779a:	4293      	cmp	r3, r2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e053      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a2:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 020c 	and.w	r2, r3, #12
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d1eb      	bne.n	800778c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077b4:	4b27      	ldr	r3, [pc, #156]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d210      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077c2:	4b24      	ldr	r3, [pc, #144]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 020f 	bic.w	r2, r3, #15
 80077ca:	4922      	ldr	r1, [pc, #136]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d2:	4b20      	ldr	r3, [pc, #128]	; (8007854 <HAL_RCC_ClockConfig+0x1c4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d001      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e032      	b.n	800784a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	4916      	ldr	r1, [pc, #88]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	490e      	ldr	r1, [pc, #56]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007822:	f000 f821 	bl	8007868 <HAL_RCC_GetSysClockFreq>
 8007826:	4602      	mov	r2, r0
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <HAL_RCC_ClockConfig+0x1c8>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	490a      	ldr	r1, [pc, #40]	; (800785c <HAL_RCC_ClockConfig+0x1cc>)
 8007834:	5ccb      	ldrb	r3, [r1, r3]
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <HAL_RCC_ClockConfig+0x1d0>)
 800783c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <HAL_RCC_ClockConfig+0x1d4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f7fa fbbe 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40023c00 	.word	0x40023c00
 8007858:	40023800 	.word	0x40023800
 800785c:	0801b590 	.word	0x0801b590
 8007860:	20000000 	.word	0x20000000
 8007864:	20000004 	.word	0x20000004

08007868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800786c:	b094      	sub	sp, #80	; 0x50
 800786e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	647b      	str	r3, [r7, #68]	; 0x44
 8007874:	2300      	movs	r3, #0
 8007876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007878:	2300      	movs	r3, #0
 800787a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007880:	4b79      	ldr	r3, [pc, #484]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 030c 	and.w	r3, r3, #12
 8007888:	2b08      	cmp	r3, #8
 800788a:	d00d      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x40>
 800788c:	2b08      	cmp	r3, #8
 800788e:	f200 80e1 	bhi.w	8007a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_RCC_GetSysClockFreq+0x34>
 8007896:	2b04      	cmp	r3, #4
 8007898:	d003      	beq.n	80078a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800789a:	e0db      	b.n	8007a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800789c:	4b73      	ldr	r3, [pc, #460]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800789e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078a0:	e0db      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078a2:	4b73      	ldr	r3, [pc, #460]	; (8007a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078a6:	e0d8      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078a8:	4b6f      	ldr	r3, [pc, #444]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80078b2:	4b6d      	ldr	r3, [pc, #436]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d063      	beq.n	8007986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078be:	4b6a      	ldr	r3, [pc, #424]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	2200      	movs	r2, #0
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30
 80078d2:	2300      	movs	r3, #0
 80078d4:	637b      	str	r3, [r7, #52]	; 0x34
 80078d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078da:	4622      	mov	r2, r4
 80078dc:	462b      	mov	r3, r5
 80078de:	f04f 0000 	mov.w	r0, #0
 80078e2:	f04f 0100 	mov.w	r1, #0
 80078e6:	0159      	lsls	r1, r3, #5
 80078e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078ec:	0150      	lsls	r0, r2, #5
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4621      	mov	r1, r4
 80078f4:	1a51      	subs	r1, r2, r1
 80078f6:	6139      	str	r1, [r7, #16]
 80078f8:	4629      	mov	r1, r5
 80078fa:	eb63 0301 	sbc.w	r3, r3, r1
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800790c:	4659      	mov	r1, fp
 800790e:	018b      	lsls	r3, r1, #6
 8007910:	4651      	mov	r1, sl
 8007912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007916:	4651      	mov	r1, sl
 8007918:	018a      	lsls	r2, r1, #6
 800791a:	4651      	mov	r1, sl
 800791c:	ebb2 0801 	subs.w	r8, r2, r1
 8007920:	4659      	mov	r1, fp
 8007922:	eb63 0901 	sbc.w	r9, r3, r1
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800793a:	4690      	mov	r8, r2
 800793c:	4699      	mov	r9, r3
 800793e:	4623      	mov	r3, r4
 8007940:	eb18 0303 	adds.w	r3, r8, r3
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	462b      	mov	r3, r5
 8007948:	eb49 0303 	adc.w	r3, r9, r3
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800795a:	4629      	mov	r1, r5
 800795c:	024b      	lsls	r3, r1, #9
 800795e:	4621      	mov	r1, r4
 8007960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007964:	4621      	mov	r1, r4
 8007966:	024a      	lsls	r2, r1, #9
 8007968:	4610      	mov	r0, r2
 800796a:	4619      	mov	r1, r3
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	2200      	movs	r2, #0
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
 8007972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007978:	f7f8 fca2 	bl	80002c0 <__aeabi_uldivmod>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4613      	mov	r3, r2
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007984:	e058      	b.n	8007a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007986:	4b38      	ldr	r3, [pc, #224]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	099b      	lsrs	r3, r3, #6
 800798c:	2200      	movs	r2, #0
 800798e:	4618      	mov	r0, r3
 8007990:	4611      	mov	r1, r2
 8007992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007996:	623b      	str	r3, [r7, #32]
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
 800799c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079a0:	4642      	mov	r2, r8
 80079a2:	464b      	mov	r3, r9
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f04f 0100 	mov.w	r1, #0
 80079ac:	0159      	lsls	r1, r3, #5
 80079ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079b2:	0150      	lsls	r0, r2, #5
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4641      	mov	r1, r8
 80079ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80079be:	4649      	mov	r1, r9
 80079c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079d8:	ebb2 040a 	subs.w	r4, r2, sl
 80079dc:	eb63 050b 	sbc.w	r5, r3, fp
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	00eb      	lsls	r3, r5, #3
 80079ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ee:	00e2      	lsls	r2, r4, #3
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	4643      	mov	r3, r8
 80079f6:	18e3      	adds	r3, r4, r3
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	464b      	mov	r3, r9
 80079fc:	eb45 0303 	adc.w	r3, r5, r3
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a0e:	4629      	mov	r1, r5
 8007a10:	028b      	lsls	r3, r1, #10
 8007a12:	4621      	mov	r1, r4
 8007a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a18:	4621      	mov	r1, r4
 8007a1a:	028a      	lsls	r2, r1, #10
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a22:	2200      	movs	r2, #0
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a2c:	f7f8 fc48 	bl	80002c0 <__aeabi_uldivmod>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4613      	mov	r3, r2
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	3301      	adds	r3, #1
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a52:	e002      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3750      	adds	r7, #80	; 0x50
 8007a60:	46bd      	mov	sp, r7
 8007a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a66:	bf00      	nop
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	00f42400 	.word	0x00f42400
 8007a70:	007a1200 	.word	0x007a1200

08007a74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a78:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	20000000 	.word	0x20000000

08007a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a90:	f7ff fff0 	bl	8007a74 <HAL_RCC_GetHCLKFreq>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0a9b      	lsrs	r3, r3, #10
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	4903      	ldr	r1, [pc, #12]	; (8007ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aa2:	5ccb      	ldrb	r3, [r1, r3]
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	0801b5a0 	.word	0x0801b5a0

08007ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ab8:	f7ff ffdc 	bl	8007a74 <HAL_RCC_GetHCLKFreq>
 8007abc:	4602      	mov	r2, r0
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	0b5b      	lsrs	r3, r3, #13
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	4903      	ldr	r1, [pc, #12]	; (8007ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aca:	5ccb      	ldrb	r3, [r1, r3]
 8007acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	0801b5a0 	.word	0x0801b5a0

08007adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b04:	4b69      	ldr	r3, [pc, #420]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4a68      	ldr	r2, [pc, #416]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b0e:	6093      	str	r3, [r2, #8]
 8007b10:	4b66      	ldr	r3, [pc, #408]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b18:	4964      	ldr	r1, [pc, #400]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d017      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b36:	4b5d      	ldr	r3, [pc, #372]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b44:	4959      	ldr	r1, [pc, #356]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b54:	d101      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b56:	2301      	movs	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d017      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b72:	4b4e      	ldr	r3, [pc, #312]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	494a      	ldr	r1, [pc, #296]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b90:	d101      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 808b 	beq.w	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bc0:	4b3a      	ldr	r3, [pc, #232]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	4a39      	ldr	r2, [pc, #228]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bca:	6413      	str	r3, [r2, #64]	; 0x40
 8007bcc:	4b37      	ldr	r3, [pc, #220]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd4:	60bb      	str	r3, [r7, #8]
 8007bd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bd8:	4b35      	ldr	r3, [pc, #212]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a34      	ldr	r2, [pc, #208]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be4:	f7fa fa32 	bl	800204c <HAL_GetTick>
 8007be8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bea:	e008      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bec:	f7fa fa2e 	bl	800204c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b64      	cmp	r3, #100	; 0x64
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e357      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bfe:	4b2c      	ldr	r3, [pc, #176]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c0a:	4b28      	ldr	r3, [pc, #160]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d035      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d02e      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c28:	4b20      	ldr	r3, [pc, #128]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c32:	4b1e      	ldr	r3, [pc, #120]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c3e:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c42:	4a1a      	ldr	r2, [pc, #104]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c4a:	4a18      	ldr	r2, [pc, #96]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c50:	4b16      	ldr	r3, [pc, #88]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d114      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fa f9f6 	bl	800204c <HAL_GetTick>
 8007c60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c62:	e00a      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f7fa f9f2 	bl	800204c <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e319      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0ee      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c92:	d111      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ca2:	400b      	ands	r3, r1
 8007ca4:	4901      	ldr	r1, [pc, #4]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
 8007caa:	e00b      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	40007000 	.word	0x40007000
 8007cb4:	0ffffcff 	.word	0x0ffffcff
 8007cb8:	4baa      	ldr	r3, [pc, #680]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4aa9      	ldr	r2, [pc, #676]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cc2:	6093      	str	r3, [r2, #8]
 8007cc4:	4ba7      	ldr	r3, [pc, #668]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cd0:	49a4      	ldr	r1, [pc, #656]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d010      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ce2:	4ba0      	ldr	r3, [pc, #640]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce8:	4a9e      	ldr	r2, [pc, #632]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007cf2:	4b9c      	ldr	r3, [pc, #624]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	4999      	ldr	r1, [pc, #612]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d10:	4b94      	ldr	r3, [pc, #592]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1e:	4991      	ldr	r1, [pc, #580]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d32:	4b8c      	ldr	r3, [pc, #560]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d40:	4988      	ldr	r1, [pc, #544]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d54:	4b83      	ldr	r3, [pc, #524]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d62:	4980      	ldr	r1, [pc, #512]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d76:	4b7b      	ldr	r3, [pc, #492]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	4977      	ldr	r1, [pc, #476]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d98:	4b72      	ldr	r3, [pc, #456]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9e:	f023 0203 	bic.w	r2, r3, #3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	496f      	ldr	r1, [pc, #444]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dba:	4b6a      	ldr	r3, [pc, #424]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc0:	f023 020c 	bic.w	r2, r3, #12
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc8:	4966      	ldr	r1, [pc, #408]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ddc:	4b61      	ldr	r3, [pc, #388]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dea:	495e      	ldr	r1, [pc, #376]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dfe:	4b59      	ldr	r3, [pc, #356]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0c:	4955      	ldr	r1, [pc, #340]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e20:	4b50      	ldr	r3, [pc, #320]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	494d      	ldr	r1, [pc, #308]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e42:	4b48      	ldr	r3, [pc, #288]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e50:	4944      	ldr	r1, [pc, #272]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e64:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	493c      	ldr	r1, [pc, #240]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e86:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e94:	4933      	ldr	r1, [pc, #204]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ea8:	4b2e      	ldr	r3, [pc, #184]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb6:	492b      	ldr	r1, [pc, #172]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d011      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007eca:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed8:	4922      	ldr	r1, [pc, #136]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ee8:	d101      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f0a:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f18:	4912      	ldr	r1, [pc, #72]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3c:	4909      	ldr	r1, [pc, #36]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d006      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80d9 	beq.w	800810a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f58:	4b02      	ldr	r3, [pc, #8]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a01      	ldr	r2, [pc, #4]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f62:	e001      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f64:	40023800 	.word	0x40023800
 8007f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f6a:	f7fa f86f 	bl	800204c <HAL_GetTick>
 8007f6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f70:	e008      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f72:	f7fa f86b 	bl	800204c <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b64      	cmp	r3, #100	; 0x64
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e194      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f84:	4b6c      	ldr	r3, [pc, #432]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f0      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d021      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d11d      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fa4:	4b64      	ldr	r3, [pc, #400]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007faa:	0c1b      	lsrs	r3, r3, #16
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007fb2:	4b61      	ldr	r3, [pc, #388]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb8:	0e1b      	lsrs	r3, r3, #24
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	019a      	lsls	r2, r3, #6
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	041b      	lsls	r3, r3, #16
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	061b      	lsls	r3, r3, #24
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	071b      	lsls	r3, r3, #28
 8007fd8:	4957      	ldr	r1, [pc, #348]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ff4:	d00a      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d02e      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800800a:	d129      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800800c:	4b4a      	ldr	r3, [pc, #296]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800800e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008012:	0c1b      	lsrs	r3, r3, #16
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800801a:	4b47      	ldr	r3, [pc, #284]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800801c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008020:	0f1b      	lsrs	r3, r3, #28
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	019a      	lsls	r2, r3, #6
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	041b      	lsls	r3, r3, #16
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	061b      	lsls	r3, r3, #24
 800803a:	431a      	orrs	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	071b      	lsls	r3, r3, #28
 8008040:	493d      	ldr	r1, [pc, #244]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008048:	4b3b      	ldr	r3, [pc, #236]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800804a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804e:	f023 021f 	bic.w	r2, r3, #31
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	3b01      	subs	r3, #1
 8008058:	4937      	ldr	r1, [pc, #220]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01d      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800806c:	4b32      	ldr	r3, [pc, #200]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800806e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800807a:	4b2f      	ldr	r3, [pc, #188]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800807c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008080:	0f1b      	lsrs	r3, r3, #28
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	019a      	lsls	r2, r3, #6
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	041b      	lsls	r3, r3, #16
 8008094:	431a      	orrs	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	061b      	lsls	r3, r3, #24
 800809a:	431a      	orrs	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	071b      	lsls	r3, r3, #28
 80080a0:	4925      	ldr	r1, [pc, #148]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d011      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	019a      	lsls	r2, r3, #6
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	041b      	lsls	r3, r3, #16
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	061b      	lsls	r3, r3, #24
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	071b      	lsls	r3, r3, #28
 80080d0:	4919      	ldr	r1, [pc, #100]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080d8:	4b17      	ldr	r3, [pc, #92]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a16      	ldr	r2, [pc, #88]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080e4:	f7f9 ffb2 	bl	800204c <HAL_GetTick>
 80080e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080ea:	e008      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080ec:	f7f9 ffae 	bl	800204c <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b64      	cmp	r3, #100	; 0x64
 80080f8:	d901      	bls.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e0d7      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b01      	cmp	r3, #1
 800810e:	f040 80cd 	bne.w	80082ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a08      	ldr	r2, [pc, #32]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800811c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811e:	f7f9 ff95 	bl	800204c <HAL_GetTick>
 8008122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008124:	e00a      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008126:	f7f9 ff91 	bl	800204c <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b64      	cmp	r3, #100	; 0x64
 8008132:	d903      	bls.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e0ba      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008138:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800813c:	4b5e      	ldr	r3, [pc, #376]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008148:	d0ed      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008166:	2b00      	cmp	r3, #0
 8008168:	d02e      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d12a      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008172:	4b51      	ldr	r3, [pc, #324]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008178:	0c1b      	lsrs	r3, r3, #16
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008180:	4b4d      	ldr	r3, [pc, #308]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008186:	0f1b      	lsrs	r3, r3, #28
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	019a      	lsls	r2, r3, #6
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	061b      	lsls	r3, r3, #24
 80081a0:	431a      	orrs	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	071b      	lsls	r3, r3, #28
 80081a6:	4944      	ldr	r1, [pc, #272]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081ae:	4b42      	ldr	r3, [pc, #264]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	3b01      	subs	r3, #1
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	493d      	ldr	r1, [pc, #244]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d022      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081dc:	d11d      	bne.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081de:	4b36      	ldr	r3, [pc, #216]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	0e1b      	lsrs	r3, r3, #24
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081ec:	4b32      	ldr	r3, [pc, #200]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	0f1b      	lsrs	r3, r3, #28
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	019a      	lsls	r2, r3, #6
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	041b      	lsls	r3, r3, #16
 8008206:	431a      	orrs	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	071b      	lsls	r3, r3, #28
 8008212:	4929      	ldr	r1, [pc, #164]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008214:	4313      	orrs	r3, r2
 8008216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0308 	and.w	r3, r3, #8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d028      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008226:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822c:	0e1b      	lsrs	r3, r3, #24
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008234:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823a:	0c1b      	lsrs	r3, r3, #16
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	019a      	lsls	r2, r3, #6
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	041b      	lsls	r3, r3, #16
 800824c:	431a      	orrs	r2, r3
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	061b      	lsls	r3, r3, #24
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	071b      	lsls	r3, r3, #28
 800825a:	4917      	ldr	r1, [pc, #92]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800825c:	4313      	orrs	r3, r2
 800825e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4911      	ldr	r1, [pc, #68]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a0e      	ldr	r2, [pc, #56]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800827e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008284:	f7f9 fee2 	bl	800204c <HAL_GetTick>
 8008288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800828a:	e008      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800828c:	f7f9 fede 	bl	800204c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e007      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082aa:	d1ef      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3720      	adds	r7, #32
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40023800 	.word	0x40023800

080082bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e09d      	b.n	800840a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d108      	bne.n	80082e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082de:	d009      	beq.n	80082f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	61da      	str	r2, [r3, #28]
 80082e6:	e005      	b.n	80082f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7f8 ffc2 	bl	8001298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800832a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008334:	d902      	bls.n	800833c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	e002      	b.n	8008342 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800833c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008340:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800834a:	d007      	beq.n	800835c <HAL_SPI_Init+0xa0>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008354:	d002      	beq.n	800835c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	ea42 0103 	orr.w	r1, r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	0c1b      	lsrs	r3, r3, #16
 80083b8:	f003 0204 	and.w	r2, r3, #4
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083d8:	ea42 0103 	orr.w	r1, r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008430:	2302      	movs	r3, #2
 8008432:	e16c      	b.n	800870e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008442:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800844a:	7dbb      	ldrb	r3, [r7, #22]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d00d      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x58>
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008456:	d106      	bne.n	8008466 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008460:	7dbb      	ldrb	r3, [r7, #22]
 8008462:	2b04      	cmp	r3, #4
 8008464:	d002      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008466:	2302      	movs	r3, #2
 8008468:	75fb      	strb	r3, [r7, #23]
    goto error;
 800846a:	e14b      	b.n	8008704 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008478:	887b      	ldrh	r3, [r7, #2]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008482:	e13f      	b.n	8008704 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b04      	cmp	r3, #4
 800848e:	d003      	beq.n	8008498 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2205      	movs	r2, #5
 8008494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	887a      	ldrh	r2, [r7, #2]
 80084a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	887a      	ldrh	r2, [r7, #2]
 80084ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	887a      	ldrh	r2, [r7, #2]
 80084ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	887a      	ldrh	r2, [r7, #2]
 80084c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80084e0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084ea:	d908      	bls.n	80084fe <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084fa:	605a      	str	r2, [r3, #4]
 80084fc:	e06f      	b.n	80085de <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800850c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008518:	d126      	bne.n	8008568 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10f      	bne.n	8008546 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008534:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800853a:	b29b      	uxth	r3, r3
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008544:	e010      	b.n	8008568 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008554:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855a:	b29b      	uxth	r3, r3
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	b29b      	uxth	r3, r3
 8008560:	3301      	adds	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008572:	d134      	bne.n	80085de <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008582:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800858a:	b29b      	uxth	r3, r3
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d111      	bne.n	80085b8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	085b      	lsrs	r3, r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80085b6:	e012      	b.n	80085de <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3301      	adds	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d108      	bne.n	80085fc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	4a4a      	ldr	r2, [pc, #296]	; (8008718 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80085f0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f6:	4a49      	ldr	r2, [pc, #292]	; (800871c <HAL_SPI_TransmitReceive_DMA+0x308>)
 80085f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80085fa:	e007      	b.n	800860c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008600:	4a47      	ldr	r2, [pc, #284]	; (8008720 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008602:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008608:	4a46      	ldr	r2, [pc, #280]	; (8008724 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800860a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008610:	4a45      	ldr	r2, [pc, #276]	; (8008728 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	2200      	movs	r2, #0
 800861a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	4619      	mov	r1, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008634:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008636:	f7fa fcff 	bl	8003038 <HAL_DMA_Start_IT>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00c      	beq.n	800865a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008644:	f043 0210 	orr.w	r2, r3, #16
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008658:	e054      	b.n	8008704 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	2200      	movs	r2, #0
 8008670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	2200      	movs	r2, #0
 8008678:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	2200      	movs	r2, #0
 8008680:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008686:	2200      	movs	r2, #0
 8008688:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	4619      	mov	r1, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	330c      	adds	r3, #12
 800869a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80086a2:	f7fa fcc9 	bl	8003038 <HAL_DMA_Start_IT>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b0:	f043 0210 	orr.w	r2, r3, #16
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80086c4:	e01e      	b.n	8008704 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d0:	2b40      	cmp	r3, #64	; 0x40
 80086d2:	d007      	beq.n	80086e4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086e2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0220 	orr.w	r2, r2, #32
 80086f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0202 	orr.w	r2, r2, #2
 8008702:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	08008acd 	.word	0x08008acd
 800871c:	08008991 	.word	0x08008991
 8008720:	08008ae9 	.word	0x08008ae9
 8008724:	08008a3b 	.word	0x08008a3b
 8008728:	08008b05 	.word	0x08008b05

0800872c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	099b      	lsrs	r3, r3, #6
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10f      	bne.n	8008770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	099b      	lsrs	r3, r3, #6
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d004      	beq.n	8008770 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
    return;
 800876e:	e0d7      	b.n	8008920 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <HAL_SPI_IRQHandler+0x66>
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	09db      	lsrs	r3, r3, #7
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	4798      	blx	r3
    return;
 8008790:	e0c6      	b.n	8008920 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10c      	bne.n	80087b8 <HAL_SPI_IRQHandler+0x8c>
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	099b      	lsrs	r3, r3, #6
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d106      	bne.n	80087b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	0a1b      	lsrs	r3, r3, #8
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80b4 	beq.w	8008920 <HAL_SPI_IRQHandler+0x1f4>
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80ad 	beq.w	8008920 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	099b      	lsrs	r3, r3, #6
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d023      	beq.n	800881a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d011      	beq.n	8008802 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e2:	f043 0204 	orr.w	r2, r3, #4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	e00b      	b.n	800881a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008802:	2300      	movs	r3, #0
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	693b      	ldr	r3, [r7, #16]
        return;
 8008818:	e082      	b.n	8008920 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d014      	beq.n	8008850 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800882a:	f043 0201 	orr.w	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00c      	beq.n	8008876 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008860:	f043 0208 	orr.w	r2, r3, #8
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008868:	2300      	movs	r3, #0
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887a:	2b00      	cmp	r3, #0
 800887c:	d04f      	beq.n	800891e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800888c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <HAL_SPI_IRQHandler+0x17e>
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d034      	beq.n	8008914 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0203 	bic.w	r2, r2, #3
 80088b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d011      	beq.n	80088e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c6:	4a18      	ldr	r2, [pc, #96]	; (8008928 <HAL_SPI_IRQHandler+0x1fc>)
 80088c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fa fc82 	bl	80031d8 <HAL_DMA_Abort_IT>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d005      	beq.n	80088e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d016      	beq.n	800891c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f2:	4a0d      	ldr	r2, [pc, #52]	; (8008928 <HAL_SPI_IRQHandler+0x1fc>)
 80088f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fa fc6c 	bl	80031d8 <HAL_DMA_Abort_IT>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008912:	e003      	b.n	800891c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f831 	bl	800897c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800891a:	e000      	b.n	800891e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800891c:	bf00      	nop
    return;
 800891e:	bf00      	nop
  }
}
 8008920:	3720      	adds	r7, #32
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	08008b45 	.word	0x08008b45

0800892c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800899e:	f7f9 fb55 	bl	800204c <HAL_GetTick>
 80089a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b2:	d03c      	beq.n	8008a2e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0220 	bic.w	r2, r2, #32
 80089c2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10d      	bne.n	80089e8 <SPI_DMAReceiveCplt+0x58>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d4:	d108      	bne.n	80089e8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0203 	bic.w	r2, r2, #3
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	e007      	b.n	80089f8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	2164      	movs	r1, #100	; 0x64
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f9d5 	bl	8008dac <SPI_EndRxTransaction>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff ffa8 	bl	800897c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008a2c:	e002      	b.n	8008a34 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7ff ff7c 	bl	800892c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a48:	f7f9 fb00 	bl	800204c <HAL_GetTick>
 8008a4c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5c:	d030      	beq.n	8008ac0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0220 	bic.w	r2, r2, #32
 8008a6c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	2164      	movs	r1, #100	; 0x64
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fa16 	bl	8008ea4 <SPI_EndRxTxTransaction>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a82:	f043 0220 	orr.w	r2, r3, #32
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0203 	bic.w	r2, r2, #3
 8008a98:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff ff5f 	bl	800897c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008abe:	e002      	b.n	8008ac6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff ff3d 	bl	8008940 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff ff3a 	bl	8008954 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff ff36 	bl	8008968 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0203 	bic.w	r2, r2, #3
 8008b20:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b26:	f043 0210 	orr.w	r2, r3, #16
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff ff20 	bl	800897c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b3c:	bf00      	nop
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff ff0b 	bl	800897c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b80:	f7f9 fa64 	bl	800204c <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b90:	f7f9 fa5c 	bl	800204c <HAL_GetTick>
 8008b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b96:	4b39      	ldr	r3, [pc, #228]	; (8008c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	015b      	lsls	r3, r3, #5
 8008b9c:	0d1b      	lsrs	r3, r3, #20
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	fb02 f303 	mul.w	r3, r2, r3
 8008ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ba6:	e054      	b.n	8008c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d050      	beq.n	8008c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bb0:	f7f9 fa4c 	bl	800204c <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d902      	bls.n	8008bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d13d      	bne.n	8008c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bde:	d111      	bne.n	8008c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be8:	d004      	beq.n	8008bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf2:	d107      	bne.n	8008c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0c:	d10f      	bne.n	8008c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e017      	b.n	8008c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	bf0c      	ite	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	2300      	movne	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d19b      	bne.n	8008ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3720      	adds	r7, #32
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000000 	.word	0x20000000

08008c80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008c92:	f7f9 f9db 	bl	800204c <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008ca2:	f7f9 f9d3 	bl	800204c <HAL_GetTick>
 8008ca6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	330c      	adds	r3, #12
 8008cae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008cb0:	4b3d      	ldr	r3, [pc, #244]	; (8008da8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	00da      	lsls	r2, r3, #3
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	0d1b      	lsrs	r3, r3, #20
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008cc8:	e060      	b.n	8008d8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008cd0:	d107      	bne.n	8008ce2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d104      	bne.n	8008ce2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d050      	beq.n	8008d8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cea:	f7f9 f9af 	bl	800204c <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d902      	bls.n	8008d00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d13d      	bne.n	8008d7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d18:	d111      	bne.n	8008d3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d22:	d004      	beq.n	8008d2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2c:	d107      	bne.n	8008d3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d46:	d10f      	bne.n	8008d68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e010      	b.n	8008d9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4013      	ands	r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d196      	bne.n	8008cca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3728      	adds	r7, #40	; 0x28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000000 	.word	0x20000000

08008dac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dc0:	d111      	bne.n	8008de6 <SPI_EndRxTransaction+0x3a>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dca:	d004      	beq.n	8008dd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd4:	d107      	bne.n	8008de6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dee:	d112      	bne.n	8008e16 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	2180      	movs	r1, #128	; 0x80
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff feb8 	bl	8008b70 <SPI_WaitFlagStateUntilTimeout>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d021      	beq.n	8008e4a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0a:	f043 0220 	orr.w	r2, r3, #32
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e03d      	b.n	8008e92 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e16:	4b21      	ldr	r3, [pc, #132]	; (8008e9c <SPI_EndRxTransaction+0xf0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a21      	ldr	r2, [pc, #132]	; (8008ea0 <SPI_EndRxTransaction+0xf4>)
 8008e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e20:	0d5b      	lsrs	r3, r3, #21
 8008e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
 8008e2a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e42:	2b80      	cmp	r3, #128	; 0x80
 8008e44:	d0f2      	beq.n	8008e2c <SPI_EndRxTransaction+0x80>
 8008e46:	e000      	b.n	8008e4a <SPI_EndRxTransaction+0x9e>
        break;
 8008e48:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e52:	d11d      	bne.n	8008e90 <SPI_EndRxTransaction+0xe4>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e5c:	d004      	beq.n	8008e68 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e66:	d113      	bne.n	8008e90 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff ff03 	bl	8008c80 <SPI_WaitFifoStateUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e84:	f043 0220 	orr.w	r2, r3, #32
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e000      	b.n	8008e92 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000000 	.word	0x20000000
 8008ea0:	165e9f81 	.word	0x165e9f81

08008ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fedf 	bl	8008c80 <SPI_WaitFifoStateUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ecc:	f043 0220 	orr.w	r2, r3, #32
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e046      	b.n	8008f66 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ed8:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <SPI_EndRxTxTransaction+0xcc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a25      	ldr	r2, [pc, #148]	; (8008f74 <SPI_EndRxTxTransaction+0xd0>)
 8008ede:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee2:	0d5b      	lsrs	r3, r3, #21
 8008ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ee8:	fb02 f303 	mul.w	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef6:	d112      	bne.n	8008f1e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2200      	movs	r2, #0
 8008f00:	2180      	movs	r1, #128	; 0x80
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7ff fe34 	bl	8008b70 <SPI_WaitFlagStateUntilTimeout>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d016      	beq.n	8008f3c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f12:	f043 0220 	orr.w	r2, r3, #32
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e023      	b.n	8008f66 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f34:	2b80      	cmp	r3, #128	; 0x80
 8008f36:	d0f2      	beq.n	8008f1e <SPI_EndRxTxTransaction+0x7a>
 8008f38:	e000      	b.n	8008f3c <SPI_EndRxTxTransaction+0x98>
        break;
 8008f3a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff fe99 	bl	8008c80 <SPI_WaitFifoStateUntilTimeout>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d007      	beq.n	8008f64 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f58:	f043 0220 	orr.w	r2, r3, #32
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e000      	b.n	8008f66 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000000 	.word	0x20000000
 8008f74:	165e9f81 	.word	0x165e9f81

08008f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e049      	b.n	800901e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7f8 fb06 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f000 fac0 	bl	800953c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b01      	cmp	r3, #1
 800903a:	d001      	beq.n	8009040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e054      	b.n	80090ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a26      	ldr	r2, [pc, #152]	; (80090f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d022      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906a:	d01d      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a22      	ldr	r2, [pc, #136]	; (80090fc <HAL_TIM_Base_Start_IT+0xd4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d018      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a21      	ldr	r2, [pc, #132]	; (8009100 <HAL_TIM_Base_Start_IT+0xd8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1f      	ldr	r2, [pc, #124]	; (8009104 <HAL_TIM_Base_Start_IT+0xdc>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00e      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1e      	ldr	r2, [pc, #120]	; (8009108 <HAL_TIM_Base_Start_IT+0xe0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d009      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1c      	ldr	r2, [pc, #112]	; (800910c <HAL_TIM_Base_Start_IT+0xe4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d004      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x80>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a1b      	ldr	r2, [pc, #108]	; (8009110 <HAL_TIM_Base_Start_IT+0xe8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d115      	bne.n	80090d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	4b19      	ldr	r3, [pc, #100]	; (8009114 <HAL_TIM_Base_Start_IT+0xec>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d015      	beq.n	80090e6 <HAL_TIM_Base_Start_IT+0xbe>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c0:	d011      	beq.n	80090e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	e008      	b.n	80090e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	e000      	b.n	80090e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40000400 	.word	0x40000400
 8009100:	40000800 	.word	0x40000800
 8009104:	40000c00 	.word	0x40000c00
 8009108:	40010400 	.word	0x40010400
 800910c:	40014000 	.word	0x40014000
 8009110:	40001800 	.word	0x40001800
 8009114:	00010007 	.word	0x00010007

08009118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d122      	bne.n	8009174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b02      	cmp	r3, #2
 800913a:	d11b      	bne.n	8009174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0202 	mvn.w	r2, #2
 8009144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9d0 	bl	8009500 <HAL_TIM_IC_CaptureCallback>
 8009160:	e005      	b.n	800916e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9c2 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f9d3 	bl	8009514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b04      	cmp	r3, #4
 8009180:	d122      	bne.n	80091c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b04      	cmp	r3, #4
 800918e:	d11b      	bne.n	80091c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0204 	mvn.w	r2, #4
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f9a6 	bl	8009500 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f998 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9a9 	bl	8009514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0208 	mvn.w	r2, #8
 80091ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2204      	movs	r2, #4
 80091f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f97c 	bl	8009500 <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f96e 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f97f 	bl	8009514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b10      	cmp	r3, #16
 8009228:	d122      	bne.n	8009270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b10      	cmp	r3, #16
 8009236:	d11b      	bne.n	8009270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0210 	mvn.w	r2, #16
 8009240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2208      	movs	r2, #8
 8009246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f952 	bl	8009500 <HAL_TIM_IC_CaptureCallback>
 800925c:	e005      	b.n	800926a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f944 	bl	80094ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f955 	bl	8009514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b01      	cmp	r3, #1
 800927c:	d10e      	bne.n	800929c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b01      	cmp	r3, #1
 800928a:	d107      	bne.n	800929c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f06f 0201 	mvn.w	r2, #1
 8009294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f00d fa52 	bl	8016740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d10e      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b4:	2b80      	cmp	r3, #128	; 0x80
 80092b6:	d107      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fb0c 	bl	80098e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d10e      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d107      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 faff 	bl	80098f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	d10e      	bne.n	8009322 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d107      	bne.n	8009322 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800931a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f903 	bl	8009528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b20      	cmp	r3, #32
 800932e:	d10e      	bne.n	800934e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b20      	cmp	r3, #32
 800933c:	d107      	bne.n	800934e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f06f 0220 	mvn.w	r2, #32
 8009346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fabf 	bl	80098cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIM_ConfigClockSource+0x1c>
 8009370:	2302      	movs	r3, #2
 8009372:	e0b4      	b.n	80094de <HAL_TIM_ConfigClockSource+0x186>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4b56      	ldr	r3, [pc, #344]	; (80094e8 <HAL_TIM_ConfigClockSource+0x190>)
 8009390:	4013      	ands	r3, r2
 8009392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800939a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ac:	d03e      	beq.n	800942c <HAL_TIM_ConfigClockSource+0xd4>
 80093ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093b2:	f200 8087 	bhi.w	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	f000 8086 	beq.w	80094ca <HAL_TIM_ConfigClockSource+0x172>
 80093be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c2:	d87f      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093c4:	2b70      	cmp	r3, #112	; 0x70
 80093c6:	d01a      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0xa6>
 80093c8:	2b70      	cmp	r3, #112	; 0x70
 80093ca:	d87b      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093cc:	2b60      	cmp	r3, #96	; 0x60
 80093ce:	d050      	beq.n	8009472 <HAL_TIM_ConfigClockSource+0x11a>
 80093d0:	2b60      	cmp	r3, #96	; 0x60
 80093d2:	d877      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093d4:	2b50      	cmp	r3, #80	; 0x50
 80093d6:	d03c      	beq.n	8009452 <HAL_TIM_ConfigClockSource+0xfa>
 80093d8:	2b50      	cmp	r3, #80	; 0x50
 80093da:	d873      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	d058      	beq.n	8009492 <HAL_TIM_ConfigClockSource+0x13a>
 80093e0:	2b40      	cmp	r3, #64	; 0x40
 80093e2:	d86f      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093e4:	2b30      	cmp	r3, #48	; 0x30
 80093e6:	d064      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x15a>
 80093e8:	2b30      	cmp	r3, #48	; 0x30
 80093ea:	d86b      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d060      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x15a>
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	d867      	bhi.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d05c      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x15a>
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d05a      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x15a>
 80093fc:	e062      	b.n	80094c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6899      	ldr	r1, [r3, #8]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f000 f9af 	bl	8009770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	609a      	str	r2, [r3, #8]
      break;
 800942a:	e04f      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	6899      	ldr	r1, [r3, #8]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f000 f998 	bl	8009770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800944e:	609a      	str	r2, [r3, #8]
      break;
 8009450:	e03c      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	6859      	ldr	r1, [r3, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	461a      	mov	r2, r3
 8009460:	f000 f90c 	bl	800967c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2150      	movs	r1, #80	; 0x50
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f965 	bl	800973a <TIM_ITRx_SetConfig>
      break;
 8009470:	e02c      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6818      	ldr	r0, [r3, #0]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	6859      	ldr	r1, [r3, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	461a      	mov	r2, r3
 8009480:	f000 f92b 	bl	80096da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2160      	movs	r1, #96	; 0x60
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f955 	bl	800973a <TIM_ITRx_SetConfig>
      break;
 8009490:	e01c      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	461a      	mov	r2, r3
 80094a0:	f000 f8ec 	bl	800967c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2140      	movs	r1, #64	; 0x40
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f945 	bl	800973a <TIM_ITRx_SetConfig>
      break;
 80094b0:	e00c      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4619      	mov	r1, r3
 80094bc:	4610      	mov	r0, r2
 80094be:	f000 f93c 	bl	800973a <TIM_ITRx_SetConfig>
      break;
 80094c2:	e003      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	73fb      	strb	r3, [r7, #15]
      break;
 80094c8:	e000      	b.n	80094cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80094ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	fffeff88 	.word	0xfffeff88

080094ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a40      	ldr	r2, [pc, #256]	; (8009650 <TIM_Base_SetConfig+0x114>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d013      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955a:	d00f      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a3d      	ldr	r2, [pc, #244]	; (8009654 <TIM_Base_SetConfig+0x118>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00b      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a3c      	ldr	r2, [pc, #240]	; (8009658 <TIM_Base_SetConfig+0x11c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a3b      	ldr	r2, [pc, #236]	; (800965c <TIM_Base_SetConfig+0x120>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_Base_SetConfig+0x40>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a3a      	ldr	r2, [pc, #232]	; (8009660 <TIM_Base_SetConfig+0x124>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d108      	bne.n	800958e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a2f      	ldr	r2, [pc, #188]	; (8009650 <TIM_Base_SetConfig+0x114>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d02b      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800959c:	d027      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a2c      	ldr	r2, [pc, #176]	; (8009654 <TIM_Base_SetConfig+0x118>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d023      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a2b      	ldr	r2, [pc, #172]	; (8009658 <TIM_Base_SetConfig+0x11c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d01f      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a2a      	ldr	r2, [pc, #168]	; (800965c <TIM_Base_SetConfig+0x120>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d01b      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a29      	ldr	r2, [pc, #164]	; (8009660 <TIM_Base_SetConfig+0x124>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d017      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a28      	ldr	r2, [pc, #160]	; (8009664 <TIM_Base_SetConfig+0x128>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d013      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a27      	ldr	r2, [pc, #156]	; (8009668 <TIM_Base_SetConfig+0x12c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00f      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a26      	ldr	r2, [pc, #152]	; (800966c <TIM_Base_SetConfig+0x130>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d00b      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a25      	ldr	r2, [pc, #148]	; (8009670 <TIM_Base_SetConfig+0x134>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d007      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a24      	ldr	r2, [pc, #144]	; (8009674 <TIM_Base_SetConfig+0x138>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d003      	beq.n	80095ee <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a23      	ldr	r2, [pc, #140]	; (8009678 <TIM_Base_SetConfig+0x13c>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d108      	bne.n	8009600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	689a      	ldr	r2, [r3, #8]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <TIM_Base_SetConfig+0x114>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d003      	beq.n	8009634 <TIM_Base_SetConfig+0xf8>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a0c      	ldr	r2, [pc, #48]	; (8009660 <TIM_Base_SetConfig+0x124>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d103      	bne.n	800963c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	691a      	ldr	r2, [r3, #16]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	615a      	str	r2, [r3, #20]
}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	40010000 	.word	0x40010000
 8009654:	40000400 	.word	0x40000400
 8009658:	40000800 	.word	0x40000800
 800965c:	40000c00 	.word	0x40000c00
 8009660:	40010400 	.word	0x40010400
 8009664:	40014000 	.word	0x40014000
 8009668:	40014400 	.word	0x40014400
 800966c:	40014800 	.word	0x40014800
 8009670:	40001800 	.word	0x40001800
 8009674:	40001c00 	.word	0x40001c00
 8009678:	40002000 	.word	0x40002000

0800967c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	f023 0201 	bic.w	r2, r3, #1
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f023 030a 	bic.w	r3, r3, #10
 80096b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4313      	orrs	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	621a      	str	r2, [r3, #32]
}
 80096ce:	bf00      	nop
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096da:	b480      	push	{r7}
 80096dc:	b087      	sub	sp, #28
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f023 0210 	bic.w	r2, r3, #16
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	031b      	lsls	r3, r3, #12
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	4313      	orrs	r3, r2
 800970e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009716:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	f043 0307 	orr.w	r3, r3, #7
 800975c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	609a      	str	r2, [r3, #8]
}
 8009764:	bf00      	nop
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800978a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	431a      	orrs	r2, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4313      	orrs	r3, r2
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	4313      	orrs	r3, r2
 800979c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	609a      	str	r2, [r3, #8]
}
 80097a4:	bf00      	nop
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e06d      	b.n	80098a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a30      	ldr	r2, [pc, #192]	; (80098b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a2f      	ldr	r2, [pc, #188]	; (80098b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d108      	bne.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	4313      	orrs	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d022      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983a:	d01d      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1d      	ldr	r2, [pc, #116]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d018      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a1c      	ldr	r2, [pc, #112]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d013      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00e      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d009      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a16      	ldr	r2, [pc, #88]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d004      	beq.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a15      	ldr	r2, [pc, #84]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d10c      	bne.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800987e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	4313      	orrs	r3, r2
 8009888:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40010400 	.word	0x40010400
 80098b8:	40000400 	.word	0x40000400
 80098bc:	40000800 	.word	0x40000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	40014000 	.word	0x40014000
 80098c8:	40001800 	.word	0x40001800

080098cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e040      	b.n	800999c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7f7 fe64 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2224      	movs	r2, #36	; 0x24
 8009934:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0201 	bic.w	r2, r2, #1
 8009944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fd08 	bl	800a35c <UART_SetConfig>
 800994c:	4603      	mov	r3, r0
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e022      	b.n	800999c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 ff60 	bl	800a824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0201 	orr.w	r2, r2, #1
 8009992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 ffe7 	bl	800a968 <UART_CheckIdleState>
 800999a:	4603      	mov	r3, r0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08a      	sub	sp, #40	; 0x28
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	4613      	mov	r3, r2
 80099b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d171      	bne.n	8009aa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <HAL_UART_Transmit+0x24>
 80099c2:	88fb      	ldrh	r3, [r7, #6]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e06a      	b.n	8009aa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2221      	movs	r2, #33	; 0x21
 80099d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099da:	f7f8 fb37 	bl	800204c <HAL_GetTick>
 80099de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	88fa      	ldrh	r2, [r7, #6]
 80099e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	88fa      	ldrh	r2, [r7, #6]
 80099ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f8:	d108      	bne.n	8009a0c <HAL_UART_Transmit+0x68>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	e003      	b.n	8009a14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a14:	e02c      	b.n	8009a70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2180      	movs	r1, #128	; 0x80
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 ffd8 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e038      	b.n	8009aa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	3302      	adds	r3, #2
 8009a4a:	61bb      	str	r3, [r7, #24]
 8009a4c:	e007      	b.n	8009a5e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	781a      	ldrb	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	3b01      	subs	r3, #1
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1cc      	bne.n	8009a16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2200      	movs	r2, #0
 8009a84:	2140      	movs	r1, #64	; 0x40
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 ffa5 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e005      	b.n	8009aa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e000      	b.n	8009aa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009aa0:	2302      	movs	r3, #2
  }
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3720      	adds	r7, #32
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b08a      	sub	sp, #40	; 0x28
 8009aae:	af02      	add	r7, sp, #8
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	603b      	str	r3, [r7, #0]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	f040 80b1 	bne.w	8009c28 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <HAL_UART_Receive+0x28>
 8009acc:	88fb      	ldrh	r3, [r7, #6]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e0a9      	b.n	8009c2a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2222      	movs	r2, #34	; 0x22
 8009ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aec:	f7f8 faae 	bl	800204c <HAL_GetTick>
 8009af0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	88fa      	ldrh	r2, [r7, #6]
 8009af6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	88fa      	ldrh	r2, [r7, #6]
 8009afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0a:	d10e      	bne.n	8009b2a <HAL_UART_Receive+0x80>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <HAL_UART_Receive+0x76>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b1e:	e02d      	b.n	8009b7c <HAL_UART_Receive+0xd2>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	22ff      	movs	r2, #255	; 0xff
 8009b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b28:	e028      	b.n	8009b7c <HAL_UART_Receive+0xd2>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10d      	bne.n	8009b4e <HAL_UART_Receive+0xa4>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <HAL_UART_Receive+0x9a>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b42:	e01b      	b.n	8009b7c <HAL_UART_Receive+0xd2>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	227f      	movs	r2, #127	; 0x7f
 8009b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b4c:	e016      	b.n	8009b7c <HAL_UART_Receive+0xd2>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b56:	d10d      	bne.n	8009b74 <HAL_UART_Receive+0xca>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <HAL_UART_Receive+0xc0>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	227f      	movs	r2, #127	; 0x7f
 8009b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b68:	e008      	b.n	8009b7c <HAL_UART_Receive+0xd2>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	223f      	movs	r2, #63	; 0x3f
 8009b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b72:	e003      	b.n	8009b7c <HAL_UART_Receive+0xd2>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b8c:	d108      	bne.n	8009ba0 <HAL_UART_Receive+0xf6>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	e003      	b.n	8009ba8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009ba8:	e032      	b.n	8009c10 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2120      	movs	r1, #32
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 ff0e 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e032      	b.n	8009c2a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10c      	bne.n	8009be4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	8a7b      	ldrh	r3, [r7, #18]
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	3302      	adds	r3, #2
 8009be0:	61bb      	str	r3, [r7, #24]
 8009be2:	e00c      	b.n	8009bfe <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	8a7b      	ldrh	r3, [r7, #18]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1c6      	bne.n	8009baa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e000      	b.n	8009c2a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009c28:	2302      	movs	r3, #2
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b08b      	sub	sp, #44	; 0x2c
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d147      	bne.n	8009cda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_UART_Transmit_IT+0x22>
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e040      	b.n	8009cdc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2221      	movs	r2, #33	; 0x21
 8009c82:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8c:	d107      	bne.n	8009c9e <HAL_UART_Transmit_IT+0x6a>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d103      	bne.n	8009c9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4a13      	ldr	r2, [pc, #76]	; (8009ce8 <HAL_UART_Transmit_IT+0xb4>)
 8009c9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c9c:	e002      	b.n	8009ca4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4a12      	ldr	r2, [pc, #72]	; (8009cec <HAL_UART_Transmit_IT+0xb8>)
 8009ca2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	623b      	str	r3, [r7, #32]
 8009cc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	69f9      	ldr	r1, [r7, #28]
 8009cc8:	6a3a      	ldr	r2, [r7, #32]
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1e6      	bne.n	8009ca4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e000      	b.n	8009cdc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009cda:	2302      	movs	r3, #2
  }
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	372c      	adds	r7, #44	; 0x2c
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	0800ae9b 	.word	0x0800ae9b
 8009cec:	0800ade5 	.word	0x0800ade5

08009cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	; 0x28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	d132      	bne.n	8009d6e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <HAL_UART_Receive_IT+0x24>
 8009d0e:	88fb      	ldrh	r3, [r7, #6]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e02b      	b.n	8009d70 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d018      	beq.n	8009d5e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	e853 3f00 	ldrex	r3, [r3]
 8009d38:	613b      	str	r3, [r7, #16]
   return(result);
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d40:	627b      	str	r3, [r7, #36]	; 0x24
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	623b      	str	r3, [r7, #32]
 8009d4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4e:	69f9      	ldr	r1, [r7, #28]
 8009d50:	6a3a      	ldr	r2, [r7, #32]
 8009d52:	e841 2300 	strex	r3, r2, [r1]
 8009d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e6      	bne.n	8009d2c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	461a      	mov	r2, r3
 8009d62:	68b9      	ldr	r1, [r7, #8]
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 fefd 	bl	800ab64 <UART_Start_Receive_IT>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	e000      	b.n	8009d70 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009d6e:	2302      	movs	r3, #2
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3728      	adds	r7, #40	; 0x28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b0ba      	sub	sp, #232	; 0xe8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009da6:	4013      	ands	r3, r2
 8009da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d115      	bne.n	8009de0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00f      	beq.n	8009de0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dc4:	f003 0320 	and.w	r3, r3, #32
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 8297 	beq.w	800a304 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
      }
      return;
 8009dde:	e291      	b.n	800a304 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8117 	beq.w	800a018 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d106      	bne.n	8009e04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009dfa:	4b85      	ldr	r3, [pc, #532]	; (800a010 <HAL_UART_IRQHandler+0x298>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 810a 	beq.w	800a018 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e08:	f003 0301 	and.w	r3, r3, #1
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d011      	beq.n	8009e34 <HAL_UART_IRQHandler+0xbc>
 8009e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2201      	movs	r2, #1
 8009e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2a:	f043 0201 	orr.w	r2, r3, #1
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d011      	beq.n	8009e64 <HAL_UART_IRQHandler+0xec>
 8009e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2202      	movs	r2, #2
 8009e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5a:	f043 0204 	orr.w	r2, r3, #4
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d011      	beq.n	8009e94 <HAL_UART_IRQHandler+0x11c>
 8009e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2204      	movs	r2, #4
 8009e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e8a:	f043 0202 	orr.w	r2, r3, #2
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e98:	f003 0308 	and.w	r3, r3, #8
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d017      	beq.n	8009ed0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea4:	f003 0320 	and.w	r3, r3, #32
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d105      	bne.n	8009eb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec6:	f043 0208 	orr.w	r2, r3, #8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d012      	beq.n	8009f02 <HAL_UART_IRQHandler+0x18a>
 8009edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00c      	beq.n	8009f02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef8:	f043 0220 	orr.w	r2, r3, #32
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 81fd 	beq.w	800a308 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00d      	beq.n	8009f36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d005      	beq.n	8009f5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d04f      	beq.n	8009ffa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fec8 	bl	800acf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d141      	bne.n	8009ff2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1d9      	bne.n	8009f6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d013      	beq.n	8009fea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc6:	4a13      	ldr	r2, [pc, #76]	; (800a014 <HAL_UART_IRQHandler+0x29c>)
 8009fc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f9 f902 	bl	80031d8 <HAL_DMA_Abort_IT>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d017      	beq.n	800a00a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe8:	e00f      	b.n	800a00a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f9a0 	bl	800a330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff0:	e00b      	b.n	800a00a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f99c 	bl	800a330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	e007      	b.n	800a00a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f998 	bl	800a330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a008:	e17e      	b.n	800a308 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a00a:	bf00      	nop
    return;
 800a00c:	e17c      	b.n	800a308 <HAL_UART_IRQHandler+0x590>
 800a00e:	bf00      	nop
 800a010:	04000120 	.word	0x04000120
 800a014:	0800adb9 	.word	0x0800adb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	f040 814c 	bne.w	800a2ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 8145 	beq.w	800a2ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 813e 	beq.w	800a2ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2210      	movs	r2, #16
 800a044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a050:	2b40      	cmp	r3, #64	; 0x40
 800a052:	f040 80b6 	bne.w	800a1c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a062:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8150 	beq.w	800a30c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a076:	429a      	cmp	r2, r3
 800a078:	f080 8148 	bcs.w	800a30c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a082:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a090:	f000 8086 	beq.w	800a1a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1da      	bne.n	800a094 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a102:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a106:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a10a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e1      	bne.n	800a0de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3308      	adds	r3, #8
 800a120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a13e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a14c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e3      	bne.n	800a11a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a170:	f023 0310 	bic.w	r3, r3, #16
 800a174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a182:	65bb      	str	r3, [r7, #88]	; 0x58
 800a184:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e4      	bne.n	800a160 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f8 ffac 	bl	80030f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f8c2 	bl	800a344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1c0:	e0a4      	b.n	800a30c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 8096 	beq.w	800a310 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a1e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 8091 	beq.w	800a310 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a210:	647b      	str	r3, [r7, #68]	; 0x44
 800a212:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e4      	bne.n	800a1ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3308      	adds	r3, #8
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	e853 3f00 	ldrex	r3, [r3]
 800a232:	623b      	str	r3, [r7, #32]
   return(result);
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	f023 0301 	bic.w	r3, r3, #1
 800a23a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a248:	633a      	str	r2, [r7, #48]	; 0x30
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e3      	bne.n	800a224 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2220      	movs	r2, #32
 800a260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	e853 3f00 	ldrex	r3, [r3]
 800a27c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f023 0310 	bic.w	r3, r3, #16
 800a284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	69b9      	ldr	r1, [r7, #24]
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	617b      	str	r3, [r7, #20]
   return(result);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e4      	bne.n	800a270 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f846 	bl	800a344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2b8:	e02a      	b.n	800a310 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00e      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d008      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01c      	beq.n	800a314 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
    }
    return;
 800a2e2:	e017      	b.n	800a314 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d012      	beq.n	800a316 <HAL_UART_IRQHandler+0x59e>
 800a2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00c      	beq.n	800a316 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fe2c 	bl	800af5a <UART_EndTransmit_IT>
    return;
 800a302:	e008      	b.n	800a316 <HAL_UART_IRQHandler+0x59e>
      return;
 800a304:	bf00      	nop
 800a306:	e006      	b.n	800a316 <HAL_UART_IRQHandler+0x59e>
    return;
 800a308:	bf00      	nop
 800a30a:	e004      	b.n	800a316 <HAL_UART_IRQHandler+0x59e>
      return;
 800a30c:	bf00      	nop
 800a30e:	e002      	b.n	800a316 <HAL_UART_IRQHandler+0x59e>
      return;
 800a310:	bf00      	nop
 800a312:	e000      	b.n	800a316 <HAL_UART_IRQHandler+0x59e>
    return;
 800a314:	bf00      	nop
  }

}
 800a316:	37e8      	adds	r7, #232	; 0xe8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4ba6      	ldr	r3, [pc, #664]	; (800a620 <UART_SetConfig+0x2c4>)
 800a388:	4013      	ands	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	6812      	ldr	r2, [r2, #0]
 800a38e:	6979      	ldr	r1, [r7, #20]
 800a390:	430b      	orrs	r3, r1
 800a392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a94      	ldr	r2, [pc, #592]	; (800a624 <UART_SetConfig+0x2c8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d120      	bne.n	800a41a <UART_SetConfig+0xbe>
 800a3d8:	4b93      	ldr	r3, [pc, #588]	; (800a628 <UART_SetConfig+0x2cc>)
 800a3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d816      	bhi.n	800a414 <UART_SetConfig+0xb8>
 800a3e6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <UART_SetConfig+0x90>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a403 	.word	0x0800a403
 800a3f8:	0800a40f 	.word	0x0800a40f
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	77fb      	strb	r3, [r7, #31]
 800a400:	e150      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a402:	2302      	movs	r3, #2
 800a404:	77fb      	strb	r3, [r7, #31]
 800a406:	e14d      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a408:	2304      	movs	r3, #4
 800a40a:	77fb      	strb	r3, [r7, #31]
 800a40c:	e14a      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a40e:	2308      	movs	r3, #8
 800a410:	77fb      	strb	r3, [r7, #31]
 800a412:	e147      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a414:	2310      	movs	r3, #16
 800a416:	77fb      	strb	r3, [r7, #31]
 800a418:	e144      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a83      	ldr	r2, [pc, #524]	; (800a62c <UART_SetConfig+0x2d0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d132      	bne.n	800a48a <UART_SetConfig+0x12e>
 800a424:	4b80      	ldr	r3, [pc, #512]	; (800a628 <UART_SetConfig+0x2cc>)
 800a426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42a:	f003 030c 	and.w	r3, r3, #12
 800a42e:	2b0c      	cmp	r3, #12
 800a430:	d828      	bhi.n	800a484 <UART_SetConfig+0x128>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <UART_SetConfig+0xdc>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a46d 	.word	0x0800a46d
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a485 	.word	0x0800a485
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a479 	.word	0x0800a479
 800a44c:	0800a485 	.word	0x0800a485
 800a450:	0800a485 	.word	0x0800a485
 800a454:	0800a485 	.word	0x0800a485
 800a458:	0800a473 	.word	0x0800a473
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a47f 	.word	0x0800a47f
 800a46c:	2300      	movs	r3, #0
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e118      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a472:	2302      	movs	r3, #2
 800a474:	77fb      	strb	r3, [r7, #31]
 800a476:	e115      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a478:	2304      	movs	r3, #4
 800a47a:	77fb      	strb	r3, [r7, #31]
 800a47c:	e112      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a47e:	2308      	movs	r3, #8
 800a480:	77fb      	strb	r3, [r7, #31]
 800a482:	e10f      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a484:	2310      	movs	r3, #16
 800a486:	77fb      	strb	r3, [r7, #31]
 800a488:	e10c      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a68      	ldr	r2, [pc, #416]	; (800a630 <UART_SetConfig+0x2d4>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d120      	bne.n	800a4d6 <UART_SetConfig+0x17a>
 800a494:	4b64      	ldr	r3, [pc, #400]	; (800a628 <UART_SetConfig+0x2cc>)
 800a496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a49a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a49e:	2b30      	cmp	r3, #48	; 0x30
 800a4a0:	d013      	beq.n	800a4ca <UART_SetConfig+0x16e>
 800a4a2:	2b30      	cmp	r3, #48	; 0x30
 800a4a4:	d814      	bhi.n	800a4d0 <UART_SetConfig+0x174>
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	d009      	beq.n	800a4be <UART_SetConfig+0x162>
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	d810      	bhi.n	800a4d0 <UART_SetConfig+0x174>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <UART_SetConfig+0x15c>
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d006      	beq.n	800a4c4 <UART_SetConfig+0x168>
 800a4b6:	e00b      	b.n	800a4d0 <UART_SetConfig+0x174>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	77fb      	strb	r3, [r7, #31]
 800a4bc:	e0f2      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	77fb      	strb	r3, [r7, #31]
 800a4c2:	e0ef      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	77fb      	strb	r3, [r7, #31]
 800a4c8:	e0ec      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	77fb      	strb	r3, [r7, #31]
 800a4ce:	e0e9      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	77fb      	strb	r3, [r7, #31]
 800a4d4:	e0e6      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a56      	ldr	r2, [pc, #344]	; (800a634 <UART_SetConfig+0x2d8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d120      	bne.n	800a522 <UART_SetConfig+0x1c6>
 800a4e0:	4b51      	ldr	r3, [pc, #324]	; (800a628 <UART_SetConfig+0x2cc>)
 800a4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a4ec:	d013      	beq.n	800a516 <UART_SetConfig+0x1ba>
 800a4ee:	2bc0      	cmp	r3, #192	; 0xc0
 800a4f0:	d814      	bhi.n	800a51c <UART_SetConfig+0x1c0>
 800a4f2:	2b80      	cmp	r3, #128	; 0x80
 800a4f4:	d009      	beq.n	800a50a <UART_SetConfig+0x1ae>
 800a4f6:	2b80      	cmp	r3, #128	; 0x80
 800a4f8:	d810      	bhi.n	800a51c <UART_SetConfig+0x1c0>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <UART_SetConfig+0x1a8>
 800a4fe:	2b40      	cmp	r3, #64	; 0x40
 800a500:	d006      	beq.n	800a510 <UART_SetConfig+0x1b4>
 800a502:	e00b      	b.n	800a51c <UART_SetConfig+0x1c0>
 800a504:	2300      	movs	r3, #0
 800a506:	77fb      	strb	r3, [r7, #31]
 800a508:	e0cc      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a50a:	2302      	movs	r3, #2
 800a50c:	77fb      	strb	r3, [r7, #31]
 800a50e:	e0c9      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a510:	2304      	movs	r3, #4
 800a512:	77fb      	strb	r3, [r7, #31]
 800a514:	e0c6      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a516:	2308      	movs	r3, #8
 800a518:	77fb      	strb	r3, [r7, #31]
 800a51a:	e0c3      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a51c:	2310      	movs	r3, #16
 800a51e:	77fb      	strb	r3, [r7, #31]
 800a520:	e0c0      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a44      	ldr	r2, [pc, #272]	; (800a638 <UART_SetConfig+0x2dc>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d125      	bne.n	800a578 <UART_SetConfig+0x21c>
 800a52c:	4b3e      	ldr	r3, [pc, #248]	; (800a628 <UART_SetConfig+0x2cc>)
 800a52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a53a:	d017      	beq.n	800a56c <UART_SetConfig+0x210>
 800a53c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a540:	d817      	bhi.n	800a572 <UART_SetConfig+0x216>
 800a542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a546:	d00b      	beq.n	800a560 <UART_SetConfig+0x204>
 800a548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a54c:	d811      	bhi.n	800a572 <UART_SetConfig+0x216>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <UART_SetConfig+0x1fe>
 800a552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a556:	d006      	beq.n	800a566 <UART_SetConfig+0x20a>
 800a558:	e00b      	b.n	800a572 <UART_SetConfig+0x216>
 800a55a:	2300      	movs	r3, #0
 800a55c:	77fb      	strb	r3, [r7, #31]
 800a55e:	e0a1      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a560:	2302      	movs	r3, #2
 800a562:	77fb      	strb	r3, [r7, #31]
 800a564:	e09e      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a566:	2304      	movs	r3, #4
 800a568:	77fb      	strb	r3, [r7, #31]
 800a56a:	e09b      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a56c:	2308      	movs	r3, #8
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e098      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a572:	2310      	movs	r3, #16
 800a574:	77fb      	strb	r3, [r7, #31]
 800a576:	e095      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a2f      	ldr	r2, [pc, #188]	; (800a63c <UART_SetConfig+0x2e0>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d125      	bne.n	800a5ce <UART_SetConfig+0x272>
 800a582:	4b29      	ldr	r3, [pc, #164]	; (800a628 <UART_SetConfig+0x2cc>)
 800a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a58c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a590:	d017      	beq.n	800a5c2 <UART_SetConfig+0x266>
 800a592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a596:	d817      	bhi.n	800a5c8 <UART_SetConfig+0x26c>
 800a598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a59c:	d00b      	beq.n	800a5b6 <UART_SetConfig+0x25a>
 800a59e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5a2:	d811      	bhi.n	800a5c8 <UART_SetConfig+0x26c>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <UART_SetConfig+0x254>
 800a5a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ac:	d006      	beq.n	800a5bc <UART_SetConfig+0x260>
 800a5ae:	e00b      	b.n	800a5c8 <UART_SetConfig+0x26c>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e076      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e073      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	e070      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a5c2:	2308      	movs	r3, #8
 800a5c4:	77fb      	strb	r3, [r7, #31]
 800a5c6:	e06d      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	e06a      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a1b      	ldr	r2, [pc, #108]	; (800a640 <UART_SetConfig+0x2e4>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d138      	bne.n	800a64a <UART_SetConfig+0x2ee>
 800a5d8:	4b13      	ldr	r3, [pc, #76]	; (800a628 <UART_SetConfig+0x2cc>)
 800a5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a5e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5e6:	d017      	beq.n	800a618 <UART_SetConfig+0x2bc>
 800a5e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5ec:	d82a      	bhi.n	800a644 <UART_SetConfig+0x2e8>
 800a5ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f2:	d00b      	beq.n	800a60c <UART_SetConfig+0x2b0>
 800a5f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f8:	d824      	bhi.n	800a644 <UART_SetConfig+0x2e8>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <UART_SetConfig+0x2aa>
 800a5fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a602:	d006      	beq.n	800a612 <UART_SetConfig+0x2b6>
 800a604:	e01e      	b.n	800a644 <UART_SetConfig+0x2e8>
 800a606:	2300      	movs	r3, #0
 800a608:	77fb      	strb	r3, [r7, #31]
 800a60a:	e04b      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a60c:	2302      	movs	r3, #2
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e048      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a612:	2304      	movs	r3, #4
 800a614:	77fb      	strb	r3, [r7, #31]
 800a616:	e045      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a618:	2308      	movs	r3, #8
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e042      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a61e:	bf00      	nop
 800a620:	efff69f3 	.word	0xefff69f3
 800a624:	40011000 	.word	0x40011000
 800a628:	40023800 	.word	0x40023800
 800a62c:	40004400 	.word	0x40004400
 800a630:	40004800 	.word	0x40004800
 800a634:	40004c00 	.word	0x40004c00
 800a638:	40005000 	.word	0x40005000
 800a63c:	40011400 	.word	0x40011400
 800a640:	40007800 	.word	0x40007800
 800a644:	2310      	movs	r3, #16
 800a646:	77fb      	strb	r3, [r7, #31]
 800a648:	e02c      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a72      	ldr	r2, [pc, #456]	; (800a818 <UART_SetConfig+0x4bc>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d125      	bne.n	800a6a0 <UART_SetConfig+0x344>
 800a654:	4b71      	ldr	r3, [pc, #452]	; (800a81c <UART_SetConfig+0x4c0>)
 800a656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a65e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a662:	d017      	beq.n	800a694 <UART_SetConfig+0x338>
 800a664:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a668:	d817      	bhi.n	800a69a <UART_SetConfig+0x33e>
 800a66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a66e:	d00b      	beq.n	800a688 <UART_SetConfig+0x32c>
 800a670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a674:	d811      	bhi.n	800a69a <UART_SetConfig+0x33e>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <UART_SetConfig+0x326>
 800a67a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a67e:	d006      	beq.n	800a68e <UART_SetConfig+0x332>
 800a680:	e00b      	b.n	800a69a <UART_SetConfig+0x33e>
 800a682:	2300      	movs	r3, #0
 800a684:	77fb      	strb	r3, [r7, #31]
 800a686:	e00d      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a688:	2302      	movs	r3, #2
 800a68a:	77fb      	strb	r3, [r7, #31]
 800a68c:	e00a      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a68e:	2304      	movs	r3, #4
 800a690:	77fb      	strb	r3, [r7, #31]
 800a692:	e007      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a694:	2308      	movs	r3, #8
 800a696:	77fb      	strb	r3, [r7, #31]
 800a698:	e004      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a69a:	2310      	movs	r3, #16
 800a69c:	77fb      	strb	r3, [r7, #31]
 800a69e:	e001      	b.n	800a6a4 <UART_SetConfig+0x348>
 800a6a0:	2310      	movs	r3, #16
 800a6a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ac:	d15b      	bne.n	800a766 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a6ae:	7ffb      	ldrb	r3, [r7, #31]
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d828      	bhi.n	800a706 <UART_SetConfig+0x3aa>
 800a6b4:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <UART_SetConfig+0x360>)
 800a6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ba:	bf00      	nop
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6e9 	.word	0x0800a6e9
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	0800a707 	.word	0x0800a707
 800a6cc:	0800a6f7 	.word	0x0800a6f7
 800a6d0:	0800a707 	.word	0x0800a707
 800a6d4:	0800a707 	.word	0x0800a707
 800a6d8:	0800a707 	.word	0x0800a707
 800a6dc:	0800a6ff 	.word	0x0800a6ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e0:	f7fd f9d4 	bl	8007a8c <HAL_RCC_GetPCLK1Freq>
 800a6e4:	61b8      	str	r0, [r7, #24]
        break;
 800a6e6:	e013      	b.n	800a710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6e8:	f7fd f9e4 	bl	8007ab4 <HAL_RCC_GetPCLK2Freq>
 800a6ec:	61b8      	str	r0, [r7, #24]
        break;
 800a6ee:	e00f      	b.n	800a710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6f0:	4b4b      	ldr	r3, [pc, #300]	; (800a820 <UART_SetConfig+0x4c4>)
 800a6f2:	61bb      	str	r3, [r7, #24]
        break;
 800a6f4:	e00c      	b.n	800a710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6f6:	f7fd f8b7 	bl	8007868 <HAL_RCC_GetSysClockFreq>
 800a6fa:	61b8      	str	r0, [r7, #24]
        break;
 800a6fc:	e008      	b.n	800a710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a702:	61bb      	str	r3, [r7, #24]
        break;
 800a704:	e004      	b.n	800a710 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	77bb      	strb	r3, [r7, #30]
        break;
 800a70e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d074      	beq.n	800a800 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	005a      	lsls	r2, r3, #1
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	441a      	add	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d916      	bls.n	800a760 <UART_SetConfig+0x404>
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d212      	bcs.n	800a760 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f023 030f 	bic.w	r3, r3, #15
 800a742:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	085b      	lsrs	r3, r3, #1
 800a748:	b29b      	uxth	r3, r3
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	b29a      	uxth	r2, r3
 800a750:	89fb      	ldrh	r3, [r7, #14]
 800a752:	4313      	orrs	r3, r2
 800a754:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	89fa      	ldrh	r2, [r7, #14]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	e04f      	b.n	800a800 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	77bb      	strb	r3, [r7, #30]
 800a764:	e04c      	b.n	800a800 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a766:	7ffb      	ldrb	r3, [r7, #31]
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d828      	bhi.n	800a7be <UART_SetConfig+0x462>
 800a76c:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <UART_SetConfig+0x418>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a799 	.word	0x0800a799
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7a9 	.word	0x0800a7a9
 800a780:	0800a7bf 	.word	0x0800a7bf
 800a784:	0800a7af 	.word	0x0800a7af
 800a788:	0800a7bf 	.word	0x0800a7bf
 800a78c:	0800a7bf 	.word	0x0800a7bf
 800a790:	0800a7bf 	.word	0x0800a7bf
 800a794:	0800a7b7 	.word	0x0800a7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a798:	f7fd f978 	bl	8007a8c <HAL_RCC_GetPCLK1Freq>
 800a79c:	61b8      	str	r0, [r7, #24]
        break;
 800a79e:	e013      	b.n	800a7c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7a0:	f7fd f988 	bl	8007ab4 <HAL_RCC_GetPCLK2Freq>
 800a7a4:	61b8      	str	r0, [r7, #24]
        break;
 800a7a6:	e00f      	b.n	800a7c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7a8:	4b1d      	ldr	r3, [pc, #116]	; (800a820 <UART_SetConfig+0x4c4>)
 800a7aa:	61bb      	str	r3, [r7, #24]
        break;
 800a7ac:	e00c      	b.n	800a7c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ae:	f7fd f85b 	bl	8007868 <HAL_RCC_GetSysClockFreq>
 800a7b2:	61b8      	str	r0, [r7, #24]
        break;
 800a7b4:	e008      	b.n	800a7c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ba:	61bb      	str	r3, [r7, #24]
        break;
 800a7bc:	e004      	b.n	800a7c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a7c6:	bf00      	nop
    }

    if (pclk != 0U)
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d018      	beq.n	800a800 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	085a      	lsrs	r2, r3, #1
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	441a      	add	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b0f      	cmp	r3, #15
 800a7e6:	d909      	bls.n	800a7fc <UART_SetConfig+0x4a0>
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ee:	d205      	bcs.n	800a7fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60da      	str	r2, [r3, #12]
 800a7fa:	e001      	b.n	800a800 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a80c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40007c00 	.word	0x40007c00
 800a81c:	40023800 	.word	0x40023800
 800a820:	00f42400 	.word	0x00f42400

0800a824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00a      	beq.n	800a84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	430a      	orrs	r2, r1
 800a84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00a      	beq.n	800a892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	f003 0310 	and.w	r3, r3, #16
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01a      	beq.n	800a93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a922:	d10a      	bne.n	800a93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	430a      	orrs	r2, r1
 800a95a:	605a      	str	r2, [r3, #4]
  }
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af02      	add	r7, sp, #8
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a978:	f7f7 fb68 	bl	800204c <HAL_GetTick>
 800a97c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0308 	and.w	r3, r3, #8
 800a988:	2b08      	cmp	r3, #8
 800a98a:	d10e      	bne.n	800a9aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a98c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f81b 	bl	800a9d6 <UART_WaitOnFlagUntilTimeout>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e011      	b.n	800a9ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2220      	movs	r2, #32
 800a9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b09c      	sub	sp, #112	; 0x70
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9e6:	e0a7      	b.n	800ab38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ee:	f000 80a3 	beq.w	800ab38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9f2:	f7f7 fb2b 	bl	800204c <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d302      	bcc.n	800aa08 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d13f      	bne.n	800aa88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa1c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e6      	bne.n	800aa08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3308      	adds	r3, #8
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa44:	e853 3f00 	ldrex	r3, [r3]
 800aa48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	f023 0301 	bic.w	r3, r3, #1
 800aa50:	663b      	str	r3, [r7, #96]	; 0x60
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3308      	adds	r3, #8
 800aa58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e5      	bne.n	800aa3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2220      	movs	r2, #32
 800aa72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2220      	movs	r2, #32
 800aa78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e068      	b.n	800ab5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0304 	and.w	r3, r3, #4
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d050      	beq.n	800ab38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaa4:	d148      	bne.n	800ab38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aace:	637b      	str	r3, [r7, #52]	; 0x34
 800aad0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e6      	bne.n	800aab0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	613b      	str	r3, [r7, #16]
   return(result);
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f023 0301 	bic.w	r3, r3, #1
 800aaf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3308      	adds	r3, #8
 800ab00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab02:	623a      	str	r2, [r7, #32]
 800ab04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	69f9      	ldr	r1, [r7, #28]
 800ab08:	6a3a      	ldr	r2, [r7, #32]
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e5      	bne.n	800aae2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e010      	b.n	800ab5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	69da      	ldr	r2, [r3, #28]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4013      	ands	r3, r2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	bf0c      	ite	eq
 800ab48:	2301      	moveq	r3, #1
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	461a      	mov	r2, r3
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	f43f af48 	beq.w	800a9e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3770      	adds	r7, #112	; 0x70
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b097      	sub	sp, #92	; 0x5c
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	88fa      	ldrh	r2, [r7, #6]
 800ab7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	88fa      	ldrh	r2, [r7, #6]
 800ab84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab96:	d10e      	bne.n	800abb6 <UART_Start_Receive_IT+0x52>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d105      	bne.n	800abac <UART_Start_Receive_IT+0x48>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abaa:	e02d      	b.n	800ac08 <UART_Start_Receive_IT+0xa4>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	22ff      	movs	r2, #255	; 0xff
 800abb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abb4:	e028      	b.n	800ac08 <UART_Start_Receive_IT+0xa4>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10d      	bne.n	800abda <UART_Start_Receive_IT+0x76>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d104      	bne.n	800abd0 <UART_Start_Receive_IT+0x6c>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	22ff      	movs	r2, #255	; 0xff
 800abca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abce:	e01b      	b.n	800ac08 <UART_Start_Receive_IT+0xa4>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	227f      	movs	r2, #127	; 0x7f
 800abd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abd8:	e016      	b.n	800ac08 <UART_Start_Receive_IT+0xa4>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe2:	d10d      	bne.n	800ac00 <UART_Start_Receive_IT+0x9c>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d104      	bne.n	800abf6 <UART_Start_Receive_IT+0x92>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	227f      	movs	r2, #127	; 0x7f
 800abf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abf4:	e008      	b.n	800ac08 <UART_Start_Receive_IT+0xa4>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	223f      	movs	r2, #63	; 0x3f
 800abfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abfe:	e003      	b.n	800ac08 <UART_Start_Receive_IT+0xa4>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2222      	movs	r2, #34	; 0x22
 800ac14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	f043 0301 	orr.w	r3, r3, #1
 800ac2e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac38:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e5      	bne.n	800ac18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac54:	d107      	bne.n	800ac66 <UART_Start_Receive_IT+0x102>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4a21      	ldr	r2, [pc, #132]	; (800ace8 <UART_Start_Receive_IT+0x184>)
 800ac62:	669a      	str	r2, [r3, #104]	; 0x68
 800ac64:	e002      	b.n	800ac6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4a20      	ldr	r2, [pc, #128]	; (800acec <UART_Start_Receive_IT+0x188>)
 800ac6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d019      	beq.n	800aca8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ac88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac92:	637b      	str	r3, [r7, #52]	; 0x34
 800ac94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e6      	bne.n	800ac74 <UART_Start_Receive_IT+0x110>
 800aca6:	e018      	b.n	800acda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	613b      	str	r3, [r7, #16]
   return(result);
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f043 0320 	orr.w	r3, r3, #32
 800acbc:	653b      	str	r3, [r7, #80]	; 0x50
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc6:	623b      	str	r3, [r7, #32]
 800acc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	69f9      	ldr	r1, [r7, #28]
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e6      	bne.n	800aca8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	375c      	adds	r7, #92	; 0x5c
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	0800b115 	.word	0x0800b115
 800acec:	0800afaf 	.word	0x0800afaf

0800acf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b095      	sub	sp, #84	; 0x54
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad16:	643b      	str	r3, [r7, #64]	; 0x40
 800ad18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e6      	bne.n	800acf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	e853 3f00 	ldrex	r3, [r3]
 800ad38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	f023 0301 	bic.w	r3, r3, #1
 800ad40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e5      	bne.n	800ad2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d118      	bne.n	800ad98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f023 0310 	bic.w	r3, r3, #16
 800ad7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	461a      	mov	r2, r3
 800ad82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad84:	61bb      	str	r3, [r7, #24]
 800ad86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	6979      	ldr	r1, [r7, #20]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	613b      	str	r3, [r7, #16]
   return(result);
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e6      	bne.n	800ad66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800adac:	bf00      	nop
 800adae:	3754      	adds	r7, #84	; 0x54
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff faaa 	bl	800a330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b08f      	sub	sp, #60	; 0x3c
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adf0:	2b21      	cmp	r3, #33	; 0x21
 800adf2:	d14c      	bne.n	800ae8e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d132      	bne.n	800ae66 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae14:	637b      	str	r3, [r7, #52]	; 0x34
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e6      	bne.n	800ae00 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae46:	633b      	str	r3, [r7, #48]	; 0x30
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6979      	ldr	r1, [r7, #20]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ae64:	e013      	b.n	800ae8e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	781a      	ldrb	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	3b01      	subs	r3, #1
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ae8e:	bf00      	nop
 800ae90:	373c      	adds	r7, #60	; 0x3c
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b091      	sub	sp, #68	; 0x44
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aea6:	2b21      	cmp	r3, #33	; 0x21
 800aea8:	d151      	bne.n	800af4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d132      	bne.n	800af1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	623b      	str	r3, [r7, #32]
   return(result);
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeca:	63bb      	str	r3, [r7, #56]	; 0x38
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	633b      	str	r3, [r7, #48]	; 0x30
 800aed6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e6      	bne.n	800aeb6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af06:	61fb      	str	r3, [r7, #28]
 800af08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69b9      	ldr	r1, [r7, #24]
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	617b      	str	r3, [r7, #20]
   return(result);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e6      	bne.n	800aee8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800af1a:	e018      	b.n	800af4e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af30:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af36:	1c9a      	adds	r2, r3, #2
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af42:	b29b      	uxth	r3, r3
 800af44:	3b01      	subs	r3, #1
 800af46:	b29a      	uxth	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800af4e:	bf00      	nop
 800af50:	3744      	adds	r7, #68	; 0x44
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b088      	sub	sp, #32
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af76:	61fb      	str	r3, [r7, #28]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	613b      	str	r3, [r7, #16]
   return(result);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e6      	bne.n	800af62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff f9bb 	bl	800a31c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa6:	bf00      	nop
 800afa8:	3720      	adds	r7, #32
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b096      	sub	sp, #88	; 0x58
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afc6:	2b22      	cmp	r3, #34	; 0x22
 800afc8:	f040 8098 	bne.w	800b0fc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800afd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800afda:	b2d9      	uxtb	r1, r3
 800afdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afe6:	400a      	ands	r2, r1
 800afe8:	b2d2      	uxtb	r2, r2
 800afea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b29a      	uxth	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b00e:	b29b      	uxth	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d17b      	bne.n	800b10c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b028:	653b      	str	r3, [r7, #80]	; 0x50
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b032:	647b      	str	r3, [r7, #68]	; 0x44
 800b034:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e6      	bne.n	800b014 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	623b      	str	r3, [r7, #32]
   return(result);
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	f023 0301 	bic.w	r3, r3, #1
 800b05c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3308      	adds	r3, #8
 800b064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b066:	633a      	str	r2, [r7, #48]	; 0x30
 800b068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2220      	movs	r2, #32
 800b07e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b092:	2b01      	cmp	r3, #1
 800b094:	d12e      	bne.n	800b0f4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f023 0310 	bic.w	r3, r3, #16
 800b0b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	69b9      	ldr	r1, [r7, #24]
 800b0c0:	69fa      	ldr	r2, [r7, #28]
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e6      	bne.n	800b09c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b10      	cmp	r3, #16
 800b0da:	d103      	bne.n	800b0e4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2210      	movs	r2, #16
 800b0e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7ff f929 	bl	800a344 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0f2:	e00b      	b.n	800b10c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f00b fad3 	bl	80166a0 <HAL_UART_RxCpltCallback>
}
 800b0fa:	e007      	b.n	800b10c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	699a      	ldr	r2, [r3, #24]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0208 	orr.w	r2, r2, #8
 800b10a:	619a      	str	r2, [r3, #24]
}
 800b10c:	bf00      	nop
 800b10e:	3758      	adds	r7, #88	; 0x58
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b096      	sub	sp, #88	; 0x58
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b122:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b12c:	2b22      	cmp	r3, #34	; 0x22
 800b12e:	f040 8098 	bne.w	800b262 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b140:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b142:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b146:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b14a:	4013      	ands	r3, r2
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b150:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b156:	1c9a      	adds	r2, r3, #2
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b162:	b29b      	uxth	r3, r3
 800b164:	3b01      	subs	r3, #1
 800b166:	b29a      	uxth	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b174:	b29b      	uxth	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d17b      	bne.n	800b272 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b182:	e853 3f00 	ldrex	r3, [r3]
 800b186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b18e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b198:	643b      	str	r3, [r7, #64]	; 0x40
 800b19a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b19e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1a0:	e841 2300 	strex	r3, r2, [r1]
 800b1a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1e6      	bne.n	800b17a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f023 0301 	bic.w	r3, r3, #1
 800b1c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e5      	bne.n	800b1ac <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d12e      	bne.n	800b25a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f023 0310 	bic.w	r3, r3, #16
 800b216:	647b      	str	r3, [r7, #68]	; 0x44
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	461a      	mov	r2, r3
 800b21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b220:	61bb      	str	r3, [r7, #24]
 800b222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6979      	ldr	r1, [r7, #20]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	e841 2300 	strex	r3, r2, [r1]
 800b22c:	613b      	str	r3, [r7, #16]
   return(result);
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e6      	bne.n	800b202 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	f003 0310 	and.w	r3, r3, #16
 800b23e:	2b10      	cmp	r3, #16
 800b240:	d103      	bne.n	800b24a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2210      	movs	r2, #16
 800b248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff f876 	bl	800a344 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b258:	e00b      	b.n	800b272 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f00b fa20 	bl	80166a0 <HAL_UART_RxCpltCallback>
}
 800b260:	e007      	b.n	800b272 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	699a      	ldr	r2, [r3, #24]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f042 0208 	orr.w	r2, r2, #8
 800b270:	619a      	str	r2, [r3, #24]
}
 800b272:	bf00      	nop
 800b274:	3758      	adds	r7, #88	; 0x58
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b27c:	b084      	sub	sp, #16
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	f107 001c 	add.w	r0, r7, #28
 800b28a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	2b01      	cmp	r3, #1
 800b292:	d120      	bne.n	800b2d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	4b20      	ldr	r3, [pc, #128]	; (800b328 <USB_CoreInit+0xac>)
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d105      	bne.n	800b2ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fa96 	bl	800b7fc <USB_CoreReset>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73fb      	strb	r3, [r7, #15]
 800b2d4:	e010      	b.n	800b2f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fa8a 	bl	800b7fc <USB_CoreReset>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d10b      	bne.n	800b316 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f043 0206 	orr.w	r2, r3, #6
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f043 0220 	orr.w	r2, r3, #32
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b322:	b004      	add	sp, #16
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	ffbdffbf 	.word	0xffbdffbf

0800b32c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f023 0201 	bic.w	r2, r3, #1
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	460b      	mov	r3, r1
 800b358:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b36a:	78fb      	ldrb	r3, [r7, #3]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d115      	bne.n	800b39c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b37c:	2001      	movs	r0, #1
 800b37e:	f7f6 fe71 	bl	8002064 <HAL_Delay>
      ms++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fa29 	bl	800b7e0 <USB_GetMode>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b01      	cmp	r3, #1
 800b392:	d01e      	beq.n	800b3d2 <USB_SetCurrentMode+0x84>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b31      	cmp	r3, #49	; 0x31
 800b398:	d9f0      	bls.n	800b37c <USB_SetCurrentMode+0x2e>
 800b39a:	e01a      	b.n	800b3d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d115      	bne.n	800b3ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	f7f6 fe58 	bl	8002064 <HAL_Delay>
      ms++;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa10 	bl	800b7e0 <USB_GetMode>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <USB_SetCurrentMode+0x84>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b31      	cmp	r3, #49	; 0x31
 800b3ca:	d9f0      	bls.n	800b3ae <USB_SetCurrentMode+0x60>
 800b3cc:	e001      	b.n	800b3d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e005      	b.n	800b3de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b32      	cmp	r3, #50	; 0x32
 800b3d6:	d101      	bne.n	800b3dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e000      	b.n	800b3de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b086      	sub	sp, #24
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b3f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b402:	2300      	movs	r3, #0
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	e009      	b.n	800b41c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	3340      	adds	r3, #64	; 0x40
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	2200      	movs	r2, #0
 800b414:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	3301      	adds	r3, #1
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b0e      	cmp	r3, #14
 800b420:	d9f2      	bls.n	800b408 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11c      	bne.n	800b462 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b436:	f043 0302 	orr.w	r3, r3, #2
 800b43a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b440:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	e005      	b.n	800b46e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b466:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b474:	461a      	mov	r2, r3
 800b476:	2300      	movs	r3, #0
 800b478:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b480:	4619      	mov	r1, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b488:	461a      	mov	r2, r3
 800b48a:	680b      	ldr	r3, [r1, #0]
 800b48c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	2b01      	cmp	r3, #1
 800b492:	d10c      	bne.n	800b4ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d104      	bne.n	800b4a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b49a:	2100      	movs	r1, #0
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f965 	bl	800b76c <USB_SetDevSpeed>
 800b4a2:	e008      	b.n	800b4b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f960 	bl	800b76c <USB_SetDevSpeed>
 800b4ac:	e003      	b.n	800b4b6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b4ae:	2103      	movs	r1, #3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f95b 	bl	800b76c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4b6:	2110      	movs	r1, #16
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f8f3 	bl	800b6a4 <USB_FlushTxFifo>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f91f 	bl	800b70c <USB_FlushRxFifo>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4de:	461a      	mov	r2, r3
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	e043      	b.n	800b58a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b518:	d118      	bne.n	800b54c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52c:	461a      	mov	r2, r3
 800b52e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	e013      	b.n	800b55e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	461a      	mov	r2, r3
 800b544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	e008      	b.n	800b55e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	015a      	lsls	r2, r3, #5
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4413      	add	r3, r2
 800b554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b558:	461a      	mov	r2, r3
 800b55a:	2300      	movs	r3, #0
 800b55c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4413      	add	r3, r2
 800b566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56a:	461a      	mov	r2, r3
 800b56c:	2300      	movs	r3, #0
 800b56e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57c:	461a      	mov	r2, r3
 800b57e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b582:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	3301      	adds	r3, #1
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d3b7      	bcc.n	800b502 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b592:	2300      	movs	r3, #0
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	e043      	b.n	800b620 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5ae:	d118      	bne.n	800b5e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	015a      	lsls	r2, r3, #5
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	e013      	b.n	800b5f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d8:	461a      	mov	r2, r3
 800b5da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	e008      	b.n	800b5f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	015a      	lsls	r2, r3, #5
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b600:	461a      	mov	r2, r3
 800b602:	2300      	movs	r3, #0
 800b604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b612:	461a      	mov	r2, r3
 800b614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b618:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	3301      	adds	r3, #1
 800b61e:	613b      	str	r3, [r7, #16]
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	429a      	cmp	r2, r3
 800b626:	d3b7      	bcc.n	800b598 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b63a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b648:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d105      	bne.n	800b65c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	f043 0210 	orr.w	r2, r3, #16
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	699a      	ldr	r2, [r3, #24]
 800b660:	4b0e      	ldr	r3, [pc, #56]	; (800b69c <USB_DevInit+0x2b4>)
 800b662:	4313      	orrs	r3, r2
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	f043 0208 	orr.w	r2, r3, #8
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d105      	bne.n	800b68c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	699a      	ldr	r2, [r3, #24]
 800b684:	4b06      	ldr	r3, [pc, #24]	; (800b6a0 <USB_DevInit+0x2b8>)
 800b686:	4313      	orrs	r3, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b698:	b004      	add	sp, #16
 800b69a:	4770      	bx	lr
 800b69c:	803c3800 	.word	0x803c3800
 800b6a0:	40000004 	.word	0x40000004

0800b6a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4a13      	ldr	r2, [pc, #76]	; (800b708 <USB_FlushTxFifo+0x64>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d901      	bls.n	800b6c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e01b      	b.n	800b6fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	daf2      	bge.n	800b6b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	019b      	lsls	r3, r3, #6
 800b6d4:	f043 0220 	orr.w	r2, r3, #32
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	4a08      	ldr	r2, [pc, #32]	; (800b708 <USB_FlushTxFifo+0x64>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d901      	bls.n	800b6ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e006      	b.n	800b6fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d0f0      	beq.n	800b6dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	00030d40 	.word	0x00030d40

0800b70c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3301      	adds	r3, #1
 800b71c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4a11      	ldr	r2, [pc, #68]	; (800b768 <USB_FlushRxFifo+0x5c>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d901      	bls.n	800b72a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	e018      	b.n	800b75c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	daf2      	bge.n	800b718 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2210      	movs	r2, #16
 800b73a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	3301      	adds	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	4a08      	ldr	r2, [pc, #32]	; (800b768 <USB_FlushRxFifo+0x5c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d901      	bls.n	800b74e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e006      	b.n	800b75c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f003 0310 	and.w	r3, r3, #16
 800b756:	2b10      	cmp	r3, #16
 800b758:	d0f0      	beq.n	800b73c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	00030d40 	.word	0x00030d40

0800b76c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	68f9      	ldr	r1, [r7, #12]
 800b788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b78c:	4313      	orrs	r3, r2
 800b78e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7b8:	f023 0303 	bic.w	r3, r3, #3
 800b7bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7cc:	f043 0302 	orr.w	r3, r3, #2
 800b7d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	f003 0301 	and.w	r3, r3, #1
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3301      	adds	r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <USB_CoreReset+0x64>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d901      	bls.n	800b81a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e01b      	b.n	800b852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	daf2      	bge.n	800b808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	f043 0201 	orr.w	r2, r3, #1
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4a09      	ldr	r2, [pc, #36]	; (800b860 <USB_CoreReset+0x64>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d901      	bls.n	800b844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e006      	b.n	800b852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d0f0      	beq.n	800b832 <USB_CoreReset+0x36>

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	00030d40 	.word	0x00030d40

0800b864 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b86a:	4b8d      	ldr	r3, [pc, #564]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b86c:	22c0      	movs	r2, #192	; 0xc0
 800b86e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b870:	4b8b      	ldr	r3, [pc, #556]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b872:	22a8      	movs	r2, #168	; 0xa8
 800b874:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b876:	4b8a      	ldr	r3, [pc, #552]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b878:	2201      	movs	r2, #1
 800b87a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 800b87c:	4b88      	ldr	r3, [pc, #544]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b87e:	224d      	movs	r2, #77	; 0x4d
 800b880:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b882:	4b88      	ldr	r3, [pc, #544]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b884:	22ff      	movs	r2, #255	; 0xff
 800b886:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b888:	4b86      	ldr	r3, [pc, #536]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b88a:	22ff      	movs	r2, #255	; 0xff
 800b88c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b88e:	4b85      	ldr	r3, [pc, #532]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b890:	22ff      	movs	r2, #255	; 0xff
 800b892:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b894:	4b83      	ldr	r3, [pc, #524]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b896:	2200      	movs	r2, #0
 800b898:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b89a:	4b83      	ldr	r3, [pc, #524]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b89c:	22c0      	movs	r2, #192	; 0xc0
 800b89e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b8a0:	4b81      	ldr	r3, [pc, #516]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b8a2:	22a8      	movs	r2, #168	; 0xa8
 800b8a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b8a6:	4b80      	ldr	r3, [pc, #512]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800b8ac:	4b7e      	ldr	r3, [pc, #504]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b8ae:	2264      	movs	r2, #100	; 0x64
 800b8b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800b8b2:	f000 fd25 	bl	800c300 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b8b6:	4b7a      	ldr	r3, [pc, #488]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	061a      	lsls	r2, r3, #24
 800b8bc:	4b78      	ldr	r3, [pc, #480]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	041b      	lsls	r3, r3, #16
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	4b76      	ldr	r3, [pc, #472]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8c6:	789b      	ldrb	r3, [r3, #2]
 800b8c8:	021b      	lsls	r3, r3, #8
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	4a74      	ldr	r2, [pc, #464]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8ce:	78d2      	ldrb	r2, [r2, #3]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	061a      	lsls	r2, r3, #24
 800b8d4:	4b72      	ldr	r3, [pc, #456]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	0619      	lsls	r1, r3, #24
 800b8da:	4b71      	ldr	r3, [pc, #452]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8dc:	785b      	ldrb	r3, [r3, #1]
 800b8de:	041b      	lsls	r3, r3, #16
 800b8e0:	4319      	orrs	r1, r3
 800b8e2:	4b6f      	ldr	r3, [pc, #444]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8e4:	789b      	ldrb	r3, [r3, #2]
 800b8e6:	021b      	lsls	r3, r3, #8
 800b8e8:	430b      	orrs	r3, r1
 800b8ea:	496d      	ldr	r1, [pc, #436]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8ec:	78c9      	ldrb	r1, [r1, #3]
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	021b      	lsls	r3, r3, #8
 800b8f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b8f6:	431a      	orrs	r2, r3
 800b8f8:	4b69      	ldr	r3, [pc, #420]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	0619      	lsls	r1, r3, #24
 800b8fe:	4b68      	ldr	r3, [pc, #416]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	041b      	lsls	r3, r3, #16
 800b904:	4319      	orrs	r1, r3
 800b906:	4b66      	ldr	r3, [pc, #408]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b908:	789b      	ldrb	r3, [r3, #2]
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	430b      	orrs	r3, r1
 800b90e:	4964      	ldr	r1, [pc, #400]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b910:	78c9      	ldrb	r1, [r1, #3]
 800b912:	430b      	orrs	r3, r1
 800b914:	0a1b      	lsrs	r3, r3, #8
 800b916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b91a:	431a      	orrs	r2, r3
 800b91c:	4b60      	ldr	r3, [pc, #384]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	0619      	lsls	r1, r3, #24
 800b922:	4b5f      	ldr	r3, [pc, #380]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b924:	785b      	ldrb	r3, [r3, #1]
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	4319      	orrs	r1, r3
 800b92a:	4b5d      	ldr	r3, [pc, #372]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b92c:	789b      	ldrb	r3, [r3, #2]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	430b      	orrs	r3, r1
 800b932:	495b      	ldr	r1, [pc, #364]	; (800baa0 <MX_LWIP_Init+0x23c>)
 800b934:	78c9      	ldrb	r1, [r1, #3]
 800b936:	430b      	orrs	r3, r1
 800b938:	0e1b      	lsrs	r3, r3, #24
 800b93a:	4313      	orrs	r3, r2
 800b93c:	4a5b      	ldr	r2, [pc, #364]	; (800baac <MX_LWIP_Init+0x248>)
 800b93e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b940:	4b58      	ldr	r3, [pc, #352]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	061a      	lsls	r2, r3, #24
 800b946:	4b57      	ldr	r3, [pc, #348]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b948:	785b      	ldrb	r3, [r3, #1]
 800b94a:	041b      	lsls	r3, r3, #16
 800b94c:	431a      	orrs	r2, r3
 800b94e:	4b55      	ldr	r3, [pc, #340]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b950:	789b      	ldrb	r3, [r3, #2]
 800b952:	021b      	lsls	r3, r3, #8
 800b954:	4313      	orrs	r3, r2
 800b956:	4a53      	ldr	r2, [pc, #332]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b958:	78d2      	ldrb	r2, [r2, #3]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	061a      	lsls	r2, r3, #24
 800b95e:	4b51      	ldr	r3, [pc, #324]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	0619      	lsls	r1, r3, #24
 800b964:	4b4f      	ldr	r3, [pc, #316]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	041b      	lsls	r3, r3, #16
 800b96a:	4319      	orrs	r1, r3
 800b96c:	4b4d      	ldr	r3, [pc, #308]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b96e:	789b      	ldrb	r3, [r3, #2]
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	430b      	orrs	r3, r1
 800b974:	494b      	ldr	r1, [pc, #300]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b976:	78c9      	ldrb	r1, [r1, #3]
 800b978:	430b      	orrs	r3, r1
 800b97a:	021b      	lsls	r3, r3, #8
 800b97c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b980:	431a      	orrs	r2, r3
 800b982:	4b48      	ldr	r3, [pc, #288]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	0619      	lsls	r1, r3, #24
 800b988:	4b46      	ldr	r3, [pc, #280]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	041b      	lsls	r3, r3, #16
 800b98e:	4319      	orrs	r1, r3
 800b990:	4b44      	ldr	r3, [pc, #272]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b992:	789b      	ldrb	r3, [r3, #2]
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	430b      	orrs	r3, r1
 800b998:	4942      	ldr	r1, [pc, #264]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b99a:	78c9      	ldrb	r1, [r1, #3]
 800b99c:	430b      	orrs	r3, r1
 800b99e:	0a1b      	lsrs	r3, r3, #8
 800b9a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	4b3f      	ldr	r3, [pc, #252]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	0619      	lsls	r1, r3, #24
 800b9ac:	4b3d      	ldr	r3, [pc, #244]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	041b      	lsls	r3, r3, #16
 800b9b2:	4319      	orrs	r1, r3
 800b9b4:	4b3b      	ldr	r3, [pc, #236]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b9b6:	789b      	ldrb	r3, [r3, #2]
 800b9b8:	021b      	lsls	r3, r3, #8
 800b9ba:	430b      	orrs	r3, r1
 800b9bc:	4939      	ldr	r1, [pc, #228]	; (800baa4 <MX_LWIP_Init+0x240>)
 800b9be:	78c9      	ldrb	r1, [r1, #3]
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	0e1b      	lsrs	r3, r3, #24
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	4a3a      	ldr	r2, [pc, #232]	; (800bab0 <MX_LWIP_Init+0x24c>)
 800b9c8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b9ca:	4b37      	ldr	r3, [pc, #220]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	061a      	lsls	r2, r3, #24
 800b9d0:	4b35      	ldr	r3, [pc, #212]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9d2:	785b      	ldrb	r3, [r3, #1]
 800b9d4:	041b      	lsls	r3, r3, #16
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	4b33      	ldr	r3, [pc, #204]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9da:	789b      	ldrb	r3, [r3, #2]
 800b9dc:	021b      	lsls	r3, r3, #8
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	4a31      	ldr	r2, [pc, #196]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9e2:	78d2      	ldrb	r2, [r2, #3]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	061a      	lsls	r2, r3, #24
 800b9e8:	4b2f      	ldr	r3, [pc, #188]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	0619      	lsls	r1, r3, #24
 800b9ee:	4b2e      	ldr	r3, [pc, #184]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9f0:	785b      	ldrb	r3, [r3, #1]
 800b9f2:	041b      	lsls	r3, r3, #16
 800b9f4:	4319      	orrs	r1, r3
 800b9f6:	4b2c      	ldr	r3, [pc, #176]	; (800baa8 <MX_LWIP_Init+0x244>)
 800b9f8:	789b      	ldrb	r3, [r3, #2]
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	492a      	ldr	r1, [pc, #168]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba00:	78c9      	ldrb	r1, [r1, #3]
 800ba02:	430b      	orrs	r3, r1
 800ba04:	021b      	lsls	r3, r3, #8
 800ba06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	0619      	lsls	r1, r3, #24
 800ba12:	4b25      	ldr	r3, [pc, #148]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	041b      	lsls	r3, r3, #16
 800ba18:	4319      	orrs	r1, r3
 800ba1a:	4b23      	ldr	r3, [pc, #140]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba1c:	789b      	ldrb	r3, [r3, #2]
 800ba1e:	021b      	lsls	r3, r3, #8
 800ba20:	430b      	orrs	r3, r1
 800ba22:	4921      	ldr	r1, [pc, #132]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba24:	78c9      	ldrb	r1, [r1, #3]
 800ba26:	430b      	orrs	r3, r1
 800ba28:	0a1b      	lsrs	r3, r3, #8
 800ba2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	4b1d      	ldr	r3, [pc, #116]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	0619      	lsls	r1, r3, #24
 800ba36:	4b1c      	ldr	r3, [pc, #112]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba38:	785b      	ldrb	r3, [r3, #1]
 800ba3a:	041b      	lsls	r3, r3, #16
 800ba3c:	4319      	orrs	r1, r3
 800ba3e:	4b1a      	ldr	r3, [pc, #104]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba40:	789b      	ldrb	r3, [r3, #2]
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	430b      	orrs	r3, r1
 800ba46:	4918      	ldr	r1, [pc, #96]	; (800baa8 <MX_LWIP_Init+0x244>)
 800ba48:	78c9      	ldrb	r1, [r1, #3]
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	0e1b      	lsrs	r3, r3, #24
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	4a18      	ldr	r2, [pc, #96]	; (800bab4 <MX_LWIP_Init+0x250>)
 800ba52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ba54:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <MX_LWIP_Init+0x254>)
 800ba56:	9302      	str	r3, [sp, #8]
 800ba58:	4b18      	ldr	r3, [pc, #96]	; (800babc <MX_LWIP_Init+0x258>)
 800ba5a:	9301      	str	r3, [sp, #4]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	4b14      	ldr	r3, [pc, #80]	; (800bab4 <MX_LWIP_Init+0x250>)
 800ba62:	4a13      	ldr	r2, [pc, #76]	; (800bab0 <MX_LWIP_Init+0x24c>)
 800ba64:	4911      	ldr	r1, [pc, #68]	; (800baac <MX_LWIP_Init+0x248>)
 800ba66:	4816      	ldr	r0, [pc, #88]	; (800bac0 <MX_LWIP_Init+0x25c>)
 800ba68:	f001 f936 	bl	800ccd8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ba6c:	4814      	ldr	r0, [pc, #80]	; (800bac0 <MX_LWIP_Init+0x25c>)
 800ba6e:	f001 fae5 	bl	800d03c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ba72:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <MX_LWIP_Init+0x25c>)
 800ba74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba78:	089b      	lsrs	r3, r3, #2
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ba84:	480e      	ldr	r0, [pc, #56]	; (800bac0 <MX_LWIP_Init+0x25c>)
 800ba86:	f001 fae9 	bl	800d05c <netif_set_up>
 800ba8a:	e002      	b.n	800ba92 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ba8c:	480c      	ldr	r0, [pc, #48]	; (800bac0 <MX_LWIP_Init+0x25c>)
 800ba8e:	f001 fb51 	bl	800d134 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ba92:	490c      	ldr	r1, [pc, #48]	; (800bac4 <MX_LWIP_Init+0x260>)
 800ba94:	480a      	ldr	r0, [pc, #40]	; (800bac0 <MX_LWIP_Init+0x25c>)
 800ba96:	f001 fbe3 	bl	800d260 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ba9a:	bf00      	nop
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	20000dec 	.word	0x20000dec
 800baa4:	20000df0 	.word	0x20000df0
 800baa8:	20000df4 	.word	0x20000df4
 800baac:	20000de0 	.word	0x20000de0
 800bab0:	20000de4 	.word	0x20000de4
 800bab4:	20000de8 	.word	0x20000de8
 800bab8:	080164f5 	.word	0x080164f5
 800babc:	0800bddd 	.word	0x0800bddd
 800bac0:	20000dac 	.word	0x20000dac
 800bac4:	0800bac9 	.word	0x0800bac9

0800bac8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <SCB_InvalidateDCache_by_Addr>:
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800baee:	2320      	movs	r3, #32
 800baf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800baf2:	f3bf 8f4f 	dsb	sy
}
 800baf6:	bf00      	nop
    while (op_size > 0) {
 800baf8:	e00b      	b.n	800bb12 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800bafa:	4a0d      	ldr	r2, [pc, #52]	; (800bb30 <SCB_InvalidateDCache_by_Addr+0x54>)
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	4413      	add	r3, r2
 800bb08:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dcf0      	bgt.n	800bafa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800bb18:	f3bf 8f4f 	dsb	sy
}
 800bb1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb1e:	f3bf 8f6f 	isb	sy
}
 800bb22:	bf00      	nop
}
 800bb24:	bf00      	nop
 800bb26:	371c      	adds	r7, #28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	e000ed00 	.word	0xe000ed00

0800bb34 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bb40:	4b40      	ldr	r3, [pc, #256]	; (800bc44 <low_level_init+0x110>)
 800bb42:	4a41      	ldr	r2, [pc, #260]	; (800bc48 <low_level_init+0x114>)
 800bb44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bb46:	2300      	movs	r3, #0
 800bb48:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bb4a:	2380      	movs	r3, #128	; 0x80
 800bb4c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bb4e:	23e1      	movs	r3, #225	; 0xe1
 800bb50:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bb52:	2300      	movs	r3, #0
 800bb54:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bb56:	2300      	movs	r3, #0
 800bb58:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bb5e:	4a39      	ldr	r2, [pc, #228]	; (800bc44 <low_level_init+0x110>)
 800bb60:	f107 0308 	add.w	r3, r7, #8
 800bb64:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bb66:	4b37      	ldr	r3, [pc, #220]	; (800bc44 <low_level_init+0x110>)
 800bb68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bb6c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bb6e:	4b35      	ldr	r3, [pc, #212]	; (800bc44 <low_level_init+0x110>)
 800bb70:	4a36      	ldr	r2, [pc, #216]	; (800bc4c <low_level_init+0x118>)
 800bb72:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bb74:	4b33      	ldr	r3, [pc, #204]	; (800bc44 <low_level_init+0x110>)
 800bb76:	4a36      	ldr	r2, [pc, #216]	; (800bc50 <low_level_init+0x11c>)
 800bb78:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bb7a:	4b32      	ldr	r3, [pc, #200]	; (800bc44 <low_level_init+0x110>)
 800bb7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bb80:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bb82:	4830      	ldr	r0, [pc, #192]	; (800bc44 <low_level_init+0x110>)
 800bb84:	f7f7 fdce 	bl	8003724 <HAL_ETH_Init>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bb8c:	2238      	movs	r2, #56	; 0x38
 800bb8e:	2100      	movs	r1, #0
 800bb90:	4830      	ldr	r0, [pc, #192]	; (800bc54 <low_level_init+0x120>)
 800bb92:	f00b fe49 	bl	8017828 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bb96:	4b2f      	ldr	r3, [pc, #188]	; (800bc54 <low_level_init+0x120>)
 800bb98:	2221      	movs	r2, #33	; 0x21
 800bb9a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bb9c:	4b2d      	ldr	r3, [pc, #180]	; (800bc54 <low_level_init+0x120>)
 800bb9e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800bba2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bba4:	4b2b      	ldr	r3, [pc, #172]	; (800bc54 <low_level_init+0x120>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bbaa:	482b      	ldr	r0, [pc, #172]	; (800bc58 <low_level_init+0x124>)
 800bbac:	f000 ff5c 	bl	800ca68 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bbb8:	4b22      	ldr	r3, [pc, #136]	; (800bc44 <low_level_init+0x110>)
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	781a      	ldrb	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bbc4:	4b1f      	ldr	r3, [pc, #124]	; (800bc44 <low_level_init+0x110>)
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	785a      	ldrb	r2, [r3, #1]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bbd0:	4b1c      	ldr	r3, [pc, #112]	; (800bc44 <low_level_init+0x110>)
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	789a      	ldrb	r2, [r3, #2]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bbdc:	4b19      	ldr	r3, [pc, #100]	; (800bc44 <low_level_init+0x110>)
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	78da      	ldrb	r2, [r3, #3]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bbe8:	4b16      	ldr	r3, [pc, #88]	; (800bc44 <low_level_init+0x110>)
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	791a      	ldrb	r2, [r3, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bbf4:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <low_level_init+0x110>)
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	795a      	ldrb	r2, [r3, #5]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bc06:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc0e:	f043 030a 	orr.w	r3, r3, #10
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bc1a:	4910      	ldr	r1, [pc, #64]	; (800bc5c <low_level_init+0x128>)
 800bc1c:	4810      	ldr	r0, [pc, #64]	; (800bc60 <low_level_init+0x12c>)
 800bc1e:	f7f6 f862 	bl	8001ce6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800bc22:	480f      	ldr	r0, [pc, #60]	; (800bc60 <low_level_init+0x12c>)
 800bc24:	f7f6 f891 	bl	8001d4a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d103      	bne.n	800bc36 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fa3a 	bl	800c0a8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bc34:	e001      	b.n	800bc3a <low_level_init+0x106>
    Error_Handler();
 800bc36:	f7f5 f8e1 	bl	8000dfc <Error_Handler>
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20005784 	.word	0x20005784
 800bc48:	40028000 	.word	0x40028000
 800bc4c:	20000130 	.word	0x20000130
 800bc50:	20000090 	.word	0x20000090
 800bc54:	20005834 	.word	0x20005834
 800bc58:	0801b5b0 	.word	0x0801b5b0
 800bc5c:	2000000c 	.word	0x2000000c
 800bc60:	2000586c 	.word	0x2000586c

0800bc64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b092      	sub	sp, #72	; 0x48
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bc7c:	f107 030c 	add.w	r3, r7, #12
 800bc80:	2230      	movs	r2, #48	; 0x30
 800bc82:	2100      	movs	r1, #0
 800bc84:	4618      	mov	r0, r3
 800bc86:	f00b fdcf 	bl	8017828 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bc8a:	f107 030c 	add.w	r3, r7, #12
 800bc8e:	2230      	movs	r2, #48	; 0x30
 800bc90:	2100      	movs	r1, #0
 800bc92:	4618      	mov	r0, r3
 800bc94:	f00b fdc8 	bl	8017828 <memset>

  for(q = p; q != NULL; q = q->next)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc9c:	e045      	b.n	800bd2a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bc9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d902      	bls.n	800bcaa <low_level_output+0x46>
      return ERR_IF;
 800bca4:	f06f 030b 	mvn.w	r3, #11
 800bca8:	e055      	b.n	800bd56 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800bcaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcac:	6859      	ldr	r1, [r3, #4]
 800bcae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	3348      	adds	r3, #72	; 0x48
 800bcba:	443b      	add	r3, r7
 800bcbc:	3b3c      	subs	r3, #60	; 0x3c
 800bcbe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bcc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc2:	895b      	ldrh	r3, [r3, #10]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcc8:	4613      	mov	r3, r2
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	3348      	adds	r3, #72	; 0x48
 800bcd2:	443b      	add	r3, r7
 800bcd4:	3b38      	subs	r3, #56	; 0x38
 800bcd6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bcd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d011      	beq.n	800bd02 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bcde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce0:	1e5a      	subs	r2, r3, #1
 800bce2:	f107 000c 	add.w	r0, r7, #12
 800bce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bce8:	460b      	mov	r3, r1
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	440b      	add	r3, r1
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	18c1      	adds	r1, r0, r3
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	3348      	adds	r3, #72	; 0x48
 800bcfc:	443b      	add	r3, r7
 800bcfe:	3b34      	subs	r3, #52	; 0x34
 800bd00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d109      	bne.n	800bd1e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bd0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	3348      	adds	r3, #72	; 0x48
 800bd16:	443b      	add	r3, r7
 800bd18:	3b34      	subs	r3, #52	; 0x34
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd20:	3301      	adds	r3, #1
 800bd22:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800bd24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	643b      	str	r3, [r7, #64]	; 0x40
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1b6      	bne.n	800bc9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	891b      	ldrh	r3, [r3, #8]
 800bd34:	461a      	mov	r2, r3
 800bd36:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <low_level_output+0xfc>)
 800bd38:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bd3a:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <low_level_output+0xfc>)
 800bd3c:	f107 030c 	add.w	r3, r7, #12
 800bd40:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bd42:	4a07      	ldr	r2, [pc, #28]	; (800bd60 <low_level_output+0xfc>)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800bd48:	2214      	movs	r2, #20
 800bd4a:	4905      	ldr	r1, [pc, #20]	; (800bd60 <low_level_output+0xfc>)
 800bd4c:	4805      	ldr	r0, [pc, #20]	; (800bd64 <low_level_output+0x100>)
 800bd4e:	f7f7 fe1d 	bl	800398c <HAL_ETH_Transmit>

  return errval;
 800bd52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3748      	adds	r7, #72	; 0x48
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20005834 	.word	0x20005834
 800bd64:	20005784 	.word	0x20005784

0800bd68 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bd74:	4b07      	ldr	r3, [pc, #28]	; (800bd94 <low_level_input+0x2c>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d105      	bne.n	800bd88 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	4619      	mov	r1, r3
 800bd82:	4805      	ldr	r0, [pc, #20]	; (800bd98 <low_level_input+0x30>)
 800bd84:	f7f7 fe96 	bl	8003ab4 <HAL_ETH_ReadData>
  }

  return p;
 800bd88:	68fb      	ldr	r3, [r7, #12]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20005780 	.word	0x20005780
 800bd98:	20005784 	.word	0x20005784

0800bd9c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7ff ffdd 	bl	800bd68 <low_level_input>
 800bdae:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	4798      	blx	r3
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f001 fdca 	bl	800d960 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1ea      	bne.n	800bda8 <ethernetif_input+0xc>
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <ethernetif_init+0x1c>
 800bdea:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <ethernetif_init+0x48>)
 800bdec:	f240 127b 	movw	r2, #379	; 0x17b
 800bdf0:	490d      	ldr	r1, [pc, #52]	; (800be28 <ethernetif_init+0x4c>)
 800bdf2:	480e      	ldr	r0, [pc, #56]	; (800be2c <ethernetif_init+0x50>)
 800bdf4:	f00b fd20 	bl	8017838 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2273      	movs	r2, #115	; 0x73
 800bdfc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2274      	movs	r2, #116	; 0x74
 800be04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a09      	ldr	r2, [pc, #36]	; (800be30 <ethernetif_init+0x54>)
 800be0c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a08      	ldr	r2, [pc, #32]	; (800be34 <ethernetif_init+0x58>)
 800be12:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7ff fe8d 	bl	800bb34 <low_level_init>

  return ERR_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	080189dc 	.word	0x080189dc
 800be28:	080189f8 	.word	0x080189f8
 800be2c:	08018a08 	.word	0x08018a08
 800be30:	0801488d 	.word	0x0801488d
 800be34:	0800bc65 	.word	0x0800bc65

0800be38 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800be44:	68f9      	ldr	r1, [r7, #12]
 800be46:	4807      	ldr	r0, [pc, #28]	; (800be64 <pbuf_free_custom+0x2c>)
 800be48:	f000 fef0 	bl	800cc2c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800be4c:	4b06      	ldr	r3, [pc, #24]	; (800be68 <pbuf_free_custom+0x30>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d102      	bne.n	800be5a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800be54:	4b04      	ldr	r3, [pc, #16]	; (800be68 <pbuf_free_custom+0x30>)
 800be56:	2200      	movs	r2, #0
 800be58:	701a      	strb	r2, [r3, #0]
  }
}
 800be5a:	bf00      	nop
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	0801b5b0 	.word	0x0801b5b0
 800be68:	20005780 	.word	0x20005780

0800be6c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be70:	f7f6 f8ec 	bl	800204c <HAL_GetTick>
 800be74:	4603      	mov	r3, r0
}
 800be76:	4618      	mov	r0, r3
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	605a      	str	r2, [r3, #4]
 800be8e:	609a      	str	r2, [r3, #8]
 800be90:	60da      	str	r2, [r3, #12]
 800be92:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a56      	ldr	r2, [pc, #344]	; (800bff4 <HAL_ETH_MspInit+0x178>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	f040 80a6 	bne.w	800bfec <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bea0:	4b55      	ldr	r3, [pc, #340]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea4:	4a54      	ldr	r2, [pc, #336]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800beaa:	6313      	str	r3, [r2, #48]	; 0x30
 800beac:	4b52      	ldr	r3, [pc, #328]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800beae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beb4:	623b      	str	r3, [r7, #32]
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	4b4f      	ldr	r3, [pc, #316]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800beba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebc:	4a4e      	ldr	r2, [pc, #312]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bebe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bec2:	6313      	str	r3, [r2, #48]	; 0x30
 800bec4:	4b4c      	ldr	r3, [pc, #304]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800becc:	61fb      	str	r3, [r7, #28]
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	4b49      	ldr	r3, [pc, #292]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	4a48      	ldr	r2, [pc, #288]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800beda:	6313      	str	r3, [r2, #48]	; 0x30
 800bedc:	4b46      	ldr	r3, [pc, #280]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee4:	61bb      	str	r3, [r7, #24]
 800bee6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bee8:	4b43      	ldr	r3, [pc, #268]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800beea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beec:	4a42      	ldr	r2, [pc, #264]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800beee:	f043 0304 	orr.w	r3, r3, #4
 800bef2:	6313      	str	r3, [r2, #48]	; 0x30
 800bef4:	4b40      	ldr	r3, [pc, #256]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	617b      	str	r3, [r7, #20]
 800befe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf00:	4b3d      	ldr	r3, [pc, #244]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf04:	4a3c      	ldr	r2, [pc, #240]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf06:	f043 0301 	orr.w	r3, r3, #1
 800bf0a:	6313      	str	r3, [r2, #48]	; 0x30
 800bf0c:	4b3a      	ldr	r3, [pc, #232]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	613b      	str	r3, [r7, #16]
 800bf16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf18:	4b37      	ldr	r3, [pc, #220]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1c:	4a36      	ldr	r2, [pc, #216]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf1e:	f043 0302 	orr.w	r3, r3, #2
 800bf22:	6313      	str	r3, [r2, #48]	; 0x30
 800bf24:	4b34      	ldr	r3, [pc, #208]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	60fb      	str	r3, [r7, #12]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bf30:	4b31      	ldr	r3, [pc, #196]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf34:	4a30      	ldr	r2, [pc, #192]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf3a:	6313      	str	r3, [r2, #48]	; 0x30
 800bf3c:	4b2e      	ldr	r3, [pc, #184]	; (800bff8 <HAL_ETH_MspInit+0x17c>)
 800bf3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf44:	60bb      	str	r3, [r7, #8]
 800bf46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bf48:	2332      	movs	r3, #50	; 0x32
 800bf4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf50:	2300      	movs	r3, #0
 800bf52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf54:	2303      	movs	r3, #3
 800bf56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf58:	230b      	movs	r3, #11
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf60:	4619      	mov	r1, r3
 800bf62:	4826      	ldr	r0, [pc, #152]	; (800bffc <HAL_ETH_MspInit+0x180>)
 800bf64:	f7f8 fdc4 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bf68:	2386      	movs	r3, #134	; 0x86
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf74:	2303      	movs	r3, #3
 800bf76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf78:	230b      	movs	r3, #11
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf80:	4619      	mov	r1, r3
 800bf82:	481f      	ldr	r0, [pc, #124]	; (800c000 <HAL_ETH_MspInit+0x184>)
 800bf84:	f7f8 fdb4 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bf88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf8e:	2302      	movs	r3, #2
 800bf90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf96:	2303      	movs	r3, #3
 800bf98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf9a:	230b      	movs	r3, #11
 800bf9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800bf9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4817      	ldr	r0, [pc, #92]	; (800c004 <HAL_ETH_MspInit+0x188>)
 800bfa6:	f7f8 fda3 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bfaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bfae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bfbc:	230b      	movs	r3, #11
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bfc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4810      	ldr	r0, [pc, #64]	; (800c008 <HAL_ETH_MspInit+0x18c>)
 800bfc8:	f7f8 fd92 	bl	8004af0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2100      	movs	r1, #0
 800bfd0:	203d      	movs	r0, #61	; 0x3d
 800bfd2:	f7f6 fe6e 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bfd6:	203d      	movs	r0, #61	; 0x3d
 800bfd8:	f7f6 fe87 	bl	8002cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2100      	movs	r1, #0
 800bfe0:	203e      	movs	r0, #62	; 0x3e
 800bfe2:	f7f6 fe66 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800bfe6:	203e      	movs	r0, #62	; 0x3e
 800bfe8:	f7f6 fe7f 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bfec:	bf00      	nop
 800bfee:	3738      	adds	r7, #56	; 0x38
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	40028000 	.word	0x40028000
 800bff8:	40023800 	.word	0x40023800
 800bffc:	40020800 	.word	0x40020800
 800c000:	40020000 	.word	0x40020000
 800c004:	40020400 	.word	0x40020400
 800c008:	40021800 	.word	0x40021800

0800c00c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c010:	4802      	ldr	r0, [pc, #8]	; (800c01c <ETH_PHY_IO_Init+0x10>)
 800c012:	f7f8 f913 	bl	800423c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20005784 	.word	0x20005784

0800c020 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c020:	b480      	push	{r7}
 800c022:	af00      	add	r7, sp, #0
  return 0;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	68f9      	ldr	r1, [r7, #12]
 800c042:	4807      	ldr	r0, [pc, #28]	; (800c060 <ETH_PHY_IO_ReadReg+0x30>)
 800c044:	f7f7 ff62 	bl	8003f0c <HAL_ETH_ReadPHYRegister>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d002      	beq.n	800c054 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c04e:	f04f 33ff 	mov.w	r3, #4294967295
 800c052:	e000      	b.n	800c056 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20005784 	.word	0x20005784

0800c064 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	68f9      	ldr	r1, [r7, #12]
 800c076:	4807      	ldr	r0, [pc, #28]	; (800c094 <ETH_PHY_IO_WriteReg+0x30>)
 800c078:	f7f7 ff93 	bl	8003fa2 <HAL_ETH_WritePHYRegister>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c082:	f04f 33ff 	mov.w	r3, #4294967295
 800c086:	e000      	b.n	800c08a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20005784 	.word	0x20005784

0800c098 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c09c:	f7f5 ffd6 	bl	800204c <HAL_GetTick>
 800c0a0:	4603      	mov	r3, r0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	bd80      	pop	{r7, pc}
	...

0800c0a8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b0a0      	sub	sp, #128	; 0x80
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c0b0:	f107 030c 	add.w	r3, r7, #12
 800c0b4:	2264      	movs	r2, #100	; 0x64
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f00b fbb5 	bl	8017828 <memset>
  int32_t PHYLinkState = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c0ce:	483a      	ldr	r0, [pc, #232]	; (800c1b8 <ethernet_link_check_state+0x110>)
 800c0d0:	f7f5 fee3 	bl	8001e9a <LAN8742_GetLinkState>
 800c0d4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0dc:	089b      	lsrs	r3, r3, #2
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00c      	beq.n	800c102 <ethernet_link_check_state+0x5a>
 800c0e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	dc09      	bgt.n	800c102 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c0ee:	4833      	ldr	r0, [pc, #204]	; (800c1bc <ethernet_link_check_state+0x114>)
 800c0f0:	f7f7 fbf3 	bl	80038da <HAL_ETH_Stop>
    netif_set_down(netif);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 f81d 	bl	800d134 <netif_set_down>
    netif_set_link_down(netif);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f001 f880 	bl	800d200 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c100:	e055      	b.n	800c1ae <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d14e      	bne.n	800c1ae <ethernet_link_check_state+0x106>
 800c110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c112:	2b01      	cmp	r3, #1
 800c114:	dd4b      	ble.n	800c1ae <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c118:	3b02      	subs	r3, #2
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d82a      	bhi.n	800c174 <ethernet_link_check_state+0xcc>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <ethernet_link_check_state+0x7c>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c135 	.word	0x0800c135
 800c128:	0800c147 	.word	0x0800c147
 800c12c:	0800c157 	.word	0x0800c157
 800c130:	0800c167 	.word	0x0800c167
      duplex = ETH_FULLDUPLEX_MODE;
 800c134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c138:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c13a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c13e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c140:	2301      	movs	r3, #1
 800c142:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c144:	e017      	b.n	800c176 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c146:	2300      	movs	r3, #0
 800c148:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c14a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c14e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c150:	2301      	movs	r3, #1
 800c152:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c154:	e00f      	b.n	800c176 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c15a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c15c:	2300      	movs	r3, #0
 800c15e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c160:	2301      	movs	r3, #1
 800c162:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c164:	e007      	b.n	800c176 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c166:	2300      	movs	r3, #0
 800c168:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c16a:	2300      	movs	r3, #0
 800c16c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c16e:	2301      	movs	r3, #1
 800c170:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c172:	e000      	b.n	800c176 <ethernet_link_check_state+0xce>
      break;
 800c174:	bf00      	nop
    if(linkchanged)
 800c176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d018      	beq.n	800c1ae <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c17c:	f107 030c 	add.w	r3, r7, #12
 800c180:	4619      	mov	r1, r3
 800c182:	480e      	ldr	r0, [pc, #56]	; (800c1bc <ethernet_link_check_state+0x114>)
 800c184:	f7f7 ff56 	bl	8004034 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c18a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800c18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c18e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c190:	f107 030c 	add.w	r3, r7, #12
 800c194:	4619      	mov	r1, r3
 800c196:	4809      	ldr	r0, [pc, #36]	; (800c1bc <ethernet_link_check_state+0x114>)
 800c198:	f7f8 f836 	bl	8004208 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c19c:	4807      	ldr	r0, [pc, #28]	; (800c1bc <ethernet_link_check_state+0x114>)
 800c19e:	f7f7 fb3d 	bl	800381c <HAL_ETH_Start>
      netif_set_up(netif);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 ff5a 	bl	800d05c <netif_set_up>
      netif_set_link_up(netif);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fff5 	bl	800d198 <netif_set_link_up>
}
 800c1ae:	bf00      	nop
 800c1b0:	3780      	adds	r7, #128	; 0x80
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	2000586c 	.word	0x2000586c
 800c1bc:	20005784 	.word	0x20005784

0800c1c0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c1c8:	4812      	ldr	r0, [pc, #72]	; (800c214 <HAL_ETH_RxAllocateCallback+0x54>)
 800c1ca:	f000 fcc1 	bl	800cb50 <memp_malloc_pool>
 800c1ce:	60f8      	str	r0, [r7, #12]
  if (p)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d014      	beq.n	800c200 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f103 0220 	add.w	r2, r3, #32
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4a0d      	ldr	r2, [pc, #52]	; (800c218 <HAL_ETH_RxAllocateCallback+0x58>)
 800c1e4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c1ee:	9201      	str	r2, [sp, #4]
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2241      	movs	r2, #65	; 0x41
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f001 f9f7 	bl	800d5ec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c1fe:	e005      	b.n	800c20c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c200:	4b06      	ldr	r3, [pc, #24]	; (800c21c <HAL_ETH_RxAllocateCallback+0x5c>)
 800c202:	2201      	movs	r2, #1
 800c204:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
}
 800c20c:	bf00      	nop
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	0801b5b0 	.word	0x0801b5b0
 800c218:	0800be39 	.word	0x0800be39
 800c21c:	20005780 	.word	0x20005780

0800c220 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3b20      	subs	r3, #32
 800c23e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	2200      	movs	r2, #0
 800c24a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	887a      	ldrh	r2, [r7, #2]
 800c250:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	69fa      	ldr	r2, [r7, #28]
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	e003      	b.n	800c26a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	69fa      	ldr	r2, [r7, #28]
 800c26e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	61fb      	str	r3, [r7, #28]
 800c276:	e009      	b.n	800c28c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	891a      	ldrh	r2, [r3, #8]
 800c27c:	887b      	ldrh	r3, [r7, #2]
 800c27e:	4413      	add	r3, r2
 800c280:	b29a      	uxth	r2, r3
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	61fb      	str	r3, [r7, #28]
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1f2      	bne.n	800c278 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c292:	887b      	ldrh	r3, [r7, #2]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7ff fc20 	bl	800badc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c29c:	bf00      	nop
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c2ae:	88fb      	ldrh	r3, [r7, #6]
 800c2b0:	021b      	lsls	r3, r3, #8
 800c2b2:	b21a      	sxth	r2, r3
 800c2b4:	88fb      	ldrh	r3, [r7, #6]
 800c2b6:	0a1b      	lsrs	r3, r3, #8
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	b21b      	sxth	r3, r3
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	b21b      	sxth	r3, r3
 800c2c0:	b29b      	uxth	r3, r3
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	061a      	lsls	r2, r3, #24
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	021b      	lsls	r3, r3, #8
 800c2de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	0a1b      	lsrs	r3, r3, #8
 800c2e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c2ec:	431a      	orrs	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	0e1b      	lsrs	r3, r3, #24
 800c2f2:	4313      	orrs	r3, r2
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c30a:	f000 f8d5 	bl	800c4b8 <mem_init>
  memp_init();
 800c30e:	f000 fbdb 	bl	800cac8 <memp_init>
  pbuf_init();
  netif_init();
 800c312:	f000 fcd9 	bl	800ccc8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c316:	f007 f8f9 	bl	801350c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c31a:	f001 fe51 	bl	800dfc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c31e:	f007 f86b 	bl	80133f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c336:	4b05      	ldr	r3, [pc, #20]	; (800c34c <ptr_to_mem+0x20>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	4413      	add	r3, r2
}
 800c33e:	4618      	mov	r0, r3
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20005ef8 	.word	0x20005ef8

0800c350 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <mem_to_ptr+0x20>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	b29b      	uxth	r3, r3
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20005ef8 	.word	0x20005ef8

0800c374 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c37c:	4b45      	ldr	r3, [pc, #276]	; (800c494 <plug_holes+0x120>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	429a      	cmp	r2, r3
 800c384:	d206      	bcs.n	800c394 <plug_holes+0x20>
 800c386:	4b44      	ldr	r3, [pc, #272]	; (800c498 <plug_holes+0x124>)
 800c388:	f240 12df 	movw	r2, #479	; 0x1df
 800c38c:	4943      	ldr	r1, [pc, #268]	; (800c49c <plug_holes+0x128>)
 800c38e:	4844      	ldr	r0, [pc, #272]	; (800c4a0 <plug_holes+0x12c>)
 800c390:	f00b fa52 	bl	8017838 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c394:	4b43      	ldr	r3, [pc, #268]	; (800c4a4 <plug_holes+0x130>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d306      	bcc.n	800c3ac <plug_holes+0x38>
 800c39e:	4b3e      	ldr	r3, [pc, #248]	; (800c498 <plug_holes+0x124>)
 800c3a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c3a4:	4940      	ldr	r1, [pc, #256]	; (800c4a8 <plug_holes+0x134>)
 800c3a6:	483e      	ldr	r0, [pc, #248]	; (800c4a0 <plug_holes+0x12c>)
 800c3a8:	f00b fa46 	bl	8017838 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	791b      	ldrb	r3, [r3, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <plug_holes+0x4e>
 800c3b4:	4b38      	ldr	r3, [pc, #224]	; (800c498 <plug_holes+0x124>)
 800c3b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c3ba:	493c      	ldr	r1, [pc, #240]	; (800c4ac <plug_holes+0x138>)
 800c3bc:	4838      	ldr	r0, [pc, #224]	; (800c4a0 <plug_holes+0x12c>)
 800c3be:	f00b fa3b 	bl	8017838 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3ca:	d906      	bls.n	800c3da <plug_holes+0x66>
 800c3cc:	4b32      	ldr	r3, [pc, #200]	; (800c498 <plug_holes+0x124>)
 800c3ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c3d2:	4937      	ldr	r1, [pc, #220]	; (800c4b0 <plug_holes+0x13c>)
 800c3d4:	4832      	ldr	r0, [pc, #200]	; (800c4a0 <plug_holes+0x12c>)
 800c3d6:	f00b fa2f 	bl	8017838 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff ffa4 	bl	800c32c <ptr_to_mem>
 800c3e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d024      	beq.n	800c438 <plug_holes+0xc4>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	791b      	ldrb	r3, [r3, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d120      	bne.n	800c438 <plug_holes+0xc4>
 800c3f6:	4b2b      	ldr	r3, [pc, #172]	; (800c4a4 <plug_holes+0x130>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d01b      	beq.n	800c438 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c400:	4b2c      	ldr	r3, [pc, #176]	; (800c4b4 <plug_holes+0x140>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	429a      	cmp	r2, r3
 800c408:	d102      	bne.n	800c410 <plug_holes+0x9c>
      lfree = mem;
 800c40a:	4a2a      	ldr	r2, [pc, #168]	; (800c4b4 <plug_holes+0x140>)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	881a      	ldrh	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c420:	d00a      	beq.n	800c438 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff ff80 	bl	800c32c <ptr_to_mem>
 800c42c:	4604      	mov	r4, r0
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff ff8e 	bl	800c350 <mem_to_ptr>
 800c434:	4603      	mov	r3, r0
 800c436:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	885b      	ldrh	r3, [r3, #2]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff ff75 	bl	800c32c <ptr_to_mem>
 800c442:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d01f      	beq.n	800c48c <plug_holes+0x118>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	791b      	ldrb	r3, [r3, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d11b      	bne.n	800c48c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c454:	4b17      	ldr	r3, [pc, #92]	; (800c4b4 <plug_holes+0x140>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d102      	bne.n	800c464 <plug_holes+0xf0>
      lfree = pmem;
 800c45e:	4a15      	ldr	r2, [pc, #84]	; (800c4b4 <plug_holes+0x140>)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	881a      	ldrh	r2, [r3, #0]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c474:	d00a      	beq.n	800c48c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff ff56 	bl	800c32c <ptr_to_mem>
 800c480:	4604      	mov	r4, r0
 800c482:	68b8      	ldr	r0, [r7, #8]
 800c484:	f7ff ff64 	bl	800c350 <mem_to_ptr>
 800c488:	4603      	mov	r3, r0
 800c48a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c48c:	bf00      	nop
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}
 800c494:	20005ef8 	.word	0x20005ef8
 800c498:	08018a30 	.word	0x08018a30
 800c49c:	08018a60 	.word	0x08018a60
 800c4a0:	08018a78 	.word	0x08018a78
 800c4a4:	20005efc 	.word	0x20005efc
 800c4a8:	08018aa0 	.word	0x08018aa0
 800c4ac:	08018abc 	.word	0x08018abc
 800c4b0:	08018ad8 	.word	0x08018ad8
 800c4b4:	20005f00 	.word	0x20005f00

0800c4b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c4be:	4b18      	ldr	r3, [pc, #96]	; (800c520 <mem_init+0x68>)
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4b16      	ldr	r3, [pc, #88]	; (800c524 <mem_init+0x6c>)
 800c4ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c4cc:	4b15      	ldr	r3, [pc, #84]	; (800c524 <mem_init+0x6c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c4e6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c4ea:	f7ff ff1f 	bl	800c32c <ptr_to_mem>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	4a0d      	ldr	r2, [pc, #52]	; (800c528 <mem_init+0x70>)
 800c4f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <mem_init+0x70>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <mem_init+0x70>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c504:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c506:	4b08      	ldr	r3, [pc, #32]	; (800c528 <mem_init+0x70>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c50e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c510:	4b04      	ldr	r3, [pc, #16]	; (800c524 <mem_init+0x6c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a05      	ldr	r2, [pc, #20]	; (800c52c <mem_init+0x74>)
 800c516:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	200058a4 	.word	0x200058a4
 800c524:	20005ef8 	.word	0x20005ef8
 800c528:	20005efc 	.word	0x20005efc
 800c52c:	20005f00 	.word	0x20005f00

0800c530 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ff09 	bl	800c350 <mem_to_ptr>
 800c53e:	4603      	mov	r3, r0
 800c540:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff fef0 	bl	800c32c <ptr_to_mem>
 800c54c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	885b      	ldrh	r3, [r3, #2]
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff feea 	bl	800c32c <ptr_to_mem>
 800c558:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c562:	d818      	bhi.n	800c596 <mem_link_valid+0x66>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	885b      	ldrh	r3, [r3, #2]
 800c568:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c56c:	d813      	bhi.n	800c596 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c572:	8afa      	ldrh	r2, [r7, #22]
 800c574:	429a      	cmp	r2, r3
 800c576:	d004      	beq.n	800c582 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	8afa      	ldrh	r2, [r7, #22]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d109      	bne.n	800c596 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c582:	4b08      	ldr	r3, [pc, #32]	; (800c5a4 <mem_link_valid+0x74>)
 800c584:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d006      	beq.n	800c59a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	885b      	ldrh	r3, [r3, #2]
 800c590:	8afa      	ldrh	r2, [r7, #22]
 800c592:	429a      	cmp	r2, r3
 800c594:	d001      	beq.n	800c59a <mem_link_valid+0x6a>
    return 0;
 800c596:	2300      	movs	r3, #0
 800c598:	e000      	b.n	800c59c <mem_link_valid+0x6c>
  }
  return 1;
 800c59a:	2301      	movs	r3, #1
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20005efc 	.word	0x20005efc

0800c5a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d04c      	beq.n	800c650 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f003 0303 	and.w	r3, r3, #3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <mem_free+0xb0>)
 800c5c2:	f240 2273 	movw	r2, #627	; 0x273
 800c5c6:	4925      	ldr	r1, [pc, #148]	; (800c65c <mem_free+0xb4>)
 800c5c8:	4825      	ldr	r0, [pc, #148]	; (800c660 <mem_free+0xb8>)
 800c5ca:	f00b f935 	bl	8017838 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5ce:	e040      	b.n	800c652 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3b08      	subs	r3, #8
 800c5d4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c5d6:	4b23      	ldr	r3, [pc, #140]	; (800c664 <mem_free+0xbc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d306      	bcc.n	800c5ee <mem_free+0x46>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f103 020c 	add.w	r2, r3, #12
 800c5e6:	4b20      	ldr	r3, [pc, #128]	; (800c668 <mem_free+0xc0>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d907      	bls.n	800c5fe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c5ee:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <mem_free+0xb0>)
 800c5f0:	f240 227f 	movw	r2, #639	; 0x27f
 800c5f4:	491d      	ldr	r1, [pc, #116]	; (800c66c <mem_free+0xc4>)
 800c5f6:	481a      	ldr	r0, [pc, #104]	; (800c660 <mem_free+0xb8>)
 800c5f8:	f00b f91e 	bl	8017838 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5fc:	e029      	b.n	800c652 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	791b      	ldrb	r3, [r3, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d107      	bne.n	800c616 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c606:	4b14      	ldr	r3, [pc, #80]	; (800c658 <mem_free+0xb0>)
 800c608:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c60c:	4918      	ldr	r1, [pc, #96]	; (800c670 <mem_free+0xc8>)
 800c60e:	4814      	ldr	r0, [pc, #80]	; (800c660 <mem_free+0xb8>)
 800c610:	f00b f912 	bl	8017838 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c614:	e01d      	b.n	800c652 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff ff8a 	bl	800c530 <mem_link_valid>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d107      	bne.n	800c632 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c622:	4b0d      	ldr	r3, [pc, #52]	; (800c658 <mem_free+0xb0>)
 800c624:	f240 2295 	movw	r2, #661	; 0x295
 800c628:	4912      	ldr	r1, [pc, #72]	; (800c674 <mem_free+0xcc>)
 800c62a:	480d      	ldr	r0, [pc, #52]	; (800c660 <mem_free+0xb8>)
 800c62c:	f00b f904 	bl	8017838 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c630:	e00f      	b.n	800c652 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c638:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <mem_free+0xd0>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d202      	bcs.n	800c648 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c642:	4a0d      	ldr	r2, [pc, #52]	; (800c678 <mem_free+0xd0>)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f7ff fe93 	bl	800c374 <plug_holes>
 800c64e:	e000      	b.n	800c652 <mem_free+0xaa>
    return;
 800c650:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	08018a30 	.word	0x08018a30
 800c65c:	08018b04 	.word	0x08018b04
 800c660:	08018a78 	.word	0x08018a78
 800c664:	20005ef8 	.word	0x20005ef8
 800c668:	20005efc 	.word	0x20005efc
 800c66c:	08018b28 	.word	0x08018b28
 800c670:	08018b44 	.word	0x08018b44
 800c674:	08018b6c 	.word	0x08018b6c
 800c678:	20005f00 	.word	0x20005f00

0800c67c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c688:	887b      	ldrh	r3, [r7, #2]
 800c68a:	3303      	adds	r3, #3
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	f023 0303 	bic.w	r3, r3, #3
 800c692:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c694:	8bfb      	ldrh	r3, [r7, #30]
 800c696:	2b0b      	cmp	r3, #11
 800c698:	d801      	bhi.n	800c69e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c69a:	230c      	movs	r3, #12
 800c69c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c69e:	8bfb      	ldrh	r3, [r7, #30]
 800c6a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6a4:	d803      	bhi.n	800c6ae <mem_trim+0x32>
 800c6a6:	8bfa      	ldrh	r2, [r7, #30]
 800c6a8:	887b      	ldrh	r3, [r7, #2]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d201      	bcs.n	800c6b2 <mem_trim+0x36>
    return NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e0cc      	b.n	800c84c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c6b2:	4b68      	ldr	r3, [pc, #416]	; (800c854 <mem_trim+0x1d8>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d304      	bcc.n	800c6c6 <mem_trim+0x4a>
 800c6bc:	4b66      	ldr	r3, [pc, #408]	; (800c858 <mem_trim+0x1dc>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d306      	bcc.n	800c6d4 <mem_trim+0x58>
 800c6c6:	4b65      	ldr	r3, [pc, #404]	; (800c85c <mem_trim+0x1e0>)
 800c6c8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c6cc:	4964      	ldr	r1, [pc, #400]	; (800c860 <mem_trim+0x1e4>)
 800c6ce:	4865      	ldr	r0, [pc, #404]	; (800c864 <mem_trim+0x1e8>)
 800c6d0:	f00b f8b2 	bl	8017838 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c6d4:	4b5f      	ldr	r3, [pc, #380]	; (800c854 <mem_trim+0x1d8>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d304      	bcc.n	800c6e8 <mem_trim+0x6c>
 800c6de:	4b5e      	ldr	r3, [pc, #376]	; (800c858 <mem_trim+0x1dc>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d301      	bcc.n	800c6ec <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	e0af      	b.n	800c84c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3b08      	subs	r3, #8
 800c6f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c6f2:	69b8      	ldr	r0, [r7, #24]
 800c6f4:	f7ff fe2c 	bl	800c350 <mem_to_ptr>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	881a      	ldrh	r2, [r3, #0]
 800c700:	8afb      	ldrh	r3, [r7, #22]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	b29b      	uxth	r3, r3
 800c706:	3b08      	subs	r3, #8
 800c708:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c70a:	8bfa      	ldrh	r2, [r7, #30]
 800c70c:	8abb      	ldrh	r3, [r7, #20]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d906      	bls.n	800c720 <mem_trim+0xa4>
 800c712:	4b52      	ldr	r3, [pc, #328]	; (800c85c <mem_trim+0x1e0>)
 800c714:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c718:	4953      	ldr	r1, [pc, #332]	; (800c868 <mem_trim+0x1ec>)
 800c71a:	4852      	ldr	r0, [pc, #328]	; (800c864 <mem_trim+0x1e8>)
 800c71c:	f00b f88c 	bl	8017838 <iprintf>
  if (newsize > size) {
 800c720:	8bfa      	ldrh	r2, [r7, #30]
 800c722:	8abb      	ldrh	r3, [r7, #20]
 800c724:	429a      	cmp	r2, r3
 800c726:	d901      	bls.n	800c72c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	e08f      	b.n	800c84c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c72c:	8bfa      	ldrh	r2, [r7, #30]
 800c72e:	8abb      	ldrh	r3, [r7, #20]
 800c730:	429a      	cmp	r2, r3
 800c732:	d101      	bne.n	800c738 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	e089      	b.n	800c84c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fdf5 	bl	800c32c <ptr_to_mem>
 800c742:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	791b      	ldrb	r3, [r3, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d13f      	bne.n	800c7cc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c754:	d106      	bne.n	800c764 <mem_trim+0xe8>
 800c756:	4b41      	ldr	r3, [pc, #260]	; (800c85c <mem_trim+0x1e0>)
 800c758:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c75c:	4943      	ldr	r1, [pc, #268]	; (800c86c <mem_trim+0x1f0>)
 800c75e:	4841      	ldr	r0, [pc, #260]	; (800c864 <mem_trim+0x1e8>)
 800c760:	f00b f86a 	bl	8017838 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c76a:	8afa      	ldrh	r2, [r7, #22]
 800c76c:	8bfb      	ldrh	r3, [r7, #30]
 800c76e:	4413      	add	r3, r2
 800c770:	b29b      	uxth	r3, r3
 800c772:	3308      	adds	r3, #8
 800c774:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c776:	4b3e      	ldr	r3, [pc, #248]	; (800c870 <mem_trim+0x1f4>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d106      	bne.n	800c78e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c780:	89fb      	ldrh	r3, [r7, #14]
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff fdd2 	bl	800c32c <ptr_to_mem>
 800c788:	4603      	mov	r3, r0
 800c78a:	4a39      	ldr	r2, [pc, #228]	; (800c870 <mem_trim+0x1f4>)
 800c78c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c78e:	89fb      	ldrh	r3, [r7, #14]
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fdcb 	bl	800c32c <ptr_to_mem>
 800c796:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	2200      	movs	r2, #0
 800c79c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	89ba      	ldrh	r2, [r7, #12]
 800c7a2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	8afa      	ldrh	r2, [r7, #22]
 800c7a8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	89fa      	ldrh	r2, [r7, #14]
 800c7ae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7b8:	d047      	beq.n	800c84a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff fdb4 	bl	800c32c <ptr_to_mem>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	89fb      	ldrh	r3, [r7, #14]
 800c7c8:	8053      	strh	r3, [r2, #2]
 800c7ca:	e03e      	b.n	800c84a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c7cc:	8bfb      	ldrh	r3, [r7, #30]
 800c7ce:	f103 0214 	add.w	r2, r3, #20
 800c7d2:	8abb      	ldrh	r3, [r7, #20]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d838      	bhi.n	800c84a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7d8:	8afa      	ldrh	r2, [r7, #22]
 800c7da:	8bfb      	ldrh	r3, [r7, #30]
 800c7dc:	4413      	add	r3, r2
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7ec:	d106      	bne.n	800c7fc <mem_trim+0x180>
 800c7ee:	4b1b      	ldr	r3, [pc, #108]	; (800c85c <mem_trim+0x1e0>)
 800c7f0:	f240 3216 	movw	r2, #790	; 0x316
 800c7f4:	491d      	ldr	r1, [pc, #116]	; (800c86c <mem_trim+0x1f0>)
 800c7f6:	481b      	ldr	r0, [pc, #108]	; (800c864 <mem_trim+0x1e8>)
 800c7f8:	f00b f81e 	bl	8017838 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c7fc:	89fb      	ldrh	r3, [r7, #14]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7ff fd94 	bl	800c32c <ptr_to_mem>
 800c804:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c806:	4b1a      	ldr	r3, [pc, #104]	; (800c870 <mem_trim+0x1f4>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	693a      	ldr	r2, [r7, #16]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d202      	bcs.n	800c816 <mem_trim+0x19a>
      lfree = mem2;
 800c810:	4a17      	ldr	r2, [pc, #92]	; (800c870 <mem_trim+0x1f4>)
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	2200      	movs	r2, #0
 800c81a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	881a      	ldrh	r2, [r3, #0]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	8afa      	ldrh	r2, [r7, #22]
 800c828:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	89fa      	ldrh	r2, [r7, #14]
 800c82e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	881b      	ldrh	r3, [r3, #0]
 800c834:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c838:	d007      	beq.n	800c84a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff fd74 	bl	800c32c <ptr_to_mem>
 800c844:	4602      	mov	r2, r0
 800c846:	89fb      	ldrh	r3, [r7, #14]
 800c848:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c84a:	687b      	ldr	r3, [r7, #4]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3720      	adds	r7, #32
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20005ef8 	.word	0x20005ef8
 800c858:	20005efc 	.word	0x20005efc
 800c85c:	08018a30 	.word	0x08018a30
 800c860:	08018ba0 	.word	0x08018ba0
 800c864:	08018a78 	.word	0x08018a78
 800c868:	08018bb8 	.word	0x08018bb8
 800c86c:	08018bd8 	.word	0x08018bd8
 800c870:	20005f00 	.word	0x20005f00

0800c874 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <mem_malloc+0x14>
    return NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	e0d9      	b.n	800ca3c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c888:	88fb      	ldrh	r3, [r7, #6]
 800c88a:	3303      	adds	r3, #3
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c894:	8bbb      	ldrh	r3, [r7, #28]
 800c896:	2b0b      	cmp	r3, #11
 800c898:	d801      	bhi.n	800c89e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c89a:	230c      	movs	r3, #12
 800c89c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c89e:	8bbb      	ldrh	r3, [r7, #28]
 800c8a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8a4:	d803      	bhi.n	800c8ae <mem_malloc+0x3a>
 800c8a6:	8bba      	ldrh	r2, [r7, #28]
 800c8a8:	88fb      	ldrh	r3, [r7, #6]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d201      	bcs.n	800c8b2 <mem_malloc+0x3e>
    return NULL;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e0c4      	b.n	800ca3c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c8b2:	4b64      	ldr	r3, [pc, #400]	; (800ca44 <mem_malloc+0x1d0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7ff fd4a 	bl	800c350 <mem_to_ptr>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	83fb      	strh	r3, [r7, #30]
 800c8c0:	e0b4      	b.n	800ca2c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c8c2:	8bfb      	ldrh	r3, [r7, #30]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7ff fd31 	bl	800c32c <ptr_to_mem>
 800c8ca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	791b      	ldrb	r3, [r3, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f040 80a4 	bne.w	800ca1e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	8bfb      	ldrh	r3, [r7, #30]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	f1a3 0208 	sub.w	r2, r3, #8
 800c8e4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	f0c0 8099 	bcc.w	800ca1e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	8bfb      	ldrh	r3, [r7, #30]
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	f1a3 0208 	sub.w	r2, r3, #8
 800c8fa:	8bbb      	ldrh	r3, [r7, #28]
 800c8fc:	3314      	adds	r3, #20
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d333      	bcc.n	800c96a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c902:	8bfa      	ldrh	r2, [r7, #30]
 800c904:	8bbb      	ldrh	r3, [r7, #28]
 800c906:	4413      	add	r3, r2
 800c908:	b29b      	uxth	r3, r3
 800c90a:	3308      	adds	r3, #8
 800c90c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c90e:	8a7b      	ldrh	r3, [r7, #18]
 800c910:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c914:	d106      	bne.n	800c924 <mem_malloc+0xb0>
 800c916:	4b4c      	ldr	r3, [pc, #304]	; (800ca48 <mem_malloc+0x1d4>)
 800c918:	f240 3287 	movw	r2, #903	; 0x387
 800c91c:	494b      	ldr	r1, [pc, #300]	; (800ca4c <mem_malloc+0x1d8>)
 800c91e:	484c      	ldr	r0, [pc, #304]	; (800ca50 <mem_malloc+0x1dc>)
 800c920:	f00a ff8a 	bl	8017838 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c924:	8a7b      	ldrh	r3, [r7, #18]
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff fd00 	bl	800c32c <ptr_to_mem>
 800c92c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	881a      	ldrh	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	8bfa      	ldrh	r2, [r7, #30]
 800c940:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	8a7a      	ldrh	r2, [r7, #18]
 800c946:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2201      	movs	r2, #1
 800c94c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	881b      	ldrh	r3, [r3, #0]
 800c952:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c956:	d00b      	beq.n	800c970 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff fce5 	bl	800c32c <ptr_to_mem>
 800c962:	4602      	mov	r2, r0
 800c964:	8a7b      	ldrh	r3, [r7, #18]
 800c966:	8053      	strh	r3, [r2, #2]
 800c968:	e002      	b.n	800c970 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2201      	movs	r2, #1
 800c96e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c970:	4b34      	ldr	r3, [pc, #208]	; (800ca44 <mem_malloc+0x1d0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	429a      	cmp	r2, r3
 800c978:	d127      	bne.n	800c9ca <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c97a:	4b32      	ldr	r3, [pc, #200]	; (800ca44 <mem_malloc+0x1d0>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c980:	e005      	b.n	800c98e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fcd0 	bl	800c32c <ptr_to_mem>
 800c98c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	791b      	ldrb	r3, [r3, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d004      	beq.n	800c9a0 <mem_malloc+0x12c>
 800c996:	4b2f      	ldr	r3, [pc, #188]	; (800ca54 <mem_malloc+0x1e0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69ba      	ldr	r2, [r7, #24]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d1f0      	bne.n	800c982 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c9a0:	4a28      	ldr	r2, [pc, #160]	; (800ca44 <mem_malloc+0x1d0>)
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c9a6:	4b27      	ldr	r3, [pc, #156]	; (800ca44 <mem_malloc+0x1d0>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ca54 <mem_malloc+0x1e0>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d00b      	beq.n	800c9ca <mem_malloc+0x156>
 800c9b2:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <mem_malloc+0x1d0>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	791b      	ldrb	r3, [r3, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d006      	beq.n	800c9ca <mem_malloc+0x156>
 800c9bc:	4b22      	ldr	r3, [pc, #136]	; (800ca48 <mem_malloc+0x1d4>)
 800c9be:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c9c2:	4925      	ldr	r1, [pc, #148]	; (800ca58 <mem_malloc+0x1e4>)
 800c9c4:	4822      	ldr	r0, [pc, #136]	; (800ca50 <mem_malloc+0x1dc>)
 800c9c6:	f00a ff37 	bl	8017838 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c9ca:	8bba      	ldrh	r2, [r7, #28]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	4a20      	ldr	r2, [pc, #128]	; (800ca54 <mem_malloc+0x1e0>)
 800c9d4:	6812      	ldr	r2, [r2, #0]
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d906      	bls.n	800c9e8 <mem_malloc+0x174>
 800c9da:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <mem_malloc+0x1d4>)
 800c9dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c9e0:	491e      	ldr	r1, [pc, #120]	; (800ca5c <mem_malloc+0x1e8>)
 800c9e2:	481b      	ldr	r0, [pc, #108]	; (800ca50 <mem_malloc+0x1dc>)
 800c9e4:	f00a ff28 	bl	8017838 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f003 0303 	and.w	r3, r3, #3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d006      	beq.n	800ca00 <mem_malloc+0x18c>
 800c9f2:	4b15      	ldr	r3, [pc, #84]	; (800ca48 <mem_malloc+0x1d4>)
 800c9f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c9f8:	4919      	ldr	r1, [pc, #100]	; (800ca60 <mem_malloc+0x1ec>)
 800c9fa:	4815      	ldr	r0, [pc, #84]	; (800ca50 <mem_malloc+0x1dc>)
 800c9fc:	f00a ff1c 	bl	8017838 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f003 0303 	and.w	r3, r3, #3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d006      	beq.n	800ca18 <mem_malloc+0x1a4>
 800ca0a:	4b0f      	ldr	r3, [pc, #60]	; (800ca48 <mem_malloc+0x1d4>)
 800ca0c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ca10:	4914      	ldr	r1, [pc, #80]	; (800ca64 <mem_malloc+0x1f0>)
 800ca12:	480f      	ldr	r0, [pc, #60]	; (800ca50 <mem_malloc+0x1dc>)
 800ca14:	f00a ff10 	bl	8017838 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	3308      	adds	r3, #8
 800ca1c:	e00e      	b.n	800ca3c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ca1e:	8bfb      	ldrh	r3, [r7, #30]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fc83 	bl	800c32c <ptr_to_mem>
 800ca26:	4603      	mov	r3, r0
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca2c:	8bfa      	ldrh	r2, [r7, #30]
 800ca2e:	8bbb      	ldrh	r3, [r7, #28]
 800ca30:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ca34:	429a      	cmp	r2, r3
 800ca36:	f4ff af44 	bcc.w	800c8c2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20005f00 	.word	0x20005f00
 800ca48:	08018a30 	.word	0x08018a30
 800ca4c:	08018bd8 	.word	0x08018bd8
 800ca50:	08018a78 	.word	0x08018a78
 800ca54:	20005efc 	.word	0x20005efc
 800ca58:	08018bec 	.word	0x08018bec
 800ca5c:	08018c08 	.word	0x08018c08
 800ca60:	08018c38 	.word	0x08018c38
 800ca64:	08018c68 	.word	0x08018c68

0800ca68 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	3303      	adds	r3, #3
 800ca7e:	f023 0303 	bic.w	r3, r3, #3
 800ca82:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca84:	2300      	movs	r3, #0
 800ca86:	60fb      	str	r3, [r7, #12]
 800ca88:	e011      	b.n	800caae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	4413      	add	r3, r2
 800caa6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3301      	adds	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	461a      	mov	r2, r3
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4293      	cmp	r3, r2
 800cab8:	dbe7      	blt.n	800ca8a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cace:	2300      	movs	r3, #0
 800cad0:	80fb      	strh	r3, [r7, #6]
 800cad2:	e009      	b.n	800cae8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cad4:	88fb      	ldrh	r3, [r7, #6]
 800cad6:	4a08      	ldr	r2, [pc, #32]	; (800caf8 <memp_init+0x30>)
 800cad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff ffc3 	bl	800ca68 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cae2:	88fb      	ldrh	r3, [r7, #6]
 800cae4:	3301      	adds	r3, #1
 800cae6:	80fb      	strh	r3, [r7, #6]
 800cae8:	88fb      	ldrh	r3, [r7, #6]
 800caea:	2b08      	cmp	r3, #8
 800caec:	d9f2      	bls.n	800cad4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	0801b628 	.word	0x0801b628

0800cafc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d012      	beq.n	800cb38 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	6812      	ldr	r2, [r2, #0]
 800cb1a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d006      	beq.n	800cb34 <do_memp_malloc_pool+0x38>
 800cb26:	4b07      	ldr	r3, [pc, #28]	; (800cb44 <do_memp_malloc_pool+0x48>)
 800cb28:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cb2c:	4906      	ldr	r1, [pc, #24]	; (800cb48 <do_memp_malloc_pool+0x4c>)
 800cb2e:	4807      	ldr	r0, [pc, #28]	; (800cb4c <do_memp_malloc_pool+0x50>)
 800cb30:	f00a fe82 	bl	8017838 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	e000      	b.n	800cb3a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	08018c8c 	.word	0x08018c8c
 800cb48:	08018cbc 	.word	0x08018cbc
 800cb4c:	08018ce0 	.word	0x08018ce0

0800cb50 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d106      	bne.n	800cb6c <memp_malloc_pool+0x1c>
 800cb5e:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <memp_malloc_pool+0x38>)
 800cb60:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cb64:	4909      	ldr	r1, [pc, #36]	; (800cb8c <memp_malloc_pool+0x3c>)
 800cb66:	480a      	ldr	r0, [pc, #40]	; (800cb90 <memp_malloc_pool+0x40>)
 800cb68:	f00a fe66 	bl	8017838 <iprintf>
  if (desc == NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <memp_malloc_pool+0x26>
    return NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e003      	b.n	800cb7e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff ffc0 	bl	800cafc <do_memp_malloc_pool>
 800cb7c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08018c8c 	.word	0x08018c8c
 800cb8c:	08018d08 	.word	0x08018d08
 800cb90:	08018ce0 	.word	0x08018ce0

0800cb94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d908      	bls.n	800cbb6 <memp_malloc+0x22>
 800cba4:	4b0a      	ldr	r3, [pc, #40]	; (800cbd0 <memp_malloc+0x3c>)
 800cba6:	f240 1257 	movw	r2, #343	; 0x157
 800cbaa:	490a      	ldr	r1, [pc, #40]	; (800cbd4 <memp_malloc+0x40>)
 800cbac:	480a      	ldr	r0, [pc, #40]	; (800cbd8 <memp_malloc+0x44>)
 800cbae:	f00a fe43 	bl	8017838 <iprintf>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e008      	b.n	800cbc8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	4a08      	ldr	r2, [pc, #32]	; (800cbdc <memp_malloc+0x48>)
 800cbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff ff9c 	bl	800cafc <do_memp_malloc_pool>
 800cbc4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	08018c8c 	.word	0x08018c8c
 800cbd4:	08018d1c 	.word	0x08018d1c
 800cbd8:	08018ce0 	.word	0x08018ce0
 800cbdc:	0801b628 	.word	0x0801b628

0800cbe0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d006      	beq.n	800cc02 <do_memp_free_pool+0x22>
 800cbf4:	4b0a      	ldr	r3, [pc, #40]	; (800cc20 <do_memp_free_pool+0x40>)
 800cbf6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cbfa:	490a      	ldr	r1, [pc, #40]	; (800cc24 <do_memp_free_pool+0x44>)
 800cbfc:	480a      	ldr	r0, [pc, #40]	; (800cc28 <do_memp_free_pool+0x48>)
 800cbfe:	f00a fe1b 	bl	8017838 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cc18:	bf00      	nop
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	08018c8c 	.word	0x08018c8c
 800cc24:	08018d3c 	.word	0x08018d3c
 800cc28:	08018ce0 	.word	0x08018ce0

0800cc2c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d106      	bne.n	800cc4a <memp_free_pool+0x1e>
 800cc3c:	4b0a      	ldr	r3, [pc, #40]	; (800cc68 <memp_free_pool+0x3c>)
 800cc3e:	f240 1295 	movw	r2, #405	; 0x195
 800cc42:	490a      	ldr	r1, [pc, #40]	; (800cc6c <memp_free_pool+0x40>)
 800cc44:	480a      	ldr	r0, [pc, #40]	; (800cc70 <memp_free_pool+0x44>)
 800cc46:	f00a fdf7 	bl	8017838 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d007      	beq.n	800cc60 <memp_free_pool+0x34>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff ffc1 	bl	800cbe0 <do_memp_free_pool>
 800cc5e:	e000      	b.n	800cc62 <memp_free_pool+0x36>
    return;
 800cc60:	bf00      	nop
}
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	08018c8c 	.word	0x08018c8c
 800cc6c:	08018d08 	.word	0x08018d08
 800cc70:	08018ce0 	.word	0x08018ce0

0800cc74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b08      	cmp	r3, #8
 800cc84:	d907      	bls.n	800cc96 <memp_free+0x22>
 800cc86:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <memp_free+0x44>)
 800cc88:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cc8c:	490b      	ldr	r1, [pc, #44]	; (800ccbc <memp_free+0x48>)
 800cc8e:	480c      	ldr	r0, [pc, #48]	; (800ccc0 <memp_free+0x4c>)
 800cc90:	f00a fdd2 	bl	8017838 <iprintf>
 800cc94:	e00c      	b.n	800ccb0 <memp_free+0x3c>

  if (mem == NULL) {
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d008      	beq.n	800ccae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	4a09      	ldr	r2, [pc, #36]	; (800ccc4 <memp_free+0x50>)
 800cca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff ff9a 	bl	800cbe0 <do_memp_free_pool>
 800ccac:	e000      	b.n	800ccb0 <memp_free+0x3c>
    return;
 800ccae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	08018c8c 	.word	0x08018c8c
 800ccbc:	08018d5c 	.word	0x08018d5c
 800ccc0:	08018ce0 	.word	0x08018ce0
 800ccc4:	0801b628 	.word	0x0801b628

0800ccc8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cccc:	bf00      	nop
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
 800cce4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d108      	bne.n	800ccfe <netif_add+0x26>
 800ccec:	4b57      	ldr	r3, [pc, #348]	; (800ce4c <netif_add+0x174>)
 800ccee:	f240 1227 	movw	r2, #295	; 0x127
 800ccf2:	4957      	ldr	r1, [pc, #348]	; (800ce50 <netif_add+0x178>)
 800ccf4:	4857      	ldr	r0, [pc, #348]	; (800ce54 <netif_add+0x17c>)
 800ccf6:	f00a fd9f 	bl	8017838 <iprintf>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e0a2      	b.n	800ce44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d108      	bne.n	800cd16 <netif_add+0x3e>
 800cd04:	4b51      	ldr	r3, [pc, #324]	; (800ce4c <netif_add+0x174>)
 800cd06:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cd0a:	4953      	ldr	r1, [pc, #332]	; (800ce58 <netif_add+0x180>)
 800cd0c:	4851      	ldr	r0, [pc, #324]	; (800ce54 <netif_add+0x17c>)
 800cd0e:	f00a fd93 	bl	8017838 <iprintf>
 800cd12:	2300      	movs	r3, #0
 800cd14:	e096      	b.n	800ce44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cd1c:	4b4f      	ldr	r3, [pc, #316]	; (800ce5c <netif_add+0x184>)
 800cd1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d101      	bne.n	800cd2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cd26:	4b4d      	ldr	r3, [pc, #308]	; (800ce5c <netif_add+0x184>)
 800cd28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cd30:	4b4a      	ldr	r3, [pc, #296]	; (800ce5c <netif_add+0x184>)
 800cd32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	4a45      	ldr	r2, [pc, #276]	; (800ce60 <netif_add+0x188>)
 800cd4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6a3a      	ldr	r2, [r7, #32]
 800cd64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cd66:	4b3f      	ldr	r3, [pc, #252]	; (800ce64 <netif_add+0x18c>)
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 f913 	bl	800cfa8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	4798      	blx	r3
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <netif_add+0xba>
    return NULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e058      	b.n	800ce44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd98:	2bff      	cmp	r3, #255	; 0xff
 800cd9a:	d103      	bne.n	800cda4 <netif_add+0xcc>
        netif->num = 0;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cda8:	4b2f      	ldr	r3, [pc, #188]	; (800ce68 <netif_add+0x190>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e02b      	b.n	800ce08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d106      	bne.n	800cdc6 <netif_add+0xee>
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <netif_add+0x174>)
 800cdba:	f240 128b 	movw	r2, #395	; 0x18b
 800cdbe:	492b      	ldr	r1, [pc, #172]	; (800ce6c <netif_add+0x194>)
 800cdc0:	4824      	ldr	r0, [pc, #144]	; (800ce54 <netif_add+0x17c>)
 800cdc2:	f00a fd39 	bl	8017838 <iprintf>
        num_netifs++;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	2bff      	cmp	r3, #255	; 0xff
 800cdd0:	dd06      	ble.n	800cde0 <netif_add+0x108>
 800cdd2:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <netif_add+0x174>)
 800cdd4:	f240 128d 	movw	r2, #397	; 0x18d
 800cdd8:	4925      	ldr	r1, [pc, #148]	; (800ce70 <netif_add+0x198>)
 800cdda:	481e      	ldr	r0, [pc, #120]	; (800ce54 <netif_add+0x17c>)
 800cddc:	f00a fd2c 	bl	8017838 <iprintf>
        if (netif2->num == netif->num) {
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d108      	bne.n	800ce02 <netif_add+0x12a>
          netif->num++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ce00:	e005      	b.n	800ce0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	617b      	str	r3, [r7, #20]
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1d0      	bne.n	800cdb0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1be      	bne.n	800cd92 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce1a:	2bfe      	cmp	r3, #254	; 0xfe
 800ce1c:	d103      	bne.n	800ce26 <netif_add+0x14e>
    netif_num = 0;
 800ce1e:	4b11      	ldr	r3, [pc, #68]	; (800ce64 <netif_add+0x18c>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	701a      	strb	r2, [r3, #0]
 800ce24:	e006      	b.n	800ce34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <netif_add+0x18c>)
 800ce32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ce34:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <netif_add+0x190>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ce3c:	4a0a      	ldr	r2, [pc, #40]	; (800ce68 <netif_add+0x190>)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ce42:	68fb      	ldr	r3, [r7, #12]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	08018d78 	.word	0x08018d78
 800ce50:	08018e0c 	.word	0x08018e0c
 800ce54:	08018dc8 	.word	0x08018dc8
 800ce58:	08018e28 	.word	0x08018e28
 800ce5c:	0801b68c 	.word	0x0801b68c
 800ce60:	0800d283 	.word	0x0800d283
 800ce64:	20008df8 	.word	0x20008df8
 800ce68:	20008df0 	.word	0x20008df0
 800ce6c:	08018e4c 	.word	0x08018e4c
 800ce70:	08018e60 	.word	0x08018e60

0800ce74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f002 fbe5 	bl	800f650 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f007 f883 	bl	8013f94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d106      	bne.n	800ceb8 <netif_do_set_ipaddr+0x20>
 800ceaa:	4b1d      	ldr	r3, [pc, #116]	; (800cf20 <netif_do_set_ipaddr+0x88>)
 800ceac:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ceb0:	491c      	ldr	r1, [pc, #112]	; (800cf24 <netif_do_set_ipaddr+0x8c>)
 800ceb2:	481d      	ldr	r0, [pc, #116]	; (800cf28 <netif_do_set_ipaddr+0x90>)
 800ceb4:	f00a fcc0 	bl	8017838 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d106      	bne.n	800cecc <netif_do_set_ipaddr+0x34>
 800cebe:	4b18      	ldr	r3, [pc, #96]	; (800cf20 <netif_do_set_ipaddr+0x88>)
 800cec0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cec4:	4917      	ldr	r1, [pc, #92]	; (800cf24 <netif_do_set_ipaddr+0x8c>)
 800cec6:	4818      	ldr	r0, [pc, #96]	; (800cf28 <netif_do_set_ipaddr+0x90>)
 800cec8:	f00a fcb6 	bl	8017838 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	3304      	adds	r3, #4
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d01c      	beq.n	800cf14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3304      	adds	r3, #4
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ceea:	f107 0314 	add.w	r3, r7, #20
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7ff ffbf 	bl	800ce74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <netif_do_set_ipaddr+0x6a>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	e000      	b.n	800cf04 <netif_do_set_ipaddr+0x6c>
 800cf02:	2300      	movs	r3, #0
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cf08:	2101      	movs	r1, #1
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 f8d2 	bl	800d0b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cf10:	2301      	movs	r3, #1
 800cf12:	e000      	b.n	800cf16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	08018d78 	.word	0x08018d78
 800cf24:	08018e90 	.word	0x08018e90
 800cf28:	08018dc8 	.word	0x08018dc8

0800cf2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d00a      	beq.n	800cf5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <netif_do_set_netmask+0x26>
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	e000      	b.n	800cf54 <netif_do_set_netmask+0x28>
 800cf52:	2300      	movs	r3, #0
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e000      	b.n	800cf5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d00a      	beq.n	800cf9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <netif_do_set_gw+0x26>
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	e000      	b.n	800cf92 <netif_do_set_gw+0x28>
 800cf90:	2300      	movs	r3, #0
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf96:	2301      	movs	r3, #1
 800cf98:	e000      	b.n	800cf9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cfc4:	4b1c      	ldr	r3, [pc, #112]	; (800d038 <netif_set_addr+0x90>)
 800cfc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cfce:	4b1a      	ldr	r3, [pc, #104]	; (800d038 <netif_set_addr+0x90>)
 800cfd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cfd8:	4b17      	ldr	r3, [pc, #92]	; (800d038 <netif_set_addr+0x90>)
 800cfda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <netif_set_addr+0x42>
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <netif_set_addr+0x46>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <netif_set_addr+0x48>
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d006      	beq.n	800d006 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cff8:	f107 0310 	add.w	r3, r7, #16
 800cffc:	461a      	mov	r2, r3
 800cffe:	68b9      	ldr	r1, [r7, #8]
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f7ff ff49 	bl	800ce98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f7ff ff8e 	bl	800cf2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d010:	69ba      	ldr	r2, [r7, #24]
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff ffa8 	bl	800cf6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d020:	f107 0310 	add.w	r3, r7, #16
 800d024:	461a      	mov	r2, r3
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f7ff ff35 	bl	800ce98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d02e:	bf00      	nop
 800d030:	3720      	adds	r7, #32
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	0801b68c 	.word	0x0801b68c

0800d03c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d044:	4a04      	ldr	r2, [pc, #16]	; (800d058 <netif_set_default+0x1c>)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	20008df4 	.word	0x20008df4

0800d05c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d107      	bne.n	800d07a <netif_set_up+0x1e>
 800d06a:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <netif_set_up+0x4c>)
 800d06c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d070:	490e      	ldr	r1, [pc, #56]	; (800d0ac <netif_set_up+0x50>)
 800d072:	480f      	ldr	r0, [pc, #60]	; (800d0b0 <netif_set_up+0x54>)
 800d074:	f00a fbe0 	bl	8017838 <iprintf>
 800d078:	e013      	b.n	800d0a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d080:	f003 0301 	and.w	r3, r3, #1
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10c      	bne.n	800d0a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d08e:	f043 0301 	orr.w	r3, r3, #1
 800d092:	b2da      	uxtb	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d09a:	2103      	movs	r1, #3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f809 	bl	800d0b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	08018d78 	.word	0x08018d78
 800d0ac:	08018f00 	.word	0x08018f00
 800d0b0:	08018dc8 	.word	0x08018dc8

0800d0b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <netif_issue_reports+0x20>
 800d0c6:	4b18      	ldr	r3, [pc, #96]	; (800d128 <netif_issue_reports+0x74>)
 800d0c8:	f240 326d 	movw	r2, #877	; 0x36d
 800d0cc:	4917      	ldr	r1, [pc, #92]	; (800d12c <netif_issue_reports+0x78>)
 800d0ce:	4818      	ldr	r0, [pc, #96]	; (800d130 <netif_issue_reports+0x7c>)
 800d0d0:	f00a fbb2 	bl	8017838 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0da:	f003 0304 	and.w	r3, r3, #4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d01e      	beq.n	800d120 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d017      	beq.n	800d120 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d013      	beq.n	800d122 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00e      	beq.n	800d122 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d10a:	f003 0308 	and.w	r3, r3, #8
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d007      	beq.n	800d122 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3304      	adds	r3, #4
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f007 fea5 	bl	8014e68 <etharp_request>
 800d11e:	e000      	b.n	800d122 <netif_issue_reports+0x6e>
    return;
 800d120:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	08018d78 	.word	0x08018d78
 800d12c:	08018f1c 	.word	0x08018f1c
 800d130:	08018dc8 	.word	0x08018dc8

0800d134 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d107      	bne.n	800d152 <netif_set_down+0x1e>
 800d142:	4b12      	ldr	r3, [pc, #72]	; (800d18c <netif_set_down+0x58>)
 800d144:	f240 329b 	movw	r2, #923	; 0x39b
 800d148:	4911      	ldr	r1, [pc, #68]	; (800d190 <netif_set_down+0x5c>)
 800d14a:	4812      	ldr	r0, [pc, #72]	; (800d194 <netif_set_down+0x60>)
 800d14c:	f00a fb74 	bl	8017838 <iprintf>
 800d150:	e019      	b.n	800d186 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d012      	beq.n	800d186 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d166:	f023 0301 	bic.w	r3, r3, #1
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f007 fa2f 	bl	80145e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	08018d78 	.word	0x08018d78
 800d190:	08018f40 	.word	0x08018f40
 800d194:	08018dc8 	.word	0x08018dc8

0800d198 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d107      	bne.n	800d1b6 <netif_set_link_up+0x1e>
 800d1a6:	4b13      	ldr	r3, [pc, #76]	; (800d1f4 <netif_set_link_up+0x5c>)
 800d1a8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d1ac:	4912      	ldr	r1, [pc, #72]	; (800d1f8 <netif_set_link_up+0x60>)
 800d1ae:	4813      	ldr	r0, [pc, #76]	; (800d1fc <netif_set_link_up+0x64>)
 800d1b0:	f00a fb42 	bl	8017838 <iprintf>
 800d1b4:	e01b      	b.n	800d1ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d114      	bne.n	800d1ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1ca:	f043 0304 	orr.w	r3, r3, #4
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d1d6:	2103      	movs	r1, #3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ff6b 	bl	800d0b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <netif_set_link_up+0x56>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	08018d78 	.word	0x08018d78
 800d1f8:	08018f60 	.word	0x08018f60
 800d1fc:	08018dc8 	.word	0x08018dc8

0800d200 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d107      	bne.n	800d21e <netif_set_link_down+0x1e>
 800d20e:	4b11      	ldr	r3, [pc, #68]	; (800d254 <netif_set_link_down+0x54>)
 800d210:	f240 4206 	movw	r2, #1030	; 0x406
 800d214:	4910      	ldr	r1, [pc, #64]	; (800d258 <netif_set_link_down+0x58>)
 800d216:	4811      	ldr	r0, [pc, #68]	; (800d25c <netif_set_link_down+0x5c>)
 800d218:	f00a fb0e 	bl	8017838 <iprintf>
 800d21c:	e017      	b.n	800d24e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d224:	f003 0304 	and.w	r3, r3, #4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d010      	beq.n	800d24e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d232:	f023 0304 	bic.w	r3, r3, #4
 800d236:	b2da      	uxtb	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <netif_set_link_down+0x4e>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	08018d78 	.word	0x08018d78
 800d258:	08018f84 	.word	0x08018f84
 800d25c:	08018dc8 	.word	0x08018dc8

0800d260 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	61da      	str	r2, [r3, #28]
  }
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d282:	b480      	push	{r7}
 800d284:	b085      	sub	sp, #20
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	60b9      	str	r1, [r7, #8]
 800d28c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d28e:	f06f 030b 	mvn.w	r3, #11
}
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
	...

0800d2a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d013      	beq.n	800d2d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d2b0:	4b0d      	ldr	r3, [pc, #52]	; (800d2e8 <netif_get_by_index+0x48>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	60fb      	str	r3, [r7, #12]
 800d2b6:	e00c      	b.n	800d2d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2be:	3301      	adds	r3, #1
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	79fa      	ldrb	r2, [r7, #7]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d101      	bne.n	800d2cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	e006      	b.n	800d2da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1ef      	bne.n	800d2b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	20008df0 	.word	0x20008df0

0800d2ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	; (800d324 <pbuf_free_ooseq+0x38>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d2f8:	4b0b      	ldr	r3, [pc, #44]	; (800d328 <pbuf_free_ooseq+0x3c>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	607b      	str	r3, [r7, #4]
 800d2fe:	e00a      	b.n	800d316 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f002 f9df 	bl	800f6cc <tcp_free_ooseq>
      return;
 800d30e:	e005      	b.n	800d31c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	607b      	str	r3, [r7, #4]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1f1      	bne.n	800d300 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20008df9 	.word	0x20008df9
 800d328:	20008e08 	.word	0x20008e08

0800d32c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d32c:	b480      	push	{r7}
 800d32e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d330:	4b03      	ldr	r3, [pc, #12]	; (800d340 <pbuf_pool_is_empty+0x14>)
 800d332:	2201      	movs	r2, #1
 800d334:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d336:	bf00      	nop
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	20008df9 	.word	0x20008df9

0800d344 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	4611      	mov	r1, r2
 800d350:	461a      	mov	r2, r3
 800d352:	460b      	mov	r3, r1
 800d354:	80fb      	strh	r3, [r7, #6]
 800d356:	4613      	mov	r3, r2
 800d358:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	88fa      	ldrh	r2, [r7, #6]
 800d36a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	88ba      	ldrh	r2, [r7, #4]
 800d370:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d372:	8b3b      	ldrh	r3, [r7, #24]
 800d374:	b2da      	uxtb	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	7f3a      	ldrb	r2, [r7, #28]
 800d37e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	73da      	strb	r2, [r3, #15]
}
 800d38c:	bf00      	nop
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08c      	sub	sp, #48	; 0x30
 800d39c:	af02      	add	r7, sp, #8
 800d39e:	4603      	mov	r3, r0
 800d3a0:	71fb      	strb	r3, [r7, #7]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	80bb      	strh	r3, [r7, #4]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d3aa:	79fb      	ldrb	r3, [r7, #7]
 800d3ac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d3ae:	887b      	ldrh	r3, [r7, #2]
 800d3b0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d3b4:	d07f      	beq.n	800d4b6 <pbuf_alloc+0x11e>
 800d3b6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d3ba:	f300 80c8 	bgt.w	800d54e <pbuf_alloc+0x1b6>
 800d3be:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d3c2:	d010      	beq.n	800d3e6 <pbuf_alloc+0x4e>
 800d3c4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d3c8:	f300 80c1 	bgt.w	800d54e <pbuf_alloc+0x1b6>
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d002      	beq.n	800d3d6 <pbuf_alloc+0x3e>
 800d3d0:	2b41      	cmp	r3, #65	; 0x41
 800d3d2:	f040 80bc 	bne.w	800d54e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d3d6:	887a      	ldrh	r2, [r7, #2]
 800d3d8:	88bb      	ldrh	r3, [r7, #4]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	2000      	movs	r0, #0
 800d3de:	f000 f8d1 	bl	800d584 <pbuf_alloc_reference>
 800d3e2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d3e4:	e0bd      	b.n	800d562 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d3ee:	88bb      	ldrh	r3, [r7, #4]
 800d3f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d3f2:	2008      	movs	r0, #8
 800d3f4:	f7ff fbce 	bl	800cb94 <memp_malloc>
 800d3f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d109      	bne.n	800d414 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d400:	f7ff ff94 	bl	800d32c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d40a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d40c:	f000 faa8 	bl	800d960 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d410:	2300      	movs	r3, #0
 800d412:	e0a7      	b.n	800d564 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d416:	3303      	adds	r3, #3
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f023 0303 	bic.w	r3, r3, #3
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d424:	b29b      	uxth	r3, r3
 800d426:	8b7a      	ldrh	r2, [r7, #26]
 800d428:	4293      	cmp	r3, r2
 800d42a:	bf28      	it	cs
 800d42c:	4613      	movcs	r3, r2
 800d42e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d432:	3310      	adds	r3, #16
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	4413      	add	r3, r2
 800d438:	3303      	adds	r3, #3
 800d43a:	f023 0303 	bic.w	r3, r3, #3
 800d43e:	4618      	mov	r0, r3
 800d440:	89f9      	ldrh	r1, [r7, #14]
 800d442:	8b7a      	ldrh	r2, [r7, #26]
 800d444:	2300      	movs	r3, #0
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	887b      	ldrh	r3, [r7, #2]
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	460b      	mov	r3, r1
 800d44e:	4601      	mov	r1, r0
 800d450:	6938      	ldr	r0, [r7, #16]
 800d452:	f7ff ff77 	bl	800d344 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f003 0303 	and.w	r3, r3, #3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d006      	beq.n	800d470 <pbuf_alloc+0xd8>
 800d462:	4b42      	ldr	r3, [pc, #264]	; (800d56c <pbuf_alloc+0x1d4>)
 800d464:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d468:	4941      	ldr	r1, [pc, #260]	; (800d570 <pbuf_alloc+0x1d8>)
 800d46a:	4842      	ldr	r0, [pc, #264]	; (800d574 <pbuf_alloc+0x1dc>)
 800d46c:	f00a f9e4 	bl	8017838 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d472:	3303      	adds	r3, #3
 800d474:	f023 0303 	bic.w	r3, r3, #3
 800d478:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d47c:	d106      	bne.n	800d48c <pbuf_alloc+0xf4>
 800d47e:	4b3b      	ldr	r3, [pc, #236]	; (800d56c <pbuf_alloc+0x1d4>)
 800d480:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d484:	493c      	ldr	r1, [pc, #240]	; (800d578 <pbuf_alloc+0x1e0>)
 800d486:	483b      	ldr	r0, [pc, #236]	; (800d574 <pbuf_alloc+0x1dc>)
 800d488:	f00a f9d6 	bl	8017838 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d102      	bne.n	800d498 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
 800d496:	e002      	b.n	800d49e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d4a2:	8b7a      	ldrh	r2, [r7, #26]
 800d4a4:	89fb      	ldrh	r3, [r7, #14]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d4ae:	8b7b      	ldrh	r3, [r7, #26]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d19e      	bne.n	800d3f2 <pbuf_alloc+0x5a>
      break;
 800d4b4:	e055      	b.n	800d562 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d4b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4b8:	3303      	adds	r3, #3
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	f023 0303 	bic.w	r3, r3, #3
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	88bb      	ldrh	r3, [r7, #4]
 800d4c4:	3303      	adds	r3, #3
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	f023 0303 	bic.w	r3, r3, #3
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	4413      	add	r3, r2
 800d4d0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d4d2:	8b3b      	ldrh	r3, [r7, #24]
 800d4d4:	3310      	adds	r3, #16
 800d4d6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d4d8:	8b3a      	ldrh	r2, [r7, #24]
 800d4da:	88bb      	ldrh	r3, [r7, #4]
 800d4dc:	3303      	adds	r3, #3
 800d4de:	f023 0303 	bic.w	r3, r3, #3
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d306      	bcc.n	800d4f4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d4e6:	8afa      	ldrh	r2, [r7, #22]
 800d4e8:	88bb      	ldrh	r3, [r7, #4]
 800d4ea:	3303      	adds	r3, #3
 800d4ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d201      	bcs.n	800d4f8 <pbuf_alloc+0x160>
        return NULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e035      	b.n	800d564 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d4f8:	8afb      	ldrh	r3, [r7, #22]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff f9ba 	bl	800c874 <mem_malloc>
 800d500:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <pbuf_alloc+0x174>
        return NULL;
 800d508:	2300      	movs	r3, #0
 800d50a:	e02b      	b.n	800d564 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d50c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d50e:	3310      	adds	r3, #16
 800d510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d512:	4413      	add	r3, r2
 800d514:	3303      	adds	r3, #3
 800d516:	f023 0303 	bic.w	r3, r3, #3
 800d51a:	4618      	mov	r0, r3
 800d51c:	88b9      	ldrh	r1, [r7, #4]
 800d51e:	88ba      	ldrh	r2, [r7, #4]
 800d520:	2300      	movs	r3, #0
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	887b      	ldrh	r3, [r7, #2]
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	460b      	mov	r3, r1
 800d52a:	4601      	mov	r1, r0
 800d52c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d52e:	f7ff ff09 	bl	800d344 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f003 0303 	and.w	r3, r3, #3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d010      	beq.n	800d560 <pbuf_alloc+0x1c8>
 800d53e:	4b0b      	ldr	r3, [pc, #44]	; (800d56c <pbuf_alloc+0x1d4>)
 800d540:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d544:	490d      	ldr	r1, [pc, #52]	; (800d57c <pbuf_alloc+0x1e4>)
 800d546:	480b      	ldr	r0, [pc, #44]	; (800d574 <pbuf_alloc+0x1dc>)
 800d548:	f00a f976 	bl	8017838 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d54c:	e008      	b.n	800d560 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d54e:	4b07      	ldr	r3, [pc, #28]	; (800d56c <pbuf_alloc+0x1d4>)
 800d550:	f240 1227 	movw	r2, #295	; 0x127
 800d554:	490a      	ldr	r1, [pc, #40]	; (800d580 <pbuf_alloc+0x1e8>)
 800d556:	4807      	ldr	r0, [pc, #28]	; (800d574 <pbuf_alloc+0x1dc>)
 800d558:	f00a f96e 	bl	8017838 <iprintf>
      return NULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	e001      	b.n	800d564 <pbuf_alloc+0x1cc>
      break;
 800d560:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d564:	4618      	mov	r0, r3
 800d566:	3728      	adds	r7, #40	; 0x28
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	08018fa8 	.word	0x08018fa8
 800d570:	08018fd8 	.word	0x08018fd8
 800d574:	08019008 	.word	0x08019008
 800d578:	08019030 	.word	0x08019030
 800d57c:	08019064 	.word	0x08019064
 800d580:	08019090 	.word	0x08019090

0800d584 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af02      	add	r7, sp, #8
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	807b      	strh	r3, [r7, #2]
 800d590:	4613      	mov	r3, r2
 800d592:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d594:	883b      	ldrh	r3, [r7, #0]
 800d596:	2b41      	cmp	r3, #65	; 0x41
 800d598:	d009      	beq.n	800d5ae <pbuf_alloc_reference+0x2a>
 800d59a:	883b      	ldrh	r3, [r7, #0]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d006      	beq.n	800d5ae <pbuf_alloc_reference+0x2a>
 800d5a0:	4b0f      	ldr	r3, [pc, #60]	; (800d5e0 <pbuf_alloc_reference+0x5c>)
 800d5a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d5a6:	490f      	ldr	r1, [pc, #60]	; (800d5e4 <pbuf_alloc_reference+0x60>)
 800d5a8:	480f      	ldr	r0, [pc, #60]	; (800d5e8 <pbuf_alloc_reference+0x64>)
 800d5aa:	f00a f945 	bl	8017838 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d5ae:	2007      	movs	r0, #7
 800d5b0:	f7ff faf0 	bl	800cb94 <memp_malloc>
 800d5b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e00b      	b.n	800d5d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d5c0:	8879      	ldrh	r1, [r7, #2]
 800d5c2:	887a      	ldrh	r2, [r7, #2]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	883b      	ldrh	r3, [r7, #0]
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f7ff feb7 	bl	800d344 <pbuf_init_alloced_pbuf>
  return p;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	08018fa8 	.word	0x08018fa8
 800d5e4:	080190ac 	.word	0x080190ac
 800d5e8:	08019008 	.word	0x08019008

0800d5ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	81bb      	strh	r3, [r7, #12]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d600:	7bfb      	ldrb	r3, [r7, #15]
 800d602:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d604:	8a7b      	ldrh	r3, [r7, #18]
 800d606:	3303      	adds	r3, #3
 800d608:	f023 0203 	bic.w	r2, r3, #3
 800d60c:	89bb      	ldrh	r3, [r7, #12]
 800d60e:	441a      	add	r2, r3
 800d610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d612:	429a      	cmp	r2, r3
 800d614:	d901      	bls.n	800d61a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	e018      	b.n	800d64c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d620:	8a7b      	ldrh	r3, [r7, #18]
 800d622:	3303      	adds	r3, #3
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	6a3a      	ldr	r2, [r7, #32]
 800d62a:	4413      	add	r3, r2
 800d62c:	617b      	str	r3, [r7, #20]
 800d62e:	e001      	b.n	800d634 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	89b9      	ldrh	r1, [r7, #12]
 800d638:	89ba      	ldrh	r2, [r7, #12]
 800d63a:	2302      	movs	r3, #2
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	897b      	ldrh	r3, [r7, #10]
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	460b      	mov	r3, r1
 800d644:	6979      	ldr	r1, [r7, #20]
 800d646:	f7ff fe7d 	bl	800d344 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d64a:	687b      	ldr	r3, [r7, #4]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d106      	bne.n	800d674 <pbuf_realloc+0x20>
 800d666:	4b3a      	ldr	r3, [pc, #232]	; (800d750 <pbuf_realloc+0xfc>)
 800d668:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d66c:	4939      	ldr	r1, [pc, #228]	; (800d754 <pbuf_realloc+0x100>)
 800d66e:	483a      	ldr	r0, [pc, #232]	; (800d758 <pbuf_realloc+0x104>)
 800d670:	f00a f8e2 	bl	8017838 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	891b      	ldrh	r3, [r3, #8]
 800d678:	887a      	ldrh	r2, [r7, #2]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d263      	bcs.n	800d746 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	891a      	ldrh	r2, [r3, #8]
 800d682:	887b      	ldrh	r3, [r7, #2]
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d688:	887b      	ldrh	r3, [r7, #2]
 800d68a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d690:	e018      	b.n	800d6c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	895b      	ldrh	r3, [r3, #10]
 800d696:	897a      	ldrh	r2, [r7, #10]
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	891a      	ldrh	r2, [r3, #8]
 800d6a0:	893b      	ldrh	r3, [r7, #8]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <pbuf_realloc+0x70>
 800d6b6:	4b26      	ldr	r3, [pc, #152]	; (800d750 <pbuf_realloc+0xfc>)
 800d6b8:	f240 12af 	movw	r2, #431	; 0x1af
 800d6bc:	4927      	ldr	r1, [pc, #156]	; (800d75c <pbuf_realloc+0x108>)
 800d6be:	4826      	ldr	r0, [pc, #152]	; (800d758 <pbuf_realloc+0x104>)
 800d6c0:	f00a f8ba 	bl	8017838 <iprintf>
  while (rem_len > q->len) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	895b      	ldrh	r3, [r3, #10]
 800d6c8:	897a      	ldrh	r2, [r7, #10]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d8e1      	bhi.n	800d692 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	7b1b      	ldrb	r3, [r3, #12]
 800d6d2:	f003 030f 	and.w	r3, r3, #15
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d121      	bne.n	800d71e <pbuf_realloc+0xca>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	895b      	ldrh	r3, [r3, #10]
 800d6de:	897a      	ldrh	r2, [r7, #10]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d01c      	beq.n	800d71e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	7b5b      	ldrb	r3, [r3, #13]
 800d6e8:	f003 0302 	and.w	r3, r3, #2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d116      	bne.n	800d71e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	897b      	ldrh	r3, [r7, #10]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4619      	mov	r1, r3
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f7fe ffba 	bl	800c67c <mem_trim>
 800d708:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <pbuf_realloc+0xca>
 800d710:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <pbuf_realloc+0xfc>)
 800d712:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d716:	4912      	ldr	r1, [pc, #72]	; (800d760 <pbuf_realloc+0x10c>)
 800d718:	480f      	ldr	r0, [pc, #60]	; (800d758 <pbuf_realloc+0x104>)
 800d71a:	f00a f88d 	bl	8017838 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	897a      	ldrh	r2, [r7, #10]
 800d722:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	895a      	ldrh	r2, [r3, #10]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d004      	beq.n	800d73e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 f911 	bl	800d960 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	e000      	b.n	800d748 <pbuf_realloc+0xf4>
    return;
 800d746:	bf00      	nop

}
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	08018fa8 	.word	0x08018fa8
 800d754:	080190c0 	.word	0x080190c0
 800d758:	08019008 	.word	0x08019008
 800d75c:	080190d8 	.word	0x080190d8
 800d760:	080190f0 	.word	0x080190f0

0800d764 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	4613      	mov	r3, r2
 800d770:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d106      	bne.n	800d786 <pbuf_add_header_impl+0x22>
 800d778:	4b2b      	ldr	r3, [pc, #172]	; (800d828 <pbuf_add_header_impl+0xc4>)
 800d77a:	f240 12df 	movw	r2, #479	; 0x1df
 800d77e:	492b      	ldr	r1, [pc, #172]	; (800d82c <pbuf_add_header_impl+0xc8>)
 800d780:	482b      	ldr	r0, [pc, #172]	; (800d830 <pbuf_add_header_impl+0xcc>)
 800d782:	f00a f859 	bl	8017838 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d003      	beq.n	800d794 <pbuf_add_header_impl+0x30>
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d792:	d301      	bcc.n	800d798 <pbuf_add_header_impl+0x34>
    return 1;
 800d794:	2301      	movs	r3, #1
 800d796:	e043      	b.n	800d820 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d101      	bne.n	800d7a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	e03e      	b.n	800d820 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	891a      	ldrh	r2, [r3, #8]
 800d7aa:	8a7b      	ldrh	r3, [r7, #18]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	8a7a      	ldrh	r2, [r7, #18]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d901      	bls.n	800d7ba <pbuf_add_header_impl+0x56>
    return 1;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e032      	b.n	800d820 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	7b1b      	ldrb	r3, [r3, #12]
 800d7be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d7c0:	8a3b      	ldrh	r3, [r7, #16]
 800d7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00c      	beq.n	800d7e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	425b      	negs	r3, r3
 800d7d2:	4413      	add	r3, r2
 800d7d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	3310      	adds	r3, #16
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d20d      	bcs.n	800d7fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e01d      	b.n	800d820 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d7e4:	79fb      	ldrb	r3, [r7, #7]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d006      	beq.n	800d7f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	425b      	negs	r3, r3
 800d7f2:	4413      	add	r3, r2
 800d7f4:	617b      	str	r3, [r7, #20]
 800d7f6:	e001      	b.n	800d7fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e011      	b.n	800d820 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	697a      	ldr	r2, [r7, #20]
 800d800:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	895a      	ldrh	r2, [r3, #10]
 800d806:	8a7b      	ldrh	r3, [r7, #18]
 800d808:	4413      	add	r3, r2
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	891a      	ldrh	r2, [r3, #8]
 800d814:	8a7b      	ldrh	r3, [r7, #18]
 800d816:	4413      	add	r3, r2
 800d818:	b29a      	uxth	r2, r3
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	08018fa8 	.word	0x08018fa8
 800d82c:	0801910c 	.word	0x0801910c
 800d830:	08019008 	.word	0x08019008

0800d834 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d83e:	2200      	movs	r2, #0
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff ff8e 	bl	800d764 <pbuf_add_header_impl>
 800d848:	4603      	mov	r3, r0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
	...

0800d854 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <pbuf_remove_header+0x1e>
 800d864:	4b20      	ldr	r3, [pc, #128]	; (800d8e8 <pbuf_remove_header+0x94>)
 800d866:	f240 224b 	movw	r2, #587	; 0x24b
 800d86a:	4920      	ldr	r1, [pc, #128]	; (800d8ec <pbuf_remove_header+0x98>)
 800d86c:	4820      	ldr	r0, [pc, #128]	; (800d8f0 <pbuf_remove_header+0x9c>)
 800d86e:	f009 ffe3 	bl	8017838 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <pbuf_remove_header+0x2c>
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d87e:	d301      	bcc.n	800d884 <pbuf_remove_header+0x30>
    return 1;
 800d880:	2301      	movs	r3, #1
 800d882:	e02c      	b.n	800d8de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <pbuf_remove_header+0x3a>
    return 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	e027      	b.n	800d8de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	895b      	ldrh	r3, [r3, #10]
 800d896:	89fa      	ldrh	r2, [r7, #14]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d908      	bls.n	800d8ae <pbuf_remove_header+0x5a>
 800d89c:	4b12      	ldr	r3, [pc, #72]	; (800d8e8 <pbuf_remove_header+0x94>)
 800d89e:	f240 2255 	movw	r2, #597	; 0x255
 800d8a2:	4914      	ldr	r1, [pc, #80]	; (800d8f4 <pbuf_remove_header+0xa0>)
 800d8a4:	4812      	ldr	r0, [pc, #72]	; (800d8f0 <pbuf_remove_header+0x9c>)
 800d8a6:	f009 ffc7 	bl	8017838 <iprintf>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e017      	b.n	800d8de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	441a      	add	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	895a      	ldrh	r2, [r3, #10]
 800d8c4:	89fb      	ldrh	r3, [r7, #14]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	891a      	ldrh	r2, [r3, #8]
 800d8d2:	89fb      	ldrh	r3, [r7, #14]
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	08018fa8 	.word	0x08018fa8
 800d8ec:	0801910c 	.word	0x0801910c
 800d8f0:	08019008 	.word	0x08019008
 800d8f4:	08019118 	.word	0x08019118

0800d8f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	807b      	strh	r3, [r7, #2]
 800d904:	4613      	mov	r3, r2
 800d906:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d908:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da08      	bge.n	800d922 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d914:	425b      	negs	r3, r3
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff9b 	bl	800d854 <pbuf_remove_header>
 800d91e:	4603      	mov	r3, r0
 800d920:	e007      	b.n	800d932 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d922:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d926:	787a      	ldrb	r2, [r7, #1]
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff ff1a 	bl	800d764 <pbuf_add_header_impl>
 800d930:	4603      	mov	r3, r0
  }
}
 800d932:	4618      	mov	r0, r3
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b082      	sub	sp, #8
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	460b      	mov	r3, r1
 800d944:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d946:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d94a:	2201      	movs	r2, #1
 800d94c:	4619      	mov	r1, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f7ff ffd2 	bl	800d8f8 <pbuf_header_impl>
 800d954:	4603      	mov	r3, r0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10b      	bne.n	800d986 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <pbuf_free+0x22>
 800d974:	4b38      	ldr	r3, [pc, #224]	; (800da58 <pbuf_free+0xf8>)
 800d976:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d97a:	4938      	ldr	r1, [pc, #224]	; (800da5c <pbuf_free+0xfc>)
 800d97c:	4838      	ldr	r0, [pc, #224]	; (800da60 <pbuf_free+0x100>)
 800d97e:	f009 ff5b 	bl	8017838 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d982:	2300      	movs	r3, #0
 800d984:	e063      	b.n	800da4e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d98a:	e05c      	b.n	800da46 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	7b9b      	ldrb	r3, [r3, #14]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d106      	bne.n	800d9a2 <pbuf_free+0x42>
 800d994:	4b30      	ldr	r3, [pc, #192]	; (800da58 <pbuf_free+0xf8>)
 800d996:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d99a:	4932      	ldr	r1, [pc, #200]	; (800da64 <pbuf_free+0x104>)
 800d99c:	4830      	ldr	r0, [pc, #192]	; (800da60 <pbuf_free+0x100>)
 800d99e:	f009 ff4b 	bl	8017838 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	7b9b      	ldrb	r3, [r3, #14]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	739a      	strb	r2, [r3, #14]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7b9b      	ldrb	r3, [r3, #14]
 800d9b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d9b4:	7dbb      	ldrb	r3, [r7, #22]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d143      	bne.n	800da42 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7b1b      	ldrb	r3, [r3, #12]
 800d9c4:	f003 030f 	and.w	r3, r3, #15
 800d9c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	7b5b      	ldrb	r3, [r3, #13]
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d011      	beq.n	800d9fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d106      	bne.n	800d9f0 <pbuf_free+0x90>
 800d9e2:	4b1d      	ldr	r3, [pc, #116]	; (800da58 <pbuf_free+0xf8>)
 800d9e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d9e8:	491f      	ldr	r1, [pc, #124]	; (800da68 <pbuf_free+0x108>)
 800d9ea:	481d      	ldr	r0, [pc, #116]	; (800da60 <pbuf_free+0x100>)
 800d9ec:	f009 ff24 	bl	8017838 <iprintf>
        pc->custom_free_function(p);
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	4798      	blx	r3
 800d9f8:	e01d      	b.n	800da36 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d104      	bne.n	800da0a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	2008      	movs	r0, #8
 800da04:	f7ff f936 	bl	800cc74 <memp_free>
 800da08:	e015      	b.n	800da36 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d104      	bne.n	800da1a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800da10:	6879      	ldr	r1, [r7, #4]
 800da12:	2007      	movs	r0, #7
 800da14:	f7ff f92e 	bl	800cc74 <memp_free>
 800da18:	e00d      	b.n	800da36 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d103      	bne.n	800da28 <pbuf_free+0xc8>
          mem_free(p);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7fe fdc1 	bl	800c5a8 <mem_free>
 800da26:	e006      	b.n	800da36 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800da28:	4b0b      	ldr	r3, [pc, #44]	; (800da58 <pbuf_free+0xf8>)
 800da2a:	f240 320f 	movw	r2, #783	; 0x30f
 800da2e:	490f      	ldr	r1, [pc, #60]	; (800da6c <pbuf_free+0x10c>)
 800da30:	480b      	ldr	r0, [pc, #44]	; (800da60 <pbuf_free+0x100>)
 800da32:	f009 ff01 	bl	8017838 <iprintf>
        }
      }
      count++;
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	3301      	adds	r3, #1
 800da3a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	607b      	str	r3, [r7, #4]
 800da40:	e001      	b.n	800da46 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d19f      	bne.n	800d98c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3718      	adds	r7, #24
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	08018fa8 	.word	0x08018fa8
 800da5c:	0801910c 	.word	0x0801910c
 800da60:	08019008 	.word	0x08019008
 800da64:	08019138 	.word	0x08019138
 800da68:	08019150 	.word	0x08019150
 800da6c:	08019174 	.word	0x08019174

0800da70 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800da78:	2300      	movs	r3, #0
 800da7a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800da7c:	e005      	b.n	800da8a <pbuf_clen+0x1a>
    ++len;
 800da7e:	89fb      	ldrh	r3, [r7, #14]
 800da80:	3301      	adds	r3, #1
 800da82:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1f6      	bne.n	800da7e <pbuf_clen+0xe>
  }
  return len;
 800da90:	89fb      	ldrh	r3, [r7, #14]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3714      	adds	r7, #20
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
	...

0800daa0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d010      	beq.n	800dad0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7b9b      	ldrb	r3, [r3, #14]
 800dab2:	3301      	adds	r3, #1
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	7b9b      	ldrb	r3, [r3, #14]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <pbuf_ref+0x30>
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <pbuf_ref+0x38>)
 800dac4:	f240 3242 	movw	r2, #834	; 0x342
 800dac8:	4904      	ldr	r1, [pc, #16]	; (800dadc <pbuf_ref+0x3c>)
 800daca:	4805      	ldr	r0, [pc, #20]	; (800dae0 <pbuf_ref+0x40>)
 800dacc:	f009 feb4 	bl	8017838 <iprintf>
  }
}
 800dad0:	bf00      	nop
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	08018fa8 	.word	0x08018fa8
 800dadc:	08019188 	.word	0x08019188
 800dae0:	08019008 	.word	0x08019008

0800dae4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <pbuf_cat+0x16>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d107      	bne.n	800db0a <pbuf_cat+0x26>
 800dafa:	4b20      	ldr	r3, [pc, #128]	; (800db7c <pbuf_cat+0x98>)
 800dafc:	f240 3259 	movw	r2, #857	; 0x359
 800db00:	491f      	ldr	r1, [pc, #124]	; (800db80 <pbuf_cat+0x9c>)
 800db02:	4820      	ldr	r0, [pc, #128]	; (800db84 <pbuf_cat+0xa0>)
 800db04:	f009 fe98 	bl	8017838 <iprintf>
 800db08:	e034      	b.n	800db74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	e00a      	b.n	800db26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	891a      	ldrh	r2, [r3, #8]
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	891b      	ldrh	r3, [r3, #8]
 800db18:	4413      	add	r3, r2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1f0      	bne.n	800db10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	891a      	ldrh	r2, [r3, #8]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	895b      	ldrh	r3, [r3, #10]
 800db36:	429a      	cmp	r2, r3
 800db38:	d006      	beq.n	800db48 <pbuf_cat+0x64>
 800db3a:	4b10      	ldr	r3, [pc, #64]	; (800db7c <pbuf_cat+0x98>)
 800db3c:	f240 3262 	movw	r2, #866	; 0x362
 800db40:	4911      	ldr	r1, [pc, #68]	; (800db88 <pbuf_cat+0xa4>)
 800db42:	4810      	ldr	r0, [pc, #64]	; (800db84 <pbuf_cat+0xa0>)
 800db44:	f009 fe78 	bl	8017838 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d006      	beq.n	800db5e <pbuf_cat+0x7a>
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <pbuf_cat+0x98>)
 800db52:	f240 3263 	movw	r2, #867	; 0x363
 800db56:	490d      	ldr	r1, [pc, #52]	; (800db8c <pbuf_cat+0xa8>)
 800db58:	480a      	ldr	r0, [pc, #40]	; (800db84 <pbuf_cat+0xa0>)
 800db5a:	f009 fe6d 	bl	8017838 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	891a      	ldrh	r2, [r3, #8]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	891b      	ldrh	r3, [r3, #8]
 800db66:	4413      	add	r3, r2
 800db68:	b29a      	uxth	r2, r3
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	683a      	ldr	r2, [r7, #0]
 800db72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	08018fa8 	.word	0x08018fa8
 800db80:	0801919c 	.word	0x0801919c
 800db84:	08019008 	.word	0x08019008
 800db88:	080191d4 	.word	0x080191d4
 800db8c:	08019204 	.word	0x08019204

0800db90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff ffa1 	bl	800dae4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dba2:	6838      	ldr	r0, [r7, #0]
 800dba4:	f7ff ff7c 	bl	800daa0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d008      	beq.n	800dbda <pbuf_copy+0x2a>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d005      	beq.n	800dbda <pbuf_copy+0x2a>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	891a      	ldrh	r2, [r3, #8]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	891b      	ldrh	r3, [r3, #8]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d209      	bcs.n	800dbee <pbuf_copy+0x3e>
 800dbda:	4b57      	ldr	r3, [pc, #348]	; (800dd38 <pbuf_copy+0x188>)
 800dbdc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800dbe0:	4956      	ldr	r1, [pc, #344]	; (800dd3c <pbuf_copy+0x18c>)
 800dbe2:	4857      	ldr	r0, [pc, #348]	; (800dd40 <pbuf_copy+0x190>)
 800dbe4:	f009 fe28 	bl	8017838 <iprintf>
 800dbe8:	f06f 030f 	mvn.w	r3, #15
 800dbec:	e09f      	b.n	800dd2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	895b      	ldrh	r3, [r3, #10]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	1ad2      	subs	r2, r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	895b      	ldrh	r3, [r3, #10]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	1acb      	subs	r3, r1, r3
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d306      	bcc.n	800dc14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	895b      	ldrh	r3, [r3, #10]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	60fb      	str	r3, [r7, #12]
 800dc12:	e005      	b.n	800dc20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	895b      	ldrh	r3, [r3, #10]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685a      	ldr	r2, [r3, #4]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	18d0      	adds	r0, r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	4413      	add	r3, r2
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	4619      	mov	r1, r3
 800dc34:	f009 fdea 	bl	801780c <memcpy>
    offset_to += len;
 800dc38:	697a      	ldr	r2, [r7, #20]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	4413      	add	r3, r2
 800dc46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	895b      	ldrh	r3, [r3, #10]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d906      	bls.n	800dc62 <pbuf_copy+0xb2>
 800dc54:	4b38      	ldr	r3, [pc, #224]	; (800dd38 <pbuf_copy+0x188>)
 800dc56:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dc5a:	493a      	ldr	r1, [pc, #232]	; (800dd44 <pbuf_copy+0x194>)
 800dc5c:	4838      	ldr	r0, [pc, #224]	; (800dd40 <pbuf_copy+0x190>)
 800dc5e:	f009 fdeb 	bl	8017838 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	895b      	ldrh	r3, [r3, #10]
 800dc66:	461a      	mov	r2, r3
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d906      	bls.n	800dc7c <pbuf_copy+0xcc>
 800dc6e:	4b32      	ldr	r3, [pc, #200]	; (800dd38 <pbuf_copy+0x188>)
 800dc70:	f240 32da 	movw	r2, #986	; 0x3da
 800dc74:	4934      	ldr	r1, [pc, #208]	; (800dd48 <pbuf_copy+0x198>)
 800dc76:	4832      	ldr	r0, [pc, #200]	; (800dd40 <pbuf_copy+0x190>)
 800dc78:	f009 fdde 	bl	8017838 <iprintf>
    if (offset_from >= p_from->len) {
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	895b      	ldrh	r3, [r3, #10]
 800dc80:	461a      	mov	r2, r3
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d304      	bcc.n	800dc92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	895b      	ldrh	r3, [r3, #10]
 800dc96:	461a      	mov	r2, r3
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d114      	bne.n	800dcc8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10c      	bne.n	800dcc8 <pbuf_copy+0x118>
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d009      	beq.n	800dcc8 <pbuf_copy+0x118>
 800dcb4:	4b20      	ldr	r3, [pc, #128]	; (800dd38 <pbuf_copy+0x188>)
 800dcb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dcba:	4924      	ldr	r1, [pc, #144]	; (800dd4c <pbuf_copy+0x19c>)
 800dcbc:	4820      	ldr	r0, [pc, #128]	; (800dd40 <pbuf_copy+0x190>)
 800dcbe:	f009 fdbb 	bl	8017838 <iprintf>
 800dcc2:	f06f 030f 	mvn.w	r3, #15
 800dcc6:	e032      	b.n	800dd2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d013      	beq.n	800dcf6 <pbuf_copy+0x146>
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	895a      	ldrh	r2, [r3, #10]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	891b      	ldrh	r3, [r3, #8]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d10d      	bne.n	800dcf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d009      	beq.n	800dcf6 <pbuf_copy+0x146>
 800dce2:	4b15      	ldr	r3, [pc, #84]	; (800dd38 <pbuf_copy+0x188>)
 800dce4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dce8:	4919      	ldr	r1, [pc, #100]	; (800dd50 <pbuf_copy+0x1a0>)
 800dcea:	4815      	ldr	r0, [pc, #84]	; (800dd40 <pbuf_copy+0x190>)
 800dcec:	f009 fda4 	bl	8017838 <iprintf>
 800dcf0:	f06f 0305 	mvn.w	r3, #5
 800dcf4:	e01b      	b.n	800dd2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d013      	beq.n	800dd24 <pbuf_copy+0x174>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	895a      	ldrh	r2, [r3, #10]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	891b      	ldrh	r3, [r3, #8]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d10d      	bne.n	800dd24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d009      	beq.n	800dd24 <pbuf_copy+0x174>
 800dd10:	4b09      	ldr	r3, [pc, #36]	; (800dd38 <pbuf_copy+0x188>)
 800dd12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800dd16:	490e      	ldr	r1, [pc, #56]	; (800dd50 <pbuf_copy+0x1a0>)
 800dd18:	4809      	ldr	r0, [pc, #36]	; (800dd40 <pbuf_copy+0x190>)
 800dd1a:	f009 fd8d 	bl	8017838 <iprintf>
 800dd1e:	f06f 0305 	mvn.w	r3, #5
 800dd22:	e004      	b.n	800dd2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f47f af61 	bne.w	800dbee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	08018fa8 	.word	0x08018fa8
 800dd3c:	08019250 	.word	0x08019250
 800dd40:	08019008 	.word	0x08019008
 800dd44:	08019280 	.word	0x08019280
 800dd48:	08019298 	.word	0x08019298
 800dd4c:	080192b4 	.word	0x080192b4
 800dd50:	080192c4 	.word	0x080192c4

0800dd54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b088      	sub	sp, #32
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	461a      	mov	r2, r3
 800dd62:	460b      	mov	r3, r1
 800dd64:	80fb      	strh	r3, [r7, #6]
 800dd66:	4613      	mov	r3, r2
 800dd68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d108      	bne.n	800dd8a <pbuf_copy_partial+0x36>
 800dd78:	4b2b      	ldr	r3, [pc, #172]	; (800de28 <pbuf_copy_partial+0xd4>)
 800dd7a:	f240 420a 	movw	r2, #1034	; 0x40a
 800dd7e:	492b      	ldr	r1, [pc, #172]	; (800de2c <pbuf_copy_partial+0xd8>)
 800dd80:	482b      	ldr	r0, [pc, #172]	; (800de30 <pbuf_copy_partial+0xdc>)
 800dd82:	f009 fd59 	bl	8017838 <iprintf>
 800dd86:	2300      	movs	r3, #0
 800dd88:	e04a      	b.n	800de20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d108      	bne.n	800dda2 <pbuf_copy_partial+0x4e>
 800dd90:	4b25      	ldr	r3, [pc, #148]	; (800de28 <pbuf_copy_partial+0xd4>)
 800dd92:	f240 420b 	movw	r2, #1035	; 0x40b
 800dd96:	4927      	ldr	r1, [pc, #156]	; (800de34 <pbuf_copy_partial+0xe0>)
 800dd98:	4825      	ldr	r0, [pc, #148]	; (800de30 <pbuf_copy_partial+0xdc>)
 800dd9a:	f009 fd4d 	bl	8017838 <iprintf>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e03e      	b.n	800de20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	61fb      	str	r3, [r7, #28]
 800dda6:	e034      	b.n	800de12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dda8:	88bb      	ldrh	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00a      	beq.n	800ddc4 <pbuf_copy_partial+0x70>
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	895b      	ldrh	r3, [r3, #10]
 800ddb2:	88ba      	ldrh	r2, [r7, #4]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d305      	bcc.n	800ddc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	895b      	ldrh	r3, [r3, #10]
 800ddbc:	88ba      	ldrh	r2, [r7, #4]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	80bb      	strh	r3, [r7, #4]
 800ddc2:	e023      	b.n	800de0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	895a      	ldrh	r2, [r3, #10]
 800ddc8:	88bb      	ldrh	r3, [r7, #4]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ddce:	8b3a      	ldrh	r2, [r7, #24]
 800ddd0:	88fb      	ldrh	r3, [r7, #6]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d901      	bls.n	800ddda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ddda:	8b7b      	ldrh	r3, [r7, #26]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	18d0      	adds	r0, r2, r3
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	88bb      	ldrh	r3, [r7, #4]
 800dde6:	4413      	add	r3, r2
 800dde8:	8b3a      	ldrh	r2, [r7, #24]
 800ddea:	4619      	mov	r1, r3
 800ddec:	f009 fd0e 	bl	801780c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ddf0:	8afa      	ldrh	r2, [r7, #22]
 800ddf2:	8b3b      	ldrh	r3, [r7, #24]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ddf8:	8b7a      	ldrh	r2, [r7, #26]
 800ddfa:	8b3b      	ldrh	r3, [r7, #24]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800de00:	88fa      	ldrh	r2, [r7, #6]
 800de02:	8b3b      	ldrh	r3, [r7, #24]
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	61fb      	str	r3, [r7, #28]
 800de12:	88fb      	ldrh	r3, [r7, #6]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <pbuf_copy_partial+0xca>
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1c4      	bne.n	800dda8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800de1e:	8afb      	ldrh	r3, [r7, #22]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3720      	adds	r7, #32
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	08018fa8 	.word	0x08018fa8
 800de2c:	080192f0 	.word	0x080192f0
 800de30:	08019008 	.word	0x08019008
 800de34:	08019310 	.word	0x08019310

0800de38 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800de46:	88fb      	ldrh	r3, [r7, #6]
 800de48:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800de4a:	2300      	movs	r3, #0
 800de4c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d109      	bne.n	800de68 <pbuf_take+0x30>
 800de54:	4b3a      	ldr	r3, [pc, #232]	; (800df40 <pbuf_take+0x108>)
 800de56:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800de5a:	493a      	ldr	r1, [pc, #232]	; (800df44 <pbuf_take+0x10c>)
 800de5c:	483a      	ldr	r0, [pc, #232]	; (800df48 <pbuf_take+0x110>)
 800de5e:	f009 fceb 	bl	8017838 <iprintf>
 800de62:	f06f 030f 	mvn.w	r3, #15
 800de66:	e067      	b.n	800df38 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d109      	bne.n	800de82 <pbuf_take+0x4a>
 800de6e:	4b34      	ldr	r3, [pc, #208]	; (800df40 <pbuf_take+0x108>)
 800de70:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800de74:	4935      	ldr	r1, [pc, #212]	; (800df4c <pbuf_take+0x114>)
 800de76:	4834      	ldr	r0, [pc, #208]	; (800df48 <pbuf_take+0x110>)
 800de78:	f009 fcde 	bl	8017838 <iprintf>
 800de7c:	f06f 030f 	mvn.w	r3, #15
 800de80:	e05a      	b.n	800df38 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	891b      	ldrh	r3, [r3, #8]
 800de86:	88fa      	ldrh	r2, [r7, #6]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d909      	bls.n	800dea0 <pbuf_take+0x68>
 800de8c:	4b2c      	ldr	r3, [pc, #176]	; (800df40 <pbuf_take+0x108>)
 800de8e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800de92:	492f      	ldr	r1, [pc, #188]	; (800df50 <pbuf_take+0x118>)
 800de94:	482c      	ldr	r0, [pc, #176]	; (800df48 <pbuf_take+0x110>)
 800de96:	f009 fccf 	bl	8017838 <iprintf>
 800de9a:	f04f 33ff 	mov.w	r3, #4294967295
 800de9e:	e04b      	b.n	800df38 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d007      	beq.n	800deb6 <pbuf_take+0x7e>
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d004      	beq.n	800deb6 <pbuf_take+0x7e>
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	891b      	ldrh	r3, [r3, #8]
 800deb0:	88fa      	ldrh	r2, [r7, #6]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d902      	bls.n	800debc <pbuf_take+0x84>
    return ERR_ARG;
 800deb6:	f06f 030f 	mvn.w	r3, #15
 800deba:	e03d      	b.n	800df38 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	61fb      	str	r3, [r7, #28]
 800dec0:	e028      	b.n	800df14 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d106      	bne.n	800ded6 <pbuf_take+0x9e>
 800dec8:	4b1d      	ldr	r3, [pc, #116]	; (800df40 <pbuf_take+0x108>)
 800deca:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dece:	4921      	ldr	r1, [pc, #132]	; (800df54 <pbuf_take+0x11c>)
 800ded0:	481d      	ldr	r0, [pc, #116]	; (800df48 <pbuf_take+0x110>)
 800ded2:	f009 fcb1 	bl	8017838 <iprintf>
    buf_copy_len = total_copy_len;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	895b      	ldrh	r3, [r3, #10]
 800dede:	461a      	mov	r2, r3
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d902      	bls.n	800deec <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	895b      	ldrh	r3, [r3, #10]
 800deea:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	6858      	ldr	r0, [r3, #4]
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	4413      	add	r3, r2
 800def6:	69ba      	ldr	r2, [r7, #24]
 800def8:	4619      	mov	r1, r3
 800defa:	f009 fc87 	bl	801780c <memcpy>
    total_copy_len -= buf_copy_len;
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	1ad3      	subs	r3, r2, r3
 800df04:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	4413      	add	r3, r2
 800df0c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	61fb      	str	r3, [r7, #28]
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1d3      	bne.n	800dec2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d103      	bne.n	800df28 <pbuf_take+0xf0>
 800df20:	88fb      	ldrh	r3, [r7, #6]
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	429a      	cmp	r2, r3
 800df26:	d006      	beq.n	800df36 <pbuf_take+0xfe>
 800df28:	4b05      	ldr	r3, [pc, #20]	; (800df40 <pbuf_take+0x108>)
 800df2a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800df2e:	490a      	ldr	r1, [pc, #40]	; (800df58 <pbuf_take+0x120>)
 800df30:	4805      	ldr	r0, [pc, #20]	; (800df48 <pbuf_take+0x110>)
 800df32:	f009 fc81 	bl	8017838 <iprintf>
  return ERR_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3720      	adds	r7, #32
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	08018fa8 	.word	0x08018fa8
 800df44:	08019380 	.word	0x08019380
 800df48:	08019008 	.word	0x08019008
 800df4c:	08019398 	.word	0x08019398
 800df50:	080193b4 	.word	0x080193b4
 800df54:	080193d4 	.word	0x080193d4
 800df58:	080193ec 	.word	0x080193ec

0800df5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	603a      	str	r2, [r7, #0]
 800df66:	71fb      	strb	r3, [r7, #7]
 800df68:	460b      	mov	r3, r1
 800df6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	8919      	ldrh	r1, [r3, #8]
 800df70:	88ba      	ldrh	r2, [r7, #4]
 800df72:	79fb      	ldrb	r3, [r7, #7]
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff fa0f 	bl	800d398 <pbuf_alloc>
 800df7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <pbuf_clone+0x2a>
    return NULL;
 800df82:	2300      	movs	r3, #0
 800df84:	e011      	b.n	800dfaa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f7ff fe11 	bl	800dbb0 <pbuf_copy>
 800df8e:	4603      	mov	r3, r0
 800df90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800df92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d006      	beq.n	800dfa8 <pbuf_clone+0x4c>
 800df9a:	4b06      	ldr	r3, [pc, #24]	; (800dfb4 <pbuf_clone+0x58>)
 800df9c:	f240 5224 	movw	r2, #1316	; 0x524
 800dfa0:	4905      	ldr	r1, [pc, #20]	; (800dfb8 <pbuf_clone+0x5c>)
 800dfa2:	4806      	ldr	r0, [pc, #24]	; (800dfbc <pbuf_clone+0x60>)
 800dfa4:	f009 fc48 	bl	8017838 <iprintf>
  return q;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	08018fa8 	.word	0x08018fa8
 800dfb8:	0801941c 	.word	0x0801941c
 800dfbc:	08019008 	.word	0x08019008

0800dfc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dfc4:	f009 fcc6 	bl	8017954 <rand>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4b01      	ldr	r3, [pc, #4]	; (800dfe0 <tcp_init+0x20>)
 800dfda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dfdc:	bf00      	nop
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20000020 	.word	0x20000020

0800dfe4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	7d1b      	ldrb	r3, [r3, #20]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d105      	bne.n	800e000 <tcp_free+0x1c>
 800dff4:	4b06      	ldr	r3, [pc, #24]	; (800e010 <tcp_free+0x2c>)
 800dff6:	22d4      	movs	r2, #212	; 0xd4
 800dff8:	4906      	ldr	r1, [pc, #24]	; (800e014 <tcp_free+0x30>)
 800dffa:	4807      	ldr	r0, [pc, #28]	; (800e018 <tcp_free+0x34>)
 800dffc:	f009 fc1c 	bl	8017838 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	2001      	movs	r0, #1
 800e004:	f7fe fe36 	bl	800cc74 <memp_free>
}
 800e008:	bf00      	nop
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	080194a8 	.word	0x080194a8
 800e014:	080194d8 	.word	0x080194d8
 800e018:	080194ec 	.word	0x080194ec

0800e01c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7d1b      	ldrb	r3, [r3, #20]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d105      	bne.n	800e038 <tcp_free_listen+0x1c>
 800e02c:	4b06      	ldr	r3, [pc, #24]	; (800e048 <tcp_free_listen+0x2c>)
 800e02e:	22df      	movs	r2, #223	; 0xdf
 800e030:	4906      	ldr	r1, [pc, #24]	; (800e04c <tcp_free_listen+0x30>)
 800e032:	4807      	ldr	r0, [pc, #28]	; (800e050 <tcp_free_listen+0x34>)
 800e034:	f009 fc00 	bl	8017838 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	2002      	movs	r0, #2
 800e03c:	f7fe fe1a 	bl	800cc74 <memp_free>
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	080194a8 	.word	0x080194a8
 800e04c:	08019514 	.word	0x08019514
 800e050:	080194ec 	.word	0x080194ec

0800e054 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e058:	f000 fea2 	bl	800eda0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e05c:	4b07      	ldr	r3, [pc, #28]	; (800e07c <tcp_tmr+0x28>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	b2da      	uxtb	r2, r3
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <tcp_tmr+0x28>)
 800e066:	701a      	strb	r2, [r3, #0]
 800e068:	4b04      	ldr	r3, [pc, #16]	; (800e07c <tcp_tmr+0x28>)
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e074:	f000 fb54 	bl	800e720 <tcp_slowtmr>
  }
}
 800e078:	bf00      	nop
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	20008e11 	.word	0x20008e11

0800e080 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d105      	bne.n	800e09c <tcp_remove_listener+0x1c>
 800e090:	4b0d      	ldr	r3, [pc, #52]	; (800e0c8 <tcp_remove_listener+0x48>)
 800e092:	22ff      	movs	r2, #255	; 0xff
 800e094:	490d      	ldr	r1, [pc, #52]	; (800e0cc <tcp_remove_listener+0x4c>)
 800e096:	480e      	ldr	r0, [pc, #56]	; (800e0d0 <tcp_remove_listener+0x50>)
 800e098:	f009 fbce 	bl	8017838 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	e00a      	b.n	800e0b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d102      	bne.n	800e0b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	60fb      	str	r3, [r7, #12]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1f1      	bne.n	800e0a2 <tcp_remove_listener+0x22>
    }
  }
}
 800e0be:	bf00      	nop
 800e0c0:	bf00      	nop
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	080194a8 	.word	0x080194a8
 800e0cc:	08019530 	.word	0x08019530
 800e0d0:	080194ec 	.word	0x080194ec

0800e0d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d106      	bne.n	800e0f0 <tcp_listen_closed+0x1c>
 800e0e2:	4b14      	ldr	r3, [pc, #80]	; (800e134 <tcp_listen_closed+0x60>)
 800e0e4:	f240 1211 	movw	r2, #273	; 0x111
 800e0e8:	4913      	ldr	r1, [pc, #76]	; (800e138 <tcp_listen_closed+0x64>)
 800e0ea:	4814      	ldr	r0, [pc, #80]	; (800e13c <tcp_listen_closed+0x68>)
 800e0ec:	f009 fba4 	bl	8017838 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d006      	beq.n	800e106 <tcp_listen_closed+0x32>
 800e0f8:	4b0e      	ldr	r3, [pc, #56]	; (800e134 <tcp_listen_closed+0x60>)
 800e0fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e0fe:	4910      	ldr	r1, [pc, #64]	; (800e140 <tcp_listen_closed+0x6c>)
 800e100:	480e      	ldr	r0, [pc, #56]	; (800e13c <tcp_listen_closed+0x68>)
 800e102:	f009 fb99 	bl	8017838 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e106:	2301      	movs	r3, #1
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	e00b      	b.n	800e124 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e10c:	4a0d      	ldr	r2, [pc, #52]	; (800e144 <tcp_listen_closed+0x70>)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6879      	ldr	r1, [r7, #4]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7ff ffb1 	bl	800e080 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3301      	adds	r3, #1
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b03      	cmp	r3, #3
 800e128:	d9f0      	bls.n	800e10c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e12a:	bf00      	nop
 800e12c:	bf00      	nop
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	080194a8 	.word	0x080194a8
 800e138:	08019558 	.word	0x08019558
 800e13c:	080194ec 	.word	0x080194ec
 800e140:	08019564 	.word	0x08019564
 800e144:	0801b664 	.word	0x0801b664

0800e148 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e148:	b5b0      	push	{r4, r5, r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af04      	add	r7, sp, #16
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d106      	bne.n	800e168 <tcp_close_shutdown+0x20>
 800e15a:	4b63      	ldr	r3, [pc, #396]	; (800e2e8 <tcp_close_shutdown+0x1a0>)
 800e15c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e160:	4962      	ldr	r1, [pc, #392]	; (800e2ec <tcp_close_shutdown+0x1a4>)
 800e162:	4863      	ldr	r0, [pc, #396]	; (800e2f0 <tcp_close_shutdown+0x1a8>)
 800e164:	f009 fb68 	bl	8017838 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e168:	78fb      	ldrb	r3, [r7, #3]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d066      	beq.n	800e23c <tcp_close_shutdown+0xf4>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	7d1b      	ldrb	r3, [r3, #20]
 800e172:	2b04      	cmp	r3, #4
 800e174:	d003      	beq.n	800e17e <tcp_close_shutdown+0x36>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	7d1b      	ldrb	r3, [r3, #20]
 800e17a:	2b07      	cmp	r3, #7
 800e17c:	d15e      	bne.n	800e23c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e182:	2b00      	cmp	r3, #0
 800e184:	d104      	bne.n	800e190 <tcp_close_shutdown+0x48>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e18a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e18e:	d055      	beq.n	800e23c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	8b5b      	ldrh	r3, [r3, #26]
 800e194:	f003 0310 	and.w	r3, r3, #16
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d106      	bne.n	800e1aa <tcp_close_shutdown+0x62>
 800e19c:	4b52      	ldr	r3, [pc, #328]	; (800e2e8 <tcp_close_shutdown+0x1a0>)
 800e19e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e1a2:	4954      	ldr	r1, [pc, #336]	; (800e2f4 <tcp_close_shutdown+0x1ac>)
 800e1a4:	4852      	ldr	r0, [pc, #328]	; (800e2f0 <tcp_close_shutdown+0x1a8>)
 800e1a6:	f009 fb47 	bl	8017838 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e1b2:	687d      	ldr	r5, [r7, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	8ad2      	ldrh	r2, [r2, #22]
 800e1bc:	6879      	ldr	r1, [r7, #4]
 800e1be:	8b09      	ldrh	r1, [r1, #24]
 800e1c0:	9102      	str	r1, [sp, #8]
 800e1c2:	9201      	str	r2, [sp, #4]
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	462b      	mov	r3, r5
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f004 fe91 	bl	8012ef4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f001 f8c6 	bl	800f364 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e1d8:	4b47      	ldr	r3, [pc, #284]	; (800e2f8 <tcp_close_shutdown+0x1b0>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d105      	bne.n	800e1ee <tcp_close_shutdown+0xa6>
 800e1e2:	4b45      	ldr	r3, [pc, #276]	; (800e2f8 <tcp_close_shutdown+0x1b0>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	4a43      	ldr	r2, [pc, #268]	; (800e2f8 <tcp_close_shutdown+0x1b0>)
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	e013      	b.n	800e216 <tcp_close_shutdown+0xce>
 800e1ee:	4b42      	ldr	r3, [pc, #264]	; (800e2f8 <tcp_close_shutdown+0x1b0>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e00c      	b.n	800e210 <tcp_close_shutdown+0xc8>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d104      	bne.n	800e20a <tcp_close_shutdown+0xc2>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	68da      	ldr	r2, [r3, #12]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	60da      	str	r2, [r3, #12]
 800e208:	e005      	b.n	800e216 <tcp_close_shutdown+0xce>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	60fb      	str	r3, [r7, #12]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1ef      	bne.n	800e1f6 <tcp_close_shutdown+0xae>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	60da      	str	r2, [r3, #12]
 800e21c:	4b37      	ldr	r3, [pc, #220]	; (800e2fc <tcp_close_shutdown+0x1b4>)
 800e21e:	2201      	movs	r2, #1
 800e220:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e222:	4b37      	ldr	r3, [pc, #220]	; (800e300 <tcp_close_shutdown+0x1b8>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d102      	bne.n	800e232 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e22c:	f003 fd5e 	bl	8011cec <tcp_trigger_input_pcb_close>
 800e230:	e002      	b.n	800e238 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff fed6 	bl	800dfe4 <tcp_free>
      }
      return ERR_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	e050      	b.n	800e2de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7d1b      	ldrb	r3, [r3, #20]
 800e240:	2b02      	cmp	r3, #2
 800e242:	d03b      	beq.n	800e2bc <tcp_close_shutdown+0x174>
 800e244:	2b02      	cmp	r3, #2
 800e246:	dc44      	bgt.n	800e2d2 <tcp_close_shutdown+0x18a>
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d002      	beq.n	800e252 <tcp_close_shutdown+0x10a>
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d02a      	beq.n	800e2a6 <tcp_close_shutdown+0x15e>
 800e250:	e03f      	b.n	800e2d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8adb      	ldrh	r3, [r3, #22]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d021      	beq.n	800e29e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e25a:	4b2a      	ldr	r3, [pc, #168]	; (800e304 <tcp_close_shutdown+0x1bc>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d105      	bne.n	800e270 <tcp_close_shutdown+0x128>
 800e264:	4b27      	ldr	r3, [pc, #156]	; (800e304 <tcp_close_shutdown+0x1bc>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	4a26      	ldr	r2, [pc, #152]	; (800e304 <tcp_close_shutdown+0x1bc>)
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	e013      	b.n	800e298 <tcp_close_shutdown+0x150>
 800e270:	4b24      	ldr	r3, [pc, #144]	; (800e304 <tcp_close_shutdown+0x1bc>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	60bb      	str	r3, [r7, #8]
 800e276:	e00c      	b.n	800e292 <tcp_close_shutdown+0x14a>
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d104      	bne.n	800e28c <tcp_close_shutdown+0x144>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68da      	ldr	r2, [r3, #12]
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	60da      	str	r2, [r3, #12]
 800e28a:	e005      	b.n	800e298 <tcp_close_shutdown+0x150>
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	60bb      	str	r3, [r7, #8]
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1ef      	bne.n	800e278 <tcp_close_shutdown+0x130>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7ff fea0 	bl	800dfe4 <tcp_free>
      break;
 800e2a4:	e01a      	b.n	800e2dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff ff14 	bl	800e0d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	4816      	ldr	r0, [pc, #88]	; (800e308 <tcp_close_shutdown+0x1c0>)
 800e2b0:	f001 f8a8 	bl	800f404 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7ff feb1 	bl	800e01c <tcp_free_listen>
      break;
 800e2ba:	e00f      	b.n	800e2dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e2bc:	6879      	ldr	r1, [r7, #4]
 800e2be:	480e      	ldr	r0, [pc, #56]	; (800e2f8 <tcp_close_shutdown+0x1b0>)
 800e2c0:	f001 f8a0 	bl	800f404 <tcp_pcb_remove>
 800e2c4:	4b0d      	ldr	r3, [pc, #52]	; (800e2fc <tcp_close_shutdown+0x1b4>)
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fe8a 	bl	800dfe4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e2d0:	e004      	b.n	800e2dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f81a 	bl	800e30c <tcp_close_shutdown_fin>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	e000      	b.n	800e2de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	080194a8 	.word	0x080194a8
 800e2ec:	0801957c 	.word	0x0801957c
 800e2f0:	080194ec 	.word	0x080194ec
 800e2f4:	0801959c 	.word	0x0801959c
 800e2f8:	20008e08 	.word	0x20008e08
 800e2fc:	20008e10 	.word	0x20008e10
 800e300:	20008e48 	.word	0x20008e48
 800e304:	20008e00 	.word	0x20008e00
 800e308:	20008e04 	.word	0x20008e04

0800e30c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d106      	bne.n	800e328 <tcp_close_shutdown_fin+0x1c>
 800e31a:	4b2e      	ldr	r3, [pc, #184]	; (800e3d4 <tcp_close_shutdown_fin+0xc8>)
 800e31c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e320:	492d      	ldr	r1, [pc, #180]	; (800e3d8 <tcp_close_shutdown_fin+0xcc>)
 800e322:	482e      	ldr	r0, [pc, #184]	; (800e3dc <tcp_close_shutdown_fin+0xd0>)
 800e324:	f009 fa88 	bl	8017838 <iprintf>

  switch (pcb->state) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	7d1b      	ldrb	r3, [r3, #20]
 800e32c:	2b07      	cmp	r3, #7
 800e32e:	d020      	beq.n	800e372 <tcp_close_shutdown_fin+0x66>
 800e330:	2b07      	cmp	r3, #7
 800e332:	dc2b      	bgt.n	800e38c <tcp_close_shutdown_fin+0x80>
 800e334:	2b03      	cmp	r3, #3
 800e336:	d002      	beq.n	800e33e <tcp_close_shutdown_fin+0x32>
 800e338:	2b04      	cmp	r3, #4
 800e33a:	d00d      	beq.n	800e358 <tcp_close_shutdown_fin+0x4c>
 800e33c:	e026      	b.n	800e38c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f003 fee6 	bl	8012110 <tcp_send_fin>
 800e344:	4603      	mov	r3, r0
 800e346:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d11f      	bne.n	800e390 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2205      	movs	r2, #5
 800e354:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e356:	e01b      	b.n	800e390 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f003 fed9 	bl	8012110 <tcp_send_fin>
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d114      	bne.n	800e394 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2205      	movs	r2, #5
 800e36e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e370:	e010      	b.n	800e394 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f003 fecc 	bl	8012110 <tcp_send_fin>
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2209      	movs	r2, #9
 800e388:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e38a:	e005      	b.n	800e398 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	e01c      	b.n	800e3ca <tcp_close_shutdown_fin+0xbe>
      break;
 800e390:	bf00      	nop
 800e392:	e002      	b.n	800e39a <tcp_close_shutdown_fin+0x8e>
      break;
 800e394:	bf00      	nop
 800e396:	e000      	b.n	800e39a <tcp_close_shutdown_fin+0x8e>
      break;
 800e398:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d103      	bne.n	800e3aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f003 fff2 	bl	801238c <tcp_output>
 800e3a8:	e00d      	b.n	800e3c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b2:	d108      	bne.n	800e3c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	8b5b      	ldrh	r3, [r3, #26]
 800e3b8:	f043 0308 	orr.w	r3, r3, #8
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e001      	b.n	800e3ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	080194a8 	.word	0x080194a8
 800e3d8:	08019558 	.word	0x08019558
 800e3dc:	080194ec 	.word	0x080194ec

0800e3e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d109      	bne.n	800e402 <tcp_close+0x22>
 800e3ee:	4b0f      	ldr	r3, [pc, #60]	; (800e42c <tcp_close+0x4c>)
 800e3f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e3f4:	490e      	ldr	r1, [pc, #56]	; (800e430 <tcp_close+0x50>)
 800e3f6:	480f      	ldr	r0, [pc, #60]	; (800e434 <tcp_close+0x54>)
 800e3f8:	f009 fa1e 	bl	8017838 <iprintf>
 800e3fc:	f06f 030f 	mvn.w	r3, #15
 800e400:	e00f      	b.n	800e422 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	7d1b      	ldrb	r3, [r3, #20]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d006      	beq.n	800e418 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	8b5b      	ldrh	r3, [r3, #26]
 800e40e:	f043 0310 	orr.w	r3, r3, #16
 800e412:	b29a      	uxth	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e418:	2101      	movs	r1, #1
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff fe94 	bl	800e148 <tcp_close_shutdown>
 800e420:	4603      	mov	r3, r0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	080194a8 	.word	0x080194a8
 800e430:	080195b8 	.word	0x080195b8
 800e434:	080194ec 	.word	0x080194ec

0800e438 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08e      	sub	sp, #56	; 0x38
 800e43c:	af04      	add	r7, sp, #16
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d107      	bne.n	800e458 <tcp_abandon+0x20>
 800e448:	4b52      	ldr	r3, [pc, #328]	; (800e594 <tcp_abandon+0x15c>)
 800e44a:	f240 223d 	movw	r2, #573	; 0x23d
 800e44e:	4952      	ldr	r1, [pc, #328]	; (800e598 <tcp_abandon+0x160>)
 800e450:	4852      	ldr	r0, [pc, #328]	; (800e59c <tcp_abandon+0x164>)
 800e452:	f009 f9f1 	bl	8017838 <iprintf>
 800e456:	e099      	b.n	800e58c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d106      	bne.n	800e46e <tcp_abandon+0x36>
 800e460:	4b4c      	ldr	r3, [pc, #304]	; (800e594 <tcp_abandon+0x15c>)
 800e462:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e466:	494e      	ldr	r1, [pc, #312]	; (800e5a0 <tcp_abandon+0x168>)
 800e468:	484c      	ldr	r0, [pc, #304]	; (800e59c <tcp_abandon+0x164>)
 800e46a:	f009 f9e5 	bl	8017838 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7d1b      	ldrb	r3, [r3, #20]
 800e472:	2b0a      	cmp	r3, #10
 800e474:	d107      	bne.n	800e486 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e476:	6879      	ldr	r1, [r7, #4]
 800e478:	484a      	ldr	r0, [pc, #296]	; (800e5a4 <tcp_abandon+0x16c>)
 800e47a:	f000 ffc3 	bl	800f404 <tcp_pcb_remove>
    tcp_free(pcb);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff fdb0 	bl	800dfe4 <tcp_free>
 800e484:	e082      	b.n	800e58c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e492:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e498:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7d1b      	ldrb	r3, [r3, #20]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d126      	bne.n	800e4fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	8adb      	ldrh	r3, [r3, #22]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d02e      	beq.n	800e516 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4b8:	4b3b      	ldr	r3, [pc, #236]	; (800e5a8 <tcp_abandon+0x170>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d105      	bne.n	800e4ce <tcp_abandon+0x96>
 800e4c2:	4b39      	ldr	r3, [pc, #228]	; (800e5a8 <tcp_abandon+0x170>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	4a37      	ldr	r2, [pc, #220]	; (800e5a8 <tcp_abandon+0x170>)
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	e013      	b.n	800e4f6 <tcp_abandon+0xbe>
 800e4ce:	4b36      	ldr	r3, [pc, #216]	; (800e5a8 <tcp_abandon+0x170>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	61fb      	str	r3, [r7, #28]
 800e4d4:	e00c      	b.n	800e4f0 <tcp_abandon+0xb8>
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d104      	bne.n	800e4ea <tcp_abandon+0xb2>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	60da      	str	r2, [r3, #12]
 800e4e8:	e005      	b.n	800e4f6 <tcp_abandon+0xbe>
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	61fb      	str	r3, [r7, #28]
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1ef      	bne.n	800e4d6 <tcp_abandon+0x9e>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	60da      	str	r2, [r3, #12]
 800e4fc:	e00b      	b.n	800e516 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	8adb      	ldrh	r3, [r3, #22]
 800e506:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	4828      	ldr	r0, [pc, #160]	; (800e5ac <tcp_abandon+0x174>)
 800e50c:	f000 ff7a 	bl	800f404 <tcp_pcb_remove>
 800e510:	4b27      	ldr	r3, [pc, #156]	; (800e5b0 <tcp_abandon+0x178>)
 800e512:	2201      	movs	r2, #1
 800e514:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d004      	beq.n	800e528 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e522:	4618      	mov	r0, r3
 800e524:	f000 fd1c 	bl	800ef60 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e534:	4618      	mov	r0, r3
 800e536:	f000 fd13 	bl	800ef60 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d004      	beq.n	800e54c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e546:	4618      	mov	r0, r3
 800e548:	f000 fd0a 	bl	800ef60 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00e      	beq.n	800e570 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e552:	6879      	ldr	r1, [r7, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	3304      	adds	r3, #4
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	8b12      	ldrh	r2, [r2, #24]
 800e55c:	9202      	str	r2, [sp, #8]
 800e55e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e560:	9201      	str	r2, [sp, #4]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	460b      	mov	r3, r1
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	69b9      	ldr	r1, [r7, #24]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f004 fcc2 	bl	8012ef4 <tcp_rst>
    }
    last_state = pcb->state;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f7ff fd34 	bl	800dfe4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d004      	beq.n	800e58c <tcp_abandon+0x154>
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	f06f 010c 	mvn.w	r1, #12
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	4798      	blx	r3
  }
}
 800e58c:	3728      	adds	r7, #40	; 0x28
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	080194a8 	.word	0x080194a8
 800e598:	080195ec 	.word	0x080195ec
 800e59c:	080194ec 	.word	0x080194ec
 800e5a0:	08019608 	.word	0x08019608
 800e5a4:	20008e0c 	.word	0x20008e0c
 800e5a8:	20008e00 	.word	0x20008e00
 800e5ac:	20008e08 	.word	0x20008e08
 800e5b0:	20008e10 	.word	0x20008e10

0800e5b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e5bc:	2101      	movs	r1, #1
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7ff ff3a 	bl	800e438 <tcp_abandon>
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d106      	bne.n	800e5e8 <tcp_update_rcv_ann_wnd+0x1c>
 800e5da:	4b25      	ldr	r3, [pc, #148]	; (800e670 <tcp_update_rcv_ann_wnd+0xa4>)
 800e5dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e5e0:	4924      	ldr	r1, [pc, #144]	; (800e674 <tcp_update_rcv_ann_wnd+0xa8>)
 800e5e2:	4825      	ldr	r0, [pc, #148]	; (800e678 <tcp_update_rcv_ann_wnd+0xac>)
 800e5e4:	f009 f928 	bl	8017838 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e5f0:	4413      	add	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e5fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e600:	bf28      	it	cs
 800e602:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e606:	b292      	uxth	r2, r2
 800e608:	4413      	add	r3, r2
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	db08      	blt.n	800e624 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	e020      	b.n	800e666 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	2b00      	cmp	r3, #0
 800e630:	dd03      	ble.n	800e63a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e638:	e014      	b.n	800e664 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e64c:	d306      	bcc.n	800e65c <tcp_update_rcv_ann_wnd+0x90>
 800e64e:	4b08      	ldr	r3, [pc, #32]	; (800e670 <tcp_update_rcv_ann_wnd+0xa4>)
 800e650:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e654:	4909      	ldr	r1, [pc, #36]	; (800e67c <tcp_update_rcv_ann_wnd+0xb0>)
 800e656:	4808      	ldr	r0, [pc, #32]	; (800e678 <tcp_update_rcv_ann_wnd+0xac>)
 800e658:	f009 f8ee 	bl	8017838 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	b29a      	uxth	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e664:	2300      	movs	r3, #0
  }
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	080194a8 	.word	0x080194a8
 800e674:	08019704 	.word	0x08019704
 800e678:	080194ec 	.word	0x080194ec
 800e67c:	08019728 	.word	0x08019728

0800e680 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d107      	bne.n	800e6a2 <tcp_recved+0x22>
 800e692:	4b1f      	ldr	r3, [pc, #124]	; (800e710 <tcp_recved+0x90>)
 800e694:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e698:	491e      	ldr	r1, [pc, #120]	; (800e714 <tcp_recved+0x94>)
 800e69a:	481f      	ldr	r0, [pc, #124]	; (800e718 <tcp_recved+0x98>)
 800e69c:	f009 f8cc 	bl	8017838 <iprintf>
 800e6a0:	e032      	b.n	800e708 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7d1b      	ldrb	r3, [r3, #20]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d106      	bne.n	800e6b8 <tcp_recved+0x38>
 800e6aa:	4b19      	ldr	r3, [pc, #100]	; (800e710 <tcp_recved+0x90>)
 800e6ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e6b0:	491a      	ldr	r1, [pc, #104]	; (800e71c <tcp_recved+0x9c>)
 800e6b2:	4819      	ldr	r0, [pc, #100]	; (800e718 <tcp_recved+0x98>)
 800e6b4:	f009 f8c0 	bl	8017838 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6bc:	887b      	ldrh	r3, [r7, #2]
 800e6be:	4413      	add	r3, r2
 800e6c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e6c2:	89fb      	ldrh	r3, [r7, #14]
 800e6c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e6c8:	d804      	bhi.n	800e6d4 <tcp_recved+0x54>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6ce:	89fa      	ldrh	r2, [r7, #14]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d204      	bcs.n	800e6de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e6da:	851a      	strh	r2, [r3, #40]	; 0x28
 800e6dc:	e002      	b.n	800e6e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	89fa      	ldrh	r2, [r7, #14]
 800e6e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7ff ff71 	bl	800e5cc <tcp_update_rcv_ann_wnd>
 800e6ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e6f2:	d309      	bcc.n	800e708 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8b5b      	ldrh	r3, [r3, #26]
 800e6f8:	f043 0302 	orr.w	r3, r3, #2
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f003 fe42 	bl	801238c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	080194a8 	.word	0x080194a8
 800e714:	08019744 	.word	0x08019744
 800e718:	080194ec 	.word	0x080194ec
 800e71c:	0801975c 	.word	0x0801975c

0800e720 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e720:	b5b0      	push	{r4, r5, r7, lr}
 800e722:	b090      	sub	sp, #64	; 0x40
 800e724:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e726:	2300      	movs	r3, #0
 800e728:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e72c:	4b94      	ldr	r3, [pc, #592]	; (800e980 <tcp_slowtmr+0x260>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3301      	adds	r3, #1
 800e732:	4a93      	ldr	r2, [pc, #588]	; (800e980 <tcp_slowtmr+0x260>)
 800e734:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e736:	4b93      	ldr	r3, [pc, #588]	; (800e984 <tcp_slowtmr+0x264>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	3301      	adds	r3, #1
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	4b91      	ldr	r3, [pc, #580]	; (800e984 <tcp_slowtmr+0x264>)
 800e740:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e742:	2300      	movs	r3, #0
 800e744:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e746:	4b90      	ldr	r3, [pc, #576]	; (800e988 <tcp_slowtmr+0x268>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e74c:	e29d      	b.n	800ec8a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	7d1b      	ldrb	r3, [r3, #20]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <tcp_slowtmr+0x44>
 800e756:	4b8d      	ldr	r3, [pc, #564]	; (800e98c <tcp_slowtmr+0x26c>)
 800e758:	f240 42be 	movw	r2, #1214	; 0x4be
 800e75c:	498c      	ldr	r1, [pc, #560]	; (800e990 <tcp_slowtmr+0x270>)
 800e75e:	488d      	ldr	r0, [pc, #564]	; (800e994 <tcp_slowtmr+0x274>)
 800e760:	f009 f86a 	bl	8017838 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d106      	bne.n	800e77a <tcp_slowtmr+0x5a>
 800e76c:	4b87      	ldr	r3, [pc, #540]	; (800e98c <tcp_slowtmr+0x26c>)
 800e76e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e772:	4989      	ldr	r1, [pc, #548]	; (800e998 <tcp_slowtmr+0x278>)
 800e774:	4887      	ldr	r0, [pc, #540]	; (800e994 <tcp_slowtmr+0x274>)
 800e776:	f009 f85f 	bl	8017838 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	7d1b      	ldrb	r3, [r3, #20]
 800e77e:	2b0a      	cmp	r3, #10
 800e780:	d106      	bne.n	800e790 <tcp_slowtmr+0x70>
 800e782:	4b82      	ldr	r3, [pc, #520]	; (800e98c <tcp_slowtmr+0x26c>)
 800e784:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e788:	4984      	ldr	r1, [pc, #528]	; (800e99c <tcp_slowtmr+0x27c>)
 800e78a:	4882      	ldr	r0, [pc, #520]	; (800e994 <tcp_slowtmr+0x274>)
 800e78c:	f009 f854 	bl	8017838 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	7f9a      	ldrb	r2, [r3, #30]
 800e794:	4b7b      	ldr	r3, [pc, #492]	; (800e984 <tcp_slowtmr+0x264>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d105      	bne.n	800e7a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e7a6:	e270      	b.n	800ec8a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e7a8:	4b76      	ldr	r3, [pc, #472]	; (800e984 <tcp_slowtmr+0x264>)
 800e7aa:	781a      	ldrb	r2, [r3, #0]
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	7d1b      	ldrb	r3, [r3, #20]
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d10a      	bne.n	800e7da <tcp_slowtmr+0xba>
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7ca:	2b05      	cmp	r3, #5
 800e7cc:	d905      	bls.n	800e7da <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7d8:	e11e      	b.n	800ea18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7e0:	2b0b      	cmp	r3, #11
 800e7e2:	d905      	bls.n	800e7f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7ee:	e113      	b.n	800ea18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d075      	beq.n	800e8e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d006      	beq.n	800e810 <tcp_slowtmr+0xf0>
 800e802:	4b62      	ldr	r3, [pc, #392]	; (800e98c <tcp_slowtmr+0x26c>)
 800e804:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e808:	4965      	ldr	r1, [pc, #404]	; (800e9a0 <tcp_slowtmr+0x280>)
 800e80a:	4862      	ldr	r0, [pc, #392]	; (800e994 <tcp_slowtmr+0x274>)
 800e80c:	f009 f814 	bl	8017838 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e814:	2b00      	cmp	r3, #0
 800e816:	d106      	bne.n	800e826 <tcp_slowtmr+0x106>
 800e818:	4b5c      	ldr	r3, [pc, #368]	; (800e98c <tcp_slowtmr+0x26c>)
 800e81a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e81e:	4961      	ldr	r1, [pc, #388]	; (800e9a4 <tcp_slowtmr+0x284>)
 800e820:	485c      	ldr	r0, [pc, #368]	; (800e994 <tcp_slowtmr+0x274>)
 800e822:	f009 f809 	bl	8017838 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e82c:	2b0b      	cmp	r3, #11
 800e82e:	d905      	bls.n	800e83c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e834:	3301      	adds	r3, #1
 800e836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e83a:	e0ed      	b.n	800ea18 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e842:	3b01      	subs	r3, #1
 800e844:	4a58      	ldr	r2, [pc, #352]	; (800e9a8 <tcp_slowtmr+0x288>)
 800e846:	5cd3      	ldrb	r3, [r2, r3]
 800e848:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e850:	7c7a      	ldrb	r2, [r7, #17]
 800e852:	429a      	cmp	r2, r3
 800e854:	d907      	bls.n	800e866 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e85c:	3301      	adds	r3, #1
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e86c:	7c7a      	ldrb	r2, [r7, #17]
 800e86e:	429a      	cmp	r2, r3
 800e870:	f200 80d2 	bhi.w	800ea18 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e874:	2301      	movs	r3, #1
 800e876:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d108      	bne.n	800e894 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e884:	f004 fc2a 	bl	80130dc <tcp_zero_window_probe>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d014      	beq.n	800e8b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e88e:	2300      	movs	r3, #0
 800e890:	623b      	str	r3, [r7, #32]
 800e892:	e011      	b.n	800e8b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e89a:	4619      	mov	r1, r3
 800e89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e89e:	f003 faef 	bl	8011e80 <tcp_split_unsent_seg>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d107      	bne.n	800e8b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e8a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8aa:	f003 fd6f 	bl	801238c <tcp_output>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e8b8:	6a3b      	ldr	r3, [r7, #32]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 80ac 	beq.w	800ea18 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8ce:	2b06      	cmp	r3, #6
 800e8d0:	f200 80a2 	bhi.w	800ea18 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b2da      	uxtb	r2, r3
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e8e4:	e098      	b.n	800ea18 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	db0f      	blt.n	800e910 <tcp_slowtmr+0x1f0>
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d008      	beq.n	800e910 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e904:	b29b      	uxth	r3, r3
 800e906:	3301      	adds	r3, #1
 800e908:	b29b      	uxth	r3, r3
 800e90a:	b21a      	sxth	r2, r3
 800e90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e91c:	429a      	cmp	r2, r3
 800e91e:	db7b      	blt.n	800ea18 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e922:	f004 f825 	bl	8012970 <tcp_rexmit_rto_prepare>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d007      	beq.n	800e93c <tcp_slowtmr+0x21c>
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e930:	2b00      	cmp	r3, #0
 800e932:	d171      	bne.n	800ea18 <tcp_slowtmr+0x2f8>
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d06d      	beq.n	800ea18 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	7d1b      	ldrb	r3, [r3, #20]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d03a      	beq.n	800e9ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e94a:	2b0c      	cmp	r3, #12
 800e94c:	bf28      	it	cs
 800e94e:	230c      	movcs	r3, #12
 800e950:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e958:	10db      	asrs	r3, r3, #3
 800e95a:	b21b      	sxth	r3, r3
 800e95c:	461a      	mov	r2, r3
 800e95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e960:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e964:	4413      	add	r3, r2
 800e966:	7efa      	ldrb	r2, [r7, #27]
 800e968:	4910      	ldr	r1, [pc, #64]	; (800e9ac <tcp_slowtmr+0x28c>)
 800e96a:	5c8a      	ldrb	r2, [r1, r2]
 800e96c:	4093      	lsls	r3, r2
 800e96e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e976:	4293      	cmp	r3, r2
 800e978:	dc1a      	bgt.n	800e9b0 <tcp_slowtmr+0x290>
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	b21a      	sxth	r2, r3
 800e97e:	e019      	b.n	800e9b4 <tcp_slowtmr+0x294>
 800e980:	20008dfc 	.word	0x20008dfc
 800e984:	20008e12 	.word	0x20008e12
 800e988:	20008e08 	.word	0x20008e08
 800e98c:	080194a8 	.word	0x080194a8
 800e990:	080197ec 	.word	0x080197ec
 800e994:	080194ec 	.word	0x080194ec
 800e998:	08019818 	.word	0x08019818
 800e99c:	08019844 	.word	0x08019844
 800e9a0:	08019874 	.word	0x08019874
 800e9a4:	080198a8 	.word	0x080198a8
 800e9a8:	0801b65c 	.word	0x0801b65c
 800e9ac:	0801b64c 	.word	0x0801b64c
 800e9b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9bc:	2200      	movs	r2, #0
 800e9be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	bf28      	it	cs
 800e9d0:	4613      	movcs	r3, r2
 800e9d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e9d4:	8a7b      	ldrh	r3, [r7, #18]
 800e9d6:	085b      	lsrs	r3, r3, #1
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d206      	bcs.n	800ea00 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ea04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ea12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea14:	f004 f81c 	bl	8012a50 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	2b06      	cmp	r3, #6
 800ea1e:	d111      	bne.n	800ea44 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	8b5b      	ldrh	r3, [r3, #26]
 800ea24:	f003 0310 	and.w	r3, r3, #16
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00b      	beq.n	800ea44 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea2c:	4b9c      	ldr	r3, [pc, #624]	; (800eca0 <tcp_slowtmr+0x580>)
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	6a1b      	ldr	r3, [r3, #32]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b28      	cmp	r3, #40	; 0x28
 800ea38:	d904      	bls.n	800ea44 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ea3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea3e:	3301      	adds	r3, #1
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	7a5b      	ldrb	r3, [r3, #9]
 800ea48:	f003 0308 	and.w	r3, r3, #8
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d04a      	beq.n	800eae6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ea50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea54:	2b04      	cmp	r3, #4
 800ea56:	d003      	beq.n	800ea60 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ea5c:	2b07      	cmp	r3, #7
 800ea5e:	d142      	bne.n	800eae6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea60:	4b8f      	ldr	r3, [pc, #572]	; (800eca0 <tcp_slowtmr+0x580>)
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea70:	4b8c      	ldr	r3, [pc, #560]	; (800eca4 <tcp_slowtmr+0x584>)
 800ea72:	440b      	add	r3, r1
 800ea74:	498c      	ldr	r1, [pc, #560]	; (800eca8 <tcp_slowtmr+0x588>)
 800ea76:	fba1 1303 	umull	r1, r3, r1, r3
 800ea7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d90a      	bls.n	800ea96 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea84:	3301      	adds	r3, #1
 800ea86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ea8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea8e:	3301      	adds	r3, #1
 800ea90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea94:	e027      	b.n	800eae6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea96:	4b82      	ldr	r3, [pc, #520]	; (800eca0 <tcp_slowtmr+0x580>)
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eaac:	4618      	mov	r0, r3
 800eaae:	4b7f      	ldr	r3, [pc, #508]	; (800ecac <tcp_slowtmr+0x58c>)
 800eab0:	fb00 f303 	mul.w	r3, r0, r3
 800eab4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eab6:	497c      	ldr	r1, [pc, #496]	; (800eca8 <tcp_slowtmr+0x588>)
 800eab8:	fba1 1303 	umull	r1, r3, r1, r3
 800eabc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d911      	bls.n	800eae6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800eac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eac4:	f004 faca 	bl	801305c <tcp_keepalive>
 800eac8:	4603      	mov	r3, r0
 800eaca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800eace:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d107      	bne.n	800eae6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eadc:	3301      	adds	r3, #1
 800eade:	b2da      	uxtb	r2, r3
 800eae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d011      	beq.n	800eb12 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800eaee:	4b6c      	ldr	r3, [pc, #432]	; (800eca0 <tcp_slowtmr+0x580>)
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf4:	6a1b      	ldr	r3, [r3, #32]
 800eaf6:	1ad2      	subs	r2, r2, r3
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eafe:	4619      	mov	r1, r3
 800eb00:	460b      	mov	r3, r1
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	440b      	add	r3, r1
 800eb06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d302      	bcc.n	800eb12 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800eb0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb0e:	f000 fddd 	bl	800f6cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	7d1b      	ldrb	r3, [r3, #20]
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d10b      	bne.n	800eb32 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb1a:	4b61      	ldr	r3, [pc, #388]	; (800eca0 <tcp_slowtmr+0x580>)
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	2b28      	cmp	r3, #40	; 0x28
 800eb26:	d904      	bls.n	800eb32 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eb28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb34:	7d1b      	ldrb	r3, [r3, #20]
 800eb36:	2b09      	cmp	r3, #9
 800eb38:	d10b      	bne.n	800eb52 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb3a:	4b59      	ldr	r3, [pc, #356]	; (800eca0 <tcp_slowtmr+0x580>)
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	2bf0      	cmp	r3, #240	; 0xf0
 800eb46:	d904      	bls.n	800eb52 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800eb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d060      	beq.n	800ec1c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eb62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb64:	f000 fbfe 	bl	800f364 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d010      	beq.n	800eb90 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eb6e:	4b50      	ldr	r3, [pc, #320]	; (800ecb0 <tcp_slowtmr+0x590>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d106      	bne.n	800eb86 <tcp_slowtmr+0x466>
 800eb78:	4b4e      	ldr	r3, [pc, #312]	; (800ecb4 <tcp_slowtmr+0x594>)
 800eb7a:	f240 526d 	movw	r2, #1389	; 0x56d
 800eb7e:	494e      	ldr	r1, [pc, #312]	; (800ecb8 <tcp_slowtmr+0x598>)
 800eb80:	484e      	ldr	r0, [pc, #312]	; (800ecbc <tcp_slowtmr+0x59c>)
 800eb82:	f008 fe59 	bl	8017838 <iprintf>
        prev->next = pcb->next;
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	68da      	ldr	r2, [r3, #12]
 800eb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8c:	60da      	str	r2, [r3, #12]
 800eb8e:	e00f      	b.n	800ebb0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eb90:	4b47      	ldr	r3, [pc, #284]	; (800ecb0 <tcp_slowtmr+0x590>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d006      	beq.n	800eba8 <tcp_slowtmr+0x488>
 800eb9a:	4b46      	ldr	r3, [pc, #280]	; (800ecb4 <tcp_slowtmr+0x594>)
 800eb9c:	f240 5271 	movw	r2, #1393	; 0x571
 800eba0:	4947      	ldr	r1, [pc, #284]	; (800ecc0 <tcp_slowtmr+0x5a0>)
 800eba2:	4846      	ldr	r0, [pc, #280]	; (800ecbc <tcp_slowtmr+0x59c>)
 800eba4:	f008 fe48 	bl	8017838 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	4a40      	ldr	r2, [pc, #256]	; (800ecb0 <tcp_slowtmr+0x590>)
 800ebae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ebb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d013      	beq.n	800ebe0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ebc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ebc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebc8:	8ad2      	ldrh	r2, [r2, #22]
 800ebca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebcc:	8b09      	ldrh	r1, [r1, #24]
 800ebce:	9102      	str	r1, [sp, #8]
 800ebd0:	9201      	str	r2, [sp, #4]
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	462b      	mov	r3, r5
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	4601      	mov	r1, r0
 800ebda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebdc:	f004 f98a 	bl	8012ef4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ebe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe8:	7d1b      	ldrb	r3, [r3, #20]
 800ebea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ebf6:	6838      	ldr	r0, [r7, #0]
 800ebf8:	f7ff f9f4 	bl	800dfe4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ebfc:	4b31      	ldr	r3, [pc, #196]	; (800ecc4 <tcp_slowtmr+0x5a4>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d004      	beq.n	800ec12 <tcp_slowtmr+0x4f2>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f06f 010c 	mvn.w	r1, #12
 800ec0e:	68b8      	ldr	r0, [r7, #8]
 800ec10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ec12:	4b2c      	ldr	r3, [pc, #176]	; (800ecc4 <tcp_slowtmr+0x5a4>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d037      	beq.n	800ec8a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ec1a:	e592      	b.n	800e742 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ec20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	7f1b      	ldrb	r3, [r3, #28]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	7f1a      	ldrb	r2, [r3, #28]
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	7f5b      	ldrb	r3, [r3, #29]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d325      	bcc.n	800ec8a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ec3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec40:	2200      	movs	r2, #0
 800ec42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ec44:	4b1f      	ldr	r3, [pc, #124]	; (800ecc4 <tcp_slowtmr+0x5a4>)
 800ec46:	2200      	movs	r2, #0
 800ec48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00b      	beq.n	800ec6c <tcp_slowtmr+0x54c>
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec5c:	6912      	ldr	r2, [r2, #16]
 800ec5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec60:	4610      	mov	r0, r2
 800ec62:	4798      	blx	r3
 800ec64:	4603      	mov	r3, r0
 800ec66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ec6a:	e002      	b.n	800ec72 <tcp_slowtmr+0x552>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ec72:	4b14      	ldr	r3, [pc, #80]	; (800ecc4 <tcp_slowtmr+0x5a4>)
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d000      	beq.n	800ec7c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ec7a:	e562      	b.n	800e742 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ec7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d102      	bne.n	800ec8a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ec84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec86:	f003 fb81 	bl	801238c <tcp_output>
  while (pcb != NULL) {
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f47f ad5e 	bne.w	800e74e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ec96:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <tcp_slowtmr+0x5a8>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ec9c:	e069      	b.n	800ed72 <tcp_slowtmr+0x652>
 800ec9e:	bf00      	nop
 800eca0:	20008dfc 	.word	0x20008dfc
 800eca4:	000a4cb8 	.word	0x000a4cb8
 800eca8:	10624dd3 	.word	0x10624dd3
 800ecac:	000124f8 	.word	0x000124f8
 800ecb0:	20008e08 	.word	0x20008e08
 800ecb4:	080194a8 	.word	0x080194a8
 800ecb8:	080198e0 	.word	0x080198e0
 800ecbc:	080194ec 	.word	0x080194ec
 800ecc0:	0801990c 	.word	0x0801990c
 800ecc4:	20008e10 	.word	0x20008e10
 800ecc8:	20008e0c 	.word	0x20008e0c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecce:	7d1b      	ldrb	r3, [r3, #20]
 800ecd0:	2b0a      	cmp	r3, #10
 800ecd2:	d006      	beq.n	800ece2 <tcp_slowtmr+0x5c2>
 800ecd4:	4b2b      	ldr	r3, [pc, #172]	; (800ed84 <tcp_slowtmr+0x664>)
 800ecd6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ecda:	492b      	ldr	r1, [pc, #172]	; (800ed88 <tcp_slowtmr+0x668>)
 800ecdc:	482b      	ldr	r0, [pc, #172]	; (800ed8c <tcp_slowtmr+0x66c>)
 800ecde:	f008 fdab 	bl	8017838 <iprintf>
    pcb_remove = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ece8:	4b29      	ldr	r3, [pc, #164]	; (800ed90 <tcp_slowtmr+0x670>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	2bf0      	cmp	r3, #240	; 0xf0
 800ecf4:	d904      	bls.n	800ed00 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ecf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ed00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d02f      	beq.n	800ed68 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ed08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed0a:	f000 fb2b 	bl	800f364 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d010      	beq.n	800ed36 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ed14:	4b1f      	ldr	r3, [pc, #124]	; (800ed94 <tcp_slowtmr+0x674>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d106      	bne.n	800ed2c <tcp_slowtmr+0x60c>
 800ed1e:	4b19      	ldr	r3, [pc, #100]	; (800ed84 <tcp_slowtmr+0x664>)
 800ed20:	f240 52af 	movw	r2, #1455	; 0x5af
 800ed24:	491c      	ldr	r1, [pc, #112]	; (800ed98 <tcp_slowtmr+0x678>)
 800ed26:	4819      	ldr	r0, [pc, #100]	; (800ed8c <tcp_slowtmr+0x66c>)
 800ed28:	f008 fd86 	bl	8017838 <iprintf>
        prev->next = pcb->next;
 800ed2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	60da      	str	r2, [r3, #12]
 800ed34:	e00f      	b.n	800ed56 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ed36:	4b17      	ldr	r3, [pc, #92]	; (800ed94 <tcp_slowtmr+0x674>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d006      	beq.n	800ed4e <tcp_slowtmr+0x62e>
 800ed40:	4b10      	ldr	r3, [pc, #64]	; (800ed84 <tcp_slowtmr+0x664>)
 800ed42:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ed46:	4915      	ldr	r1, [pc, #84]	; (800ed9c <tcp_slowtmr+0x67c>)
 800ed48:	4810      	ldr	r0, [pc, #64]	; (800ed8c <tcp_slowtmr+0x66c>)
 800ed4a:	f008 fd75 	bl	8017838 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	4a10      	ldr	r2, [pc, #64]	; (800ed94 <tcp_slowtmr+0x674>)
 800ed54:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ed60:	69f8      	ldr	r0, [r7, #28]
 800ed62:	f7ff f93f 	bl	800dfe4 <tcp_free>
 800ed66:	e004      	b.n	800ed72 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ed68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1a9      	bne.n	800eccc <tcp_slowtmr+0x5ac>
    }
  }
}
 800ed78:	bf00      	nop
 800ed7a:	bf00      	nop
 800ed7c:	3730      	adds	r7, #48	; 0x30
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bdb0      	pop	{r4, r5, r7, pc}
 800ed82:	bf00      	nop
 800ed84:	080194a8 	.word	0x080194a8
 800ed88:	08019938 	.word	0x08019938
 800ed8c:	080194ec 	.word	0x080194ec
 800ed90:	20008dfc 	.word	0x20008dfc
 800ed94:	20008e0c 	.word	0x20008e0c
 800ed98:	08019968 	.word	0x08019968
 800ed9c:	08019990 	.word	0x08019990

0800eda0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eda6:	4b2d      	ldr	r3, [pc, #180]	; (800ee5c <tcp_fasttmr+0xbc>)
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	3301      	adds	r3, #1
 800edac:	b2da      	uxtb	r2, r3
 800edae:	4b2b      	ldr	r3, [pc, #172]	; (800ee5c <tcp_fasttmr+0xbc>)
 800edb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800edb2:	4b2b      	ldr	r3, [pc, #172]	; (800ee60 <tcp_fasttmr+0xc0>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800edb8:	e048      	b.n	800ee4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	7f9a      	ldrb	r2, [r3, #30]
 800edbe:	4b27      	ldr	r3, [pc, #156]	; (800ee5c <tcp_fasttmr+0xbc>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d03f      	beq.n	800ee46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800edc6:	4b25      	ldr	r3, [pc, #148]	; (800ee5c <tcp_fasttmr+0xbc>)
 800edc8:	781a      	ldrb	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8b5b      	ldrh	r3, [r3, #26]
 800edd2:	f003 0301 	and.w	r3, r3, #1
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d010      	beq.n	800edfc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	8b5b      	ldrh	r3, [r3, #26]
 800edde:	f043 0302 	orr.w	r3, r3, #2
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f003 facf 	bl	801238c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	8b5b      	ldrh	r3, [r3, #26]
 800edf2:	f023 0303 	bic.w	r3, r3, #3
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	8b5b      	ldrh	r3, [r3, #26]
 800ee00:	f003 0308 	and.w	r3, r3, #8
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d009      	beq.n	800ee1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	8b5b      	ldrh	r3, [r3, #26]
 800ee0c:	f023 0308 	bic.w	r3, r3, #8
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7ff fa78 	bl	800e30c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00a      	beq.n	800ee40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ee2a:	4b0e      	ldr	r3, [pc, #56]	; (800ee64 <tcp_fasttmr+0xc4>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f819 	bl	800ee68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee36:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <tcp_fasttmr+0xc4>)
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d000      	beq.n	800ee40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ee3e:	e7b8      	b.n	800edb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	607b      	str	r3, [r7, #4]
 800ee44:	e002      	b.n	800ee4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1b3      	bne.n	800edba <tcp_fasttmr+0x1a>
    }
  }
}
 800ee52:	bf00      	nop
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20008e12 	.word	0x20008e12
 800ee60:	20008e08 	.word	0x20008e08
 800ee64:	20008e10 	.word	0x20008e10

0800ee68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ee68:	b590      	push	{r4, r7, lr}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d109      	bne.n	800ee8a <tcp_process_refused_data+0x22>
 800ee76:	4b37      	ldr	r3, [pc, #220]	; (800ef54 <tcp_process_refused_data+0xec>)
 800ee78:	f240 6209 	movw	r2, #1545	; 0x609
 800ee7c:	4936      	ldr	r1, [pc, #216]	; (800ef58 <tcp_process_refused_data+0xf0>)
 800ee7e:	4837      	ldr	r0, [pc, #220]	; (800ef5c <tcp_process_refused_data+0xf4>)
 800ee80:	f008 fcda 	bl	8017838 <iprintf>
 800ee84:	f06f 030f 	mvn.w	r3, #15
 800ee88:	e060      	b.n	800ef4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee8e:	7b5b      	ldrb	r3, [r3, #13]
 800ee90:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee96:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00b      	beq.n	800eec0 <tcp_process_refused_data+0x58>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6918      	ldr	r0, [r3, #16]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	68ba      	ldr	r2, [r7, #8]
 800eeb6:	6879      	ldr	r1, [r7, #4]
 800eeb8:	47a0      	blx	r4
 800eeba:	4603      	mov	r3, r0
 800eebc:	73fb      	strb	r3, [r7, #15]
 800eebe:	e007      	b.n	800eed0 <tcp_process_refused_data+0x68>
 800eec0:	2300      	movs	r3, #0
 800eec2:	68ba      	ldr	r2, [r7, #8]
 800eec4:	6879      	ldr	r1, [r7, #4]
 800eec6:	2000      	movs	r0, #0
 800eec8:	f000 f8a4 	bl	800f014 <tcp_recv_null>
 800eecc:	4603      	mov	r3, r0
 800eece:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d12a      	bne.n	800ef2e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	f003 0320 	and.w	r3, r3, #32
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d033      	beq.n	800ef4a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eee6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eeea:	d005      	beq.n	800eef8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eef0:	3301      	adds	r3, #1
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00b      	beq.n	800ef1a <tcp_process_refused_data+0xb2>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6918      	ldr	r0, [r3, #16]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	2200      	movs	r2, #0
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	47a0      	blx	r4
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]
 800ef18:	e001      	b.n	800ef1e <tcp_process_refused_data+0xb6>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ef1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef22:	f113 0f0d 	cmn.w	r3, #13
 800ef26:	d110      	bne.n	800ef4a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ef28:	f06f 030c 	mvn.w	r3, #12
 800ef2c:	e00e      	b.n	800ef4c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ef2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef32:	f113 0f0d 	cmn.w	r3, #13
 800ef36:	d102      	bne.n	800ef3e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ef38:	f06f 030c 	mvn.w	r3, #12
 800ef3c:	e006      	b.n	800ef4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ef44:	f06f 0304 	mvn.w	r3, #4
 800ef48:	e000      	b.n	800ef4c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd90      	pop	{r4, r7, pc}
 800ef54:	080194a8 	.word	0x080194a8
 800ef58:	080199b8 	.word	0x080199b8
 800ef5c:	080194ec 	.word	0x080194ec

0800ef60 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ef68:	e007      	b.n	800ef7a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 f80a 	bl	800ef8a <tcp_seg_free>
    seg = next;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1f4      	bne.n	800ef6a <tcp_segs_free+0xa>
  }
}
 800ef80:	bf00      	nop
 800ef82:	bf00      	nop
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b082      	sub	sp, #8
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00c      	beq.n	800efb2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d004      	beq.n	800efaa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe fcdb 	bl	800d960 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800efaa:	6879      	ldr	r1, [r7, #4]
 800efac:	2003      	movs	r0, #3
 800efae:	f7fd fe61 	bl	800cc74 <memp_free>
  }
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d106      	bne.n	800efd8 <tcp_seg_copy+0x1c>
 800efca:	4b0f      	ldr	r3, [pc, #60]	; (800f008 <tcp_seg_copy+0x4c>)
 800efcc:	f240 6282 	movw	r2, #1666	; 0x682
 800efd0:	490e      	ldr	r1, [pc, #56]	; (800f00c <tcp_seg_copy+0x50>)
 800efd2:	480f      	ldr	r0, [pc, #60]	; (800f010 <tcp_seg_copy+0x54>)
 800efd4:	f008 fc30 	bl	8017838 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800efd8:	2003      	movs	r0, #3
 800efda:	f7fd fddb 	bl	800cb94 <memp_malloc>
 800efde:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <tcp_seg_copy+0x2e>
    return NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	e00a      	b.n	800f000 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800efea:	2210      	movs	r2, #16
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f008 fc0c 	bl	801780c <memcpy>
  pbuf_ref(cseg->p);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe fd51 	bl	800daa0 <pbuf_ref>
  return cseg;
 800effe:	68fb      	ldr	r3, [r7, #12]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	080194a8 	.word	0x080194a8
 800f00c:	080199fc 	.word	0x080199fc
 800f010:	080194ec 	.word	0x080194ec

0800f014 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
 800f020:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d109      	bne.n	800f03c <tcp_recv_null+0x28>
 800f028:	4b12      	ldr	r3, [pc, #72]	; (800f074 <tcp_recv_null+0x60>)
 800f02a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f02e:	4912      	ldr	r1, [pc, #72]	; (800f078 <tcp_recv_null+0x64>)
 800f030:	4812      	ldr	r0, [pc, #72]	; (800f07c <tcp_recv_null+0x68>)
 800f032:	f008 fc01 	bl	8017838 <iprintf>
 800f036:	f06f 030f 	mvn.w	r3, #15
 800f03a:	e016      	b.n	800f06a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d009      	beq.n	800f056 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	891b      	ldrh	r3, [r3, #8]
 800f046:	4619      	mov	r1, r3
 800f048:	68b8      	ldr	r0, [r7, #8]
 800f04a:	f7ff fb19 	bl	800e680 <tcp_recved>
    pbuf_free(p);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7fe fc86 	bl	800d960 <pbuf_free>
 800f054:	e008      	b.n	800f068 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d104      	bne.n	800f068 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f05e:	68b8      	ldr	r0, [r7, #8]
 800f060:	f7ff f9be 	bl	800e3e0 <tcp_close>
 800f064:	4603      	mov	r3, r0
 800f066:	e000      	b.n	800f06a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	080194a8 	.word	0x080194a8
 800f078:	08019a18 	.word	0x08019a18
 800f07c:	080194ec 	.word	0x080194ec

0800f080 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	db01      	blt.n	800f096 <tcp_kill_prio+0x16>
 800f092:	79fb      	ldrb	r3, [r7, #7]
 800f094:	e000      	b.n	800f098 <tcp_kill_prio+0x18>
 800f096:	237f      	movs	r3, #127	; 0x7f
 800f098:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f09a:	7afb      	ldrb	r3, [r7, #11]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d034      	beq.n	800f10a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f0a0:	7afb      	ldrb	r3, [r7, #11]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ae:	4b19      	ldr	r3, [pc, #100]	; (800f114 <tcp_kill_prio+0x94>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	617b      	str	r3, [r7, #20]
 800f0b4:	e01f      	b.n	800f0f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	7d5b      	ldrb	r3, [r3, #21]
 800f0ba:	7afa      	ldrb	r2, [r7, #11]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d80c      	bhi.n	800f0da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f0c4:	7afa      	ldrb	r2, [r7, #11]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d112      	bne.n	800f0f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0ca:	4b13      	ldr	r3, [pc, #76]	; (800f118 <tcp_kill_prio+0x98>)
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	6a1b      	ldr	r3, [r3, #32]
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d80a      	bhi.n	800f0f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f0da:	4b0f      	ldr	r3, [pc, #60]	; (800f118 <tcp_kill_prio+0x98>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	7d5b      	ldrb	r3, [r3, #21]
 800f0ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	617b      	str	r3, [r7, #20]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1dc      	bne.n	800f0b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d004      	beq.n	800f10c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f102:	6938      	ldr	r0, [r7, #16]
 800f104:	f7ff fa56 	bl	800e5b4 <tcp_abort>
 800f108:	e000      	b.n	800f10c <tcp_kill_prio+0x8c>
    return;
 800f10a:	bf00      	nop
  }
}
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	20008e08 	.word	0x20008e08
 800f118:	20008dfc 	.word	0x20008dfc

0800f11c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f126:	79fb      	ldrb	r3, [r7, #7]
 800f128:	2b08      	cmp	r3, #8
 800f12a:	d009      	beq.n	800f140 <tcp_kill_state+0x24>
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	2b09      	cmp	r3, #9
 800f130:	d006      	beq.n	800f140 <tcp_kill_state+0x24>
 800f132:	4b1a      	ldr	r3, [pc, #104]	; (800f19c <tcp_kill_state+0x80>)
 800f134:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f138:	4919      	ldr	r1, [pc, #100]	; (800f1a0 <tcp_kill_state+0x84>)
 800f13a:	481a      	ldr	r0, [pc, #104]	; (800f1a4 <tcp_kill_state+0x88>)
 800f13c:	f008 fb7c 	bl	8017838 <iprintf>

  inactivity = 0;
 800f140:	2300      	movs	r3, #0
 800f142:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f144:	2300      	movs	r3, #0
 800f146:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f148:	4b17      	ldr	r3, [pc, #92]	; (800f1a8 <tcp_kill_state+0x8c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	617b      	str	r3, [r7, #20]
 800f14e:	e017      	b.n	800f180 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	7d1b      	ldrb	r3, [r3, #20]
 800f154:	79fa      	ldrb	r2, [r7, #7]
 800f156:	429a      	cmp	r2, r3
 800f158:	d10f      	bne.n	800f17a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f15a:	4b14      	ldr	r3, [pc, #80]	; (800f1ac <tcp_kill_state+0x90>)
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	429a      	cmp	r2, r3
 800f168:	d807      	bhi.n	800f17a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f16a:	4b10      	ldr	r3, [pc, #64]	; (800f1ac <tcp_kill_state+0x90>)
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	617b      	str	r3, [r7, #20]
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d1e4      	bne.n	800f150 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d003      	beq.n	800f194 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f18c:	2100      	movs	r1, #0
 800f18e:	6938      	ldr	r0, [r7, #16]
 800f190:	f7ff f952 	bl	800e438 <tcp_abandon>
  }
}
 800f194:	bf00      	nop
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	080194a8 	.word	0x080194a8
 800f1a0:	08019a34 	.word	0x08019a34
 800f1a4:	080194ec 	.word	0x080194ec
 800f1a8:	20008e08 	.word	0x20008e08
 800f1ac:	20008dfc 	.word	0x20008dfc

0800f1b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1be:	4b12      	ldr	r3, [pc, #72]	; (800f208 <tcp_kill_timewait+0x58>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	60fb      	str	r3, [r7, #12]
 800f1c4:	e012      	b.n	800f1ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f1c6:	4b11      	ldr	r3, [pc, #68]	; (800f20c <tcp_kill_timewait+0x5c>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d807      	bhi.n	800f1e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f1d6:	4b0d      	ldr	r3, [pc, #52]	; (800f20c <tcp_kill_timewait+0x5c>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6a1b      	ldr	r3, [r3, #32]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1e9      	bne.n	800f1c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f1f8:	68b8      	ldr	r0, [r7, #8]
 800f1fa:	f7ff f9db 	bl	800e5b4 <tcp_abort>
  }
}
 800f1fe:	bf00      	nop
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20008e0c 	.word	0x20008e0c
 800f20c:	20008dfc 	.word	0x20008dfc

0800f210 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f216:	4b10      	ldr	r3, [pc, #64]	; (800f258 <tcp_handle_closepend+0x48>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f21c:	e014      	b.n	800f248 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	8b5b      	ldrh	r3, [r3, #26]
 800f228:	f003 0308 	and.w	r3, r3, #8
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d009      	beq.n	800f244 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	8b5b      	ldrh	r3, [r3, #26]
 800f234:	f023 0308 	bic.w	r3, r3, #8
 800f238:	b29a      	uxth	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7ff f864 	bl	800e30c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1e7      	bne.n	800f21e <tcp_handle_closepend+0xe>
  }
}
 800f24e:	bf00      	nop
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20008e08 	.word	0x20008e08

0800f25c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f266:	2001      	movs	r0, #1
 800f268:	f7fd fc94 	bl	800cb94 <memp_malloc>
 800f26c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d126      	bne.n	800f2c2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f274:	f7ff ffcc 	bl	800f210 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f278:	f7ff ff9a 	bl	800f1b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f27c:	2001      	movs	r0, #1
 800f27e:	f7fd fc89 	bl	800cb94 <memp_malloc>
 800f282:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d11b      	bne.n	800f2c2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f28a:	2009      	movs	r0, #9
 800f28c:	f7ff ff46 	bl	800f11c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f290:	2001      	movs	r0, #1
 800f292:	f7fd fc7f 	bl	800cb94 <memp_malloc>
 800f296:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d111      	bne.n	800f2c2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f29e:	2008      	movs	r0, #8
 800f2a0:	f7ff ff3c 	bl	800f11c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2a4:	2001      	movs	r0, #1
 800f2a6:	f7fd fc75 	bl	800cb94 <memp_malloc>
 800f2aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d107      	bne.n	800f2c2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff fee3 	bl	800f080 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2ba:	2001      	movs	r0, #1
 800f2bc:	f7fd fc6a 	bl	800cb94 <memp_malloc>
 800f2c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d03f      	beq.n	800f348 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f2c8:	229c      	movs	r2, #156	; 0x9c
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f008 faab 	bl	8017828 <memset>
    pcb->prio = prio;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	79fa      	ldrb	r2, [r7, #7]
 800f2d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f2de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f2e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	22ff      	movs	r2, #255	; 0xff
 800f2f6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f2fe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2206      	movs	r2, #6
 800f304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2206      	movs	r2, #6
 800f30c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f314:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2201      	movs	r2, #1
 800f31a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f31e:	4b0d      	ldr	r3, [pc, #52]	; (800f354 <tcp_alloc+0xf8>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f326:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <tcp_alloc+0xfc>)
 800f328:	781a      	ldrb	r2, [r3, #0]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f334:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4a08      	ldr	r2, [pc, #32]	; (800f35c <tcp_alloc+0x100>)
 800f33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	4a07      	ldr	r2, [pc, #28]	; (800f360 <tcp_alloc+0x104>)
 800f344:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f348:	68fb      	ldr	r3, [r7, #12]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	20008dfc 	.word	0x20008dfc
 800f358:	20008e12 	.word	0x20008e12
 800f35c:	0800f015 	.word	0x0800f015
 800f360:	006ddd00 	.word	0x006ddd00

0800f364 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d107      	bne.n	800f382 <tcp_pcb_purge+0x1e>
 800f372:	4b21      	ldr	r3, [pc, #132]	; (800f3f8 <tcp_pcb_purge+0x94>)
 800f374:	f640 0251 	movw	r2, #2129	; 0x851
 800f378:	4920      	ldr	r1, [pc, #128]	; (800f3fc <tcp_pcb_purge+0x98>)
 800f37a:	4821      	ldr	r0, [pc, #132]	; (800f400 <tcp_pcb_purge+0x9c>)
 800f37c:	f008 fa5c 	bl	8017838 <iprintf>
 800f380:	e037      	b.n	800f3f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	7d1b      	ldrb	r3, [r3, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d033      	beq.n	800f3f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f38e:	2b0a      	cmp	r3, #10
 800f390:	d02f      	beq.n	800f3f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f396:	2b01      	cmp	r3, #1
 800f398:	d02b      	beq.n	800f3f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d007      	beq.n	800f3b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe fada 	bl	800d960 <pbuf_free>
      pcb->refused_data = NULL;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d002      	beq.n	800f3c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f986 	bl	800f6cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fdc7 	bl	800ef60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff fdc2 	bl	800ef60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	080194a8 	.word	0x080194a8
 800f3fc:	08019af4 	.word	0x08019af4
 800f400:	080194ec 	.word	0x080194ec

0800f404 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d106      	bne.n	800f422 <tcp_pcb_remove+0x1e>
 800f414:	4b3e      	ldr	r3, [pc, #248]	; (800f510 <tcp_pcb_remove+0x10c>)
 800f416:	f640 0283 	movw	r2, #2179	; 0x883
 800f41a:	493e      	ldr	r1, [pc, #248]	; (800f514 <tcp_pcb_remove+0x110>)
 800f41c:	483e      	ldr	r0, [pc, #248]	; (800f518 <tcp_pcb_remove+0x114>)
 800f41e:	f008 fa0b 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <tcp_pcb_remove+0x32>
 800f428:	4b39      	ldr	r3, [pc, #228]	; (800f510 <tcp_pcb_remove+0x10c>)
 800f42a:	f640 0284 	movw	r2, #2180	; 0x884
 800f42e:	493b      	ldr	r1, [pc, #236]	; (800f51c <tcp_pcb_remove+0x118>)
 800f430:	4839      	ldr	r0, [pc, #228]	; (800f518 <tcp_pcb_remove+0x114>)
 800f432:	f008 fa01 	bl	8017838 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	683a      	ldr	r2, [r7, #0]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d105      	bne.n	800f44c <tcp_pcb_remove+0x48>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68da      	ldr	r2, [r3, #12]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	e013      	b.n	800f474 <tcp_pcb_remove+0x70>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	e00c      	b.n	800f46e <tcp_pcb_remove+0x6a>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d104      	bne.n	800f468 <tcp_pcb_remove+0x64>
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	68da      	ldr	r2, [r3, #12]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	60da      	str	r2, [r3, #12]
 800f466:	e005      	b.n	800f474 <tcp_pcb_remove+0x70>
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	60fb      	str	r3, [r7, #12]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d1ef      	bne.n	800f454 <tcp_pcb_remove+0x50>
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f47a:	6838      	ldr	r0, [r7, #0]
 800f47c:	f7ff ff72 	bl	800f364 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	7d1b      	ldrb	r3, [r3, #20]
 800f484:	2b0a      	cmp	r3, #10
 800f486:	d013      	beq.n	800f4b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d00f      	beq.n	800f4b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	8b5b      	ldrh	r3, [r3, #26]
 800f494:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d009      	beq.n	800f4b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	8b5b      	ldrh	r3, [r3, #26]
 800f4a0:	f043 0302 	orr.w	r3, r3, #2
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4aa:	6838      	ldr	r0, [r7, #0]
 800f4ac:	f002 ff6e 	bl	801238c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d020      	beq.n	800f4fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d006      	beq.n	800f4ce <tcp_pcb_remove+0xca>
 800f4c0:	4b13      	ldr	r3, [pc, #76]	; (800f510 <tcp_pcb_remove+0x10c>)
 800f4c2:	f640 0293 	movw	r2, #2195	; 0x893
 800f4c6:	4916      	ldr	r1, [pc, #88]	; (800f520 <tcp_pcb_remove+0x11c>)
 800f4c8:	4813      	ldr	r0, [pc, #76]	; (800f518 <tcp_pcb_remove+0x114>)
 800f4ca:	f008 f9b5 	bl	8017838 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d006      	beq.n	800f4e4 <tcp_pcb_remove+0xe0>
 800f4d6:	4b0e      	ldr	r3, [pc, #56]	; (800f510 <tcp_pcb_remove+0x10c>)
 800f4d8:	f640 0294 	movw	r2, #2196	; 0x894
 800f4dc:	4911      	ldr	r1, [pc, #68]	; (800f524 <tcp_pcb_remove+0x120>)
 800f4de:	480e      	ldr	r0, [pc, #56]	; (800f518 <tcp_pcb_remove+0x114>)
 800f4e0:	f008 f9aa 	bl	8017838 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d006      	beq.n	800f4fa <tcp_pcb_remove+0xf6>
 800f4ec:	4b08      	ldr	r3, [pc, #32]	; (800f510 <tcp_pcb_remove+0x10c>)
 800f4ee:	f640 0296 	movw	r2, #2198	; 0x896
 800f4f2:	490d      	ldr	r1, [pc, #52]	; (800f528 <tcp_pcb_remove+0x124>)
 800f4f4:	4808      	ldr	r0, [pc, #32]	; (800f518 <tcp_pcb_remove+0x114>)
 800f4f6:	f008 f99f 	bl	8017838 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2200      	movs	r2, #0
 800f504:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f506:	bf00      	nop
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	080194a8 	.word	0x080194a8
 800f514:	08019b10 	.word	0x08019b10
 800f518:	080194ec 	.word	0x080194ec
 800f51c:	08019b2c 	.word	0x08019b2c
 800f520:	08019b4c 	.word	0x08019b4c
 800f524:	08019b64 	.word	0x08019b64
 800f528:	08019b80 	.word	0x08019b80

0800f52c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d106      	bne.n	800f548 <tcp_next_iss+0x1c>
 800f53a:	4b0a      	ldr	r3, [pc, #40]	; (800f564 <tcp_next_iss+0x38>)
 800f53c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f540:	4909      	ldr	r1, [pc, #36]	; (800f568 <tcp_next_iss+0x3c>)
 800f542:	480a      	ldr	r0, [pc, #40]	; (800f56c <tcp_next_iss+0x40>)
 800f544:	f008 f978 	bl	8017838 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f548:	4b09      	ldr	r3, [pc, #36]	; (800f570 <tcp_next_iss+0x44>)
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	4b09      	ldr	r3, [pc, #36]	; (800f574 <tcp_next_iss+0x48>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4413      	add	r3, r2
 800f552:	4a07      	ldr	r2, [pc, #28]	; (800f570 <tcp_next_iss+0x44>)
 800f554:	6013      	str	r3, [r2, #0]
  return iss;
 800f556:	4b06      	ldr	r3, [pc, #24]	; (800f570 <tcp_next_iss+0x44>)
 800f558:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	080194a8 	.word	0x080194a8
 800f568:	08019b98 	.word	0x08019b98
 800f56c:	080194ec 	.word	0x080194ec
 800f570:	20000024 	.word	0x20000024
 800f574:	20008dfc 	.word	0x20008dfc

0800f578 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d106      	bne.n	800f59a <tcp_eff_send_mss_netif+0x22>
 800f58c:	4b14      	ldr	r3, [pc, #80]	; (800f5e0 <tcp_eff_send_mss_netif+0x68>)
 800f58e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f592:	4914      	ldr	r1, [pc, #80]	; (800f5e4 <tcp_eff_send_mss_netif+0x6c>)
 800f594:	4814      	ldr	r0, [pc, #80]	; (800f5e8 <tcp_eff_send_mss_netif+0x70>)
 800f596:	f008 f94f 	bl	8017838 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f5a0:	89fb      	ldrh	r3, [r7, #14]
 800f5a2:	e019      	b.n	800f5d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f5aa:	8afb      	ldrh	r3, [r7, #22]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d012      	beq.n	800f5d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f5b0:	2328      	movs	r3, #40	; 0x28
 800f5b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f5b4:	8afa      	ldrh	r2, [r7, #22]
 800f5b6:	8abb      	ldrh	r3, [r7, #20]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d904      	bls.n	800f5c6 <tcp_eff_send_mss_netif+0x4e>
 800f5bc:	8afa      	ldrh	r2, [r7, #22]
 800f5be:	8abb      	ldrh	r3, [r7, #20]
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	e000      	b.n	800f5c8 <tcp_eff_send_mss_netif+0x50>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f5ca:	8a7a      	ldrh	r2, [r7, #18]
 800f5cc:	89fb      	ldrh	r3, [r7, #14]
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	bf28      	it	cs
 800f5d2:	4613      	movcs	r3, r2
 800f5d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f5d6:	89fb      	ldrh	r3, [r7, #14]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3718      	adds	r7, #24
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	080194a8 	.word	0x080194a8
 800f5e4:	08019bb4 	.word	0x08019bb4
 800f5e8:	080194ec 	.word	0x080194ec

0800f5ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d119      	bne.n	800f634 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f600:	4b10      	ldr	r3, [pc, #64]	; (800f644 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f602:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f606:	4910      	ldr	r1, [pc, #64]	; (800f648 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f608:	4810      	ldr	r0, [pc, #64]	; (800f64c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f60a:	f008 f915 	bl	8017838 <iprintf>

  while (pcb != NULL) {
 800f60e:	e011      	b.n	800f634 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d108      	bne.n	800f62e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f7fe ffc6 	bl	800e5b4 <tcp_abort>
      pcb = next;
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	60fb      	str	r3, [r7, #12]
 800f62c:	e002      	b.n	800f634 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1ea      	bne.n	800f610 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f63a:	bf00      	nop
 800f63c:	bf00      	nop
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	080194a8 	.word	0x080194a8
 800f648:	08019bdc 	.word	0x08019bdc
 800f64c:	080194ec 	.word	0x080194ec

0800f650 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d02a      	beq.n	800f6b6 <tcp_netif_ip_addr_changed+0x66>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d026      	beq.n	800f6b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f668:	4b15      	ldr	r3, [pc, #84]	; (800f6c0 <tcp_netif_ip_addr_changed+0x70>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff ffbc 	bl	800f5ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f674:	4b13      	ldr	r3, [pc, #76]	; (800f6c4 <tcp_netif_ip_addr_changed+0x74>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff ffb6 	bl	800f5ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d017      	beq.n	800f6b6 <tcp_netif_ip_addr_changed+0x66>
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d013      	beq.n	800f6b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f68e:	4b0e      	ldr	r3, [pc, #56]	; (800f6c8 <tcp_netif_ip_addr_changed+0x78>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e00c      	b.n	800f6b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d103      	bne.n	800f6aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1ef      	bne.n	800f696 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f6b6:	bf00      	nop
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	20008e08 	.word	0x20008e08
 800f6c4:	20008e00 	.word	0x20008e00
 800f6c8:	20008e04 	.word	0x20008e04

0800f6cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d007      	beq.n	800f6ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff fc3d 	bl	800ef60 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f6ec:	bf00      	nop
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f6f4:	b590      	push	{r4, r7, lr}
 800f6f6:	b08d      	sub	sp, #52	; 0x34
 800f6f8:	af04      	add	r7, sp, #16
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d105      	bne.n	800f710 <tcp_input+0x1c>
 800f704:	4b9b      	ldr	r3, [pc, #620]	; (800f974 <tcp_input+0x280>)
 800f706:	2283      	movs	r2, #131	; 0x83
 800f708:	499b      	ldr	r1, [pc, #620]	; (800f978 <tcp_input+0x284>)
 800f70a:	489c      	ldr	r0, [pc, #624]	; (800f97c <tcp_input+0x288>)
 800f70c:	f008 f894 	bl	8017838 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4a9a      	ldr	r2, [pc, #616]	; (800f980 <tcp_input+0x28c>)
 800f716:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	895b      	ldrh	r3, [r3, #10]
 800f71c:	2b13      	cmp	r3, #19
 800f71e:	f240 83d1 	bls.w	800fec4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f722:	4b98      	ldr	r3, [pc, #608]	; (800f984 <tcp_input+0x290>)
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	4a97      	ldr	r2, [pc, #604]	; (800f984 <tcp_input+0x290>)
 800f728:	6812      	ldr	r2, [r2, #0]
 800f72a:	4611      	mov	r1, r2
 800f72c:	4618      	mov	r0, r3
 800f72e:	f005 ffd1 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	f040 83c7 	bne.w	800fec8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f73a:	4b92      	ldr	r3, [pc, #584]	; (800f984 <tcp_input+0x290>)
 800f73c:	695b      	ldr	r3, [r3, #20]
 800f73e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f742:	2be0      	cmp	r3, #224	; 0xe0
 800f744:	f000 83c0 	beq.w	800fec8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f748:	4b8d      	ldr	r3, [pc, #564]	; (800f980 <tcp_input+0x28c>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	899b      	ldrh	r3, [r3, #12]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	4618      	mov	r0, r3
 800f752:	f7fc fda7 	bl	800c2a4 <lwip_htons>
 800f756:	4603      	mov	r3, r0
 800f758:	0b1b      	lsrs	r3, r3, #12
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f762:	7cbb      	ldrb	r3, [r7, #18]
 800f764:	2b13      	cmp	r3, #19
 800f766:	f240 83b1 	bls.w	800fecc <tcp_input+0x7d8>
 800f76a:	7cbb      	ldrb	r3, [r7, #18]
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	891b      	ldrh	r3, [r3, #8]
 800f772:	429a      	cmp	r2, r3
 800f774:	f200 83aa 	bhi.w	800fecc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f778:	7cbb      	ldrb	r3, [r7, #18]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	3b14      	subs	r3, #20
 800f77e:	b29a      	uxth	r2, r3
 800f780:	4b81      	ldr	r3, [pc, #516]	; (800f988 <tcp_input+0x294>)
 800f782:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f784:	4b81      	ldr	r3, [pc, #516]	; (800f98c <tcp_input+0x298>)
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	895a      	ldrh	r2, [r3, #10]
 800f78e:	7cbb      	ldrb	r3, [r7, #18]
 800f790:	b29b      	uxth	r3, r3
 800f792:	429a      	cmp	r2, r3
 800f794:	d309      	bcc.n	800f7aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f796:	4b7c      	ldr	r3, [pc, #496]	; (800f988 <tcp_input+0x294>)
 800f798:	881a      	ldrh	r2, [r3, #0]
 800f79a:	4b7d      	ldr	r3, [pc, #500]	; (800f990 <tcp_input+0x29c>)
 800f79c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f79e:	7cbb      	ldrb	r3, [r7, #18]
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f7fe f856 	bl	800d854 <pbuf_remove_header>
 800f7a8:	e04e      	b.n	800f848 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d105      	bne.n	800f7be <tcp_input+0xca>
 800f7b2:	4b70      	ldr	r3, [pc, #448]	; (800f974 <tcp_input+0x280>)
 800f7b4:	22c2      	movs	r2, #194	; 0xc2
 800f7b6:	4977      	ldr	r1, [pc, #476]	; (800f994 <tcp_input+0x2a0>)
 800f7b8:	4870      	ldr	r0, [pc, #448]	; (800f97c <tcp_input+0x288>)
 800f7ba:	f008 f83d 	bl	8017838 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f7be:	2114      	movs	r1, #20
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7fe f847 	bl	800d854 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	895a      	ldrh	r2, [r3, #10]
 800f7ca:	4b71      	ldr	r3, [pc, #452]	; (800f990 <tcp_input+0x29c>)
 800f7cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f7ce:	4b6e      	ldr	r3, [pc, #440]	; (800f988 <tcp_input+0x294>)
 800f7d0:	881a      	ldrh	r2, [r3, #0]
 800f7d2:	4b6f      	ldr	r3, [pc, #444]	; (800f990 <tcp_input+0x29c>)
 800f7d4:	881b      	ldrh	r3, [r3, #0]
 800f7d6:	1ad3      	subs	r3, r2, r3
 800f7d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f7da:	4b6d      	ldr	r3, [pc, #436]	; (800f990 <tcp_input+0x29c>)
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7fe f837 	bl	800d854 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	895b      	ldrh	r3, [r3, #10]
 800f7ec:	8a3a      	ldrh	r2, [r7, #16]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	f200 836e 	bhi.w	800fed0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	4a64      	ldr	r2, [pc, #400]	; (800f98c <tcp_input+0x298>)
 800f7fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	8a3a      	ldrh	r2, [r7, #16]
 800f804:	4611      	mov	r1, r2
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe f824 	bl	800d854 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	891a      	ldrh	r2, [r3, #8]
 800f810:	8a3b      	ldrh	r3, [r7, #16]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	b29a      	uxth	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	895b      	ldrh	r3, [r3, #10]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d005      	beq.n	800f82e <tcp_input+0x13a>
 800f822:	4b54      	ldr	r3, [pc, #336]	; (800f974 <tcp_input+0x280>)
 800f824:	22df      	movs	r2, #223	; 0xdf
 800f826:	495c      	ldr	r1, [pc, #368]	; (800f998 <tcp_input+0x2a4>)
 800f828:	4854      	ldr	r0, [pc, #336]	; (800f97c <tcp_input+0x288>)
 800f82a:	f008 f805 	bl	8017838 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	891a      	ldrh	r2, [r3, #8]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	891b      	ldrh	r3, [r3, #8]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d005      	beq.n	800f848 <tcp_input+0x154>
 800f83c:	4b4d      	ldr	r3, [pc, #308]	; (800f974 <tcp_input+0x280>)
 800f83e:	22e0      	movs	r2, #224	; 0xe0
 800f840:	4956      	ldr	r1, [pc, #344]	; (800f99c <tcp_input+0x2a8>)
 800f842:	484e      	ldr	r0, [pc, #312]	; (800f97c <tcp_input+0x288>)
 800f844:	f007 fff8 	bl	8017838 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f848:	4b4d      	ldr	r3, [pc, #308]	; (800f980 <tcp_input+0x28c>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	881b      	ldrh	r3, [r3, #0]
 800f84e:	b29b      	uxth	r3, r3
 800f850:	4a4b      	ldr	r2, [pc, #300]	; (800f980 <tcp_input+0x28c>)
 800f852:	6814      	ldr	r4, [r2, #0]
 800f854:	4618      	mov	r0, r3
 800f856:	f7fc fd25 	bl	800c2a4 <lwip_htons>
 800f85a:	4603      	mov	r3, r0
 800f85c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f85e:	4b48      	ldr	r3, [pc, #288]	; (800f980 <tcp_input+0x28c>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	885b      	ldrh	r3, [r3, #2]
 800f864:	b29b      	uxth	r3, r3
 800f866:	4a46      	ldr	r2, [pc, #280]	; (800f980 <tcp_input+0x28c>)
 800f868:	6814      	ldr	r4, [r2, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fc fd1a 	bl	800c2a4 <lwip_htons>
 800f870:	4603      	mov	r3, r0
 800f872:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f874:	4b42      	ldr	r3, [pc, #264]	; (800f980 <tcp_input+0x28c>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	4a41      	ldr	r2, [pc, #260]	; (800f980 <tcp_input+0x28c>)
 800f87c:	6814      	ldr	r4, [r2, #0]
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fc fd25 	bl	800c2ce <lwip_htonl>
 800f884:	4603      	mov	r3, r0
 800f886:	6063      	str	r3, [r4, #4]
 800f888:	6863      	ldr	r3, [r4, #4]
 800f88a:	4a45      	ldr	r2, [pc, #276]	; (800f9a0 <tcp_input+0x2ac>)
 800f88c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f88e:	4b3c      	ldr	r3, [pc, #240]	; (800f980 <tcp_input+0x28c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	4a3a      	ldr	r2, [pc, #232]	; (800f980 <tcp_input+0x28c>)
 800f896:	6814      	ldr	r4, [r2, #0]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7fc fd18 	bl	800c2ce <lwip_htonl>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	60a3      	str	r3, [r4, #8]
 800f8a2:	68a3      	ldr	r3, [r4, #8]
 800f8a4:	4a3f      	ldr	r2, [pc, #252]	; (800f9a4 <tcp_input+0x2b0>)
 800f8a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f8a8:	4b35      	ldr	r3, [pc, #212]	; (800f980 <tcp_input+0x28c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	89db      	ldrh	r3, [r3, #14]
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	4a33      	ldr	r2, [pc, #204]	; (800f980 <tcp_input+0x28c>)
 800f8b2:	6814      	ldr	r4, [r2, #0]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fc fcf5 	bl	800c2a4 <lwip_htons>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f8be:	4b30      	ldr	r3, [pc, #192]	; (800f980 <tcp_input+0x28c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	899b      	ldrh	r3, [r3, #12]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fc fcec 	bl	800c2a4 <lwip_htons>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	4b34      	ldr	r3, [pc, #208]	; (800f9a8 <tcp_input+0x2b4>)
 800f8d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	891a      	ldrh	r2, [r3, #8]
 800f8de:	4b33      	ldr	r3, [pc, #204]	; (800f9ac <tcp_input+0x2b8>)
 800f8e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f8e2:	4b31      	ldr	r3, [pc, #196]	; (800f9a8 <tcp_input+0x2b4>)
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	f003 0303 	and.w	r3, r3, #3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <tcp_input+0x214>
    tcplen++;
 800f8ee:	4b2f      	ldr	r3, [pc, #188]	; (800f9ac <tcp_input+0x2b8>)
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	4b2d      	ldr	r3, [pc, #180]	; (800f9ac <tcp_input+0x2b8>)
 800f8f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	891a      	ldrh	r2, [r3, #8]
 800f8fe:	4b2b      	ldr	r3, [pc, #172]	; (800f9ac <tcp_input+0x2b8>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	429a      	cmp	r2, r3
 800f904:	f200 82e6 	bhi.w	800fed4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f908:	2300      	movs	r3, #0
 800f90a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f90c:	4b28      	ldr	r3, [pc, #160]	; (800f9b0 <tcp_input+0x2bc>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	61fb      	str	r3, [r7, #28]
 800f912:	e09d      	b.n	800fa50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	7d1b      	ldrb	r3, [r3, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d105      	bne.n	800f928 <tcp_input+0x234>
 800f91c:	4b15      	ldr	r3, [pc, #84]	; (800f974 <tcp_input+0x280>)
 800f91e:	22fb      	movs	r2, #251	; 0xfb
 800f920:	4924      	ldr	r1, [pc, #144]	; (800f9b4 <tcp_input+0x2c0>)
 800f922:	4816      	ldr	r0, [pc, #88]	; (800f97c <tcp_input+0x288>)
 800f924:	f007 ff88 	bl	8017838 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	7d1b      	ldrb	r3, [r3, #20]
 800f92c:	2b0a      	cmp	r3, #10
 800f92e:	d105      	bne.n	800f93c <tcp_input+0x248>
 800f930:	4b10      	ldr	r3, [pc, #64]	; (800f974 <tcp_input+0x280>)
 800f932:	22fc      	movs	r2, #252	; 0xfc
 800f934:	4920      	ldr	r1, [pc, #128]	; (800f9b8 <tcp_input+0x2c4>)
 800f936:	4811      	ldr	r0, [pc, #68]	; (800f97c <tcp_input+0x288>)
 800f938:	f007 ff7e 	bl	8017838 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	7d1b      	ldrb	r3, [r3, #20]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d105      	bne.n	800f950 <tcp_input+0x25c>
 800f944:	4b0b      	ldr	r3, [pc, #44]	; (800f974 <tcp_input+0x280>)
 800f946:	22fd      	movs	r2, #253	; 0xfd
 800f948:	491c      	ldr	r1, [pc, #112]	; (800f9bc <tcp_input+0x2c8>)
 800f94a:	480c      	ldr	r0, [pc, #48]	; (800f97c <tcp_input+0x288>)
 800f94c:	f007 ff74 	bl	8017838 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	7a1b      	ldrb	r3, [r3, #8]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d033      	beq.n	800f9c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	7a1a      	ldrb	r2, [r3, #8]
 800f95c:	4b09      	ldr	r3, [pc, #36]	; (800f984 <tcp_input+0x290>)
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f964:	3301      	adds	r3, #1
 800f966:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f968:	429a      	cmp	r2, r3
 800f96a:	d029      	beq.n	800f9c0 <tcp_input+0x2cc>
      prev = pcb;
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	61bb      	str	r3, [r7, #24]
      continue;
 800f970:	e06b      	b.n	800fa4a <tcp_input+0x356>
 800f972:	bf00      	nop
 800f974:	08019c10 	.word	0x08019c10
 800f978:	08019c44 	.word	0x08019c44
 800f97c:	08019c5c 	.word	0x08019c5c
 800f980:	20008e24 	.word	0x20008e24
 800f984:	2000588c 	.word	0x2000588c
 800f988:	20008e28 	.word	0x20008e28
 800f98c:	20008e2c 	.word	0x20008e2c
 800f990:	20008e2a 	.word	0x20008e2a
 800f994:	08019c84 	.word	0x08019c84
 800f998:	08019c94 	.word	0x08019c94
 800f99c:	08019ca0 	.word	0x08019ca0
 800f9a0:	20008e34 	.word	0x20008e34
 800f9a4:	20008e38 	.word	0x20008e38
 800f9a8:	20008e40 	.word	0x20008e40
 800f9ac:	20008e3e 	.word	0x20008e3e
 800f9b0:	20008e08 	.word	0x20008e08
 800f9b4:	08019cc0 	.word	0x08019cc0
 800f9b8:	08019ce8 	.word	0x08019ce8
 800f9bc:	08019d14 	.word	0x08019d14
    }

    if (pcb->remote_port == tcphdr->src &&
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	8b1a      	ldrh	r2, [r3, #24]
 800f9c4:	4b72      	ldr	r3, [pc, #456]	; (800fb90 <tcp_input+0x49c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d13a      	bne.n	800fa46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	8ada      	ldrh	r2, [r3, #22]
 800f9d4:	4b6e      	ldr	r3, [pc, #440]	; (800fb90 <tcp_input+0x49c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	885b      	ldrh	r3, [r3, #2]
 800f9da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d132      	bne.n	800fa46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	685a      	ldr	r2, [r3, #4]
 800f9e4:	4b6b      	ldr	r3, [pc, #428]	; (800fb94 <tcp_input+0x4a0>)
 800f9e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d12c      	bne.n	800fa46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	4b68      	ldr	r3, [pc, #416]	; (800fb94 <tcp_input+0x4a0>)
 800f9f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d126      	bne.n	800fa46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	69fa      	ldr	r2, [r7, #28]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d106      	bne.n	800fa10 <tcp_input+0x31c>
 800fa02:	4b65      	ldr	r3, [pc, #404]	; (800fb98 <tcp_input+0x4a4>)
 800fa04:	f240 120d 	movw	r2, #269	; 0x10d
 800fa08:	4964      	ldr	r1, [pc, #400]	; (800fb9c <tcp_input+0x4a8>)
 800fa0a:	4865      	ldr	r0, [pc, #404]	; (800fba0 <tcp_input+0x4ac>)
 800fa0c:	f007 ff14 	bl	8017838 <iprintf>
      if (prev != NULL) {
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00a      	beq.n	800fa2c <tcp_input+0x338>
        prev->next = pcb->next;
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	68da      	ldr	r2, [r3, #12]
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fa1e:	4b61      	ldr	r3, [pc, #388]	; (800fba4 <tcp_input+0x4b0>)
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fa26:	4a5f      	ldr	r2, [pc, #380]	; (800fba4 <tcp_input+0x4b0>)
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	69fa      	ldr	r2, [r7, #28]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d111      	bne.n	800fa5a <tcp_input+0x366>
 800fa36:	4b58      	ldr	r3, [pc, #352]	; (800fb98 <tcp_input+0x4a4>)
 800fa38:	f240 1215 	movw	r2, #277	; 0x115
 800fa3c:	495a      	ldr	r1, [pc, #360]	; (800fba8 <tcp_input+0x4b4>)
 800fa3e:	4858      	ldr	r0, [pc, #352]	; (800fba0 <tcp_input+0x4ac>)
 800fa40:	f007 fefa 	bl	8017838 <iprintf>
      break;
 800fa44:	e009      	b.n	800fa5a <tcp_input+0x366>
    }
    prev = pcb;
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	61fb      	str	r3, [r7, #28]
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f47f af5e 	bne.w	800f914 <tcp_input+0x220>
 800fa58:	e000      	b.n	800fa5c <tcp_input+0x368>
      break;
 800fa5a:	bf00      	nop
  }

  if (pcb == NULL) {
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f040 80aa 	bne.w	800fbb8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa64:	4b51      	ldr	r3, [pc, #324]	; (800fbac <tcp_input+0x4b8>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	61fb      	str	r3, [r7, #28]
 800fa6a:	e03f      	b.n	800faec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	7d1b      	ldrb	r3, [r3, #20]
 800fa70:	2b0a      	cmp	r3, #10
 800fa72:	d006      	beq.n	800fa82 <tcp_input+0x38e>
 800fa74:	4b48      	ldr	r3, [pc, #288]	; (800fb98 <tcp_input+0x4a4>)
 800fa76:	f240 121f 	movw	r2, #287	; 0x11f
 800fa7a:	494d      	ldr	r1, [pc, #308]	; (800fbb0 <tcp_input+0x4bc>)
 800fa7c:	4848      	ldr	r0, [pc, #288]	; (800fba0 <tcp_input+0x4ac>)
 800fa7e:	f007 fedb 	bl	8017838 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	7a1b      	ldrb	r3, [r3, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d009      	beq.n	800fa9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	7a1a      	ldrb	r2, [r3, #8]
 800fa8e:	4b41      	ldr	r3, [pc, #260]	; (800fb94 <tcp_input+0x4a0>)
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa96:	3301      	adds	r3, #1
 800fa98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d122      	bne.n	800fae4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	8b1a      	ldrh	r2, [r3, #24]
 800faa2:	4b3b      	ldr	r3, [pc, #236]	; (800fb90 <tcp_input+0x49c>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	881b      	ldrh	r3, [r3, #0]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	429a      	cmp	r2, r3
 800faac:	d11b      	bne.n	800fae6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	8ada      	ldrh	r2, [r3, #22]
 800fab2:	4b37      	ldr	r3, [pc, #220]	; (800fb90 <tcp_input+0x49c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	885b      	ldrh	r3, [r3, #2]
 800fab8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800faba:	429a      	cmp	r2, r3
 800fabc:	d113      	bne.n	800fae6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	685a      	ldr	r2, [r3, #4]
 800fac2:	4b34      	ldr	r3, [pc, #208]	; (800fb94 <tcp_input+0x4a0>)
 800fac4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d10d      	bne.n	800fae6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	4b31      	ldr	r3, [pc, #196]	; (800fb94 <tcp_input+0x4a0>)
 800fad0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d107      	bne.n	800fae6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fad6:	69f8      	ldr	r0, [r7, #28]
 800fad8:	f000 fb56 	bl	8010188 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7fd ff3f 	bl	800d960 <pbuf_free>
        return;
 800fae2:	e1fd      	b.n	800fee0 <tcp_input+0x7ec>
        continue;
 800fae4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	61fb      	str	r3, [r7, #28]
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1bc      	bne.n	800fa6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800faf6:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <tcp_input+0x4c0>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	617b      	str	r3, [r7, #20]
 800fafc:	e02a      	b.n	800fb54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	7a1b      	ldrb	r3, [r3, #8]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00c      	beq.n	800fb20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	7a1a      	ldrb	r2, [r3, #8]
 800fb0a:	4b22      	ldr	r3, [pc, #136]	; (800fb94 <tcp_input+0x4a0>)
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb12:	3301      	adds	r3, #1
 800fb14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d002      	beq.n	800fb20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	61bb      	str	r3, [r7, #24]
        continue;
 800fb1e:	e016      	b.n	800fb4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	8ada      	ldrh	r2, [r3, #22]
 800fb24:	4b1a      	ldr	r3, [pc, #104]	; (800fb90 <tcp_input+0x49c>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	885b      	ldrh	r3, [r3, #2]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d10c      	bne.n	800fb4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	4b17      	ldr	r3, [pc, #92]	; (800fb94 <tcp_input+0x4a0>)
 800fb36:	695b      	ldr	r3, [r3, #20]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d00f      	beq.n	800fb5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00d      	beq.n	800fb5e <tcp_input+0x46a>
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d009      	beq.n	800fb5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1d1      	bne.n	800fafe <tcp_input+0x40a>
 800fb5a:	e000      	b.n	800fb5e <tcp_input+0x46a>
            break;
 800fb5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d029      	beq.n	800fbb8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00a      	beq.n	800fb80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	68da      	ldr	r2, [r3, #12]
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fb72:	4b10      	ldr	r3, [pc, #64]	; (800fbb4 <tcp_input+0x4c0>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fb7a:	4a0e      	ldr	r2, [pc, #56]	; (800fbb4 <tcp_input+0x4c0>)
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fb80:	6978      	ldr	r0, [r7, #20]
 800fb82:	f000 fa03 	bl	800ff8c <tcp_listen_input>
      }
      pbuf_free(p);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7fd feea 	bl	800d960 <pbuf_free>
      return;
 800fb8c:	e1a8      	b.n	800fee0 <tcp_input+0x7ec>
 800fb8e:	bf00      	nop
 800fb90:	20008e24 	.word	0x20008e24
 800fb94:	2000588c 	.word	0x2000588c
 800fb98:	08019c10 	.word	0x08019c10
 800fb9c:	08019d3c 	.word	0x08019d3c
 800fba0:	08019c5c 	.word	0x08019c5c
 800fba4:	20008e08 	.word	0x20008e08
 800fba8:	08019d68 	.word	0x08019d68
 800fbac:	20008e0c 	.word	0x20008e0c
 800fbb0:	08019d94 	.word	0x08019d94
 800fbb4:	20008e04 	.word	0x20008e04
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 8158 	beq.w	800fe70 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fbc0:	4b95      	ldr	r3, [pc, #596]	; (800fe18 <tcp_input+0x724>)
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	891a      	ldrh	r2, [r3, #8]
 800fbca:	4b93      	ldr	r3, [pc, #588]	; (800fe18 <tcp_input+0x724>)
 800fbcc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fbce:	4a92      	ldr	r2, [pc, #584]	; (800fe18 <tcp_input+0x724>)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fbd4:	4b91      	ldr	r3, [pc, #580]	; (800fe1c <tcp_input+0x728>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a8f      	ldr	r2, [pc, #572]	; (800fe18 <tcp_input+0x724>)
 800fbda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fbdc:	4b90      	ldr	r3, [pc, #576]	; (800fe20 <tcp_input+0x72c>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fbe2:	4b90      	ldr	r3, [pc, #576]	; (800fe24 <tcp_input+0x730>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fbe8:	4b8f      	ldr	r3, [pc, #572]	; (800fe28 <tcp_input+0x734>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fbee:	4b8f      	ldr	r3, [pc, #572]	; (800fe2c <tcp_input+0x738>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	f003 0308 	and.w	r3, r3, #8
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d006      	beq.n	800fc08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	7b5b      	ldrb	r3, [r3, #13]
 800fbfe:	f043 0301 	orr.w	r3, r3, #1
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d017      	beq.n	800fc40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc10:	69f8      	ldr	r0, [r7, #28]
 800fc12:	f7ff f929 	bl	800ee68 <tcp_process_refused_data>
 800fc16:	4603      	mov	r3, r0
 800fc18:	f113 0f0d 	cmn.w	r3, #13
 800fc1c:	d007      	beq.n	800fc2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00c      	beq.n	800fc40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc26:	4b82      	ldr	r3, [pc, #520]	; (800fe30 <tcp_input+0x73c>)
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d008      	beq.n	800fc40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f040 80e3 	bne.w	800fdfe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fc38:	69f8      	ldr	r0, [r7, #28]
 800fc3a:	f003 f9ad 	bl	8012f98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fc3e:	e0de      	b.n	800fdfe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fc40:	4a7c      	ldr	r2, [pc, #496]	; (800fe34 <tcp_input+0x740>)
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fc46:	69f8      	ldr	r0, [r7, #28]
 800fc48:	f000 fb18 	bl	801027c <tcp_process>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fc50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc54:	f113 0f0d 	cmn.w	r3, #13
 800fc58:	f000 80d3 	beq.w	800fe02 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fc5c:	4b71      	ldr	r3, [pc, #452]	; (800fe24 <tcp_input+0x730>)
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	f003 0308 	and.w	r3, r3, #8
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d015      	beq.n	800fc94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d008      	beq.n	800fc84 <tcp_input+0x590>
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc78:	69fa      	ldr	r2, [r7, #28]
 800fc7a:	6912      	ldr	r2, [r2, #16]
 800fc7c:	f06f 010d 	mvn.w	r1, #13
 800fc80:	4610      	mov	r0, r2
 800fc82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc84:	69f9      	ldr	r1, [r7, #28]
 800fc86:	486c      	ldr	r0, [pc, #432]	; (800fe38 <tcp_input+0x744>)
 800fc88:	f7ff fbbc 	bl	800f404 <tcp_pcb_remove>
        tcp_free(pcb);
 800fc8c:	69f8      	ldr	r0, [r7, #28]
 800fc8e:	f7fe f9a9 	bl	800dfe4 <tcp_free>
 800fc92:	e0da      	b.n	800fe4a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fc98:	4b63      	ldr	r3, [pc, #396]	; (800fe28 <tcp_input+0x734>)
 800fc9a:	881b      	ldrh	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d01d      	beq.n	800fcdc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fca0:	4b61      	ldr	r3, [pc, #388]	; (800fe28 <tcp_input+0x734>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00a      	beq.n	800fcc6 <tcp_input+0x5d2>
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcb6:	69fa      	ldr	r2, [r7, #28]
 800fcb8:	6910      	ldr	r0, [r2, #16]
 800fcba:	89fa      	ldrh	r2, [r7, #14]
 800fcbc:	69f9      	ldr	r1, [r7, #28]
 800fcbe:	4798      	blx	r3
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	74fb      	strb	r3, [r7, #19]
 800fcc4:	e001      	b.n	800fcca <tcp_input+0x5d6>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fcce:	f113 0f0d 	cmn.w	r3, #13
 800fcd2:	f000 8098 	beq.w	800fe06 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fcd6:	4b54      	ldr	r3, [pc, #336]	; (800fe28 <tcp_input+0x734>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fcdc:	69f8      	ldr	r0, [r7, #28]
 800fcde:	f000 f915 	bl	800ff0c <tcp_input_delayed_close>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f040 8090 	bne.w	800fe0a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fcea:	4b4d      	ldr	r3, [pc, #308]	; (800fe20 <tcp_input+0x72c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d041      	beq.n	800fd76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d006      	beq.n	800fd08 <tcp_input+0x614>
 800fcfa:	4b50      	ldr	r3, [pc, #320]	; (800fe3c <tcp_input+0x748>)
 800fcfc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fd00:	494f      	ldr	r1, [pc, #316]	; (800fe40 <tcp_input+0x74c>)
 800fd02:	4850      	ldr	r0, [pc, #320]	; (800fe44 <tcp_input+0x750>)
 800fd04:	f007 fd98 	bl	8017838 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	8b5b      	ldrh	r3, [r3, #26]
 800fd0c:	f003 0310 	and.w	r3, r3, #16
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d008      	beq.n	800fd26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fd14:	4b42      	ldr	r3, [pc, #264]	; (800fe20 <tcp_input+0x72c>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fd fe21 	bl	800d960 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fd1e:	69f8      	ldr	r0, [r7, #28]
 800fd20:	f7fe fc48 	bl	800e5b4 <tcp_abort>
            goto aborted;
 800fd24:	e091      	b.n	800fe4a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00c      	beq.n	800fd4a <tcp_input+0x656>
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	6918      	ldr	r0, [r3, #16]
 800fd3a:	4b39      	ldr	r3, [pc, #228]	; (800fe20 <tcp_input+0x72c>)
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	2300      	movs	r3, #0
 800fd40:	69f9      	ldr	r1, [r7, #28]
 800fd42:	47a0      	blx	r4
 800fd44:	4603      	mov	r3, r0
 800fd46:	74fb      	strb	r3, [r7, #19]
 800fd48:	e008      	b.n	800fd5c <tcp_input+0x668>
 800fd4a:	4b35      	ldr	r3, [pc, #212]	; (800fe20 <tcp_input+0x72c>)
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	69f9      	ldr	r1, [r7, #28]
 800fd52:	2000      	movs	r0, #0
 800fd54:	f7ff f95e 	bl	800f014 <tcp_recv_null>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fd5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd60:	f113 0f0d 	cmn.w	r3, #13
 800fd64:	d053      	beq.n	800fe0e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fd66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d003      	beq.n	800fd76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fd6e:	4b2c      	ldr	r3, [pc, #176]	; (800fe20 <tcp_input+0x72c>)
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fd76:	4b2b      	ldr	r3, [pc, #172]	; (800fe24 <tcp_input+0x730>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	f003 0320 	and.w	r3, r3, #32
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d030      	beq.n	800fde4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d009      	beq.n	800fd9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd8e:	7b5a      	ldrb	r2, [r3, #13]
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd94:	f042 0220 	orr.w	r2, r2, #32
 800fd98:	b2d2      	uxtb	r2, r2
 800fd9a:	735a      	strb	r2, [r3, #13]
 800fd9c:	e022      	b.n	800fde4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fda2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fda6:	d005      	beq.n	800fdb4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdac:	3301      	adds	r3, #1
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00b      	beq.n	800fdd6 <tcp_input+0x6e2>
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	6918      	ldr	r0, [r3, #16]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2200      	movs	r2, #0
 800fdcc:	69f9      	ldr	r1, [r7, #28]
 800fdce:	47a0      	blx	r4
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	74fb      	strb	r3, [r7, #19]
 800fdd4:	e001      	b.n	800fdda <tcp_input+0x6e6>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fdda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fdde:	f113 0f0d 	cmn.w	r3, #13
 800fde2:	d016      	beq.n	800fe12 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fde4:	4b13      	ldr	r3, [pc, #76]	; (800fe34 <tcp_input+0x740>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fdea:	69f8      	ldr	r0, [r7, #28]
 800fdec:	f000 f88e 	bl	800ff0c <tcp_input_delayed_close>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d128      	bne.n	800fe48 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fdf6:	69f8      	ldr	r0, [r7, #28]
 800fdf8:	f002 fac8 	bl	801238c <tcp_output>
 800fdfc:	e025      	b.n	800fe4a <tcp_input+0x756>
        goto aborted;
 800fdfe:	bf00      	nop
 800fe00:	e023      	b.n	800fe4a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fe02:	bf00      	nop
 800fe04:	e021      	b.n	800fe4a <tcp_input+0x756>
              goto aborted;
 800fe06:	bf00      	nop
 800fe08:	e01f      	b.n	800fe4a <tcp_input+0x756>
          goto aborted;
 800fe0a:	bf00      	nop
 800fe0c:	e01d      	b.n	800fe4a <tcp_input+0x756>
            goto aborted;
 800fe0e:	bf00      	nop
 800fe10:	e01b      	b.n	800fe4a <tcp_input+0x756>
              goto aborted;
 800fe12:	bf00      	nop
 800fe14:	e019      	b.n	800fe4a <tcp_input+0x756>
 800fe16:	bf00      	nop
 800fe18:	20008e14 	.word	0x20008e14
 800fe1c:	20008e24 	.word	0x20008e24
 800fe20:	20008e44 	.word	0x20008e44
 800fe24:	20008e41 	.word	0x20008e41
 800fe28:	20008e3c 	.word	0x20008e3c
 800fe2c:	20008e40 	.word	0x20008e40
 800fe30:	20008e3e 	.word	0x20008e3e
 800fe34:	20008e48 	.word	0x20008e48
 800fe38:	20008e08 	.word	0x20008e08
 800fe3c:	08019c10 	.word	0x08019c10
 800fe40:	08019dc4 	.word	0x08019dc4
 800fe44:	08019c5c 	.word	0x08019c5c
          goto aborted;
 800fe48:	bf00      	nop
    tcp_input_pcb = NULL;
 800fe4a:	4b27      	ldr	r3, [pc, #156]	; (800fee8 <tcp_input+0x7f4>)
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fe50:	4b26      	ldr	r3, [pc, #152]	; (800feec <tcp_input+0x7f8>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fe56:	4b26      	ldr	r3, [pc, #152]	; (800fef0 <tcp_input+0x7fc>)
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d03f      	beq.n	800fede <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fe5e:	4b24      	ldr	r3, [pc, #144]	; (800fef0 <tcp_input+0x7fc>)
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fd fd7c 	bl	800d960 <pbuf_free>
      inseg.p = NULL;
 800fe68:	4b21      	ldr	r3, [pc, #132]	; (800fef0 <tcp_input+0x7fc>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fe6e:	e036      	b.n	800fede <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fe70:	4b20      	ldr	r3, [pc, #128]	; (800fef4 <tcp_input+0x800>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	899b      	ldrh	r3, [r3, #12]
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fc fa13 	bl	800c2a4 <lwip_htons>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	f003 0304 	and.w	r3, r3, #4
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d118      	bne.n	800febc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe8a:	4b1b      	ldr	r3, [pc, #108]	; (800fef8 <tcp_input+0x804>)
 800fe8c:	6819      	ldr	r1, [r3, #0]
 800fe8e:	4b1b      	ldr	r3, [pc, #108]	; (800fefc <tcp_input+0x808>)
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	4b1a      	ldr	r3, [pc, #104]	; (800ff00 <tcp_input+0x80c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe9a:	4b16      	ldr	r3, [pc, #88]	; (800fef4 <tcp_input+0x800>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe9e:	885b      	ldrh	r3, [r3, #2]
 800fea0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fea2:	4a14      	ldr	r2, [pc, #80]	; (800fef4 <tcp_input+0x800>)
 800fea4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea6:	8812      	ldrh	r2, [r2, #0]
 800fea8:	b292      	uxth	r2, r2
 800feaa:	9202      	str	r2, [sp, #8]
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	4b15      	ldr	r3, [pc, #84]	; (800ff04 <tcp_input+0x810>)
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	4b15      	ldr	r3, [pc, #84]	; (800ff08 <tcp_input+0x814>)
 800feb4:	4602      	mov	r2, r0
 800feb6:	2000      	movs	r0, #0
 800feb8:	f003 f81c 	bl	8012ef4 <tcp_rst>
    pbuf_free(p);
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7fd fd4f 	bl	800d960 <pbuf_free>
  return;
 800fec2:	e00c      	b.n	800fede <tcp_input+0x7ea>
    goto dropped;
 800fec4:	bf00      	nop
 800fec6:	e006      	b.n	800fed6 <tcp_input+0x7e2>
    goto dropped;
 800fec8:	bf00      	nop
 800feca:	e004      	b.n	800fed6 <tcp_input+0x7e2>
    goto dropped;
 800fecc:	bf00      	nop
 800fece:	e002      	b.n	800fed6 <tcp_input+0x7e2>
      goto dropped;
 800fed0:	bf00      	nop
 800fed2:	e000      	b.n	800fed6 <tcp_input+0x7e2>
      goto dropped;
 800fed4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7fd fd42 	bl	800d960 <pbuf_free>
 800fedc:	e000      	b.n	800fee0 <tcp_input+0x7ec>
  return;
 800fede:	bf00      	nop
}
 800fee0:	3724      	adds	r7, #36	; 0x24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd90      	pop	{r4, r7, pc}
 800fee6:	bf00      	nop
 800fee8:	20008e48 	.word	0x20008e48
 800feec:	20008e44 	.word	0x20008e44
 800fef0:	20008e14 	.word	0x20008e14
 800fef4:	20008e24 	.word	0x20008e24
 800fef8:	20008e38 	.word	0x20008e38
 800fefc:	20008e3e 	.word	0x20008e3e
 800ff00:	20008e34 	.word	0x20008e34
 800ff04:	2000589c 	.word	0x2000589c
 800ff08:	200058a0 	.word	0x200058a0

0800ff0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d106      	bne.n	800ff28 <tcp_input_delayed_close+0x1c>
 800ff1a:	4b17      	ldr	r3, [pc, #92]	; (800ff78 <tcp_input_delayed_close+0x6c>)
 800ff1c:	f240 225a 	movw	r2, #602	; 0x25a
 800ff20:	4916      	ldr	r1, [pc, #88]	; (800ff7c <tcp_input_delayed_close+0x70>)
 800ff22:	4817      	ldr	r0, [pc, #92]	; (800ff80 <tcp_input_delayed_close+0x74>)
 800ff24:	f007 fc88 	bl	8017838 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ff28:	4b16      	ldr	r3, [pc, #88]	; (800ff84 <tcp_input_delayed_close+0x78>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	f003 0310 	and.w	r3, r3, #16
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d01c      	beq.n	800ff6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	8b5b      	ldrh	r3, [r3, #26]
 800ff38:	f003 0310 	and.w	r3, r3, #16
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d10d      	bne.n	800ff5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d008      	beq.n	800ff5c <tcp_input_delayed_close+0x50>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	6912      	ldr	r2, [r2, #16]
 800ff54:	f06f 010e 	mvn.w	r1, #14
 800ff58:	4610      	mov	r0, r2
 800ff5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff5c:	6879      	ldr	r1, [r7, #4]
 800ff5e:	480a      	ldr	r0, [pc, #40]	; (800ff88 <tcp_input_delayed_close+0x7c>)
 800ff60:	f7ff fa50 	bl	800f404 <tcp_pcb_remove>
    tcp_free(pcb);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7fe f83d 	bl	800dfe4 <tcp_free>
    return 1;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e000      	b.n	800ff70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	08019c10 	.word	0x08019c10
 800ff7c:	08019de0 	.word	0x08019de0
 800ff80:	08019c5c 	.word	0x08019c5c
 800ff84:	20008e41 	.word	0x20008e41
 800ff88:	20008e08 	.word	0x20008e08

0800ff8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ff8c:	b590      	push	{r4, r7, lr}
 800ff8e:	b08b      	sub	sp, #44	; 0x2c
 800ff90:	af04      	add	r7, sp, #16
 800ff92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ff94:	4b6f      	ldr	r3, [pc, #444]	; (8010154 <tcp_listen_input+0x1c8>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 0304 	and.w	r3, r3, #4
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f040 80d2 	bne.w	8010146 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d106      	bne.n	800ffb6 <tcp_listen_input+0x2a>
 800ffa8:	4b6b      	ldr	r3, [pc, #428]	; (8010158 <tcp_listen_input+0x1cc>)
 800ffaa:	f240 2281 	movw	r2, #641	; 0x281
 800ffae:	496b      	ldr	r1, [pc, #428]	; (801015c <tcp_listen_input+0x1d0>)
 800ffb0:	486b      	ldr	r0, [pc, #428]	; (8010160 <tcp_listen_input+0x1d4>)
 800ffb2:	f007 fc41 	bl	8017838 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ffb6:	4b67      	ldr	r3, [pc, #412]	; (8010154 <tcp_listen_input+0x1c8>)
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	f003 0310 	and.w	r3, r3, #16
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d019      	beq.n	800fff6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffc2:	4b68      	ldr	r3, [pc, #416]	; (8010164 <tcp_listen_input+0x1d8>)
 800ffc4:	6819      	ldr	r1, [r3, #0]
 800ffc6:	4b68      	ldr	r3, [pc, #416]	; (8010168 <tcp_listen_input+0x1dc>)
 800ffc8:	881b      	ldrh	r3, [r3, #0]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4b67      	ldr	r3, [pc, #412]	; (801016c <tcp_listen_input+0x1e0>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffd2:	4b67      	ldr	r3, [pc, #412]	; (8010170 <tcp_listen_input+0x1e4>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffd6:	885b      	ldrh	r3, [r3, #2]
 800ffd8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffda:	4a65      	ldr	r2, [pc, #404]	; (8010170 <tcp_listen_input+0x1e4>)
 800ffdc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffde:	8812      	ldrh	r2, [r2, #0]
 800ffe0:	b292      	uxth	r2, r2
 800ffe2:	9202      	str	r2, [sp, #8]
 800ffe4:	9301      	str	r3, [sp, #4]
 800ffe6:	4b63      	ldr	r3, [pc, #396]	; (8010174 <tcp_listen_input+0x1e8>)
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	4b63      	ldr	r3, [pc, #396]	; (8010178 <tcp_listen_input+0x1ec>)
 800ffec:	4602      	mov	r2, r0
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f002 ff80 	bl	8012ef4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fff4:	e0a9      	b.n	801014a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fff6:	4b57      	ldr	r3, [pc, #348]	; (8010154 <tcp_listen_input+0x1c8>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	f003 0302 	and.w	r3, r3, #2
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f000 80a3 	beq.w	801014a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	7d5b      	ldrb	r3, [r3, #21]
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff f927 	bl	800f25c <tcp_alloc>
 801000e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d111      	bne.n	801003a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	699b      	ldr	r3, [r3, #24]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00a      	beq.n	8010034 <tcp_listen_input+0xa8>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	6910      	ldr	r0, [r2, #16]
 8010026:	f04f 32ff 	mov.w	r2, #4294967295
 801002a:	2100      	movs	r1, #0
 801002c:	4798      	blx	r3
 801002e:	4603      	mov	r3, r0
 8010030:	73bb      	strb	r3, [r7, #14]
      return;
 8010032:	e08b      	b.n	801014c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010034:	23f0      	movs	r3, #240	; 0xf0
 8010036:	73bb      	strb	r3, [r7, #14]
      return;
 8010038:	e088      	b.n	801014c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801003a:	4b50      	ldr	r3, [pc, #320]	; (801017c <tcp_listen_input+0x1f0>)
 801003c:	695a      	ldr	r2, [r3, #20]
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010042:	4b4e      	ldr	r3, [pc, #312]	; (801017c <tcp_listen_input+0x1f0>)
 8010044:	691a      	ldr	r2, [r3, #16]
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8ada      	ldrh	r2, [r3, #22]
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010052:	4b47      	ldr	r3, [pc, #284]	; (8010170 <tcp_listen_input+0x1e4>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	b29a      	uxth	r2, r3
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	2203      	movs	r2, #3
 8010062:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010064:	4b41      	ldr	r3, [pc, #260]	; (801016c <tcp_listen_input+0x1e0>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	1c5a      	adds	r2, r3, #1
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010076:	6978      	ldr	r0, [r7, #20]
 8010078:	f7ff fa58 	bl	800f52c <tcp_next_iss>
 801007c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	693a      	ldr	r2, [r7, #16]
 8010082:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	693a      	ldr	r2, [r7, #16]
 8010088:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010096:	4b35      	ldr	r3, [pc, #212]	; (801016c <tcp_listen_input+0x1e0>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	1e5a      	subs	r2, r3, #1
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	691a      	ldr	r2, [r3, #16]
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	7a5b      	ldrb	r3, [r3, #9]
 80100b2:	f003 030c 	and.w	r3, r3, #12
 80100b6:	b2da      	uxtb	r2, r3
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	7a1a      	ldrb	r2, [r3, #8]
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80100c4:	4b2e      	ldr	r3, [pc, #184]	; (8010180 <tcp_listen_input+0x1f4>)
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	60da      	str	r2, [r3, #12]
 80100cc:	4a2c      	ldr	r2, [pc, #176]	; (8010180 <tcp_listen_input+0x1f4>)
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	6013      	str	r3, [r2, #0]
 80100d2:	f003 f8d1 	bl	8013278 <tcp_timer_needed>
 80100d6:	4b2b      	ldr	r3, [pc, #172]	; (8010184 <tcp_listen_input+0x1f8>)
 80100d8:	2201      	movs	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80100dc:	6978      	ldr	r0, [r7, #20]
 80100de:	f001 fd8f 	bl	8011c00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80100e2:	4b23      	ldr	r3, [pc, #140]	; (8010170 <tcp_listen_input+0x1e4>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	89db      	ldrh	r3, [r3, #14]
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	3304      	adds	r3, #4
 8010104:	4618      	mov	r0, r3
 8010106:	f005 f84f 	bl	80151a8 <ip4_route>
 801010a:	4601      	mov	r1, r0
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	3304      	adds	r3, #4
 8010110:	461a      	mov	r2, r3
 8010112:	4620      	mov	r0, r4
 8010114:	f7ff fa30 	bl	800f578 <tcp_eff_send_mss_netif>
 8010118:	4603      	mov	r3, r0
 801011a:	461a      	mov	r2, r3
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010120:	2112      	movs	r1, #18
 8010122:	6978      	ldr	r0, [r7, #20]
 8010124:	f002 f844 	bl	80121b0 <tcp_enqueue_flags>
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801012c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d004      	beq.n	801013e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010134:	2100      	movs	r1, #0
 8010136:	6978      	ldr	r0, [r7, #20]
 8010138:	f7fe f97e 	bl	800e438 <tcp_abandon>
      return;
 801013c:	e006      	b.n	801014c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801013e:	6978      	ldr	r0, [r7, #20]
 8010140:	f002 f924 	bl	801238c <tcp_output>
  return;
 8010144:	e001      	b.n	801014a <tcp_listen_input+0x1be>
    return;
 8010146:	bf00      	nop
 8010148:	e000      	b.n	801014c <tcp_listen_input+0x1c0>
  return;
 801014a:	bf00      	nop
}
 801014c:	371c      	adds	r7, #28
 801014e:	46bd      	mov	sp, r7
 8010150:	bd90      	pop	{r4, r7, pc}
 8010152:	bf00      	nop
 8010154:	20008e40 	.word	0x20008e40
 8010158:	08019c10 	.word	0x08019c10
 801015c:	08019e08 	.word	0x08019e08
 8010160:	08019c5c 	.word	0x08019c5c
 8010164:	20008e38 	.word	0x20008e38
 8010168:	20008e3e 	.word	0x20008e3e
 801016c:	20008e34 	.word	0x20008e34
 8010170:	20008e24 	.word	0x20008e24
 8010174:	2000589c 	.word	0x2000589c
 8010178:	200058a0 	.word	0x200058a0
 801017c:	2000588c 	.word	0x2000588c
 8010180:	20008e08 	.word	0x20008e08
 8010184:	20008e10 	.word	0x20008e10

08010188 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af04      	add	r7, sp, #16
 801018e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010190:	4b2f      	ldr	r3, [pc, #188]	; (8010250 <tcp_timewait_input+0xc8>)
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f003 0304 	and.w	r3, r3, #4
 8010198:	2b00      	cmp	r3, #0
 801019a:	d153      	bne.n	8010244 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d106      	bne.n	80101b0 <tcp_timewait_input+0x28>
 80101a2:	4b2c      	ldr	r3, [pc, #176]	; (8010254 <tcp_timewait_input+0xcc>)
 80101a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80101a8:	492b      	ldr	r1, [pc, #172]	; (8010258 <tcp_timewait_input+0xd0>)
 80101aa:	482c      	ldr	r0, [pc, #176]	; (801025c <tcp_timewait_input+0xd4>)
 80101ac:	f007 fb44 	bl	8017838 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80101b0:	4b27      	ldr	r3, [pc, #156]	; (8010250 <tcp_timewait_input+0xc8>)
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	f003 0302 	and.w	r3, r3, #2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d02a      	beq.n	8010212 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80101bc:	4b28      	ldr	r3, [pc, #160]	; (8010260 <tcp_timewait_input+0xd8>)
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	db2d      	blt.n	8010226 <tcp_timewait_input+0x9e>
 80101ca:	4b25      	ldr	r3, [pc, #148]	; (8010260 <tcp_timewait_input+0xd8>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d2:	6879      	ldr	r1, [r7, #4]
 80101d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101d6:	440b      	add	r3, r1
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	dc23      	bgt.n	8010226 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101de:	4b21      	ldr	r3, [pc, #132]	; (8010264 <tcp_timewait_input+0xdc>)
 80101e0:	6819      	ldr	r1, [r3, #0]
 80101e2:	4b21      	ldr	r3, [pc, #132]	; (8010268 <tcp_timewait_input+0xe0>)
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	4b1d      	ldr	r3, [pc, #116]	; (8010260 <tcp_timewait_input+0xd8>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101ee:	4b1f      	ldr	r3, [pc, #124]	; (801026c <tcp_timewait_input+0xe4>)
 80101f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101f2:	885b      	ldrh	r3, [r3, #2]
 80101f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101f6:	4a1d      	ldr	r2, [pc, #116]	; (801026c <tcp_timewait_input+0xe4>)
 80101f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101fa:	8812      	ldrh	r2, [r2, #0]
 80101fc:	b292      	uxth	r2, r2
 80101fe:	9202      	str	r2, [sp, #8]
 8010200:	9301      	str	r3, [sp, #4]
 8010202:	4b1b      	ldr	r3, [pc, #108]	; (8010270 <tcp_timewait_input+0xe8>)
 8010204:	9300      	str	r3, [sp, #0]
 8010206:	4b1b      	ldr	r3, [pc, #108]	; (8010274 <tcp_timewait_input+0xec>)
 8010208:	4602      	mov	r2, r0
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f002 fe72 	bl	8012ef4 <tcp_rst>
      return;
 8010210:	e01b      	b.n	801024a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010212:	4b0f      	ldr	r3, [pc, #60]	; (8010250 <tcp_timewait_input+0xc8>)
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	f003 0301 	and.w	r3, r3, #1
 801021a:	2b00      	cmp	r3, #0
 801021c:	d003      	beq.n	8010226 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801021e:	4b16      	ldr	r3, [pc, #88]	; (8010278 <tcp_timewait_input+0xf0>)
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <tcp_timewait_input+0xe0>)
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00c      	beq.n	8010248 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	8b5b      	ldrh	r3, [r3, #26]
 8010232:	f043 0302 	orr.w	r3, r3, #2
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f002 f8a5 	bl	801238c <tcp_output>
  }
  return;
 8010242:	e001      	b.n	8010248 <tcp_timewait_input+0xc0>
    return;
 8010244:	bf00      	nop
 8010246:	e000      	b.n	801024a <tcp_timewait_input+0xc2>
  return;
 8010248:	bf00      	nop
}
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20008e40 	.word	0x20008e40
 8010254:	08019c10 	.word	0x08019c10
 8010258:	08019e28 	.word	0x08019e28
 801025c:	08019c5c 	.word	0x08019c5c
 8010260:	20008e34 	.word	0x20008e34
 8010264:	20008e38 	.word	0x20008e38
 8010268:	20008e3e 	.word	0x20008e3e
 801026c:	20008e24 	.word	0x20008e24
 8010270:	2000589c 	.word	0x2000589c
 8010274:	200058a0 	.word	0x200058a0
 8010278:	20008dfc 	.word	0x20008dfc

0801027c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801027c:	b590      	push	{r4, r7, lr}
 801027e:	b08d      	sub	sp, #52	; 0x34
 8010280:	af04      	add	r7, sp, #16
 8010282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d106      	bne.n	80102a0 <tcp_process+0x24>
 8010292:	4b9d      	ldr	r3, [pc, #628]	; (8010508 <tcp_process+0x28c>)
 8010294:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010298:	499c      	ldr	r1, [pc, #624]	; (801050c <tcp_process+0x290>)
 801029a:	489d      	ldr	r0, [pc, #628]	; (8010510 <tcp_process+0x294>)
 801029c:	f007 facc 	bl	8017838 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80102a0:	4b9c      	ldr	r3, [pc, #624]	; (8010514 <tcp_process+0x298>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	f003 0304 	and.w	r3, r3, #4
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d04e      	beq.n	801034a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	7d1b      	ldrb	r3, [r3, #20]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d108      	bne.n	80102c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102b8:	4b97      	ldr	r3, [pc, #604]	; (8010518 <tcp_process+0x29c>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d123      	bne.n	8010308 <tcp_process+0x8c>
        acceptable = 1;
 80102c0:	2301      	movs	r3, #1
 80102c2:	76fb      	strb	r3, [r7, #27]
 80102c4:	e020      	b.n	8010308 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102ca:	4b94      	ldr	r3, [pc, #592]	; (801051c <tcp_process+0x2a0>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d102      	bne.n	80102d8 <tcp_process+0x5c>
        acceptable = 1;
 80102d2:	2301      	movs	r3, #1
 80102d4:	76fb      	strb	r3, [r7, #27]
 80102d6:	e017      	b.n	8010308 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80102d8:	4b90      	ldr	r3, [pc, #576]	; (801051c <tcp_process+0x2a0>)
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e0:	1ad3      	subs	r3, r2, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	db10      	blt.n	8010308 <tcp_process+0x8c>
 80102e6:	4b8d      	ldr	r3, [pc, #564]	; (801051c <tcp_process+0x2a0>)
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ee:	6879      	ldr	r1, [r7, #4]
 80102f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102f2:	440b      	add	r3, r1
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	dc06      	bgt.n	8010308 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8b5b      	ldrh	r3, [r3, #26]
 80102fe:	f043 0302 	orr.w	r3, r3, #2
 8010302:	b29a      	uxth	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010308:	7efb      	ldrb	r3, [r7, #27]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d01b      	beq.n	8010346 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	7d1b      	ldrb	r3, [r3, #20]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d106      	bne.n	8010324 <tcp_process+0xa8>
 8010316:	4b7c      	ldr	r3, [pc, #496]	; (8010508 <tcp_process+0x28c>)
 8010318:	f44f 724e 	mov.w	r2, #824	; 0x338
 801031c:	4980      	ldr	r1, [pc, #512]	; (8010520 <tcp_process+0x2a4>)
 801031e:	487c      	ldr	r0, [pc, #496]	; (8010510 <tcp_process+0x294>)
 8010320:	f007 fa8a 	bl	8017838 <iprintf>
      recv_flags |= TF_RESET;
 8010324:	4b7f      	ldr	r3, [pc, #508]	; (8010524 <tcp_process+0x2a8>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f043 0308 	orr.w	r3, r3, #8
 801032c:	b2da      	uxtb	r2, r3
 801032e:	4b7d      	ldr	r3, [pc, #500]	; (8010524 <tcp_process+0x2a8>)
 8010330:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	8b5b      	ldrh	r3, [r3, #26]
 8010336:	f023 0301 	bic.w	r3, r3, #1
 801033a:	b29a      	uxth	r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010340:	f06f 030d 	mvn.w	r3, #13
 8010344:	e37a      	b.n	8010a3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	e378      	b.n	8010a3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801034a:	4b72      	ldr	r3, [pc, #456]	; (8010514 <tcp_process+0x298>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	f003 0302 	and.w	r3, r3, #2
 8010352:	2b00      	cmp	r3, #0
 8010354:	d010      	beq.n	8010378 <tcp_process+0xfc>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	7d1b      	ldrb	r3, [r3, #20]
 801035a:	2b02      	cmp	r3, #2
 801035c:	d00c      	beq.n	8010378 <tcp_process+0xfc>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	7d1b      	ldrb	r3, [r3, #20]
 8010362:	2b03      	cmp	r3, #3
 8010364:	d008      	beq.n	8010378 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	8b5b      	ldrh	r3, [r3, #26]
 801036a:	f043 0302 	orr.w	r3, r3, #2
 801036e:	b29a      	uxth	r2, r3
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010374:	2300      	movs	r3, #0
 8010376:	e361      	b.n	8010a3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	8b5b      	ldrh	r3, [r3, #26]
 801037c:	f003 0310 	and.w	r3, r3, #16
 8010380:	2b00      	cmp	r3, #0
 8010382:	d103      	bne.n	801038c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010384:	4b68      	ldr	r3, [pc, #416]	; (8010528 <tcp_process+0x2ac>)
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f001 fc2f 	bl	8011c00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	7d1b      	ldrb	r3, [r3, #20]
 80103a6:	3b02      	subs	r3, #2
 80103a8:	2b07      	cmp	r3, #7
 80103aa:	f200 8337 	bhi.w	8010a1c <tcp_process+0x7a0>
 80103ae:	a201      	add	r2, pc, #4	; (adr r2, 80103b4 <tcp_process+0x138>)
 80103b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103b4:	080103d5 	.word	0x080103d5
 80103b8:	08010605 	.word	0x08010605
 80103bc:	0801077d 	.word	0x0801077d
 80103c0:	080107a7 	.word	0x080107a7
 80103c4:	080108cb 	.word	0x080108cb
 80103c8:	0801077d 	.word	0x0801077d
 80103cc:	08010957 	.word	0x08010957
 80103d0:	080109e7 	.word	0x080109e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80103d4:	4b4f      	ldr	r3, [pc, #316]	; (8010514 <tcp_process+0x298>)
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	f003 0310 	and.w	r3, r3, #16
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f000 80e4 	beq.w	80105aa <tcp_process+0x32e>
 80103e2:	4b4c      	ldr	r3, [pc, #304]	; (8010514 <tcp_process+0x298>)
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	f003 0302 	and.w	r3, r3, #2
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 80dd 	beq.w	80105aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103f4:	1c5a      	adds	r2, r3, #1
 80103f6:	4b48      	ldr	r3, [pc, #288]	; (8010518 <tcp_process+0x29c>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	f040 80d5 	bne.w	80105aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010400:	4b46      	ldr	r3, [pc, #280]	; (801051c <tcp_process+0x2a0>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	1c5a      	adds	r2, r3, #1
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010412:	4b41      	ldr	r3, [pc, #260]	; (8010518 <tcp_process+0x29c>)
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801041a:	4b44      	ldr	r3, [pc, #272]	; (801052c <tcp_process+0x2b0>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	89db      	ldrh	r3, [r3, #14]
 8010420:	b29a      	uxth	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010434:	4b39      	ldr	r3, [pc, #228]	; (801051c <tcp_process+0x2a0>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	1e5a      	subs	r2, r3, #1
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2204      	movs	r2, #4
 8010442:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	3304      	adds	r3, #4
 801044c:	4618      	mov	r0, r3
 801044e:	f004 feab 	bl	80151a8 <ip4_route>
 8010452:	4601      	mov	r1, r0
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	3304      	adds	r3, #4
 8010458:	461a      	mov	r2, r3
 801045a:	4620      	mov	r0, r4
 801045c:	f7ff f88c 	bl	800f578 <tcp_eff_send_mss_netif>
 8010460:	4603      	mov	r3, r0
 8010462:	461a      	mov	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801046c:	009a      	lsls	r2, r3, #2
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010472:	005b      	lsls	r3, r3, #1
 8010474:	f241 111c 	movw	r1, #4380	; 0x111c
 8010478:	428b      	cmp	r3, r1
 801047a:	bf38      	it	cc
 801047c:	460b      	movcc	r3, r1
 801047e:	429a      	cmp	r2, r3
 8010480:	d204      	bcs.n	801048c <tcp_process+0x210>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	b29b      	uxth	r3, r3
 801048a:	e00d      	b.n	80104a8 <tcp_process+0x22c>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010490:	005b      	lsls	r3, r3, #1
 8010492:	f241 121c 	movw	r2, #4380	; 0x111c
 8010496:	4293      	cmp	r3, r2
 8010498:	d904      	bls.n	80104a4 <tcp_process+0x228>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	e001      	b.n	80104a8 <tcp_process+0x22c>
 80104a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d106      	bne.n	80104c6 <tcp_process+0x24a>
 80104b8:	4b13      	ldr	r3, [pc, #76]	; (8010508 <tcp_process+0x28c>)
 80104ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80104be:	491c      	ldr	r1, [pc, #112]	; (8010530 <tcp_process+0x2b4>)
 80104c0:	4813      	ldr	r0, [pc, #76]	; (8010510 <tcp_process+0x294>)
 80104c2:	f007 f9b9 	bl	8017838 <iprintf>
        --pcb->snd_queuelen;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104cc:	3b01      	subs	r3, #1
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d12a      	bne.n	8010538 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <tcp_process+0x280>
 80104ee:	4b06      	ldr	r3, [pc, #24]	; (8010508 <tcp_process+0x28c>)
 80104f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80104f4:	490f      	ldr	r1, [pc, #60]	; (8010534 <tcp_process+0x2b8>)
 80104f6:	4806      	ldr	r0, [pc, #24]	; (8010510 <tcp_process+0x294>)
 80104f8:	f007 f99e 	bl	8017838 <iprintf>
          pcb->unsent = rseg->next;
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	66da      	str	r2, [r3, #108]	; 0x6c
 8010504:	e01c      	b.n	8010540 <tcp_process+0x2c4>
 8010506:	bf00      	nop
 8010508:	08019c10 	.word	0x08019c10
 801050c:	08019e48 	.word	0x08019e48
 8010510:	08019c5c 	.word	0x08019c5c
 8010514:	20008e40 	.word	0x20008e40
 8010518:	20008e38 	.word	0x20008e38
 801051c:	20008e34 	.word	0x20008e34
 8010520:	08019e64 	.word	0x08019e64
 8010524:	20008e41 	.word	0x20008e41
 8010528:	20008dfc 	.word	0x20008dfc
 801052c:	20008e24 	.word	0x20008e24
 8010530:	08019e84 	.word	0x08019e84
 8010534:	08019e9c 	.word	0x08019e9c
        } else {
          pcb->unacked = rseg->next;
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010540:	69f8      	ldr	r0, [r7, #28]
 8010542:	f7fe fd22 	bl	800ef8a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801054a:	2b00      	cmp	r3, #0
 801054c:	d104      	bne.n	8010558 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010554:	861a      	strh	r2, [r3, #48]	; 0x30
 8010556:	e006      	b.n	8010566 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00a      	beq.n	8010586 <tcp_process+0x30a>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	6910      	ldr	r0, [r2, #16]
 801057a:	2200      	movs	r2, #0
 801057c:	6879      	ldr	r1, [r7, #4]
 801057e:	4798      	blx	r3
 8010580:	4603      	mov	r3, r0
 8010582:	76bb      	strb	r3, [r7, #26]
 8010584:	e001      	b.n	801058a <tcp_process+0x30e>
 8010586:	2300      	movs	r3, #0
 8010588:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801058a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801058e:	f113 0f0d 	cmn.w	r3, #13
 8010592:	d102      	bne.n	801059a <tcp_process+0x31e>
          return ERR_ABRT;
 8010594:	f06f 030c 	mvn.w	r3, #12
 8010598:	e250      	b.n	8010a3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8b5b      	ldrh	r3, [r3, #26]
 801059e:	f043 0302 	orr.w	r3, r3, #2
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80105a8:	e23a      	b.n	8010a20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80105aa:	4b98      	ldr	r3, [pc, #608]	; (801080c <tcp_process+0x590>)
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	f003 0310 	and.w	r3, r3, #16
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 8234 	beq.w	8010a20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105b8:	4b95      	ldr	r3, [pc, #596]	; (8010810 <tcp_process+0x594>)
 80105ba:	6819      	ldr	r1, [r3, #0]
 80105bc:	4b95      	ldr	r3, [pc, #596]	; (8010814 <tcp_process+0x598>)
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	461a      	mov	r2, r3
 80105c2:	4b95      	ldr	r3, [pc, #596]	; (8010818 <tcp_process+0x59c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105c8:	4b94      	ldr	r3, [pc, #592]	; (801081c <tcp_process+0x5a0>)
 80105ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105cc:	885b      	ldrh	r3, [r3, #2]
 80105ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105d0:	4a92      	ldr	r2, [pc, #584]	; (801081c <tcp_process+0x5a0>)
 80105d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105d4:	8812      	ldrh	r2, [r2, #0]
 80105d6:	b292      	uxth	r2, r2
 80105d8:	9202      	str	r2, [sp, #8]
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	4b90      	ldr	r3, [pc, #576]	; (8010820 <tcp_process+0x5a4>)
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	4b90      	ldr	r3, [pc, #576]	; (8010824 <tcp_process+0x5a8>)
 80105e2:	4602      	mov	r2, r0
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f002 fc85 	bl	8012ef4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105f0:	2b05      	cmp	r3, #5
 80105f2:	f200 8215 	bhi.w	8010a20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f002 fa4f 	bl	8012aa0 <tcp_rexmit_rto>
      break;
 8010602:	e20d      	b.n	8010a20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010604:	4b81      	ldr	r3, [pc, #516]	; (801080c <tcp_process+0x590>)
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	f003 0310 	and.w	r3, r3, #16
 801060c:	2b00      	cmp	r3, #0
 801060e:	f000 80a1 	beq.w	8010754 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010612:	4b7f      	ldr	r3, [pc, #508]	; (8010810 <tcp_process+0x594>)
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801061a:	1ad3      	subs	r3, r2, r3
 801061c:	3b01      	subs	r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	db7e      	blt.n	8010720 <tcp_process+0x4a4>
 8010622:	4b7b      	ldr	r3, [pc, #492]	; (8010810 <tcp_process+0x594>)
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801062a:	1ad3      	subs	r3, r2, r3
 801062c:	2b00      	cmp	r3, #0
 801062e:	dc77      	bgt.n	8010720 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2204      	movs	r2, #4
 8010634:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801063e:	23fa      	movs	r3, #250	; 0xfa
 8010640:	76bb      	strb	r3, [r7, #26]
 8010642:	e01d      	b.n	8010680 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <tcp_process+0x3e0>
 801064e:	4b76      	ldr	r3, [pc, #472]	; (8010828 <tcp_process+0x5ac>)
 8010650:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010654:	4975      	ldr	r1, [pc, #468]	; (801082c <tcp_process+0x5b0>)
 8010656:	4876      	ldr	r0, [pc, #472]	; (8010830 <tcp_process+0x5b4>)
 8010658:	f007 f8ee 	bl	8017838 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010660:	699b      	ldr	r3, [r3, #24]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <tcp_process+0x400>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	6910      	ldr	r0, [r2, #16]
 8010670:	2200      	movs	r2, #0
 8010672:	6879      	ldr	r1, [r7, #4]
 8010674:	4798      	blx	r3
 8010676:	4603      	mov	r3, r0
 8010678:	76bb      	strb	r3, [r7, #26]
 801067a:	e001      	b.n	8010680 <tcp_process+0x404>
 801067c:	23f0      	movs	r3, #240	; 0xf0
 801067e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010680:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00a      	beq.n	801069e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010688:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801068c:	f113 0f0d 	cmn.w	r3, #13
 8010690:	d002      	beq.n	8010698 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7fd ff8e 	bl	800e5b4 <tcp_abort>
            }
            return ERR_ABRT;
 8010698:	f06f 030c 	mvn.w	r3, #12
 801069c:	e1ce      	b.n	8010a3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f000 fae0 	bl	8010c64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80106a4:	4b63      	ldr	r3, [pc, #396]	; (8010834 <tcp_process+0x5b8>)
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <tcp_process+0x43c>
            recv_acked--;
 80106ac:	4b61      	ldr	r3, [pc, #388]	; (8010834 <tcp_process+0x5b8>)
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	3b01      	subs	r3, #1
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	4b5f      	ldr	r3, [pc, #380]	; (8010834 <tcp_process+0x5b8>)
 80106b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106bc:	009a      	lsls	r2, r3, #2
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80106c8:	428b      	cmp	r3, r1
 80106ca:	bf38      	it	cc
 80106cc:	460b      	movcc	r3, r1
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d204      	bcs.n	80106dc <tcp_process+0x460>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	b29b      	uxth	r3, r3
 80106da:	e00d      	b.n	80106f8 <tcp_process+0x47c>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106e0:	005b      	lsls	r3, r3, #1
 80106e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d904      	bls.n	80106f4 <tcp_process+0x478>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ee:	005b      	lsls	r3, r3, #1
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	e001      	b.n	80106f8 <tcp_process+0x47c>
 80106f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80106fe:	4b4e      	ldr	r3, [pc, #312]	; (8010838 <tcp_process+0x5bc>)
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	f003 0320 	and.w	r3, r3, #32
 8010706:	2b00      	cmp	r3, #0
 8010708:	d037      	beq.n	801077a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	8b5b      	ldrh	r3, [r3, #26]
 801070e:	f043 0302 	orr.w	r3, r3, #2
 8010712:	b29a      	uxth	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2207      	movs	r2, #7
 801071c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801071e:	e02c      	b.n	801077a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010720:	4b3b      	ldr	r3, [pc, #236]	; (8010810 <tcp_process+0x594>)
 8010722:	6819      	ldr	r1, [r3, #0]
 8010724:	4b3b      	ldr	r3, [pc, #236]	; (8010814 <tcp_process+0x598>)
 8010726:	881b      	ldrh	r3, [r3, #0]
 8010728:	461a      	mov	r2, r3
 801072a:	4b3b      	ldr	r3, [pc, #236]	; (8010818 <tcp_process+0x59c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010730:	4b3a      	ldr	r3, [pc, #232]	; (801081c <tcp_process+0x5a0>)
 8010732:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010734:	885b      	ldrh	r3, [r3, #2]
 8010736:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010738:	4a38      	ldr	r2, [pc, #224]	; (801081c <tcp_process+0x5a0>)
 801073a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801073c:	8812      	ldrh	r2, [r2, #0]
 801073e:	b292      	uxth	r2, r2
 8010740:	9202      	str	r2, [sp, #8]
 8010742:	9301      	str	r3, [sp, #4]
 8010744:	4b36      	ldr	r3, [pc, #216]	; (8010820 <tcp_process+0x5a4>)
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	4b36      	ldr	r3, [pc, #216]	; (8010824 <tcp_process+0x5a8>)
 801074a:	4602      	mov	r2, r0
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f002 fbd1 	bl	8012ef4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010752:	e167      	b.n	8010a24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010754:	4b2d      	ldr	r3, [pc, #180]	; (801080c <tcp_process+0x590>)
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	f003 0302 	and.w	r3, r3, #2
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 8161 	beq.w	8010a24 <tcp_process+0x7a8>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	1e5a      	subs	r2, r3, #1
 8010768:	4b2b      	ldr	r3, [pc, #172]	; (8010818 <tcp_process+0x59c>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	429a      	cmp	r2, r3
 801076e:	f040 8159 	bne.w	8010a24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f002 f9b6 	bl	8012ae4 <tcp_rexmit>
      break;
 8010778:	e154      	b.n	8010a24 <tcp_process+0x7a8>
 801077a:	e153      	b.n	8010a24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fa71 	bl	8010c64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010782:	4b2d      	ldr	r3, [pc, #180]	; (8010838 <tcp_process+0x5bc>)
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	f003 0320 	and.w	r3, r3, #32
 801078a:	2b00      	cmp	r3, #0
 801078c:	f000 814c 	beq.w	8010a28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	8b5b      	ldrh	r3, [r3, #26]
 8010794:	f043 0302 	orr.w	r3, r3, #2
 8010798:	b29a      	uxth	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2207      	movs	r2, #7
 80107a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80107a4:	e140      	b.n	8010a28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 fa5c 	bl	8010c64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107ac:	4b22      	ldr	r3, [pc, #136]	; (8010838 <tcp_process+0x5bc>)
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	f003 0320 	and.w	r3, r3, #32
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d071      	beq.n	801089c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107b8:	4b14      	ldr	r3, [pc, #80]	; (801080c <tcp_process+0x590>)
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f003 0310 	and.w	r3, r3, #16
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d060      	beq.n	8010886 <tcp_process+0x60a>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107c8:	4b11      	ldr	r3, [pc, #68]	; (8010810 <tcp_process+0x594>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d15a      	bne.n	8010886 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d156      	bne.n	8010886 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	8b5b      	ldrh	r3, [r3, #26]
 80107dc:	f043 0302 	orr.w	r3, r3, #2
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7fe fdbc 	bl	800f364 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80107ec:	4b13      	ldr	r3, [pc, #76]	; (801083c <tcp_process+0x5c0>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d105      	bne.n	8010802 <tcp_process+0x586>
 80107f6:	4b11      	ldr	r3, [pc, #68]	; (801083c <tcp_process+0x5c0>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	4a0f      	ldr	r2, [pc, #60]	; (801083c <tcp_process+0x5c0>)
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	e02e      	b.n	8010860 <tcp_process+0x5e4>
 8010802:	4b0e      	ldr	r3, [pc, #56]	; (801083c <tcp_process+0x5c0>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	617b      	str	r3, [r7, #20]
 8010808:	e027      	b.n	801085a <tcp_process+0x5de>
 801080a:	bf00      	nop
 801080c:	20008e40 	.word	0x20008e40
 8010810:	20008e38 	.word	0x20008e38
 8010814:	20008e3e 	.word	0x20008e3e
 8010818:	20008e34 	.word	0x20008e34
 801081c:	20008e24 	.word	0x20008e24
 8010820:	2000589c 	.word	0x2000589c
 8010824:	200058a0 	.word	0x200058a0
 8010828:	08019c10 	.word	0x08019c10
 801082c:	08019eb0 	.word	0x08019eb0
 8010830:	08019c5c 	.word	0x08019c5c
 8010834:	20008e3c 	.word	0x20008e3c
 8010838:	20008e41 	.word	0x20008e41
 801083c:	20008e08 	.word	0x20008e08
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	429a      	cmp	r2, r3
 8010848:	d104      	bne.n	8010854 <tcp_process+0x5d8>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	68da      	ldr	r2, [r3, #12]
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	60da      	str	r2, [r3, #12]
 8010852:	e005      	b.n	8010860 <tcp_process+0x5e4>
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	617b      	str	r3, [r7, #20]
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1ef      	bne.n	8010840 <tcp_process+0x5c4>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	60da      	str	r2, [r3, #12]
 8010866:	4b77      	ldr	r3, [pc, #476]	; (8010a44 <tcp_process+0x7c8>)
 8010868:	2201      	movs	r2, #1
 801086a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	220a      	movs	r2, #10
 8010870:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010872:	4b75      	ldr	r3, [pc, #468]	; (8010a48 <tcp_process+0x7cc>)
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	60da      	str	r2, [r3, #12]
 801087a:	4a73      	ldr	r2, [pc, #460]	; (8010a48 <tcp_process+0x7cc>)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	f002 fcfa 	bl	8013278 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010884:	e0d2      	b.n	8010a2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8b5b      	ldrh	r3, [r3, #26]
 801088a:	f043 0302 	orr.w	r3, r3, #2
 801088e:	b29a      	uxth	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2208      	movs	r2, #8
 8010898:	751a      	strb	r2, [r3, #20]
      break;
 801089a:	e0c7      	b.n	8010a2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801089c:	4b6b      	ldr	r3, [pc, #428]	; (8010a4c <tcp_process+0x7d0>)
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	f003 0310 	and.w	r3, r3, #16
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f000 80c1 	beq.w	8010a2c <tcp_process+0x7b0>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108ae:	4b68      	ldr	r3, [pc, #416]	; (8010a50 <tcp_process+0x7d4>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	f040 80ba 	bne.w	8010a2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f040 80b5 	bne.w	8010a2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2206      	movs	r2, #6
 80108c6:	751a      	strb	r2, [r3, #20]
      break;
 80108c8:	e0b0      	b.n	8010a2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f000 f9ca 	bl	8010c64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80108d0:	4b60      	ldr	r3, [pc, #384]	; (8010a54 <tcp_process+0x7d8>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	f003 0320 	and.w	r3, r3, #32
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 80a9 	beq.w	8010a30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	8b5b      	ldrh	r3, [r3, #26]
 80108e2:	f043 0302 	orr.w	r3, r3, #2
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7fe fd39 	bl	800f364 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80108f2:	4b59      	ldr	r3, [pc, #356]	; (8010a58 <tcp_process+0x7dc>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d105      	bne.n	8010908 <tcp_process+0x68c>
 80108fc:	4b56      	ldr	r3, [pc, #344]	; (8010a58 <tcp_process+0x7dc>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	4a55      	ldr	r2, [pc, #340]	; (8010a58 <tcp_process+0x7dc>)
 8010904:	6013      	str	r3, [r2, #0]
 8010906:	e013      	b.n	8010930 <tcp_process+0x6b4>
 8010908:	4b53      	ldr	r3, [pc, #332]	; (8010a58 <tcp_process+0x7dc>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	613b      	str	r3, [r7, #16]
 801090e:	e00c      	b.n	801092a <tcp_process+0x6ae>
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	429a      	cmp	r2, r3
 8010918:	d104      	bne.n	8010924 <tcp_process+0x6a8>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	68da      	ldr	r2, [r3, #12]
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	60da      	str	r2, [r3, #12]
 8010922:	e005      	b.n	8010930 <tcp_process+0x6b4>
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	613b      	str	r3, [r7, #16]
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1ef      	bne.n	8010910 <tcp_process+0x694>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	60da      	str	r2, [r3, #12]
 8010936:	4b43      	ldr	r3, [pc, #268]	; (8010a44 <tcp_process+0x7c8>)
 8010938:	2201      	movs	r2, #1
 801093a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	220a      	movs	r2, #10
 8010940:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010942:	4b41      	ldr	r3, [pc, #260]	; (8010a48 <tcp_process+0x7cc>)
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	60da      	str	r2, [r3, #12]
 801094a:	4a3f      	ldr	r2, [pc, #252]	; (8010a48 <tcp_process+0x7cc>)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6013      	str	r3, [r2, #0]
 8010950:	f002 fc92 	bl	8013278 <tcp_timer_needed>
      }
      break;
 8010954:	e06c      	b.n	8010a30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 f984 	bl	8010c64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801095c:	4b3b      	ldr	r3, [pc, #236]	; (8010a4c <tcp_process+0x7d0>)
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	f003 0310 	and.w	r3, r3, #16
 8010964:	2b00      	cmp	r3, #0
 8010966:	d065      	beq.n	8010a34 <tcp_process+0x7b8>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801096c:	4b38      	ldr	r3, [pc, #224]	; (8010a50 <tcp_process+0x7d4>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	429a      	cmp	r2, r3
 8010972:	d15f      	bne.n	8010a34 <tcp_process+0x7b8>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010978:	2b00      	cmp	r3, #0
 801097a:	d15b      	bne.n	8010a34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f7fe fcf1 	bl	800f364 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010982:	4b35      	ldr	r3, [pc, #212]	; (8010a58 <tcp_process+0x7dc>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	429a      	cmp	r2, r3
 801098a:	d105      	bne.n	8010998 <tcp_process+0x71c>
 801098c:	4b32      	ldr	r3, [pc, #200]	; (8010a58 <tcp_process+0x7dc>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	68db      	ldr	r3, [r3, #12]
 8010992:	4a31      	ldr	r2, [pc, #196]	; (8010a58 <tcp_process+0x7dc>)
 8010994:	6013      	str	r3, [r2, #0]
 8010996:	e013      	b.n	80109c0 <tcp_process+0x744>
 8010998:	4b2f      	ldr	r3, [pc, #188]	; (8010a58 <tcp_process+0x7dc>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	60fb      	str	r3, [r7, #12]
 801099e:	e00c      	b.n	80109ba <tcp_process+0x73e>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d104      	bne.n	80109b4 <tcp_process+0x738>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	68da      	ldr	r2, [r3, #12]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	60da      	str	r2, [r3, #12]
 80109b2:	e005      	b.n	80109c0 <tcp_process+0x744>
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	60fb      	str	r3, [r7, #12]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1ef      	bne.n	80109a0 <tcp_process+0x724>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	60da      	str	r2, [r3, #12]
 80109c6:	4b1f      	ldr	r3, [pc, #124]	; (8010a44 <tcp_process+0x7c8>)
 80109c8:	2201      	movs	r2, #1
 80109ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	220a      	movs	r2, #10
 80109d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80109d2:	4b1d      	ldr	r3, [pc, #116]	; (8010a48 <tcp_process+0x7cc>)
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	60da      	str	r2, [r3, #12]
 80109da:	4a1b      	ldr	r2, [pc, #108]	; (8010a48 <tcp_process+0x7cc>)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6013      	str	r3, [r2, #0]
 80109e0:	f002 fc4a 	bl	8013278 <tcp_timer_needed>
      }
      break;
 80109e4:	e026      	b.n	8010a34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f93c 	bl	8010c64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80109ec:	4b17      	ldr	r3, [pc, #92]	; (8010a4c <tcp_process+0x7d0>)
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	f003 0310 	and.w	r3, r3, #16
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d01f      	beq.n	8010a38 <tcp_process+0x7bc>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109fc:	4b14      	ldr	r3, [pc, #80]	; (8010a50 <tcp_process+0x7d4>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d119      	bne.n	8010a38 <tcp_process+0x7bc>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d115      	bne.n	8010a38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010a0c:	4b11      	ldr	r3, [pc, #68]	; (8010a54 <tcp_process+0x7d8>)
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	f043 0310 	orr.w	r3, r3, #16
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	4b0f      	ldr	r3, [pc, #60]	; (8010a54 <tcp_process+0x7d8>)
 8010a18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010a1a:	e00d      	b.n	8010a38 <tcp_process+0x7bc>
    default:
      break;
 8010a1c:	bf00      	nop
 8010a1e:	e00c      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a20:	bf00      	nop
 8010a22:	e00a      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a24:	bf00      	nop
 8010a26:	e008      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a28:	bf00      	nop
 8010a2a:	e006      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a2c:	bf00      	nop
 8010a2e:	e004      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a30:	bf00      	nop
 8010a32:	e002      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a34:	bf00      	nop
 8010a36:	e000      	b.n	8010a3a <tcp_process+0x7be>
      break;
 8010a38:	bf00      	nop
  }
  return ERR_OK;
 8010a3a:	2300      	movs	r3, #0
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3724      	adds	r7, #36	; 0x24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd90      	pop	{r4, r7, pc}
 8010a44:	20008e10 	.word	0x20008e10
 8010a48:	20008e0c 	.word	0x20008e0c
 8010a4c:	20008e40 	.word	0x20008e40
 8010a50:	20008e38 	.word	0x20008e38
 8010a54:	20008e41 	.word	0x20008e41
 8010a58:	20008e08 	.word	0x20008e08

08010a5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010a5c:	b590      	push	{r4, r7, lr}
 8010a5e:	b085      	sub	sp, #20
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d106      	bne.n	8010a7a <tcp_oos_insert_segment+0x1e>
 8010a6c:	4b3b      	ldr	r3, [pc, #236]	; (8010b5c <tcp_oos_insert_segment+0x100>)
 8010a6e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010a72:	493b      	ldr	r1, [pc, #236]	; (8010b60 <tcp_oos_insert_segment+0x104>)
 8010a74:	483b      	ldr	r0, [pc, #236]	; (8010b64 <tcp_oos_insert_segment+0x108>)
 8010a76:	f006 fedf 	bl	8017838 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	899b      	ldrh	r3, [r3, #12]
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fb fc0e 	bl	800c2a4 <lwip_htons>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d028      	beq.n	8010ae6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010a94:	6838      	ldr	r0, [r7, #0]
 8010a96:	f7fe fa63 	bl	800ef60 <tcp_segs_free>
    next = NULL;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	603b      	str	r3, [r7, #0]
 8010a9e:	e056      	b.n	8010b4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	899b      	ldrh	r3, [r3, #12]
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fb fbfb 	bl	800c2a4 <lwip_htons>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00d      	beq.n	8010ad6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	899b      	ldrh	r3, [r3, #12]
 8010ac0:	b29c      	uxth	r4, r3
 8010ac2:	2001      	movs	r0, #1
 8010ac4:	f7fb fbee 	bl	800c2a4 <lwip_htons>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461a      	mov	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	4322      	orrs	r2, r4
 8010ad2:	b292      	uxth	r2, r2
 8010ad4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f7fe fa52 	bl	800ef8a <tcp_seg_free>
    while (next &&
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00e      	beq.n	8010b0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	891b      	ldrh	r3, [r3, #8]
 8010af0:	461a      	mov	r2, r3
 8010af2:	4b1d      	ldr	r3, [pc, #116]	; (8010b68 <tcp_oos_insert_segment+0x10c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	441a      	add	r2, r3
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	6839      	ldr	r1, [r7, #0]
 8010b00:	8909      	ldrh	r1, [r1, #8]
 8010b02:	440b      	add	r3, r1
 8010b04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	daca      	bge.n	8010aa0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d01e      	beq.n	8010b4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	891b      	ldrh	r3, [r3, #8]
 8010b14:	461a      	mov	r2, r3
 8010b16:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <tcp_oos_insert_segment+0x10c>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	441a      	add	r2, r3
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	dd12      	ble.n	8010b4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	4b0d      	ldr	r3, [pc, #52]	; (8010b68 <tcp_oos_insert_segment+0x10c>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	891b      	ldrh	r3, [r3, #8]
 8010b46:	4619      	mov	r1, r3
 8010b48:	4610      	mov	r0, r2
 8010b4a:	f7fc fd83 	bl	800d654 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	601a      	str	r2, [r3, #0]
}
 8010b54:	bf00      	nop
 8010b56:	3714      	adds	r7, #20
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd90      	pop	{r4, r7, pc}
 8010b5c:	08019c10 	.word	0x08019c10
 8010b60:	08019ed0 	.word	0x08019ed0
 8010b64:	08019c5c 	.word	0x08019c5c
 8010b68:	20008e34 	.word	0x20008e34

08010b6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010b6c:	b5b0      	push	{r4, r5, r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010b7a:	e03e      	b.n	8010bfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fc ff70 	bl	800da70 <pbuf_clen>
 8010b90:	4603      	mov	r3, r0
 8010b92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b9a:	8a7a      	ldrh	r2, [r7, #18]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d906      	bls.n	8010bae <tcp_free_acked_segments+0x42>
 8010ba0:	4b2a      	ldr	r3, [pc, #168]	; (8010c4c <tcp_free_acked_segments+0xe0>)
 8010ba2:	f240 4257 	movw	r2, #1111	; 0x457
 8010ba6:	492a      	ldr	r1, [pc, #168]	; (8010c50 <tcp_free_acked_segments+0xe4>)
 8010ba8:	482a      	ldr	r0, [pc, #168]	; (8010c54 <tcp_free_acked_segments+0xe8>)
 8010baa:	f006 fe45 	bl	8017838 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010bb4:	8a7b      	ldrh	r3, [r7, #18]
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	891a      	ldrh	r2, [r3, #8]
 8010bc4:	4b24      	ldr	r3, [pc, #144]	; (8010c58 <tcp_free_acked_segments+0xec>)
 8010bc6:	881b      	ldrh	r3, [r3, #0]
 8010bc8:	4413      	add	r3, r2
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	4b22      	ldr	r3, [pc, #136]	; (8010c58 <tcp_free_acked_segments+0xec>)
 8010bce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010bd0:	6978      	ldr	r0, [r7, #20]
 8010bd2:	f7fe f9da 	bl	800ef8a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d00c      	beq.n	8010bfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d109      	bne.n	8010bfa <tcp_free_acked_segments+0x8e>
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d106      	bne.n	8010bfa <tcp_free_acked_segments+0x8e>
 8010bec:	4b17      	ldr	r3, [pc, #92]	; (8010c4c <tcp_free_acked_segments+0xe0>)
 8010bee:	f240 4261 	movw	r2, #1121	; 0x461
 8010bf2:	491a      	ldr	r1, [pc, #104]	; (8010c5c <tcp_free_acked_segments+0xf0>)
 8010bf4:	4817      	ldr	r0, [pc, #92]	; (8010c54 <tcp_free_acked_segments+0xe8>)
 8010bf6:	f006 fe1f 	bl	8017838 <iprintf>
  while (seg_list != NULL &&
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d020      	beq.n	8010c42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fb fb61 	bl	800c2ce <lwip_htonl>
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	891b      	ldrh	r3, [r3, #8]
 8010c12:	461d      	mov	r5, r3
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	899b      	ldrh	r3, [r3, #12]
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fb fb41 	bl	800c2a4 <lwip_htons>
 8010c22:	4603      	mov	r3, r0
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	f003 0303 	and.w	r3, r3, #3
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d001      	beq.n	8010c32 <tcp_free_acked_segments+0xc6>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	e000      	b.n	8010c34 <tcp_free_acked_segments+0xc8>
 8010c32:	2300      	movs	r3, #0
 8010c34:	442b      	add	r3, r5
 8010c36:	18e2      	adds	r2, r4, r3
 8010c38:	4b09      	ldr	r3, [pc, #36]	; (8010c60 <tcp_free_acked_segments+0xf4>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	dd9c      	ble.n	8010b7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010c42:	68bb      	ldr	r3, [r7, #8]
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3718      	adds	r7, #24
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010c4c:	08019c10 	.word	0x08019c10
 8010c50:	08019ef8 	.word	0x08019ef8
 8010c54:	08019c5c 	.word	0x08019c5c
 8010c58:	20008e3c 	.word	0x20008e3c
 8010c5c:	08019f20 	.word	0x08019f20
 8010c60:	20008e38 	.word	0x20008e38

08010c64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010c64:	b5b0      	push	{r4, r5, r7, lr}
 8010c66:	b094      	sub	sp, #80	; 0x50
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d106      	bne.n	8010c84 <tcp_receive+0x20>
 8010c76:	4b91      	ldr	r3, [pc, #580]	; (8010ebc <tcp_receive+0x258>)
 8010c78:	f240 427b 	movw	r2, #1147	; 0x47b
 8010c7c:	4990      	ldr	r1, [pc, #576]	; (8010ec0 <tcp_receive+0x25c>)
 8010c7e:	4891      	ldr	r0, [pc, #580]	; (8010ec4 <tcp_receive+0x260>)
 8010c80:	f006 fdda 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
 8010c88:	2b03      	cmp	r3, #3
 8010c8a:	d806      	bhi.n	8010c9a <tcp_receive+0x36>
 8010c8c:	4b8b      	ldr	r3, [pc, #556]	; (8010ebc <tcp_receive+0x258>)
 8010c8e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010c92:	498d      	ldr	r1, [pc, #564]	; (8010ec8 <tcp_receive+0x264>)
 8010c94:	488b      	ldr	r0, [pc, #556]	; (8010ec4 <tcp_receive+0x260>)
 8010c96:	f006 fdcf 	bl	8017838 <iprintf>

  if (flags & TCP_ACK) {
 8010c9a:	4b8c      	ldr	r3, [pc, #560]	; (8010ecc <tcp_receive+0x268>)
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	f003 0310 	and.w	r3, r3, #16
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f000 8264 	beq.w	8011170 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cae:	461a      	mov	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cb4:	4413      	add	r3, r2
 8010cb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cbc:	4b84      	ldr	r3, [pc, #528]	; (8010ed0 <tcp_receive+0x26c>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	db1b      	blt.n	8010cfe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cca:	4b81      	ldr	r3, [pc, #516]	; (8010ed0 <tcp_receive+0x26c>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d106      	bne.n	8010ce0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010cd6:	4b7f      	ldr	r3, [pc, #508]	; (8010ed4 <tcp_receive+0x270>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	db0e      	blt.n	8010cfe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010ce4:	4b7b      	ldr	r3, [pc, #492]	; (8010ed4 <tcp_receive+0x270>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d125      	bne.n	8010d38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010cec:	4b7a      	ldr	r3, [pc, #488]	; (8010ed8 <tcp_receive+0x274>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	89db      	ldrh	r3, [r3, #14]
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d91c      	bls.n	8010d38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010cfe:	4b76      	ldr	r3, [pc, #472]	; (8010ed8 <tcp_receive+0x274>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	89db      	ldrh	r3, [r3, #14]
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d205      	bcs.n	8010d28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010d28:	4b69      	ldr	r3, [pc, #420]	; (8010ed0 <tcp_receive+0x26c>)
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010d30:	4b68      	ldr	r3, [pc, #416]	; (8010ed4 <tcp_receive+0x270>)
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010d38:	4b66      	ldr	r3, [pc, #408]	; (8010ed4 <tcp_receive+0x270>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d40:	1ad3      	subs	r3, r2, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dc58      	bgt.n	8010df8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010d46:	4b65      	ldr	r3, [pc, #404]	; (8010edc <tcp_receive+0x278>)
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d14b      	bne.n	8010de6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010d58:	4413      	add	r3, r2
 8010d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d142      	bne.n	8010de6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	db3d      	blt.n	8010de6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d6e:	4b59      	ldr	r3, [pc, #356]	; (8010ed4 <tcp_receive+0x270>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d137      	bne.n	8010de6 <tcp_receive+0x182>
              found_dupack = 1;
 8010d76:	2301      	movs	r3, #1
 8010d78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d80:	2bff      	cmp	r3, #255	; 0xff
 8010d82:	d007      	beq.n	8010d94 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d9a:	2b03      	cmp	r3, #3
 8010d9c:	d91b      	bls.n	8010dd6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da8:	4413      	add	r3, r2
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d30a      	bcc.n	8010dcc <tcp_receive+0x168>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dc0:	4413      	add	r3, r2
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010dca:	e004      	b.n	8010dd6 <tcp_receive+0x172>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d902      	bls.n	8010de6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f001 feeb 	bl	8012bbc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f040 8161 	bne.w	80110b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2200      	movs	r2, #0
 8010df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010df6:	e15b      	b.n	80110b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010df8:	4b36      	ldr	r3, [pc, #216]	; (8010ed4 <tcp_receive+0x270>)
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	3b01      	subs	r3, #1
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f2c0 814e 	blt.w	80110a6 <tcp_receive+0x442>
 8010e0a:	4b32      	ldr	r3, [pc, #200]	; (8010ed4 <tcp_receive+0x270>)
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e12:	1ad3      	subs	r3, r2, r3
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	f300 8146 	bgt.w	80110a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	8b5b      	ldrh	r3, [r3, #26]
 8010e1e:	f003 0304 	and.w	r3, r3, #4
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d010      	beq.n	8010e48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	8b5b      	ldrh	r3, [r3, #26]
 8010e2a:	f023 0304 	bic.w	r3, r3, #4
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e56:	10db      	asrs	r3, r3, #3
 8010e58:	b21b      	sxth	r3, r3
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	4413      	add	r3, r2
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	b21a      	sxth	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010e70:	4b18      	ldr	r3, [pc, #96]	; (8010ed4 <tcp_receive+0x270>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010e88:	4b12      	ldr	r3, [pc, #72]	; (8010ed4 <tcp_receive+0x270>)
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	7d1b      	ldrb	r3, [r3, #20]
 8010e94:	2b03      	cmp	r3, #3
 8010e96:	f240 8097 	bls.w	8010fc8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d245      	bcs.n	8010f36 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	8b5b      	ldrh	r3, [r3, #26]
 8010eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d014      	beq.n	8010ee0 <tcp_receive+0x27c>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e013      	b.n	8010ee2 <tcp_receive+0x27e>
 8010eba:	bf00      	nop
 8010ebc:	08019c10 	.word	0x08019c10
 8010ec0:	08019f40 	.word	0x08019f40
 8010ec4:	08019c5c 	.word	0x08019c5c
 8010ec8:	08019f5c 	.word	0x08019f5c
 8010ecc:	20008e40 	.word	0x20008e40
 8010ed0:	20008e34 	.word	0x20008e34
 8010ed4:	20008e38 	.word	0x20008e38
 8010ed8:	20008e24 	.word	0x20008e24
 8010edc:	20008e3e 	.word	0x20008e3e
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010ee6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ef0:	fb12 f303 	smulbb	r3, r2, r3
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	bf28      	it	cs
 8010efc:	4613      	movcs	r3, r2
 8010efe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f08:	4413      	add	r3, r2
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d309      	bcc.n	8010f2a <tcp_receive+0x2c6>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f1e:	4413      	add	r3, r2
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f28:	e04e      	b.n	8010fc8 <tcp_receive+0x364>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f34:	e048      	b.n	8010fc8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f3e:	4413      	add	r3, r2
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d309      	bcc.n	8010f60 <tcp_receive+0x2fc>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f54:	4413      	add	r3, r2
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f5e:	e004      	b.n	8010f6a <tcp_receive+0x306>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d326      	bcc.n	8010fc8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f9a:	4413      	add	r3, r2
 8010f9c:	b29a      	uxth	r2, r3
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d30a      	bcc.n	8010fbe <tcp_receive+0x35a>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fb2:	4413      	add	r3, r2
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010fbc:	e004      	b.n	8010fc8 <tcp_receive+0x364>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fc4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd0:	4a98      	ldr	r2, [pc, #608]	; (8011234 <tcp_receive+0x5d0>)
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff fdca 	bl	8010b6c <tcp_free_acked_segments>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fe6:	4a94      	ldr	r2, [pc, #592]	; (8011238 <tcp_receive+0x5d4>)
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f7ff fdbf 	bl	8010b6c <tcp_free_acked_segments>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d104      	bne.n	8011006 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011002:	861a      	strh	r2, [r3, #48]	; 0x30
 8011004:	e002      	b.n	801100c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2200      	movs	r2, #0
 801100a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011016:	2b00      	cmp	r3, #0
 8011018:	d103      	bne.n	8011022 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2200      	movs	r2, #0
 801101e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011028:	4b84      	ldr	r3, [pc, #528]	; (801123c <tcp_receive+0x5d8>)
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	4413      	add	r3, r2
 801102e:	b29a      	uxth	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	8b5b      	ldrh	r3, [r3, #26]
 801103a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801103e:	2b00      	cmp	r3, #0
 8011040:	d035      	beq.n	80110ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011046:	2b00      	cmp	r3, #0
 8011048:	d118      	bne.n	801107c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00c      	beq.n	801106c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	4618      	mov	r0, r3
 8011060:	f7fb f935 	bl	800c2ce <lwip_htonl>
 8011064:	4603      	mov	r3, r0
 8011066:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011068:	2b00      	cmp	r3, #0
 801106a:	dc20      	bgt.n	80110ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8b5b      	ldrh	r3, [r3, #26]
 8011070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011074:	b29a      	uxth	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801107a:	e018      	b.n	80110ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	f7fb f920 	bl	800c2ce <lwip_htonl>
 801108e:	4603      	mov	r3, r0
 8011090:	1ae3      	subs	r3, r4, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	dc0b      	bgt.n	80110ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	8b5b      	ldrh	r3, [r3, #26]
 801109a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801109e:	b29a      	uxth	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110a4:	e003      	b.n	80110ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f001 ff76 	bl	8012f98 <tcp_send_empty_ack>
 80110ac:	e000      	b.n	80110b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d05b      	beq.n	8011170 <tcp_receive+0x50c>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110bc:	4b60      	ldr	r3, [pc, #384]	; (8011240 <tcp_receive+0x5dc>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	da54      	bge.n	8011170 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80110c6:	4b5f      	ldr	r3, [pc, #380]	; (8011244 <tcp_receive+0x5e0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80110da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110e4:	10db      	asrs	r3, r3, #3
 80110e6:	b21b      	sxth	r3, r3
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80110fe:	4413      	add	r3, r2
 8011100:	b29b      	uxth	r3, r3
 8011102:	b21a      	sxth	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011108:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801110c:	2b00      	cmp	r3, #0
 801110e:	da05      	bge.n	801111c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011114:	425b      	negs	r3, r3
 8011116:	b29b      	uxth	r3, r3
 8011118:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801111c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011126:	109b      	asrs	r3, r3, #2
 8011128:	b21b      	sxth	r3, r3
 801112a:	b29b      	uxth	r3, r3
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	b29b      	uxth	r3, r3
 8011130:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801113a:	b29a      	uxth	r2, r3
 801113c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011140:	4413      	add	r3, r2
 8011142:	b29b      	uxth	r3, r3
 8011144:	b21a      	sxth	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011150:	10db      	asrs	r3, r3, #3
 8011152:	b21b      	sxth	r3, r3
 8011154:	b29a      	uxth	r2, r3
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801115c:	b29b      	uxth	r3, r3
 801115e:	4413      	add	r3, r2
 8011160:	b29b      	uxth	r3, r3
 8011162:	b21a      	sxth	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011170:	4b35      	ldr	r3, [pc, #212]	; (8011248 <tcp_receive+0x5e4>)
 8011172:	881b      	ldrh	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	f000 84e2 	beq.w	8011b3e <tcp_receive+0xeda>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7d1b      	ldrb	r3, [r3, #20]
 801117e:	2b06      	cmp	r3, #6
 8011180:	f200 84dd 	bhi.w	8011b3e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011188:	4b30      	ldr	r3, [pc, #192]	; (801124c <tcp_receive+0x5e8>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	3b01      	subs	r3, #1
 8011190:	2b00      	cmp	r3, #0
 8011192:	f2c0 808f 	blt.w	80112b4 <tcp_receive+0x650>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801119a:	4b2b      	ldr	r3, [pc, #172]	; (8011248 <tcp_receive+0x5e4>)
 801119c:	881b      	ldrh	r3, [r3, #0]
 801119e:	4619      	mov	r1, r3
 80111a0:	4b2a      	ldr	r3, [pc, #168]	; (801124c <tcp_receive+0x5e8>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	440b      	add	r3, r1
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	3301      	adds	r3, #1
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f300 8082 	bgt.w	80112b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80111b0:	4b27      	ldr	r3, [pc, #156]	; (8011250 <tcp_receive+0x5ec>)
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111ba:	4b24      	ldr	r3, [pc, #144]	; (801124c <tcp_receive+0x5e8>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80111c2:	4b23      	ldr	r3, [pc, #140]	; (8011250 <tcp_receive+0x5ec>)
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d106      	bne.n	80111d8 <tcp_receive+0x574>
 80111ca:	4b22      	ldr	r3, [pc, #136]	; (8011254 <tcp_receive+0x5f0>)
 80111cc:	f240 5294 	movw	r2, #1428	; 0x594
 80111d0:	4921      	ldr	r1, [pc, #132]	; (8011258 <tcp_receive+0x5f4>)
 80111d2:	4822      	ldr	r0, [pc, #136]	; (801125c <tcp_receive+0x5f8>)
 80111d4:	f006 fb30 	bl	8017838 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80111de:	4293      	cmp	r3, r2
 80111e0:	d906      	bls.n	80111f0 <tcp_receive+0x58c>
 80111e2:	4b1c      	ldr	r3, [pc, #112]	; (8011254 <tcp_receive+0x5f0>)
 80111e4:	f240 5295 	movw	r2, #1429	; 0x595
 80111e8:	491d      	ldr	r1, [pc, #116]	; (8011260 <tcp_receive+0x5fc>)
 80111ea:	481c      	ldr	r0, [pc, #112]	; (801125c <tcp_receive+0x5f8>)
 80111ec:	f006 fb24 	bl	8017838 <iprintf>
      off = (u16_t)off32;
 80111f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80111f6:	4b16      	ldr	r3, [pc, #88]	; (8011250 <tcp_receive+0x5ec>)
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	891b      	ldrh	r3, [r3, #8]
 80111fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011200:	429a      	cmp	r2, r3
 8011202:	d906      	bls.n	8011212 <tcp_receive+0x5ae>
 8011204:	4b13      	ldr	r3, [pc, #76]	; (8011254 <tcp_receive+0x5f0>)
 8011206:	f240 5297 	movw	r2, #1431	; 0x597
 801120a:	4916      	ldr	r1, [pc, #88]	; (8011264 <tcp_receive+0x600>)
 801120c:	4813      	ldr	r0, [pc, #76]	; (801125c <tcp_receive+0x5f8>)
 801120e:	f006 fb13 	bl	8017838 <iprintf>
      inseg.len -= off;
 8011212:	4b0f      	ldr	r3, [pc, #60]	; (8011250 <tcp_receive+0x5ec>)
 8011214:	891a      	ldrh	r2, [r3, #8]
 8011216:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801121a:	1ad3      	subs	r3, r2, r3
 801121c:	b29a      	uxth	r2, r3
 801121e:	4b0c      	ldr	r3, [pc, #48]	; (8011250 <tcp_receive+0x5ec>)
 8011220:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011222:	4b0b      	ldr	r3, [pc, #44]	; (8011250 <tcp_receive+0x5ec>)
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	891a      	ldrh	r2, [r3, #8]
 8011228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801122c:	1ad3      	subs	r3, r2, r3
 801122e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011230:	e02a      	b.n	8011288 <tcp_receive+0x624>
 8011232:	bf00      	nop
 8011234:	08019f78 	.word	0x08019f78
 8011238:	08019f80 	.word	0x08019f80
 801123c:	20008e3c 	.word	0x20008e3c
 8011240:	20008e38 	.word	0x20008e38
 8011244:	20008dfc 	.word	0x20008dfc
 8011248:	20008e3e 	.word	0x20008e3e
 801124c:	20008e34 	.word	0x20008e34
 8011250:	20008e14 	.word	0x20008e14
 8011254:	08019c10 	.word	0x08019c10
 8011258:	08019f88 	.word	0x08019f88
 801125c:	08019c5c 	.word	0x08019c5c
 8011260:	08019f98 	.word	0x08019f98
 8011264:	08019fa8 	.word	0x08019fa8
        off -= p->len;
 8011268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801126a:	895b      	ldrh	r3, [r3, #10]
 801126c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011270:	1ad3      	subs	r3, r2, r3
 8011272:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011278:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801127a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801127c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801127e:	2200      	movs	r2, #0
 8011280:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801128a:	895b      	ldrh	r3, [r3, #10]
 801128c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011290:	429a      	cmp	r2, r3
 8011292:	d8e9      	bhi.n	8011268 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011294:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011298:	4619      	mov	r1, r3
 801129a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801129c:	f7fc fada 	bl	800d854 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	4a91      	ldr	r2, [pc, #580]	; (80114ec <tcp_receive+0x888>)
 80112a6:	6013      	str	r3, [r2, #0]
 80112a8:	4b91      	ldr	r3, [pc, #580]	; (80114f0 <tcp_receive+0x88c>)
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	4a8f      	ldr	r2, [pc, #572]	; (80114ec <tcp_receive+0x888>)
 80112ae:	6812      	ldr	r2, [r2, #0]
 80112b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80112b2:	e00d      	b.n	80112d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80112b4:	4b8d      	ldr	r3, [pc, #564]	; (80114ec <tcp_receive+0x888>)
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	da06      	bge.n	80112d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	8b5b      	ldrh	r3, [r3, #26]
 80112c6:	f043 0302 	orr.w	r3, r3, #2
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80112d0:	4b86      	ldr	r3, [pc, #536]	; (80114ec <tcp_receive+0x888>)
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d8:	1ad3      	subs	r3, r2, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f2c0 842a 	blt.w	8011b34 <tcp_receive+0xed0>
 80112e0:	4b82      	ldr	r3, [pc, #520]	; (80114ec <tcp_receive+0x888>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e8:	6879      	ldr	r1, [r7, #4]
 80112ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112ec:	440b      	add	r3, r1
 80112ee:	1ad3      	subs	r3, r2, r3
 80112f0:	3301      	adds	r3, #1
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f300 841e 	bgt.w	8011b34 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112fc:	4b7b      	ldr	r3, [pc, #492]	; (80114ec <tcp_receive+0x888>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	429a      	cmp	r2, r3
 8011302:	f040 829a 	bne.w	801183a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011306:	4b7a      	ldr	r3, [pc, #488]	; (80114f0 <tcp_receive+0x88c>)
 8011308:	891c      	ldrh	r4, [r3, #8]
 801130a:	4b79      	ldr	r3, [pc, #484]	; (80114f0 <tcp_receive+0x88c>)
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	899b      	ldrh	r3, [r3, #12]
 8011310:	b29b      	uxth	r3, r3
 8011312:	4618      	mov	r0, r3
 8011314:	f7fa ffc6 	bl	800c2a4 <lwip_htons>
 8011318:	4603      	mov	r3, r0
 801131a:	b2db      	uxtb	r3, r3
 801131c:	f003 0303 	and.w	r3, r3, #3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d001      	beq.n	8011328 <tcp_receive+0x6c4>
 8011324:	2301      	movs	r3, #1
 8011326:	e000      	b.n	801132a <tcp_receive+0x6c6>
 8011328:	2300      	movs	r3, #0
 801132a:	4423      	add	r3, r4
 801132c:	b29a      	uxth	r2, r3
 801132e:	4b71      	ldr	r3, [pc, #452]	; (80114f4 <tcp_receive+0x890>)
 8011330:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011336:	4b6f      	ldr	r3, [pc, #444]	; (80114f4 <tcp_receive+0x890>)
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d275      	bcs.n	801142a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801133e:	4b6c      	ldr	r3, [pc, #432]	; (80114f0 <tcp_receive+0x88c>)
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	899b      	ldrh	r3, [r3, #12]
 8011344:	b29b      	uxth	r3, r3
 8011346:	4618      	mov	r0, r3
 8011348:	f7fa ffac 	bl	800c2a4 <lwip_htons>
 801134c:	4603      	mov	r3, r0
 801134e:	b2db      	uxtb	r3, r3
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	2b00      	cmp	r3, #0
 8011356:	d01f      	beq.n	8011398 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011358:	4b65      	ldr	r3, [pc, #404]	; (80114f0 <tcp_receive+0x88c>)
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	899b      	ldrh	r3, [r3, #12]
 801135e:	b29b      	uxth	r3, r3
 8011360:	b21b      	sxth	r3, r3
 8011362:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011366:	b21c      	sxth	r4, r3
 8011368:	4b61      	ldr	r3, [pc, #388]	; (80114f0 <tcp_receive+0x88c>)
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	899b      	ldrh	r3, [r3, #12]
 801136e:	b29b      	uxth	r3, r3
 8011370:	4618      	mov	r0, r3
 8011372:	f7fa ff97 	bl	800c2a4 <lwip_htons>
 8011376:	4603      	mov	r3, r0
 8011378:	b2db      	uxtb	r3, r3
 801137a:	b29b      	uxth	r3, r3
 801137c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011380:	b29b      	uxth	r3, r3
 8011382:	4618      	mov	r0, r3
 8011384:	f7fa ff8e 	bl	800c2a4 <lwip_htons>
 8011388:	4603      	mov	r3, r0
 801138a:	b21b      	sxth	r3, r3
 801138c:	4323      	orrs	r3, r4
 801138e:	b21a      	sxth	r2, r3
 8011390:	4b57      	ldr	r3, [pc, #348]	; (80114f0 <tcp_receive+0x88c>)
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	b292      	uxth	r2, r2
 8011396:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801139c:	4b54      	ldr	r3, [pc, #336]	; (80114f0 <tcp_receive+0x88c>)
 801139e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113a0:	4b53      	ldr	r3, [pc, #332]	; (80114f0 <tcp_receive+0x88c>)
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fa ff7b 	bl	800c2a4 <lwip_htons>
 80113ae:	4603      	mov	r3, r0
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	f003 0302 	and.w	r3, r3, #2
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d005      	beq.n	80113c6 <tcp_receive+0x762>
            inseg.len -= 1;
 80113ba:	4b4d      	ldr	r3, [pc, #308]	; (80114f0 <tcp_receive+0x88c>)
 80113bc:	891b      	ldrh	r3, [r3, #8]
 80113be:	3b01      	subs	r3, #1
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	4b4b      	ldr	r3, [pc, #300]	; (80114f0 <tcp_receive+0x88c>)
 80113c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80113c6:	4b4a      	ldr	r3, [pc, #296]	; (80114f0 <tcp_receive+0x88c>)
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	4a49      	ldr	r2, [pc, #292]	; (80114f0 <tcp_receive+0x88c>)
 80113cc:	8912      	ldrh	r2, [r2, #8]
 80113ce:	4611      	mov	r1, r2
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fc f93f 	bl	800d654 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80113d6:	4b46      	ldr	r3, [pc, #280]	; (80114f0 <tcp_receive+0x88c>)
 80113d8:	891c      	ldrh	r4, [r3, #8]
 80113da:	4b45      	ldr	r3, [pc, #276]	; (80114f0 <tcp_receive+0x88c>)
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	899b      	ldrh	r3, [r3, #12]
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fa ff5e 	bl	800c2a4 <lwip_htons>
 80113e8:	4603      	mov	r3, r0
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	f003 0303 	and.w	r3, r3, #3
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d001      	beq.n	80113f8 <tcp_receive+0x794>
 80113f4:	2301      	movs	r3, #1
 80113f6:	e000      	b.n	80113fa <tcp_receive+0x796>
 80113f8:	2300      	movs	r3, #0
 80113fa:	4423      	add	r3, r4
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	4b3d      	ldr	r3, [pc, #244]	; (80114f4 <tcp_receive+0x890>)
 8011400:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011402:	4b3c      	ldr	r3, [pc, #240]	; (80114f4 <tcp_receive+0x890>)
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	4b38      	ldr	r3, [pc, #224]	; (80114ec <tcp_receive+0x888>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	441a      	add	r2, r3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011412:	6879      	ldr	r1, [r7, #4]
 8011414:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011416:	440b      	add	r3, r1
 8011418:	429a      	cmp	r2, r3
 801141a:	d006      	beq.n	801142a <tcp_receive+0x7c6>
 801141c:	4b36      	ldr	r3, [pc, #216]	; (80114f8 <tcp_receive+0x894>)
 801141e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011422:	4936      	ldr	r1, [pc, #216]	; (80114fc <tcp_receive+0x898>)
 8011424:	4836      	ldr	r0, [pc, #216]	; (8011500 <tcp_receive+0x89c>)
 8011426:	f006 fa07 	bl	8017838 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 80e7 	beq.w	8011602 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011434:	4b2e      	ldr	r3, [pc, #184]	; (80114f0 <tcp_receive+0x88c>)
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	899b      	ldrh	r3, [r3, #12]
 801143a:	b29b      	uxth	r3, r3
 801143c:	4618      	mov	r0, r3
 801143e:	f7fa ff31 	bl	800c2a4 <lwip_htons>
 8011442:	4603      	mov	r3, r0
 8011444:	b2db      	uxtb	r3, r3
 8011446:	f003 0301 	and.w	r3, r3, #1
 801144a:	2b00      	cmp	r3, #0
 801144c:	d010      	beq.n	8011470 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801144e:	e00a      	b.n	8011466 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011454:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f7fd fd92 	bl	800ef8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801146a:	2b00      	cmp	r3, #0
 801146c:	d1f0      	bne.n	8011450 <tcp_receive+0x7ec>
 801146e:	e0c8      	b.n	8011602 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011474:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011476:	e052      	b.n	801151e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	899b      	ldrh	r3, [r3, #12]
 801147e:	b29b      	uxth	r3, r3
 8011480:	4618      	mov	r0, r3
 8011482:	f7fa ff0f 	bl	800c2a4 <lwip_htons>
 8011486:	4603      	mov	r3, r0
 8011488:	b2db      	uxtb	r3, r3
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	d03d      	beq.n	801150e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011492:	4b17      	ldr	r3, [pc, #92]	; (80114f0 <tcp_receive+0x88c>)
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	899b      	ldrh	r3, [r3, #12]
 8011498:	b29b      	uxth	r3, r3
 801149a:	4618      	mov	r0, r3
 801149c:	f7fa ff02 	bl	800c2a4 <lwip_htons>
 80114a0:	4603      	mov	r3, r0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d130      	bne.n	801150e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80114ac:	4b10      	ldr	r3, [pc, #64]	; (80114f0 <tcp_receive+0x88c>)
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	899b      	ldrh	r3, [r3, #12]
 80114b2:	b29c      	uxth	r4, r3
 80114b4:	2001      	movs	r0, #1
 80114b6:	f7fa fef5 	bl	800c2a4 <lwip_htons>
 80114ba:	4603      	mov	r3, r0
 80114bc:	461a      	mov	r2, r3
 80114be:	4b0c      	ldr	r3, [pc, #48]	; (80114f0 <tcp_receive+0x88c>)
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	4322      	orrs	r2, r4
 80114c4:	b292      	uxth	r2, r2
 80114c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80114c8:	4b09      	ldr	r3, [pc, #36]	; (80114f0 <tcp_receive+0x88c>)
 80114ca:	891c      	ldrh	r4, [r3, #8]
 80114cc:	4b08      	ldr	r3, [pc, #32]	; (80114f0 <tcp_receive+0x88c>)
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	899b      	ldrh	r3, [r3, #12]
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fa fee5 	bl	800c2a4 <lwip_htons>
 80114da:	4603      	mov	r3, r0
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	f003 0303 	and.w	r3, r3, #3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d00e      	beq.n	8011504 <tcp_receive+0x8a0>
 80114e6:	2301      	movs	r3, #1
 80114e8:	e00d      	b.n	8011506 <tcp_receive+0x8a2>
 80114ea:	bf00      	nop
 80114ec:	20008e34 	.word	0x20008e34
 80114f0:	20008e14 	.word	0x20008e14
 80114f4:	20008e3e 	.word	0x20008e3e
 80114f8:	08019c10 	.word	0x08019c10
 80114fc:	08019fb8 	.word	0x08019fb8
 8011500:	08019c5c 	.word	0x08019c5c
 8011504:	2300      	movs	r3, #0
 8011506:	4423      	add	r3, r4
 8011508:	b29a      	uxth	r2, r3
 801150a:	4b98      	ldr	r3, [pc, #608]	; (801176c <tcp_receive+0xb08>)
 801150c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801150e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011510:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011518:	6938      	ldr	r0, [r7, #16]
 801151a:	f7fd fd36 	bl	800ef8a <tcp_seg_free>
            while (next &&
 801151e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00e      	beq.n	8011542 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011524:	4b91      	ldr	r3, [pc, #580]	; (801176c <tcp_receive+0xb08>)
 8011526:	881b      	ldrh	r3, [r3, #0]
 8011528:	461a      	mov	r2, r3
 801152a:	4b91      	ldr	r3, [pc, #580]	; (8011770 <tcp_receive+0xb0c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	441a      	add	r2, r3
 8011530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011538:	8909      	ldrh	r1, [r1, #8]
 801153a:	440b      	add	r3, r1
 801153c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801153e:	2b00      	cmp	r3, #0
 8011540:	da9a      	bge.n	8011478 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d059      	beq.n	80115fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011548:	4b88      	ldr	r3, [pc, #544]	; (801176c <tcp_receive+0xb08>)
 801154a:	881b      	ldrh	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	4b88      	ldr	r3, [pc, #544]	; (8011770 <tcp_receive+0xb0c>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	441a      	add	r2, r3
 8011554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801155c:	2b00      	cmp	r3, #0
 801155e:	dd4d      	ble.n	80115fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	b29a      	uxth	r2, r3
 8011568:	4b81      	ldr	r3, [pc, #516]	; (8011770 <tcp_receive+0xb0c>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	b29b      	uxth	r3, r3
 801156e:	1ad3      	subs	r3, r2, r3
 8011570:	b29a      	uxth	r2, r3
 8011572:	4b80      	ldr	r3, [pc, #512]	; (8011774 <tcp_receive+0xb10>)
 8011574:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011576:	4b7f      	ldr	r3, [pc, #508]	; (8011774 <tcp_receive+0xb10>)
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	899b      	ldrh	r3, [r3, #12]
 801157c:	b29b      	uxth	r3, r3
 801157e:	4618      	mov	r0, r3
 8011580:	f7fa fe90 	bl	800c2a4 <lwip_htons>
 8011584:	4603      	mov	r3, r0
 8011586:	b2db      	uxtb	r3, r3
 8011588:	f003 0302 	and.w	r3, r3, #2
 801158c:	2b00      	cmp	r3, #0
 801158e:	d005      	beq.n	801159c <tcp_receive+0x938>
                inseg.len -= 1;
 8011590:	4b78      	ldr	r3, [pc, #480]	; (8011774 <tcp_receive+0xb10>)
 8011592:	891b      	ldrh	r3, [r3, #8]
 8011594:	3b01      	subs	r3, #1
 8011596:	b29a      	uxth	r2, r3
 8011598:	4b76      	ldr	r3, [pc, #472]	; (8011774 <tcp_receive+0xb10>)
 801159a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801159c:	4b75      	ldr	r3, [pc, #468]	; (8011774 <tcp_receive+0xb10>)
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	4a74      	ldr	r2, [pc, #464]	; (8011774 <tcp_receive+0xb10>)
 80115a2:	8912      	ldrh	r2, [r2, #8]
 80115a4:	4611      	mov	r1, r2
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fc f854 	bl	800d654 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80115ac:	4b71      	ldr	r3, [pc, #452]	; (8011774 <tcp_receive+0xb10>)
 80115ae:	891c      	ldrh	r4, [r3, #8]
 80115b0:	4b70      	ldr	r3, [pc, #448]	; (8011774 <tcp_receive+0xb10>)
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	899b      	ldrh	r3, [r3, #12]
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7fa fe73 	bl	800c2a4 <lwip_htons>
 80115be:	4603      	mov	r3, r0
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	f003 0303 	and.w	r3, r3, #3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d001      	beq.n	80115ce <tcp_receive+0x96a>
 80115ca:	2301      	movs	r3, #1
 80115cc:	e000      	b.n	80115d0 <tcp_receive+0x96c>
 80115ce:	2300      	movs	r3, #0
 80115d0:	4423      	add	r3, r4
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	4b65      	ldr	r3, [pc, #404]	; (801176c <tcp_receive+0xb08>)
 80115d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80115d8:	4b64      	ldr	r3, [pc, #400]	; (801176c <tcp_receive+0xb08>)
 80115da:	881b      	ldrh	r3, [r3, #0]
 80115dc:	461a      	mov	r2, r3
 80115de:	4b64      	ldr	r3, [pc, #400]	; (8011770 <tcp_receive+0xb0c>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	441a      	add	r2, r3
 80115e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d006      	beq.n	80115fc <tcp_receive+0x998>
 80115ee:	4b62      	ldr	r3, [pc, #392]	; (8011778 <tcp_receive+0xb14>)
 80115f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80115f4:	4961      	ldr	r1, [pc, #388]	; (801177c <tcp_receive+0xb18>)
 80115f6:	4862      	ldr	r0, [pc, #392]	; (8011780 <tcp_receive+0xb1c>)
 80115f8:	f006 f91e 	bl	8017838 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011600:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011602:	4b5a      	ldr	r3, [pc, #360]	; (801176c <tcp_receive+0xb08>)
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	461a      	mov	r2, r3
 8011608:	4b59      	ldr	r3, [pc, #356]	; (8011770 <tcp_receive+0xb0c>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	441a      	add	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011616:	4b55      	ldr	r3, [pc, #340]	; (801176c <tcp_receive+0xb08>)
 8011618:	881b      	ldrh	r3, [r3, #0]
 801161a:	429a      	cmp	r2, r3
 801161c:	d206      	bcs.n	801162c <tcp_receive+0x9c8>
 801161e:	4b56      	ldr	r3, [pc, #344]	; (8011778 <tcp_receive+0xb14>)
 8011620:	f240 6207 	movw	r2, #1543	; 0x607
 8011624:	4957      	ldr	r1, [pc, #348]	; (8011784 <tcp_receive+0xb20>)
 8011626:	4856      	ldr	r0, [pc, #344]	; (8011780 <tcp_receive+0xb1c>)
 8011628:	f006 f906 	bl	8017838 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011630:	4b4e      	ldr	r3, [pc, #312]	; (801176c <tcp_receive+0xb08>)
 8011632:	881b      	ldrh	r3, [r3, #0]
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	b29a      	uxth	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7fc ffc5 	bl	800e5cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011642:	4b4c      	ldr	r3, [pc, #304]	; (8011774 <tcp_receive+0xb10>)
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	891b      	ldrh	r3, [r3, #8]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d006      	beq.n	801165a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801164c:	4b49      	ldr	r3, [pc, #292]	; (8011774 <tcp_receive+0xb10>)
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	4a4d      	ldr	r2, [pc, #308]	; (8011788 <tcp_receive+0xb24>)
 8011652:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011654:	4b47      	ldr	r3, [pc, #284]	; (8011774 <tcp_receive+0xb10>)
 8011656:	2200      	movs	r2, #0
 8011658:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801165a:	4b46      	ldr	r3, [pc, #280]	; (8011774 <tcp_receive+0xb10>)
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	899b      	ldrh	r3, [r3, #12]
 8011660:	b29b      	uxth	r3, r3
 8011662:	4618      	mov	r0, r3
 8011664:	f7fa fe1e 	bl	800c2a4 <lwip_htons>
 8011668:	4603      	mov	r3, r0
 801166a:	b2db      	uxtb	r3, r3
 801166c:	f003 0301 	and.w	r3, r3, #1
 8011670:	2b00      	cmp	r3, #0
 8011672:	f000 80b8 	beq.w	80117e6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011676:	4b45      	ldr	r3, [pc, #276]	; (801178c <tcp_receive+0xb28>)
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	f043 0320 	orr.w	r3, r3, #32
 801167e:	b2da      	uxtb	r2, r3
 8011680:	4b42      	ldr	r3, [pc, #264]	; (801178c <tcp_receive+0xb28>)
 8011682:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011684:	e0af      	b.n	80117e6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801168a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	4a36      	ldr	r2, [pc, #216]	; (8011770 <tcp_receive+0xb0c>)
 8011696:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	891b      	ldrh	r3, [r3, #8]
 801169c:	461c      	mov	r4, r3
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	899b      	ldrh	r3, [r3, #12]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fa fdfc 	bl	800c2a4 <lwip_htons>
 80116ac:	4603      	mov	r3, r0
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	f003 0303 	and.w	r3, r3, #3
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d001      	beq.n	80116bc <tcp_receive+0xa58>
 80116b8:	2301      	movs	r3, #1
 80116ba:	e000      	b.n	80116be <tcp_receive+0xa5a>
 80116bc:	2300      	movs	r3, #0
 80116be:	191a      	adds	r2, r3, r4
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c4:	441a      	add	r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116ce:	461c      	mov	r4, r3
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	891b      	ldrh	r3, [r3, #8]
 80116d4:	461d      	mov	r5, r3
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	899b      	ldrh	r3, [r3, #12]
 80116dc:	b29b      	uxth	r3, r3
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fa fde0 	bl	800c2a4 <lwip_htons>
 80116e4:	4603      	mov	r3, r0
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	f003 0303 	and.w	r3, r3, #3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <tcp_receive+0xa90>
 80116f0:	2301      	movs	r3, #1
 80116f2:	e000      	b.n	80116f6 <tcp_receive+0xa92>
 80116f4:	2300      	movs	r3, #0
 80116f6:	442b      	add	r3, r5
 80116f8:	429c      	cmp	r4, r3
 80116fa:	d206      	bcs.n	801170a <tcp_receive+0xaa6>
 80116fc:	4b1e      	ldr	r3, [pc, #120]	; (8011778 <tcp_receive+0xb14>)
 80116fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8011702:	4923      	ldr	r1, [pc, #140]	; (8011790 <tcp_receive+0xb2c>)
 8011704:	481e      	ldr	r0, [pc, #120]	; (8011780 <tcp_receive+0xb1c>)
 8011706:	f006 f897 	bl	8017838 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	891b      	ldrh	r3, [r3, #8]
 801170e:	461c      	mov	r4, r3
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	899b      	ldrh	r3, [r3, #12]
 8011716:	b29b      	uxth	r3, r3
 8011718:	4618      	mov	r0, r3
 801171a:	f7fa fdc3 	bl	800c2a4 <lwip_htons>
 801171e:	4603      	mov	r3, r0
 8011720:	b2db      	uxtb	r3, r3
 8011722:	f003 0303 	and.w	r3, r3, #3
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <tcp_receive+0xaca>
 801172a:	2301      	movs	r3, #1
 801172c:	e000      	b.n	8011730 <tcp_receive+0xacc>
 801172e:	2300      	movs	r3, #0
 8011730:	1919      	adds	r1, r3, r4
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011736:	b28b      	uxth	r3, r1
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	b29a      	uxth	r2, r3
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7fc ff43 	bl	800e5cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	891b      	ldrh	r3, [r3, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d028      	beq.n	80117a2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011750:	4b0d      	ldr	r3, [pc, #52]	; (8011788 <tcp_receive+0xb24>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d01d      	beq.n	8011794 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011758:	4b0b      	ldr	r3, [pc, #44]	; (8011788 <tcp_receive+0xb24>)
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	4619      	mov	r1, r3
 8011762:	4610      	mov	r0, r2
 8011764:	f7fc f9be 	bl	800dae4 <pbuf_cat>
 8011768:	e018      	b.n	801179c <tcp_receive+0xb38>
 801176a:	bf00      	nop
 801176c:	20008e3e 	.word	0x20008e3e
 8011770:	20008e34 	.word	0x20008e34
 8011774:	20008e14 	.word	0x20008e14
 8011778:	08019c10 	.word	0x08019c10
 801177c:	08019ff0 	.word	0x08019ff0
 8011780:	08019c5c 	.word	0x08019c5c
 8011784:	0801a02c 	.word	0x0801a02c
 8011788:	20008e44 	.word	0x20008e44
 801178c:	20008e41 	.word	0x20008e41
 8011790:	0801a04c 	.word	0x0801a04c
            } else {
              recv_data = cseg->p;
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	4a70      	ldr	r2, [pc, #448]	; (801195c <tcp_receive+0xcf8>)
 801179a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	2200      	movs	r2, #0
 80117a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	899b      	ldrh	r3, [r3, #12]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fa fd7a 	bl	800c2a4 <lwip_htons>
 80117b0:	4603      	mov	r3, r0
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	f003 0301 	and.w	r3, r3, #1
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00d      	beq.n	80117d8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80117bc:	4b68      	ldr	r3, [pc, #416]	; (8011960 <tcp_receive+0xcfc>)
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	f043 0320 	orr.w	r3, r3, #32
 80117c4:	b2da      	uxtb	r2, r3
 80117c6:	4b66      	ldr	r3, [pc, #408]	; (8011960 <tcp_receive+0xcfc>)
 80117c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	7d1b      	ldrb	r3, [r3, #20]
 80117ce:	2b04      	cmp	r3, #4
 80117d0:	d102      	bne.n	80117d8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2207      	movs	r2, #7
 80117d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80117e0:	68b8      	ldr	r0, [r7, #8]
 80117e2:	f7fd fbd2 	bl	800ef8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d008      	beq.n	8011800 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	685a      	ldr	r2, [r3, #4]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80117fa:	429a      	cmp	r2, r3
 80117fc:	f43f af43 	beq.w	8011686 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	8b5b      	ldrh	r3, [r3, #26]
 8011804:	f003 0301 	and.w	r3, r3, #1
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00e      	beq.n	801182a <tcp_receive+0xbc6>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	8b5b      	ldrh	r3, [r3, #26]
 8011810:	f023 0301 	bic.w	r3, r3, #1
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	835a      	strh	r2, [r3, #26]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	8b5b      	ldrh	r3, [r3, #26]
 801181e:	f043 0302 	orr.w	r3, r3, #2
 8011822:	b29a      	uxth	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011828:	e188      	b.n	8011b3c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	8b5b      	ldrh	r3, [r3, #26]
 801182e:	f043 0301 	orr.w	r3, r3, #1
 8011832:	b29a      	uxth	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011838:	e180      	b.n	8011b3c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801183e:	2b00      	cmp	r3, #0
 8011840:	d106      	bne.n	8011850 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011842:	4848      	ldr	r0, [pc, #288]	; (8011964 <tcp_receive+0xd00>)
 8011844:	f7fd fbba 	bl	800efbc <tcp_seg_copy>
 8011848:	4602      	mov	r2, r0
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	675a      	str	r2, [r3, #116]	; 0x74
 801184e:	e16d      	b.n	8011b2c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011850:	2300      	movs	r3, #0
 8011852:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011858:	63bb      	str	r3, [r7, #56]	; 0x38
 801185a:	e157      	b.n	8011b0c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	685a      	ldr	r2, [r3, #4]
 8011862:	4b41      	ldr	r3, [pc, #260]	; (8011968 <tcp_receive+0xd04>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	429a      	cmp	r2, r3
 8011868:	d11d      	bne.n	80118a6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801186a:	4b3e      	ldr	r3, [pc, #248]	; (8011964 <tcp_receive+0xd00>)
 801186c:	891a      	ldrh	r2, [r3, #8]
 801186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011870:	891b      	ldrh	r3, [r3, #8]
 8011872:	429a      	cmp	r2, r3
 8011874:	f240 814f 	bls.w	8011b16 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011878:	483a      	ldr	r0, [pc, #232]	; (8011964 <tcp_receive+0xd00>)
 801187a:	f7fd fb9f 	bl	800efbc <tcp_seg_copy>
 801187e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	2b00      	cmp	r3, #0
 8011884:	f000 8149 	beq.w	8011b1a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801188a:	2b00      	cmp	r3, #0
 801188c:	d003      	beq.n	8011896 <tcp_receive+0xc32>
                    prev->next = cseg;
 801188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011890:	697a      	ldr	r2, [r7, #20]
 8011892:	601a      	str	r2, [r3, #0]
 8011894:	e002      	b.n	801189c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801189c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801189e:	6978      	ldr	r0, [r7, #20]
 80118a0:	f7ff f8dc 	bl	8010a5c <tcp_oos_insert_segment>
                }
                break;
 80118a4:	e139      	b.n	8011b1a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80118a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d117      	bne.n	80118dc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80118ac:	4b2e      	ldr	r3, [pc, #184]	; (8011968 <tcp_receive+0xd04>)
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	da57      	bge.n	801196c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118bc:	4829      	ldr	r0, [pc, #164]	; (8011964 <tcp_receive+0xd00>)
 80118be:	f7fd fb7d 	bl	800efbc <tcp_seg_copy>
 80118c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	f000 8129 	beq.w	8011b1e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	69ba      	ldr	r2, [r7, #24]
 80118d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80118d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118d4:	69b8      	ldr	r0, [r7, #24]
 80118d6:	f7ff f8c1 	bl	8010a5c <tcp_oos_insert_segment>
                  }
                  break;
 80118da:	e120      	b.n	8011b1e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80118dc:	4b22      	ldr	r3, [pc, #136]	; (8011968 <tcp_receive+0xd04>)
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	3b01      	subs	r3, #1
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	db3e      	blt.n	801196c <tcp_receive+0xd08>
 80118ee:	4b1e      	ldr	r3, [pc, #120]	; (8011968 <tcp_receive+0xd04>)
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	685b      	ldr	r3, [r3, #4]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	3301      	adds	r3, #1
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	dc35      	bgt.n	801196c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011900:	4818      	ldr	r0, [pc, #96]	; (8011964 <tcp_receive+0xd00>)
 8011902:	f7fd fb5b 	bl	800efbc <tcp_seg_copy>
 8011906:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	f000 8109 	beq.w	8011b22 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011918:	8912      	ldrh	r2, [r2, #8]
 801191a:	441a      	add	r2, r3
 801191c:	4b12      	ldr	r3, [pc, #72]	; (8011968 <tcp_receive+0xd04>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	dd12      	ble.n	801194c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011926:	4b10      	ldr	r3, [pc, #64]	; (8011968 <tcp_receive+0xd04>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	b29a      	uxth	r2, r3
 801192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	b29b      	uxth	r3, r3
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	b29a      	uxth	r2, r3
 8011938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193e:	685a      	ldr	r2, [r3, #4]
 8011940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011942:	891b      	ldrh	r3, [r3, #8]
 8011944:	4619      	mov	r1, r3
 8011946:	4610      	mov	r0, r2
 8011948:	f7fb fe84 	bl	800d654 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194e:	69fa      	ldr	r2, [r7, #28]
 8011950:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011954:	69f8      	ldr	r0, [r7, #28]
 8011956:	f7ff f881 	bl	8010a5c <tcp_oos_insert_segment>
                  }
                  break;
 801195a:	e0e2      	b.n	8011b22 <tcp_receive+0xebe>
 801195c:	20008e44 	.word	0x20008e44
 8011960:	20008e41 	.word	0x20008e41
 8011964:	20008e14 	.word	0x20008e14
 8011968:	20008e34 	.word	0x20008e34
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801196c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	f040 80c6 	bne.w	8011b06 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801197a:	4b80      	ldr	r3, [pc, #512]	; (8011b7c <tcp_receive+0xf18>)
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011980:	68db      	ldr	r3, [r3, #12]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011986:	2b00      	cmp	r3, #0
 8011988:	f340 80bd 	ble.w	8011b06 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801198c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	899b      	ldrh	r3, [r3, #12]
 8011992:	b29b      	uxth	r3, r3
 8011994:	4618      	mov	r0, r3
 8011996:	f7fa fc85 	bl	800c2a4 <lwip_htons>
 801199a:	4603      	mov	r3, r0
 801199c:	b2db      	uxtb	r3, r3
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f040 80bf 	bne.w	8011b26 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80119a8:	4875      	ldr	r0, [pc, #468]	; (8011b80 <tcp_receive+0xf1c>)
 80119aa:	f7fd fb07 	bl	800efbc <tcp_seg_copy>
 80119ae:	4602      	mov	r2, r0
 80119b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80119b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f000 80b6 	beq.w	8011b2a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80119be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119c6:	8912      	ldrh	r2, [r2, #8]
 80119c8:	441a      	add	r2, r3
 80119ca:	4b6c      	ldr	r3, [pc, #432]	; (8011b7c <tcp_receive+0xf18>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	dd12      	ble.n	80119fa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80119d4:	4b69      	ldr	r3, [pc, #420]	; (8011b7c <tcp_receive+0xf18>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	b29a      	uxth	r2, r3
 80119da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	1ad3      	subs	r3, r2, r3
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f0:	891b      	ldrh	r3, [r3, #8]
 80119f2:	4619      	mov	r1, r3
 80119f4:	4610      	mov	r0, r2
 80119f6:	f7fb fe2d 	bl	800d654 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80119fa:	4b62      	ldr	r3, [pc, #392]	; (8011b84 <tcp_receive+0xf20>)
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	461a      	mov	r2, r3
 8011a00:	4b5e      	ldr	r3, [pc, #376]	; (8011b7c <tcp_receive+0xf18>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	441a      	add	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a0e:	440b      	add	r3, r1
 8011a10:	1ad3      	subs	r3, r2, r3
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f340 8089 	ble.w	8011b2a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	899b      	ldrh	r3, [r3, #12]
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fa fc3e 	bl	800c2a4 <lwip_htons>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	f003 0301 	and.w	r3, r3, #1
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d022      	beq.n	8011a7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	899b      	ldrh	r3, [r3, #12]
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	b21b      	sxth	r3, r3
 8011a40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011a44:	b21c      	sxth	r4, r3
 8011a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	899b      	ldrh	r3, [r3, #12]
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fa fc27 	bl	800c2a4 <lwip_htons>
 8011a56:	4603      	mov	r3, r0
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fa fc1e 	bl	800c2a4 <lwip_htons>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	b21b      	sxth	r3, r3
 8011a6c:	4323      	orrs	r3, r4
 8011a6e:	b21a      	sxth	r2, r3
 8011a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	b292      	uxth	r2, r2
 8011a78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a84:	4413      	add	r3, r2
 8011a86:	b299      	uxth	r1, r3
 8011a88:	4b3c      	ldr	r3, [pc, #240]	; (8011b7c <tcp_receive+0xf18>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	b29a      	uxth	r2, r3
 8011a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	1a8a      	subs	r2, r1, r2
 8011a94:	b292      	uxth	r2, r2
 8011a96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	685a      	ldr	r2, [r3, #4]
 8011a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	891b      	ldrh	r3, [r3, #8]
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	f7fb fdd4 	bl	800d654 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	891c      	ldrh	r4, [r3, #8]
 8011ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	899b      	ldrh	r3, [r3, #12]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fa fbf1 	bl	800c2a4 <lwip_htons>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	f003 0303 	and.w	r3, r3, #3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <tcp_receive+0xe6e>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	e000      	b.n	8011ad4 <tcp_receive+0xe70>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	4423      	add	r3, r4
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b2a      	ldr	r3, [pc, #168]	; (8011b84 <tcp_receive+0xf20>)
 8011ada:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011adc:	4b29      	ldr	r3, [pc, #164]	; (8011b84 <tcp_receive+0xf20>)
 8011ade:	881b      	ldrh	r3, [r3, #0]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	4b26      	ldr	r3, [pc, #152]	; (8011b7c <tcp_receive+0xf18>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	441a      	add	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aec:	6879      	ldr	r1, [r7, #4]
 8011aee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011af0:	440b      	add	r3, r1
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d019      	beq.n	8011b2a <tcp_receive+0xec6>
 8011af6:	4b24      	ldr	r3, [pc, #144]	; (8011b88 <tcp_receive+0xf24>)
 8011af8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011afc:	4923      	ldr	r1, [pc, #140]	; (8011b8c <tcp_receive+0xf28>)
 8011afe:	4824      	ldr	r0, [pc, #144]	; (8011b90 <tcp_receive+0xf2c>)
 8011b00:	f005 fe9a 	bl	8017838 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011b04:	e011      	b.n	8011b2a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f47f aea4 	bne.w	801185c <tcp_receive+0xbf8>
 8011b14:	e00a      	b.n	8011b2c <tcp_receive+0xec8>
                break;
 8011b16:	bf00      	nop
 8011b18:	e008      	b.n	8011b2c <tcp_receive+0xec8>
                break;
 8011b1a:	bf00      	nop
 8011b1c:	e006      	b.n	8011b2c <tcp_receive+0xec8>
                  break;
 8011b1e:	bf00      	nop
 8011b20:	e004      	b.n	8011b2c <tcp_receive+0xec8>
                  break;
 8011b22:	bf00      	nop
 8011b24:	e002      	b.n	8011b2c <tcp_receive+0xec8>
                  break;
 8011b26:	bf00      	nop
 8011b28:	e000      	b.n	8011b2c <tcp_receive+0xec8>
                break;
 8011b2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f001 fa33 	bl	8012f98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011b32:	e003      	b.n	8011b3c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f001 fa2f 	bl	8012f98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b3a:	e01a      	b.n	8011b72 <tcp_receive+0xf0e>
 8011b3c:	e019      	b.n	8011b72 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011b3e:	4b0f      	ldr	r3, [pc, #60]	; (8011b7c <tcp_receive+0xf18>)
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	db0a      	blt.n	8011b62 <tcp_receive+0xefe>
 8011b4c:	4b0b      	ldr	r3, [pc, #44]	; (8011b7c <tcp_receive+0xf18>)
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b54:	6879      	ldr	r1, [r7, #4]
 8011b56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b58:	440b      	add	r3, r1
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	dd07      	ble.n	8011b72 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	8b5b      	ldrh	r3, [r3, #26]
 8011b66:	f043 0302 	orr.w	r3, r3, #2
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011b70:	e7ff      	b.n	8011b72 <tcp_receive+0xf0e>
 8011b72:	bf00      	nop
 8011b74:	3750      	adds	r7, #80	; 0x50
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bdb0      	pop	{r4, r5, r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	20008e34 	.word	0x20008e34
 8011b80:	20008e14 	.word	0x20008e14
 8011b84:	20008e3e 	.word	0x20008e3e
 8011b88:	08019c10 	.word	0x08019c10
 8011b8c:	08019fb8 	.word	0x08019fb8
 8011b90:	08019c5c 	.word	0x08019c5c

08011b94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011b9a:	4b15      	ldr	r3, [pc, #84]	; (8011bf0 <tcp_get_next_optbyte+0x5c>)
 8011b9c:	881b      	ldrh	r3, [r3, #0]
 8011b9e:	1c5a      	adds	r2, r3, #1
 8011ba0:	b291      	uxth	r1, r2
 8011ba2:	4a13      	ldr	r2, [pc, #76]	; (8011bf0 <tcp_get_next_optbyte+0x5c>)
 8011ba4:	8011      	strh	r1, [r2, #0]
 8011ba6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011ba8:	4b12      	ldr	r3, [pc, #72]	; (8011bf4 <tcp_get_next_optbyte+0x60>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d004      	beq.n	8011bba <tcp_get_next_optbyte+0x26>
 8011bb0:	4b11      	ldr	r3, [pc, #68]	; (8011bf8 <tcp_get_next_optbyte+0x64>)
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	88fa      	ldrh	r2, [r7, #6]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d208      	bcs.n	8011bcc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011bba:	4b10      	ldr	r3, [pc, #64]	; (8011bfc <tcp_get_next_optbyte+0x68>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	3314      	adds	r3, #20
 8011bc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011bc2:	88fb      	ldrh	r3, [r7, #6]
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	4413      	add	r3, r2
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	e00b      	b.n	8011be4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011bcc:	88fb      	ldrh	r3, [r7, #6]
 8011bce:	b2da      	uxtb	r2, r3
 8011bd0:	4b09      	ldr	r3, [pc, #36]	; (8011bf8 <tcp_get_next_optbyte+0x64>)
 8011bd2:	881b      	ldrh	r3, [r3, #0]
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011bda:	4b06      	ldr	r3, [pc, #24]	; (8011bf4 <tcp_get_next_optbyte+0x60>)
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	797b      	ldrb	r3, [r7, #5]
 8011be0:	4413      	add	r3, r2
 8011be2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr
 8011bf0:	20008e30 	.word	0x20008e30
 8011bf4:	20008e2c 	.word	0x20008e2c
 8011bf8:	20008e2a 	.word	0x20008e2a
 8011bfc:	20008e24 	.word	0x20008e24

08011c00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <tcp_parseopt+0x1c>
 8011c0e:	4b32      	ldr	r3, [pc, #200]	; (8011cd8 <tcp_parseopt+0xd8>)
 8011c10:	f240 727d 	movw	r2, #1917	; 0x77d
 8011c14:	4931      	ldr	r1, [pc, #196]	; (8011cdc <tcp_parseopt+0xdc>)
 8011c16:	4832      	ldr	r0, [pc, #200]	; (8011ce0 <tcp_parseopt+0xe0>)
 8011c18:	f005 fe0e 	bl	8017838 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011c1c:	4b31      	ldr	r3, [pc, #196]	; (8011ce4 <tcp_parseopt+0xe4>)
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d055      	beq.n	8011cd0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c24:	4b30      	ldr	r3, [pc, #192]	; (8011ce8 <tcp_parseopt+0xe8>)
 8011c26:	2200      	movs	r2, #0
 8011c28:	801a      	strh	r2, [r3, #0]
 8011c2a:	e045      	b.n	8011cb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011c2c:	f7ff ffb2 	bl	8011b94 <tcp_get_next_optbyte>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011c34:	7bfb      	ldrb	r3, [r7, #15]
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d006      	beq.n	8011c48 <tcp_parseopt+0x48>
 8011c3a:	2b02      	cmp	r3, #2
 8011c3c:	dc2b      	bgt.n	8011c96 <tcp_parseopt+0x96>
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d041      	beq.n	8011cc6 <tcp_parseopt+0xc6>
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d127      	bne.n	8011c96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011c46:	e037      	b.n	8011cb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011c48:	f7ff ffa4 	bl	8011b94 <tcp_get_next_optbyte>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b04      	cmp	r3, #4
 8011c50:	d13b      	bne.n	8011cca <tcp_parseopt+0xca>
 8011c52:	4b25      	ldr	r3, [pc, #148]	; (8011ce8 <tcp_parseopt+0xe8>)
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	3301      	adds	r3, #1
 8011c58:	4a22      	ldr	r2, [pc, #136]	; (8011ce4 <tcp_parseopt+0xe4>)
 8011c5a:	8812      	ldrh	r2, [r2, #0]
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	da34      	bge.n	8011cca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011c60:	f7ff ff98 	bl	8011b94 <tcp_get_next_optbyte>
 8011c64:	4603      	mov	r3, r0
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	021b      	lsls	r3, r3, #8
 8011c6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011c6c:	f7ff ff92 	bl	8011b94 <tcp_get_next_optbyte>
 8011c70:	4603      	mov	r3, r0
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	89bb      	ldrh	r3, [r7, #12]
 8011c76:	4313      	orrs	r3, r2
 8011c78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011c7a:	89bb      	ldrh	r3, [r7, #12]
 8011c7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011c80:	d804      	bhi.n	8011c8c <tcp_parseopt+0x8c>
 8011c82:	89bb      	ldrh	r3, [r7, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d001      	beq.n	8011c8c <tcp_parseopt+0x8c>
 8011c88:	89ba      	ldrh	r2, [r7, #12]
 8011c8a:	e001      	b.n	8011c90 <tcp_parseopt+0x90>
 8011c8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011c94:	e010      	b.n	8011cb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011c96:	f7ff ff7d 	bl	8011b94 <tcp_get_next_optbyte>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011c9e:	7afb      	ldrb	r3, [r7, #11]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d914      	bls.n	8011cce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ca4:	7afb      	ldrb	r3, [r7, #11]
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	4b0f      	ldr	r3, [pc, #60]	; (8011ce8 <tcp_parseopt+0xe8>)
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	4413      	add	r3, r2
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	3b02      	subs	r3, #2
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	4b0c      	ldr	r3, [pc, #48]	; (8011ce8 <tcp_parseopt+0xe8>)
 8011cb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011cb8:	4b0b      	ldr	r3, [pc, #44]	; (8011ce8 <tcp_parseopt+0xe8>)
 8011cba:	881a      	ldrh	r2, [r3, #0]
 8011cbc:	4b09      	ldr	r3, [pc, #36]	; (8011ce4 <tcp_parseopt+0xe4>)
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d3b3      	bcc.n	8011c2c <tcp_parseopt+0x2c>
 8011cc4:	e004      	b.n	8011cd0 <tcp_parseopt+0xd0>
          return;
 8011cc6:	bf00      	nop
 8011cc8:	e002      	b.n	8011cd0 <tcp_parseopt+0xd0>
            return;
 8011cca:	bf00      	nop
 8011ccc:	e000      	b.n	8011cd0 <tcp_parseopt+0xd0>
            return;
 8011cce:	bf00      	nop
      }
    }
  }
}
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	08019c10 	.word	0x08019c10
 8011cdc:	0801a074 	.word	0x0801a074
 8011ce0:	08019c5c 	.word	0x08019c5c
 8011ce4:	20008e28 	.word	0x20008e28
 8011ce8:	20008e30 	.word	0x20008e30

08011cec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011cec:	b480      	push	{r7}
 8011cee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011cf0:	4b05      	ldr	r3, [pc, #20]	; (8011d08 <tcp_trigger_input_pcb_close+0x1c>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	f043 0310 	orr.w	r3, r3, #16
 8011cf8:	b2da      	uxtb	r2, r3
 8011cfa:	4b03      	ldr	r3, [pc, #12]	; (8011d08 <tcp_trigger_input_pcb_close+0x1c>)
 8011cfc:	701a      	strb	r2, [r3, #0]
}
 8011cfe:	bf00      	nop
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr
 8011d08:	20008e41 	.word	0x20008e41

08011d0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	60b9      	str	r1, [r7, #8]
 8011d16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d00a      	beq.n	8011d34 <tcp_route+0x28>
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	7a1b      	ldrb	r3, [r3, #8]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d006      	beq.n	8011d34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	7a1b      	ldrb	r3, [r3, #8]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fb fab8 	bl	800d2a0 <netif_get_by_index>
 8011d30:	4603      	mov	r3, r0
 8011d32:	e003      	b.n	8011d3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f003 fa37 	bl	80151a8 <ip4_route>
 8011d3a:	4603      	mov	r3, r0
  }
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3710      	adds	r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011d44:	b590      	push	{r4, r7, lr}
 8011d46:	b087      	sub	sp, #28
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	4613      	mov	r3, r2
 8011d52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d105      	bne.n	8011d66 <tcp_create_segment+0x22>
 8011d5a:	4b44      	ldr	r3, [pc, #272]	; (8011e6c <tcp_create_segment+0x128>)
 8011d5c:	22a3      	movs	r2, #163	; 0xa3
 8011d5e:	4944      	ldr	r1, [pc, #272]	; (8011e70 <tcp_create_segment+0x12c>)
 8011d60:	4844      	ldr	r0, [pc, #272]	; (8011e74 <tcp_create_segment+0x130>)
 8011d62:	f005 fd69 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d105      	bne.n	8011d78 <tcp_create_segment+0x34>
 8011d6c:	4b3f      	ldr	r3, [pc, #252]	; (8011e6c <tcp_create_segment+0x128>)
 8011d6e:	22a4      	movs	r2, #164	; 0xa4
 8011d70:	4941      	ldr	r1, [pc, #260]	; (8011e78 <tcp_create_segment+0x134>)
 8011d72:	4840      	ldr	r0, [pc, #256]	; (8011e74 <tcp_create_segment+0x130>)
 8011d74:	f005 fd60 	bl	8017838 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	f003 0304 	and.w	r3, r3, #4
 8011d84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011d86:	2003      	movs	r0, #3
 8011d88:	f7fa ff04 	bl	800cb94 <memp_malloc>
 8011d8c:	6138      	str	r0, [r7, #16]
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d104      	bne.n	8011d9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011d94:	68b8      	ldr	r0, [r7, #8]
 8011d96:	f7fb fde3 	bl	800d960 <pbuf_free>
    return NULL;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	e061      	b.n	8011e62 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011da4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	891a      	ldrh	r2, [r3, #8]
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d205      	bcs.n	8011dca <tcp_create_segment+0x86>
 8011dbe:	4b2b      	ldr	r3, [pc, #172]	; (8011e6c <tcp_create_segment+0x128>)
 8011dc0:	22b0      	movs	r2, #176	; 0xb0
 8011dc2:	492e      	ldr	r1, [pc, #184]	; (8011e7c <tcp_create_segment+0x138>)
 8011dc4:	482b      	ldr	r0, [pc, #172]	; (8011e74 <tcp_create_segment+0x130>)
 8011dc6:	f005 fd37 	bl	8017838 <iprintf>
  seg->len = p->tot_len - optlen;
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	891a      	ldrh	r2, [r3, #8]
 8011dce:	7dfb      	ldrb	r3, [r7, #23]
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	b29a      	uxth	r2, r3
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011dda:	2114      	movs	r1, #20
 8011ddc:	68b8      	ldr	r0, [r7, #8]
 8011dde:	f7fb fd29 	bl	800d834 <pbuf_add_header>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d004      	beq.n	8011df2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011de8:	6938      	ldr	r0, [r7, #16]
 8011dea:	f7fd f8ce 	bl	800ef8a <tcp_seg_free>
    return NULL;
 8011dee:	2300      	movs	r3, #0
 8011df0:	e037      	b.n	8011e62 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	685a      	ldr	r2, [r3, #4]
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	8ada      	ldrh	r2, [r3, #22]
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	68dc      	ldr	r4, [r3, #12]
 8011e04:	4610      	mov	r0, r2
 8011e06:	f7fa fa4d 	bl	800c2a4 <lwip_htons>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	8b1a      	ldrh	r2, [r3, #24]
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	68dc      	ldr	r4, [r3, #12]
 8011e16:	4610      	mov	r0, r2
 8011e18:	f7fa fa44 	bl	800c2a4 <lwip_htons>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	68dc      	ldr	r4, [r3, #12]
 8011e24:	6838      	ldr	r0, [r7, #0]
 8011e26:	f7fa fa52 	bl	800c2ce <lwip_htonl>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011e2e:	7dfb      	ldrb	r3, [r7, #23]
 8011e30:	089b      	lsrs	r3, r3, #2
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	3305      	adds	r3, #5
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	031b      	lsls	r3, r3, #12
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	79fb      	ldrb	r3, [r7, #7]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	4313      	orrs	r3, r2
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	68dc      	ldr	r4, [r3, #12]
 8011e4a:	4610      	mov	r0, r2
 8011e4c:	f7fa fa2a 	bl	800c2a4 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	749a      	strb	r2, [r3, #18]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011e60:	693b      	ldr	r3, [r7, #16]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	371c      	adds	r7, #28
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd90      	pop	{r4, r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	0801a090 	.word	0x0801a090
 8011e70:	0801a0c4 	.word	0x0801a0c4
 8011e74:	0801a0e4 	.word	0x0801a0e4
 8011e78:	0801a10c 	.word	0x0801a10c
 8011e7c:	0801a130 	.word	0x0801a130

08011e80 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011e80:	b590      	push	{r4, r7, lr}
 8011e82:	b08b      	sub	sp, #44	; 0x2c
 8011e84:	af02      	add	r7, sp, #8
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	61fb      	str	r3, [r7, #28]
 8011e90:	2300      	movs	r3, #0
 8011e92:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011e94:	2300      	movs	r3, #0
 8011e96:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d106      	bne.n	8011eac <tcp_split_unsent_seg+0x2c>
 8011e9e:	4b95      	ldr	r3, [pc, #596]	; (80120f4 <tcp_split_unsent_seg+0x274>)
 8011ea0:	f240 324b 	movw	r2, #843	; 0x34b
 8011ea4:	4994      	ldr	r1, [pc, #592]	; (80120f8 <tcp_split_unsent_seg+0x278>)
 8011ea6:	4895      	ldr	r0, [pc, #596]	; (80120fc <tcp_split_unsent_seg+0x27c>)
 8011ea8:	f005 fcc6 	bl	8017838 <iprintf>

  useg = pcb->unsent;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eb0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d102      	bne.n	8011ebe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ebc:	e116      	b.n	80120ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011ebe:	887b      	ldrh	r3, [r7, #2]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d109      	bne.n	8011ed8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011ec4:	4b8b      	ldr	r3, [pc, #556]	; (80120f4 <tcp_split_unsent_seg+0x274>)
 8011ec6:	f240 3253 	movw	r2, #851	; 0x353
 8011eca:	498d      	ldr	r1, [pc, #564]	; (8012100 <tcp_split_unsent_seg+0x280>)
 8011ecc:	488b      	ldr	r0, [pc, #556]	; (80120fc <tcp_split_unsent_seg+0x27c>)
 8011ece:	f005 fcb3 	bl	8017838 <iprintf>
    return ERR_VAL;
 8011ed2:	f06f 0305 	mvn.w	r3, #5
 8011ed6:	e109      	b.n	80120ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	891b      	ldrh	r3, [r3, #8]
 8011edc:	887a      	ldrh	r2, [r7, #2]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d301      	bcc.n	8011ee6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e102      	b.n	80120ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eea:	887a      	ldrh	r2, [r7, #2]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d906      	bls.n	8011efe <tcp_split_unsent_seg+0x7e>
 8011ef0:	4b80      	ldr	r3, [pc, #512]	; (80120f4 <tcp_split_unsent_seg+0x274>)
 8011ef2:	f240 325b 	movw	r2, #859	; 0x35b
 8011ef6:	4983      	ldr	r1, [pc, #524]	; (8012104 <tcp_split_unsent_seg+0x284>)
 8011ef8:	4880      	ldr	r0, [pc, #512]	; (80120fc <tcp_split_unsent_seg+0x27c>)
 8011efa:	f005 fc9d 	bl	8017838 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	891b      	ldrh	r3, [r3, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <tcp_split_unsent_seg+0x94>
 8011f06:	4b7b      	ldr	r3, [pc, #492]	; (80120f4 <tcp_split_unsent_seg+0x274>)
 8011f08:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011f0c:	497e      	ldr	r1, [pc, #504]	; (8012108 <tcp_split_unsent_seg+0x288>)
 8011f0e:	487b      	ldr	r0, [pc, #492]	; (80120fc <tcp_split_unsent_seg+0x27c>)
 8011f10:	f005 fc92 	bl	8017838 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	7a9b      	ldrb	r3, [r3, #10]
 8011f18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011f1a:	7bfb      	ldrb	r3, [r7, #15]
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	f003 0304 	and.w	r3, r3, #4
 8011f24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	891a      	ldrh	r2, [r3, #8]
 8011f2a:	887b      	ldrh	r3, [r7, #2]
 8011f2c:	1ad3      	subs	r3, r2, r3
 8011f2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011f30:	7bbb      	ldrb	r3, [r7, #14]
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	89bb      	ldrh	r3, [r7, #12]
 8011f36:	4413      	add	r3, r2
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f3e:	4619      	mov	r1, r3
 8011f40:	2036      	movs	r0, #54	; 0x36
 8011f42:	f7fb fa29 	bl	800d398 <pbuf_alloc>
 8011f46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f000 80b7 	beq.w	80120be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	891a      	ldrh	r2, [r3, #8]
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	891b      	ldrh	r3, [r3, #8]
 8011f5a:	1ad3      	subs	r3, r2, r3
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	887b      	ldrh	r3, [r7, #2]
 8011f60:	4413      	add	r3, r2
 8011f62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	6858      	ldr	r0, [r3, #4]
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	685a      	ldr	r2, [r3, #4]
 8011f6c:	7bbb      	ldrb	r3, [r7, #14]
 8011f6e:	18d1      	adds	r1, r2, r3
 8011f70:	897b      	ldrh	r3, [r7, #10]
 8011f72:	89ba      	ldrh	r2, [r7, #12]
 8011f74:	f7fb feee 	bl	800dd54 <pbuf_copy_partial>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	89bb      	ldrh	r3, [r7, #12]
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	f040 809f 	bne.w	80120c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	899b      	ldrh	r3, [r3, #12]
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fa f989 	bl	800c2a4 <lwip_htons>
 8011f92:	4603      	mov	r3, r0
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011fa0:	7efb      	ldrb	r3, [r7, #27]
 8011fa2:	f003 0308 	and.w	r3, r3, #8
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d007      	beq.n	8011fba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011faa:	7efb      	ldrb	r3, [r7, #27]
 8011fac:	f023 0308 	bic.w	r3, r3, #8
 8011fb0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011fb2:	7ebb      	ldrb	r3, [r7, #26]
 8011fb4:	f043 0308 	orr.w	r3, r3, #8
 8011fb8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011fba:	7efb      	ldrb	r3, [r7, #27]
 8011fbc:	f003 0301 	and.w	r3, r3, #1
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d007      	beq.n	8011fd4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011fc4:	7efb      	ldrb	r3, [r7, #27]
 8011fc6:	f023 0301 	bic.w	r3, r3, #1
 8011fca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011fcc:	7ebb      	ldrb	r3, [r7, #26]
 8011fce:	f043 0301 	orr.w	r3, r3, #1
 8011fd2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7fa f977 	bl	800c2ce <lwip_htonl>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	887b      	ldrh	r3, [r7, #2]
 8011fe4:	18d1      	adds	r1, r2, r3
 8011fe6:	7eba      	ldrb	r2, [r7, #26]
 8011fe8:	7bfb      	ldrb	r3, [r7, #15]
 8011fea:	9300      	str	r3, [sp, #0]
 8011fec:	460b      	mov	r3, r1
 8011fee:	6939      	ldr	r1, [r7, #16]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff fea7 	bl	8011d44 <tcp_create_segment>
 8011ff6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d063      	beq.n	80120c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	f7fb fd34 	bl	800da70 <pbuf_clen>
 8012008:	4603      	mov	r3, r0
 801200a:	461a      	mov	r2, r3
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012012:	1a9b      	subs	r3, r3, r2
 8012014:	b29a      	uxth	r2, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	6858      	ldr	r0, [r3, #4]
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	891a      	ldrh	r2, [r3, #8]
 8012026:	89bb      	ldrh	r3, [r7, #12]
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	b29b      	uxth	r3, r3
 801202c:	4619      	mov	r1, r3
 801202e:	f7fb fb11 	bl	800d654 <pbuf_realloc>
  useg->len -= remainder;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	891a      	ldrh	r2, [r3, #8]
 8012036:	89bb      	ldrh	r3, [r7, #12]
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	b29a      	uxth	r2, r3
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	899b      	ldrh	r3, [r3, #12]
 8012046:	b29c      	uxth	r4, r3
 8012048:	7efb      	ldrb	r3, [r7, #27]
 801204a:	b29b      	uxth	r3, r3
 801204c:	4618      	mov	r0, r3
 801204e:	f7fa f929 	bl	800c2a4 <lwip_htons>
 8012052:	4603      	mov	r3, r0
 8012054:	461a      	mov	r2, r3
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	4322      	orrs	r2, r4
 801205c:	b292      	uxth	r2, r2
 801205e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	f7fb fd03 	bl	800da70 <pbuf_clen>
 801206a:	4603      	mov	r3, r0
 801206c:	461a      	mov	r2, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012074:	4413      	add	r3, r2
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	4618      	mov	r0, r3
 8012084:	f7fb fcf4 	bl	800da70 <pbuf_clen>
 8012088:	4603      	mov	r3, r0
 801208a:	461a      	mov	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012092:	4413      	add	r3, r2
 8012094:	b29a      	uxth	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	69fa      	ldr	r2, [r7, #28]
 80120a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d103      	bne.n	80120ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80120ba:	2300      	movs	r3, #0
 80120bc:	e016      	b.n	80120ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80120be:	bf00      	nop
 80120c0:	e002      	b.n	80120c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120c2:	bf00      	nop
 80120c4:	e000      	b.n	80120c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d006      	beq.n	80120dc <tcp_split_unsent_seg+0x25c>
 80120ce:	4b09      	ldr	r3, [pc, #36]	; (80120f4 <tcp_split_unsent_seg+0x274>)
 80120d0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80120d4:	490d      	ldr	r1, [pc, #52]	; (801210c <tcp_split_unsent_seg+0x28c>)
 80120d6:	4809      	ldr	r0, [pc, #36]	; (80120fc <tcp_split_unsent_seg+0x27c>)
 80120d8:	f005 fbae 	bl	8017838 <iprintf>
  if (p != NULL) {
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d002      	beq.n	80120e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80120e2:	6938      	ldr	r0, [r7, #16]
 80120e4:	f7fb fc3c 	bl	800d960 <pbuf_free>
  }

  return ERR_MEM;
 80120e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3724      	adds	r7, #36	; 0x24
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd90      	pop	{r4, r7, pc}
 80120f4:	0801a090 	.word	0x0801a090
 80120f8:	0801a424 	.word	0x0801a424
 80120fc:	0801a0e4 	.word	0x0801a0e4
 8012100:	0801a448 	.word	0x0801a448
 8012104:	0801a46c 	.word	0x0801a46c
 8012108:	0801a47c 	.word	0x0801a47c
 801210c:	0801a48c 	.word	0x0801a48c

08012110 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012110:	b590      	push	{r4, r7, lr}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <tcp_send_fin+0x1c>
 801211e:	4b21      	ldr	r3, [pc, #132]	; (80121a4 <tcp_send_fin+0x94>)
 8012120:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012124:	4920      	ldr	r1, [pc, #128]	; (80121a8 <tcp_send_fin+0x98>)
 8012126:	4821      	ldr	r0, [pc, #132]	; (80121ac <tcp_send_fin+0x9c>)
 8012128:	f005 fb86 	bl	8017838 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012130:	2b00      	cmp	r3, #0
 8012132:	d02e      	beq.n	8012192 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012138:	60fb      	str	r3, [r7, #12]
 801213a:	e002      	b.n	8012142 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1f8      	bne.n	801213c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	899b      	ldrh	r3, [r3, #12]
 8012150:	b29b      	uxth	r3, r3
 8012152:	4618      	mov	r0, r3
 8012154:	f7fa f8a6 	bl	800c2a4 <lwip_htons>
 8012158:	4603      	mov	r3, r0
 801215a:	b2db      	uxtb	r3, r3
 801215c:	f003 0307 	and.w	r3, r3, #7
 8012160:	2b00      	cmp	r3, #0
 8012162:	d116      	bne.n	8012192 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	68db      	ldr	r3, [r3, #12]
 8012168:	899b      	ldrh	r3, [r3, #12]
 801216a:	b29c      	uxth	r4, r3
 801216c:	2001      	movs	r0, #1
 801216e:	f7fa f899 	bl	800c2a4 <lwip_htons>
 8012172:	4603      	mov	r3, r0
 8012174:	461a      	mov	r2, r3
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	4322      	orrs	r2, r4
 801217c:	b292      	uxth	r2, r2
 801217e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	8b5b      	ldrh	r3, [r3, #26]
 8012184:	f043 0320 	orr.w	r3, r3, #32
 8012188:	b29a      	uxth	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801218e:	2300      	movs	r3, #0
 8012190:	e004      	b.n	801219c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012192:	2101      	movs	r1, #1
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 f80b 	bl	80121b0 <tcp_enqueue_flags>
 801219a:	4603      	mov	r3, r0
}
 801219c:	4618      	mov	r0, r3
 801219e:	3714      	adds	r7, #20
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd90      	pop	{r4, r7, pc}
 80121a4:	0801a090 	.word	0x0801a090
 80121a8:	0801a498 	.word	0x0801a498
 80121ac:	0801a0e4 	.word	0x0801a0e4

080121b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08a      	sub	sp, #40	; 0x28
 80121b4:	af02      	add	r7, sp, #8
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	460b      	mov	r3, r1
 80121ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80121bc:	2300      	movs	r3, #0
 80121be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80121c0:	2300      	movs	r3, #0
 80121c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80121c4:	78fb      	ldrb	r3, [r7, #3]
 80121c6:	f003 0303 	and.w	r3, r3, #3
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d106      	bne.n	80121dc <tcp_enqueue_flags+0x2c>
 80121ce:	4b67      	ldr	r3, [pc, #412]	; (801236c <tcp_enqueue_flags+0x1bc>)
 80121d0:	f240 4211 	movw	r2, #1041	; 0x411
 80121d4:	4966      	ldr	r1, [pc, #408]	; (8012370 <tcp_enqueue_flags+0x1c0>)
 80121d6:	4867      	ldr	r0, [pc, #412]	; (8012374 <tcp_enqueue_flags+0x1c4>)
 80121d8:	f005 fb2e 	bl	8017838 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d106      	bne.n	80121f0 <tcp_enqueue_flags+0x40>
 80121e2:	4b62      	ldr	r3, [pc, #392]	; (801236c <tcp_enqueue_flags+0x1bc>)
 80121e4:	f240 4213 	movw	r2, #1043	; 0x413
 80121e8:	4963      	ldr	r1, [pc, #396]	; (8012378 <tcp_enqueue_flags+0x1c8>)
 80121ea:	4862      	ldr	r0, [pc, #392]	; (8012374 <tcp_enqueue_flags+0x1c4>)
 80121ec:	f005 fb24 	bl	8017838 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80121f0:	78fb      	ldrb	r3, [r7, #3]
 80121f2:	f003 0302 	and.w	r3, r3, #2
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80121fa:	2301      	movs	r3, #1
 80121fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80121fe:	7ffb      	ldrb	r3, [r7, #31]
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	b2db      	uxtb	r3, r3
 8012204:	f003 0304 	and.w	r3, r3, #4
 8012208:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801220a:	7dfb      	ldrb	r3, [r7, #23]
 801220c:	b29b      	uxth	r3, r3
 801220e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012212:	4619      	mov	r1, r3
 8012214:	2036      	movs	r0, #54	; 0x36
 8012216:	f7fb f8bf 	bl	800d398 <pbuf_alloc>
 801221a:	6138      	str	r0, [r7, #16]
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d109      	bne.n	8012236 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	8b5b      	ldrh	r3, [r3, #26]
 8012226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801222a:	b29a      	uxth	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012230:	f04f 33ff 	mov.w	r3, #4294967295
 8012234:	e095      	b.n	8012362 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	895a      	ldrh	r2, [r3, #10]
 801223a:	7dfb      	ldrb	r3, [r7, #23]
 801223c:	b29b      	uxth	r3, r3
 801223e:	429a      	cmp	r2, r3
 8012240:	d206      	bcs.n	8012250 <tcp_enqueue_flags+0xa0>
 8012242:	4b4a      	ldr	r3, [pc, #296]	; (801236c <tcp_enqueue_flags+0x1bc>)
 8012244:	f240 4239 	movw	r2, #1081	; 0x439
 8012248:	494c      	ldr	r1, [pc, #304]	; (801237c <tcp_enqueue_flags+0x1cc>)
 801224a:	484a      	ldr	r0, [pc, #296]	; (8012374 <tcp_enqueue_flags+0x1c4>)
 801224c:	f005 faf4 	bl	8017838 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012254:	78fa      	ldrb	r2, [r7, #3]
 8012256:	7ffb      	ldrb	r3, [r7, #31]
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	460b      	mov	r3, r1
 801225c:	6939      	ldr	r1, [r7, #16]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7ff fd70 	bl	8011d44 <tcp_create_segment>
 8012264:	60f8      	str	r0, [r7, #12]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d109      	bne.n	8012280 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	8b5b      	ldrh	r3, [r3, #26]
 8012270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012274:	b29a      	uxth	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801227a:	f04f 33ff 	mov.w	r3, #4294967295
 801227e:	e070      	b.n	8012362 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f003 0303 	and.w	r3, r3, #3
 8012288:	2b00      	cmp	r3, #0
 801228a:	d006      	beq.n	801229a <tcp_enqueue_flags+0xea>
 801228c:	4b37      	ldr	r3, [pc, #220]	; (801236c <tcp_enqueue_flags+0x1bc>)
 801228e:	f240 4242 	movw	r2, #1090	; 0x442
 8012292:	493b      	ldr	r1, [pc, #236]	; (8012380 <tcp_enqueue_flags+0x1d0>)
 8012294:	4837      	ldr	r0, [pc, #220]	; (8012374 <tcp_enqueue_flags+0x1c4>)
 8012296:	f005 facf 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	891b      	ldrh	r3, [r3, #8]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d006      	beq.n	80122b0 <tcp_enqueue_flags+0x100>
 80122a2:	4b32      	ldr	r3, [pc, #200]	; (801236c <tcp_enqueue_flags+0x1bc>)
 80122a4:	f240 4243 	movw	r2, #1091	; 0x443
 80122a8:	4936      	ldr	r1, [pc, #216]	; (8012384 <tcp_enqueue_flags+0x1d4>)
 80122aa:	4832      	ldr	r0, [pc, #200]	; (8012374 <tcp_enqueue_flags+0x1c4>)
 80122ac:	f005 fac4 	bl	8017838 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d103      	bne.n	80122c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	68fa      	ldr	r2, [r7, #12]
 80122bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80122be:	e00d      	b.n	80122dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122c4:	61bb      	str	r3, [r7, #24]
 80122c6:	e002      	b.n	80122ce <tcp_enqueue_flags+0x11e>
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	61bb      	str	r3, [r7, #24]
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1f8      	bne.n	80122c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80122e4:	78fb      	ldrb	r3, [r7, #3]
 80122e6:	f003 0302 	and.w	r3, r3, #2
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d104      	bne.n	80122f8 <tcp_enqueue_flags+0x148>
 80122ee:	78fb      	ldrb	r3, [r7, #3]
 80122f0:	f003 0301 	and.w	r3, r3, #1
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d004      	beq.n	8012302 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122fc:	1c5a      	adds	r2, r3, #1
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012302:	78fb      	ldrb	r3, [r7, #3]
 8012304:	f003 0301 	and.w	r3, r3, #1
 8012308:	2b00      	cmp	r3, #0
 801230a:	d006      	beq.n	801231a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	8b5b      	ldrh	r3, [r3, #26]
 8012310:	f043 0320 	orr.w	r3, r3, #32
 8012314:	b29a      	uxth	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	4618      	mov	r0, r3
 8012320:	f7fb fba6 	bl	800da70 <pbuf_clen>
 8012324:	4603      	mov	r3, r0
 8012326:	461a      	mov	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801232e:	4413      	add	r3, r2
 8012330:	b29a      	uxth	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00e      	beq.n	8012360 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10a      	bne.n	8012360 <tcp_enqueue_flags+0x1b0>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <tcp_enqueue_flags+0x1b0>
 8012352:	4b06      	ldr	r3, [pc, #24]	; (801236c <tcp_enqueue_flags+0x1bc>)
 8012354:	f240 4265 	movw	r2, #1125	; 0x465
 8012358:	490b      	ldr	r1, [pc, #44]	; (8012388 <tcp_enqueue_flags+0x1d8>)
 801235a:	4806      	ldr	r0, [pc, #24]	; (8012374 <tcp_enqueue_flags+0x1c4>)
 801235c:	f005 fa6c 	bl	8017838 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012360:	2300      	movs	r3, #0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3720      	adds	r7, #32
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	0801a090 	.word	0x0801a090
 8012370:	0801a4b4 	.word	0x0801a4b4
 8012374:	0801a0e4 	.word	0x0801a0e4
 8012378:	0801a50c 	.word	0x0801a50c
 801237c:	0801a52c 	.word	0x0801a52c
 8012380:	0801a568 	.word	0x0801a568
 8012384:	0801a580 	.word	0x0801a580
 8012388:	0801a5ac 	.word	0x0801a5ac

0801238c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801238c:	b5b0      	push	{r4, r5, r7, lr}
 801238e:	b08a      	sub	sp, #40	; 0x28
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d106      	bne.n	80123a8 <tcp_output+0x1c>
 801239a:	4b8a      	ldr	r3, [pc, #552]	; (80125c4 <tcp_output+0x238>)
 801239c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80123a0:	4989      	ldr	r1, [pc, #548]	; (80125c8 <tcp_output+0x23c>)
 80123a2:	488a      	ldr	r0, [pc, #552]	; (80125cc <tcp_output+0x240>)
 80123a4:	f005 fa48 	bl	8017838 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	7d1b      	ldrb	r3, [r3, #20]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d106      	bne.n	80123be <tcp_output+0x32>
 80123b0:	4b84      	ldr	r3, [pc, #528]	; (80125c4 <tcp_output+0x238>)
 80123b2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80123b6:	4986      	ldr	r1, [pc, #536]	; (80125d0 <tcp_output+0x244>)
 80123b8:	4884      	ldr	r0, [pc, #528]	; (80125cc <tcp_output+0x240>)
 80123ba:	f005 fa3d 	bl	8017838 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80123be:	4b85      	ldr	r3, [pc, #532]	; (80125d4 <tcp_output+0x248>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d101      	bne.n	80123cc <tcp_output+0x40>
    return ERR_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	e1ce      	b.n	801276a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123d8:	4293      	cmp	r3, r2
 80123da:	bf28      	it	cs
 80123dc:	4613      	movcs	r3, r2
 80123de:	b29b      	uxth	r3, r3
 80123e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d10b      	bne.n	8012406 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8b5b      	ldrh	r3, [r3, #26]
 80123f2:	f003 0302 	and.w	r3, r3, #2
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f000 81aa 	beq.w	8012750 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f000 fdcb 	bl	8012f98 <tcp_send_empty_ack>
 8012402:	4603      	mov	r3, r0
 8012404:	e1b1      	b.n	801276a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012406:	6879      	ldr	r1, [r7, #4]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	3304      	adds	r3, #4
 801240c:	461a      	mov	r2, r3
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7ff fc7c 	bl	8011d0c <tcp_route>
 8012414:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d102      	bne.n	8012422 <tcp_output+0x96>
    return ERR_RTE;
 801241c:	f06f 0303 	mvn.w	r3, #3
 8012420:	e1a3      	b.n	801276a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d003      	beq.n	8012430 <tcp_output+0xa4>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d111      	bne.n	8012454 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d002      	beq.n	801243c <tcp_output+0xb0>
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	3304      	adds	r3, #4
 801243a:	e000      	b.n	801243e <tcp_output+0xb2>
 801243c:	2300      	movs	r3, #0
 801243e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d102      	bne.n	801244c <tcp_output+0xc0>
      return ERR_RTE;
 8012446:	f06f 0303 	mvn.w	r3, #3
 801244a:	e18e      	b.n	801276a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	f7f9 ff37 	bl	800c2ce <lwip_htonl>
 8012460:	4602      	mov	r2, r0
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012466:	1ad3      	subs	r3, r2, r3
 8012468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801246a:	8912      	ldrh	r2, [r2, #8]
 801246c:	4413      	add	r3, r2
 801246e:	69ba      	ldr	r2, [r7, #24]
 8012470:	429a      	cmp	r2, r3
 8012472:	d227      	bcs.n	80124c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801247a:	461a      	mov	r2, r3
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	4293      	cmp	r3, r2
 8012480:	d114      	bne.n	80124ac <tcp_output+0x120>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012486:	2b00      	cmp	r3, #0
 8012488:	d110      	bne.n	80124ac <tcp_output+0x120>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012490:	2b00      	cmp	r3, #0
 8012492:	d10b      	bne.n	80124ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2201      	movs	r2, #1
 80124a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	8b5b      	ldrh	r3, [r3, #26]
 80124b0:	f003 0302 	and.w	r3, r3, #2
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 814d 	beq.w	8012754 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fd6c 	bl	8012f98 <tcp_send_empty_ack>
 80124c0:	4603      	mov	r3, r0
 80124c2:	e152      	b.n	801276a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80124d2:	6a3b      	ldr	r3, [r7, #32]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f000 811c 	beq.w	8012712 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80124da:	e002      	b.n	80124e2 <tcp_output+0x156>
 80124dc:	6a3b      	ldr	r3, [r7, #32]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	623b      	str	r3, [r7, #32]
 80124e2:	6a3b      	ldr	r3, [r7, #32]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1f8      	bne.n	80124dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80124ea:	e112      	b.n	8012712 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	899b      	ldrh	r3, [r3, #12]
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7f9 fed5 	bl	800c2a4 <lwip_htons>
 80124fa:	4603      	mov	r3, r0
 80124fc:	b2db      	uxtb	r3, r3
 80124fe:	f003 0304 	and.w	r3, r3, #4
 8012502:	2b00      	cmp	r3, #0
 8012504:	d006      	beq.n	8012514 <tcp_output+0x188>
 8012506:	4b2f      	ldr	r3, [pc, #188]	; (80125c4 <tcp_output+0x238>)
 8012508:	f240 5236 	movw	r2, #1334	; 0x536
 801250c:	4932      	ldr	r1, [pc, #200]	; (80125d8 <tcp_output+0x24c>)
 801250e:	482f      	ldr	r0, [pc, #188]	; (80125cc <tcp_output+0x240>)
 8012510:	f005 f992 	bl	8017838 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012518:	2b00      	cmp	r3, #0
 801251a:	d01f      	beq.n	801255c <tcp_output+0x1d0>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	8b5b      	ldrh	r3, [r3, #26]
 8012520:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012524:	2b00      	cmp	r3, #0
 8012526:	d119      	bne.n	801255c <tcp_output+0x1d0>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00b      	beq.n	8012548 <tcp_output+0x1bc>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d110      	bne.n	801255c <tcp_output+0x1d0>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801253e:	891a      	ldrh	r2, [r3, #8]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012544:	429a      	cmp	r2, r3
 8012546:	d209      	bcs.n	801255c <tcp_output+0x1d0>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <tcp_output+0x1d0>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012558:	2b08      	cmp	r3, #8
 801255a:	d901      	bls.n	8012560 <tcp_output+0x1d4>
 801255c:	2301      	movs	r3, #1
 801255e:	e000      	b.n	8012562 <tcp_output+0x1d6>
 8012560:	2300      	movs	r3, #0
 8012562:	2b00      	cmp	r3, #0
 8012564:	d106      	bne.n	8012574 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	8b5b      	ldrh	r3, [r3, #26]
 801256a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801256e:	2b00      	cmp	r3, #0
 8012570:	f000 80e4 	beq.w	801273c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	7d1b      	ldrb	r3, [r3, #20]
 8012578:	2b02      	cmp	r3, #2
 801257a:	d00d      	beq.n	8012598 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	899b      	ldrh	r3, [r3, #12]
 8012582:	b29c      	uxth	r4, r3
 8012584:	2010      	movs	r0, #16
 8012586:	f7f9 fe8d 	bl	800c2a4 <lwip_htons>
 801258a:	4603      	mov	r3, r0
 801258c:	461a      	mov	r2, r3
 801258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	4322      	orrs	r2, r4
 8012594:	b292      	uxth	r2, r2
 8012596:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012598:	697a      	ldr	r2, [r7, #20]
 801259a:	6879      	ldr	r1, [r7, #4]
 801259c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801259e:	f000 f909 	bl	80127b4 <tcp_output_segment>
 80125a2:	4603      	mov	r3, r0
 80125a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80125a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d016      	beq.n	80125dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	8b5b      	ldrh	r3, [r3, #26]
 80125b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	835a      	strh	r2, [r3, #26]
      return err;
 80125bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125c0:	e0d3      	b.n	801276a <tcp_output+0x3de>
 80125c2:	bf00      	nop
 80125c4:	0801a090 	.word	0x0801a090
 80125c8:	0801a5d4 	.word	0x0801a5d4
 80125cc:	0801a0e4 	.word	0x0801a0e4
 80125d0:	0801a5ec 	.word	0x0801a5ec
 80125d4:	20008e48 	.word	0x20008e48
 80125d8:	0801a614 	.word	0x0801a614
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80125dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	7d1b      	ldrb	r3, [r3, #20]
 80125e8:	2b02      	cmp	r3, #2
 80125ea:	d006      	beq.n	80125fa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	8b5b      	ldrh	r3, [r3, #26]
 80125f0:	f023 0303 	bic.w	r3, r3, #3
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80125fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	4618      	mov	r0, r3
 8012602:	f7f9 fe64 	bl	800c2ce <lwip_htonl>
 8012606:	4604      	mov	r4, r0
 8012608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260a:	891b      	ldrh	r3, [r3, #8]
 801260c:	461d      	mov	r5, r3
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	899b      	ldrh	r3, [r3, #12]
 8012614:	b29b      	uxth	r3, r3
 8012616:	4618      	mov	r0, r3
 8012618:	f7f9 fe44 	bl	800c2a4 <lwip_htons>
 801261c:	4603      	mov	r3, r0
 801261e:	b2db      	uxtb	r3, r3
 8012620:	f003 0303 	and.w	r3, r3, #3
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <tcp_output+0x2a0>
 8012628:	2301      	movs	r3, #1
 801262a:	e000      	b.n	801262e <tcp_output+0x2a2>
 801262c:	2300      	movs	r3, #0
 801262e:	442b      	add	r3, r5
 8012630:	4423      	add	r3, r4
 8012632:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	1ad3      	subs	r3, r2, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	da02      	bge.n	8012646 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012648:	891b      	ldrh	r3, [r3, #8]
 801264a:	461c      	mov	r4, r3
 801264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	899b      	ldrh	r3, [r3, #12]
 8012652:	b29b      	uxth	r3, r3
 8012654:	4618      	mov	r0, r3
 8012656:	f7f9 fe25 	bl	800c2a4 <lwip_htons>
 801265a:	4603      	mov	r3, r0
 801265c:	b2db      	uxtb	r3, r3
 801265e:	f003 0303 	and.w	r3, r3, #3
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <tcp_output+0x2de>
 8012666:	2301      	movs	r3, #1
 8012668:	e000      	b.n	801266c <tcp_output+0x2e0>
 801266a:	2300      	movs	r3, #0
 801266c:	4423      	add	r3, r4
 801266e:	2b00      	cmp	r3, #0
 8012670:	d049      	beq.n	8012706 <tcp_output+0x37a>
      seg->next = NULL;
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	2200      	movs	r2, #0
 8012676:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801267c:	2b00      	cmp	r3, #0
 801267e:	d105      	bne.n	801268c <tcp_output+0x300>
        pcb->unacked = seg;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012684:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012688:	623b      	str	r3, [r7, #32]
 801268a:	e03f      	b.n	801270c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	4618      	mov	r0, r3
 8012694:	f7f9 fe1b 	bl	800c2ce <lwip_htonl>
 8012698:	4604      	mov	r4, r0
 801269a:	6a3b      	ldr	r3, [r7, #32]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f9 fe14 	bl	800c2ce <lwip_htonl>
 80126a6:	4603      	mov	r3, r0
 80126a8:	1ae3      	subs	r3, r4, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	da24      	bge.n	80126f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	3370      	adds	r3, #112	; 0x70
 80126b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80126b4:	e002      	b.n	80126bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80126b6:	69fb      	ldr	r3, [r7, #28]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80126bc:	69fb      	ldr	r3, [r7, #28]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d011      	beq.n	80126e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7f9 fdfe 	bl	800c2ce <lwip_htonl>
 80126d2:	4604      	mov	r4, r0
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7f9 fdf7 	bl	800c2ce <lwip_htonl>
 80126e0:	4603      	mov	r3, r0
 80126e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	dbe6      	blt.n	80126b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126f4:	601a      	str	r2, [r3, #0]
 80126f6:	e009      	b.n	801270c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80126f8:	6a3b      	ldr	r3, [r7, #32]
 80126fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80126fe:	6a3b      	ldr	r3, [r7, #32]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	623b      	str	r3, [r7, #32]
 8012704:	e002      	b.n	801270c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012708:	f7fc fc3f 	bl	800ef8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012710:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012714:	2b00      	cmp	r3, #0
 8012716:	d012      	beq.n	801273e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	4618      	mov	r0, r3
 8012720:	f7f9 fdd5 	bl	800c2ce <lwip_htonl>
 8012724:	4602      	mov	r2, r0
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801272a:	1ad3      	subs	r3, r2, r3
 801272c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801272e:	8912      	ldrh	r2, [r2, #8]
 8012730:	4413      	add	r3, r2
  while (seg != NULL &&
 8012732:	69ba      	ldr	r2, [r7, #24]
 8012734:	429a      	cmp	r2, r3
 8012736:	f4bf aed9 	bcs.w	80124ec <tcp_output+0x160>
 801273a:	e000      	b.n	801273e <tcp_output+0x3b2>
      break;
 801273c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012742:	2b00      	cmp	r3, #0
 8012744:	d108      	bne.n	8012758 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801274e:	e004      	b.n	801275a <tcp_output+0x3ce>
    goto output_done;
 8012750:	bf00      	nop
 8012752:	e002      	b.n	801275a <tcp_output+0x3ce>
    goto output_done;
 8012754:	bf00      	nop
 8012756:	e000      	b.n	801275a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012758:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	8b5b      	ldrh	r3, [r3, #26]
 801275e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012762:	b29a      	uxth	r2, r3
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012768:	2300      	movs	r3, #0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3728      	adds	r7, #40	; 0x28
 801276e:	46bd      	mov	sp, r7
 8012770:	bdb0      	pop	{r4, r5, r7, pc}
 8012772:	bf00      	nop

08012774 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d106      	bne.n	8012790 <tcp_output_segment_busy+0x1c>
 8012782:	4b09      	ldr	r3, [pc, #36]	; (80127a8 <tcp_output_segment_busy+0x34>)
 8012784:	f240 529a 	movw	r2, #1434	; 0x59a
 8012788:	4908      	ldr	r1, [pc, #32]	; (80127ac <tcp_output_segment_busy+0x38>)
 801278a:	4809      	ldr	r0, [pc, #36]	; (80127b0 <tcp_output_segment_busy+0x3c>)
 801278c:	f005 f854 	bl	8017838 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	7b9b      	ldrb	r3, [r3, #14]
 8012796:	2b01      	cmp	r3, #1
 8012798:	d001      	beq.n	801279e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801279a:	2301      	movs	r3, #1
 801279c:	e000      	b.n	80127a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801279e:	2300      	movs	r3, #0
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	0801a090 	.word	0x0801a090
 80127ac:	0801a62c 	.word	0x0801a62c
 80127b0:	0801a0e4 	.word	0x0801a0e4

080127b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80127b4:	b5b0      	push	{r4, r5, r7, lr}
 80127b6:	b08c      	sub	sp, #48	; 0x30
 80127b8:	af04      	add	r7, sp, #16
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d106      	bne.n	80127d4 <tcp_output_segment+0x20>
 80127c6:	4b63      	ldr	r3, [pc, #396]	; (8012954 <tcp_output_segment+0x1a0>)
 80127c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80127cc:	4962      	ldr	r1, [pc, #392]	; (8012958 <tcp_output_segment+0x1a4>)
 80127ce:	4863      	ldr	r0, [pc, #396]	; (801295c <tcp_output_segment+0x1a8>)
 80127d0:	f005 f832 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d106      	bne.n	80127e8 <tcp_output_segment+0x34>
 80127da:	4b5e      	ldr	r3, [pc, #376]	; (8012954 <tcp_output_segment+0x1a0>)
 80127dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80127e0:	495f      	ldr	r1, [pc, #380]	; (8012960 <tcp_output_segment+0x1ac>)
 80127e2:	485e      	ldr	r0, [pc, #376]	; (801295c <tcp_output_segment+0x1a8>)
 80127e4:	f005 f828 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <tcp_output_segment+0x48>
 80127ee:	4b59      	ldr	r3, [pc, #356]	; (8012954 <tcp_output_segment+0x1a0>)
 80127f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80127f4:	495b      	ldr	r1, [pc, #364]	; (8012964 <tcp_output_segment+0x1b0>)
 80127f6:	4859      	ldr	r0, [pc, #356]	; (801295c <tcp_output_segment+0x1a8>)
 80127f8:	f005 f81e 	bl	8017838 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f7ff ffb9 	bl	8012774 <tcp_output_segment_busy>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d001      	beq.n	801280c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012808:	2300      	movs	r3, #0
 801280a:	e09f      	b.n	801294c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	68dc      	ldr	r4, [r3, #12]
 8012814:	4610      	mov	r0, r2
 8012816:	f7f9 fd5a 	bl	800c2ce <lwip_htonl>
 801281a:	4603      	mov	r3, r0
 801281c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	68dc      	ldr	r4, [r3, #12]
 8012826:	4610      	mov	r0, r2
 8012828:	f7f9 fd3c 	bl	800c2a4 <lwip_htons>
 801282c:	4603      	mov	r3, r0
 801282e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012834:	68ba      	ldr	r2, [r7, #8]
 8012836:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012838:	441a      	add	r2, r3
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	3314      	adds	r3, #20
 8012844:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	7a9b      	ldrb	r3, [r3, #10]
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	d015      	beq.n	801287e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	3304      	adds	r3, #4
 8012856:	461a      	mov	r2, r3
 8012858:	6879      	ldr	r1, [r7, #4]
 801285a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801285e:	f7fc fe8b 	bl	800f578 <tcp_eff_send_mss_netif>
 8012862:	4603      	mov	r3, r0
 8012864:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012866:	8b7b      	ldrh	r3, [r7, #26]
 8012868:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801286c:	4618      	mov	r0, r3
 801286e:	f7f9 fd2e 	bl	800c2ce <lwip_htonl>
 8012872:	4602      	mov	r2, r0
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	3304      	adds	r3, #4
 801287c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012884:	2b00      	cmp	r3, #0
 8012886:	da02      	bge.n	801288e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	2200      	movs	r2, #0
 801288c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10c      	bne.n	80128b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012896:	4b34      	ldr	r3, [pc, #208]	; (8012968 <tcp_output_segment+0x1b4>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7f9 fd12 	bl	800c2ce <lwip_htonl>
 80128aa:	4602      	mov	r2, r0
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	68da      	ldr	r2, [r3, #12]
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	1ad3      	subs	r3, r2, r3
 80128bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	8959      	ldrh	r1, [r3, #10]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	8b3a      	ldrh	r2, [r7, #24]
 80128ca:	1a8a      	subs	r2, r1, r2
 80128cc:	b292      	uxth	r2, r2
 80128ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	8919      	ldrh	r1, [r3, #8]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	8b3a      	ldrh	r2, [r7, #24]
 80128dc:	1a8a      	subs	r2, r1, r2
 80128de:	b292      	uxth	r2, r2
 80128e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	68fa      	ldr	r2, [r7, #12]
 80128e8:	68d2      	ldr	r2, [r2, #12]
 80128ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	741a      	strb	r2, [r3, #16]
 80128f4:	2200      	movs	r2, #0
 80128f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	f103 0214 	add.w	r2, r3, #20
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	7a9b      	ldrb	r3, [r3, #10]
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	f003 0304 	and.w	r3, r3, #4
 801290a:	4413      	add	r3, r2
 801290c:	69fa      	ldr	r2, [r7, #28]
 801290e:	429a      	cmp	r2, r3
 8012910:	d006      	beq.n	8012920 <tcp_output_segment+0x16c>
 8012912:	4b10      	ldr	r3, [pc, #64]	; (8012954 <tcp_output_segment+0x1a0>)
 8012914:	f240 621c 	movw	r2, #1564	; 0x61c
 8012918:	4914      	ldr	r1, [pc, #80]	; (801296c <tcp_output_segment+0x1b8>)
 801291a:	4810      	ldr	r0, [pc, #64]	; (801295c <tcp_output_segment+0x1a8>)
 801291c:	f004 ff8c 	bl	8017838 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6858      	ldr	r0, [r3, #4]
 8012924:	68b9      	ldr	r1, [r7, #8]
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	1d1c      	adds	r4, r3, #4
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	7add      	ldrb	r5, [r3, #11]
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	7a9b      	ldrb	r3, [r3, #10]
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	9202      	str	r2, [sp, #8]
 8012936:	2206      	movs	r2, #6
 8012938:	9201      	str	r2, [sp, #4]
 801293a:	9300      	str	r3, [sp, #0]
 801293c:	462b      	mov	r3, r5
 801293e:	4622      	mov	r2, r4
 8012940:	f002 fdf0 	bl	8015524 <ip4_output_if>
 8012944:	4603      	mov	r3, r0
 8012946:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012948:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801294c:	4618      	mov	r0, r3
 801294e:	3720      	adds	r7, #32
 8012950:	46bd      	mov	sp, r7
 8012952:	bdb0      	pop	{r4, r5, r7, pc}
 8012954:	0801a090 	.word	0x0801a090
 8012958:	0801a654 	.word	0x0801a654
 801295c:	0801a0e4 	.word	0x0801a0e4
 8012960:	0801a674 	.word	0x0801a674
 8012964:	0801a694 	.word	0x0801a694
 8012968:	20008dfc 	.word	0x20008dfc
 801296c:	0801a6b8 	.word	0x0801a6b8

08012970 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012970:	b5b0      	push	{r4, r5, r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <tcp_rexmit_rto_prepare+0x1c>
 801297e:	4b31      	ldr	r3, [pc, #196]	; (8012a44 <tcp_rexmit_rto_prepare+0xd4>)
 8012980:	f240 6263 	movw	r2, #1635	; 0x663
 8012984:	4930      	ldr	r1, [pc, #192]	; (8012a48 <tcp_rexmit_rto_prepare+0xd8>)
 8012986:	4831      	ldr	r0, [pc, #196]	; (8012a4c <tcp_rexmit_rto_prepare+0xdc>)
 8012988:	f004 ff56 	bl	8017838 <iprintf>

  if (pcb->unacked == NULL) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012994:	f06f 0305 	mvn.w	r3, #5
 8012998:	e050      	b.n	8012a3c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801299e:	60fb      	str	r3, [r7, #12]
 80129a0:	e00b      	b.n	80129ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f7ff fee6 	bl	8012774 <tcp_output_segment_busy>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d002      	beq.n	80129b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80129ae:	f06f 0305 	mvn.w	r3, #5
 80129b2:	e043      	b.n	8012a3c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	60fb      	str	r3, [r7, #12]
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d1ef      	bne.n	80129a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80129c2:	68f8      	ldr	r0, [r7, #12]
 80129c4:	f7ff fed6 	bl	8012774 <tcp_output_segment_busy>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80129ce:	f06f 0305 	mvn.w	r3, #5
 80129d2:	e033      	b.n	8012a3c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	8b5b      	ldrh	r3, [r3, #26]
 80129ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7f9 fc65 	bl	800c2ce <lwip_htonl>
 8012a04:	4604      	mov	r4, r0
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	891b      	ldrh	r3, [r3, #8]
 8012a0a:	461d      	mov	r5, r3
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	899b      	ldrh	r3, [r3, #12]
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f9 fc45 	bl	800c2a4 <lwip_htons>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	f003 0303 	and.w	r3, r3, #3
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d001      	beq.n	8012a2a <tcp_rexmit_rto_prepare+0xba>
 8012a26:	2301      	movs	r3, #1
 8012a28:	e000      	b.n	8012a2c <tcp_rexmit_rto_prepare+0xbc>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	442b      	add	r3, r5
 8012a2e:	18e2      	adds	r2, r4, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2200      	movs	r2, #0
 8012a38:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012a3a:	2300      	movs	r3, #0
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bdb0      	pop	{r4, r5, r7, pc}
 8012a44:	0801a090 	.word	0x0801a090
 8012a48:	0801a6cc 	.word	0x0801a6cc
 8012a4c:	0801a0e4 	.word	0x0801a0e4

08012a50 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d106      	bne.n	8012a6c <tcp_rexmit_rto_commit+0x1c>
 8012a5e:	4b0d      	ldr	r3, [pc, #52]	; (8012a94 <tcp_rexmit_rto_commit+0x44>)
 8012a60:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012a64:	490c      	ldr	r1, [pc, #48]	; (8012a98 <tcp_rexmit_rto_commit+0x48>)
 8012a66:	480d      	ldr	r0, [pc, #52]	; (8012a9c <tcp_rexmit_rto_commit+0x4c>)
 8012a68:	f004 fee6 	bl	8017838 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a72:	2bff      	cmp	r3, #255	; 0xff
 8012a74:	d007      	beq.n	8012a86 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	b2da      	uxtb	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f7ff fc80 	bl	801238c <tcp_output>
}
 8012a8c:	bf00      	nop
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	0801a090 	.word	0x0801a090
 8012a98:	0801a6f0 	.word	0x0801a6f0
 8012a9c:	0801a0e4 	.word	0x0801a0e4

08012aa0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d106      	bne.n	8012abc <tcp_rexmit_rto+0x1c>
 8012aae:	4b0a      	ldr	r3, [pc, #40]	; (8012ad8 <tcp_rexmit_rto+0x38>)
 8012ab0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012ab4:	4909      	ldr	r1, [pc, #36]	; (8012adc <tcp_rexmit_rto+0x3c>)
 8012ab6:	480a      	ldr	r0, [pc, #40]	; (8012ae0 <tcp_rexmit_rto+0x40>)
 8012ab8:	f004 febe 	bl	8017838 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7ff ff57 	bl	8012970 <tcp_rexmit_rto_prepare>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d102      	bne.n	8012ace <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff ffc1 	bl	8012a50 <tcp_rexmit_rto_commit>
  }
}
 8012ace:	bf00      	nop
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	0801a090 	.word	0x0801a090
 8012adc:	0801a714 	.word	0x0801a714
 8012ae0:	0801a0e4 	.word	0x0801a0e4

08012ae4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012ae4:	b590      	push	{r4, r7, lr}
 8012ae6:	b085      	sub	sp, #20
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_rexmit+0x1c>
 8012af2:	4b2f      	ldr	r3, [pc, #188]	; (8012bb0 <tcp_rexmit+0xcc>)
 8012af4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012af8:	492e      	ldr	r1, [pc, #184]	; (8012bb4 <tcp_rexmit+0xd0>)
 8012afa:	482f      	ldr	r0, [pc, #188]	; (8012bb8 <tcp_rexmit+0xd4>)
 8012afc:	f004 fe9c 	bl	8017838 <iprintf>

  if (pcb->unacked == NULL) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d102      	bne.n	8012b0e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012b08:	f06f 0305 	mvn.w	r3, #5
 8012b0c:	e04c      	b.n	8012ba8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b12:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012b14:	68b8      	ldr	r0, [r7, #8]
 8012b16:	f7ff fe2d 	bl	8012774 <tcp_output_segment_busy>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d002      	beq.n	8012b26 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012b20:	f06f 0305 	mvn.w	r3, #5
 8012b24:	e040      	b.n	8012ba8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	681a      	ldr	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	336c      	adds	r3, #108	; 0x6c
 8012b32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b34:	e002      	b.n	8012b3c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d011      	beq.n	8012b68 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7f9 fbbe 	bl	800c2ce <lwip_htonl>
 8012b52:	4604      	mov	r4, r0
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7f9 fbb7 	bl	800c2ce <lwip_htonl>
 8012b60:	4603      	mov	r3, r0
 8012b62:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	dbe6      	blt.n	8012b36 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d103      	bne.n	8012b86 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2200      	movs	r2, #0
 8012b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b8c:	2bff      	cmp	r3, #255	; 0xff
 8012b8e:	d007      	beq.n	8012ba0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b96:	3301      	adds	r3, #1
 8012b98:	b2da      	uxtb	r2, r3
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3714      	adds	r7, #20
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd90      	pop	{r4, r7, pc}
 8012bb0:	0801a090 	.word	0x0801a090
 8012bb4:	0801a730 	.word	0x0801a730
 8012bb8:	0801a0e4 	.word	0x0801a0e4

08012bbc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d106      	bne.n	8012bd8 <tcp_rexmit_fast+0x1c>
 8012bca:	4b2a      	ldr	r3, [pc, #168]	; (8012c74 <tcp_rexmit_fast+0xb8>)
 8012bcc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012bd0:	4929      	ldr	r1, [pc, #164]	; (8012c78 <tcp_rexmit_fast+0xbc>)
 8012bd2:	482a      	ldr	r0, [pc, #168]	; (8012c7c <tcp_rexmit_fast+0xc0>)
 8012bd4:	f004 fe30 	bl	8017838 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d045      	beq.n	8012c6c <tcp_rexmit_fast+0xb0>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	8b5b      	ldrh	r3, [r3, #26]
 8012be4:	f003 0304 	and.w	r3, r3, #4
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d13f      	bne.n	8012c6c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7ff ff79 	bl	8012ae4 <tcp_rexmit>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d139      	bne.n	8012c6c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c04:	4293      	cmp	r3, r2
 8012c06:	bf28      	it	cs
 8012c08:	4613      	movcs	r3, r2
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	da00      	bge.n	8012c12 <tcp_rexmit_fast+0x56>
 8012c10:	3301      	adds	r3, #1
 8012c12:	105b      	asrs	r3, r3, #1
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012c22:	461a      	mov	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d206      	bcs.n	8012c3c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c32:	005b      	lsls	r3, r3, #1
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c46:	4619      	mov	r1, r3
 8012c48:	0049      	lsls	r1, r1, #1
 8012c4a:	440b      	add	r3, r1
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	4413      	add	r3, r2
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	8b5b      	ldrh	r3, [r3, #26]
 8012c5c:	f043 0304 	orr.w	r3, r3, #4
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012c6c:	bf00      	nop
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	0801a090 	.word	0x0801a090
 8012c78:	0801a748 	.word	0x0801a748
 8012c7c:	0801a0e4 	.word	0x0801a0e4

08012c80 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	607b      	str	r3, [r7, #4]
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	817b      	strh	r3, [r7, #10]
 8012c8e:	4613      	mov	r3, r2
 8012c90:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012c92:	897a      	ldrh	r2, [r7, #10]
 8012c94:	893b      	ldrh	r3, [r7, #8]
 8012c96:	4413      	add	r3, r2
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	3314      	adds	r3, #20
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	2022      	movs	r0, #34	; 0x22
 8012ca6:	f7fa fb77 	bl	800d398 <pbuf_alloc>
 8012caa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d04d      	beq.n	8012d4e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012cb2:	897b      	ldrh	r3, [r7, #10]
 8012cb4:	3313      	adds	r3, #19
 8012cb6:	697a      	ldr	r2, [r7, #20]
 8012cb8:	8952      	ldrh	r2, [r2, #10]
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	db06      	blt.n	8012ccc <tcp_output_alloc_header_common+0x4c>
 8012cbe:	4b26      	ldr	r3, [pc, #152]	; (8012d58 <tcp_output_alloc_header_common+0xd8>)
 8012cc0:	f240 7223 	movw	r2, #1827	; 0x723
 8012cc4:	4925      	ldr	r1, [pc, #148]	; (8012d5c <tcp_output_alloc_header_common+0xdc>)
 8012cc6:	4826      	ldr	r0, [pc, #152]	; (8012d60 <tcp_output_alloc_header_common+0xe0>)
 8012cc8:	f004 fdb6 	bl	8017838 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012cd2:	8c3b      	ldrh	r3, [r7, #32]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7f9 fae5 	bl	800c2a4 <lwip_htons>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	461a      	mov	r2, r3
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7f9 fadd 	bl	800c2a4 <lwip_htons>
 8012cea:	4603      	mov	r3, r0
 8012cec:	461a      	mov	r2, r3
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012cf8:	68f8      	ldr	r0, [r7, #12]
 8012cfa:	f7f9 fae8 	bl	800c2ce <lwip_htonl>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012d04:	897b      	ldrh	r3, [r7, #10]
 8012d06:	089b      	lsrs	r3, r3, #2
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	3305      	adds	r3, #5
 8012d0c:	b29b      	uxth	r3, r3
 8012d0e:	031b      	lsls	r3, r3, #12
 8012d10:	b29a      	uxth	r2, r3
 8012d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f9 fac1 	bl	800c2a4 <lwip_htons>
 8012d22:	4603      	mov	r3, r0
 8012d24:	461a      	mov	r2, r3
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012d2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7f9 fab9 	bl	800c2a4 <lwip_htons>
 8012d32:	4603      	mov	r3, r0
 8012d34:	461a      	mov	r2, r3
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	741a      	strb	r2, [r3, #16]
 8012d40:	2200      	movs	r2, #0
 8012d42:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	2200      	movs	r2, #0
 8012d48:	749a      	strb	r2, [r3, #18]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012d4e:	697b      	ldr	r3, [r7, #20]
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	0801a090 	.word	0x0801a090
 8012d5c:	0801a768 	.word	0x0801a768
 8012d60:	0801a0e4 	.word	0x0801a0e4

08012d64 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012d64:	b5b0      	push	{r4, r5, r7, lr}
 8012d66:	b08a      	sub	sp, #40	; 0x28
 8012d68:	af04      	add	r7, sp, #16
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	607b      	str	r3, [r7, #4]
 8012d6e:	460b      	mov	r3, r1
 8012d70:	817b      	strh	r3, [r7, #10]
 8012d72:	4613      	mov	r3, r2
 8012d74:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d106      	bne.n	8012d8a <tcp_output_alloc_header+0x26>
 8012d7c:	4b15      	ldr	r3, [pc, #84]	; (8012dd4 <tcp_output_alloc_header+0x70>)
 8012d7e:	f240 7242 	movw	r2, #1858	; 0x742
 8012d82:	4915      	ldr	r1, [pc, #84]	; (8012dd8 <tcp_output_alloc_header+0x74>)
 8012d84:	4815      	ldr	r0, [pc, #84]	; (8012ddc <tcp_output_alloc_header+0x78>)
 8012d86:	f004 fd57 	bl	8017838 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	8adb      	ldrh	r3, [r3, #22]
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	8b12      	ldrh	r2, [r2, #24]
 8012d96:	68f9      	ldr	r1, [r7, #12]
 8012d98:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012d9a:	893d      	ldrh	r5, [r7, #8]
 8012d9c:	897c      	ldrh	r4, [r7, #10]
 8012d9e:	9103      	str	r1, [sp, #12]
 8012da0:	2110      	movs	r1, #16
 8012da2:	9102      	str	r1, [sp, #8]
 8012da4:	9201      	str	r2, [sp, #4]
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	462a      	mov	r2, r5
 8012dac:	4621      	mov	r1, r4
 8012dae:	f7ff ff67 	bl	8012c80 <tcp_output_alloc_header_common>
 8012db2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d006      	beq.n	8012dc8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012dc2:	441a      	add	r2, r3
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012dc8:	697b      	ldr	r3, [r7, #20]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3718      	adds	r7, #24
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	0801a090 	.word	0x0801a090
 8012dd8:	0801a798 	.word	0x0801a798
 8012ddc:	0801a0e4 	.word	0x0801a0e4

08012de0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b088      	sub	sp, #32
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	4611      	mov	r1, r2
 8012dec:	461a      	mov	r2, r3
 8012dee:	460b      	mov	r3, r1
 8012df0:	71fb      	strb	r3, [r7, #7]
 8012df2:	4613      	mov	r3, r2
 8012df4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012df6:	2300      	movs	r3, #0
 8012df8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d106      	bne.n	8012e0e <tcp_output_fill_options+0x2e>
 8012e00:	4b13      	ldr	r3, [pc, #76]	; (8012e50 <tcp_output_fill_options+0x70>)
 8012e02:	f240 7256 	movw	r2, #1878	; 0x756
 8012e06:	4913      	ldr	r1, [pc, #76]	; (8012e54 <tcp_output_fill_options+0x74>)
 8012e08:	4813      	ldr	r0, [pc, #76]	; (8012e58 <tcp_output_fill_options+0x78>)
 8012e0a:	f004 fd15 	bl	8017838 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	3314      	adds	r3, #20
 8012e18:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	f103 0214 	add.w	r2, r3, #20
 8012e20:	8bfb      	ldrh	r3, [r7, #30]
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	4619      	mov	r1, r3
 8012e26:	79fb      	ldrb	r3, [r7, #7]
 8012e28:	009b      	lsls	r3, r3, #2
 8012e2a:	f003 0304 	and.w	r3, r3, #4
 8012e2e:	440b      	add	r3, r1
 8012e30:	4413      	add	r3, r2
 8012e32:	697a      	ldr	r2, [r7, #20]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d006      	beq.n	8012e46 <tcp_output_fill_options+0x66>
 8012e38:	4b05      	ldr	r3, [pc, #20]	; (8012e50 <tcp_output_fill_options+0x70>)
 8012e3a:	f240 7275 	movw	r2, #1909	; 0x775
 8012e3e:	4907      	ldr	r1, [pc, #28]	; (8012e5c <tcp_output_fill_options+0x7c>)
 8012e40:	4805      	ldr	r0, [pc, #20]	; (8012e58 <tcp_output_fill_options+0x78>)
 8012e42:	f004 fcf9 	bl	8017838 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012e46:	bf00      	nop
 8012e48:	3720      	adds	r7, #32
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	0801a090 	.word	0x0801a090
 8012e54:	0801a7c0 	.word	0x0801a7c0
 8012e58:	0801a0e4 	.word	0x0801a0e4
 8012e5c:	0801a6b8 	.word	0x0801a6b8

08012e60 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b08a      	sub	sp, #40	; 0x28
 8012e64:	af04      	add	r7, sp, #16
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
 8012e6c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d106      	bne.n	8012e82 <tcp_output_control_segment+0x22>
 8012e74:	4b1c      	ldr	r3, [pc, #112]	; (8012ee8 <tcp_output_control_segment+0x88>)
 8012e76:	f240 7287 	movw	r2, #1927	; 0x787
 8012e7a:	491c      	ldr	r1, [pc, #112]	; (8012eec <tcp_output_control_segment+0x8c>)
 8012e7c:	481c      	ldr	r0, [pc, #112]	; (8012ef0 <tcp_output_control_segment+0x90>)
 8012e7e:	f004 fcdb 	bl	8017838 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012e82:	683a      	ldr	r2, [r7, #0]
 8012e84:	6879      	ldr	r1, [r7, #4]
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f7fe ff40 	bl	8011d0c <tcp_route>
 8012e8c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d102      	bne.n	8012e9a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012e94:	23fc      	movs	r3, #252	; 0xfc
 8012e96:	75fb      	strb	r3, [r7, #23]
 8012e98:	e01c      	b.n	8012ed4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d006      	beq.n	8012eae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	7adb      	ldrb	r3, [r3, #11]
 8012ea4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	7a9b      	ldrb	r3, [r3, #10]
 8012eaa:	757b      	strb	r3, [r7, #21]
 8012eac:	e003      	b.n	8012eb6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012eae:	23ff      	movs	r3, #255	; 0xff
 8012eb0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012eb6:	7dba      	ldrb	r2, [r7, #22]
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	9302      	str	r3, [sp, #8]
 8012ebc:	2306      	movs	r3, #6
 8012ebe:	9301      	str	r3, [sp, #4]
 8012ec0:	7d7b      	ldrb	r3, [r7, #21]
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	6879      	ldr	r1, [r7, #4]
 8012eca:	68b8      	ldr	r0, [r7, #8]
 8012ecc:	f002 fb2a 	bl	8015524 <ip4_output_if>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012ed4:	68b8      	ldr	r0, [r7, #8]
 8012ed6:	f7fa fd43 	bl	800d960 <pbuf_free>
  return err;
 8012eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3718      	adds	r7, #24
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	0801a090 	.word	0x0801a090
 8012eec:	0801a7e8 	.word	0x0801a7e8
 8012ef0:	0801a0e4 	.word	0x0801a0e4

08012ef4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012ef4:	b590      	push	{r4, r7, lr}
 8012ef6:	b08b      	sub	sp, #44	; 0x2c
 8012ef8:	af04      	add	r7, sp, #16
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
 8012f00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d106      	bne.n	8012f16 <tcp_rst+0x22>
 8012f08:	4b1f      	ldr	r3, [pc, #124]	; (8012f88 <tcp_rst+0x94>)
 8012f0a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012f0e:	491f      	ldr	r1, [pc, #124]	; (8012f8c <tcp_rst+0x98>)
 8012f10:	481f      	ldr	r0, [pc, #124]	; (8012f90 <tcp_rst+0x9c>)
 8012f12:	f004 fc91 	bl	8017838 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d106      	bne.n	8012f2a <tcp_rst+0x36>
 8012f1c:	4b1a      	ldr	r3, [pc, #104]	; (8012f88 <tcp_rst+0x94>)
 8012f1e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012f22:	491c      	ldr	r1, [pc, #112]	; (8012f94 <tcp_rst+0xa0>)
 8012f24:	481a      	ldr	r0, [pc, #104]	; (8012f90 <tcp_rst+0x9c>)
 8012f26:	f004 fc87 	bl	8017838 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012f2e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012f32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012f34:	7dfb      	ldrb	r3, [r7, #23]
 8012f36:	b29c      	uxth	r4, r3
 8012f38:	68b8      	ldr	r0, [r7, #8]
 8012f3a:	f7f9 f9c8 	bl	800c2ce <lwip_htonl>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	8abb      	ldrh	r3, [r7, #20]
 8012f42:	9303      	str	r3, [sp, #12]
 8012f44:	2314      	movs	r3, #20
 8012f46:	9302      	str	r3, [sp, #8]
 8012f48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012f4a:	9301      	str	r3, [sp, #4]
 8012f4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	4613      	mov	r3, r2
 8012f52:	2200      	movs	r2, #0
 8012f54:	4621      	mov	r1, r4
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f7ff fe92 	bl	8012c80 <tcp_output_alloc_header_common>
 8012f5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00c      	beq.n	8012f7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f64:	7dfb      	ldrb	r3, [r7, #23]
 8012f66:	2200      	movs	r2, #0
 8012f68:	6939      	ldr	r1, [r7, #16]
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f7ff ff38 	bl	8012de0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f72:	683a      	ldr	r2, [r7, #0]
 8012f74:	6939      	ldr	r1, [r7, #16]
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	f7ff ff72 	bl	8012e60 <tcp_output_control_segment>
 8012f7c:	e000      	b.n	8012f80 <tcp_rst+0x8c>
    return;
 8012f7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012f80:	371c      	adds	r7, #28
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd90      	pop	{r4, r7, pc}
 8012f86:	bf00      	nop
 8012f88:	0801a090 	.word	0x0801a090
 8012f8c:	0801a814 	.word	0x0801a814
 8012f90:	0801a0e4 	.word	0x0801a0e4
 8012f94:	0801a830 	.word	0x0801a830

08012f98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012f98:	b590      	push	{r4, r7, lr}
 8012f9a:	b087      	sub	sp, #28
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d106      	bne.n	8012fbc <tcp_send_empty_ack+0x24>
 8012fae:	4b28      	ldr	r3, [pc, #160]	; (8013050 <tcp_send_empty_ack+0xb8>)
 8012fb0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012fb4:	4927      	ldr	r1, [pc, #156]	; (8013054 <tcp_send_empty_ack+0xbc>)
 8012fb6:	4828      	ldr	r0, [pc, #160]	; (8013058 <tcp_send_empty_ack+0xc0>)
 8012fb8:	f004 fc3e 	bl	8017838 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012fbc:	7dfb      	ldrb	r3, [r7, #23]
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	f003 0304 	and.w	r3, r3, #4
 8012fc6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012fc8:	7d7b      	ldrb	r3, [r7, #21]
 8012fca:	b29c      	uxth	r4, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f9 f97c 	bl	800c2ce <lwip_htonl>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2200      	movs	r2, #0
 8012fda:	4621      	mov	r1, r4
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7ff fec1 	bl	8012d64 <tcp_output_alloc_header>
 8012fe2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d109      	bne.n	8012ffe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	8b5b      	ldrh	r3, [r3, #26]
 8012fee:	f043 0303 	orr.w	r3, r3, #3
 8012ff2:	b29a      	uxth	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012ff8:	f06f 0301 	mvn.w	r3, #1
 8012ffc:	e023      	b.n	8013046 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012ffe:	7dbb      	ldrb	r3, [r7, #22]
 8013000:	7dfa      	ldrb	r2, [r7, #23]
 8013002:	6939      	ldr	r1, [r7, #16]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7ff feeb 	bl	8012de0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	3304      	adds	r3, #4
 8013010:	6939      	ldr	r1, [r7, #16]
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f7ff ff24 	bl	8012e60 <tcp_output_control_segment>
 8013018:	4603      	mov	r3, r0
 801301a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d007      	beq.n	8013034 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	8b5b      	ldrh	r3, [r3, #26]
 8013028:	f043 0303 	orr.w	r3, r3, #3
 801302c:	b29a      	uxth	r2, r3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	835a      	strh	r2, [r3, #26]
 8013032:	e006      	b.n	8013042 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	8b5b      	ldrh	r3, [r3, #26]
 8013038:	f023 0303 	bic.w	r3, r3, #3
 801303c:	b29a      	uxth	r2, r3
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013046:	4618      	mov	r0, r3
 8013048:	371c      	adds	r7, #28
 801304a:	46bd      	mov	sp, r7
 801304c:	bd90      	pop	{r4, r7, pc}
 801304e:	bf00      	nop
 8013050:	0801a090 	.word	0x0801a090
 8013054:	0801a84c 	.word	0x0801a84c
 8013058:	0801a0e4 	.word	0x0801a0e4

0801305c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801305c:	b590      	push	{r4, r7, lr}
 801305e:	b087      	sub	sp, #28
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013064:	2300      	movs	r3, #0
 8013066:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d106      	bne.n	801307c <tcp_keepalive+0x20>
 801306e:	4b18      	ldr	r3, [pc, #96]	; (80130d0 <tcp_keepalive+0x74>)
 8013070:	f640 0224 	movw	r2, #2084	; 0x824
 8013074:	4917      	ldr	r1, [pc, #92]	; (80130d4 <tcp_keepalive+0x78>)
 8013076:	4818      	ldr	r0, [pc, #96]	; (80130d8 <tcp_keepalive+0x7c>)
 8013078:	f004 fbde 	bl	8017838 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801307c:	7dfb      	ldrb	r3, [r7, #23]
 801307e:	b29c      	uxth	r4, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013084:	3b01      	subs	r3, #1
 8013086:	4618      	mov	r0, r3
 8013088:	f7f9 f921 	bl	800c2ce <lwip_htonl>
 801308c:	4603      	mov	r3, r0
 801308e:	2200      	movs	r2, #0
 8013090:	4621      	mov	r1, r4
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7ff fe66 	bl	8012d64 <tcp_output_alloc_header>
 8013098:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d102      	bne.n	80130a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80130a0:	f04f 33ff 	mov.w	r3, #4294967295
 80130a4:	e010      	b.n	80130c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80130a6:	7dfb      	ldrb	r3, [r7, #23]
 80130a8:	2200      	movs	r2, #0
 80130aa:	6939      	ldr	r1, [r7, #16]
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f7ff fe97 	bl	8012de0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3304      	adds	r3, #4
 80130b8:	6939      	ldr	r1, [r7, #16]
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f7ff fed0 	bl	8012e60 <tcp_output_control_segment>
 80130c0:	4603      	mov	r3, r0
 80130c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80130c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	371c      	adds	r7, #28
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd90      	pop	{r4, r7, pc}
 80130d0:	0801a090 	.word	0x0801a090
 80130d4:	0801a86c 	.word	0x0801a86c
 80130d8:	0801a0e4 	.word	0x0801a0e4

080130dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80130dc:	b590      	push	{r4, r7, lr}
 80130de:	b08b      	sub	sp, #44	; 0x2c
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80130e4:	2300      	movs	r3, #0
 80130e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d106      	bne.n	80130fe <tcp_zero_window_probe+0x22>
 80130f0:	4b4c      	ldr	r3, [pc, #304]	; (8013224 <tcp_zero_window_probe+0x148>)
 80130f2:	f640 024f 	movw	r2, #2127	; 0x84f
 80130f6:	494c      	ldr	r1, [pc, #304]	; (8013228 <tcp_zero_window_probe+0x14c>)
 80130f8:	484c      	ldr	r0, [pc, #304]	; (801322c <tcp_zero_window_probe+0x150>)
 80130fa:	f004 fb9d 	bl	8017838 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013102:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013104:	6a3b      	ldr	r3, [r7, #32]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801310a:	2300      	movs	r3, #0
 801310c:	e086      	b.n	801321c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013114:	2bff      	cmp	r3, #255	; 0xff
 8013116:	d007      	beq.n	8013128 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801311e:	3301      	adds	r3, #1
 8013120:	b2da      	uxtb	r2, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	899b      	ldrh	r3, [r3, #12]
 801312e:	b29b      	uxth	r3, r3
 8013130:	4618      	mov	r0, r3
 8013132:	f7f9 f8b7 	bl	800c2a4 <lwip_htons>
 8013136:	4603      	mov	r3, r0
 8013138:	b2db      	uxtb	r3, r3
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	2b00      	cmp	r3, #0
 8013140:	d005      	beq.n	801314e <tcp_zero_window_probe+0x72>
 8013142:	6a3b      	ldr	r3, [r7, #32]
 8013144:	891b      	ldrh	r3, [r3, #8]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d101      	bne.n	801314e <tcp_zero_window_probe+0x72>
 801314a:	2301      	movs	r3, #1
 801314c:	e000      	b.n	8013150 <tcp_zero_window_probe+0x74>
 801314e:	2300      	movs	r3, #0
 8013150:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013152:	7ffb      	ldrb	r3, [r7, #31]
 8013154:	2b00      	cmp	r3, #0
 8013156:	bf0c      	ite	eq
 8013158:	2301      	moveq	r3, #1
 801315a:	2300      	movne	r3, #0
 801315c:	b2db      	uxtb	r3, r3
 801315e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013164:	b299      	uxth	r1, r3
 8013166:	6a3b      	ldr	r3, [r7, #32]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	8bba      	ldrh	r2, [r7, #28]
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f7ff fdf8 	bl	8012d64 <tcp_output_alloc_header>
 8013174:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801317c:	f04f 33ff 	mov.w	r3, #4294967295
 8013180:	e04c      	b.n	801321c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013188:	7ffb      	ldrb	r3, [r7, #31]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d011      	beq.n	80131b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	899b      	ldrh	r3, [r3, #12]
 8013192:	b29b      	uxth	r3, r3
 8013194:	b21b      	sxth	r3, r3
 8013196:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801319a:	b21c      	sxth	r4, r3
 801319c:	2011      	movs	r0, #17
 801319e:	f7f9 f881 	bl	800c2a4 <lwip_htons>
 80131a2:	4603      	mov	r3, r0
 80131a4:	b21b      	sxth	r3, r3
 80131a6:	4323      	orrs	r3, r4
 80131a8:	b21b      	sxth	r3, r3
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	819a      	strh	r2, [r3, #12]
 80131b0:	e010      	b.n	80131d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	3314      	adds	r3, #20
 80131b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	6858      	ldr	r0, [r3, #4]
 80131be:	6a3b      	ldr	r3, [r7, #32]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	891a      	ldrh	r2, [r3, #8]
 80131c4:	6a3b      	ldr	r3, [r7, #32]
 80131c6:	891b      	ldrh	r3, [r3, #8]
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	2201      	movs	r2, #1
 80131ce:	6939      	ldr	r1, [r7, #16]
 80131d0:	f7fa fdc0 	bl	800dd54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80131d4:	6a3b      	ldr	r3, [r7, #32]
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f9 f877 	bl	800c2ce <lwip_htonl>
 80131e0:	4603      	mov	r3, r0
 80131e2:	3301      	adds	r3, #1
 80131e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	da02      	bge.n	80131f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80131f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131fc:	2200      	movs	r2, #0
 80131fe:	69b9      	ldr	r1, [r7, #24]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7ff fded 	bl	8012de0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	3304      	adds	r3, #4
 801320c:	69b9      	ldr	r1, [r7, #24]
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7ff fe26 	bl	8012e60 <tcp_output_control_segment>
 8013214:	4603      	mov	r3, r0
 8013216:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013218:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801321c:	4618      	mov	r0, r3
 801321e:	372c      	adds	r7, #44	; 0x2c
 8013220:	46bd      	mov	sp, r7
 8013222:	bd90      	pop	{r4, r7, pc}
 8013224:	0801a090 	.word	0x0801a090
 8013228:	0801a888 	.word	0x0801a888
 801322c:	0801a0e4 	.word	0x0801a0e4

08013230 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013238:	f7fa ff0c 	bl	800e054 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801323c:	4b0a      	ldr	r3, [pc, #40]	; (8013268 <tcpip_tcp_timer+0x38>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d103      	bne.n	801324c <tcpip_tcp_timer+0x1c>
 8013244:	4b09      	ldr	r3, [pc, #36]	; (801326c <tcpip_tcp_timer+0x3c>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d005      	beq.n	8013258 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801324c:	2200      	movs	r2, #0
 801324e:	4908      	ldr	r1, [pc, #32]	; (8013270 <tcpip_tcp_timer+0x40>)
 8013250:	20fa      	movs	r0, #250	; 0xfa
 8013252:	f000 f8f3 	bl	801343c <sys_timeout>
 8013256:	e003      	b.n	8013260 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013258:	4b06      	ldr	r3, [pc, #24]	; (8013274 <tcpip_tcp_timer+0x44>)
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]
  }
}
 801325e:	bf00      	nop
 8013260:	bf00      	nop
 8013262:	3708      	adds	r7, #8
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	20008e08 	.word	0x20008e08
 801326c:	20008e0c 	.word	0x20008e0c
 8013270:	08013231 	.word	0x08013231
 8013274:	20008e54 	.word	0x20008e54

08013278 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801327c:	4b0a      	ldr	r3, [pc, #40]	; (80132a8 <tcp_timer_needed+0x30>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10f      	bne.n	80132a4 <tcp_timer_needed+0x2c>
 8013284:	4b09      	ldr	r3, [pc, #36]	; (80132ac <tcp_timer_needed+0x34>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d103      	bne.n	8013294 <tcp_timer_needed+0x1c>
 801328c:	4b08      	ldr	r3, [pc, #32]	; (80132b0 <tcp_timer_needed+0x38>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d007      	beq.n	80132a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013294:	4b04      	ldr	r3, [pc, #16]	; (80132a8 <tcp_timer_needed+0x30>)
 8013296:	2201      	movs	r2, #1
 8013298:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801329a:	2200      	movs	r2, #0
 801329c:	4905      	ldr	r1, [pc, #20]	; (80132b4 <tcp_timer_needed+0x3c>)
 801329e:	20fa      	movs	r0, #250	; 0xfa
 80132a0:	f000 f8cc 	bl	801343c <sys_timeout>
  }
}
 80132a4:	bf00      	nop
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	20008e54 	.word	0x20008e54
 80132ac:	20008e08 	.word	0x20008e08
 80132b0:	20008e0c 	.word	0x20008e0c
 80132b4:	08013231 	.word	0x08013231

080132b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b086      	sub	sp, #24
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80132c4:	2006      	movs	r0, #6
 80132c6:	f7f9 fc65 	bl	800cb94 <memp_malloc>
 80132ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d109      	bne.n	80132e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d151      	bne.n	801337c <sys_timeout_abs+0xc4>
 80132d8:	4b2a      	ldr	r3, [pc, #168]	; (8013384 <sys_timeout_abs+0xcc>)
 80132da:	22be      	movs	r2, #190	; 0xbe
 80132dc:	492a      	ldr	r1, [pc, #168]	; (8013388 <sys_timeout_abs+0xd0>)
 80132de:	482b      	ldr	r0, [pc, #172]	; (801338c <sys_timeout_abs+0xd4>)
 80132e0:	f004 faaa 	bl	8017838 <iprintf>
    return;
 80132e4:	e04a      	b.n	801337c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2200      	movs	r2, #0
 80132ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	68ba      	ldr	r2, [r7, #8]
 80132f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	687a      	ldr	r2, [r7, #4]
 80132f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80132fe:	4b24      	ldr	r3, [pc, #144]	; (8013390 <sys_timeout_abs+0xd8>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d103      	bne.n	801330e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013306:	4a22      	ldr	r2, [pc, #136]	; (8013390 <sys_timeout_abs+0xd8>)
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	6013      	str	r3, [r2, #0]
    return;
 801330c:	e037      	b.n	801337e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	685a      	ldr	r2, [r3, #4]
 8013312:	4b1f      	ldr	r3, [pc, #124]	; (8013390 <sys_timeout_abs+0xd8>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	0fdb      	lsrs	r3, r3, #31
 801331c:	f003 0301 	and.w	r3, r3, #1
 8013320:	b2db      	uxtb	r3, r3
 8013322:	2b00      	cmp	r3, #0
 8013324:	d007      	beq.n	8013336 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013326:	4b1a      	ldr	r3, [pc, #104]	; (8013390 <sys_timeout_abs+0xd8>)
 8013328:	681a      	ldr	r2, [r3, #0]
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801332e:	4a18      	ldr	r2, [pc, #96]	; (8013390 <sys_timeout_abs+0xd8>)
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	6013      	str	r3, [r2, #0]
 8013334:	e023      	b.n	801337e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013336:	4b16      	ldr	r3, [pc, #88]	; (8013390 <sys_timeout_abs+0xd8>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	617b      	str	r3, [r7, #20]
 801333c:	e01a      	b.n	8013374 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d00b      	beq.n	801335e <sys_timeout_abs+0xa6>
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	685a      	ldr	r2, [r3, #4]
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	1ad3      	subs	r3, r2, r3
 8013352:	0fdb      	lsrs	r3, r3, #31
 8013354:	f003 0301 	and.w	r3, r3, #1
 8013358:	b2db      	uxtb	r3, r3
 801335a:	2b00      	cmp	r3, #0
 801335c:	d007      	beq.n	801336e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	693a      	ldr	r2, [r7, #16]
 801336a:	601a      	str	r2, [r3, #0]
        break;
 801336c:	e007      	b.n	801337e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	617b      	str	r3, [r7, #20]
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d1e1      	bne.n	801333e <sys_timeout_abs+0x86>
 801337a:	e000      	b.n	801337e <sys_timeout_abs+0xc6>
    return;
 801337c:	bf00      	nop
      }
    }
  }
}
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	0801a8ac 	.word	0x0801a8ac
 8013388:	0801a8e0 	.word	0x0801a8e0
 801338c:	0801a920 	.word	0x0801a920
 8013390:	20008e4c 	.word	0x20008e4c

08013394 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	4798      	blx	r3

  now = sys_now();
 80133a6:	f7f8 fd61 	bl	800be6c <sys_now>
 80133aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	4b0f      	ldr	r3, [pc, #60]	; (80133f0 <lwip_cyclic_timer+0x5c>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4413      	add	r3, r2
 80133b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	1ad3      	subs	r3, r2, r3
 80133be:	0fdb      	lsrs	r3, r3, #31
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d009      	beq.n	80133de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	4413      	add	r3, r2
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	4907      	ldr	r1, [pc, #28]	; (80133f4 <lwip_cyclic_timer+0x60>)
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ff ff6e 	bl	80132b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80133dc:	e004      	b.n	80133e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	4904      	ldr	r1, [pc, #16]	; (80133f4 <lwip_cyclic_timer+0x60>)
 80133e2:	68f8      	ldr	r0, [r7, #12]
 80133e4:	f7ff ff68 	bl	80132b8 <sys_timeout_abs>
}
 80133e8:	bf00      	nop
 80133ea:	3718      	adds	r7, #24
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	20008e50 	.word	0x20008e50
 80133f4:	08013395 	.word	0x08013395

080133f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133fe:	2301      	movs	r3, #1
 8013400:	607b      	str	r3, [r7, #4]
 8013402:	e00e      	b.n	8013422 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013404:	4a0b      	ldr	r2, [pc, #44]	; (8013434 <sys_timeouts_init+0x3c>)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	00db      	lsls	r3, r3, #3
 8013410:	4a08      	ldr	r2, [pc, #32]	; (8013434 <sys_timeouts_init+0x3c>)
 8013412:	4413      	add	r3, r2
 8013414:	461a      	mov	r2, r3
 8013416:	4908      	ldr	r1, [pc, #32]	; (8013438 <sys_timeouts_init+0x40>)
 8013418:	f000 f810 	bl	801343c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	3301      	adds	r3, #1
 8013420:	607b      	str	r3, [r7, #4]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2b02      	cmp	r3, #2
 8013426:	d9ed      	bls.n	8013404 <sys_timeouts_init+0xc>
  }
}
 8013428:	bf00      	nop
 801342a:	bf00      	nop
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	0801b674 	.word	0x0801b674
 8013438:	08013395 	.word	0x08013395

0801343c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b086      	sub	sp, #24
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801344e:	d306      	bcc.n	801345e <sys_timeout+0x22>
 8013450:	4b0a      	ldr	r3, [pc, #40]	; (801347c <sys_timeout+0x40>)
 8013452:	f240 1229 	movw	r2, #297	; 0x129
 8013456:	490a      	ldr	r1, [pc, #40]	; (8013480 <sys_timeout+0x44>)
 8013458:	480a      	ldr	r0, [pc, #40]	; (8013484 <sys_timeout+0x48>)
 801345a:	f004 f9ed 	bl	8017838 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801345e:	f7f8 fd05 	bl	800be6c <sys_now>
 8013462:	4602      	mov	r2, r0
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	4413      	add	r3, r2
 8013468:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	68b9      	ldr	r1, [r7, #8]
 801346e:	6978      	ldr	r0, [r7, #20]
 8013470:	f7ff ff22 	bl	80132b8 <sys_timeout_abs>
#endif
}
 8013474:	bf00      	nop
 8013476:	3718      	adds	r7, #24
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	0801a8ac 	.word	0x0801a8ac
 8013480:	0801a948 	.word	0x0801a948
 8013484:	0801a920 	.word	0x0801a920

08013488 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801348e:	f7f8 fced 	bl	800be6c <sys_now>
 8013492:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013494:	4b1a      	ldr	r3, [pc, #104]	; (8013500 <sys_check_timeouts+0x78>)
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	b2db      	uxtb	r3, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d001      	beq.n	80134a2 <sys_check_timeouts+0x1a>
 801349e:	f7f9 ff25 	bl	800d2ec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80134a2:	4b18      	ldr	r3, [pc, #96]	; (8013504 <sys_check_timeouts+0x7c>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d022      	beq.n	80134f4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	68fa      	ldr	r2, [r7, #12]
 80134b4:	1ad3      	subs	r3, r2, r3
 80134b6:	0fdb      	lsrs	r3, r3, #31
 80134b8:	f003 0301 	and.w	r3, r3, #1
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d11a      	bne.n	80134f8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4a0f      	ldr	r2, [pc, #60]	; (8013504 <sys_check_timeouts+0x7c>)
 80134c8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	68db      	ldr	r3, [r3, #12]
 80134d4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	4a0b      	ldr	r2, [pc, #44]	; (8013508 <sys_check_timeouts+0x80>)
 80134dc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80134de:	68b9      	ldr	r1, [r7, #8]
 80134e0:	2006      	movs	r0, #6
 80134e2:	f7f9 fbc7 	bl	800cc74 <memp_free>
    if (handler != NULL) {
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d0d3      	beq.n	8013494 <sys_check_timeouts+0xc>
      handler(arg);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6838      	ldr	r0, [r7, #0]
 80134f0:	4798      	blx	r3
  do {
 80134f2:	e7cf      	b.n	8013494 <sys_check_timeouts+0xc>
      return;
 80134f4:	bf00      	nop
 80134f6:	e000      	b.n	80134fa <sys_check_timeouts+0x72>
      return;
 80134f8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80134fa:	3710      	adds	r7, #16
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	20008df9 	.word	0x20008df9
 8013504:	20008e4c 	.word	0x20008e4c
 8013508:	20008e50 	.word	0x20008e50

0801350c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013510:	f004 fa20 	bl	8017954 <rand>
 8013514:	4603      	mov	r3, r0
 8013516:	b29b      	uxth	r3, r3
 8013518:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801351c:	b29b      	uxth	r3, r3
 801351e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013522:	b29a      	uxth	r2, r3
 8013524:	4b01      	ldr	r3, [pc, #4]	; (801352c <udp_init+0x20>)
 8013526:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013528:	bf00      	nop
 801352a:	bd80      	pop	{r7, pc}
 801352c:	20000028 	.word	0x20000028

08013530 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013530:	b480      	push	{r7}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013536:	2300      	movs	r3, #0
 8013538:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801353a:	4b17      	ldr	r3, [pc, #92]	; (8013598 <udp_new_port+0x68>)
 801353c:	881b      	ldrh	r3, [r3, #0]
 801353e:	1c5a      	adds	r2, r3, #1
 8013540:	b291      	uxth	r1, r2
 8013542:	4a15      	ldr	r2, [pc, #84]	; (8013598 <udp_new_port+0x68>)
 8013544:	8011      	strh	r1, [r2, #0]
 8013546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801354a:	4293      	cmp	r3, r2
 801354c:	d103      	bne.n	8013556 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801354e:	4b12      	ldr	r3, [pc, #72]	; (8013598 <udp_new_port+0x68>)
 8013550:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013554:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013556:	4b11      	ldr	r3, [pc, #68]	; (801359c <udp_new_port+0x6c>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	603b      	str	r3, [r7, #0]
 801355c:	e011      	b.n	8013582 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	8a5a      	ldrh	r2, [r3, #18]
 8013562:	4b0d      	ldr	r3, [pc, #52]	; (8013598 <udp_new_port+0x68>)
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	429a      	cmp	r2, r3
 8013568:	d108      	bne.n	801357c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801356a:	88fb      	ldrh	r3, [r7, #6]
 801356c:	3301      	adds	r3, #1
 801356e:	80fb      	strh	r3, [r7, #6]
 8013570:	88fb      	ldrh	r3, [r7, #6]
 8013572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013576:	d3e0      	bcc.n	801353a <udp_new_port+0xa>
        return 0;
 8013578:	2300      	movs	r3, #0
 801357a:	e007      	b.n	801358c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	603b      	str	r3, [r7, #0]
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d1ea      	bne.n	801355e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013588:	4b03      	ldr	r3, [pc, #12]	; (8013598 <udp_new_port+0x68>)
 801358a:	881b      	ldrh	r3, [r3, #0]
}
 801358c:	4618      	mov	r0, r3
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr
 8013598:	20000028 	.word	0x20000028
 801359c:	20008e58 	.word	0x20008e58

080135a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	4613      	mov	r3, r2
 80135ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d105      	bne.n	80135c0 <udp_input_local_match+0x20>
 80135b4:	4b27      	ldr	r3, [pc, #156]	; (8013654 <udp_input_local_match+0xb4>)
 80135b6:	2287      	movs	r2, #135	; 0x87
 80135b8:	4927      	ldr	r1, [pc, #156]	; (8013658 <udp_input_local_match+0xb8>)
 80135ba:	4828      	ldr	r0, [pc, #160]	; (801365c <udp_input_local_match+0xbc>)
 80135bc:	f004 f93c 	bl	8017838 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d105      	bne.n	80135d2 <udp_input_local_match+0x32>
 80135c6:	4b23      	ldr	r3, [pc, #140]	; (8013654 <udp_input_local_match+0xb4>)
 80135c8:	2288      	movs	r2, #136	; 0x88
 80135ca:	4925      	ldr	r1, [pc, #148]	; (8013660 <udp_input_local_match+0xc0>)
 80135cc:	4823      	ldr	r0, [pc, #140]	; (801365c <udp_input_local_match+0xbc>)
 80135ce:	f004 f933 	bl	8017838 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	7a1b      	ldrb	r3, [r3, #8]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00b      	beq.n	80135f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	7a1a      	ldrb	r2, [r3, #8]
 80135de:	4b21      	ldr	r3, [pc, #132]	; (8013664 <udp_input_local_match+0xc4>)
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135e6:	3301      	adds	r3, #1
 80135e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d001      	beq.n	80135f2 <udp_input_local_match+0x52>
    return 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	e02b      	b.n	801364a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80135f2:	79fb      	ldrb	r3, [r7, #7]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d018      	beq.n	801362a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d013      	beq.n	8013626 <udp_input_local_match+0x86>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d00f      	beq.n	8013626 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013606:	4b17      	ldr	r3, [pc, #92]	; (8013664 <udp_input_local_match+0xc4>)
 8013608:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801360e:	d00a      	beq.n	8013626 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	4b13      	ldr	r3, [pc, #76]	; (8013664 <udp_input_local_match+0xc4>)
 8013616:	695b      	ldr	r3, [r3, #20]
 8013618:	405a      	eors	r2, r3
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	3308      	adds	r3, #8
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013622:	2b00      	cmp	r3, #0
 8013624:	d110      	bne.n	8013648 <udp_input_local_match+0xa8>
          return 1;
 8013626:	2301      	movs	r3, #1
 8013628:	e00f      	b.n	801364a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d009      	beq.n	8013644 <udp_input_local_match+0xa4>
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d005      	beq.n	8013644 <udp_input_local_match+0xa4>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	4b09      	ldr	r3, [pc, #36]	; (8013664 <udp_input_local_match+0xc4>)
 801363e:	695b      	ldr	r3, [r3, #20]
 8013640:	429a      	cmp	r2, r3
 8013642:	d101      	bne.n	8013648 <udp_input_local_match+0xa8>
        return 1;
 8013644:	2301      	movs	r3, #1
 8013646:	e000      	b.n	801364a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013648:	2300      	movs	r3, #0
}
 801364a:	4618      	mov	r0, r3
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	0801a994 	.word	0x0801a994
 8013658:	0801a9c4 	.word	0x0801a9c4
 801365c:	0801a9e8 	.word	0x0801a9e8
 8013660:	0801aa10 	.word	0x0801aa10
 8013664:	2000588c 	.word	0x2000588c

08013668 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013668:	b590      	push	{r4, r7, lr}
 801366a:	b08d      	sub	sp, #52	; 0x34
 801366c:	af02      	add	r7, sp, #8
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013672:	2300      	movs	r3, #0
 8013674:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d105      	bne.n	8013688 <udp_input+0x20>
 801367c:	4b7c      	ldr	r3, [pc, #496]	; (8013870 <udp_input+0x208>)
 801367e:	22cf      	movs	r2, #207	; 0xcf
 8013680:	497c      	ldr	r1, [pc, #496]	; (8013874 <udp_input+0x20c>)
 8013682:	487d      	ldr	r0, [pc, #500]	; (8013878 <udp_input+0x210>)
 8013684:	f004 f8d8 	bl	8017838 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d105      	bne.n	801369a <udp_input+0x32>
 801368e:	4b78      	ldr	r3, [pc, #480]	; (8013870 <udp_input+0x208>)
 8013690:	22d0      	movs	r2, #208	; 0xd0
 8013692:	497a      	ldr	r1, [pc, #488]	; (801387c <udp_input+0x214>)
 8013694:	4878      	ldr	r0, [pc, #480]	; (8013878 <udp_input+0x210>)
 8013696:	f004 f8cf 	bl	8017838 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	895b      	ldrh	r3, [r3, #10]
 801369e:	2b07      	cmp	r3, #7
 80136a0:	d803      	bhi.n	80136aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7fa f95c 	bl	800d960 <pbuf_free>
    goto end;
 80136a8:	e0de      	b.n	8013868 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80136b0:	4b73      	ldr	r3, [pc, #460]	; (8013880 <udp_input+0x218>)
 80136b2:	695b      	ldr	r3, [r3, #20]
 80136b4:	4a72      	ldr	r2, [pc, #456]	; (8013880 <udp_input+0x218>)
 80136b6:	6812      	ldr	r2, [r2, #0]
 80136b8:	4611      	mov	r1, r2
 80136ba:	4618      	mov	r0, r3
 80136bc:	f002 f80a 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 80136c0:	4603      	mov	r3, r0
 80136c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7f8 fdea 	bl	800c2a4 <lwip_htons>
 80136d0:	4603      	mov	r3, r0
 80136d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	885b      	ldrh	r3, [r3, #2]
 80136d8:	b29b      	uxth	r3, r3
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f8 fde2 	bl	800c2a4 <lwip_htons>
 80136e0:	4603      	mov	r3, r0
 80136e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80136e4:	2300      	movs	r3, #0
 80136e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80136e8:	2300      	movs	r3, #0
 80136ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80136ec:	2300      	movs	r3, #0
 80136ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80136f0:	4b64      	ldr	r3, [pc, #400]	; (8013884 <udp_input+0x21c>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	627b      	str	r3, [r7, #36]	; 0x24
 80136f6:	e054      	b.n	80137a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80136f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fa:	8a5b      	ldrh	r3, [r3, #18]
 80136fc:	89fa      	ldrh	r2, [r7, #14]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d14a      	bne.n	8013798 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013702:	7cfb      	ldrb	r3, [r7, #19]
 8013704:	461a      	mov	r2, r3
 8013706:	6839      	ldr	r1, [r7, #0]
 8013708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801370a:	f7ff ff49 	bl	80135a0 <udp_input_local_match>
 801370e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013710:	2b00      	cmp	r3, #0
 8013712:	d041      	beq.n	8013798 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013716:	7c1b      	ldrb	r3, [r3, #16]
 8013718:	f003 0304 	and.w	r3, r3, #4
 801371c:	2b00      	cmp	r3, #0
 801371e:	d11d      	bne.n	801375c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d102      	bne.n	801372c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013728:	61fb      	str	r3, [r7, #28]
 801372a:	e017      	b.n	801375c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801372c:	7cfb      	ldrb	r3, [r7, #19]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d014      	beq.n	801375c <udp_input+0xf4>
 8013732:	4b53      	ldr	r3, [pc, #332]	; (8013880 <udp_input+0x218>)
 8013734:	695b      	ldr	r3, [r3, #20]
 8013736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801373a:	d10f      	bne.n	801375c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	3304      	adds	r3, #4
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	429a      	cmp	r2, r3
 8013748:	d008      	beq.n	801375c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	3304      	adds	r3, #4
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	429a      	cmp	r2, r3
 8013756:	d101      	bne.n	801375c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375e:	8a9b      	ldrh	r3, [r3, #20]
 8013760:	8a3a      	ldrh	r2, [r7, #16]
 8013762:	429a      	cmp	r2, r3
 8013764:	d118      	bne.n	8013798 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801376a:	2b00      	cmp	r3, #0
 801376c:	d005      	beq.n	801377a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013770:	685a      	ldr	r2, [r3, #4]
 8013772:	4b43      	ldr	r3, [pc, #268]	; (8013880 <udp_input+0x218>)
 8013774:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013776:	429a      	cmp	r2, r3
 8013778:	d10e      	bne.n	8013798 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801377a:	6a3b      	ldr	r3, [r7, #32]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d014      	beq.n	80137aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	68da      	ldr	r2, [r3, #12]
 8013784:	6a3b      	ldr	r3, [r7, #32]
 8013786:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013788:	4b3e      	ldr	r3, [pc, #248]	; (8013884 <udp_input+0x21c>)
 801378a:	681a      	ldr	r2, [r3, #0]
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013790:	4a3c      	ldr	r2, [pc, #240]	; (8013884 <udp_input+0x21c>)
 8013792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013794:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013796:	e008      	b.n	80137aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8013798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379e:	68db      	ldr	r3, [r3, #12]
 80137a0:	627b      	str	r3, [r7, #36]	; 0x24
 80137a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d1a7      	bne.n	80136f8 <udp_input+0x90>
 80137a8:	e000      	b.n	80137ac <udp_input+0x144>
        break;
 80137aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80137ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d101      	bne.n	80137b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80137b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d002      	beq.n	80137c2 <udp_input+0x15a>
    for_us = 1;
 80137bc:	2301      	movs	r3, #1
 80137be:	76fb      	strb	r3, [r7, #27]
 80137c0:	e00a      	b.n	80137d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	3304      	adds	r3, #4
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	4b2d      	ldr	r3, [pc, #180]	; (8013880 <udp_input+0x218>)
 80137ca:	695b      	ldr	r3, [r3, #20]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	bf0c      	ite	eq
 80137d0:	2301      	moveq	r3, #1
 80137d2:	2300      	movne	r3, #0
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80137d8:	7efb      	ldrb	r3, [r7, #27]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d041      	beq.n	8013862 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80137de:	2108      	movs	r1, #8
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7fa f837 	bl	800d854 <pbuf_remove_header>
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d00a      	beq.n	8013802 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80137ec:	4b20      	ldr	r3, [pc, #128]	; (8013870 <udp_input+0x208>)
 80137ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80137f2:	4925      	ldr	r1, [pc, #148]	; (8013888 <udp_input+0x220>)
 80137f4:	4820      	ldr	r0, [pc, #128]	; (8013878 <udp_input+0x210>)
 80137f6:	f004 f81f 	bl	8017838 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f7fa f8b0 	bl	800d960 <pbuf_free>
      goto end;
 8013800:	e032      	b.n	8013868 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013804:	2b00      	cmp	r3, #0
 8013806:	d012      	beq.n	801382e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380a:	699b      	ldr	r3, [r3, #24]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d00a      	beq.n	8013826 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013812:	699c      	ldr	r4, [r3, #24]
 8013814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013816:	69d8      	ldr	r0, [r3, #28]
 8013818:	8a3b      	ldrh	r3, [r7, #16]
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	4b1b      	ldr	r3, [pc, #108]	; (801388c <udp_input+0x224>)
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013822:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013824:	e021      	b.n	801386a <udp_input+0x202>
        pbuf_free(p);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7fa f89a 	bl	800d960 <pbuf_free>
        goto end;
 801382c:	e01c      	b.n	8013868 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801382e:	7cfb      	ldrb	r3, [r7, #19]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d112      	bne.n	801385a <udp_input+0x1f2>
 8013834:	4b12      	ldr	r3, [pc, #72]	; (8013880 <udp_input+0x218>)
 8013836:	695b      	ldr	r3, [r3, #20]
 8013838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801383c:	2be0      	cmp	r3, #224	; 0xe0
 801383e:	d00c      	beq.n	801385a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013840:	4b0f      	ldr	r3, [pc, #60]	; (8013880 <udp_input+0x218>)
 8013842:	899b      	ldrh	r3, [r3, #12]
 8013844:	3308      	adds	r3, #8
 8013846:	b29b      	uxth	r3, r3
 8013848:	b21b      	sxth	r3, r3
 801384a:	4619      	mov	r1, r3
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7fa f874 	bl	800d93a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013852:	2103      	movs	r1, #3
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f001 fc1d 	bl	8015094 <icmp_dest_unreach>
      pbuf_free(p);
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f7fa f880 	bl	800d960 <pbuf_free>
  return;
 8013860:	e003      	b.n	801386a <udp_input+0x202>
    pbuf_free(p);
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f7fa f87c 	bl	800d960 <pbuf_free>
  return;
 8013868:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801386a:	372c      	adds	r7, #44	; 0x2c
 801386c:	46bd      	mov	sp, r7
 801386e:	bd90      	pop	{r4, r7, pc}
 8013870:	0801a994 	.word	0x0801a994
 8013874:	0801aa38 	.word	0x0801aa38
 8013878:	0801a9e8 	.word	0x0801a9e8
 801387c:	0801aa50 	.word	0x0801aa50
 8013880:	2000588c 	.word	0x2000588c
 8013884:	20008e58 	.word	0x20008e58
 8013888:	0801aa6c 	.word	0x0801aa6c
 801388c:	2000589c 	.word	0x2000589c

08013890 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d109      	bne.n	80138b4 <udp_send+0x24>
 80138a0:	4b11      	ldr	r3, [pc, #68]	; (80138e8 <udp_send+0x58>)
 80138a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80138a6:	4911      	ldr	r1, [pc, #68]	; (80138ec <udp_send+0x5c>)
 80138a8:	4811      	ldr	r0, [pc, #68]	; (80138f0 <udp_send+0x60>)
 80138aa:	f003 ffc5 	bl	8017838 <iprintf>
 80138ae:	f06f 030f 	mvn.w	r3, #15
 80138b2:	e015      	b.n	80138e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d109      	bne.n	80138ce <udp_send+0x3e>
 80138ba:	4b0b      	ldr	r3, [pc, #44]	; (80138e8 <udp_send+0x58>)
 80138bc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80138c0:	490c      	ldr	r1, [pc, #48]	; (80138f4 <udp_send+0x64>)
 80138c2:	480b      	ldr	r0, [pc, #44]	; (80138f0 <udp_send+0x60>)
 80138c4:	f003 ffb8 	bl	8017838 <iprintf>
 80138c8:	f06f 030f 	mvn.w	r3, #15
 80138cc:	e008      	b.n	80138e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	1d1a      	adds	r2, r3, #4
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	8a9b      	ldrh	r3, [r3, #20]
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 f80d 	bl	80138f8 <udp_sendto>
 80138de:	4603      	mov	r3, r0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	0801a994 	.word	0x0801a994
 80138ec:	0801aa88 	.word	0x0801aa88
 80138f0:	0801a9e8 	.word	0x0801a9e8
 80138f4:	0801aaa0 	.word	0x0801aaa0

080138f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b088      	sub	sp, #32
 80138fc:	af02      	add	r7, sp, #8
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	60b9      	str	r1, [r7, #8]
 8013902:	607a      	str	r2, [r7, #4]
 8013904:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d109      	bne.n	8013920 <udp_sendto+0x28>
 801390c:	4b23      	ldr	r3, [pc, #140]	; (801399c <udp_sendto+0xa4>)
 801390e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013912:	4923      	ldr	r1, [pc, #140]	; (80139a0 <udp_sendto+0xa8>)
 8013914:	4823      	ldr	r0, [pc, #140]	; (80139a4 <udp_sendto+0xac>)
 8013916:	f003 ff8f 	bl	8017838 <iprintf>
 801391a:	f06f 030f 	mvn.w	r3, #15
 801391e:	e038      	b.n	8013992 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d109      	bne.n	801393a <udp_sendto+0x42>
 8013926:	4b1d      	ldr	r3, [pc, #116]	; (801399c <udp_sendto+0xa4>)
 8013928:	f240 2219 	movw	r2, #537	; 0x219
 801392c:	491e      	ldr	r1, [pc, #120]	; (80139a8 <udp_sendto+0xb0>)
 801392e:	481d      	ldr	r0, [pc, #116]	; (80139a4 <udp_sendto+0xac>)
 8013930:	f003 ff82 	bl	8017838 <iprintf>
 8013934:	f06f 030f 	mvn.w	r3, #15
 8013938:	e02b      	b.n	8013992 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d109      	bne.n	8013954 <udp_sendto+0x5c>
 8013940:	4b16      	ldr	r3, [pc, #88]	; (801399c <udp_sendto+0xa4>)
 8013942:	f240 221a 	movw	r2, #538	; 0x21a
 8013946:	4919      	ldr	r1, [pc, #100]	; (80139ac <udp_sendto+0xb4>)
 8013948:	4816      	ldr	r0, [pc, #88]	; (80139a4 <udp_sendto+0xac>)
 801394a:	f003 ff75 	bl	8017838 <iprintf>
 801394e:	f06f 030f 	mvn.w	r3, #15
 8013952:	e01e      	b.n	8013992 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	7a1b      	ldrb	r3, [r3, #8]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d006      	beq.n	801396a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	7a1b      	ldrb	r3, [r3, #8]
 8013960:	4618      	mov	r0, r3
 8013962:	f7f9 fc9d 	bl	800d2a0 <netif_get_by_index>
 8013966:	6178      	str	r0, [r7, #20]
 8013968:	e003      	b.n	8013972 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f001 fc1c 	bl	80151a8 <ip4_route>
 8013970:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d102      	bne.n	801397e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013978:	f06f 0303 	mvn.w	r3, #3
 801397c:	e009      	b.n	8013992 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801397e:	887a      	ldrh	r2, [r7, #2]
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	9300      	str	r3, [sp, #0]
 8013984:	4613      	mov	r3, r2
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	68b9      	ldr	r1, [r7, #8]
 801398a:	68f8      	ldr	r0, [r7, #12]
 801398c:	f000 f810 	bl	80139b0 <udp_sendto_if>
 8013990:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013992:	4618      	mov	r0, r3
 8013994:	3718      	adds	r7, #24
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	0801a994 	.word	0x0801a994
 80139a0:	0801aab8 	.word	0x0801aab8
 80139a4:	0801a9e8 	.word	0x0801a9e8
 80139a8:	0801aad0 	.word	0x0801aad0
 80139ac:	0801aaec 	.word	0x0801aaec

080139b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b088      	sub	sp, #32
 80139b4:	af02      	add	r7, sp, #8
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
 80139bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d109      	bne.n	80139d8 <udp_sendto_if+0x28>
 80139c4:	4b2e      	ldr	r3, [pc, #184]	; (8013a80 <udp_sendto_if+0xd0>)
 80139c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139ca:	492e      	ldr	r1, [pc, #184]	; (8013a84 <udp_sendto_if+0xd4>)
 80139cc:	482e      	ldr	r0, [pc, #184]	; (8013a88 <udp_sendto_if+0xd8>)
 80139ce:	f003 ff33 	bl	8017838 <iprintf>
 80139d2:	f06f 030f 	mvn.w	r3, #15
 80139d6:	e04f      	b.n	8013a78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d109      	bne.n	80139f2 <udp_sendto_if+0x42>
 80139de:	4b28      	ldr	r3, [pc, #160]	; (8013a80 <udp_sendto_if+0xd0>)
 80139e0:	f240 2281 	movw	r2, #641	; 0x281
 80139e4:	4929      	ldr	r1, [pc, #164]	; (8013a8c <udp_sendto_if+0xdc>)
 80139e6:	4828      	ldr	r0, [pc, #160]	; (8013a88 <udp_sendto_if+0xd8>)
 80139e8:	f003 ff26 	bl	8017838 <iprintf>
 80139ec:	f06f 030f 	mvn.w	r3, #15
 80139f0:	e042      	b.n	8013a78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d109      	bne.n	8013a0c <udp_sendto_if+0x5c>
 80139f8:	4b21      	ldr	r3, [pc, #132]	; (8013a80 <udp_sendto_if+0xd0>)
 80139fa:	f240 2282 	movw	r2, #642	; 0x282
 80139fe:	4924      	ldr	r1, [pc, #144]	; (8013a90 <udp_sendto_if+0xe0>)
 8013a00:	4821      	ldr	r0, [pc, #132]	; (8013a88 <udp_sendto_if+0xd8>)
 8013a02:	f003 ff19 	bl	8017838 <iprintf>
 8013a06:	f06f 030f 	mvn.w	r3, #15
 8013a0a:	e035      	b.n	8013a78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013a0c:	6a3b      	ldr	r3, [r7, #32]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d109      	bne.n	8013a26 <udp_sendto_if+0x76>
 8013a12:	4b1b      	ldr	r3, [pc, #108]	; (8013a80 <udp_sendto_if+0xd0>)
 8013a14:	f240 2283 	movw	r2, #643	; 0x283
 8013a18:	491e      	ldr	r1, [pc, #120]	; (8013a94 <udp_sendto_if+0xe4>)
 8013a1a:	481b      	ldr	r0, [pc, #108]	; (8013a88 <udp_sendto_if+0xd8>)
 8013a1c:	f003 ff0c 	bl	8017838 <iprintf>
 8013a20:	f06f 030f 	mvn.w	r3, #15
 8013a24:	e028      	b.n	8013a78 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d009      	beq.n	8013a40 <udp_sendto_if+0x90>
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d005      	beq.n	8013a40 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a3c:	2be0      	cmp	r3, #224	; 0xe0
 8013a3e:	d103      	bne.n	8013a48 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013a40:	6a3b      	ldr	r3, [r7, #32]
 8013a42:	3304      	adds	r3, #4
 8013a44:	617b      	str	r3, [r7, #20]
 8013a46:	e00b      	b.n	8013a60 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	6a3b      	ldr	r3, [r7, #32]
 8013a4e:	3304      	adds	r3, #4
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d002      	beq.n	8013a5c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013a56:	f06f 0303 	mvn.w	r3, #3
 8013a5a:	e00d      	b.n	8013a78 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013a60:	887a      	ldrh	r2, [r7, #2]
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	9301      	str	r3, [sp, #4]
 8013a66:	6a3b      	ldr	r3, [r7, #32]
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	68b9      	ldr	r1, [r7, #8]
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	f000 f811 	bl	8013a98 <udp_sendto_if_src>
 8013a76:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	0801a994 	.word	0x0801a994
 8013a84:	0801ab08 	.word	0x0801ab08
 8013a88:	0801a9e8 	.word	0x0801a9e8
 8013a8c:	0801ab24 	.word	0x0801ab24
 8013a90:	0801ab40 	.word	0x0801ab40
 8013a94:	0801ab60 	.word	0x0801ab60

08013a98 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b08c      	sub	sp, #48	; 0x30
 8013a9c:	af04      	add	r7, sp, #16
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
 8013aa4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d109      	bne.n	8013ac0 <udp_sendto_if_src+0x28>
 8013aac:	4b65      	ldr	r3, [pc, #404]	; (8013c44 <udp_sendto_if_src+0x1ac>)
 8013aae:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013ab2:	4965      	ldr	r1, [pc, #404]	; (8013c48 <udp_sendto_if_src+0x1b0>)
 8013ab4:	4865      	ldr	r0, [pc, #404]	; (8013c4c <udp_sendto_if_src+0x1b4>)
 8013ab6:	f003 febf 	bl	8017838 <iprintf>
 8013aba:	f06f 030f 	mvn.w	r3, #15
 8013abe:	e0bc      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d109      	bne.n	8013ada <udp_sendto_if_src+0x42>
 8013ac6:	4b5f      	ldr	r3, [pc, #380]	; (8013c44 <udp_sendto_if_src+0x1ac>)
 8013ac8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013acc:	4960      	ldr	r1, [pc, #384]	; (8013c50 <udp_sendto_if_src+0x1b8>)
 8013ace:	485f      	ldr	r0, [pc, #380]	; (8013c4c <udp_sendto_if_src+0x1b4>)
 8013ad0:	f003 feb2 	bl	8017838 <iprintf>
 8013ad4:	f06f 030f 	mvn.w	r3, #15
 8013ad8:	e0af      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d109      	bne.n	8013af4 <udp_sendto_if_src+0x5c>
 8013ae0:	4b58      	ldr	r3, [pc, #352]	; (8013c44 <udp_sendto_if_src+0x1ac>)
 8013ae2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013ae6:	495b      	ldr	r1, [pc, #364]	; (8013c54 <udp_sendto_if_src+0x1bc>)
 8013ae8:	4858      	ldr	r0, [pc, #352]	; (8013c4c <udp_sendto_if_src+0x1b4>)
 8013aea:	f003 fea5 	bl	8017838 <iprintf>
 8013aee:	f06f 030f 	mvn.w	r3, #15
 8013af2:	e0a2      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d109      	bne.n	8013b0e <udp_sendto_if_src+0x76>
 8013afa:	4b52      	ldr	r3, [pc, #328]	; (8013c44 <udp_sendto_if_src+0x1ac>)
 8013afc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013b00:	4955      	ldr	r1, [pc, #340]	; (8013c58 <udp_sendto_if_src+0x1c0>)
 8013b02:	4852      	ldr	r0, [pc, #328]	; (8013c4c <udp_sendto_if_src+0x1b4>)
 8013b04:	f003 fe98 	bl	8017838 <iprintf>
 8013b08:	f06f 030f 	mvn.w	r3, #15
 8013b0c:	e095      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d109      	bne.n	8013b28 <udp_sendto_if_src+0x90>
 8013b14:	4b4b      	ldr	r3, [pc, #300]	; (8013c44 <udp_sendto_if_src+0x1ac>)
 8013b16:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013b1a:	4950      	ldr	r1, [pc, #320]	; (8013c5c <udp_sendto_if_src+0x1c4>)
 8013b1c:	484b      	ldr	r0, [pc, #300]	; (8013c4c <udp_sendto_if_src+0x1b4>)
 8013b1e:	f003 fe8b 	bl	8017838 <iprintf>
 8013b22:	f06f 030f 	mvn.w	r3, #15
 8013b26:	e088      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	8a5b      	ldrh	r3, [r3, #18]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10f      	bne.n	8013b50 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	8a5b      	ldrh	r3, [r3, #18]
 8013b36:	461a      	mov	r2, r3
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f000 f893 	bl	8013c64 <udp_bind>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013b42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013b4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013b4e:	e074      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	891b      	ldrh	r3, [r3, #8]
 8013b54:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013b58:	4293      	cmp	r3, r2
 8013b5a:	d902      	bls.n	8013b62 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b60:	e06b      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013b62:	2108      	movs	r1, #8
 8013b64:	68b8      	ldr	r0, [r7, #8]
 8013b66:	f7f9 fe65 	bl	800d834 <pbuf_add_header>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d015      	beq.n	8013b9c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013b70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b74:	2108      	movs	r1, #8
 8013b76:	2022      	movs	r0, #34	; 0x22
 8013b78:	f7f9 fc0e 	bl	800d398 <pbuf_alloc>
 8013b7c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d102      	bne.n	8013b8a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013b84:	f04f 33ff 	mov.w	r3, #4294967295
 8013b88:	e057      	b.n	8013c3a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	891b      	ldrh	r3, [r3, #8]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d006      	beq.n	8013ba0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013b92:	68b9      	ldr	r1, [r7, #8]
 8013b94:	69f8      	ldr	r0, [r7, #28]
 8013b96:	f7f9 fffb 	bl	800db90 <pbuf_chain>
 8013b9a:	e001      	b.n	8013ba0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	895b      	ldrh	r3, [r3, #10]
 8013ba4:	2b07      	cmp	r3, #7
 8013ba6:	d806      	bhi.n	8013bb6 <udp_sendto_if_src+0x11e>
 8013ba8:	4b26      	ldr	r3, [pc, #152]	; (8013c44 <udp_sendto_if_src+0x1ac>)
 8013baa:	f240 320d 	movw	r2, #781	; 0x30d
 8013bae:	492c      	ldr	r1, [pc, #176]	; (8013c60 <udp_sendto_if_src+0x1c8>)
 8013bb0:	4826      	ldr	r0, [pc, #152]	; (8013c4c <udp_sendto_if_src+0x1b4>)
 8013bb2:	f003 fe41 	bl	8017838 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013bb6:	69fb      	ldr	r3, [r7, #28]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	8a5b      	ldrh	r3, [r3, #18]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7f8 fb6f 	bl	800c2a4 <lwip_htons>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	461a      	mov	r2, r3
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013bce:	887b      	ldrh	r3, [r7, #2]
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7f8 fb67 	bl	800c2a4 <lwip_htons>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	461a      	mov	r2, r3
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	2200      	movs	r2, #0
 8013be2:	719a      	strb	r2, [r3, #6]
 8013be4:	2200      	movs	r2, #0
 8013be6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	891b      	ldrh	r3, [r3, #8]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7f8 fb59 	bl	800c2a4 <lwip_htons>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013bfa:	2311      	movs	r3, #17
 8013bfc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	7adb      	ldrb	r3, [r3, #11]
 8013c02:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	7a9b      	ldrb	r3, [r3, #10]
 8013c08:	7cb9      	ldrb	r1, [r7, #18]
 8013c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c0c:	9202      	str	r2, [sp, #8]
 8013c0e:	7cfa      	ldrb	r2, [r7, #19]
 8013c10:	9201      	str	r2, [sp, #4]
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	460b      	mov	r3, r1
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c1a:	69f8      	ldr	r0, [r7, #28]
 8013c1c:	f001 fcac 	bl	8015578 <ip4_output_if_src>
 8013c20:	4603      	mov	r3, r0
 8013c22:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013c24:	69fa      	ldr	r2, [r7, #28]
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d004      	beq.n	8013c36 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013c2c:	69f8      	ldr	r0, [r7, #28]
 8013c2e:	f7f9 fe97 	bl	800d960 <pbuf_free>
    q = NULL;
 8013c32:	2300      	movs	r3, #0
 8013c34:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013c36:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3720      	adds	r7, #32
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	0801a994 	.word	0x0801a994
 8013c48:	0801ab80 	.word	0x0801ab80
 8013c4c:	0801a9e8 	.word	0x0801a9e8
 8013c50:	0801aba0 	.word	0x0801aba0
 8013c54:	0801abc0 	.word	0x0801abc0
 8013c58:	0801abe4 	.word	0x0801abe4
 8013c5c:	0801ac08 	.word	0x0801ac08
 8013c60:	0801ac2c 	.word	0x0801ac2c

08013c64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b086      	sub	sp, #24
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	60f8      	str	r0, [r7, #12]
 8013c6c:	60b9      	str	r1, [r7, #8]
 8013c6e:	4613      	mov	r3, r2
 8013c70:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d101      	bne.n	8013c7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013c78:	4b39      	ldr	r3, [pc, #228]	; (8013d60 <udp_bind+0xfc>)
 8013c7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d109      	bne.n	8013c96 <udp_bind+0x32>
 8013c82:	4b38      	ldr	r3, [pc, #224]	; (8013d64 <udp_bind+0x100>)
 8013c84:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013c88:	4937      	ldr	r1, [pc, #220]	; (8013d68 <udp_bind+0x104>)
 8013c8a:	4838      	ldr	r0, [pc, #224]	; (8013d6c <udp_bind+0x108>)
 8013c8c:	f003 fdd4 	bl	8017838 <iprintf>
 8013c90:	f06f 030f 	mvn.w	r3, #15
 8013c94:	e060      	b.n	8013d58 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c9a:	4b35      	ldr	r3, [pc, #212]	; (8013d70 <udp_bind+0x10c>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	617b      	str	r3, [r7, #20]
 8013ca0:	e009      	b.n	8013cb6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d102      	bne.n	8013cb0 <udp_bind+0x4c>
      rebind = 1;
 8013caa:	2301      	movs	r3, #1
 8013cac:	74fb      	strb	r3, [r7, #19]
      break;
 8013cae:	e005      	b.n	8013cbc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	617b      	str	r3, [r7, #20]
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1f2      	bne.n	8013ca2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013cbc:	88fb      	ldrh	r3, [r7, #6]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d109      	bne.n	8013cd6 <udp_bind+0x72>
    port = udp_new_port();
 8013cc2:	f7ff fc35 	bl	8013530 <udp_new_port>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013cca:	88fb      	ldrh	r3, [r7, #6]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d12c      	bne.n	8013d2a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013cd0:	f06f 0307 	mvn.w	r3, #7
 8013cd4:	e040      	b.n	8013d58 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cd6:	4b26      	ldr	r3, [pc, #152]	; (8013d70 <udp_bind+0x10c>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	617b      	str	r3, [r7, #20]
 8013cdc:	e022      	b.n	8013d24 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013cde:	68fa      	ldr	r2, [r7, #12]
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d01b      	beq.n	8013d1e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	8a5b      	ldrh	r3, [r3, #18]
 8013cea:	88fa      	ldrh	r2, [r7, #6]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d116      	bne.n	8013d1e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d00d      	beq.n	8013d18 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d00a      	beq.n	8013d18 <udp_bind+0xb4>
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d006      	beq.n	8013d18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d003      	beq.n	8013d18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d102      	bne.n	8013d1e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013d18:	f06f 0307 	mvn.w	r3, #7
 8013d1c:	e01c      	b.n	8013d58 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	68db      	ldr	r3, [r3, #12]
 8013d22:	617b      	str	r3, [r7, #20]
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d1d9      	bne.n	8013cde <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d002      	beq.n	8013d36 <udp_bind+0xd2>
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	e000      	b.n	8013d38 <udp_bind+0xd4>
 8013d36:	2300      	movs	r3, #0
 8013d38:	68fa      	ldr	r2, [r7, #12]
 8013d3a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	88fa      	ldrh	r2, [r7, #6]
 8013d40:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013d42:	7cfb      	ldrb	r3, [r7, #19]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d106      	bne.n	8013d56 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013d48:	4b09      	ldr	r3, [pc, #36]	; (8013d70 <udp_bind+0x10c>)
 8013d4a:	681a      	ldr	r2, [r3, #0]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013d50:	4a07      	ldr	r2, [pc, #28]	; (8013d70 <udp_bind+0x10c>)
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013d56:	2300      	movs	r3, #0
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3718      	adds	r7, #24
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	0801b68c 	.word	0x0801b68c
 8013d64:	0801a994 	.word	0x0801a994
 8013d68:	0801ac5c 	.word	0x0801ac5c
 8013d6c:	0801a9e8 	.word	0x0801a9e8
 8013d70:	20008e58 	.word	0x20008e58

08013d74 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b086      	sub	sp, #24
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	4613      	mov	r3, r2
 8013d80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d109      	bne.n	8013d9c <udp_connect+0x28>
 8013d88:	4b2c      	ldr	r3, [pc, #176]	; (8013e3c <udp_connect+0xc8>)
 8013d8a:	f240 4235 	movw	r2, #1077	; 0x435
 8013d8e:	492c      	ldr	r1, [pc, #176]	; (8013e40 <udp_connect+0xcc>)
 8013d90:	482c      	ldr	r0, [pc, #176]	; (8013e44 <udp_connect+0xd0>)
 8013d92:	f003 fd51 	bl	8017838 <iprintf>
 8013d96:	f06f 030f 	mvn.w	r3, #15
 8013d9a:	e04b      	b.n	8013e34 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d109      	bne.n	8013db6 <udp_connect+0x42>
 8013da2:	4b26      	ldr	r3, [pc, #152]	; (8013e3c <udp_connect+0xc8>)
 8013da4:	f240 4236 	movw	r2, #1078	; 0x436
 8013da8:	4927      	ldr	r1, [pc, #156]	; (8013e48 <udp_connect+0xd4>)
 8013daa:	4826      	ldr	r0, [pc, #152]	; (8013e44 <udp_connect+0xd0>)
 8013dac:	f003 fd44 	bl	8017838 <iprintf>
 8013db0:	f06f 030f 	mvn.w	r3, #15
 8013db4:	e03e      	b.n	8013e34 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	8a5b      	ldrh	r3, [r3, #18]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d10f      	bne.n	8013dde <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013dbe:	68f9      	ldr	r1, [r7, #12]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	8a5b      	ldrh	r3, [r3, #18]
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	68f8      	ldr	r0, [r7, #12]
 8013dc8:	f7ff ff4c 	bl	8013c64 <udp_bind>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013dd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d002      	beq.n	8013dde <udp_connect+0x6a>
      return err;
 8013dd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ddc:	e02a      	b.n	8013e34 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d002      	beq.n	8013dea <udp_connect+0x76>
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	e000      	b.n	8013dec <udp_connect+0x78>
 8013dea:	2300      	movs	r3, #0
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	88fa      	ldrh	r2, [r7, #6]
 8013df4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	7c1b      	ldrb	r3, [r3, #16]
 8013dfa:	f043 0304 	orr.w	r3, r3, #4
 8013dfe:	b2da      	uxtb	r2, r3
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e04:	4b11      	ldr	r3, [pc, #68]	; (8013e4c <udp_connect+0xd8>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	617b      	str	r3, [r7, #20]
 8013e0a:	e008      	b.n	8013e1e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d101      	bne.n	8013e18 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013e14:	2300      	movs	r3, #0
 8013e16:	e00d      	b.n	8013e34 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	617b      	str	r3, [r7, #20]
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d1f3      	bne.n	8013e0c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013e24:	4b09      	ldr	r3, [pc, #36]	; (8013e4c <udp_connect+0xd8>)
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013e2c:	4a07      	ldr	r2, [pc, #28]	; (8013e4c <udp_connect+0xd8>)
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013e32:	2300      	movs	r3, #0
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3718      	adds	r7, #24
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}
 8013e3c:	0801a994 	.word	0x0801a994
 8013e40:	0801ac74 	.word	0x0801ac74
 8013e44:	0801a9e8 	.word	0x0801a9e8
 8013e48:	0801ac90 	.word	0x0801ac90
 8013e4c:	20008e58 	.word	0x20008e58

08013e50 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d107      	bne.n	8013e6e <udp_disconnect+0x1e>
 8013e5e:	4b0d      	ldr	r3, [pc, #52]	; (8013e94 <udp_disconnect+0x44>)
 8013e60:	f240 426a 	movw	r2, #1130	; 0x46a
 8013e64:	490c      	ldr	r1, [pc, #48]	; (8013e98 <udp_disconnect+0x48>)
 8013e66:	480d      	ldr	r0, [pc, #52]	; (8013e9c <udp_disconnect+0x4c>)
 8013e68:	f003 fce6 	bl	8017838 <iprintf>
 8013e6c:	e00f      	b.n	8013e8e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2200      	movs	r2, #0
 8013e72:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2200      	movs	r2, #0
 8013e78:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	7c1b      	ldrb	r3, [r3, #16]
 8013e84:	f023 0304 	bic.w	r3, r3, #4
 8013e88:	b2da      	uxtb	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	741a      	strb	r2, [r3, #16]
}
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	0801a994 	.word	0x0801a994
 8013e98:	0801acac 	.word	0x0801acac
 8013e9c:	0801a9e8 	.word	0x0801a9e8

08013ea0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d107      	bne.n	8013ec2 <udp_recv+0x22>
 8013eb2:	4b08      	ldr	r3, [pc, #32]	; (8013ed4 <udp_recv+0x34>)
 8013eb4:	f240 428a 	movw	r2, #1162	; 0x48a
 8013eb8:	4907      	ldr	r1, [pc, #28]	; (8013ed8 <udp_recv+0x38>)
 8013eba:	4808      	ldr	r0, [pc, #32]	; (8013edc <udp_recv+0x3c>)
 8013ebc:	f003 fcbc 	bl	8017838 <iprintf>
 8013ec0:	e005      	b.n	8013ece <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	68ba      	ldr	r2, [r7, #8]
 8013ec6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	61da      	str	r2, [r3, #28]
}
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	0801a994 	.word	0x0801a994
 8013ed8:	0801acc8 	.word	0x0801acc8
 8013edc:	0801a9e8 	.word	0x0801a9e8

08013ee0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d107      	bne.n	8013efe <udp_remove+0x1e>
 8013eee:	4b19      	ldr	r3, [pc, #100]	; (8013f54 <udp_remove+0x74>)
 8013ef0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013ef4:	4918      	ldr	r1, [pc, #96]	; (8013f58 <udp_remove+0x78>)
 8013ef6:	4819      	ldr	r0, [pc, #100]	; (8013f5c <udp_remove+0x7c>)
 8013ef8:	f003 fc9e 	bl	8017838 <iprintf>
 8013efc:	e026      	b.n	8013f4c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013efe:	4b18      	ldr	r3, [pc, #96]	; (8013f60 <udp_remove+0x80>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d105      	bne.n	8013f14 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013f08:	4b15      	ldr	r3, [pc, #84]	; (8013f60 <udp_remove+0x80>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	4a14      	ldr	r2, [pc, #80]	; (8013f60 <udp_remove+0x80>)
 8013f10:	6013      	str	r3, [r2, #0]
 8013f12:	e017      	b.n	8013f44 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013f14:	4b12      	ldr	r3, [pc, #72]	; (8013f60 <udp_remove+0x80>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	60fb      	str	r3, [r7, #12]
 8013f1a:	e010      	b.n	8013f3e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d009      	beq.n	8013f38 <udp_remove+0x58>
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d104      	bne.n	8013f38 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	68da      	ldr	r2, [r3, #12]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	60da      	str	r2, [r3, #12]
        break;
 8013f36:	e005      	b.n	8013f44 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	60fb      	str	r3, [r7, #12]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d1eb      	bne.n	8013f1c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013f44:	6879      	ldr	r1, [r7, #4]
 8013f46:	2000      	movs	r0, #0
 8013f48:	f7f8 fe94 	bl	800cc74 <memp_free>
}
 8013f4c:	3710      	adds	r7, #16
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	0801a994 	.word	0x0801a994
 8013f58:	0801ace0 	.word	0x0801ace0
 8013f5c:	0801a9e8 	.word	0x0801a9e8
 8013f60:	20008e58 	.word	0x20008e58

08013f64 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013f6a:	2000      	movs	r0, #0
 8013f6c:	f7f8 fe12 	bl	800cb94 <memp_malloc>
 8013f70:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d007      	beq.n	8013f88 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013f78:	2220      	movs	r2, #32
 8013f7a:	2100      	movs	r1, #0
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f003 fc53 	bl	8017828 <memset>
    pcb->ttl = UDP_TTL;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	22ff      	movs	r2, #255	; 0xff
 8013f86:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013f88:	687b      	ldr	r3, [r7, #4]
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3708      	adds	r7, #8
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
	...

08013f94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b085      	sub	sp, #20
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d01e      	beq.n	8013fe2 <udp_netif_ip_addr_changed+0x4e>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d01a      	beq.n	8013fe2 <udp_netif_ip_addr_changed+0x4e>
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d017      	beq.n	8013fe2 <udp_netif_ip_addr_changed+0x4e>
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d013      	beq.n	8013fe2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013fba:	4b0d      	ldr	r3, [pc, #52]	; (8013ff0 <udp_netif_ip_addr_changed+0x5c>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	60fb      	str	r3, [r7, #12]
 8013fc0:	e00c      	b.n	8013fdc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	681a      	ldr	r2, [r3, #0]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d103      	bne.n	8013fd6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	60fb      	str	r3, [r7, #12]
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d1ef      	bne.n	8013fc2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013fe2:	bf00      	nop
 8013fe4:	3714      	adds	r7, #20
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	20008e58 	.word	0x20008e58

08013ff4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013ffc:	4915      	ldr	r1, [pc, #84]	; (8014054 <etharp_free_entry+0x60>)
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	4613      	mov	r3, r2
 8014002:	005b      	lsls	r3, r3, #1
 8014004:	4413      	add	r3, r2
 8014006:	00db      	lsls	r3, r3, #3
 8014008:	440b      	add	r3, r1
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d013      	beq.n	8014038 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014010:	4910      	ldr	r1, [pc, #64]	; (8014054 <etharp_free_entry+0x60>)
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	005b      	lsls	r3, r3, #1
 8014018:	4413      	add	r3, r2
 801401a:	00db      	lsls	r3, r3, #3
 801401c:	440b      	add	r3, r1
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	4618      	mov	r0, r3
 8014022:	f7f9 fc9d 	bl	800d960 <pbuf_free>
    arp_table[i].q = NULL;
 8014026:	490b      	ldr	r1, [pc, #44]	; (8014054 <etharp_free_entry+0x60>)
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	4613      	mov	r3, r2
 801402c:	005b      	lsls	r3, r3, #1
 801402e:	4413      	add	r3, r2
 8014030:	00db      	lsls	r3, r3, #3
 8014032:	440b      	add	r3, r1
 8014034:	2200      	movs	r2, #0
 8014036:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014038:	4906      	ldr	r1, [pc, #24]	; (8014054 <etharp_free_entry+0x60>)
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	4613      	mov	r3, r2
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	4413      	add	r3, r2
 8014042:	00db      	lsls	r3, r3, #3
 8014044:	440b      	add	r3, r1
 8014046:	3314      	adds	r3, #20
 8014048:	2200      	movs	r2, #0
 801404a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801404c:	bf00      	nop
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}
 8014054:	20008e5c 	.word	0x20008e5c

08014058 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801405e:	2300      	movs	r3, #0
 8014060:	607b      	str	r3, [r7, #4]
 8014062:	e096      	b.n	8014192 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014064:	494f      	ldr	r1, [pc, #316]	; (80141a4 <etharp_tmr+0x14c>)
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	4613      	mov	r3, r2
 801406a:	005b      	lsls	r3, r3, #1
 801406c:	4413      	add	r3, r2
 801406e:	00db      	lsls	r3, r3, #3
 8014070:	440b      	add	r3, r1
 8014072:	3314      	adds	r3, #20
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014078:	78fb      	ldrb	r3, [r7, #3]
 801407a:	2b00      	cmp	r3, #0
 801407c:	f000 8086 	beq.w	801418c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014080:	4948      	ldr	r1, [pc, #288]	; (80141a4 <etharp_tmr+0x14c>)
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	4613      	mov	r3, r2
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	4413      	add	r3, r2
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	440b      	add	r3, r1
 801408e:	3312      	adds	r3, #18
 8014090:	881b      	ldrh	r3, [r3, #0]
 8014092:	3301      	adds	r3, #1
 8014094:	b298      	uxth	r0, r3
 8014096:	4943      	ldr	r1, [pc, #268]	; (80141a4 <etharp_tmr+0x14c>)
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	4613      	mov	r3, r2
 801409c:	005b      	lsls	r3, r3, #1
 801409e:	4413      	add	r3, r2
 80140a0:	00db      	lsls	r3, r3, #3
 80140a2:	440b      	add	r3, r1
 80140a4:	3312      	adds	r3, #18
 80140a6:	4602      	mov	r2, r0
 80140a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140aa:	493e      	ldr	r1, [pc, #248]	; (80141a4 <etharp_tmr+0x14c>)
 80140ac:	687a      	ldr	r2, [r7, #4]
 80140ae:	4613      	mov	r3, r2
 80140b0:	005b      	lsls	r3, r3, #1
 80140b2:	4413      	add	r3, r2
 80140b4:	00db      	lsls	r3, r3, #3
 80140b6:	440b      	add	r3, r1
 80140b8:	3312      	adds	r3, #18
 80140ba:	881b      	ldrh	r3, [r3, #0]
 80140bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80140c0:	d215      	bcs.n	80140ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80140c2:	4938      	ldr	r1, [pc, #224]	; (80141a4 <etharp_tmr+0x14c>)
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	4613      	mov	r3, r2
 80140c8:	005b      	lsls	r3, r3, #1
 80140ca:	4413      	add	r3, r2
 80140cc:	00db      	lsls	r3, r3, #3
 80140ce:	440b      	add	r3, r1
 80140d0:	3314      	adds	r3, #20
 80140d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d10e      	bne.n	80140f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80140d8:	4932      	ldr	r1, [pc, #200]	; (80141a4 <etharp_tmr+0x14c>)
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	4613      	mov	r3, r2
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	440b      	add	r3, r1
 80140e6:	3312      	adds	r3, #18
 80140e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80140ea:	2b04      	cmp	r3, #4
 80140ec:	d903      	bls.n	80140f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7ff ff80 	bl	8013ff4 <etharp_free_entry>
 80140f4:	e04a      	b.n	801418c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80140f6:	492b      	ldr	r1, [pc, #172]	; (80141a4 <etharp_tmr+0x14c>)
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	4613      	mov	r3, r2
 80140fc:	005b      	lsls	r3, r3, #1
 80140fe:	4413      	add	r3, r2
 8014100:	00db      	lsls	r3, r3, #3
 8014102:	440b      	add	r3, r1
 8014104:	3314      	adds	r3, #20
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b03      	cmp	r3, #3
 801410a:	d10a      	bne.n	8014122 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801410c:	4925      	ldr	r1, [pc, #148]	; (80141a4 <etharp_tmr+0x14c>)
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	4613      	mov	r3, r2
 8014112:	005b      	lsls	r3, r3, #1
 8014114:	4413      	add	r3, r2
 8014116:	00db      	lsls	r3, r3, #3
 8014118:	440b      	add	r3, r1
 801411a:	3314      	adds	r3, #20
 801411c:	2204      	movs	r2, #4
 801411e:	701a      	strb	r2, [r3, #0]
 8014120:	e034      	b.n	801418c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014122:	4920      	ldr	r1, [pc, #128]	; (80141a4 <etharp_tmr+0x14c>)
 8014124:	687a      	ldr	r2, [r7, #4]
 8014126:	4613      	mov	r3, r2
 8014128:	005b      	lsls	r3, r3, #1
 801412a:	4413      	add	r3, r2
 801412c:	00db      	lsls	r3, r3, #3
 801412e:	440b      	add	r3, r1
 8014130:	3314      	adds	r3, #20
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	2b04      	cmp	r3, #4
 8014136:	d10a      	bne.n	801414e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014138:	491a      	ldr	r1, [pc, #104]	; (80141a4 <etharp_tmr+0x14c>)
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	4613      	mov	r3, r2
 801413e:	005b      	lsls	r3, r3, #1
 8014140:	4413      	add	r3, r2
 8014142:	00db      	lsls	r3, r3, #3
 8014144:	440b      	add	r3, r1
 8014146:	3314      	adds	r3, #20
 8014148:	2202      	movs	r2, #2
 801414a:	701a      	strb	r2, [r3, #0]
 801414c:	e01e      	b.n	801418c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801414e:	4915      	ldr	r1, [pc, #84]	; (80141a4 <etharp_tmr+0x14c>)
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	4613      	mov	r3, r2
 8014154:	005b      	lsls	r3, r3, #1
 8014156:	4413      	add	r3, r2
 8014158:	00db      	lsls	r3, r3, #3
 801415a:	440b      	add	r3, r1
 801415c:	3314      	adds	r3, #20
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	2b01      	cmp	r3, #1
 8014162:	d113      	bne.n	801418c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014164:	490f      	ldr	r1, [pc, #60]	; (80141a4 <etharp_tmr+0x14c>)
 8014166:	687a      	ldr	r2, [r7, #4]
 8014168:	4613      	mov	r3, r2
 801416a:	005b      	lsls	r3, r3, #1
 801416c:	4413      	add	r3, r2
 801416e:	00db      	lsls	r3, r3, #3
 8014170:	440b      	add	r3, r1
 8014172:	3308      	adds	r3, #8
 8014174:	6818      	ldr	r0, [r3, #0]
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	4613      	mov	r3, r2
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4413      	add	r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	4a08      	ldr	r2, [pc, #32]	; (80141a4 <etharp_tmr+0x14c>)
 8014182:	4413      	add	r3, r2
 8014184:	3304      	adds	r3, #4
 8014186:	4619      	mov	r1, r3
 8014188:	f000 fe6e 	bl	8014e68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	3301      	adds	r3, #1
 8014190:	607b      	str	r3, [r7, #4]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2b09      	cmp	r3, #9
 8014196:	f77f af65 	ble.w	8014064 <etharp_tmr+0xc>
      }
    }
  }
}
 801419a:	bf00      	nop
 801419c:	bf00      	nop
 801419e:	3708      	adds	r7, #8
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	20008e5c 	.word	0x20008e5c

080141a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b08a      	sub	sp, #40	; 0x28
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	460b      	mov	r3, r1
 80141b2:	607a      	str	r2, [r7, #4]
 80141b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80141b6:	230a      	movs	r3, #10
 80141b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80141ba:	230a      	movs	r3, #10
 80141bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80141be:	230a      	movs	r3, #10
 80141c0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80141c2:	2300      	movs	r3, #0
 80141c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80141c6:	230a      	movs	r3, #10
 80141c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80141ca:	2300      	movs	r3, #0
 80141cc:	83bb      	strh	r3, [r7, #28]
 80141ce:	2300      	movs	r3, #0
 80141d0:	837b      	strh	r3, [r7, #26]
 80141d2:	2300      	movs	r3, #0
 80141d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141d6:	2300      	movs	r3, #0
 80141d8:	843b      	strh	r3, [r7, #32]
 80141da:	e0ae      	b.n	801433a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80141dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141e0:	49a6      	ldr	r1, [pc, #664]	; (801447c <etharp_find_entry+0x2d4>)
 80141e2:	4613      	mov	r3, r2
 80141e4:	005b      	lsls	r3, r3, #1
 80141e6:	4413      	add	r3, r2
 80141e8:	00db      	lsls	r3, r3, #3
 80141ea:	440b      	add	r3, r1
 80141ec:	3314      	adds	r3, #20
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80141f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141f6:	2b0a      	cmp	r3, #10
 80141f8:	d105      	bne.n	8014206 <etharp_find_entry+0x5e>
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d102      	bne.n	8014206 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014200:	8c3b      	ldrh	r3, [r7, #32]
 8014202:	847b      	strh	r3, [r7, #34]	; 0x22
 8014204:	e095      	b.n	8014332 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014206:	7dfb      	ldrb	r3, [r7, #23]
 8014208:	2b00      	cmp	r3, #0
 801420a:	f000 8092 	beq.w	8014332 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801420e:	7dfb      	ldrb	r3, [r7, #23]
 8014210:	2b01      	cmp	r3, #1
 8014212:	d009      	beq.n	8014228 <etharp_find_entry+0x80>
 8014214:	7dfb      	ldrb	r3, [r7, #23]
 8014216:	2b01      	cmp	r3, #1
 8014218:	d806      	bhi.n	8014228 <etharp_find_entry+0x80>
 801421a:	4b99      	ldr	r3, [pc, #612]	; (8014480 <etharp_find_entry+0x2d8>)
 801421c:	f240 1223 	movw	r2, #291	; 0x123
 8014220:	4998      	ldr	r1, [pc, #608]	; (8014484 <etharp_find_entry+0x2dc>)
 8014222:	4899      	ldr	r0, [pc, #612]	; (8014488 <etharp_find_entry+0x2e0>)
 8014224:	f003 fb08 	bl	8017838 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d020      	beq.n	8014270 <etharp_find_entry+0xc8>
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6819      	ldr	r1, [r3, #0]
 8014232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014236:	4891      	ldr	r0, [pc, #580]	; (801447c <etharp_find_entry+0x2d4>)
 8014238:	4613      	mov	r3, r2
 801423a:	005b      	lsls	r3, r3, #1
 801423c:	4413      	add	r3, r2
 801423e:	00db      	lsls	r3, r3, #3
 8014240:	4403      	add	r3, r0
 8014242:	3304      	adds	r3, #4
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4299      	cmp	r1, r3
 8014248:	d112      	bne.n	8014270 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00c      	beq.n	801426a <etharp_find_entry+0xc2>
 8014250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014254:	4989      	ldr	r1, [pc, #548]	; (801447c <etharp_find_entry+0x2d4>)
 8014256:	4613      	mov	r3, r2
 8014258:	005b      	lsls	r3, r3, #1
 801425a:	4413      	add	r3, r2
 801425c:	00db      	lsls	r3, r3, #3
 801425e:	440b      	add	r3, r1
 8014260:	3308      	adds	r3, #8
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	429a      	cmp	r2, r3
 8014268:	d102      	bne.n	8014270 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801426a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801426e:	e100      	b.n	8014472 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014270:	7dfb      	ldrb	r3, [r7, #23]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d140      	bne.n	80142f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427a:	4980      	ldr	r1, [pc, #512]	; (801447c <etharp_find_entry+0x2d4>)
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d01a      	beq.n	80142c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801428c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014290:	497a      	ldr	r1, [pc, #488]	; (801447c <etharp_find_entry+0x2d4>)
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3312      	adds	r3, #18
 801429e:	881b      	ldrh	r3, [r3, #0]
 80142a0:	8bba      	ldrh	r2, [r7, #28]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d845      	bhi.n	8014332 <etharp_find_entry+0x18a>
            old_queue = i;
 80142a6:	8c3b      	ldrh	r3, [r7, #32]
 80142a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80142aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ae:	4973      	ldr	r1, [pc, #460]	; (801447c <etharp_find_entry+0x2d4>)
 80142b0:	4613      	mov	r3, r2
 80142b2:	005b      	lsls	r3, r3, #1
 80142b4:	4413      	add	r3, r2
 80142b6:	00db      	lsls	r3, r3, #3
 80142b8:	440b      	add	r3, r1
 80142ba:	3312      	adds	r3, #18
 80142bc:	881b      	ldrh	r3, [r3, #0]
 80142be:	83bb      	strh	r3, [r7, #28]
 80142c0:	e037      	b.n	8014332 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80142c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142c6:	496d      	ldr	r1, [pc, #436]	; (801447c <etharp_find_entry+0x2d4>)
 80142c8:	4613      	mov	r3, r2
 80142ca:	005b      	lsls	r3, r3, #1
 80142cc:	4413      	add	r3, r2
 80142ce:	00db      	lsls	r3, r3, #3
 80142d0:	440b      	add	r3, r1
 80142d2:	3312      	adds	r3, #18
 80142d4:	881b      	ldrh	r3, [r3, #0]
 80142d6:	8b7a      	ldrh	r2, [r7, #26]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d82a      	bhi.n	8014332 <etharp_find_entry+0x18a>
            old_pending = i;
 80142dc:	8c3b      	ldrh	r3, [r7, #32]
 80142de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80142e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142e4:	4965      	ldr	r1, [pc, #404]	; (801447c <etharp_find_entry+0x2d4>)
 80142e6:	4613      	mov	r3, r2
 80142e8:	005b      	lsls	r3, r3, #1
 80142ea:	4413      	add	r3, r2
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	440b      	add	r3, r1
 80142f0:	3312      	adds	r3, #18
 80142f2:	881b      	ldrh	r3, [r3, #0]
 80142f4:	837b      	strh	r3, [r7, #26]
 80142f6:	e01c      	b.n	8014332 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80142f8:	7dfb      	ldrb	r3, [r7, #23]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d919      	bls.n	8014332 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80142fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014302:	495e      	ldr	r1, [pc, #376]	; (801447c <etharp_find_entry+0x2d4>)
 8014304:	4613      	mov	r3, r2
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	4413      	add	r3, r2
 801430a:	00db      	lsls	r3, r3, #3
 801430c:	440b      	add	r3, r1
 801430e:	3312      	adds	r3, #18
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	8b3a      	ldrh	r2, [r7, #24]
 8014314:	429a      	cmp	r2, r3
 8014316:	d80c      	bhi.n	8014332 <etharp_find_entry+0x18a>
            old_stable = i;
 8014318:	8c3b      	ldrh	r3, [r7, #32]
 801431a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801431c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014320:	4956      	ldr	r1, [pc, #344]	; (801447c <etharp_find_entry+0x2d4>)
 8014322:	4613      	mov	r3, r2
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	4413      	add	r3, r2
 8014328:	00db      	lsls	r3, r3, #3
 801432a:	440b      	add	r3, r1
 801432c:	3312      	adds	r3, #18
 801432e:	881b      	ldrh	r3, [r3, #0]
 8014330:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014332:	8c3b      	ldrh	r3, [r7, #32]
 8014334:	3301      	adds	r3, #1
 8014336:	b29b      	uxth	r3, r3
 8014338:	843b      	strh	r3, [r7, #32]
 801433a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801433e:	2b09      	cmp	r3, #9
 8014340:	f77f af4c 	ble.w	80141dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014344:	7afb      	ldrb	r3, [r7, #11]
 8014346:	f003 0302 	and.w	r3, r3, #2
 801434a:	2b00      	cmp	r3, #0
 801434c:	d108      	bne.n	8014360 <etharp_find_entry+0x1b8>
 801434e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014352:	2b0a      	cmp	r3, #10
 8014354:	d107      	bne.n	8014366 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014356:	7afb      	ldrb	r3, [r7, #11]
 8014358:	f003 0301 	and.w	r3, r3, #1
 801435c:	2b00      	cmp	r3, #0
 801435e:	d102      	bne.n	8014366 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014360:	f04f 33ff 	mov.w	r3, #4294967295
 8014364:	e085      	b.n	8014472 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014366:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801436a:	2b09      	cmp	r3, #9
 801436c:	dc02      	bgt.n	8014374 <etharp_find_entry+0x1cc>
    i = empty;
 801436e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014370:	843b      	strh	r3, [r7, #32]
 8014372:	e039      	b.n	80143e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014374:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014378:	2b09      	cmp	r3, #9
 801437a:	dc14      	bgt.n	80143a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801437c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801437e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014384:	493d      	ldr	r1, [pc, #244]	; (801447c <etharp_find_entry+0x2d4>)
 8014386:	4613      	mov	r3, r2
 8014388:	005b      	lsls	r3, r3, #1
 801438a:	4413      	add	r3, r2
 801438c:	00db      	lsls	r3, r3, #3
 801438e:	440b      	add	r3, r1
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d018      	beq.n	80143c8 <etharp_find_entry+0x220>
 8014396:	4b3a      	ldr	r3, [pc, #232]	; (8014480 <etharp_find_entry+0x2d8>)
 8014398:	f240 126d 	movw	r2, #365	; 0x16d
 801439c:	493b      	ldr	r1, [pc, #236]	; (801448c <etharp_find_entry+0x2e4>)
 801439e:	483a      	ldr	r0, [pc, #232]	; (8014488 <etharp_find_entry+0x2e0>)
 80143a0:	f003 fa4a 	bl	8017838 <iprintf>
 80143a4:	e010      	b.n	80143c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80143a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80143aa:	2b09      	cmp	r3, #9
 80143ac:	dc02      	bgt.n	80143b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80143ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143b0:	843b      	strh	r3, [r7, #32]
 80143b2:	e009      	b.n	80143c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80143b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80143b8:	2b09      	cmp	r3, #9
 80143ba:	dc02      	bgt.n	80143c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80143bc:	8bfb      	ldrh	r3, [r7, #30]
 80143be:	843b      	strh	r3, [r7, #32]
 80143c0:	e002      	b.n	80143c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80143c2:	f04f 33ff 	mov.w	r3, #4294967295
 80143c6:	e054      	b.n	8014472 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80143c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143cc:	2b09      	cmp	r3, #9
 80143ce:	dd06      	ble.n	80143de <etharp_find_entry+0x236>
 80143d0:	4b2b      	ldr	r3, [pc, #172]	; (8014480 <etharp_find_entry+0x2d8>)
 80143d2:	f240 127f 	movw	r2, #383	; 0x17f
 80143d6:	492e      	ldr	r1, [pc, #184]	; (8014490 <etharp_find_entry+0x2e8>)
 80143d8:	482b      	ldr	r0, [pc, #172]	; (8014488 <etharp_find_entry+0x2e0>)
 80143da:	f003 fa2d 	bl	8017838 <iprintf>
    etharp_free_entry(i);
 80143de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7ff fe06 	bl	8013ff4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80143e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143ec:	2b09      	cmp	r3, #9
 80143ee:	dd06      	ble.n	80143fe <etharp_find_entry+0x256>
 80143f0:	4b23      	ldr	r3, [pc, #140]	; (8014480 <etharp_find_entry+0x2d8>)
 80143f2:	f240 1283 	movw	r2, #387	; 0x183
 80143f6:	4926      	ldr	r1, [pc, #152]	; (8014490 <etharp_find_entry+0x2e8>)
 80143f8:	4823      	ldr	r0, [pc, #140]	; (8014488 <etharp_find_entry+0x2e0>)
 80143fa:	f003 fa1d 	bl	8017838 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80143fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014402:	491e      	ldr	r1, [pc, #120]	; (801447c <etharp_find_entry+0x2d4>)
 8014404:	4613      	mov	r3, r2
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	4413      	add	r3, r2
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	440b      	add	r3, r1
 801440e:	3314      	adds	r3, #20
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d006      	beq.n	8014424 <etharp_find_entry+0x27c>
 8014416:	4b1a      	ldr	r3, [pc, #104]	; (8014480 <etharp_find_entry+0x2d8>)
 8014418:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801441c:	491d      	ldr	r1, [pc, #116]	; (8014494 <etharp_find_entry+0x2ec>)
 801441e:	481a      	ldr	r0, [pc, #104]	; (8014488 <etharp_find_entry+0x2e0>)
 8014420:	f003 fa0a 	bl	8017838 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d00b      	beq.n	8014442 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801442a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	6819      	ldr	r1, [r3, #0]
 8014432:	4812      	ldr	r0, [pc, #72]	; (801447c <etharp_find_entry+0x2d4>)
 8014434:	4613      	mov	r3, r2
 8014436:	005b      	lsls	r3, r3, #1
 8014438:	4413      	add	r3, r2
 801443a:	00db      	lsls	r3, r3, #3
 801443c:	4403      	add	r3, r0
 801443e:	3304      	adds	r3, #4
 8014440:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014446:	490d      	ldr	r1, [pc, #52]	; (801447c <etharp_find_entry+0x2d4>)
 8014448:	4613      	mov	r3, r2
 801444a:	005b      	lsls	r3, r3, #1
 801444c:	4413      	add	r3, r2
 801444e:	00db      	lsls	r3, r3, #3
 8014450:	440b      	add	r3, r1
 8014452:	3312      	adds	r3, #18
 8014454:	2200      	movs	r2, #0
 8014456:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014458:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801445c:	4907      	ldr	r1, [pc, #28]	; (801447c <etharp_find_entry+0x2d4>)
 801445e:	4613      	mov	r3, r2
 8014460:	005b      	lsls	r3, r3, #1
 8014462:	4413      	add	r3, r2
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	440b      	add	r3, r1
 8014468:	3308      	adds	r3, #8
 801446a:	687a      	ldr	r2, [r7, #4]
 801446c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801446e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014472:	4618      	mov	r0, r3
 8014474:	3728      	adds	r7, #40	; 0x28
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	20008e5c 	.word	0x20008e5c
 8014480:	0801acf8 	.word	0x0801acf8
 8014484:	0801ad30 	.word	0x0801ad30
 8014488:	0801ad70 	.word	0x0801ad70
 801448c:	0801ad98 	.word	0x0801ad98
 8014490:	0801adb0 	.word	0x0801adb0
 8014494:	0801adc4 	.word	0x0801adc4

08014498 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af02      	add	r7, sp, #8
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
 80144a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80144ac:	2b06      	cmp	r3, #6
 80144ae:	d006      	beq.n	80144be <etharp_update_arp_entry+0x26>
 80144b0:	4b48      	ldr	r3, [pc, #288]	; (80145d4 <etharp_update_arp_entry+0x13c>)
 80144b2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80144b6:	4948      	ldr	r1, [pc, #288]	; (80145d8 <etharp_update_arp_entry+0x140>)
 80144b8:	4848      	ldr	r0, [pc, #288]	; (80145dc <etharp_update_arp_entry+0x144>)
 80144ba:	f003 f9bd 	bl	8017838 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d012      	beq.n	80144ea <etharp_update_arp_entry+0x52>
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d00e      	beq.n	80144ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	68f9      	ldr	r1, [r7, #12]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f001 f8fe 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 80144d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d105      	bne.n	80144ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80144e6:	2be0      	cmp	r3, #224	; 0xe0
 80144e8:	d102      	bne.n	80144f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80144ea:	f06f 030f 	mvn.w	r3, #15
 80144ee:	e06c      	b.n	80145ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80144f0:	78fb      	ldrb	r3, [r7, #3]
 80144f2:	68fa      	ldr	r2, [r7, #12]
 80144f4:	4619      	mov	r1, r3
 80144f6:	68b8      	ldr	r0, [r7, #8]
 80144f8:	f7ff fe56 	bl	80141a8 <etharp_find_entry>
 80144fc:	4603      	mov	r3, r0
 80144fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014500:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014504:	2b00      	cmp	r3, #0
 8014506:	da02      	bge.n	801450e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014508:	8afb      	ldrh	r3, [r7, #22]
 801450a:	b25b      	sxtb	r3, r3
 801450c:	e05d      	b.n	80145ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801450e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014512:	4933      	ldr	r1, [pc, #204]	; (80145e0 <etharp_update_arp_entry+0x148>)
 8014514:	4613      	mov	r3, r2
 8014516:	005b      	lsls	r3, r3, #1
 8014518:	4413      	add	r3, r2
 801451a:	00db      	lsls	r3, r3, #3
 801451c:	440b      	add	r3, r1
 801451e:	3314      	adds	r3, #20
 8014520:	2202      	movs	r2, #2
 8014522:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014524:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014528:	492d      	ldr	r1, [pc, #180]	; (80145e0 <etharp_update_arp_entry+0x148>)
 801452a:	4613      	mov	r3, r2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	4413      	add	r3, r2
 8014530:	00db      	lsls	r3, r3, #3
 8014532:	440b      	add	r3, r1
 8014534:	3308      	adds	r3, #8
 8014536:	68fa      	ldr	r2, [r7, #12]
 8014538:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801453a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801453e:	4613      	mov	r3, r2
 8014540:	005b      	lsls	r3, r3, #1
 8014542:	4413      	add	r3, r2
 8014544:	00db      	lsls	r3, r3, #3
 8014546:	3308      	adds	r3, #8
 8014548:	4a25      	ldr	r2, [pc, #148]	; (80145e0 <etharp_update_arp_entry+0x148>)
 801454a:	4413      	add	r3, r2
 801454c:	3304      	adds	r3, #4
 801454e:	2206      	movs	r2, #6
 8014550:	6879      	ldr	r1, [r7, #4]
 8014552:	4618      	mov	r0, r3
 8014554:	f003 f95a 	bl	801780c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014558:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801455c:	4920      	ldr	r1, [pc, #128]	; (80145e0 <etharp_update_arp_entry+0x148>)
 801455e:	4613      	mov	r3, r2
 8014560:	005b      	lsls	r3, r3, #1
 8014562:	4413      	add	r3, r2
 8014564:	00db      	lsls	r3, r3, #3
 8014566:	440b      	add	r3, r1
 8014568:	3312      	adds	r3, #18
 801456a:	2200      	movs	r2, #0
 801456c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801456e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014572:	491b      	ldr	r1, [pc, #108]	; (80145e0 <etharp_update_arp_entry+0x148>)
 8014574:	4613      	mov	r3, r2
 8014576:	005b      	lsls	r3, r3, #1
 8014578:	4413      	add	r3, r2
 801457a:	00db      	lsls	r3, r3, #3
 801457c:	440b      	add	r3, r1
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d021      	beq.n	80145c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014584:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014588:	4915      	ldr	r1, [pc, #84]	; (80145e0 <etharp_update_arp_entry+0x148>)
 801458a:	4613      	mov	r3, r2
 801458c:	005b      	lsls	r3, r3, #1
 801458e:	4413      	add	r3, r2
 8014590:	00db      	lsls	r3, r3, #3
 8014592:	440b      	add	r3, r1
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014598:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801459c:	4910      	ldr	r1, [pc, #64]	; (80145e0 <etharp_update_arp_entry+0x148>)
 801459e:	4613      	mov	r3, r2
 80145a0:	005b      	lsls	r3, r3, #1
 80145a2:	4413      	add	r3, r2
 80145a4:	00db      	lsls	r3, r3, #3
 80145a6:	440b      	add	r3, r1
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80145b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6939      	ldr	r1, [r7, #16]
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f002 f827 	bl	8016610 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80145c2:	6938      	ldr	r0, [r7, #16]
 80145c4:	f7f9 f9cc 	bl	800d960 <pbuf_free>
  }
  return ERR_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3718      	adds	r7, #24
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	0801acf8 	.word	0x0801acf8
 80145d8:	0801adf0 	.word	0x0801adf0
 80145dc:	0801ad70 	.word	0x0801ad70
 80145e0:	20008e5c 	.word	0x20008e5c

080145e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145ec:	2300      	movs	r3, #0
 80145ee:	60fb      	str	r3, [r7, #12]
 80145f0:	e01e      	b.n	8014630 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80145f2:	4913      	ldr	r1, [pc, #76]	; (8014640 <etharp_cleanup_netif+0x5c>)
 80145f4:	68fa      	ldr	r2, [r7, #12]
 80145f6:	4613      	mov	r3, r2
 80145f8:	005b      	lsls	r3, r3, #1
 80145fa:	4413      	add	r3, r2
 80145fc:	00db      	lsls	r3, r3, #3
 80145fe:	440b      	add	r3, r1
 8014600:	3314      	adds	r3, #20
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014606:	7afb      	ldrb	r3, [r7, #11]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00e      	beq.n	801462a <etharp_cleanup_netif+0x46>
 801460c:	490c      	ldr	r1, [pc, #48]	; (8014640 <etharp_cleanup_netif+0x5c>)
 801460e:	68fa      	ldr	r2, [r7, #12]
 8014610:	4613      	mov	r3, r2
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	4413      	add	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	440b      	add	r3, r1
 801461a:	3308      	adds	r3, #8
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	429a      	cmp	r2, r3
 8014622:	d102      	bne.n	801462a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014624:	68f8      	ldr	r0, [r7, #12]
 8014626:	f7ff fce5 	bl	8013ff4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	3301      	adds	r3, #1
 801462e:	60fb      	str	r3, [r7, #12]
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2b09      	cmp	r3, #9
 8014634:	dddd      	ble.n	80145f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014636:	bf00      	nop
 8014638:	bf00      	nop
 801463a:	3710      	adds	r7, #16
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	20008e5c 	.word	0x20008e5c

08014644 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014644:	b5b0      	push	{r4, r5, r7, lr}
 8014646:	b08a      	sub	sp, #40	; 0x28
 8014648:	af04      	add	r7, sp, #16
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d107      	bne.n	8014664 <etharp_input+0x20>
 8014654:	4b3d      	ldr	r3, [pc, #244]	; (801474c <etharp_input+0x108>)
 8014656:	f240 228a 	movw	r2, #650	; 0x28a
 801465a:	493d      	ldr	r1, [pc, #244]	; (8014750 <etharp_input+0x10c>)
 801465c:	483d      	ldr	r0, [pc, #244]	; (8014754 <etharp_input+0x110>)
 801465e:	f003 f8eb 	bl	8017838 <iprintf>
 8014662:	e06f      	b.n	8014744 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	881b      	ldrh	r3, [r3, #0]
 801466e:	b29b      	uxth	r3, r3
 8014670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014674:	d10c      	bne.n	8014690 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801467a:	2b06      	cmp	r3, #6
 801467c:	d108      	bne.n	8014690 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014682:	2b04      	cmp	r3, #4
 8014684:	d104      	bne.n	8014690 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	885b      	ldrh	r3, [r3, #2]
 801468a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801468c:	2b08      	cmp	r3, #8
 801468e:	d003      	beq.n	8014698 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f7f9 f965 	bl	800d960 <pbuf_free>
    return;
 8014696:	e055      	b.n	8014744 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	330e      	adds	r3, #14
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	3318      	adds	r3, #24
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	3304      	adds	r3, #4
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d102      	bne.n	80146b8 <etharp_input+0x74>
    for_us = 0;
 80146b2:	2300      	movs	r3, #0
 80146b4:	75fb      	strb	r3, [r7, #23]
 80146b6:	e009      	b.n	80146cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	3304      	adds	r3, #4
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	bf0c      	ite	eq
 80146c4:	2301      	moveq	r3, #1
 80146c6:	2300      	movne	r3, #0
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80146cc:	693b      	ldr	r3, [r7, #16]
 80146ce:	f103 0208 	add.w	r2, r3, #8
 80146d2:	7dfb      	ldrb	r3, [r7, #23]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d001      	beq.n	80146dc <etharp_input+0x98>
 80146d8:	2301      	movs	r3, #1
 80146da:	e000      	b.n	80146de <etharp_input+0x9a>
 80146dc:	2302      	movs	r3, #2
 80146de:	f107 010c 	add.w	r1, r7, #12
 80146e2:	6838      	ldr	r0, [r7, #0]
 80146e4:	f7ff fed8 	bl	8014498 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	88db      	ldrh	r3, [r3, #6]
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146f2:	d003      	beq.n	80146fc <etharp_input+0xb8>
 80146f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146f8:	d01e      	beq.n	8014738 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80146fa:	e020      	b.n	801473e <etharp_input+0xfa>
      if (for_us) {
 80146fc:	7dfb      	ldrb	r3, [r7, #23]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d01c      	beq.n	801473c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014718:	693a      	ldr	r2, [r7, #16]
 801471a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801471c:	2102      	movs	r1, #2
 801471e:	9103      	str	r1, [sp, #12]
 8014720:	f107 010c 	add.w	r1, r7, #12
 8014724:	9102      	str	r1, [sp, #8]
 8014726:	9201      	str	r2, [sp, #4]
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	462b      	mov	r3, r5
 801472c:	4622      	mov	r2, r4
 801472e:	4601      	mov	r1, r0
 8014730:	6838      	ldr	r0, [r7, #0]
 8014732:	f000 faeb 	bl	8014d0c <etharp_raw>
      break;
 8014736:	e001      	b.n	801473c <etharp_input+0xf8>
      break;
 8014738:	bf00      	nop
 801473a:	e000      	b.n	801473e <etharp_input+0xfa>
      break;
 801473c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7f9 f90e 	bl	800d960 <pbuf_free>
}
 8014744:	3718      	adds	r7, #24
 8014746:	46bd      	mov	sp, r7
 8014748:	bdb0      	pop	{r4, r5, r7, pc}
 801474a:	bf00      	nop
 801474c:	0801acf8 	.word	0x0801acf8
 8014750:	0801ae48 	.word	0x0801ae48
 8014754:	0801ad70 	.word	0x0801ad70

08014758 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b086      	sub	sp, #24
 801475c:	af02      	add	r7, sp, #8
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	4613      	mov	r3, r2
 8014764:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014766:	79fa      	ldrb	r2, [r7, #7]
 8014768:	4944      	ldr	r1, [pc, #272]	; (801487c <etharp_output_to_arp_index+0x124>)
 801476a:	4613      	mov	r3, r2
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	4413      	add	r3, r2
 8014770:	00db      	lsls	r3, r3, #3
 8014772:	440b      	add	r3, r1
 8014774:	3314      	adds	r3, #20
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	2b01      	cmp	r3, #1
 801477a:	d806      	bhi.n	801478a <etharp_output_to_arp_index+0x32>
 801477c:	4b40      	ldr	r3, [pc, #256]	; (8014880 <etharp_output_to_arp_index+0x128>)
 801477e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014782:	4940      	ldr	r1, [pc, #256]	; (8014884 <etharp_output_to_arp_index+0x12c>)
 8014784:	4840      	ldr	r0, [pc, #256]	; (8014888 <etharp_output_to_arp_index+0x130>)
 8014786:	f003 f857 	bl	8017838 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801478a:	79fa      	ldrb	r2, [r7, #7]
 801478c:	493b      	ldr	r1, [pc, #236]	; (801487c <etharp_output_to_arp_index+0x124>)
 801478e:	4613      	mov	r3, r2
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	4413      	add	r3, r2
 8014794:	00db      	lsls	r3, r3, #3
 8014796:	440b      	add	r3, r1
 8014798:	3314      	adds	r3, #20
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	2b02      	cmp	r3, #2
 801479e:	d153      	bne.n	8014848 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80147a0:	79fa      	ldrb	r2, [r7, #7]
 80147a2:	4936      	ldr	r1, [pc, #216]	; (801487c <etharp_output_to_arp_index+0x124>)
 80147a4:	4613      	mov	r3, r2
 80147a6:	005b      	lsls	r3, r3, #1
 80147a8:	4413      	add	r3, r2
 80147aa:	00db      	lsls	r3, r3, #3
 80147ac:	440b      	add	r3, r1
 80147ae:	3312      	adds	r3, #18
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80147b6:	d919      	bls.n	80147ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80147b8:	79fa      	ldrb	r2, [r7, #7]
 80147ba:	4613      	mov	r3, r2
 80147bc:	005b      	lsls	r3, r3, #1
 80147be:	4413      	add	r3, r2
 80147c0:	00db      	lsls	r3, r3, #3
 80147c2:	4a2e      	ldr	r2, [pc, #184]	; (801487c <etharp_output_to_arp_index+0x124>)
 80147c4:	4413      	add	r3, r2
 80147c6:	3304      	adds	r3, #4
 80147c8:	4619      	mov	r1, r3
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	f000 fb4c 	bl	8014e68 <etharp_request>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d138      	bne.n	8014848 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80147d6:	79fa      	ldrb	r2, [r7, #7]
 80147d8:	4928      	ldr	r1, [pc, #160]	; (801487c <etharp_output_to_arp_index+0x124>)
 80147da:	4613      	mov	r3, r2
 80147dc:	005b      	lsls	r3, r3, #1
 80147de:	4413      	add	r3, r2
 80147e0:	00db      	lsls	r3, r3, #3
 80147e2:	440b      	add	r3, r1
 80147e4:	3314      	adds	r3, #20
 80147e6:	2203      	movs	r2, #3
 80147e8:	701a      	strb	r2, [r3, #0]
 80147ea:	e02d      	b.n	8014848 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80147ec:	79fa      	ldrb	r2, [r7, #7]
 80147ee:	4923      	ldr	r1, [pc, #140]	; (801487c <etharp_output_to_arp_index+0x124>)
 80147f0:	4613      	mov	r3, r2
 80147f2:	005b      	lsls	r3, r3, #1
 80147f4:	4413      	add	r3, r2
 80147f6:	00db      	lsls	r3, r3, #3
 80147f8:	440b      	add	r3, r1
 80147fa:	3312      	adds	r3, #18
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014802:	d321      	bcc.n	8014848 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014804:	79fa      	ldrb	r2, [r7, #7]
 8014806:	4613      	mov	r3, r2
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	4413      	add	r3, r2
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	4a1b      	ldr	r2, [pc, #108]	; (801487c <etharp_output_to_arp_index+0x124>)
 8014810:	4413      	add	r3, r2
 8014812:	1d19      	adds	r1, r3, #4
 8014814:	79fa      	ldrb	r2, [r7, #7]
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	00db      	lsls	r3, r3, #3
 801481e:	3308      	adds	r3, #8
 8014820:	4a16      	ldr	r2, [pc, #88]	; (801487c <etharp_output_to_arp_index+0x124>)
 8014822:	4413      	add	r3, r2
 8014824:	3304      	adds	r3, #4
 8014826:	461a      	mov	r2, r3
 8014828:	68f8      	ldr	r0, [r7, #12]
 801482a:	f000 fafb 	bl	8014e24 <etharp_request_dst>
 801482e:	4603      	mov	r3, r0
 8014830:	2b00      	cmp	r3, #0
 8014832:	d109      	bne.n	8014848 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014834:	79fa      	ldrb	r2, [r7, #7]
 8014836:	4911      	ldr	r1, [pc, #68]	; (801487c <etharp_output_to_arp_index+0x124>)
 8014838:	4613      	mov	r3, r2
 801483a:	005b      	lsls	r3, r3, #1
 801483c:	4413      	add	r3, r2
 801483e:	00db      	lsls	r3, r3, #3
 8014840:	440b      	add	r3, r1
 8014842:	3314      	adds	r3, #20
 8014844:	2203      	movs	r2, #3
 8014846:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801484e:	79fa      	ldrb	r2, [r7, #7]
 8014850:	4613      	mov	r3, r2
 8014852:	005b      	lsls	r3, r3, #1
 8014854:	4413      	add	r3, r2
 8014856:	00db      	lsls	r3, r3, #3
 8014858:	3308      	adds	r3, #8
 801485a:	4a08      	ldr	r2, [pc, #32]	; (801487c <etharp_output_to_arp_index+0x124>)
 801485c:	4413      	add	r3, r2
 801485e:	3304      	adds	r3, #4
 8014860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014864:	9200      	str	r2, [sp, #0]
 8014866:	460a      	mov	r2, r1
 8014868:	68b9      	ldr	r1, [r7, #8]
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f001 fed0 	bl	8016610 <ethernet_output>
 8014870:	4603      	mov	r3, r0
}
 8014872:	4618      	mov	r0, r3
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	20008e5c 	.word	0x20008e5c
 8014880:	0801acf8 	.word	0x0801acf8
 8014884:	0801ae68 	.word	0x0801ae68
 8014888:	0801ad70 	.word	0x0801ad70

0801488c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b08a      	sub	sp, #40	; 0x28
 8014890:	af02      	add	r7, sp, #8
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <etharp_output+0x24>
 80148a2:	4b73      	ldr	r3, [pc, #460]	; (8014a70 <etharp_output+0x1e4>)
 80148a4:	f240 321e 	movw	r2, #798	; 0x31e
 80148a8:	4972      	ldr	r1, [pc, #456]	; (8014a74 <etharp_output+0x1e8>)
 80148aa:	4873      	ldr	r0, [pc, #460]	; (8014a78 <etharp_output+0x1ec>)
 80148ac:	f002 ffc4 	bl	8017838 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d106      	bne.n	80148c4 <etharp_output+0x38>
 80148b6:	4b6e      	ldr	r3, [pc, #440]	; (8014a70 <etharp_output+0x1e4>)
 80148b8:	f240 321f 	movw	r2, #799	; 0x31f
 80148bc:	496f      	ldr	r1, [pc, #444]	; (8014a7c <etharp_output+0x1f0>)
 80148be:	486e      	ldr	r0, [pc, #440]	; (8014a78 <etharp_output+0x1ec>)
 80148c0:	f002 ffba 	bl	8017838 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d106      	bne.n	80148d8 <etharp_output+0x4c>
 80148ca:	4b69      	ldr	r3, [pc, #420]	; (8014a70 <etharp_output+0x1e4>)
 80148cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80148d0:	496b      	ldr	r1, [pc, #428]	; (8014a80 <etharp_output+0x1f4>)
 80148d2:	4869      	ldr	r0, [pc, #420]	; (8014a78 <etharp_output+0x1ec>)
 80148d4:	f002 ffb0 	bl	8017838 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	68f9      	ldr	r1, [r7, #12]
 80148de:	4618      	mov	r0, r3
 80148e0:	f000 fef8 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 80148e4:	4603      	mov	r3, r0
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d002      	beq.n	80148f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80148ea:	4b66      	ldr	r3, [pc, #408]	; (8014a84 <etharp_output+0x1f8>)
 80148ec:	61fb      	str	r3, [r7, #28]
 80148ee:	e0af      	b.n	8014a50 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80148f8:	2be0      	cmp	r3, #224	; 0xe0
 80148fa:	d118      	bne.n	801492e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80148fc:	2301      	movs	r3, #1
 80148fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014900:	2300      	movs	r3, #0
 8014902:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014904:	235e      	movs	r3, #94	; 0x5e
 8014906:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	3301      	adds	r3, #1
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014912:	b2db      	uxtb	r3, r3
 8014914:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	3302      	adds	r3, #2
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	3303      	adds	r3, #3
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014926:	f107 0310 	add.w	r3, r7, #16
 801492a:	61fb      	str	r3, [r7, #28]
 801492c:	e090      	b.n	8014a50 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3304      	adds	r3, #4
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	405a      	eors	r2, r3
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	3308      	adds	r3, #8
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	4013      	ands	r3, r2
 8014942:	2b00      	cmp	r3, #0
 8014944:	d012      	beq.n	801496c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801494c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014950:	4293      	cmp	r3, r2
 8014952:	d00b      	beq.n	801496c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	330c      	adds	r3, #12
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d003      	beq.n	8014966 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	330c      	adds	r3, #12
 8014962:	61bb      	str	r3, [r7, #24]
 8014964:	e002      	b.n	801496c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014966:	f06f 0303 	mvn.w	r3, #3
 801496a:	e07d      	b.n	8014a68 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801496c:	4b46      	ldr	r3, [pc, #280]	; (8014a88 <etharp_output+0x1fc>)
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	4619      	mov	r1, r3
 8014972:	4a46      	ldr	r2, [pc, #280]	; (8014a8c <etharp_output+0x200>)
 8014974:	460b      	mov	r3, r1
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	440b      	add	r3, r1
 801497a:	00db      	lsls	r3, r3, #3
 801497c:	4413      	add	r3, r2
 801497e:	3314      	adds	r3, #20
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d925      	bls.n	80149d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014986:	4b40      	ldr	r3, [pc, #256]	; (8014a88 <etharp_output+0x1fc>)
 8014988:	781b      	ldrb	r3, [r3, #0]
 801498a:	4619      	mov	r1, r3
 801498c:	4a3f      	ldr	r2, [pc, #252]	; (8014a8c <etharp_output+0x200>)
 801498e:	460b      	mov	r3, r1
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	440b      	add	r3, r1
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	4413      	add	r3, r2
 8014998:	3308      	adds	r3, #8
 801499a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801499c:	68fa      	ldr	r2, [r7, #12]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d117      	bne.n	80149d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	4b38      	ldr	r3, [pc, #224]	; (8014a88 <etharp_output+0x1fc>)
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	4618      	mov	r0, r3
 80149ac:	4937      	ldr	r1, [pc, #220]	; (8014a8c <etharp_output+0x200>)
 80149ae:	4603      	mov	r3, r0
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	4403      	add	r3, r0
 80149b4:	00db      	lsls	r3, r3, #3
 80149b6:	440b      	add	r3, r1
 80149b8:	3304      	adds	r3, #4
 80149ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80149bc:	429a      	cmp	r2, r3
 80149be:	d108      	bne.n	80149d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80149c0:	4b31      	ldr	r3, [pc, #196]	; (8014a88 <etharp_output+0x1fc>)
 80149c2:	781b      	ldrb	r3, [r3, #0]
 80149c4:	461a      	mov	r2, r3
 80149c6:	68b9      	ldr	r1, [r7, #8]
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f7ff fec5 	bl	8014758 <etharp_output_to_arp_index>
 80149ce:	4603      	mov	r3, r0
 80149d0:	e04a      	b.n	8014a68 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80149d2:	2300      	movs	r3, #0
 80149d4:	75fb      	strb	r3, [r7, #23]
 80149d6:	e031      	b.n	8014a3c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80149d8:	7dfa      	ldrb	r2, [r7, #23]
 80149da:	492c      	ldr	r1, [pc, #176]	; (8014a8c <etharp_output+0x200>)
 80149dc:	4613      	mov	r3, r2
 80149de:	005b      	lsls	r3, r3, #1
 80149e0:	4413      	add	r3, r2
 80149e2:	00db      	lsls	r3, r3, #3
 80149e4:	440b      	add	r3, r1
 80149e6:	3314      	adds	r3, #20
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d923      	bls.n	8014a36 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80149ee:	7dfa      	ldrb	r2, [r7, #23]
 80149f0:	4926      	ldr	r1, [pc, #152]	; (8014a8c <etharp_output+0x200>)
 80149f2:	4613      	mov	r3, r2
 80149f4:	005b      	lsls	r3, r3, #1
 80149f6:	4413      	add	r3, r2
 80149f8:	00db      	lsls	r3, r3, #3
 80149fa:	440b      	add	r3, r1
 80149fc:	3308      	adds	r3, #8
 80149fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a00:	68fa      	ldr	r2, [r7, #12]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d117      	bne.n	8014a36 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014a06:	69bb      	ldr	r3, [r7, #24]
 8014a08:	6819      	ldr	r1, [r3, #0]
 8014a0a:	7dfa      	ldrb	r2, [r7, #23]
 8014a0c:	481f      	ldr	r0, [pc, #124]	; (8014a8c <etharp_output+0x200>)
 8014a0e:	4613      	mov	r3, r2
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	4413      	add	r3, r2
 8014a14:	00db      	lsls	r3, r3, #3
 8014a16:	4403      	add	r3, r0
 8014a18:	3304      	adds	r3, #4
 8014a1a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014a1c:	4299      	cmp	r1, r3
 8014a1e:	d10a      	bne.n	8014a36 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014a20:	4a19      	ldr	r2, [pc, #100]	; (8014a88 <etharp_output+0x1fc>)
 8014a22:	7dfb      	ldrb	r3, [r7, #23]
 8014a24:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	461a      	mov	r2, r3
 8014a2a:	68b9      	ldr	r1, [r7, #8]
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f7ff fe93 	bl	8014758 <etharp_output_to_arp_index>
 8014a32:	4603      	mov	r3, r0
 8014a34:	e018      	b.n	8014a68 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a36:	7dfb      	ldrb	r3, [r7, #23]
 8014a38:	3301      	adds	r3, #1
 8014a3a:	75fb      	strb	r3, [r7, #23]
 8014a3c:	7dfb      	ldrb	r3, [r7, #23]
 8014a3e:	2b09      	cmp	r3, #9
 8014a40:	d9ca      	bls.n	80149d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014a42:	68ba      	ldr	r2, [r7, #8]
 8014a44:	69b9      	ldr	r1, [r7, #24]
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	f000 f822 	bl	8014a90 <etharp_query>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	e00b      	b.n	8014a68 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	68b9      	ldr	r1, [r7, #8]
 8014a60:	68f8      	ldr	r0, [r7, #12]
 8014a62:	f001 fdd5 	bl	8016610 <ethernet_output>
 8014a66:	4603      	mov	r3, r0
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3720      	adds	r7, #32
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	0801acf8 	.word	0x0801acf8
 8014a74:	0801ae48 	.word	0x0801ae48
 8014a78:	0801ad70 	.word	0x0801ad70
 8014a7c:	0801ae98 	.word	0x0801ae98
 8014a80:	0801ae38 	.word	0x0801ae38
 8014a84:	0801b690 	.word	0x0801b690
 8014a88:	20008f4c 	.word	0x20008f4c
 8014a8c:	20008e5c 	.word	0x20008e5c

08014a90 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b08c      	sub	sp, #48	; 0x30
 8014a94:	af02      	add	r7, sp, #8
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	3326      	adds	r3, #38	; 0x26
 8014aa0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014aa2:	23ff      	movs	r3, #255	; 0xff
 8014aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	68f9      	ldr	r1, [r7, #12]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 fe0e 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d10c      	bne.n	8014ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ac6:	2be0      	cmp	r3, #224	; 0xe0
 8014ac8:	d006      	beq.n	8014ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d003      	beq.n	8014ad8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d102      	bne.n	8014ade <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014ad8:	f06f 030f 	mvn.w	r3, #15
 8014adc:	e101      	b.n	8014ce2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014ade:	68fa      	ldr	r2, [r7, #12]
 8014ae0:	2101      	movs	r1, #1
 8014ae2:	68b8      	ldr	r0, [r7, #8]
 8014ae4:	f7ff fb60 	bl	80141a8 <etharp_find_entry>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014aec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	da02      	bge.n	8014afa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014af4:	8a7b      	ldrh	r3, [r7, #18]
 8014af6:	b25b      	sxtb	r3, r3
 8014af8:	e0f3      	b.n	8014ce2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014afa:	8a7b      	ldrh	r3, [r7, #18]
 8014afc:	2b7e      	cmp	r3, #126	; 0x7e
 8014afe:	d906      	bls.n	8014b0e <etharp_query+0x7e>
 8014b00:	4b7a      	ldr	r3, [pc, #488]	; (8014cec <etharp_query+0x25c>)
 8014b02:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014b06:	497a      	ldr	r1, [pc, #488]	; (8014cf0 <etharp_query+0x260>)
 8014b08:	487a      	ldr	r0, [pc, #488]	; (8014cf4 <etharp_query+0x264>)
 8014b0a:	f002 fe95 	bl	8017838 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014b0e:	8a7b      	ldrh	r3, [r7, #18]
 8014b10:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014b12:	7c7a      	ldrb	r2, [r7, #17]
 8014b14:	4978      	ldr	r1, [pc, #480]	; (8014cf8 <etharp_query+0x268>)
 8014b16:	4613      	mov	r3, r2
 8014b18:	005b      	lsls	r3, r3, #1
 8014b1a:	4413      	add	r3, r2
 8014b1c:	00db      	lsls	r3, r3, #3
 8014b1e:	440b      	add	r3, r1
 8014b20:	3314      	adds	r3, #20
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d115      	bne.n	8014b54 <etharp_query+0xc4>
    is_new_entry = 1;
 8014b28:	2301      	movs	r3, #1
 8014b2a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014b2c:	7c7a      	ldrb	r2, [r7, #17]
 8014b2e:	4972      	ldr	r1, [pc, #456]	; (8014cf8 <etharp_query+0x268>)
 8014b30:	4613      	mov	r3, r2
 8014b32:	005b      	lsls	r3, r3, #1
 8014b34:	4413      	add	r3, r2
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	440b      	add	r3, r1
 8014b3a:	3314      	adds	r3, #20
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014b40:	7c7a      	ldrb	r2, [r7, #17]
 8014b42:	496d      	ldr	r1, [pc, #436]	; (8014cf8 <etharp_query+0x268>)
 8014b44:	4613      	mov	r3, r2
 8014b46:	005b      	lsls	r3, r3, #1
 8014b48:	4413      	add	r3, r2
 8014b4a:	00db      	lsls	r3, r3, #3
 8014b4c:	440b      	add	r3, r1
 8014b4e:	3308      	adds	r3, #8
 8014b50:	68fa      	ldr	r2, [r7, #12]
 8014b52:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014b54:	7c7a      	ldrb	r2, [r7, #17]
 8014b56:	4968      	ldr	r1, [pc, #416]	; (8014cf8 <etharp_query+0x268>)
 8014b58:	4613      	mov	r3, r2
 8014b5a:	005b      	lsls	r3, r3, #1
 8014b5c:	4413      	add	r3, r2
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	440b      	add	r3, r1
 8014b62:	3314      	adds	r3, #20
 8014b64:	781b      	ldrb	r3, [r3, #0]
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d011      	beq.n	8014b8e <etharp_query+0xfe>
 8014b6a:	7c7a      	ldrb	r2, [r7, #17]
 8014b6c:	4962      	ldr	r1, [pc, #392]	; (8014cf8 <etharp_query+0x268>)
 8014b6e:	4613      	mov	r3, r2
 8014b70:	005b      	lsls	r3, r3, #1
 8014b72:	4413      	add	r3, r2
 8014b74:	00db      	lsls	r3, r3, #3
 8014b76:	440b      	add	r3, r1
 8014b78:	3314      	adds	r3, #20
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d806      	bhi.n	8014b8e <etharp_query+0xfe>
 8014b80:	4b5a      	ldr	r3, [pc, #360]	; (8014cec <etharp_query+0x25c>)
 8014b82:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014b86:	495d      	ldr	r1, [pc, #372]	; (8014cfc <etharp_query+0x26c>)
 8014b88:	485a      	ldr	r0, [pc, #360]	; (8014cf4 <etharp_query+0x264>)
 8014b8a:	f002 fe55 	bl	8017838 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014b8e:	6a3b      	ldr	r3, [r7, #32]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d102      	bne.n	8014b9a <etharp_query+0x10a>
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d10c      	bne.n	8014bb4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014b9a:	68b9      	ldr	r1, [r7, #8]
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f000 f963 	bl	8014e68 <etharp_request>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d102      	bne.n	8014bb4 <etharp_query+0x124>
      return result;
 8014bae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014bb2:	e096      	b.n	8014ce2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d106      	bne.n	8014bc8 <etharp_query+0x138>
 8014bba:	4b4c      	ldr	r3, [pc, #304]	; (8014cec <etharp_query+0x25c>)
 8014bbc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014bc0:	494f      	ldr	r1, [pc, #316]	; (8014d00 <etharp_query+0x270>)
 8014bc2:	484c      	ldr	r0, [pc, #304]	; (8014cf4 <etharp_query+0x264>)
 8014bc4:	f002 fe38 	bl	8017838 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014bc8:	7c7a      	ldrb	r2, [r7, #17]
 8014bca:	494b      	ldr	r1, [pc, #300]	; (8014cf8 <etharp_query+0x268>)
 8014bcc:	4613      	mov	r3, r2
 8014bce:	005b      	lsls	r3, r3, #1
 8014bd0:	4413      	add	r3, r2
 8014bd2:	00db      	lsls	r3, r3, #3
 8014bd4:	440b      	add	r3, r1
 8014bd6:	3314      	adds	r3, #20
 8014bd8:	781b      	ldrb	r3, [r3, #0]
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	d917      	bls.n	8014c0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014bde:	4a49      	ldr	r2, [pc, #292]	; (8014d04 <etharp_query+0x274>)
 8014be0:	7c7b      	ldrb	r3, [r7, #17]
 8014be2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014be4:	7c7a      	ldrb	r2, [r7, #17]
 8014be6:	4613      	mov	r3, r2
 8014be8:	005b      	lsls	r3, r3, #1
 8014bea:	4413      	add	r3, r2
 8014bec:	00db      	lsls	r3, r3, #3
 8014bee:	3308      	adds	r3, #8
 8014bf0:	4a41      	ldr	r2, [pc, #260]	; (8014cf8 <etharp_query+0x268>)
 8014bf2:	4413      	add	r3, r2
 8014bf4:	3304      	adds	r3, #4
 8014bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014bfa:	9200      	str	r2, [sp, #0]
 8014bfc:	697a      	ldr	r2, [r7, #20]
 8014bfe:	6879      	ldr	r1, [r7, #4]
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f001 fd05 	bl	8016610 <ethernet_output>
 8014c06:	4603      	mov	r3, r0
 8014c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c0c:	e067      	b.n	8014cde <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c0e:	7c7a      	ldrb	r2, [r7, #17]
 8014c10:	4939      	ldr	r1, [pc, #228]	; (8014cf8 <etharp_query+0x268>)
 8014c12:	4613      	mov	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4413      	add	r3, r2
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	440b      	add	r3, r1
 8014c1c:	3314      	adds	r3, #20
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	2b01      	cmp	r3, #1
 8014c22:	d15c      	bne.n	8014cde <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014c24:	2300      	movs	r3, #0
 8014c26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014c2c:	e01c      	b.n	8014c68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	895a      	ldrh	r2, [r3, #10]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	891b      	ldrh	r3, [r3, #8]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d10a      	bne.n	8014c50 <etharp_query+0x1c0>
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d006      	beq.n	8014c50 <etharp_query+0x1c0>
 8014c42:	4b2a      	ldr	r3, [pc, #168]	; (8014cec <etharp_query+0x25c>)
 8014c44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014c48:	492f      	ldr	r1, [pc, #188]	; (8014d08 <etharp_query+0x278>)
 8014c4a:	482a      	ldr	r0, [pc, #168]	; (8014cf4 <etharp_query+0x264>)
 8014c4c:	f002 fdf4 	bl	8017838 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	7b1b      	ldrb	r3, [r3, #12]
 8014c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d002      	beq.n	8014c62 <etharp_query+0x1d2>
        copy_needed = 1;
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	61bb      	str	r3, [r7, #24]
        break;
 8014c60:	e005      	b.n	8014c6e <etharp_query+0x1de>
      }
      p = p->next;
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d1df      	bne.n	8014c2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014c6e:	69bb      	ldr	r3, [r7, #24]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d007      	beq.n	8014c84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014c7a:	200e      	movs	r0, #14
 8014c7c:	f7f9 f96e 	bl	800df5c <pbuf_clone>
 8014c80:	61f8      	str	r0, [r7, #28]
 8014c82:	e004      	b.n	8014c8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014c88:	69f8      	ldr	r0, [r7, #28]
 8014c8a:	f7f8 ff09 	bl	800daa0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d021      	beq.n	8014cd8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014c94:	7c7a      	ldrb	r2, [r7, #17]
 8014c96:	4918      	ldr	r1, [pc, #96]	; (8014cf8 <etharp_query+0x268>)
 8014c98:	4613      	mov	r3, r2
 8014c9a:	005b      	lsls	r3, r3, #1
 8014c9c:	4413      	add	r3, r2
 8014c9e:	00db      	lsls	r3, r3, #3
 8014ca0:	440b      	add	r3, r1
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d00a      	beq.n	8014cbe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014ca8:	7c7a      	ldrb	r2, [r7, #17]
 8014caa:	4913      	ldr	r1, [pc, #76]	; (8014cf8 <etharp_query+0x268>)
 8014cac:	4613      	mov	r3, r2
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	4413      	add	r3, r2
 8014cb2:	00db      	lsls	r3, r3, #3
 8014cb4:	440b      	add	r3, r1
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7f8 fe51 	bl	800d960 <pbuf_free>
      }
      arp_table[i].q = p;
 8014cbe:	7c7a      	ldrb	r2, [r7, #17]
 8014cc0:	490d      	ldr	r1, [pc, #52]	; (8014cf8 <etharp_query+0x268>)
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	4413      	add	r3, r2
 8014cc8:	00db      	lsls	r3, r3, #3
 8014cca:	440b      	add	r3, r1
 8014ccc:	69fa      	ldr	r2, [r7, #28]
 8014cce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cd6:	e002      	b.n	8014cde <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014cd8:	23ff      	movs	r3, #255	; 0xff
 8014cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3728      	adds	r7, #40	; 0x28
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	0801acf8 	.word	0x0801acf8
 8014cf0:	0801aea4 	.word	0x0801aea4
 8014cf4:	0801ad70 	.word	0x0801ad70
 8014cf8:	20008e5c 	.word	0x20008e5c
 8014cfc:	0801aeb4 	.word	0x0801aeb4
 8014d00:	0801ae98 	.word	0x0801ae98
 8014d04:	20008f4c 	.word	0x20008f4c
 8014d08:	0801aedc 	.word	0x0801aedc

08014d0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b08a      	sub	sp, #40	; 0x28
 8014d10:	af02      	add	r7, sp, #8
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	60b9      	str	r1, [r7, #8]
 8014d16:	607a      	str	r2, [r7, #4]
 8014d18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d106      	bne.n	8014d32 <etharp_raw+0x26>
 8014d24:	4b3a      	ldr	r3, [pc, #232]	; (8014e10 <etharp_raw+0x104>)
 8014d26:	f240 4257 	movw	r2, #1111	; 0x457
 8014d2a:	493a      	ldr	r1, [pc, #232]	; (8014e14 <etharp_raw+0x108>)
 8014d2c:	483a      	ldr	r0, [pc, #232]	; (8014e18 <etharp_raw+0x10c>)
 8014d2e:	f002 fd83 	bl	8017838 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d36:	211c      	movs	r1, #28
 8014d38:	200e      	movs	r0, #14
 8014d3a:	f7f8 fb2d 	bl	800d398 <pbuf_alloc>
 8014d3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014d40:	69bb      	ldr	r3, [r7, #24]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d102      	bne.n	8014d4c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014d46:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4a:	e05d      	b.n	8014e08 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	895b      	ldrh	r3, [r3, #10]
 8014d50:	2b1b      	cmp	r3, #27
 8014d52:	d806      	bhi.n	8014d62 <etharp_raw+0x56>
 8014d54:	4b2e      	ldr	r3, [pc, #184]	; (8014e10 <etharp_raw+0x104>)
 8014d56:	f240 4262 	movw	r2, #1122	; 0x462
 8014d5a:	4930      	ldr	r1, [pc, #192]	; (8014e1c <etharp_raw+0x110>)
 8014d5c:	482e      	ldr	r0, [pc, #184]	; (8014e18 <etharp_raw+0x10c>)
 8014d5e:	f002 fd6b 	bl	8017838 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014d68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7f7 fa9a 	bl	800c2a4 <lwip_htons>
 8014d70:	4603      	mov	r3, r0
 8014d72:	461a      	mov	r2, r3
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d7e:	2b06      	cmp	r3, #6
 8014d80:	d006      	beq.n	8014d90 <etharp_raw+0x84>
 8014d82:	4b23      	ldr	r3, [pc, #140]	; (8014e10 <etharp_raw+0x104>)
 8014d84:	f240 4269 	movw	r2, #1129	; 0x469
 8014d88:	4925      	ldr	r1, [pc, #148]	; (8014e20 <etharp_raw+0x114>)
 8014d8a:	4823      	ldr	r0, [pc, #140]	; (8014e18 <etharp_raw+0x10c>)
 8014d8c:	f002 fd54 	bl	8017838 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	3308      	adds	r3, #8
 8014d94:	2206      	movs	r2, #6
 8014d96:	6839      	ldr	r1, [r7, #0]
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f002 fd37 	bl	801780c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	3312      	adds	r3, #18
 8014da2:	2206      	movs	r2, #6
 8014da4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014da6:	4618      	mov	r0, r3
 8014da8:	f002 fd30 	bl	801780c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	330e      	adds	r3, #14
 8014db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014db2:	6812      	ldr	r2, [r2, #0]
 8014db4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	3318      	adds	r3, #24
 8014dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dbc:	6812      	ldr	r2, [r2, #0]
 8014dbe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	701a      	strb	r2, [r3, #0]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f042 0201 	orr.w	r2, r2, #1
 8014dcc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f042 0208 	orr.w	r2, r2, #8
 8014dd6:	709a      	strb	r2, [r3, #2]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	2206      	movs	r2, #6
 8014de0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	2204      	movs	r2, #4
 8014de6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014de8:	f640 0306 	movw	r3, #2054	; 0x806
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	68ba      	ldr	r2, [r7, #8]
 8014df2:	69b9      	ldr	r1, [r7, #24]
 8014df4:	68f8      	ldr	r0, [r7, #12]
 8014df6:	f001 fc0b 	bl	8016610 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014dfa:	69b8      	ldr	r0, [r7, #24]
 8014dfc:	f7f8 fdb0 	bl	800d960 <pbuf_free>
  p = NULL;
 8014e00:	2300      	movs	r3, #0
 8014e02:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3720      	adds	r7, #32
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	0801acf8 	.word	0x0801acf8
 8014e14:	0801ae48 	.word	0x0801ae48
 8014e18:	0801ad70 	.word	0x0801ad70
 8014e1c:	0801aef8 	.word	0x0801aef8
 8014e20:	0801af2c 	.word	0x0801af2c

08014e24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b088      	sub	sp, #32
 8014e28:	af04      	add	r7, sp, #16
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e40:	2201      	movs	r2, #1
 8014e42:	9203      	str	r2, [sp, #12]
 8014e44:	68ba      	ldr	r2, [r7, #8]
 8014e46:	9202      	str	r2, [sp, #8]
 8014e48:	4a06      	ldr	r2, [pc, #24]	; (8014e64 <etharp_request_dst+0x40>)
 8014e4a:	9201      	str	r2, [sp, #4]
 8014e4c:	9300      	str	r3, [sp, #0]
 8014e4e:	4603      	mov	r3, r0
 8014e50:	687a      	ldr	r2, [r7, #4]
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f7ff ff5a 	bl	8014d0c <etharp_raw>
 8014e58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3710      	adds	r7, #16
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	0801b698 	.word	0x0801b698

08014e68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014e72:	4a05      	ldr	r2, [pc, #20]	; (8014e88 <etharp_request+0x20>)
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f7ff ffd4 	bl	8014e24 <etharp_request_dst>
 8014e7c:	4603      	mov	r3, r0
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3708      	adds	r7, #8
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	0801b690 	.word	0x0801b690

08014e8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b08e      	sub	sp, #56	; 0x38
 8014e90:	af04      	add	r7, sp, #16
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e96:	4b79      	ldr	r3, [pc, #484]	; (801507c <icmp_input+0x1f0>)
 8014e98:	689b      	ldr	r3, [r3, #8]
 8014e9a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	f003 030f 	and.w	r3, r3, #15
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	b2db      	uxtb	r3, r3
 8014eaa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014eac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014eae:	2b13      	cmp	r3, #19
 8014eb0:	f240 80cd 	bls.w	801504e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	895b      	ldrh	r3, [r3, #10]
 8014eb8:	2b03      	cmp	r3, #3
 8014eba:	f240 80ca 	bls.w	8015052 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014ec8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f000 80b7 	beq.w	8015040 <icmp_input+0x1b4>
 8014ed2:	2b08      	cmp	r3, #8
 8014ed4:	f040 80b7 	bne.w	8015046 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014ed8:	4b69      	ldr	r3, [pc, #420]	; (8015080 <icmp_input+0x1f4>)
 8014eda:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014edc:	4b67      	ldr	r3, [pc, #412]	; (801507c <icmp_input+0x1f0>)
 8014ede:	695b      	ldr	r3, [r3, #20]
 8014ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ee4:	2be0      	cmp	r3, #224	; 0xe0
 8014ee6:	f000 80bb 	beq.w	8015060 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014eea:	4b64      	ldr	r3, [pc, #400]	; (801507c <icmp_input+0x1f0>)
 8014eec:	695b      	ldr	r3, [r3, #20]
 8014eee:	4a63      	ldr	r2, [pc, #396]	; (801507c <icmp_input+0x1f0>)
 8014ef0:	6812      	ldr	r2, [r2, #0]
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f000 fbed 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 8014efa:	4603      	mov	r3, r0
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	f040 80b1 	bne.w	8015064 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	891b      	ldrh	r3, [r3, #8]
 8014f06:	2b07      	cmp	r3, #7
 8014f08:	f240 80a5 	bls.w	8015056 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f0e:	330e      	adds	r3, #14
 8014f10:	4619      	mov	r1, r3
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7f8 fc8e 	bl	800d834 <pbuf_add_header>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d04b      	beq.n	8014fb6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	891a      	ldrh	r2, [r3, #8]
 8014f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f24:	4413      	add	r3, r2
 8014f26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	891b      	ldrh	r3, [r3, #8]
 8014f2c:	8b7a      	ldrh	r2, [r7, #26]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	f0c0 809a 	bcc.w	8015068 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014f34:	8b7b      	ldrh	r3, [r7, #26]
 8014f36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	200e      	movs	r0, #14
 8014f3e:	f7f8 fa2b 	bl	800d398 <pbuf_alloc>
 8014f42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	f000 8090 	beq.w	801506c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	895b      	ldrh	r3, [r3, #10]
 8014f50:	461a      	mov	r2, r3
 8014f52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f54:	3308      	adds	r3, #8
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d203      	bcs.n	8014f62 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014f5a:	6978      	ldr	r0, [r7, #20]
 8014f5c:	f7f8 fd00 	bl	800d960 <pbuf_free>
          goto icmperr;
 8014f60:	e085      	b.n	801506e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f002 fc4e 	bl	801780c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014f70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f72:	4619      	mov	r1, r3
 8014f74:	6978      	ldr	r0, [r7, #20]
 8014f76:	f7f8 fc6d 	bl	800d854 <pbuf_remove_header>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d009      	beq.n	8014f94 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f80:	4b40      	ldr	r3, [pc, #256]	; (8015084 <icmp_input+0x1f8>)
 8014f82:	22b6      	movs	r2, #182	; 0xb6
 8014f84:	4940      	ldr	r1, [pc, #256]	; (8015088 <icmp_input+0x1fc>)
 8014f86:	4841      	ldr	r0, [pc, #260]	; (801508c <icmp_input+0x200>)
 8014f88:	f002 fc56 	bl	8017838 <iprintf>
          pbuf_free(r);
 8014f8c:	6978      	ldr	r0, [r7, #20]
 8014f8e:	f7f8 fce7 	bl	800d960 <pbuf_free>
          goto icmperr;
 8014f92:	e06c      	b.n	801506e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f94:	6879      	ldr	r1, [r7, #4]
 8014f96:	6978      	ldr	r0, [r7, #20]
 8014f98:	f7f8 fe0a 	bl	800dbb0 <pbuf_copy>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d003      	beq.n	8014faa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014fa2:	6978      	ldr	r0, [r7, #20]
 8014fa4:	f7f8 fcdc 	bl	800d960 <pbuf_free>
          goto icmperr;
 8014fa8:	e061      	b.n	801506e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f7f8 fcd8 	bl	800d960 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	607b      	str	r3, [r7, #4]
 8014fb4:	e00f      	b.n	8014fd6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fb8:	330e      	adds	r3, #14
 8014fba:	4619      	mov	r1, r3
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f7f8 fc49 	bl	800d854 <pbuf_remove_header>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d006      	beq.n	8014fd6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014fc8:	4b2e      	ldr	r3, [pc, #184]	; (8015084 <icmp_input+0x1f8>)
 8014fca:	22c7      	movs	r2, #199	; 0xc7
 8014fcc:	4930      	ldr	r1, [pc, #192]	; (8015090 <icmp_input+0x204>)
 8014fce:	482f      	ldr	r0, [pc, #188]	; (801508c <icmp_input+0x200>)
 8014fd0:	f002 fc32 	bl	8017838 <iprintf>
          goto icmperr;
 8014fd4:	e04b      	b.n	801506e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fde:	4619      	mov	r1, r3
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f7f8 fc27 	bl	800d834 <pbuf_add_header>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d12b      	bne.n	8015044 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ff2:	69fb      	ldr	r3, [r7, #28]
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014ffa:	4b20      	ldr	r3, [pc, #128]	; (801507c <icmp_input+0x1f0>)
 8014ffc:	691a      	ldr	r2, [r3, #16]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	2200      	movs	r2, #0
 8015006:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	2200      	movs	r2, #0
 801500c:	709a      	strb	r2, [r3, #2]
 801500e:	2200      	movs	r2, #0
 8015010:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	22ff      	movs	r2, #255	; 0xff
 8015016:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	2200      	movs	r2, #0
 801501c:	729a      	strb	r2, [r3, #10]
 801501e:	2200      	movs	r2, #0
 8015020:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	9302      	str	r3, [sp, #8]
 8015026:	2301      	movs	r3, #1
 8015028:	9301      	str	r3, [sp, #4]
 801502a:	2300      	movs	r3, #0
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	23ff      	movs	r3, #255	; 0xff
 8015030:	2200      	movs	r2, #0
 8015032:	69f9      	ldr	r1, [r7, #28]
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f000 fa75 	bl	8015524 <ip4_output_if>
 801503a:	4603      	mov	r3, r0
 801503c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801503e:	e001      	b.n	8015044 <icmp_input+0x1b8>
      break;
 8015040:	bf00      	nop
 8015042:	e000      	b.n	8015046 <icmp_input+0x1ba>
      break;
 8015044:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7f8 fc8a 	bl	800d960 <pbuf_free>
  return;
 801504c:	e013      	b.n	8015076 <icmp_input+0x1ea>
    goto lenerr;
 801504e:	bf00      	nop
 8015050:	e002      	b.n	8015058 <icmp_input+0x1cc>
    goto lenerr;
 8015052:	bf00      	nop
 8015054:	e000      	b.n	8015058 <icmp_input+0x1cc>
        goto lenerr;
 8015056:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7f8 fc81 	bl	800d960 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801505e:	e00a      	b.n	8015076 <icmp_input+0x1ea>
        goto icmperr;
 8015060:	bf00      	nop
 8015062:	e004      	b.n	801506e <icmp_input+0x1e2>
        goto icmperr;
 8015064:	bf00      	nop
 8015066:	e002      	b.n	801506e <icmp_input+0x1e2>
          goto icmperr;
 8015068:	bf00      	nop
 801506a:	e000      	b.n	801506e <icmp_input+0x1e2>
          goto icmperr;
 801506c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7f8 fc76 	bl	800d960 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015074:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015076:	3728      	adds	r7, #40	; 0x28
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	2000588c 	.word	0x2000588c
 8015080:	200058a0 	.word	0x200058a0
 8015084:	0801af70 	.word	0x0801af70
 8015088:	0801afa8 	.word	0x0801afa8
 801508c:	0801afe0 	.word	0x0801afe0
 8015090:	0801b008 	.word	0x0801b008

08015094 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	460b      	mov	r3, r1
 801509e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80150a0:	78fb      	ldrb	r3, [r7, #3]
 80150a2:	461a      	mov	r2, r3
 80150a4:	2103      	movs	r1, #3
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f000 f814 	bl	80150d4 <icmp_send_response>
}
 80150ac:	bf00      	nop
 80150ae:	3708      	adds	r7, #8
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	460b      	mov	r3, r1
 80150be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80150c0:	78fb      	ldrb	r3, [r7, #3]
 80150c2:	461a      	mov	r2, r3
 80150c4:	210b      	movs	r1, #11
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 f804 	bl	80150d4 <icmp_send_response>
}
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b08c      	sub	sp, #48	; 0x30
 80150d8:	af04      	add	r7, sp, #16
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	460b      	mov	r3, r1
 80150de:	70fb      	strb	r3, [r7, #3]
 80150e0:	4613      	mov	r3, r2
 80150e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80150e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150e8:	2124      	movs	r1, #36	; 0x24
 80150ea:	2022      	movs	r0, #34	; 0x22
 80150ec:	f7f8 f954 	bl	800d398 <pbuf_alloc>
 80150f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80150f2:	69fb      	ldr	r3, [r7, #28]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d04c      	beq.n	8015192 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	895b      	ldrh	r3, [r3, #10]
 80150fc:	2b23      	cmp	r3, #35	; 0x23
 80150fe:	d806      	bhi.n	801510e <icmp_send_response+0x3a>
 8015100:	4b26      	ldr	r3, [pc, #152]	; (801519c <icmp_send_response+0xc8>)
 8015102:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015106:	4926      	ldr	r1, [pc, #152]	; (80151a0 <icmp_send_response+0xcc>)
 8015108:	4826      	ldr	r0, [pc, #152]	; (80151a4 <icmp_send_response+0xd0>)
 801510a:	f002 fb95 	bl	8017838 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	78fa      	ldrb	r2, [r7, #3]
 801511e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	78ba      	ldrb	r2, [r7, #2]
 8015124:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	2200      	movs	r2, #0
 801512a:	711a      	strb	r2, [r3, #4]
 801512c:	2200      	movs	r2, #0
 801512e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	2200      	movs	r2, #0
 8015134:	719a      	strb	r2, [r3, #6]
 8015136:	2200      	movs	r2, #0
 8015138:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	f103 0008 	add.w	r0, r3, #8
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	221c      	movs	r2, #28
 8015148:	4619      	mov	r1, r3
 801514a:	f002 fb5f 	bl	801780c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015154:	f107 030c 	add.w	r3, r7, #12
 8015158:	4618      	mov	r0, r3
 801515a:	f000 f825 	bl	80151a8 <ip4_route>
 801515e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d011      	beq.n	801518a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2200      	movs	r2, #0
 801516a:	709a      	strb	r2, [r3, #2]
 801516c:	2200      	movs	r2, #0
 801516e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015170:	f107 020c 	add.w	r2, r7, #12
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	9302      	str	r3, [sp, #8]
 8015178:	2301      	movs	r3, #1
 801517a:	9301      	str	r3, [sp, #4]
 801517c:	2300      	movs	r3, #0
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	23ff      	movs	r3, #255	; 0xff
 8015182:	2100      	movs	r1, #0
 8015184:	69f8      	ldr	r0, [r7, #28]
 8015186:	f000 f9cd 	bl	8015524 <ip4_output_if>
  }
  pbuf_free(q);
 801518a:	69f8      	ldr	r0, [r7, #28]
 801518c:	f7f8 fbe8 	bl	800d960 <pbuf_free>
 8015190:	e000      	b.n	8015194 <icmp_send_response+0xc0>
    return;
 8015192:	bf00      	nop
}
 8015194:	3720      	adds	r7, #32
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	0801af70 	.word	0x0801af70
 80151a0:	0801b03c 	.word	0x0801b03c
 80151a4:	0801afe0 	.word	0x0801afe0

080151a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b085      	sub	sp, #20
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80151b0:	4b33      	ldr	r3, [pc, #204]	; (8015280 <ip4_route+0xd8>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	60fb      	str	r3, [r7, #12]
 80151b6:	e036      	b.n	8015226 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151be:	f003 0301 	and.w	r3, r3, #1
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d02b      	beq.n	8015220 <ip4_route+0x78>
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151ce:	089b      	lsrs	r3, r3, #2
 80151d0:	f003 0301 	and.w	r3, r3, #1
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d022      	beq.n	8015220 <ip4_route+0x78>
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	3304      	adds	r3, #4
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d01d      	beq.n	8015220 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	3304      	adds	r3, #4
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	405a      	eors	r2, r3
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	3308      	adds	r3, #8
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	4013      	ands	r3, r2
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d101      	bne.n	8015200 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	e038      	b.n	8015272 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015206:	f003 0302 	and.w	r3, r3, #2
 801520a:	2b00      	cmp	r3, #0
 801520c:	d108      	bne.n	8015220 <ip4_route+0x78>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	330c      	adds	r3, #12
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	429a      	cmp	r2, r3
 801521a:	d101      	bne.n	8015220 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	e028      	b.n	8015272 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	60fb      	str	r3, [r7, #12]
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d1c5      	bne.n	80151b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801522c:	4b15      	ldr	r3, [pc, #84]	; (8015284 <ip4_route+0xdc>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d01a      	beq.n	801526a <ip4_route+0xc2>
 8015234:	4b13      	ldr	r3, [pc, #76]	; (8015284 <ip4_route+0xdc>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801523c:	f003 0301 	and.w	r3, r3, #1
 8015240:	2b00      	cmp	r3, #0
 8015242:	d012      	beq.n	801526a <ip4_route+0xc2>
 8015244:	4b0f      	ldr	r3, [pc, #60]	; (8015284 <ip4_route+0xdc>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801524c:	f003 0304 	and.w	r3, r3, #4
 8015250:	2b00      	cmp	r3, #0
 8015252:	d00a      	beq.n	801526a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015254:	4b0b      	ldr	r3, [pc, #44]	; (8015284 <ip4_route+0xdc>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	3304      	adds	r3, #4
 801525a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801525c:	2b00      	cmp	r3, #0
 801525e:	d004      	beq.n	801526a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	b2db      	uxtb	r3, r3
 8015266:	2b7f      	cmp	r3, #127	; 0x7f
 8015268:	d101      	bne.n	801526e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801526a:	2300      	movs	r3, #0
 801526c:	e001      	b.n	8015272 <ip4_route+0xca>
  }

  return netif_default;
 801526e:	4b05      	ldr	r3, [pc, #20]	; (8015284 <ip4_route+0xdc>)
 8015270:	681b      	ldr	r3, [r3, #0]
}
 8015272:	4618      	mov	r0, r3
 8015274:	3714      	adds	r7, #20
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop
 8015280:	20008df0 	.word	0x20008df0
 8015284:	20008df4 	.word	0x20008df4

08015288 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015296:	f003 0301 	and.w	r3, r3, #1
 801529a:	b2db      	uxtb	r3, r3
 801529c:	2b00      	cmp	r3, #0
 801529e:	d016      	beq.n	80152ce <ip4_input_accept+0x46>
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	3304      	adds	r3, #4
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d011      	beq.n	80152ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152aa:	4b0b      	ldr	r3, [pc, #44]	; (80152d8 <ip4_input_accept+0x50>)
 80152ac:	695a      	ldr	r2, [r3, #20]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	3304      	adds	r3, #4
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d008      	beq.n	80152ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80152b8:	4b07      	ldr	r3, [pc, #28]	; (80152d8 <ip4_input_accept+0x50>)
 80152ba:	695b      	ldr	r3, [r3, #20]
 80152bc:	6879      	ldr	r1, [r7, #4]
 80152be:	4618      	mov	r0, r3
 80152c0:	f000 fa08 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 80152c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d001      	beq.n	80152ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80152ca:	2301      	movs	r3, #1
 80152cc:	e000      	b.n	80152d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80152ce:	2300      	movs	r3, #0
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	2000588c 	.word	0x2000588c

080152dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b086      	sub	sp, #24
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	091b      	lsrs	r3, r3, #4
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	2b04      	cmp	r3, #4
 80152f6:	d004      	beq.n	8015302 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f7f8 fb31 	bl	800d960 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80152fe:	2300      	movs	r3, #0
 8015300:	e107      	b.n	8015512 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	781b      	ldrb	r3, [r3, #0]
 8015306:	f003 030f 	and.w	r3, r3, #15
 801530a:	b2db      	uxtb	r3, r3
 801530c:	009b      	lsls	r3, r3, #2
 801530e:	b2db      	uxtb	r3, r3
 8015310:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	885b      	ldrh	r3, [r3, #2]
 8015316:	b29b      	uxth	r3, r3
 8015318:	4618      	mov	r0, r3
 801531a:	f7f6 ffc3 	bl	800c2a4 <lwip_htons>
 801531e:	4603      	mov	r3, r0
 8015320:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	891b      	ldrh	r3, [r3, #8]
 8015326:	89ba      	ldrh	r2, [r7, #12]
 8015328:	429a      	cmp	r2, r3
 801532a:	d204      	bcs.n	8015336 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801532c:	89bb      	ldrh	r3, [r7, #12]
 801532e:	4619      	mov	r1, r3
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7f8 f98f 	bl	800d654 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	895b      	ldrh	r3, [r3, #10]
 801533a:	89fa      	ldrh	r2, [r7, #14]
 801533c:	429a      	cmp	r2, r3
 801533e:	d807      	bhi.n	8015350 <ip4_input+0x74>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	891b      	ldrh	r3, [r3, #8]
 8015344:	89ba      	ldrh	r2, [r7, #12]
 8015346:	429a      	cmp	r2, r3
 8015348:	d802      	bhi.n	8015350 <ip4_input+0x74>
 801534a:	89fb      	ldrh	r3, [r7, #14]
 801534c:	2b13      	cmp	r3, #19
 801534e:	d804      	bhi.n	801535a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f7f8 fb05 	bl	800d960 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015356:	2300      	movs	r3, #0
 8015358:	e0db      	b.n	8015512 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	691b      	ldr	r3, [r3, #16]
 801535e:	4a6f      	ldr	r2, [pc, #444]	; (801551c <ip4_input+0x240>)
 8015360:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	68db      	ldr	r3, [r3, #12]
 8015366:	4a6d      	ldr	r2, [pc, #436]	; (801551c <ip4_input+0x240>)
 8015368:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801536a:	4b6c      	ldr	r3, [pc, #432]	; (801551c <ip4_input+0x240>)
 801536c:	695b      	ldr	r3, [r3, #20]
 801536e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015372:	2be0      	cmp	r3, #224	; 0xe0
 8015374:	d112      	bne.n	801539c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801537c:	f003 0301 	and.w	r3, r3, #1
 8015380:	b2db      	uxtb	r3, r3
 8015382:	2b00      	cmp	r3, #0
 8015384:	d007      	beq.n	8015396 <ip4_input+0xba>
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	3304      	adds	r3, #4
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d002      	beq.n	8015396 <ip4_input+0xba>
      netif = inp;
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	613b      	str	r3, [r7, #16]
 8015394:	e02a      	b.n	80153ec <ip4_input+0x110>
    } else {
      netif = NULL;
 8015396:	2300      	movs	r3, #0
 8015398:	613b      	str	r3, [r7, #16]
 801539a:	e027      	b.n	80153ec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801539c:	6838      	ldr	r0, [r7, #0]
 801539e:	f7ff ff73 	bl	8015288 <ip4_input_accept>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d002      	beq.n	80153ae <ip4_input+0xd2>
      netif = inp;
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	613b      	str	r3, [r7, #16]
 80153ac:	e01e      	b.n	80153ec <ip4_input+0x110>
    } else {
      netif = NULL;
 80153ae:	2300      	movs	r3, #0
 80153b0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80153b2:	4b5a      	ldr	r3, [pc, #360]	; (801551c <ip4_input+0x240>)
 80153b4:	695b      	ldr	r3, [r3, #20]
 80153b6:	b2db      	uxtb	r3, r3
 80153b8:	2b7f      	cmp	r3, #127	; 0x7f
 80153ba:	d017      	beq.n	80153ec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80153bc:	4b58      	ldr	r3, [pc, #352]	; (8015520 <ip4_input+0x244>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	613b      	str	r3, [r7, #16]
 80153c2:	e00e      	b.n	80153e2 <ip4_input+0x106>
          if (netif == inp) {
 80153c4:	693a      	ldr	r2, [r7, #16]
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d006      	beq.n	80153da <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80153cc:	6938      	ldr	r0, [r7, #16]
 80153ce:	f7ff ff5b 	bl	8015288 <ip4_input_accept>
 80153d2:	4603      	mov	r3, r0
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d108      	bne.n	80153ea <ip4_input+0x10e>
 80153d8:	e000      	b.n	80153dc <ip4_input+0x100>
            continue;
 80153da:	bf00      	nop
        NETIF_FOREACH(netif) {
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	613b      	str	r3, [r7, #16]
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d1ed      	bne.n	80153c4 <ip4_input+0xe8>
 80153e8:	e000      	b.n	80153ec <ip4_input+0x110>
            break;
 80153ea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80153ec:	4b4b      	ldr	r3, [pc, #300]	; (801551c <ip4_input+0x240>)
 80153ee:	691b      	ldr	r3, [r3, #16]
 80153f0:	6839      	ldr	r1, [r7, #0]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f000 f96e 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 80153f8:	4603      	mov	r3, r0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d105      	bne.n	801540a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80153fe:	4b47      	ldr	r3, [pc, #284]	; (801551c <ip4_input+0x240>)
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015406:	2be0      	cmp	r3, #224	; 0xe0
 8015408:	d104      	bne.n	8015414 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	f7f8 faa8 	bl	800d960 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015410:	2300      	movs	r3, #0
 8015412:	e07e      	b.n	8015512 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d104      	bne.n	8015424 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f7f8 faa0 	bl	800d960 <pbuf_free>
    return ERR_OK;
 8015420:	2300      	movs	r3, #0
 8015422:	e076      	b.n	8015512 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	88db      	ldrh	r3, [r3, #6]
 8015428:	b29b      	uxth	r3, r3
 801542a:	461a      	mov	r2, r3
 801542c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015430:	4013      	ands	r3, r2
 8015432:	2b00      	cmp	r3, #0
 8015434:	d00b      	beq.n	801544e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f000 fd22 	bl	8015e80 <ip4_reass>
 801543c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d101      	bne.n	8015448 <ip4_input+0x16c>
      return ERR_OK;
 8015444:	2300      	movs	r3, #0
 8015446:	e064      	b.n	8015512 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801544e:	4a33      	ldr	r2, [pc, #204]	; (801551c <ip4_input+0x240>)
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015454:	4a31      	ldr	r2, [pc, #196]	; (801551c <ip4_input+0x240>)
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801545a:	4a30      	ldr	r2, [pc, #192]	; (801551c <ip4_input+0x240>)
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	f003 030f 	and.w	r3, r3, #15
 8015468:	b2db      	uxtb	r3, r3
 801546a:	009b      	lsls	r3, r3, #2
 801546c:	b2db      	uxtb	r3, r3
 801546e:	b29a      	uxth	r2, r3
 8015470:	4b2a      	ldr	r3, [pc, #168]	; (801551c <ip4_input+0x240>)
 8015472:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015474:	89fb      	ldrh	r3, [r7, #14]
 8015476:	4619      	mov	r1, r3
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7f8 f9eb 	bl	800d854 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	7a5b      	ldrb	r3, [r3, #9]
 8015482:	2b11      	cmp	r3, #17
 8015484:	d006      	beq.n	8015494 <ip4_input+0x1b8>
 8015486:	2b11      	cmp	r3, #17
 8015488:	dc13      	bgt.n	80154b2 <ip4_input+0x1d6>
 801548a:	2b01      	cmp	r3, #1
 801548c:	d00c      	beq.n	80154a8 <ip4_input+0x1cc>
 801548e:	2b06      	cmp	r3, #6
 8015490:	d005      	beq.n	801549e <ip4_input+0x1c2>
 8015492:	e00e      	b.n	80154b2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015494:	6839      	ldr	r1, [r7, #0]
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f7fe f8e6 	bl	8013668 <udp_input>
        break;
 801549c:	e026      	b.n	80154ec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801549e:	6839      	ldr	r1, [r7, #0]
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7fa f927 	bl	800f6f4 <tcp_input>
        break;
 80154a6:	e021      	b.n	80154ec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80154a8:	6839      	ldr	r1, [r7, #0]
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff fcee 	bl	8014e8c <icmp_input>
        break;
 80154b0:	e01c      	b.n	80154ec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80154b2:	4b1a      	ldr	r3, [pc, #104]	; (801551c <ip4_input+0x240>)
 80154b4:	695b      	ldr	r3, [r3, #20]
 80154b6:	6939      	ldr	r1, [r7, #16]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f000 f90b 	bl	80156d4 <ip4_addr_isbroadcast_u32>
 80154be:	4603      	mov	r3, r0
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d10f      	bne.n	80154e4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80154c4:	4b15      	ldr	r3, [pc, #84]	; (801551c <ip4_input+0x240>)
 80154c6:	695b      	ldr	r3, [r3, #20]
 80154c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80154cc:	2be0      	cmp	r3, #224	; 0xe0
 80154ce:	d009      	beq.n	80154e4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80154d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80154d4:	4619      	mov	r1, r3
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f7f8 fa2f 	bl	800d93a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80154dc:	2102      	movs	r1, #2
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f7ff fdd8 	bl	8015094 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f7f8 fa3b 	bl	800d960 <pbuf_free>
        break;
 80154ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80154ec:	4b0b      	ldr	r3, [pc, #44]	; (801551c <ip4_input+0x240>)
 80154ee:	2200      	movs	r2, #0
 80154f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80154f2:	4b0a      	ldr	r3, [pc, #40]	; (801551c <ip4_input+0x240>)
 80154f4:	2200      	movs	r2, #0
 80154f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80154f8:	4b08      	ldr	r3, [pc, #32]	; (801551c <ip4_input+0x240>)
 80154fa:	2200      	movs	r2, #0
 80154fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80154fe:	4b07      	ldr	r3, [pc, #28]	; (801551c <ip4_input+0x240>)
 8015500:	2200      	movs	r2, #0
 8015502:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015504:	4b05      	ldr	r3, [pc, #20]	; (801551c <ip4_input+0x240>)
 8015506:	2200      	movs	r2, #0
 8015508:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801550a:	4b04      	ldr	r3, [pc, #16]	; (801551c <ip4_input+0x240>)
 801550c:	2200      	movs	r2, #0
 801550e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015510:	2300      	movs	r3, #0
}
 8015512:	4618      	mov	r0, r3
 8015514:	3718      	adds	r7, #24
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	2000588c 	.word	0x2000588c
 8015520:	20008df0 	.word	0x20008df0

08015524 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b08a      	sub	sp, #40	; 0x28
 8015528:	af04      	add	r7, sp, #16
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d009      	beq.n	8015550 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d003      	beq.n	801554a <ip4_output_if+0x26>
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d102      	bne.n	8015550 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554c:	3304      	adds	r3, #4
 801554e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015550:	78fa      	ldrb	r2, [r7, #3]
 8015552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015554:	9302      	str	r3, [sp, #8]
 8015556:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	4613      	mov	r3, r2
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	6979      	ldr	r1, [r7, #20]
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f000 f805 	bl	8015578 <ip4_output_if_src>
 801556e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015570:	4618      	mov	r0, r3
 8015572:	3718      	adds	r7, #24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b088      	sub	sp, #32
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
 8015584:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	7b9b      	ldrb	r3, [r3, #14]
 801558a:	2b01      	cmp	r3, #1
 801558c:	d006      	beq.n	801559c <ip4_output_if_src+0x24>
 801558e:	4b4b      	ldr	r3, [pc, #300]	; (80156bc <ip4_output_if_src+0x144>)
 8015590:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015594:	494a      	ldr	r1, [pc, #296]	; (80156c0 <ip4_output_if_src+0x148>)
 8015596:	484b      	ldr	r0, [pc, #300]	; (80156c4 <ip4_output_if_src+0x14c>)
 8015598:	f002 f94e 	bl	8017838 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d060      	beq.n	8015664 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80155a2:	2314      	movs	r3, #20
 80155a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80155a6:	2114      	movs	r1, #20
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f7f8 f943 	bl	800d834 <pbuf_add_header>
 80155ae:	4603      	mov	r3, r0
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d002      	beq.n	80155ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80155b4:	f06f 0301 	mvn.w	r3, #1
 80155b8:	e07c      	b.n	80156b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	895b      	ldrh	r3, [r3, #10]
 80155c4:	2b13      	cmp	r3, #19
 80155c6:	d806      	bhi.n	80155d6 <ip4_output_if_src+0x5e>
 80155c8:	4b3c      	ldr	r3, [pc, #240]	; (80156bc <ip4_output_if_src+0x144>)
 80155ca:	f44f 7262 	mov.w	r2, #904	; 0x388
 80155ce:	493e      	ldr	r1, [pc, #248]	; (80156c8 <ip4_output_if_src+0x150>)
 80155d0:	483c      	ldr	r0, [pc, #240]	; (80156c4 <ip4_output_if_src+0x14c>)
 80155d2:	f002 f931 	bl	8017838 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	78fa      	ldrb	r2, [r7, #3]
 80155da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80155e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80155ec:	8b7b      	ldrh	r3, [r7, #26]
 80155ee:	089b      	lsrs	r3, r3, #2
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155f8:	b2da      	uxtb	r2, r3
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80155fe:	69fb      	ldr	r3, [r7, #28]
 8015600:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015604:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	891b      	ldrh	r3, [r3, #8]
 801560a:	4618      	mov	r0, r3
 801560c:	f7f6 fe4a 	bl	800c2a4 <lwip_htons>
 8015610:	4603      	mov	r3, r0
 8015612:	461a      	mov	r2, r3
 8015614:	69fb      	ldr	r3, [r7, #28]
 8015616:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	2200      	movs	r2, #0
 801561c:	719a      	strb	r2, [r3, #6]
 801561e:	2200      	movs	r2, #0
 8015620:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015622:	4b2a      	ldr	r3, [pc, #168]	; (80156cc <ip4_output_if_src+0x154>)
 8015624:	881b      	ldrh	r3, [r3, #0]
 8015626:	4618      	mov	r0, r3
 8015628:	f7f6 fe3c 	bl	800c2a4 <lwip_htons>
 801562c:	4603      	mov	r3, r0
 801562e:	461a      	mov	r2, r3
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015634:	4b25      	ldr	r3, [pc, #148]	; (80156cc <ip4_output_if_src+0x154>)
 8015636:	881b      	ldrh	r3, [r3, #0]
 8015638:	3301      	adds	r3, #1
 801563a:	b29a      	uxth	r2, r3
 801563c:	4b23      	ldr	r3, [pc, #140]	; (80156cc <ip4_output_if_src+0x154>)
 801563e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d104      	bne.n	8015650 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015646:	4b22      	ldr	r3, [pc, #136]	; (80156d0 <ip4_output_if_src+0x158>)
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	60da      	str	r2, [r3, #12]
 801564e:	e003      	b.n	8015658 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	2200      	movs	r2, #0
 801565c:	729a      	strb	r2, [r3, #10]
 801565e:	2200      	movs	r2, #0
 8015660:	72da      	strb	r2, [r3, #11]
 8015662:	e00f      	b.n	8015684 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	895b      	ldrh	r3, [r3, #10]
 8015668:	2b13      	cmp	r3, #19
 801566a:	d802      	bhi.n	8015672 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801566c:	f06f 0301 	mvn.w	r3, #1
 8015670:	e020      	b.n	80156b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	691b      	ldr	r3, [r3, #16]
 801567c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801567e:	f107 0314 	add.w	r3, r7, #20
 8015682:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015686:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015688:	2b00      	cmp	r3, #0
 801568a:	d00c      	beq.n	80156a6 <ip4_output_if_src+0x12e>
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	891a      	ldrh	r2, [r3, #8]
 8015690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015694:	429a      	cmp	r2, r3
 8015696:	d906      	bls.n	80156a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f000 fde3 	bl	8016268 <ip4_frag>
 80156a2:	4603      	mov	r3, r0
 80156a4:	e006      	b.n	80156b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80156a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a8:	695b      	ldr	r3, [r3, #20]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	68f9      	ldr	r1, [r7, #12]
 80156ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156b0:	4798      	blx	r3
 80156b2:	4603      	mov	r3, r0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3720      	adds	r7, #32
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	0801b068 	.word	0x0801b068
 80156c0:	0801b09c 	.word	0x0801b09c
 80156c4:	0801b0a8 	.word	0x0801b0a8
 80156c8:	0801b0d0 	.word	0x0801b0d0
 80156cc:	20008f4e 	.word	0x20008f4e
 80156d0:	0801b68c 	.word	0x0801b68c

080156d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b085      	sub	sp, #20
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156e8:	d002      	beq.n	80156f0 <ip4_addr_isbroadcast_u32+0x1c>
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d101      	bne.n	80156f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80156f0:	2301      	movs	r3, #1
 80156f2:	e02a      	b.n	801574a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156fa:	f003 0302 	and.w	r3, r3, #2
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d101      	bne.n	8015706 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015702:	2300      	movs	r3, #0
 8015704:	e021      	b.n	801574a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	3304      	adds	r3, #4
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	687a      	ldr	r2, [r7, #4]
 801570e:	429a      	cmp	r2, r3
 8015710:	d101      	bne.n	8015716 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015712:	2300      	movs	r3, #0
 8015714:	e019      	b.n	801574a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015716:	68fa      	ldr	r2, [r7, #12]
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	3304      	adds	r3, #4
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	405a      	eors	r2, r3
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	3308      	adds	r3, #8
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4013      	ands	r3, r2
 8015728:	2b00      	cmp	r3, #0
 801572a:	d10d      	bne.n	8015748 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	3308      	adds	r3, #8
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	43da      	mvns	r2, r3
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	3308      	adds	r3, #8
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015740:	429a      	cmp	r2, r3
 8015742:	d101      	bne.n	8015748 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015744:	2301      	movs	r3, #1
 8015746:	e000      	b.n	801574a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015748:	2300      	movs	r3, #0
  }
}
 801574a:	4618      	mov	r0, r3
 801574c:	3714      	adds	r7, #20
 801574e:	46bd      	mov	sp, r7
 8015750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015754:	4770      	bx	lr
	...

08015758 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015760:	2210      	movs	r2, #16
 8015762:	4904      	ldr	r1, [pc, #16]	; (8015774 <ip4addr_ntoa+0x1c>)
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f000 f807 	bl	8015778 <ip4addr_ntoa_r>
 801576a:	4603      	mov	r3, r0
}
 801576c:	4618      	mov	r0, r3
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	20008f50 	.word	0x20008f50

08015778 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015778:	b480      	push	{r7}
 801577a:	b08d      	sub	sp, #52	; 0x34
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8015784:	2300      	movs	r3, #0
 8015786:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8015792:	f107 0318 	add.w	r3, r7, #24
 8015796:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8015798:	2300      	movs	r3, #0
 801579a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801579e:	e058      	b.n	8015852 <ip4addr_ntoa_r+0xda>
    i = 0;
 80157a0:	2300      	movs	r3, #0
 80157a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80157a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a8:	781a      	ldrb	r2, [r3, #0]
 80157aa:	4b32      	ldr	r3, [pc, #200]	; (8015874 <ip4addr_ntoa_r+0xfc>)
 80157ac:	fba3 1302 	umull	r1, r3, r3, r2
 80157b0:	08d9      	lsrs	r1, r3, #3
 80157b2:	460b      	mov	r3, r1
 80157b4:	009b      	lsls	r3, r3, #2
 80157b6:	440b      	add	r3, r1
 80157b8:	005b      	lsls	r3, r3, #1
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80157be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	4a2c      	ldr	r2, [pc, #176]	; (8015874 <ip4addr_ntoa_r+0xfc>)
 80157c4:	fba2 2303 	umull	r2, r3, r2, r3
 80157c8:	08db      	lsrs	r3, r3, #3
 80157ca:	b2da      	uxtb	r2, r3
 80157cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ce:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80157d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80157d4:	1c5a      	adds	r2, r3, #1
 80157d6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80157da:	4619      	mov	r1, r3
 80157dc:	7ffb      	ldrb	r3, [r7, #31]
 80157de:	3330      	adds	r3, #48	; 0x30
 80157e0:	b2da      	uxtb	r2, r3
 80157e2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80157e6:	443b      	add	r3, r7
 80157e8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80157ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d1d8      	bne.n	80157a6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80157f4:	e011      	b.n	801581a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80157f6:	6a3b      	ldr	r3, [r7, #32]
 80157f8:	1c5a      	adds	r2, r3, #1
 80157fa:	623a      	str	r2, [r7, #32]
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	429a      	cmp	r2, r3
 8015800:	dc01      	bgt.n	8015806 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8015802:	2300      	movs	r3, #0
 8015804:	e030      	b.n	8015868 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8015806:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580c:	1c59      	adds	r1, r3, #1
 801580e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015810:	3230      	adds	r2, #48	; 0x30
 8015812:	443a      	add	r2, r7
 8015814:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8015818:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801581a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801581e:	1e5a      	subs	r2, r3, #1
 8015820:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1e6      	bne.n	80157f6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8015828:	6a3b      	ldr	r3, [r7, #32]
 801582a:	1c5a      	adds	r2, r3, #1
 801582c:	623a      	str	r2, [r7, #32]
 801582e:	687a      	ldr	r2, [r7, #4]
 8015830:	429a      	cmp	r2, r3
 8015832:	dc01      	bgt.n	8015838 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8015834:	2300      	movs	r3, #0
 8015836:	e017      	b.n	8015868 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8015838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583a:	1c5a      	adds	r2, r3, #1
 801583c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801583e:	222e      	movs	r2, #46	; 0x2e
 8015840:	701a      	strb	r2, [r3, #0]
    ap++;
 8015842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015844:	3301      	adds	r3, #1
 8015846:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8015848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801584c:	3301      	adds	r3, #1
 801584e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015856:	2b03      	cmp	r3, #3
 8015858:	d9a2      	bls.n	80157a0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585c:	3b01      	subs	r3, #1
 801585e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015862:	2200      	movs	r2, #0
 8015864:	701a      	strb	r2, [r3, #0]
  return buf;
 8015866:	68bb      	ldr	r3, [r7, #8]
}
 8015868:	4618      	mov	r0, r3
 801586a:	3734      	adds	r7, #52	; 0x34
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr
 8015874:	cccccccd 	.word	0xcccccccd

08015878 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801587e:	2300      	movs	r3, #0
 8015880:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015882:	4b12      	ldr	r3, [pc, #72]	; (80158cc <ip_reass_tmr+0x54>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015888:	e018      	b.n	80158bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	7fdb      	ldrb	r3, [r3, #31]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00b      	beq.n	80158aa <ip_reass_tmr+0x32>
      r->timer--;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	7fdb      	ldrb	r3, [r3, #31]
 8015896:	3b01      	subs	r3, #1
 8015898:	b2da      	uxtb	r2, r3
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	e008      	b.n	80158bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80158b4:	68b9      	ldr	r1, [r7, #8]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f000 f80a 	bl	80158d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d1e3      	bne.n	801588a <ip_reass_tmr+0x12>
    }
  }
}
 80158c2:	bf00      	nop
 80158c4:	bf00      	nop
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	20008f60 	.word	0x20008f60

080158d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b088      	sub	sp, #32
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80158da:	2300      	movs	r3, #0
 80158dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80158de:	683a      	ldr	r2, [r7, #0]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d105      	bne.n	80158f2 <ip_reass_free_complete_datagram+0x22>
 80158e6:	4b45      	ldr	r3, [pc, #276]	; (80159fc <ip_reass_free_complete_datagram+0x12c>)
 80158e8:	22ab      	movs	r2, #171	; 0xab
 80158ea:	4945      	ldr	r1, [pc, #276]	; (8015a00 <ip_reass_free_complete_datagram+0x130>)
 80158ec:	4845      	ldr	r0, [pc, #276]	; (8015a04 <ip_reass_free_complete_datagram+0x134>)
 80158ee:	f001 ffa3 	bl	8017838 <iprintf>
  if (prev != NULL) {
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d00a      	beq.n	801590e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d005      	beq.n	801590e <ip_reass_free_complete_datagram+0x3e>
 8015902:	4b3e      	ldr	r3, [pc, #248]	; (80159fc <ip_reass_free_complete_datagram+0x12c>)
 8015904:	22ad      	movs	r2, #173	; 0xad
 8015906:	4940      	ldr	r1, [pc, #256]	; (8015a08 <ip_reass_free_complete_datagram+0x138>)
 8015908:	483e      	ldr	r0, [pc, #248]	; (8015a04 <ip_reass_free_complete_datagram+0x134>)
 801590a:	f001 ff95 	bl	8017838 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	889b      	ldrh	r3, [r3, #4]
 801591a:	b29b      	uxth	r3, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	d12a      	bne.n	8015976 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	6858      	ldr	r0, [r3, #4]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	3308      	adds	r3, #8
 8015936:	2214      	movs	r2, #20
 8015938:	4619      	mov	r1, r3
 801593a:	f001 ff67 	bl	801780c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801593e:	2101      	movs	r1, #1
 8015940:	69b8      	ldr	r0, [r7, #24]
 8015942:	f7ff fbb7 	bl	80150b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015946:	69b8      	ldr	r0, [r7, #24]
 8015948:	f7f8 f892 	bl	800da70 <pbuf_clen>
 801594c:	4603      	mov	r3, r0
 801594e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015950:	8bfa      	ldrh	r2, [r7, #30]
 8015952:	8a7b      	ldrh	r3, [r7, #18]
 8015954:	4413      	add	r3, r2
 8015956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801595a:	db05      	blt.n	8015968 <ip_reass_free_complete_datagram+0x98>
 801595c:	4b27      	ldr	r3, [pc, #156]	; (80159fc <ip_reass_free_complete_datagram+0x12c>)
 801595e:	22bc      	movs	r2, #188	; 0xbc
 8015960:	492a      	ldr	r1, [pc, #168]	; (8015a0c <ip_reass_free_complete_datagram+0x13c>)
 8015962:	4828      	ldr	r0, [pc, #160]	; (8015a04 <ip_reass_free_complete_datagram+0x134>)
 8015964:	f001 ff68 	bl	8017838 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015968:	8bfa      	ldrh	r2, [r7, #30]
 801596a:	8a7b      	ldrh	r3, [r7, #18]
 801596c:	4413      	add	r3, r2
 801596e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015970:	69b8      	ldr	r0, [r7, #24]
 8015972:	f7f7 fff5 	bl	800d960 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801597c:	e01f      	b.n	80159be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015984:	69bb      	ldr	r3, [r7, #24]
 8015986:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f7f8 f86e 	bl	800da70 <pbuf_clen>
 8015994:	4603      	mov	r3, r0
 8015996:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015998:	8bfa      	ldrh	r2, [r7, #30]
 801599a:	8a7b      	ldrh	r3, [r7, #18]
 801599c:	4413      	add	r3, r2
 801599e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159a2:	db05      	blt.n	80159b0 <ip_reass_free_complete_datagram+0xe0>
 80159a4:	4b15      	ldr	r3, [pc, #84]	; (80159fc <ip_reass_free_complete_datagram+0x12c>)
 80159a6:	22cc      	movs	r2, #204	; 0xcc
 80159a8:	4918      	ldr	r1, [pc, #96]	; (8015a0c <ip_reass_free_complete_datagram+0x13c>)
 80159aa:	4816      	ldr	r0, [pc, #88]	; (8015a04 <ip_reass_free_complete_datagram+0x134>)
 80159ac:	f001 ff44 	bl	8017838 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159b0:	8bfa      	ldrh	r2, [r7, #30]
 80159b2:	8a7b      	ldrh	r3, [r7, #18]
 80159b4:	4413      	add	r3, r2
 80159b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f7f7 ffd1 	bl	800d960 <pbuf_free>
  while (p != NULL) {
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d1dc      	bne.n	801597e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f000 f8c2 	bl	8015b50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80159cc:	4b10      	ldr	r3, [pc, #64]	; (8015a10 <ip_reass_free_complete_datagram+0x140>)
 80159ce:	881b      	ldrh	r3, [r3, #0]
 80159d0:	8bfa      	ldrh	r2, [r7, #30]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d905      	bls.n	80159e2 <ip_reass_free_complete_datagram+0x112>
 80159d6:	4b09      	ldr	r3, [pc, #36]	; (80159fc <ip_reass_free_complete_datagram+0x12c>)
 80159d8:	22d2      	movs	r2, #210	; 0xd2
 80159da:	490e      	ldr	r1, [pc, #56]	; (8015a14 <ip_reass_free_complete_datagram+0x144>)
 80159dc:	4809      	ldr	r0, [pc, #36]	; (8015a04 <ip_reass_free_complete_datagram+0x134>)
 80159de:	f001 ff2b 	bl	8017838 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80159e2:	4b0b      	ldr	r3, [pc, #44]	; (8015a10 <ip_reass_free_complete_datagram+0x140>)
 80159e4:	881a      	ldrh	r2, [r3, #0]
 80159e6:	8bfb      	ldrh	r3, [r7, #30]
 80159e8:	1ad3      	subs	r3, r2, r3
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	4b08      	ldr	r3, [pc, #32]	; (8015a10 <ip_reass_free_complete_datagram+0x140>)
 80159ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80159f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3720      	adds	r7, #32
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	0801b100 	.word	0x0801b100
 8015a00:	0801b13c 	.word	0x0801b13c
 8015a04:	0801b148 	.word	0x0801b148
 8015a08:	0801b170 	.word	0x0801b170
 8015a0c:	0801b184 	.word	0x0801b184
 8015a10:	20008f64 	.word	0x20008f64
 8015a14:	0801b1a4 	.word	0x0801b1a4

08015a18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b08a      	sub	sp, #40	; 0x28
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015a22:	2300      	movs	r3, #0
 8015a24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015a26:	2300      	movs	r3, #0
 8015a28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015a32:	2300      	movs	r3, #0
 8015a34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015a36:	4b28      	ldr	r3, [pc, #160]	; (8015ad8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015a3c:	e030      	b.n	8015aa0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a40:	695a      	ldr	r2, [r3, #20]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	68db      	ldr	r3, [r3, #12]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d10c      	bne.n	8015a64 <ip_reass_remove_oldest_datagram+0x4c>
 8015a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a4c:	699a      	ldr	r2, [r3, #24]
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	691b      	ldr	r3, [r3, #16]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d106      	bne.n	8015a64 <ip_reass_remove_oldest_datagram+0x4c>
 8015a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a58:	899a      	ldrh	r2, [r3, #12]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	889b      	ldrh	r3, [r3, #4]
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d014      	beq.n	8015a8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	3301      	adds	r3, #1
 8015a68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a6a:	6a3b      	ldr	r3, [r7, #32]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d104      	bne.n	8015a7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	61bb      	str	r3, [r7, #24]
 8015a78:	e009      	b.n	8015a8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7c:	7fda      	ldrb	r2, [r3, #31]
 8015a7e:	6a3b      	ldr	r3, [r7, #32]
 8015a80:	7fdb      	ldrb	r3, [r3, #31]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d803      	bhi.n	8015a8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d001      	beq.n	8015a9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d1cb      	bne.n	8015a3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015aa6:	6a3b      	ldr	r3, [r7, #32]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d008      	beq.n	8015abe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015aac:	69b9      	ldr	r1, [r7, #24]
 8015aae:	6a38      	ldr	r0, [r7, #32]
 8015ab0:	f7ff ff0e 	bl	80158d0 <ip_reass_free_complete_datagram>
 8015ab4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	4413      	add	r3, r2
 8015abc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015abe:	697a      	ldr	r2, [r7, #20]
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	da02      	bge.n	8015acc <ip_reass_remove_oldest_datagram+0xb4>
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	dcac      	bgt.n	8015a26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015acc:	697b      	ldr	r3, [r7, #20]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3728      	adds	r7, #40	; 0x28
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	20008f60 	.word	0x20008f60

08015adc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ae6:	2004      	movs	r0, #4
 8015ae8:	f7f7 f854 	bl	800cb94 <memp_malloc>
 8015aec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d110      	bne.n	8015b16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015af4:	6839      	ldr	r1, [r7, #0]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7ff ff8e 	bl	8015a18 <ip_reass_remove_oldest_datagram>
 8015afc:	4602      	mov	r2, r0
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	4293      	cmp	r3, r2
 8015b02:	dc03      	bgt.n	8015b0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b04:	2004      	movs	r0, #4
 8015b06:	f7f7 f845 	bl	800cb94 <memp_malloc>
 8015b0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d101      	bne.n	8015b16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015b12:	2300      	movs	r3, #0
 8015b14:	e016      	b.n	8015b44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015b16:	2220      	movs	r2, #32
 8015b18:	2100      	movs	r1, #0
 8015b1a:	68f8      	ldr	r0, [r7, #12]
 8015b1c:	f001 fe84 	bl	8017828 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	220f      	movs	r2, #15
 8015b24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015b26:	4b09      	ldr	r3, [pc, #36]	; (8015b4c <ip_reass_enqueue_new_datagram+0x70>)
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015b2e:	4a07      	ldr	r2, [pc, #28]	; (8015b4c <ip_reass_enqueue_new_datagram+0x70>)
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	3308      	adds	r3, #8
 8015b38:	2214      	movs	r2, #20
 8015b3a:	6879      	ldr	r1, [r7, #4]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f001 fe65 	bl	801780c <memcpy>
  return ipr;
 8015b42:	68fb      	ldr	r3, [r7, #12]
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3710      	adds	r7, #16
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	20008f60 	.word	0x20008f60

08015b50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b5a:	4b10      	ldr	r3, [pc, #64]	; (8015b9c <ip_reass_dequeue_datagram+0x4c>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d104      	bne.n	8015b6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	4a0c      	ldr	r2, [pc, #48]	; (8015b9c <ip_reass_dequeue_datagram+0x4c>)
 8015b6a:	6013      	str	r3, [r2, #0]
 8015b6c:	e00d      	b.n	8015b8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d106      	bne.n	8015b82 <ip_reass_dequeue_datagram+0x32>
 8015b74:	4b0a      	ldr	r3, [pc, #40]	; (8015ba0 <ip_reass_dequeue_datagram+0x50>)
 8015b76:	f240 1245 	movw	r2, #325	; 0x145
 8015b7a:	490a      	ldr	r1, [pc, #40]	; (8015ba4 <ip_reass_dequeue_datagram+0x54>)
 8015b7c:	480a      	ldr	r0, [pc, #40]	; (8015ba8 <ip_reass_dequeue_datagram+0x58>)
 8015b7e:	f001 fe5b 	bl	8017838 <iprintf>
    prev->next = ipr->next;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b8a:	6879      	ldr	r1, [r7, #4]
 8015b8c:	2004      	movs	r0, #4
 8015b8e:	f7f7 f871 	bl	800cc74 <memp_free>
}
 8015b92:	bf00      	nop
 8015b94:	3708      	adds	r7, #8
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	20008f60 	.word	0x20008f60
 8015ba0:	0801b100 	.word	0x0801b100
 8015ba4:	0801b1c8 	.word	0x0801b1c8
 8015ba8:	0801b148 	.word	0x0801b148

08015bac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08c      	sub	sp, #48	; 0x30
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	885b      	ldrh	r3, [r3, #2]
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7f6 fb69 	bl	800c2a4 <lwip_htons>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015bd6:	69fb      	ldr	r3, [r7, #28]
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	f003 030f 	and.w	r3, r3, #15
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015be4:	7e7b      	ldrb	r3, [r7, #25]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	8b7a      	ldrh	r2, [r7, #26]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d202      	bcs.n	8015bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bee:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf2:	e135      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015bf4:	7e7b      	ldrb	r3, [r7, #25]
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	8b7a      	ldrh	r2, [r7, #26]
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	88db      	ldrh	r3, [r3, #6]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	4618      	mov	r0, r3
 8015c06:	f7f6 fb4d 	bl	800c2a4 <lwip_htons>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1e:	2200      	movs	r2, #0
 8015c20:	701a      	strb	r2, [r3, #0]
 8015c22:	2200      	movs	r2, #0
 8015c24:	705a      	strb	r2, [r3, #1]
 8015c26:	2200      	movs	r2, #0
 8015c28:	709a      	strb	r2, [r3, #2]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c30:	8afa      	ldrh	r2, [r7, #22]
 8015c32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015c34:	8afa      	ldrh	r2, [r7, #22]
 8015c36:	8b7b      	ldrh	r3, [r7, #26]
 8015c38:	4413      	add	r3, r2
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c42:	88db      	ldrh	r3, [r3, #6]
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	8afa      	ldrh	r2, [r7, #22]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d902      	bls.n	8015c52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c50:	e106      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	627b      	str	r3, [r7, #36]	; 0x24
 8015c58:	e068      	b.n	8015d2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c62:	889b      	ldrh	r3, [r3, #4]
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	889b      	ldrh	r3, [r3, #4]
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d235      	bcs.n	8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d020      	beq.n	8015cbe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7e:	889b      	ldrh	r3, [r3, #4]
 8015c80:	b29a      	uxth	r2, r3
 8015c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c84:	88db      	ldrh	r3, [r3, #6]
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d307      	bcc.n	8015c9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8e:	88db      	ldrh	r3, [r3, #6]
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	889b      	ldrh	r3, [r3, #4]
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d902      	bls.n	8015ca2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca0:	e0de      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015caa:	88db      	ldrh	r3, [r3, #6]
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb0:	889b      	ldrh	r3, [r3, #4]
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d03d      	beq.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015cbc:	e03a      	b.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc0:	88db      	ldrh	r3, [r3, #6]
 8015cc2:	b29a      	uxth	r2, r3
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	889b      	ldrh	r3, [r3, #4]
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d902      	bls.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cce:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd2:	e0c5      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	68ba      	ldr	r2, [r7, #8]
 8015cd8:	605a      	str	r2, [r3, #4]
      break;
 8015cda:	e02b      	b.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cde:	889b      	ldrh	r3, [r3, #4]
 8015ce0:	b29a      	uxth	r2, r3
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	889b      	ldrh	r3, [r3, #4]
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d102      	bne.n	8015cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cec:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf0:	e0b6      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf4:	889b      	ldrh	r3, [r3, #4]
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	88db      	ldrh	r3, [r3, #6]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d202      	bcs.n	8015d08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d02:	f04f 33ff 	mov.w	r3, #4294967295
 8015d06:	e0ab      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d009      	beq.n	8015d22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d10:	88db      	ldrh	r3, [r3, #6]
 8015d12:	b29a      	uxth	r2, r3
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	889b      	ldrh	r3, [r3, #4]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d001      	beq.n	8015d22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d193      	bne.n	8015c5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015d32:	e000      	b.n	8015d36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015d34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d12d      	bne.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d01c      	beq.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d44:	88db      	ldrh	r3, [r3, #6]
 8015d46:	b29a      	uxth	r2, r3
 8015d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4a:	889b      	ldrh	r3, [r3, #4]
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d906      	bls.n	8015d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d52:	4b45      	ldr	r3, [pc, #276]	; (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d54:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015d58:	4944      	ldr	r1, [pc, #272]	; (8015e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d5a:	4845      	ldr	r0, [pc, #276]	; (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d5c:	f001 fd6c 	bl	8017838 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d62:	68ba      	ldr	r2, [r7, #8]
 8015d64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d68:	88db      	ldrh	r3, [r3, #6]
 8015d6a:	b29a      	uxth	r2, r3
 8015d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6e:	889b      	ldrh	r3, [r3, #4]
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d010      	beq.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	623b      	str	r3, [r7, #32]
 8015d7a:	e00d      	b.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d006      	beq.n	8015d92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d84:	4b38      	ldr	r3, [pc, #224]	; (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d86:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015d8a:	493a      	ldr	r1, [pc, #232]	; (8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d8c:	4838      	ldr	r0, [pc, #224]	; (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d8e:	f001 fd53 	bl	8017838 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	68ba      	ldr	r2, [r7, #8]
 8015d96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d105      	bne.n	8015daa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	7f9b      	ldrb	r3, [r3, #30]
 8015da2:	f003 0301 	and.w	r3, r3, #1
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d059      	beq.n	8015e5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015daa:	6a3b      	ldr	r3, [r7, #32]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d04f      	beq.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d006      	beq.n	8015dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	685b      	ldr	r3, [r3, #4]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	889b      	ldrh	r3, [r3, #4]
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d002      	beq.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	623b      	str	r3, [r7, #32]
 8015dca:	e041      	b.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015dd6:	e012      	b.n	8015dfe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de0:	88db      	ldrh	r3, [r3, #6]
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de6:	889b      	ldrh	r3, [r3, #4]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d002      	beq.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	623b      	str	r3, [r7, #32]
            break;
 8015df2:	e007      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d1e9      	bne.n	8015dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015e04:	6a3b      	ldr	r3, [r7, #32]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d022      	beq.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d106      	bne.n	8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015e12:	4b15      	ldr	r3, [pc, #84]	; (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e14:	f240 12df 	movw	r2, #479	; 0x1df
 8015e18:	4917      	ldr	r1, [pc, #92]	; (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e1a:	4815      	ldr	r0, [pc, #84]	; (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e1c:	f001 fd0c 	bl	8017838 <iprintf>
          LWIP_ASSERT("sanity check",
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d106      	bne.n	8015e3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015e2c:	4b0e      	ldr	r3, [pc, #56]	; (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015e32:	4911      	ldr	r1, [pc, #68]	; (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e34:	480e      	ldr	r0, [pc, #56]	; (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e36:	f001 fcff 	bl	8017838 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d006      	beq.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015e42:	4b09      	ldr	r3, [pc, #36]	; (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015e48:	490c      	ldr	r1, [pc, #48]	; (8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e4a:	4809      	ldr	r0, [pc, #36]	; (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e4c:	f001 fcf4 	bl	8017838 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e50:	6a3b      	ldr	r3, [r7, #32]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	bf14      	ite	ne
 8015e56:	2301      	movne	r3, #1
 8015e58:	2300      	moveq	r3, #0
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	e000      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e5e:	2300      	movs	r3, #0
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3730      	adds	r7, #48	; 0x30
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	0801b100 	.word	0x0801b100
 8015e6c:	0801b1e4 	.word	0x0801b1e4
 8015e70:	0801b148 	.word	0x0801b148
 8015e74:	0801b204 	.word	0x0801b204
 8015e78:	0801b23c 	.word	0x0801b23c
 8015e7c:	0801b24c 	.word	0x0801b24c

08015e80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b08e      	sub	sp, #56	; 0x38
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	f003 030f 	and.w	r3, r3, #15
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	009b      	lsls	r3, r3, #2
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	2b14      	cmp	r3, #20
 8015e9e:	f040 8171 	bne.w	8016184 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea4:	88db      	ldrh	r3, [r3, #6]
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f6 f9fb 	bl	800c2a4 <lwip_htons>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	00db      	lsls	r3, r3, #3
 8015eb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ebc:	885b      	ldrh	r3, [r3, #2]
 8015ebe:	b29b      	uxth	r3, r3
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f7f6 f9ef 	bl	800c2a4 <lwip_htons>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	f003 030f 	and.w	r3, r3, #15
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	f0c0 8150 	bcc.w	8016188 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7f7 fdbb 	bl	800da70 <pbuf_clen>
 8015efa:	4603      	mov	r3, r0
 8015efc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015efe:	4b8c      	ldr	r3, [pc, #560]	; (8016130 <ip4_reass+0x2b0>)
 8015f00:	881b      	ldrh	r3, [r3, #0]
 8015f02:	461a      	mov	r2, r3
 8015f04:	8c3b      	ldrh	r3, [r7, #32]
 8015f06:	4413      	add	r3, r2
 8015f08:	2b0a      	cmp	r3, #10
 8015f0a:	dd10      	ble.n	8015f2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f0c:	8c3b      	ldrh	r3, [r7, #32]
 8015f0e:	4619      	mov	r1, r3
 8015f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f12:	f7ff fd81 	bl	8015a18 <ip_reass_remove_oldest_datagram>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f000 8137 	beq.w	801618c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015f1e:	4b84      	ldr	r3, [pc, #528]	; (8016130 <ip4_reass+0x2b0>)
 8015f20:	881b      	ldrh	r3, [r3, #0]
 8015f22:	461a      	mov	r2, r3
 8015f24:	8c3b      	ldrh	r3, [r7, #32]
 8015f26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f28:	2b0a      	cmp	r3, #10
 8015f2a:	f300 812f 	bgt.w	801618c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f2e:	4b81      	ldr	r3, [pc, #516]	; (8016134 <ip4_reass+0x2b4>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	633b      	str	r3, [r7, #48]	; 0x30
 8015f34:	e015      	b.n	8015f62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f38:	695a      	ldr	r2, [r3, #20]
 8015f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d10c      	bne.n	8015f5c <ip4_reass+0xdc>
 8015f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f44:	699a      	ldr	r2, [r3, #24]
 8015f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f48:	691b      	ldr	r3, [r3, #16]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d106      	bne.n	8015f5c <ip4_reass+0xdc>
 8015f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f50:	899a      	ldrh	r2, [r3, #12]
 8015f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f54:	889b      	ldrh	r3, [r3, #4]
 8015f56:	b29b      	uxth	r3, r3
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d006      	beq.n	8015f6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	633b      	str	r3, [r7, #48]	; 0x30
 8015f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d1e6      	bne.n	8015f36 <ip4_reass+0xb6>
 8015f68:	e000      	b.n	8015f6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d109      	bne.n	8015f86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f72:	8c3b      	ldrh	r3, [r7, #32]
 8015f74:	4619      	mov	r1, r3
 8015f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f78:	f7ff fdb0 	bl	8015adc <ip_reass_enqueue_new_datagram>
 8015f7c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d11c      	bne.n	8015fbe <ip4_reass+0x13e>
      goto nullreturn;
 8015f84:	e105      	b.n	8016192 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f88:	88db      	ldrh	r3, [r3, #6]
 8015f8a:	b29b      	uxth	r3, r3
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7f6 f989 	bl	800c2a4 <lwip_htons>
 8015f92:	4603      	mov	r3, r0
 8015f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d110      	bne.n	8015fbe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9e:	89db      	ldrh	r3, [r3, #14]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7f6 f97f 	bl	800c2a4 <lwip_htons>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d006      	beq.n	8015fbe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb2:	3308      	adds	r3, #8
 8015fb4:	2214      	movs	r2, #20
 8015fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f001 fc27 	bl	801780c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc0:	88db      	ldrh	r3, [r3, #6]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	f003 0320 	and.w	r3, r3, #32
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	bf0c      	ite	eq
 8015fcc:	2301      	moveq	r3, #1
 8015fce:	2300      	movne	r3, #0
 8015fd0:	b2db      	uxtb	r3, r3
 8015fd2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00e      	beq.n	8015ff8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015fda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fde:	4413      	add	r3, r2
 8015fe0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015fe2:	8b7a      	ldrh	r2, [r7, #26]
 8015fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	f0c0 80a0 	bcc.w	801612c <ip4_reass+0x2ac>
 8015fec:	8b7b      	ldrh	r3, [r7, #26]
 8015fee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	f200 809a 	bhi.w	801612c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015ff8:	69fa      	ldr	r2, [r7, #28]
 8015ffa:	6879      	ldr	r1, [r7, #4]
 8015ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ffe:	f7ff fdd5 	bl	8015bac <ip_reass_chain_frag_into_datagram_and_validate>
 8016002:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801600a:	f000 809b 	beq.w	8016144 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801600e:	4b48      	ldr	r3, [pc, #288]	; (8016130 <ip4_reass+0x2b0>)
 8016010:	881a      	ldrh	r2, [r3, #0]
 8016012:	8c3b      	ldrh	r3, [r7, #32]
 8016014:	4413      	add	r3, r2
 8016016:	b29a      	uxth	r2, r3
 8016018:	4b45      	ldr	r3, [pc, #276]	; (8016130 <ip4_reass+0x2b0>)
 801601a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00d      	beq.n	801603e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016026:	4413      	add	r3, r2
 8016028:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602c:	8a7a      	ldrh	r2, [r7, #18]
 801602e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016032:	7f9b      	ldrb	r3, [r3, #30]
 8016034:	f043 0301 	orr.w	r3, r3, #1
 8016038:	b2da      	uxtb	r2, r3
 801603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	2b01      	cmp	r3, #1
 8016042:	d171      	bne.n	8016128 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	8b9b      	ldrh	r3, [r3, #28]
 8016048:	3314      	adds	r3, #20
 801604a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016060:	3308      	adds	r3, #8
 8016062:	2214      	movs	r2, #20
 8016064:	4619      	mov	r1, r3
 8016066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016068:	f001 fbd0 	bl	801780c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801606c:	8a3b      	ldrh	r3, [r7, #16]
 801606e:	4618      	mov	r0, r3
 8016070:	f7f6 f918 	bl	800c2a4 <lwip_htons>
 8016074:	4603      	mov	r3, r0
 8016076:	461a      	mov	r2, r3
 8016078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607e:	2200      	movs	r2, #0
 8016080:	719a      	strb	r2, [r3, #6]
 8016082:	2200      	movs	r2, #0
 8016084:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016088:	2200      	movs	r2, #0
 801608a:	729a      	strb	r2, [r3, #10]
 801608c:	2200      	movs	r2, #0
 801608e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016096:	e00d      	b.n	80160b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801609e:	2114      	movs	r1, #20
 80160a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80160a2:	f7f7 fbd7 	bl	800d854 <pbuf_remove_header>
      pbuf_cat(p, r);
 80160a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7f7 fd1b 	bl	800dae4 <pbuf_cat>
      r = iprh->next_pbuf;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80160b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1ee      	bne.n	8016098 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80160ba:	4b1e      	ldr	r3, [pc, #120]	; (8016134 <ip4_reass+0x2b4>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d102      	bne.n	80160ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80160c4:	2300      	movs	r3, #0
 80160c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160c8:	e010      	b.n	80160ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160ca:	4b1a      	ldr	r3, [pc, #104]	; (8016134 <ip4_reass+0x2b4>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160d0:	e007      	b.n	80160e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160d8:	429a      	cmp	r2, r3
 80160da:	d006      	beq.n	80160ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d1f4      	bne.n	80160d2 <ip4_reass+0x252>
 80160e8:	e000      	b.n	80160ec <ip4_reass+0x26c>
          break;
 80160ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80160ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80160ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160f0:	f7ff fd2e 	bl	8015b50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7f7 fcbb 	bl	800da70 <pbuf_clen>
 80160fa:	4603      	mov	r3, r0
 80160fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80160fe:	4b0c      	ldr	r3, [pc, #48]	; (8016130 <ip4_reass+0x2b0>)
 8016100:	881b      	ldrh	r3, [r3, #0]
 8016102:	8c3a      	ldrh	r2, [r7, #32]
 8016104:	429a      	cmp	r2, r3
 8016106:	d906      	bls.n	8016116 <ip4_reass+0x296>
 8016108:	4b0b      	ldr	r3, [pc, #44]	; (8016138 <ip4_reass+0x2b8>)
 801610a:	f240 229b 	movw	r2, #667	; 0x29b
 801610e:	490b      	ldr	r1, [pc, #44]	; (801613c <ip4_reass+0x2bc>)
 8016110:	480b      	ldr	r0, [pc, #44]	; (8016140 <ip4_reass+0x2c0>)
 8016112:	f001 fb91 	bl	8017838 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016116:	4b06      	ldr	r3, [pc, #24]	; (8016130 <ip4_reass+0x2b0>)
 8016118:	881a      	ldrh	r2, [r3, #0]
 801611a:	8c3b      	ldrh	r3, [r7, #32]
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	b29a      	uxth	r2, r3
 8016120:	4b03      	ldr	r3, [pc, #12]	; (8016130 <ip4_reass+0x2b0>)
 8016122:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	e038      	b.n	801619a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016128:	2300      	movs	r3, #0
 801612a:	e036      	b.n	801619a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801612c:	bf00      	nop
 801612e:	e00a      	b.n	8016146 <ip4_reass+0x2c6>
 8016130:	20008f64 	.word	0x20008f64
 8016134:	20008f60 	.word	0x20008f60
 8016138:	0801b100 	.word	0x0801b100
 801613c:	0801b270 	.word	0x0801b270
 8016140:	0801b148 	.word	0x0801b148
    goto nullreturn_ipr;
 8016144:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016148:	2b00      	cmp	r3, #0
 801614a:	d106      	bne.n	801615a <ip4_reass+0x2da>
 801614c:	4b15      	ldr	r3, [pc, #84]	; (80161a4 <ip4_reass+0x324>)
 801614e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016152:	4915      	ldr	r1, [pc, #84]	; (80161a8 <ip4_reass+0x328>)
 8016154:	4815      	ldr	r0, [pc, #84]	; (80161ac <ip4_reass+0x32c>)
 8016156:	f001 fb6f 	bl	8017838 <iprintf>
  if (ipr->p == NULL) {
 801615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d116      	bne.n	8016190 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016162:	4b13      	ldr	r3, [pc, #76]	; (80161b0 <ip4_reass+0x330>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016168:	429a      	cmp	r2, r3
 801616a:	d006      	beq.n	801617a <ip4_reass+0x2fa>
 801616c:	4b0d      	ldr	r3, [pc, #52]	; (80161a4 <ip4_reass+0x324>)
 801616e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016172:	4910      	ldr	r1, [pc, #64]	; (80161b4 <ip4_reass+0x334>)
 8016174:	480d      	ldr	r0, [pc, #52]	; (80161ac <ip4_reass+0x32c>)
 8016176:	f001 fb5f 	bl	8017838 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801617a:	2100      	movs	r1, #0
 801617c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801617e:	f7ff fce7 	bl	8015b50 <ip_reass_dequeue_datagram>
 8016182:	e006      	b.n	8016192 <ip4_reass+0x312>
    goto nullreturn;
 8016184:	bf00      	nop
 8016186:	e004      	b.n	8016192 <ip4_reass+0x312>
    goto nullreturn;
 8016188:	bf00      	nop
 801618a:	e002      	b.n	8016192 <ip4_reass+0x312>
      goto nullreturn;
 801618c:	bf00      	nop
 801618e:	e000      	b.n	8016192 <ip4_reass+0x312>
  }

nullreturn:
 8016190:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7f7 fbe4 	bl	800d960 <pbuf_free>
  return NULL;
 8016198:	2300      	movs	r3, #0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3738      	adds	r7, #56	; 0x38
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	0801b100 	.word	0x0801b100
 80161a8:	0801b28c 	.word	0x0801b28c
 80161ac:	0801b148 	.word	0x0801b148
 80161b0:	20008f60 	.word	0x20008f60
 80161b4:	0801b298 	.word	0x0801b298

080161b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80161bc:	2005      	movs	r0, #5
 80161be:	f7f6 fce9 	bl	800cb94 <memp_malloc>
 80161c2:	4603      	mov	r3, r0
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80161d6:	4b07      	ldr	r3, [pc, #28]	; (80161f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80161d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80161dc:	4906      	ldr	r1, [pc, #24]	; (80161f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80161de:	4807      	ldr	r0, [pc, #28]	; (80161fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80161e0:	f001 fb2a 	bl	8017838 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80161e4:	6879      	ldr	r1, [r7, #4]
 80161e6:	2005      	movs	r0, #5
 80161e8:	f7f6 fd44 	bl	800cc74 <memp_free>
}
 80161ec:	bf00      	nop
 80161ee:	3708      	adds	r7, #8
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}
 80161f4:	0801b100 	.word	0x0801b100
 80161f8:	0801b2b8 	.word	0x0801b2b8
 80161fc:	0801b148 	.word	0x0801b148

08016200 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d106      	bne.n	8016220 <ipfrag_free_pbuf_custom+0x20>
 8016212:	4b11      	ldr	r3, [pc, #68]	; (8016258 <ipfrag_free_pbuf_custom+0x58>)
 8016214:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016218:	4910      	ldr	r1, [pc, #64]	; (801625c <ipfrag_free_pbuf_custom+0x5c>)
 801621a:	4811      	ldr	r0, [pc, #68]	; (8016260 <ipfrag_free_pbuf_custom+0x60>)
 801621c:	f001 fb0c 	bl	8017838 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	429a      	cmp	r2, r3
 8016226:	d006      	beq.n	8016236 <ipfrag_free_pbuf_custom+0x36>
 8016228:	4b0b      	ldr	r3, [pc, #44]	; (8016258 <ipfrag_free_pbuf_custom+0x58>)
 801622a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801622e:	490d      	ldr	r1, [pc, #52]	; (8016264 <ipfrag_free_pbuf_custom+0x64>)
 8016230:	480b      	ldr	r0, [pc, #44]	; (8016260 <ipfrag_free_pbuf_custom+0x60>)
 8016232:	f001 fb01 	bl	8017838 <iprintf>
  if (pcr->original != NULL) {
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	695b      	ldr	r3, [r3, #20]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d004      	beq.n	8016248 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	695b      	ldr	r3, [r3, #20]
 8016242:	4618      	mov	r0, r3
 8016244:	f7f7 fb8c 	bl	800d960 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016248:	68f8      	ldr	r0, [r7, #12]
 801624a:	f7ff ffbd 	bl	80161c8 <ip_frag_free_pbuf_custom_ref>
}
 801624e:	bf00      	nop
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	0801b100 	.word	0x0801b100
 801625c:	0801b2c4 	.word	0x0801b2c4
 8016260:	0801b148 	.word	0x0801b148
 8016264:	0801b2d0 	.word	0x0801b2d0

08016268 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b094      	sub	sp, #80	; 0x50
 801626c:	af02      	add	r7, sp, #8
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016274:	2300      	movs	r3, #0
 8016276:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801627e:	3b14      	subs	r3, #20
 8016280:	2b00      	cmp	r3, #0
 8016282:	da00      	bge.n	8016286 <ip4_frag+0x1e>
 8016284:	3307      	adds	r3, #7
 8016286:	10db      	asrs	r3, r3, #3
 8016288:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801628a:	2314      	movs	r3, #20
 801628c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016296:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	f003 030f 	and.w	r3, r3, #15
 80162a0:	b2db      	uxtb	r3, r3
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	2b14      	cmp	r3, #20
 80162a8:	d002      	beq.n	80162b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80162aa:	f06f 0305 	mvn.w	r3, #5
 80162ae:	e110      	b.n	80164d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	895b      	ldrh	r3, [r3, #10]
 80162b4:	2b13      	cmp	r3, #19
 80162b6:	d809      	bhi.n	80162cc <ip4_frag+0x64>
 80162b8:	4b88      	ldr	r3, [pc, #544]	; (80164dc <ip4_frag+0x274>)
 80162ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80162be:	4988      	ldr	r1, [pc, #544]	; (80164e0 <ip4_frag+0x278>)
 80162c0:	4888      	ldr	r0, [pc, #544]	; (80164e4 <ip4_frag+0x27c>)
 80162c2:	f001 fab9 	bl	8017838 <iprintf>
 80162c6:	f06f 0305 	mvn.w	r3, #5
 80162ca:	e102      	b.n	80164d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80162cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ce:	88db      	ldrh	r3, [r3, #6]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7f5 ffe6 	bl	800c2a4 <lwip_htons>
 80162d8:	4603      	mov	r3, r0
 80162da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80162dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80162e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80162ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	891b      	ldrh	r3, [r3, #8]
 80162f2:	3b14      	subs	r3, #20
 80162f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80162f8:	e0e1      	b.n	80164be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80162fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162fc:	00db      	lsls	r3, r3, #3
 80162fe:	b29b      	uxth	r3, r3
 8016300:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016304:	4293      	cmp	r3, r2
 8016306:	bf28      	it	cs
 8016308:	4613      	movcs	r3, r2
 801630a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801630c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016310:	2114      	movs	r1, #20
 8016312:	200e      	movs	r0, #14
 8016314:	f7f7 f840 	bl	800d398 <pbuf_alloc>
 8016318:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	2b00      	cmp	r3, #0
 801631e:	f000 80d5 	beq.w	80164cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016324:	895b      	ldrh	r3, [r3, #10]
 8016326:	2b13      	cmp	r3, #19
 8016328:	d806      	bhi.n	8016338 <ip4_frag+0xd0>
 801632a:	4b6c      	ldr	r3, [pc, #432]	; (80164dc <ip4_frag+0x274>)
 801632c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016330:	496d      	ldr	r1, [pc, #436]	; (80164e8 <ip4_frag+0x280>)
 8016332:	486c      	ldr	r0, [pc, #432]	; (80164e4 <ip4_frag+0x27c>)
 8016334:	f001 fa80 	bl	8017838 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	2214      	movs	r2, #20
 801633e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016340:	4618      	mov	r0, r3
 8016342:	f001 fa63 	bl	801780c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801634c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801634e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016352:	e064      	b.n	801641e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	895a      	ldrh	r2, [r3, #10]
 8016358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801635a:	1ad3      	subs	r3, r2, r3
 801635c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	895b      	ldrh	r3, [r3, #10]
 8016362:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016364:	429a      	cmp	r2, r3
 8016366:	d906      	bls.n	8016376 <ip4_frag+0x10e>
 8016368:	4b5c      	ldr	r3, [pc, #368]	; (80164dc <ip4_frag+0x274>)
 801636a:	f240 322d 	movw	r2, #813	; 0x32d
 801636e:	495f      	ldr	r1, [pc, #380]	; (80164ec <ip4_frag+0x284>)
 8016370:	485c      	ldr	r0, [pc, #368]	; (80164e4 <ip4_frag+0x27c>)
 8016372:	f001 fa61 	bl	8017838 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016376:	8bfa      	ldrh	r2, [r7, #30]
 8016378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801637c:	4293      	cmp	r3, r2
 801637e:	bf28      	it	cs
 8016380:	4613      	movcs	r3, r2
 8016382:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801638a:	2b00      	cmp	r3, #0
 801638c:	d105      	bne.n	801639a <ip4_frag+0x132>
        poff = 0;
 801638e:	2300      	movs	r3, #0
 8016390:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	60fb      	str	r3, [r7, #12]
        continue;
 8016398:	e041      	b.n	801641e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801639a:	f7ff ff0d 	bl	80161b8 <ip_frag_alloc_pbuf_custom_ref>
 801639e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d103      	bne.n	80163ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80163a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163a8:	f7f7 fada 	bl	800d960 <pbuf_free>
        goto memerr;
 80163ac:	e08f      	b.n	80164ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80163b6:	4413      	add	r3, r2
 80163b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80163bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80163c0:	9201      	str	r2, [sp, #4]
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	4603      	mov	r3, r0
 80163c6:	2241      	movs	r2, #65	; 0x41
 80163c8:	2000      	movs	r0, #0
 80163ca:	f7f7 f90f 	bl	800d5ec <pbuf_alloced_custom>
 80163ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d106      	bne.n	80163e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80163d6:	69b8      	ldr	r0, [r7, #24]
 80163d8:	f7ff fef6 	bl	80161c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80163dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163de:	f7f7 fabf 	bl	800d960 <pbuf_free>
        goto memerr;
 80163e2:	e074      	b.n	80164ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f7f7 fb5b 	bl	800daa0 <pbuf_ref>
      pcr->original = p;
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	68fa      	ldr	r2, [r7, #12]
 80163ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	4a3f      	ldr	r2, [pc, #252]	; (80164f0 <ip4_frag+0x288>)
 80163f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80163f6:	6979      	ldr	r1, [r7, #20]
 80163f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163fa:	f7f7 fb73 	bl	800dae4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80163fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016406:	1ad3      	subs	r3, r2, r3
 8016408:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801640c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016410:	2b00      	cmp	r3, #0
 8016412:	d004      	beq.n	801641e <ip4_frag+0x1b6>
        poff = 0;
 8016414:	2300      	movs	r3, #0
 8016416:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801641e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016422:	2b00      	cmp	r3, #0
 8016424:	d196      	bne.n	8016354 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016426:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016428:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801642c:	4413      	add	r3, r2
 801642e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016434:	f1a3 0213 	sub.w	r2, r3, #19
 8016438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801643c:	429a      	cmp	r2, r3
 801643e:	bfcc      	ite	gt
 8016440:	2301      	movgt	r3, #1
 8016442:	2300      	movle	r3, #0
 8016444:	b2db      	uxtb	r3, r3
 8016446:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801644c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016450:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016452:	6a3b      	ldr	r3, [r7, #32]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d002      	beq.n	801645e <ip4_frag+0x1f6>
 8016458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801645a:	2b00      	cmp	r3, #0
 801645c:	d003      	beq.n	8016466 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801645e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016464:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016466:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016468:	4618      	mov	r0, r3
 801646a:	f7f5 ff1b 	bl	800c2a4 <lwip_htons>
 801646e:	4603      	mov	r3, r0
 8016470:	461a      	mov	r2, r3
 8016472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016474:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016476:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016478:	3314      	adds	r3, #20
 801647a:	b29b      	uxth	r3, r3
 801647c:	4618      	mov	r0, r3
 801647e:	f7f5 ff11 	bl	800c2a4 <lwip_htons>
 8016482:	4603      	mov	r3, r0
 8016484:	461a      	mov	r2, r3
 8016486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016488:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801648c:	2200      	movs	r2, #0
 801648e:	729a      	strb	r2, [r3, #10]
 8016490:	2200      	movs	r2, #0
 8016492:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	695b      	ldr	r3, [r3, #20]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801649c:	68b8      	ldr	r0, [r7, #8]
 801649e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164a2:	f7f7 fa5d 	bl	800d960 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80164a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80164ac:	1ad3      	subs	r3, r2, r3
 80164ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80164b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80164b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80164b8:	4413      	add	r3, r2
 80164ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80164be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	f47f af19 	bne.w	80162fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80164c8:	2300      	movs	r3, #0
 80164ca:	e002      	b.n	80164d2 <ip4_frag+0x26a>
      goto memerr;
 80164cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80164ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3748      	adds	r7, #72	; 0x48
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	0801b100 	.word	0x0801b100
 80164e0:	0801b2dc 	.word	0x0801b2dc
 80164e4:	0801b148 	.word	0x0801b148
 80164e8:	0801b2f8 	.word	0x0801b2f8
 80164ec:	0801b318 	.word	0x0801b318
 80164f0:	08016201 	.word	0x08016201

080164f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80164fe:	230e      	movs	r3, #14
 8016500:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	895b      	ldrh	r3, [r3, #10]
 8016506:	2b0e      	cmp	r3, #14
 8016508:	d96e      	bls.n	80165e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	7bdb      	ldrb	r3, [r3, #15]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d106      	bne.n	8016520 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016518:	3301      	adds	r3, #1
 801651a:	b2da      	uxtb	r2, r3
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	7b1a      	ldrb	r2, [r3, #12]
 801652a:	7b5b      	ldrb	r3, [r3, #13]
 801652c:	021b      	lsls	r3, r3, #8
 801652e:	4313      	orrs	r3, r2
 8016530:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	f003 0301 	and.w	r3, r3, #1
 801653a:	2b00      	cmp	r3, #0
 801653c:	d023      	beq.n	8016586 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	2b01      	cmp	r3, #1
 8016544:	d10f      	bne.n	8016566 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016546:	693b      	ldr	r3, [r7, #16]
 8016548:	785b      	ldrb	r3, [r3, #1]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d11b      	bne.n	8016586 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016552:	2b5e      	cmp	r3, #94	; 0x5e
 8016554:	d117      	bne.n	8016586 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	7b5b      	ldrb	r3, [r3, #13]
 801655a:	f043 0310 	orr.w	r3, r3, #16
 801655e:	b2da      	uxtb	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	735a      	strb	r2, [r3, #13]
 8016564:	e00f      	b.n	8016586 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	2206      	movs	r2, #6
 801656a:	4928      	ldr	r1, [pc, #160]	; (801660c <ethernet_input+0x118>)
 801656c:	4618      	mov	r0, r3
 801656e:	f001 f93d 	bl	80177ec <memcmp>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d106      	bne.n	8016586 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	7b5b      	ldrb	r3, [r3, #13]
 801657c:	f043 0308 	orr.w	r3, r3, #8
 8016580:	b2da      	uxtb	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016586:	89fb      	ldrh	r3, [r7, #14]
 8016588:	2b08      	cmp	r3, #8
 801658a:	d003      	beq.n	8016594 <ethernet_input+0xa0>
 801658c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016590:	d014      	beq.n	80165bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016592:	e032      	b.n	80165fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801659a:	f003 0308 	and.w	r3, r3, #8
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d024      	beq.n	80165ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165a2:	8afb      	ldrh	r3, [r7, #22]
 80165a4:	4619      	mov	r1, r3
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7f7 f954 	bl	800d854 <pbuf_remove_header>
 80165ac:	4603      	mov	r3, r0
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d11e      	bne.n	80165f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80165b2:	6839      	ldr	r1, [r7, #0]
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7fe fe91 	bl	80152dc <ip4_input>
      break;
 80165ba:	e013      	b.n	80165e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80165c2:	f003 0308 	and.w	r3, r3, #8
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d014      	beq.n	80165f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165ca:	8afb      	ldrh	r3, [r7, #22]
 80165cc:	4619      	mov	r1, r3
 80165ce:	6878      	ldr	r0, [r7, #4]
 80165d0:	f7f7 f940 	bl	800d854 <pbuf_remove_header>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d10e      	bne.n	80165f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f7fe f831 	bl	8014644 <etharp_input>
      break;
 80165e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	e00c      	b.n	8016602 <ethernet_input+0x10e>
    goto free_and_return;
 80165e8:	bf00      	nop
 80165ea:	e006      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165ec:	bf00      	nop
 80165ee:	e004      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165f0:	bf00      	nop
 80165f2:	e002      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165f4:	bf00      	nop
 80165f6:	e000      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7f7 f9b0 	bl	800d960 <pbuf_free>
  return ERR_OK;
 8016600:	2300      	movs	r3, #0
}
 8016602:	4618      	mov	r0, r3
 8016604:	3718      	adds	r7, #24
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	0801b690 	.word	0x0801b690

08016610 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016610:	b580      	push	{r7, lr}
 8016612:	b086      	sub	sp, #24
 8016614:	af00      	add	r7, sp, #0
 8016616:	60f8      	str	r0, [r7, #12]
 8016618:	60b9      	str	r1, [r7, #8]
 801661a:	607a      	str	r2, [r7, #4]
 801661c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801661e:	8c3b      	ldrh	r3, [r7, #32]
 8016620:	4618      	mov	r0, r3
 8016622:	f7f5 fe3f 	bl	800c2a4 <lwip_htons>
 8016626:	4603      	mov	r3, r0
 8016628:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801662a:	210e      	movs	r1, #14
 801662c:	68b8      	ldr	r0, [r7, #8]
 801662e:	f7f7 f901 	bl	800d834 <pbuf_add_header>
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d125      	bne.n	8016684 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	8afa      	ldrh	r2, [r7, #22]
 8016642:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	2206      	movs	r2, #6
 8016648:	6839      	ldr	r1, [r7, #0]
 801664a:	4618      	mov	r0, r3
 801664c:	f001 f8de 	bl	801780c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	3306      	adds	r3, #6
 8016654:	2206      	movs	r2, #6
 8016656:	6879      	ldr	r1, [r7, #4]
 8016658:	4618      	mov	r0, r3
 801665a:	f001 f8d7 	bl	801780c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016664:	2b06      	cmp	r3, #6
 8016666:	d006      	beq.n	8016676 <ethernet_output+0x66>
 8016668:	4b0a      	ldr	r3, [pc, #40]	; (8016694 <ethernet_output+0x84>)
 801666a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801666e:	490a      	ldr	r1, [pc, #40]	; (8016698 <ethernet_output+0x88>)
 8016670:	480a      	ldr	r0, [pc, #40]	; (801669c <ethernet_output+0x8c>)
 8016672:	f001 f8e1 	bl	8017838 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	699b      	ldr	r3, [r3, #24]
 801667a:	68b9      	ldr	r1, [r7, #8]
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	4798      	blx	r3
 8016680:	4603      	mov	r3, r0
 8016682:	e002      	b.n	801668a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016684:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016686:	f06f 0301 	mvn.w	r3, #1
}
 801668a:	4618      	mov	r0, r3
 801668c:	3718      	adds	r7, #24
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	0801b328 	.word	0x0801b328
 8016698:	0801b360 	.word	0x0801b360
 801669c:	0801b394 	.word	0x0801b394

080166a0 <HAL_UART_RxCpltCallback>:

/**
  * @brief This function is called when *any* UART completes receiving X bytes.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80166a0:	b480      	push	{r7}
 80166a2:	b083      	sub	sp, #12
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
	if(huart==UART_5)
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	4a09      	ldr	r2, [pc, #36]	; (80166d0 <HAL_UART_RxCpltCallback+0x30>)
 80166ac:	4293      	cmp	r3, r2
 80166ae:	d102      	bne.n	80166b6 <HAL_UART_RxCpltCallback+0x16>
		receivere_UART5_flag_RxCpltCallback = TRUE;
 80166b0:	4b08      	ldr	r3, [pc, #32]	; (80166d4 <HAL_UART_RxCpltCallback+0x34>)
 80166b2:	2201      	movs	r2, #1
 80166b4:	701a      	strb	r2, [r3, #0]
	if(huart==UART_4)
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	4a07      	ldr	r2, [pc, #28]	; (80166d8 <HAL_UART_RxCpltCallback+0x38>)
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d102      	bne.n	80166c4 <HAL_UART_RxCpltCallback+0x24>
		receivere_UART4_flag_RxCpltCallback = TRUE;
 80166be:	4b07      	ldr	r3, [pc, #28]	; (80166dc <HAL_UART_RxCpltCallback+0x3c>)
 80166c0:	2201      	movs	r2, #1
 80166c2:	701a      	strb	r2, [r3, #0]
}
 80166c4:	bf00      	nop
 80166c6:	370c      	adds	r7, #12
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr
 80166d0:	2000078c 	.word	0x2000078c
 80166d4:	20008f66 	.word	0x20008f66
 80166d8:	20000704 	.word	0x20000704
 80166dc:	20008f67 	.word	0x20008f67

080166e0 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80166e0:	b480      	push	{r7}
 80166e2:	b083      	sub	sp, #12
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
	flag_R_slave=TRUE;
 80166e8:	4b04      	ldr	r3, [pc, #16]	; (80166fc <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80166ea:	2201      	movs	r2, #1
 80166ec:	701a      	strb	r2, [r3, #0]
}
 80166ee:	bf00      	nop
 80166f0:	370c      	adds	r7, #12
 80166f2:	46bd      	mov	sp, r7
 80166f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f8:	4770      	bx	lr
 80166fa:	bf00      	nop
 80166fc:	20008f69 	.word	0x20008f69

08016700 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8016700:	b480      	push	{r7}
 8016702:	b083      	sub	sp, #12
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
	flag_R_Master=TRUE;
 8016708:	4b04      	ldr	r3, [pc, #16]	; (801671c <HAL_I2C_MasterRxCpltCallback+0x1c>)
 801670a:	2201      	movs	r2, #1
 801670c:	701a      	strb	r2, [r3, #0]

 }
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop
 801671c:	20008f68 	.word	0x20008f68

08016720 <HAL_ADC_ConvCpltCallback>:

// ADC interrupt Callback (convert data finish)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8016720:	b480      	push	{r7}
 8016722:	b083      	sub	sp, #12
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
	flag_ADC_ConvCpltCallback = TRUE;
 8016728:	4b04      	ldr	r3, [pc, #16]	; (801673c <HAL_ADC_ConvCpltCallback+0x1c>)
 801672a:	2201      	movs	r2, #1
 801672c:	701a      	strb	r2, [r3, #0]
}
 801672e:	bf00      	nop
 8016730:	370c      	adds	r7, #12
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop
 801673c:	20008f6a 	.word	0x20008f6a

08016740 <HAL_TIM_PeriodElapsedCallback>:


// == Timer Callback ======================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016740:	b480      	push	{r7}
 8016742:	b083      	sub	sp, #12
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
	time_flag_PeriodElapsedCallback=TRUE;
 8016748:	4b04      	ldr	r3, [pc, #16]	; (801675c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 801674a:	2201      	movs	r2, #1
 801674c:	701a      	strb	r2, [r3, #0]

}
 801674e:	bf00      	nop
 8016750:	370c      	adds	r7, #12
 8016752:	46bd      	mov	sp, r7
 8016754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop
 801675c:	20008f6b 	.word	0x20008f6b

08016760 <udp_receive_callback>:

void udp_receive_callback(
		void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b086      	sub	sp, #24
 8016764:	af00      	add	r7, sp, #0
 8016766:	60f8      	str	r0, [r7, #12]
 8016768:	60b9      	str	r1, [r7, #8]
 801676a:	607a      	str	r2, [r7, #4]
 801676c:	603b      	str	r3, [r7, #0]
	flag_message_From_client=TRUE;
 801676e:	4b0e      	ldr	r3, [pc, #56]	; (80167a8 <udp_receive_callback+0x48>)
 8016770:	2201      	movs	r2, #1
 8016772:	601a      	str	r2, [r3, #0]
	/* Get the IP of the Client */
	/* Get the IP of the Client */
	addr_global=addr;
 8016774:	4a0d      	ldr	r2, [pc, #52]	; (80167ac <udp_receive_callback+0x4c>)
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	6013      	str	r3, [r2, #0]
    remoteIP_global = ipaddr_ntoa(addr);
 801677a:	6838      	ldr	r0, [r7, #0]
 801677c:	f7fe ffec 	bl	8015758 <ip4addr_ntoa>
 8016780:	4603      	mov	r3, r0
 8016782:	4a0b      	ldr	r2, [pc, #44]	; (80167b0 <udp_receive_callback+0x50>)
 8016784:	6013      	str	r3, [r2, #0]

	upcb_global=upcb;
 8016786:	4a0b      	ldr	r2, [pc, #44]	; (80167b4 <udp_receive_callback+0x54>)
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	6013      	str	r3, [r2, #0]

	port_global=port;
 801678c:	4a0a      	ldr	r2, [pc, #40]	; (80167b8 <udp_receive_callback+0x58>)
 801678e:	8c3b      	ldrh	r3, [r7, #32]
 8016790:	8013      	strh	r3, [r2, #0]
	p_global=p;
 8016792:	4a0a      	ldr	r2, [pc, #40]	; (80167bc <udp_receive_callback+0x5c>)
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	6013      	str	r3, [r2, #0]

	const int len =handleMessageFromClient(p);
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f000 f951 	bl	8016a40 <handleMessageFromClient>
 801679e:	6178      	str	r0, [r7, #20]
}
 80167a0:	bf00      	nop
 80167a2:	3718      	adds	r7, #24
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	20008f84 	.word	0x20008f84
 80167ac:	20008f6c 	.word	0x20008f6c
 80167b0:	20008f78 	.word	0x20008f78
 80167b4:	20008f80 	.word	0x20008f80
 80167b8:	20008f70 	.word	0x20008f70
 80167bc:	20008f74 	.word	0x20008f74

080167c0 <udpServer_init>:
void udpServer_init(void) {
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb* upcb = udp_new();
 80167c6:	f7fd fbcd 	bl	8013f64 <udp_new>
 80167ca:	4603      	mov	r3, r0
 80167cc:	607b      	str	r3, [r7, #4]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 7 is the server UDP port
 80167ce:	2207      	movs	r2, #7
 80167d0:	490b      	ldr	r1, [pc, #44]	; (8016800 <udpServer_init+0x40>)
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f7fd fa46 	bl	8013c64 <udp_bind>
 80167d8:	4603      	mov	r3, r0
 80167da:	70fb      	strb	r3, [r7, #3]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 80167dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d105      	bne.n	80167f0 <udpServer_init+0x30>
	   udp_recv(upcb, udp_receive_callback, NULL);
 80167e4:	2200      	movs	r2, #0
 80167e6:	4907      	ldr	r1, [pc, #28]	; (8016804 <udpServer_init+0x44>)
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7fd fb59 	bl	8013ea0 <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 80167ee:	e002      	b.n	80167f6 <udpServer_init+0x36>
	   udp_remove(upcb);
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7fd fb75 	bl	8013ee0 <udp_remove>
}
 80167f6:	bf00      	nop
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	0801b68c 	.word	0x0801b68c
 8016804:	08016761 	.word	0x08016761

08016808 <rtg_main>:
 *	NETMASK: 	255.255.255.0 (or 0.0.0.0/24)
 *	GATEWAY: 	192.168.1.100 (not in use but required by IDE)
 *	Port:		7 (recommended 50,000+)
 */

void rtg_main()    {
 8016808:	b580      	push	{r7, lr}
 801680a:	af00      	add	r7, sp, #0
	printf("Start of program\n\r");
 801680c:	4803      	ldr	r0, [pc, #12]	; (801681c <rtg_main+0x14>)
 801680e:	f001 f813 	bl	8017838 <iprintf>
	udpServer_init();					//UDP server initialization
 8016812:	f7ff ffd5 	bl	80167c0 <udpServer_init>
	while (1) {
		handle_reception_network();
 8016816:	f000 fb8d 	bl	8016f34 <handle_reception_network>
	while (1) {
 801681a:	e7fc      	b.n	8016816 <rtg_main+0xe>
 801681c:	0801b3bc 	.word	0x0801b3bc

08016820 <print_result_test>:
#include "RTG.h"


void print_result_test( result_test result){
 8016820:	b084      	sub	sp, #16
 8016822:	b580      	push	{r7, lr}
 8016824:	af00      	add	r7, sp, #0
 8016826:	f107 0c08 	add.w	ip, r7, #8
 801682a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf("\r\n result -> %s \r\n", result.msg);
 801682e:	f107 0309 	add.w	r3, r7, #9
 8016832:	4619      	mov	r1, r3
 8016834:	4804      	ldr	r0, [pc, #16]	; (8016848 <print_result_test+0x28>)
 8016836:	f000 ffff 	bl	8017838 <iprintf>
}
 801683a:	bf00      	nop
 801683c:	46bd      	mov	sp, r7
 801683e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016842:	b004      	add	sp, #16
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	0801b3d0 	.word	0x0801b3d0

0801684c <check_data>:


uint8_t check_data(const char* data,const char* data_buff_receiver1,uint8_t lenght){
 801684c:	b480      	push	{r7}
 801684e:	b087      	sub	sp, #28
 8016850:	af00      	add	r7, sp, #0
 8016852:	60f8      	str	r0, [r7, #12]
 8016854:	60b9      	str	r1, [r7, #8]
 8016856:	4613      	mov	r3, r2
 8016858:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < lenght ;i++ )
 801685a:	2300      	movs	r3, #0
 801685c:	75fb      	strb	r3, [r7, #23]
 801685e:	e00e      	b.n	801687e <check_data+0x32>
	{
		if( *(data+i)!=*(data_buff_receiver1+i) )
 8016860:	7dfb      	ldrb	r3, [r7, #23]
 8016862:	68fa      	ldr	r2, [r7, #12]
 8016864:	4413      	add	r3, r2
 8016866:	781a      	ldrb	r2, [r3, #0]
 8016868:	7dfb      	ldrb	r3, [r7, #23]
 801686a:	68b9      	ldr	r1, [r7, #8]
 801686c:	440b      	add	r3, r1
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	429a      	cmp	r2, r3
 8016872:	d001      	beq.n	8016878 <check_data+0x2c>
			return FALSE;
 8016874:	2300      	movs	r3, #0
 8016876:	e007      	b.n	8016888 <check_data+0x3c>
	for (uint8_t i = 0; i < lenght ;i++ )
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	3301      	adds	r3, #1
 801687c:	75fb      	strb	r3, [r7, #23]
 801687e:	7dfa      	ldrb	r2, [r7, #23]
 8016880:	79fb      	ldrb	r3, [r7, #7]
 8016882:	429a      	cmp	r2, r3
 8016884:	d3ec      	bcc.n	8016860 <check_data+0x14>
	}

	return TRUE;
 8016886:	2301      	movs	r3, #1
}
 8016888:	4618      	mov	r0, r3
 801688a:	371c      	adds	r7, #28
 801688c:	46bd      	mov	sp, r7
 801688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016892:	4770      	bx	lr

08016894 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168a8:	68b9      	ldr	r1, [r7, #8]
 80168aa:	4804      	ldr	r0, [pc, #16]	; (80168bc <_write+0x28>)
 80168ac:	f7f3 f87a 	bl	80099a4 <HAL_UART_Transmit>
	return len;
 80168b0:	687b      	ldr	r3, [r7, #4]
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3710      	adds	r7, #16
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	20000814 	.word	0x20000814

080168c0 <__io_getchar>:

// scanf
int __io_getchar(void) {
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80168c6:	2300      	movs	r3, #0
 80168c8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 80168ca:	1df9      	adds	r1, r7, #7
 80168cc:	f04f 33ff 	mov.w	r3, #4294967295
 80168d0:	2201      	movs	r2, #1
 80168d2:	4807      	ldr	r0, [pc, #28]	; (80168f0 <__io_getchar+0x30>)
 80168d4:	f7f3 f8e9 	bl	8009aaa <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 80168d8:	1df9      	adds	r1, r7, #7
 80168da:	f04f 33ff 	mov.w	r3, #4294967295
 80168de:	2201      	movs	r2, #1
 80168e0:	4803      	ldr	r0, [pc, #12]	; (80168f0 <__io_getchar+0x30>)
 80168e2:	f7f3 f85f 	bl	80099a4 <HAL_UART_Transmit>
	return ch;
 80168e6:	79fb      	ldrb	r3, [r7, #7]
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	20000814 	.word	0x20000814

080168f4 <_read>:

int _read(int file, char *ptr, int len) {
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b088      	sub	sp, #32
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	60f8      	str	r0, [r7, #12]
 80168fc:	60b9      	str	r1, [r7, #8]
 80168fe:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8016900:	2300      	movs	r3, #0
 8016902:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = 0;
 8016904:	2300      	movs	r3, #0
 8016906:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 8016908:	e016      	b.n	8016938 <_read+0x44>
		ch = __io_getchar();
 801690a:	f7ff ffd9 	bl	80168c0 <__io_getchar>
 801690e:	4603      	mov	r3, r0
 8016910:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	7dfa      	ldrb	r2, [r7, #23]
 8016916:	701a      	strb	r2, [r3, #0]
		ptr++;
 8016918:	68bb      	ldr	r3, [r7, #8]
 801691a:	3301      	adds	r3, #1
 801691c:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 801691e:	7dfb      	ldrb	r3, [r7, #23]
 8016920:	2b0d      	cmp	r3, #13
 8016922:	d002      	beq.n	801692a <_read+0x36>
 8016924:	7dfb      	ldrb	r3, [r7, #23]
 8016926:	2b0a      	cmp	r3, #10
 8016928:	d103      	bne.n	8016932 <_read+0x3e>
			*(ptr) = 0;
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	2200      	movs	r2, #0
 801692e:	701a      	strb	r2, [r3, #0]
			break;
 8016930:	e006      	b.n	8016940 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	3301      	adds	r3, #1
 8016936:	61fb      	str	r3, [r7, #28]
 8016938:	69fa      	ldr	r2, [r7, #28]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	429a      	cmp	r2, r3
 801693e:	dbe4      	blt.n	801690a <_read+0x16>
		}
	}
	return DataIdx + 1;
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	3301      	adds	r3, #1
}
 8016944:	4618      	mov	r0, r3
 8016946:	3720      	adds	r7, #32
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}

0801694c <send_to_cient>:




void send_to_cient(my_message receive_client_message )
{
 801694c:	b084      	sub	sp, #16
 801694e:	b580      	push	{r7, lr}
 8016950:	b09c      	sub	sp, #112	; 0x70
 8016952:	af00      	add	r7, sp, #0
 8016954:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 8016958:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	/* copy the data into the buffer  */
	char buf[100];
	uint8_t id;
	printf("\r\n send data... \r\n");
 801695c:	4831      	ldr	r0, [pc, #196]	; (8016a24 <send_to_cient+0xd8>)
 801695e:	f000 fff1 	bl	8017944 <puts>
	buf[0]=receive_client_message.id;
 8016962:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8016966:	713b      	strb	r3, [r7, #4]
	buf[1]=receive_client_message.Peripheral;
 8016968:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 801696c:	717b      	strb	r3, [r7, #5]
	buf[2]=receive_client_message.Iterations;
 801696e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8016972:	71bb      	strb	r3, [r7, #6]
	buf[3]=receive_client_message.length;
 8016974:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8016978:	71fb      	strb	r3, [r7, #7]
	for (int i= 0,j=4; i <= receive_client_message.length; i++)
 801697a:	2300      	movs	r3, #0
 801697c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801697e:	2304      	movs	r3, #4
 8016980:	66bb      	str	r3, [r7, #104]	; 0x68
 8016982:	e00e      	b.n	80169a2 <send_to_cient+0x56>
	{
		buf[j++]=receive_client_message.msg[i];
 8016984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016986:	1c5a      	adds	r2, r3, #1
 8016988:	66ba      	str	r2, [r7, #104]	; 0x68
 801698a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801698e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016990:	440a      	add	r2, r1
 8016992:	7812      	ldrb	r2, [r2, #0]
 8016994:	3370      	adds	r3, #112	; 0x70
 8016996:	443b      	add	r3, r7
 8016998:	f803 2c6c 	strb.w	r2, [r3, #-108]
	for (int i= 0,j=4; i <= receive_client_message.length; i++)
 801699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801699e:	3301      	adds	r3, #1
 80169a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80169a2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80169a6:	461a      	mov	r2, r3
 80169a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80169aa:	4293      	cmp	r3, r2
 80169ac:	ddea      	ble.n	8016984 <send_to_cient+0x38>
	}

	addr_global->addr=16885952;
 80169ae:	4b1e      	ldr	r3, [pc, #120]	; (8016a28 <send_to_cient+0xdc>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	4a1e      	ldr	r2, [pc, #120]	; (8016a2c <send_to_cient+0xe0>)
 80169b4:	601a      	str	r2, [r3, #0]


	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,14, PBUF_RAM);
 80169b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169ba:	210e      	movs	r1, #14
 80169bc:	2036      	movs	r0, #54	; 0x36
 80169be:	f7f6 fceb 	bl	800d398 <pbuf_alloc>
 80169c2:	4603      	mov	r3, r0
 80169c4:	4a1a      	ldr	r2, [pc, #104]	; (8016a30 <send_to_cient+0xe4>)
 80169c6:	6013      	str	r3, [r2, #0]
	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, 14);
 80169c8:	4b19      	ldr	r3, [pc, #100]	; (8016a30 <send_to_cient+0xe4>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	1d39      	adds	r1, r7, #4
 80169ce:	220e      	movs	r2, #14
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7f7 fa31 	bl	800de38 <pbuf_take>
	/* Connect to the remote client */
	udp_connect(upcb_global, addr_global, port_global);
 80169d6:	4b17      	ldr	r3, [pc, #92]	; (8016a34 <send_to_cient+0xe8>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	4a13      	ldr	r2, [pc, #76]	; (8016a28 <send_to_cient+0xdc>)
 80169dc:	6811      	ldr	r1, [r2, #0]
 80169de:	4a16      	ldr	r2, [pc, #88]	; (8016a38 <send_to_cient+0xec>)
 80169e0:	8812      	ldrh	r2, [r2, #0]
 80169e2:	4618      	mov	r0, r3
 80169e4:	f7fd f9c6 	bl	8013d74 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb_global, txBuf);
 80169e8:	4b12      	ldr	r3, [pc, #72]	; (8016a34 <send_to_cient+0xe8>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	4a10      	ldr	r2, [pc, #64]	; (8016a30 <send_to_cient+0xe4>)
 80169ee:	6812      	ldr	r2, [r2, #0]
 80169f0:	4611      	mov	r1, r2
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7fc ff4c 	bl	8013890 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb_global);
 80169f8:	4b0e      	ldr	r3, [pc, #56]	; (8016a34 <send_to_cient+0xe8>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7fd fa27 	bl	8013e50 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8016a02:	4b0b      	ldr	r3, [pc, #44]	; (8016a30 <send_to_cient+0xe4>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7f6 ffaa 	bl	800d960 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p_global);
 8016a0c:	4b0b      	ldr	r3, [pc, #44]	; (8016a3c <send_to_cient+0xf0>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7f6 ffa5 	bl	800d960 <pbuf_free>
}
 8016a16:	bf00      	nop
 8016a18:	3770      	adds	r7, #112	; 0x70
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016a20:	b004      	add	sp, #16
 8016a22:	4770      	bx	lr
 8016a24:	0801b3e4 	.word	0x0801b3e4
 8016a28:	20008f6c 	.word	0x20008f6c
 8016a2c:	0101a8c0 	.word	0x0101a8c0
 8016a30:	20008f7c 	.word	0x20008f7c
 8016a34:	20008f80 	.word	0x20008f80
 8016a38:	20008f70 	.word	0x20008f70
 8016a3c:	20008f74 	.word	0x20008f74

08016a40 <handleMessageFromClient>:

int handleMessageFromClient(struct pbuf *p)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
	receive_client_message.id= *(uint8_t *)(p->payload + my_message_id_index);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	781a      	ldrb	r2, [r3, #0]
 8016a4e:	4b10      	ldr	r3, [pc, #64]	; (8016a90 <handleMessageFromClient+0x50>)
 8016a50:	701a      	strb	r2, [r3, #0]
	receive_client_message.Peripheral= *(uint8_t *)(p->payload + my_message_Peripheral_index);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	785a      	ldrb	r2, [r3, #1]
 8016a58:	4b0d      	ldr	r3, [pc, #52]	; (8016a90 <handleMessageFromClient+0x50>)
 8016a5a:	705a      	strb	r2, [r3, #1]
	receive_client_message.Iterations= *(uint8_t *)(p->payload + my_message_Iterations_index);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	685b      	ldr	r3, [r3, #4]
 8016a60:	789a      	ldrb	r2, [r3, #2]
 8016a62:	4b0b      	ldr	r3, [pc, #44]	; (8016a90 <handleMessageFromClient+0x50>)
 8016a64:	709a      	strb	r2, [r3, #2]
	receive_client_message.length= *(uint8_t *)(p->payload + my_message_length_index);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	78da      	ldrb	r2, [r3, #3]
 8016a6c:	4b08      	ldr	r3, [pc, #32]	; (8016a90 <handleMessageFromClient+0x50>)
 8016a6e:	70da      	strb	r2, [r3, #3]

	memcpy(receive_client_message.msg , (p->payload + my_message_msg_index),  receive_client_message.length);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	685b      	ldr	r3, [r3, #4]
 8016a74:	3304      	adds	r3, #4
 8016a76:	4a06      	ldr	r2, [pc, #24]	; (8016a90 <handleMessageFromClient+0x50>)
 8016a78:	78d2      	ldrb	r2, [r2, #3]
 8016a7a:	4619      	mov	r1, r3
 8016a7c:	4805      	ldr	r0, [pc, #20]	; (8016a94 <handleMessageFromClient+0x54>)
 8016a7e:	f000 fec5 	bl	801780c <memcpy>

	return my_message_msg_index+receive_client_message.length;
 8016a82:	4b03      	ldr	r3, [pc, #12]	; (8016a90 <handleMessageFromClient+0x50>)
 8016a84:	78db      	ldrb	r3, [r3, #3]
 8016a86:	3304      	adds	r3, #4
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}
 8016a90:	20008fbc 	.word	0x20008fbc
 8016a94:	20008fc0 	.word	0x20008fc0

08016a98 <run_client_test>:

result_test  run_client_test(my_message receive_client_message)
{
 8016a98:	b084      	sub	sp, #16
 8016a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a9c:	b09d      	sub	sp, #116	; 0x74
 8016a9e:	af0a      	add	r7, sp, #40	; 0x28
 8016aa0:	6078      	str	r0, [r7, #4]
 8016aa2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8016aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	result_test result={FALSE,"ERROR"};
 8016aaa:	4bc8      	ldr	r3, [pc, #800]	; (8016dcc <run_client_test+0x334>)
 8016aac:	f107 040c 	add.w	r4, r7, #12
 8016ab0:	461d      	mov	r5, r3
 8016ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016abe:	682b      	ldr	r3, [r5, #0]
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	8022      	strh	r2, [r4, #0]
 8016ac4:	3402      	adds	r4, #2
 8016ac6:	0c1b      	lsrs	r3, r3, #16
 8016ac8:	7023      	strb	r3, [r4, #0]
	uint8_t iteration=receive_client_message.Iterations;
 8016aca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016ace:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	switch(receive_client_message.Peripheral)
 8016ad2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	2b0f      	cmp	r3, #15
 8016ada:	f200 820a 	bhi.w	8016ef2 <run_client_test+0x45a>
 8016ade:	a201      	add	r2, pc, #4	; (adr r2, 8016ae4 <run_client_test+0x4c>)
 8016ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ae4:	08016e3d 	.word	0x08016e3d
 8016ae8:	08016b25 	.word	0x08016b25
 8016aec:	08016ef3 	.word	0x08016ef3
 8016af0:	08016cb9 	.word	0x08016cb9
 8016af4:	08016bef 	.word	0x08016bef
 8016af8:	08016ef3 	.word	0x08016ef3
 8016afc:	08016ef3 	.word	0x08016ef3
 8016b00:	08016ef3 	.word	0x08016ef3
 8016b04:	08016ef3 	.word	0x08016ef3
 8016b08:	08016ef3 	.word	0x08016ef3
 8016b0c:	08016ef3 	.word	0x08016ef3
 8016b10:	08016ef3 	.word	0x08016ef3
 8016b14:	08016ef3 	.word	0x08016ef3
 8016b18:	08016ef3 	.word	0x08016ef3
 8016b1c:	08016ef3 	.word	0x08016ef3
 8016b20:	08016d83 	.word	0x08016d83
  	{
	int result1 ;
  		case TEST_UART:
  			for (uint8_t i = 0; i < iteration ; i++)
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016b2a:	e02f      	b.n	8016b8c <run_client_test+0xf4>
  			{
  				UART_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 8016b2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016b30:	4619      	mov	r1, r3
 8016b32:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016b36:	461c      	mov	r4, r3
 8016b38:	f107 020c 	add.w	r2, r7, #12
 8016b3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016b40:	1d18      	adds	r0, r3, #4
 8016b42:	4613      	mov	r3, r2
 8016b44:	4622      	mov	r2, r4
 8016b46:	f000 fdc3 	bl	80176d0 <UART_tests>
  				if(result.bool_test ==FALSE )
 8016b4a:	7b3b      	ldrb	r3, [r7, #12]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d118      	bne.n	8016b82 <run_client_test+0xea>
  					return result;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f107 040c 	add.w	r4, r7, #12
 8016b56:	469c      	mov	ip, r3
 8016b58:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016b5c:	4665      	mov	r5, ip
 8016b5e:	4626      	mov	r6, r4
 8016b60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016b62:	6028      	str	r0, [r5, #0]
 8016b64:	6069      	str	r1, [r5, #4]
 8016b66:	60aa      	str	r2, [r5, #8]
 8016b68:	60eb      	str	r3, [r5, #12]
 8016b6a:	3410      	adds	r4, #16
 8016b6c:	f10c 0c10 	add.w	ip, ip, #16
 8016b70:	4574      	cmp	r4, lr
 8016b72:	d1f3      	bne.n	8016b5c <run_client_test+0xc4>
 8016b74:	4663      	mov	r3, ip
 8016b76:	4622      	mov	r2, r4
 8016b78:	8811      	ldrh	r1, [r2, #0]
 8016b7a:	7892      	ldrb	r2, [r2, #2]
 8016b7c:	8019      	strh	r1, [r3, #0]
 8016b7e:	709a      	strb	r2, [r3, #2]
 8016b80:	e1d0      	b.n	8016f24 <run_client_test+0x48c>
  			for (uint8_t i = 0; i < iteration ; i++)
 8016b82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016b86:	3301      	adds	r3, #1
 8016b88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016b8c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8016b90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d3c9      	bcc.n	8016b2c <run_client_test+0x94>
  			}
  			print_result_test(result);
 8016b98:	466c      	mov	r4, sp
 8016b9a:	f107 051c 	add.w	r5, r7, #28
 8016b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ba6:	682b      	ldr	r3, [r5, #0]
 8016ba8:	461a      	mov	r2, r3
 8016baa:	8022      	strh	r2, [r4, #0]
 8016bac:	3402      	adds	r4, #2
 8016bae:	0c1b      	lsrs	r3, r3, #16
 8016bb0:	7023      	strb	r3, [r4, #0]
 8016bb2:	f107 030c 	add.w	r3, r7, #12
 8016bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016bb8:	f7ff fe32 	bl	8016820 <print_result_test>
  			return result;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f107 040c 	add.w	r4, r7, #12
 8016bc2:	469c      	mov	ip, r3
 8016bc4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016bc8:	4665      	mov	r5, ip
 8016bca:	4626      	mov	r6, r4
 8016bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016bce:	6028      	str	r0, [r5, #0]
 8016bd0:	6069      	str	r1, [r5, #4]
 8016bd2:	60aa      	str	r2, [r5, #8]
 8016bd4:	60eb      	str	r3, [r5, #12]
 8016bd6:	3410      	adds	r4, #16
 8016bd8:	f10c 0c10 	add.w	ip, ip, #16
 8016bdc:	4574      	cmp	r4, lr
 8016bde:	d1f3      	bne.n	8016bc8 <run_client_test+0x130>
 8016be0:	4663      	mov	r3, ip
 8016be2:	4622      	mov	r2, r4
 8016be4:	8811      	ldrh	r1, [r2, #0]
 8016be6:	7892      	ldrb	r2, [r2, #2]
 8016be8:	8019      	strh	r1, [r3, #0]
 8016bea:	709a      	strb	r2, [r3, #2]
 8016bec:	e19a      	b.n	8016f24 <run_client_test+0x48c>


  		case TEST_I2C:

  			for (uint8_t i = 0; i < iteration ; i++)
 8016bee:	2300      	movs	r3, #0
 8016bf0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8016bf4:	e02f      	b.n	8016c56 <run_client_test+0x1be>
  			{
  				I2C_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 8016bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016c00:	461c      	mov	r4, r3
 8016c02:	f107 020c 	add.w	r2, r7, #12
 8016c06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016c0a:	1d18      	adds	r0, r3, #4
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	4622      	mov	r2, r4
 8016c10:	f000 fb6c 	bl	80172ec <I2C_tests>
  			  	if(result.bool_test ==FALSE )
 8016c14:	7b3b      	ldrb	r3, [r7, #12]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d118      	bne.n	8016c4c <run_client_test+0x1b4>
  			  		return result;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	f107 040c 	add.w	r4, r7, #12
 8016c20:	469c      	mov	ip, r3
 8016c22:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016c26:	4665      	mov	r5, ip
 8016c28:	4626      	mov	r6, r4
 8016c2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016c2c:	6028      	str	r0, [r5, #0]
 8016c2e:	6069      	str	r1, [r5, #4]
 8016c30:	60aa      	str	r2, [r5, #8]
 8016c32:	60eb      	str	r3, [r5, #12]
 8016c34:	3410      	adds	r4, #16
 8016c36:	f10c 0c10 	add.w	ip, ip, #16
 8016c3a:	4574      	cmp	r4, lr
 8016c3c:	d1f3      	bne.n	8016c26 <run_client_test+0x18e>
 8016c3e:	4663      	mov	r3, ip
 8016c40:	4622      	mov	r2, r4
 8016c42:	8811      	ldrh	r1, [r2, #0]
 8016c44:	7892      	ldrb	r2, [r2, #2]
 8016c46:	8019      	strh	r1, [r3, #0]
 8016c48:	709a      	strb	r2, [r3, #2]
 8016c4a:	e16b      	b.n	8016f24 <run_client_test+0x48c>
  			for (uint8_t i = 0; i < iteration ; i++)
 8016c4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016c50:	3301      	adds	r3, #1
 8016c52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8016c56:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016c5a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d3c9      	bcc.n	8016bf6 <run_client_test+0x15e>
  			}
  			print_result_test(result);
 8016c62:	466c      	mov	r4, sp
 8016c64:	f107 051c 	add.w	r5, r7, #28
 8016c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	461a      	mov	r2, r3
 8016c74:	8022      	strh	r2, [r4, #0]
 8016c76:	3402      	adds	r4, #2
 8016c78:	0c1b      	lsrs	r3, r3, #16
 8016c7a:	7023      	strb	r3, [r4, #0]
 8016c7c:	f107 030c 	add.w	r3, r7, #12
 8016c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c82:	f7ff fdcd 	bl	8016820 <print_result_test>
  			return result;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	f107 040c 	add.w	r4, r7, #12
 8016c8c:	469c      	mov	ip, r3
 8016c8e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016c92:	4665      	mov	r5, ip
 8016c94:	4626      	mov	r6, r4
 8016c96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016c98:	6028      	str	r0, [r5, #0]
 8016c9a:	6069      	str	r1, [r5, #4]
 8016c9c:	60aa      	str	r2, [r5, #8]
 8016c9e:	60eb      	str	r3, [r5, #12]
 8016ca0:	3410      	adds	r4, #16
 8016ca2:	f10c 0c10 	add.w	ip, ip, #16
 8016ca6:	4574      	cmp	r4, lr
 8016ca8:	d1f3      	bne.n	8016c92 <run_client_test+0x1fa>
 8016caa:	4663      	mov	r3, ip
 8016cac:	4622      	mov	r2, r4
 8016cae:	8811      	ldrh	r1, [r2, #0]
 8016cb0:	7892      	ldrb	r2, [r2, #2]
 8016cb2:	8019      	strh	r1, [r3, #0]
 8016cb4:	709a      	strb	r2, [r3, #2]
 8016cb6:	e135      	b.n	8016f24 <run_client_test+0x48c>

  		case TEST_SPI:

  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016cb8:	2300      	movs	r3, #0
 8016cba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016cbe:	e02f      	b.n	8016d20 <run_client_test+0x288>
  		  	{
  		  		SPI_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 8016cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016cca:	461c      	mov	r4, r3
 8016ccc:	f107 020c 	add.w	r2, r7, #12
 8016cd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016cd4:	1d18      	adds	r0, r3, #4
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	4622      	mov	r2, r4
 8016cda:	f000 fbb5 	bl	8017448 <SPI_tests>
  		  		if(result.bool_test ==FALSE )
 8016cde:	7b3b      	ldrb	r3, [r7, #12]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d118      	bne.n	8016d16 <run_client_test+0x27e>
  		  		return result;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f107 040c 	add.w	r4, r7, #12
 8016cea:	469c      	mov	ip, r3
 8016cec:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016cf0:	4665      	mov	r5, ip
 8016cf2:	4626      	mov	r6, r4
 8016cf4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016cf6:	6028      	str	r0, [r5, #0]
 8016cf8:	6069      	str	r1, [r5, #4]
 8016cfa:	60aa      	str	r2, [r5, #8]
 8016cfc:	60eb      	str	r3, [r5, #12]
 8016cfe:	3410      	adds	r4, #16
 8016d00:	f10c 0c10 	add.w	ip, ip, #16
 8016d04:	4574      	cmp	r4, lr
 8016d06:	d1f3      	bne.n	8016cf0 <run_client_test+0x258>
 8016d08:	4663      	mov	r3, ip
 8016d0a:	4622      	mov	r2, r4
 8016d0c:	8811      	ldrh	r1, [r2, #0]
 8016d0e:	7892      	ldrb	r2, [r2, #2]
 8016d10:	8019      	strh	r1, [r3, #0]
 8016d12:	709a      	strb	r2, [r3, #2]
 8016d14:	e106      	b.n	8016f24 <run_client_test+0x48c>
  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016d16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016d20:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016d24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	d3c9      	bcc.n	8016cc0 <run_client_test+0x228>
  		  	}
  		  	print_result_test(result);
 8016d2c:	466c      	mov	r4, sp
 8016d2e:	f107 051c 	add.w	r5, r7, #28
 8016d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d3a:	682b      	ldr	r3, [r5, #0]
 8016d3c:	461a      	mov	r2, r3
 8016d3e:	8022      	strh	r2, [r4, #0]
 8016d40:	3402      	adds	r4, #2
 8016d42:	0c1b      	lsrs	r3, r3, #16
 8016d44:	7023      	strb	r3, [r4, #0]
 8016d46:	f107 030c 	add.w	r3, r7, #12
 8016d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d4c:	f7ff fd68 	bl	8016820 <print_result_test>
  		  	return result;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f107 040c 	add.w	r4, r7, #12
 8016d56:	469c      	mov	ip, r3
 8016d58:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016d5c:	4665      	mov	r5, ip
 8016d5e:	4626      	mov	r6, r4
 8016d60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016d62:	6028      	str	r0, [r5, #0]
 8016d64:	6069      	str	r1, [r5, #4]
 8016d66:	60aa      	str	r2, [r5, #8]
 8016d68:	60eb      	str	r3, [r5, #12]
 8016d6a:	3410      	adds	r4, #16
 8016d6c:	f10c 0c10 	add.w	ip, ip, #16
 8016d70:	4574      	cmp	r4, lr
 8016d72:	d1f3      	bne.n	8016d5c <run_client_test+0x2c4>
 8016d74:	4663      	mov	r3, ip
 8016d76:	4622      	mov	r2, r4
 8016d78:	8811      	ldrh	r1, [r2, #0]
 8016d7a:	7892      	ldrb	r2, [r2, #2]
 8016d7c:	8019      	strh	r1, [r3, #0]
 8016d7e:	709a      	strb	r2, [r3, #2]
 8016d80:	e0d0      	b.n	8016f24 <run_client_test+0x48c>

  		case TEST_ADC:
  			for (uint8_t i = 0; i < iteration ; i++)
 8016d82:	2300      	movs	r3, #0
 8016d84:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8016d88:	e027      	b.n	8016dda <run_client_test+0x342>
  			{
  				ADC_tests(&result);
 8016d8a:	f107 030c 	add.w	r3, r7, #12
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f000 f98c 	bl	80170ac <ADC_tests>
  			  	if(result.bool_test ==FALSE )
 8016d94:	7b3b      	ldrb	r3, [r7, #12]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d11a      	bne.n	8016dd0 <run_client_test+0x338>
  			  		return result;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f107 040c 	add.w	r4, r7, #12
 8016da0:	469c      	mov	ip, r3
 8016da2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016da6:	4665      	mov	r5, ip
 8016da8:	4626      	mov	r6, r4
 8016daa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016dac:	6028      	str	r0, [r5, #0]
 8016dae:	6069      	str	r1, [r5, #4]
 8016db0:	60aa      	str	r2, [r5, #8]
 8016db2:	60eb      	str	r3, [r5, #12]
 8016db4:	3410      	adds	r4, #16
 8016db6:	f10c 0c10 	add.w	ip, ip, #16
 8016dba:	4574      	cmp	r4, lr
 8016dbc:	d1f3      	bne.n	8016da6 <run_client_test+0x30e>
 8016dbe:	4663      	mov	r3, ip
 8016dc0:	4622      	mov	r2, r4
 8016dc2:	8811      	ldrh	r1, [r2, #0]
 8016dc4:	7892      	ldrb	r2, [r2, #2]
 8016dc6:	8019      	strh	r1, [r3, #0]
 8016dc8:	709a      	strb	r2, [r3, #2]
 8016dca:	e0ab      	b.n	8016f24 <run_client_test+0x48c>
 8016dcc:	0801b3f8 	.word	0x0801b3f8
  			for (uint8_t i = 0; i < iteration ; i++)
 8016dd0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8016dda:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016dde:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d3d1      	bcc.n	8016d8a <run_client_test+0x2f2>
  			}
  			 print_result_test(result);
 8016de6:	466c      	mov	r4, sp
 8016de8:	f107 051c 	add.w	r5, r7, #28
 8016dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016df4:	682b      	ldr	r3, [r5, #0]
 8016df6:	461a      	mov	r2, r3
 8016df8:	8022      	strh	r2, [r4, #0]
 8016dfa:	3402      	adds	r4, #2
 8016dfc:	0c1b      	lsrs	r3, r3, #16
 8016dfe:	7023      	strb	r3, [r4, #0]
 8016e00:	f107 030c 	add.w	r3, r7, #12
 8016e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e06:	f7ff fd0b 	bl	8016820 <print_result_test>
  			 return result;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f107 040c 	add.w	r4, r7, #12
 8016e10:	469c      	mov	ip, r3
 8016e12:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016e16:	4665      	mov	r5, ip
 8016e18:	4626      	mov	r6, r4
 8016e1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016e1c:	6028      	str	r0, [r5, #0]
 8016e1e:	6069      	str	r1, [r5, #4]
 8016e20:	60aa      	str	r2, [r5, #8]
 8016e22:	60eb      	str	r3, [r5, #12]
 8016e24:	3410      	adds	r4, #16
 8016e26:	f10c 0c10 	add.w	ip, ip, #16
 8016e2a:	4574      	cmp	r4, lr
 8016e2c:	d1f3      	bne.n	8016e16 <run_client_test+0x37e>
 8016e2e:	4663      	mov	r3, ip
 8016e30:	4622      	mov	r2, r4
 8016e32:	8811      	ldrh	r1, [r2, #0]
 8016e34:	7892      	ldrb	r2, [r2, #2]
 8016e36:	8019      	strh	r1, [r3, #0]
 8016e38:	709a      	strb	r2, [r3, #2]
 8016e3a:	e073      	b.n	8016f24 <run_client_test+0x48c>

  		case Test_TIMER:

  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e42:	e025      	b.n	8016e90 <run_client_test+0x3f8>
  		  	{
  		  		timer_test(&result);
 8016e44:	f107 030c 	add.w	r3, r7, #12
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f000 fc81 	bl	8017750 <timer_test>
  		  		if(result.bool_test ==FALSE )
 8016e4e:	7b3b      	ldrb	r3, [r7, #12]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d118      	bne.n	8016e86 <run_client_test+0x3ee>
  		  			return result;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f107 040c 	add.w	r4, r7, #12
 8016e5a:	469c      	mov	ip, r3
 8016e5c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016e60:	4665      	mov	r5, ip
 8016e62:	4626      	mov	r6, r4
 8016e64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016e66:	6028      	str	r0, [r5, #0]
 8016e68:	6069      	str	r1, [r5, #4]
 8016e6a:	60aa      	str	r2, [r5, #8]
 8016e6c:	60eb      	str	r3, [r5, #12]
 8016e6e:	3410      	adds	r4, #16
 8016e70:	f10c 0c10 	add.w	ip, ip, #16
 8016e74:	4574      	cmp	r4, lr
 8016e76:	d1f3      	bne.n	8016e60 <run_client_test+0x3c8>
 8016e78:	4663      	mov	r3, ip
 8016e7a:	4622      	mov	r2, r4
 8016e7c:	8811      	ldrh	r1, [r2, #0]
 8016e7e:	7892      	ldrb	r2, [r2, #2]
 8016e80:	8019      	strh	r1, [r3, #0]
 8016e82:	709a      	strb	r2, [r3, #2]
 8016e84:	e04e      	b.n	8016f24 <run_client_test+0x48c>
  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016e86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e90:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8016e94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d3d3      	bcc.n	8016e44 <run_client_test+0x3ac>
  		  	}
  		  			 print_result_test(result);
 8016e9c:	466c      	mov	r4, sp
 8016e9e:	f107 051c 	add.w	r5, r7, #28
 8016ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016eaa:	682b      	ldr	r3, [r5, #0]
 8016eac:	461a      	mov	r2, r3
 8016eae:	8022      	strh	r2, [r4, #0]
 8016eb0:	3402      	adds	r4, #2
 8016eb2:	0c1b      	lsrs	r3, r3, #16
 8016eb4:	7023      	strb	r3, [r4, #0]
 8016eb6:	f107 030c 	add.w	r3, r7, #12
 8016eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ebc:	f7ff fcb0 	bl	8016820 <print_result_test>
  		  			 return result;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f107 040c 	add.w	r4, r7, #12
 8016ec6:	469c      	mov	ip, r3
 8016ec8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016ecc:	4665      	mov	r5, ip
 8016ece:	4626      	mov	r6, r4
 8016ed0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016ed2:	6028      	str	r0, [r5, #0]
 8016ed4:	6069      	str	r1, [r5, #4]
 8016ed6:	60aa      	str	r2, [r5, #8]
 8016ed8:	60eb      	str	r3, [r5, #12]
 8016eda:	3410      	adds	r4, #16
 8016edc:	f10c 0c10 	add.w	ip, ip, #16
 8016ee0:	4574      	cmp	r4, lr
 8016ee2:	d1f3      	bne.n	8016ecc <run_client_test+0x434>
 8016ee4:	4663      	mov	r3, ip
 8016ee6:	4622      	mov	r2, r4
 8016ee8:	8811      	ldrh	r1, [r2, #0]
 8016eea:	7892      	ldrb	r2, [r2, #2]
 8016eec:	8019      	strh	r1, [r3, #0]
 8016eee:	709a      	strb	r2, [r3, #2]
 8016ef0:	e018      	b.n	8016f24 <run_client_test+0x48c>
  		default:

  			break;
 8016ef2:	bf00      	nop
  	}

	return result;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f107 040c 	add.w	r4, r7, #12
 8016efa:	469c      	mov	ip, r3
 8016efc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016f00:	4665      	mov	r5, ip
 8016f02:	4626      	mov	r6, r4
 8016f04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016f06:	6028      	str	r0, [r5, #0]
 8016f08:	6069      	str	r1, [r5, #4]
 8016f0a:	60aa      	str	r2, [r5, #8]
 8016f0c:	60eb      	str	r3, [r5, #12]
 8016f0e:	3410      	adds	r4, #16
 8016f10:	f10c 0c10 	add.w	ip, ip, #16
 8016f14:	4574      	cmp	r4, lr
 8016f16:	d1f3      	bne.n	8016f00 <run_client_test+0x468>
 8016f18:	4663      	mov	r3, ip
 8016f1a:	4622      	mov	r2, r4
 8016f1c:	8811      	ldrh	r1, [r2, #0]
 8016f1e:	7892      	ldrb	r2, [r2, #2]
 8016f20:	8019      	strh	r1, [r3, #0]
 8016f22:	709a      	strb	r2, [r3, #2]
}
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	374c      	adds	r7, #76	; 0x4c
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016f2e:	b004      	add	sp, #16
 8016f30:	4770      	bx	lr
 8016f32:	bf00      	nop

08016f34 <handle_reception_network>:

void handle_reception_network()
{
 8016f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f36:	b09d      	sub	sp, #116	; 0x74
 8016f38:	af0c      	add	r7, sp, #48	; 0x30
	//Handles the actual reception of bytes from the network interface
	ethernetif_input(&gnetif);
 8016f3a:	482d      	ldr	r0, [pc, #180]	; (8016ff0 <handle_reception_network+0xbc>)
 8016f3c:	f7f4 ff2e 	bl	800bd9c <ethernetif_input>
	//Handle which checks timeout expiration
	sys_check_timeouts();
 8016f40:	f7fc faa2 	bl	8013488 <sys_check_timeouts>

	if(flag_message_From_client==TRUE)
 8016f44:	4b2b      	ldr	r3, [pc, #172]	; (8016ff4 <handle_reception_network+0xc0>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	2b01      	cmp	r3, #1
 8016f4a:	d14c      	bne.n	8016fe6 <handle_reception_network+0xb2>
	{
		result=run_client_test(receive_client_message);
 8016f4c:	4b2a      	ldr	r3, [pc, #168]	; (8016ff8 <handle_reception_network+0xc4>)
 8016f4e:	607b      	str	r3, [r7, #4]
 8016f50:	f107 0c08 	add.w	ip, r7, #8
 8016f54:	4e29      	ldr	r6, [pc, #164]	; (8016ffc <handle_reception_network+0xc8>)
 8016f56:	466c      	mov	r4, sp
 8016f58:	f106 050c 	add.w	r5, r6, #12
 8016f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016f68:	c403      	stmia	r4!, {r0, r1}
 8016f6a:	8022      	strh	r2, [r4, #0]
 8016f6c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8016f70:	4660      	mov	r0, ip
 8016f72:	f7ff fd91 	bl	8016a98 <run_client_test>
 8016f76:	f107 0408 	add.w	r4, r7, #8
 8016f7a:	687e      	ldr	r6, [r7, #4]
 8016f7c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8016f80:	4635      	mov	r5, r6
 8016f82:	4623      	mov	r3, r4
 8016f84:	6818      	ldr	r0, [r3, #0]
 8016f86:	6859      	ldr	r1, [r3, #4]
 8016f88:	689a      	ldr	r2, [r3, #8]
 8016f8a:	68db      	ldr	r3, [r3, #12]
 8016f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016f8e:	3410      	adds	r4, #16
 8016f90:	3610      	adds	r6, #16
 8016f92:	4564      	cmp	r4, ip
 8016f94:	d1f4      	bne.n	8016f80 <handle_reception_network+0x4c>
 8016f96:	4633      	mov	r3, r6
 8016f98:	4622      	mov	r2, r4
 8016f9a:	8811      	ldrh	r1, [r2, #0]
 8016f9c:	7892      	ldrb	r2, [r2, #2]
 8016f9e:	8019      	strh	r1, [r3, #0]
 8016fa0:	709a      	strb	r2, [r3, #2]

		receive_client_message.length=strlen(result.msg);
 8016fa2:	4817      	ldr	r0, [pc, #92]	; (8017000 <handle_reception_network+0xcc>)
 8016fa4:	f7e9 f934 	bl	8000210 <strlen>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	b2da      	uxtb	r2, r3
 8016fac:	4b13      	ldr	r3, [pc, #76]	; (8016ffc <handle_reception_network+0xc8>)
 8016fae:	70da      	strb	r2, [r3, #3]
		memcpy(receive_client_message.msg , result.msg,  receive_client_message.length );
 8016fb0:	4b12      	ldr	r3, [pc, #72]	; (8016ffc <handle_reception_network+0xc8>)
 8016fb2:	78db      	ldrb	r3, [r3, #3]
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	4912      	ldr	r1, [pc, #72]	; (8017000 <handle_reception_network+0xcc>)
 8016fb8:	4812      	ldr	r0, [pc, #72]	; (8017004 <handle_reception_network+0xd0>)
 8016fba:	f000 fc27 	bl	801780c <memcpy>

		send_to_cient(receive_client_message  ) ;
 8016fbe:	4e0f      	ldr	r6, [pc, #60]	; (8016ffc <handle_reception_network+0xc8>)
 8016fc0:	466c      	mov	r4, sp
 8016fc2:	f106 0510 	add.w	r5, r6, #16
 8016fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016fd2:	6020      	str	r0, [r4, #0]
 8016fd4:	3404      	adds	r4, #4
 8016fd6:	8021      	strh	r1, [r4, #0]
 8016fd8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8016fdc:	f7ff fcb6 	bl	801694c <send_to_cient>

		flag_message_From_client=FALSE;
 8016fe0:	4b04      	ldr	r3, [pc, #16]	; (8016ff4 <handle_reception_network+0xc0>)
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	601a      	str	r2, [r3, #0]
	}
}
 8016fe6:	bf00      	nop
 8016fe8:	3744      	adds	r7, #68	; 0x44
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	20000dac 	.word	0x20000dac
 8016ff4:	20008f84 	.word	0x20008f84
 8016ff8:	20008f88 	.word	0x20008f88
 8016ffc:	20008fbc 	.word	0x20008fbc
 8017000:	20008f89 	.word	0x20008f89
 8017004:	20008fc0 	.word	0x20008fc0

08017008 <analog_to_digital_converter_test>:
#include "RTG.h"

result_test analog_to_digital_converter_test()
{
 8017008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801700a:	b093      	sub	sp, #76	; 0x4c
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
	result_test result;
	uint32_t adcVal1;
	uint32_t expected_adc_value=0;
 8017010:	2300      	movs	r3, #0
 8017012:	647b      	str	r3, [r7, #68]	; 0x44
	 //	Enable ADC and start ADC conversion
	 HAL_ADC_Start(ADC_1);
 8017014:	4822      	ldr	r0, [pc, #136]	; (80170a0 <analog_to_digital_converter_test+0x98>)
 8017016:	f7eb f88d 	bl	8002134 <HAL_ADC_Start>
	 //	Wait for ADC conversion to be completed
	 HAL_ADC_PollForConversion(ADC_1, 10);
 801701a:	210a      	movs	r1, #10
 801701c:	4820      	ldr	r0, [pc, #128]	; (80170a0 <analog_to_digital_converter_test+0x98>)
 801701e:	f7eb f957 	bl	80022d0 <HAL_ADC_PollForConversion>

	 //	Get ADC value from ADC data register
	  adcVal1 = HAL_ADC_GetValue(ADC_1);
 8017022:	481f      	ldr	r0, [pc, #124]	; (80170a0 <analog_to_digital_converter_test+0x98>)
 8017024:	f7eb faef 	bl	8002606 <HAL_ADC_GetValue>
 8017028:	6438      	str	r0, [r7, #64]	; 0x40

	if(expected_adc_value-100 < adcVal1 && adcVal1 < expected_adc_value+100 )
 801702a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801702c:	3b64      	subs	r3, #100	; 0x64
 801702e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017030:	429a      	cmp	r2, r3
 8017032:	d90f      	bls.n	8017054 <analog_to_digital_converter_test+0x4c>
 8017034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017036:	3364      	adds	r3, #100	; 0x64
 8017038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801703a:	429a      	cmp	r2, r3
 801703c:	d20a      	bcs.n	8017054 <analog_to_digital_converter_test+0x4c>
	{
		result.bool_test=TRUE;
 801703e:	2301      	movs	r3, #1
 8017040:	733b      	strb	r3, [r7, #12]
		memcpy(result.msg , "Success",  8);
 8017042:	f107 030c 	add.w	r3, r7, #12
 8017046:	3301      	adds	r3, #1
 8017048:	2208      	movs	r2, #8
 801704a:	4916      	ldr	r1, [pc, #88]	; (80170a4 <analog_to_digital_converter_test+0x9c>)
 801704c:	4618      	mov	r0, r3
 801704e:	f000 fbdd 	bl	801780c <memcpy>
 8017052:	e009      	b.n	8017068 <analog_to_digital_converter_test+0x60>
	}
	else
	{
		result.bool_test=FALSE;
 8017054:	2300      	movs	r3, #0
 8017056:	733b      	strb	r3, [r7, #12]
		memcpy(result.msg , "URT-4, bad receive data",  24);
 8017058:	f107 030c 	add.w	r3, r7, #12
 801705c:	3301      	adds	r3, #1
 801705e:	2218      	movs	r2, #24
 8017060:	4911      	ldr	r1, [pc, #68]	; (80170a8 <analog_to_digital_converter_test+0xa0>)
 8017062:	4618      	mov	r0, r3
 8017064:	f000 fbd2 	bl	801780c <memcpy>
	}
	return result;
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	f107 040c 	add.w	r4, r7, #12
 801706e:	469c      	mov	ip, r3
 8017070:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017074:	4665      	mov	r5, ip
 8017076:	4626      	mov	r6, r4
 8017078:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801707a:	6028      	str	r0, [r5, #0]
 801707c:	6069      	str	r1, [r5, #4]
 801707e:	60aa      	str	r2, [r5, #8]
 8017080:	60eb      	str	r3, [r5, #12]
 8017082:	3410      	adds	r4, #16
 8017084:	f10c 0c10 	add.w	ip, ip, #16
 8017088:	4574      	cmp	r4, lr
 801708a:	d1f3      	bne.n	8017074 <analog_to_digital_converter_test+0x6c>
 801708c:	4663      	mov	r3, ip
 801708e:	4622      	mov	r2, r4
 8017090:	8811      	ldrh	r1, [r2, #0]
 8017092:	7892      	ldrb	r2, [r2, #2]
 8017094:	8019      	strh	r1, [r3, #0]
 8017096:	709a      	strb	r2, [r3, #2]
}
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	374c      	adds	r7, #76	; 0x4c
 801709c:	46bd      	mov	sp, r7
 801709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170a0:	200001ec 	.word	0x200001ec
 80170a4:	0801b42c 	.word	0x0801b42c
 80170a8:	0801b434 	.word	0x0801b434

080170ac <ADC_tests>:



void ADC_tests( result_test*result)
{
 80170ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ae:	b091      	sub	sp, #68	; 0x44
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	*result=analog_to_digital_converter_test();
 80170b4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80170b6:	463b      	mov	r3, r7
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7ff ffa5 	bl	8017008 <analog_to_digital_converter_test>
 80170be:	463b      	mov	r3, r7
 80170c0:	4620      	mov	r0, r4
 80170c2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80170c6:	4602      	mov	r2, r0
 80170c8:	4619      	mov	r1, r3
 80170ca:	f8d1 c000 	ldr.w	ip, [r1]
 80170ce:	684e      	ldr	r6, [r1, #4]
 80170d0:	688d      	ldr	r5, [r1, #8]
 80170d2:	68c9      	ldr	r1, [r1, #12]
 80170d4:	f8c2 c000 	str.w	ip, [r2]
 80170d8:	6056      	str	r6, [r2, #4]
 80170da:	6095      	str	r5, [r2, #8]
 80170dc:	60d1      	str	r1, [r2, #12]
 80170de:	3310      	adds	r3, #16
 80170e0:	3010      	adds	r0, #16
 80170e2:	42a3      	cmp	r3, r4
 80170e4:	d1ef      	bne.n	80170c6 <ADC_tests+0x1a>
 80170e6:	4602      	mov	r2, r0
 80170e8:	8819      	ldrh	r1, [r3, #0]
 80170ea:	789b      	ldrb	r3, [r3, #2]
 80170ec:	8011      	strh	r1, [r2, #0]
 80170ee:	7093      	strb	r3, [r2, #2]
}
 80170f0:	bf00      	nop
 80170f2:	3744      	adds	r7, #68	; 0x44
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170f8 <test_transmit_receive_data_I2C>:




result_test test_transmit_receive_data_I2C(const char* data,uint8_t lenght)
{
 80170f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170fa:	b093      	sub	sp, #76	; 0x4c
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	60f8      	str	r0, [r7, #12]
 8017100:	60b9      	str	r1, [r7, #8]
 8017102:	4613      	mov	r3, r2
 8017104:	71fb      	strb	r3, [r7, #7]
	result_test result;
	int waiting_counter=0;
 8017106:	2300      	movs	r3, #0
 8017108:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, &data_buff_receiver1_Slave_I2C, lenght);
 801710a:	79fb      	ldrb	r3, [r7, #7]
 801710c:	b29b      	uxth	r3, r3
 801710e:	461a      	mov	r2, r3
 8017110:	496b      	ldr	r1, [pc, #428]	; (80172c0 <test_transmit_receive_data_I2C+0x1c8>)
 8017112:	486c      	ldr	r0, [pc, #432]	; (80172c4 <test_transmit_receive_data_I2C+0x1cc>)
 8017114:	f7ee fa16 	bl	8005544 <HAL_I2C_Slave_Receive_DMA>
	HAL_I2C_Master_Transmit_DMA(I2C_MASTER, 44, data, lenght);
 8017118:	79fb      	ldrb	r3, [r7, #7]
 801711a:	b29b      	uxth	r3, r3
 801711c:	68ba      	ldr	r2, [r7, #8]
 801711e:	212c      	movs	r1, #44	; 0x2c
 8017120:	4869      	ldr	r0, [pc, #420]	; (80172c8 <test_transmit_receive_data_I2C+0x1d0>)
 8017122:	f7ed ff79 	bl	8005018 <HAL_I2C_Master_Transmit_DMA>

	while (1)
	{
		if(flag_R_slave==TRUE)
 8017126:	4b69      	ldr	r3, [pc, #420]	; (80172cc <test_transmit_receive_data_I2C+0x1d4>)
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	2b01      	cmp	r3, #1
 801712c:	d13c      	bne.n	80171a8 <test_transmit_receive_data_I2C+0xb0>
		{

			if( check_data(data,data_buff_receiver1_Slave_I2C,lenght)==FALSE )
 801712e:	79fb      	ldrb	r3, [r7, #7]
 8017130:	461a      	mov	r2, r3
 8017132:	4963      	ldr	r1, [pc, #396]	; (80172c0 <test_transmit_receive_data_I2C+0x1c8>)
 8017134:	68b8      	ldr	r0, [r7, #8]
 8017136:	f7ff fb89 	bl	801684c <check_data>
 801713a:	4603      	mov	r3, r0
 801713c:	2b00      	cmp	r3, #0
 801713e:	d122      	bne.n	8017186 <test_transmit_receive_data_I2C+0x8e>
			{
				result.bool_test=FALSE;
 8017140:	2300      	movs	r3, #0
 8017142:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-5, bad receive data",  24);
 8017144:	f107 0310 	add.w	r3, r7, #16
 8017148:	3301      	adds	r3, #1
 801714a:	2218      	movs	r2, #24
 801714c:	4960      	ldr	r1, [pc, #384]	; (80172d0 <test_transmit_receive_data_I2C+0x1d8>)
 801714e:	4618      	mov	r0, r3
 8017150:	f000 fb5c 	bl	801780c <memcpy>
				return result;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f107 0410 	add.w	r4, r7, #16
 801715a:	469c      	mov	ip, r3
 801715c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017160:	4665      	mov	r5, ip
 8017162:	4626      	mov	r6, r4
 8017164:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017166:	6028      	str	r0, [r5, #0]
 8017168:	6069      	str	r1, [r5, #4]
 801716a:	60aa      	str	r2, [r5, #8]
 801716c:	60eb      	str	r3, [r5, #12]
 801716e:	3410      	adds	r4, #16
 8017170:	f10c 0c10 	add.w	ip, ip, #16
 8017174:	4574      	cmp	r4, lr
 8017176:	d1f3      	bne.n	8017160 <test_transmit_receive_data_I2C+0x68>
 8017178:	4663      	mov	r3, ip
 801717a:	4622      	mov	r2, r4
 801717c:	8811      	ldrh	r1, [r2, #0]
 801717e:	7892      	ldrb	r2, [r2, #2]
 8017180:	8019      	strh	r1, [r3, #0]
 8017182:	709a      	strb	r2, [r3, #2]
 8017184:	e098      	b.n	80172b8 <test_transmit_receive_data_I2C+0x1c0>
			}


			HAL_I2C_Master_Receive_DMA(I2C_MASTER,44, &data_buff_receiver_Master_I2C, lenght);
 8017186:	79fb      	ldrb	r3, [r7, #7]
 8017188:	b29b      	uxth	r3, r3
 801718a:	4a52      	ldr	r2, [pc, #328]	; (80172d4 <test_transmit_receive_data_I2C+0x1dc>)
 801718c:	212c      	movs	r1, #44	; 0x2c
 801718e:	484e      	ldr	r0, [pc, #312]	; (80172c8 <test_transmit_receive_data_I2C+0x1d0>)
 8017190:	f7ee f832 	bl	80051f8 <HAL_I2C_Master_Receive_DMA>
			HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE,data_buff_receiver1_Slave_I2C, lenght);
 8017194:	79fb      	ldrb	r3, [r7, #7]
 8017196:	b29b      	uxth	r3, r3
 8017198:	461a      	mov	r2, r3
 801719a:	4949      	ldr	r1, [pc, #292]	; (80172c0 <test_transmit_receive_data_I2C+0x1c8>)
 801719c:	4849      	ldr	r0, [pc, #292]	; (80172c4 <test_transmit_receive_data_I2C+0x1cc>)
 801719e:	f7ee f91b 	bl	80053d8 <HAL_I2C_Slave_Transmit_DMA>
			flag_R_slave=FALSE;
 80171a2:	4b4a      	ldr	r3, [pc, #296]	; (80172cc <test_transmit_receive_data_I2C+0x1d4>)
 80171a4:	2200      	movs	r2, #0
 80171a6:	701a      	strb	r2, [r3, #0]
		}
		if(flag_R_Master==TRUE)
 80171a8:	4b4b      	ldr	r3, [pc, #300]	; (80172d8 <test_transmit_receive_data_I2C+0x1e0>)
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	2b01      	cmp	r3, #1
 80171ae:	d144      	bne.n	801723a <test_transmit_receive_data_I2C+0x142>
		{
			if( check_data(data,data_buff_receiver_Master_I2C,lenght)==FALSE )
 80171b0:	79fb      	ldrb	r3, [r7, #7]
 80171b2:	461a      	mov	r2, r3
 80171b4:	4947      	ldr	r1, [pc, #284]	; (80172d4 <test_transmit_receive_data_I2C+0x1dc>)
 80171b6:	68b8      	ldr	r0, [r7, #8]
 80171b8:	f7ff fb48 	bl	801684c <check_data>
 80171bc:	4603      	mov	r3, r0
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d122      	bne.n	8017208 <test_transmit_receive_data_I2C+0x110>
			{
				result.bool_test=FALSE;
 80171c2:	2300      	movs	r3, #0
 80171c4:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-4, bad receive data",  24);
 80171c6:	f107 0310 	add.w	r3, r7, #16
 80171ca:	3301      	adds	r3, #1
 80171cc:	2218      	movs	r2, #24
 80171ce:	4943      	ldr	r1, [pc, #268]	; (80172dc <test_transmit_receive_data_I2C+0x1e4>)
 80171d0:	4618      	mov	r0, r3
 80171d2:	f000 fb1b 	bl	801780c <memcpy>
				return result;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	f107 0410 	add.w	r4, r7, #16
 80171dc:	469c      	mov	ip, r3
 80171de:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80171e2:	4665      	mov	r5, ip
 80171e4:	4626      	mov	r6, r4
 80171e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80171e8:	6028      	str	r0, [r5, #0]
 80171ea:	6069      	str	r1, [r5, #4]
 80171ec:	60aa      	str	r2, [r5, #8]
 80171ee:	60eb      	str	r3, [r5, #12]
 80171f0:	3410      	adds	r4, #16
 80171f2:	f10c 0c10 	add.w	ip, ip, #16
 80171f6:	4574      	cmp	r4, lr
 80171f8:	d1f3      	bne.n	80171e2 <test_transmit_receive_data_I2C+0xea>
 80171fa:	4663      	mov	r3, ip
 80171fc:	4622      	mov	r2, r4
 80171fe:	8811      	ldrh	r1, [r2, #0]
 8017200:	7892      	ldrb	r2, [r2, #2]
 8017202:	8019      	strh	r1, [r3, #0]
 8017204:	709a      	strb	r2, [r3, #2]
 8017206:	e057      	b.n	80172b8 <test_transmit_receive_data_I2C+0x1c0>
			}
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 8017208:	2180      	movs	r1, #128	; 0x80
 801720a:	4835      	ldr	r0, [pc, #212]	; (80172e0 <test_transmit_receive_data_I2C+0x1e8>)
 801720c:	f7ed fe35 	bl	8004e7a <HAL_GPIO_TogglePin>
			flag_R_Master=FALSE;
 8017210:	4b31      	ldr	r3, [pc, #196]	; (80172d8 <test_transmit_receive_data_I2C+0x1e0>)
 8017212:	2200      	movs	r2, #0
 8017214:	701a      	strb	r2, [r3, #0]
			break;
 8017216:	bf00      	nop
			return result;
		}

	}

	result.bool_test=TRUE;
 8017218:	2301      	movs	r3, #1
 801721a:	743b      	strb	r3, [r7, #16]
	memcpy(result.msg , "Success",  8);
 801721c:	f107 0310 	add.w	r3, r7, #16
 8017220:	3301      	adds	r3, #1
 8017222:	2208      	movs	r2, #8
 8017224:	492f      	ldr	r1, [pc, #188]	; (80172e4 <test_transmit_receive_data_I2C+0x1ec>)
 8017226:	4618      	mov	r0, r3
 8017228:	f000 faf0 	bl	801780c <memcpy>
	return result;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	f107 0410 	add.w	r4, r7, #16
 8017232:	469c      	mov	ip, r3
 8017234:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017238:	e02c      	b.n	8017294 <test_transmit_receive_data_I2C+0x19c>
		HAL_Delay(10);
 801723a:	200a      	movs	r0, #10
 801723c:	f7ea ff12 	bl	8002064 <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 8017240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017242:	3301      	adds	r3, #1
 8017244:	647b      	str	r3, [r7, #68]	; 0x44
 8017246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017248:	2b05      	cmp	r3, #5
 801724a:	f77f af6c 	ble.w	8017126 <test_transmit_receive_data_I2C+0x2e>
			result.bool_test=FALSE;
 801724e:	2300      	movs	r3, #0
 8017250:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , "bad conotion between UART",  26);
 8017252:	f107 0310 	add.w	r3, r7, #16
 8017256:	3301      	adds	r3, #1
 8017258:	221a      	movs	r2, #26
 801725a:	4923      	ldr	r1, [pc, #140]	; (80172e8 <test_transmit_receive_data_I2C+0x1f0>)
 801725c:	4618      	mov	r0, r3
 801725e:	f000 fad5 	bl	801780c <memcpy>
			return result;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	f107 0410 	add.w	r4, r7, #16
 8017268:	469c      	mov	ip, r3
 801726a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801726e:	4665      	mov	r5, ip
 8017270:	4626      	mov	r6, r4
 8017272:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017274:	6028      	str	r0, [r5, #0]
 8017276:	6069      	str	r1, [r5, #4]
 8017278:	60aa      	str	r2, [r5, #8]
 801727a:	60eb      	str	r3, [r5, #12]
 801727c:	3410      	adds	r4, #16
 801727e:	f10c 0c10 	add.w	ip, ip, #16
 8017282:	4574      	cmp	r4, lr
 8017284:	d1f3      	bne.n	801726e <test_transmit_receive_data_I2C+0x176>
 8017286:	4663      	mov	r3, ip
 8017288:	4622      	mov	r2, r4
 801728a:	8811      	ldrh	r1, [r2, #0]
 801728c:	7892      	ldrb	r2, [r2, #2]
 801728e:	8019      	strh	r1, [r3, #0]
 8017290:	709a      	strb	r2, [r3, #2]
 8017292:	e011      	b.n	80172b8 <test_transmit_receive_data_I2C+0x1c0>
	return result;
 8017294:	4665      	mov	r5, ip
 8017296:	4626      	mov	r6, r4
 8017298:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801729a:	6028      	str	r0, [r5, #0]
 801729c:	6069      	str	r1, [r5, #4]
 801729e:	60aa      	str	r2, [r5, #8]
 80172a0:	60eb      	str	r3, [r5, #12]
 80172a2:	3410      	adds	r4, #16
 80172a4:	f10c 0c10 	add.w	ip, ip, #16
 80172a8:	4574      	cmp	r4, lr
 80172aa:	d1f3      	bne.n	8017294 <test_transmit_receive_data_I2C+0x19c>
 80172ac:	4663      	mov	r3, ip
 80172ae:	4622      	mov	r2, r4
 80172b0:	8811      	ldrh	r1, [r2, #0]
 80172b2:	7892      	ldrb	r2, [r2, #2]
 80172b4:	8019      	strh	r1, [r3, #0]
 80172b6:	709a      	strb	r2, [r3, #2]
}
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	374c      	adds	r7, #76	; 0x4c
 80172bc:	46bd      	mov	sp, r7
 80172be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172c0:	20009008 	.word	0x20009008
 80172c4:	2000029c 	.word	0x2000029c
 80172c8:	20000248 	.word	0x20000248
 80172cc:	20008f69 	.word	0x20008f69
 80172d0:	0801b44c 	.word	0x0801b44c
 80172d4:	20008ff4 	.word	0x20008ff4
 80172d8:	20008f68 	.word	0x20008f68
 80172dc:	0801b464 	.word	0x0801b464
 80172e0:	40020400 	.word	0x40020400
 80172e4:	0801b498 	.word	0x0801b498
 80172e8:	0801b47c 	.word	0x0801b47c

080172ec <I2C_tests>:


void I2C_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 80172ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ee:	b093      	sub	sp, #76	; 0x4c
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6478      	str	r0, [r7, #68]	; 0x44
 80172f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80172f6:	460b      	mov	r3, r1
 80172f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172fc:	4613      	mov	r3, r2
 80172fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data_buff_receiver_Master_I2C[SIZEOF_DATA_BUFF]=0;
 8017302:	4b18      	ldr	r3, [pc, #96]	; (8017364 <I2C_tests+0x78>)
 8017304:	2200      	movs	r2, #0
 8017306:	749a      	strb	r2, [r3, #18]
	data_buff_receiver1_Slave_I2C[SIZEOF_DATA_BUFF]=0;
 8017308:	4b17      	ldr	r3, [pc, #92]	; (8017368 <I2C_tests+0x7c>)
 801730a:	2200      	movs	r2, #0
 801730c:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(UART_DEBUG, "start initialization", 21, TIMEOUT_TIME_100);
 801730e:	2364      	movs	r3, #100	; 0x64
 8017310:	2215      	movs	r2, #21
 8017312:	4916      	ldr	r1, [pc, #88]	; (801736c <I2C_tests+0x80>)
 8017314:	4816      	ldr	r0, [pc, #88]	; (8017370 <I2C_tests+0x84>)
 8017316:	f7f2 fb45 	bl	80099a4 <HAL_UART_Transmit>

	*result=test_transmit_receive_data_I2C(data,lenght);
 801731a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 801731c:	463b      	mov	r3, r7
 801731e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017324:	4618      	mov	r0, r3
 8017326:	f7ff fee7 	bl	80170f8 <test_transmit_receive_data_I2C>
 801732a:	463b      	mov	r3, r7
 801732c:	4620      	mov	r0, r4
 801732e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8017332:	4602      	mov	r2, r0
 8017334:	4619      	mov	r1, r3
 8017336:	f8d1 c000 	ldr.w	ip, [r1]
 801733a:	684e      	ldr	r6, [r1, #4]
 801733c:	688d      	ldr	r5, [r1, #8]
 801733e:	68c9      	ldr	r1, [r1, #12]
 8017340:	f8c2 c000 	str.w	ip, [r2]
 8017344:	6056      	str	r6, [r2, #4]
 8017346:	6095      	str	r5, [r2, #8]
 8017348:	60d1      	str	r1, [r2, #12]
 801734a:	3310      	adds	r3, #16
 801734c:	3010      	adds	r0, #16
 801734e:	42a3      	cmp	r3, r4
 8017350:	d1ef      	bne.n	8017332 <I2C_tests+0x46>
 8017352:	4602      	mov	r2, r0
 8017354:	8819      	ldrh	r1, [r3, #0]
 8017356:	789b      	ldrb	r3, [r3, #2]
 8017358:	8011      	strh	r1, [r2, #0]
 801735a:	7093      	strb	r3, [r2, #2]

}
 801735c:	bf00      	nop
 801735e:	374c      	adds	r7, #76	; 0x4c
 8017360:	46bd      	mov	sp, r7
 8017362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017364:	20008ff4 	.word	0x20008ff4
 8017368:	20009008 	.word	0x20009008
 801736c:	0801b4a0 	.word	0x0801b4a0
 8017370:	20000814 	.word	0x20000814

08017374 <test_transmit_receive_data_SPI>:




result_test test_transmit_receive_data_SPI(const char* data,uint8_t lenght)
{
 8017374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017376:	b093      	sub	sp, #76	; 0x4c
 8017378:	af00      	add	r7, sp, #0
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	60b9      	str	r1, [r7, #8]
 801737e:	4613      	mov	r3, r2
 8017380:	71fb      	strb	r3, [r7, #7]
	result_test result;
	int waiting_counter=0;
 8017382:	2300      	movs	r3, #0
 8017384:	647b      	str	r3, [r7, #68]	; 0x44
	while (1)
	{

		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, data,
 8017386:	79fb      	ldrb	r3, [r7, #7]
 8017388:	b29b      	uxth	r3, r3
 801738a:	4a29      	ldr	r2, [pc, #164]	; (8017430 <test_transmit_receive_data_SPI+0xbc>)
 801738c:	68b9      	ldr	r1, [r7, #8]
 801738e:	4829      	ldr	r0, [pc, #164]	; (8017434 <test_transmit_receive_data_SPI+0xc0>)
 8017390:	f7f1 f840 	bl	8008414 <HAL_SPI_TransmitReceive_DMA>
				data_buff_receiver_Master_SPI, lenght);
		HAL_Delay(100);
 8017394:	2064      	movs	r0, #100	; 0x64
 8017396:	f7ea fe65 	bl	8002064 <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, "",
 801739a:	79fb      	ldrb	r3, [r7, #7]
 801739c:	b29b      	uxth	r3, r3
 801739e:	4a24      	ldr	r2, [pc, #144]	; (8017430 <test_transmit_receive_data_SPI+0xbc>)
 80173a0:	4925      	ldr	r1, [pc, #148]	; (8017438 <test_transmit_receive_data_SPI+0xc4>)
 80173a2:	4826      	ldr	r0, [pc, #152]	; (801743c <test_transmit_receive_data_SPI+0xc8>)
 80173a4:	f7f1 f836 	bl	8008414 <HAL_SPI_TransmitReceive_DMA>
				data_buff_receiver_Master_SPI, lenght);
		HAL_Delay(100);
 80173a8:	2064      	movs	r0, #100	; 0x64
 80173aa:	f7ea fe5b 	bl	8002064 <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, data_buff_receiver1_Slave_SPI,
 80173ae:	79fb      	ldrb	r3, [r7, #7]
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	4a23      	ldr	r2, [pc, #140]	; (8017440 <test_transmit_receive_data_SPI+0xcc>)
 80173b4:	4922      	ldr	r1, [pc, #136]	; (8017440 <test_transmit_receive_data_SPI+0xcc>)
 80173b6:	4821      	ldr	r0, [pc, #132]	; (801743c <test_transmit_receive_data_SPI+0xc8>)
 80173b8:	f7f1 f82c 	bl	8008414 <HAL_SPI_TransmitReceive_DMA>
						data_buff_receiver1_Slave_SPI, lenght);
		HAL_Delay(100);
 80173bc:	2064      	movs	r0, #100	; 0x64
 80173be:	f7ea fe51 	bl	8002064 <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, data_buff_receiver_Master_SPI,
 80173c2:	79fb      	ldrb	r3, [r7, #7]
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	4a1a      	ldr	r2, [pc, #104]	; (8017430 <test_transmit_receive_data_SPI+0xbc>)
 80173c8:	4919      	ldr	r1, [pc, #100]	; (8017430 <test_transmit_receive_data_SPI+0xbc>)
 80173ca:	481a      	ldr	r0, [pc, #104]	; (8017434 <test_transmit_receive_data_SPI+0xc0>)
 80173cc:	f7f1 f822 	bl	8008414 <HAL_SPI_TransmitReceive_DMA>
						data_buff_receiver_Master_SPI, lenght);



		HAL_Delay(10);
 80173d0:	200a      	movs	r0, #10
 80173d2:	f7ea fe47 	bl	8002064 <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 80173d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173d8:	3301      	adds	r3, #1
 80173da:	647b      	str	r3, [r7, #68]	; 0x44
 80173dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173de:	2b05      	cmp	r3, #5
 80173e0:	ddd1      	ble.n	8017386 <test_transmit_receive_data_SPI+0x12>
		{
			result.bool_test=FALSE;
 80173e2:	2300      	movs	r3, #0
 80173e4:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , "bad conotion between UART",  26);
 80173e6:	f107 0310 	add.w	r3, r7, #16
 80173ea:	3301      	adds	r3, #1
 80173ec:	221a      	movs	r2, #26
 80173ee:	4915      	ldr	r1, [pc, #84]	; (8017444 <test_transmit_receive_data_SPI+0xd0>)
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 fa0b 	bl	801780c <memcpy>
			return result;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	f107 0410 	add.w	r4, r7, #16
 80173fc:	469c      	mov	ip, r3
 80173fe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017402:	4665      	mov	r5, ip
 8017404:	4626      	mov	r6, r4
 8017406:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017408:	6028      	str	r0, [r5, #0]
 801740a:	6069      	str	r1, [r5, #4]
 801740c:	60aa      	str	r2, [r5, #8]
 801740e:	60eb      	str	r3, [r5, #12]
 8017410:	3410      	adds	r4, #16
 8017412:	f10c 0c10 	add.w	ip, ip, #16
 8017416:	4574      	cmp	r4, lr
 8017418:	d1f3      	bne.n	8017402 <test_transmit_receive_data_SPI+0x8e>
 801741a:	4663      	mov	r3, ip
 801741c:	4622      	mov	r2, r4
 801741e:	8811      	ldrh	r1, [r2, #0]
 8017420:	7892      	ldrb	r2, [r2, #2]
 8017422:	8019      	strh	r1, [r3, #0]
 8017424:	709a      	strb	r2, [r3, #2]
	}

	result.bool_test=TRUE;
	memcpy(result.msg , "Success",  8);
	return result;
}
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	374c      	adds	r7, #76	; 0x4c
 801742a:	46bd      	mov	sp, r7
 801742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801742e:	bf00      	nop
 8017430:	2000901c 	.word	0x2000901c
 8017434:	20000470 	.word	0x20000470
 8017438:	0801b4b8 	.word	0x0801b4b8
 801743c:	200004d4 	.word	0x200004d4
 8017440:	20009030 	.word	0x20009030
 8017444:	0801b4bc 	.word	0x0801b4bc

08017448 <SPI_tests>:


void SPI_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 8017448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801744a:	b093      	sub	sp, #76	; 0x4c
 801744c:	af00      	add	r7, sp, #0
 801744e:	6478      	str	r0, [r7, #68]	; 0x44
 8017450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017452:	460b      	mov	r3, r1
 8017454:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017458:	4613      	mov	r3, r2
 801745a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data_buff_receiver_Master_SPI[SIZEOF_DATA_BUFF]=0;
 801745e:	4b18      	ldr	r3, [pc, #96]	; (80174c0 <SPI_tests+0x78>)
 8017460:	2200      	movs	r2, #0
 8017462:	749a      	strb	r2, [r3, #18]
	data_buff_receiver1_Slave_SPI[SIZEOF_DATA_BUFF]=0;
 8017464:	4b17      	ldr	r3, [pc, #92]	; (80174c4 <SPI_tests+0x7c>)
 8017466:	2200      	movs	r2, #0
 8017468:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(UART_DEBUG, "start initialization", 21, TIMEOUT_TIME_100);
 801746a:	2364      	movs	r3, #100	; 0x64
 801746c:	2215      	movs	r2, #21
 801746e:	4916      	ldr	r1, [pc, #88]	; (80174c8 <SPI_tests+0x80>)
 8017470:	4816      	ldr	r0, [pc, #88]	; (80174cc <SPI_tests+0x84>)
 8017472:	f7f2 fa97 	bl	80099a4 <HAL_UART_Transmit>

	*result=test_transmit_receive_data_SPI(data,lenght);
 8017476:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8017478:	463b      	mov	r3, r7
 801747a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801747e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017480:	4618      	mov	r0, r3
 8017482:	f7ff ff77 	bl	8017374 <test_transmit_receive_data_SPI>
 8017486:	463b      	mov	r3, r7
 8017488:	4620      	mov	r0, r4
 801748a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801748e:	4602      	mov	r2, r0
 8017490:	4619      	mov	r1, r3
 8017492:	f8d1 c000 	ldr.w	ip, [r1]
 8017496:	684e      	ldr	r6, [r1, #4]
 8017498:	688d      	ldr	r5, [r1, #8]
 801749a:	68c9      	ldr	r1, [r1, #12]
 801749c:	f8c2 c000 	str.w	ip, [r2]
 80174a0:	6056      	str	r6, [r2, #4]
 80174a2:	6095      	str	r5, [r2, #8]
 80174a4:	60d1      	str	r1, [r2, #12]
 80174a6:	3310      	adds	r3, #16
 80174a8:	3010      	adds	r0, #16
 80174aa:	42a3      	cmp	r3, r4
 80174ac:	d1ef      	bne.n	801748e <SPI_tests+0x46>
 80174ae:	4602      	mov	r2, r0
 80174b0:	8819      	ldrh	r1, [r3, #0]
 80174b2:	789b      	ldrb	r3, [r3, #2]
 80174b4:	8011      	strh	r1, [r2, #0]
 80174b6:	7093      	strb	r3, [r2, #2]

}
 80174b8:	bf00      	nop
 80174ba:	374c      	adds	r7, #76	; 0x4c
 80174bc:	46bd      	mov	sp, r7
 80174be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c0:	2000901c 	.word	0x2000901c
 80174c4:	20009030 	.word	0x20009030
 80174c8:	0801b4d8 	.word	0x0801b4d8
 80174cc:	20000814 	.word	0x20000814

080174d0 <test_transmit_receive_data>:
uint8_t data_buff_receiver2[SIZEOF_DATA_BUFF];
uint8_t data_buff_receiver1[SIZEOF_DATA_BUFF];



result_test test_transmit_receive_data(const char* data,uint8_t lenght){
 80174d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174d2:	b093      	sub	sp, #76	; 0x4c
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	4613      	mov	r3, r2
 80174dc:	71fb      	strb	r3, [r7, #7]

	int waiting_counter=0;
 80174de:	2300      	movs	r3, #0
 80174e0:	647b      	str	r3, [r7, #68]	; 0x44
	result_test result;
	//Prepare Receive UART to receive data
	HAL_UART_Receive_IT(UART_5, data_buff_receiver1, lenght);
 80174e2:	79fb      	ldrb	r3, [r7, #7]
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	461a      	mov	r2, r3
 80174e8:	496d      	ldr	r1, [pc, #436]	; (80176a0 <test_transmit_receive_data+0x1d0>)
 80174ea:	486e      	ldr	r0, [pc, #440]	; (80176a4 <test_transmit_receive_data+0x1d4>)
 80174ec:	f7f2 fc00 	bl	8009cf0 <HAL_UART_Receive_IT>

	HAL_UART_Transmit_IT(UART_4, data, lenght);
 80174f0:	79fb      	ldrb	r3, [r7, #7]
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	461a      	mov	r2, r3
 80174f6:	68b9      	ldr	r1, [r7, #8]
 80174f8:	486b      	ldr	r0, [pc, #428]	; (80176a8 <test_transmit_receive_data+0x1d8>)
 80174fa:	f7f2 fb9b 	bl	8009c34 <HAL_UART_Transmit_IT>


	while(1)
	{
		if(receivere_UART5_flag_RxCpltCallback==TRUE)
 80174fe:	4b6b      	ldr	r3, [pc, #428]	; (80176ac <test_transmit_receive_data+0x1dc>)
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	2b01      	cmp	r3, #1
 8017504:	d13c      	bne.n	8017580 <test_transmit_receive_data+0xb0>
		{
			if( check_data(data,data_buff_receiver1,lenght)==FALSE )
 8017506:	79fb      	ldrb	r3, [r7, #7]
 8017508:	461a      	mov	r2, r3
 801750a:	4965      	ldr	r1, [pc, #404]	; (80176a0 <test_transmit_receive_data+0x1d0>)
 801750c:	68b8      	ldr	r0, [r7, #8]
 801750e:	f7ff f99d 	bl	801684c <check_data>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d122      	bne.n	801755e <test_transmit_receive_data+0x8e>
			{
				result.bool_test=FALSE;
 8017518:	2300      	movs	r3, #0
 801751a:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-5, bad receive data",  24);
 801751c:	f107 0310 	add.w	r3, r7, #16
 8017520:	3301      	adds	r3, #1
 8017522:	2218      	movs	r2, #24
 8017524:	4962      	ldr	r1, [pc, #392]	; (80176b0 <test_transmit_receive_data+0x1e0>)
 8017526:	4618      	mov	r0, r3
 8017528:	f000 f970 	bl	801780c <memcpy>
				return result;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	f107 0410 	add.w	r4, r7, #16
 8017532:	469c      	mov	ip, r3
 8017534:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017538:	4665      	mov	r5, ip
 801753a:	4626      	mov	r6, r4
 801753c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801753e:	6028      	str	r0, [r5, #0]
 8017540:	6069      	str	r1, [r5, #4]
 8017542:	60aa      	str	r2, [r5, #8]
 8017544:	60eb      	str	r3, [r5, #12]
 8017546:	3410      	adds	r4, #16
 8017548:	f10c 0c10 	add.w	ip, ip, #16
 801754c:	4574      	cmp	r4, lr
 801754e:	d1f3      	bne.n	8017538 <test_transmit_receive_data+0x68>
 8017550:	4663      	mov	r3, ip
 8017552:	4622      	mov	r2, r4
 8017554:	8811      	ldrh	r1, [r2, #0]
 8017556:	7892      	ldrb	r2, [r2, #2]
 8017558:	8019      	strh	r1, [r3, #0]
 801755a:	709a      	strb	r2, [r3, #2]
 801755c:	e09b      	b.n	8017696 <test_transmit_receive_data+0x1c6>
			}
			HAL_UART_Receive_IT(UART_4, data_buff_receiver2, lenght);
 801755e:	79fb      	ldrb	r3, [r7, #7]
 8017560:	b29b      	uxth	r3, r3
 8017562:	461a      	mov	r2, r3
 8017564:	4953      	ldr	r1, [pc, #332]	; (80176b4 <test_transmit_receive_data+0x1e4>)
 8017566:	4850      	ldr	r0, [pc, #320]	; (80176a8 <test_transmit_receive_data+0x1d8>)
 8017568:	f7f2 fbc2 	bl	8009cf0 <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(UART_5, data_buff_receiver1, lenght);
 801756c:	79fb      	ldrb	r3, [r7, #7]
 801756e:	b29b      	uxth	r3, r3
 8017570:	461a      	mov	r2, r3
 8017572:	494b      	ldr	r1, [pc, #300]	; (80176a0 <test_transmit_receive_data+0x1d0>)
 8017574:	484b      	ldr	r0, [pc, #300]	; (80176a4 <test_transmit_receive_data+0x1d4>)
 8017576:	f7f2 fb5d 	bl	8009c34 <HAL_UART_Transmit_IT>

			receivere_UART5_flag_RxCpltCallback = FALSE;
 801757a:	4b4c      	ldr	r3, [pc, #304]	; (80176ac <test_transmit_receive_data+0x1dc>)
 801757c:	2200      	movs	r2, #0
 801757e:	701a      	strb	r2, [r3, #0]
		}

		if(receivere_UART4_flag_RxCpltCallback==TRUE)
 8017580:	4b4d      	ldr	r3, [pc, #308]	; (80176b8 <test_transmit_receive_data+0x1e8>)
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b01      	cmp	r3, #1
 8017586:	d147      	bne.n	8017618 <test_transmit_receive_data+0x148>
		{
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 8017588:	2180      	movs	r1, #128	; 0x80
 801758a:	484c      	ldr	r0, [pc, #304]	; (80176bc <test_transmit_receive_data+0x1ec>)
 801758c:	f7ed fc75 	bl	8004e7a <HAL_GPIO_TogglePin>

			if( check_data(data,data_buff_receiver1,lenght)==FALSE )
 8017590:	79fb      	ldrb	r3, [r7, #7]
 8017592:	461a      	mov	r2, r3
 8017594:	4942      	ldr	r1, [pc, #264]	; (80176a0 <test_transmit_receive_data+0x1d0>)
 8017596:	68b8      	ldr	r0, [r7, #8]
 8017598:	f7ff f958 	bl	801684c <check_data>
 801759c:	4603      	mov	r3, r0
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d122      	bne.n	80175e8 <test_transmit_receive_data+0x118>
			{
				result.bool_test=FALSE;
 80175a2:	2300      	movs	r3, #0
 80175a4:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-4, bad receive data",  24);
 80175a6:	f107 0310 	add.w	r3, r7, #16
 80175aa:	3301      	adds	r3, #1
 80175ac:	2218      	movs	r2, #24
 80175ae:	4944      	ldr	r1, [pc, #272]	; (80176c0 <test_transmit_receive_data+0x1f0>)
 80175b0:	4618      	mov	r0, r3
 80175b2:	f000 f92b 	bl	801780c <memcpy>
				return result;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	f107 0410 	add.w	r4, r7, #16
 80175bc:	469c      	mov	ip, r3
 80175be:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80175c2:	4665      	mov	r5, ip
 80175c4:	4626      	mov	r6, r4
 80175c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80175c8:	6028      	str	r0, [r5, #0]
 80175ca:	6069      	str	r1, [r5, #4]
 80175cc:	60aa      	str	r2, [r5, #8]
 80175ce:	60eb      	str	r3, [r5, #12]
 80175d0:	3410      	adds	r4, #16
 80175d2:	f10c 0c10 	add.w	ip, ip, #16
 80175d6:	4574      	cmp	r4, lr
 80175d8:	d1f3      	bne.n	80175c2 <test_transmit_receive_data+0xf2>
 80175da:	4663      	mov	r3, ip
 80175dc:	4622      	mov	r2, r4
 80175de:	8811      	ldrh	r1, [r2, #0]
 80175e0:	7892      	ldrb	r2, [r2, #2]
 80175e2:	8019      	strh	r1, [r3, #0]
 80175e4:	709a      	strb	r2, [r3, #2]
 80175e6:	e056      	b.n	8017696 <test_transmit_receive_data+0x1c6>
			}
			receivere_UART4_flag_RxCpltCallback= FALSE;
 80175e8:	4b33      	ldr	r3, [pc, #204]	; (80176b8 <test_transmit_receive_data+0x1e8>)
 80175ea:	2200      	movs	r2, #0
 80175ec:	701a      	strb	r2, [r3, #0]
			break;
 80175ee:	bf00      	nop
			memcpy(result.msg , "bad conotion between UART",  26);
			return result;
		}

	}
	printf("\r\n  end \r\n");
 80175f0:	4834      	ldr	r0, [pc, #208]	; (80176c4 <test_transmit_receive_data+0x1f4>)
 80175f2:	f000 f9a7 	bl	8017944 <puts>
	result.bool_test=TRUE;
 80175f6:	2301      	movs	r3, #1
 80175f8:	743b      	strb	r3, [r7, #16]
	memcpy(result.msg , "Success",  8);
 80175fa:	f107 0310 	add.w	r3, r7, #16
 80175fe:	3301      	adds	r3, #1
 8017600:	2208      	movs	r2, #8
 8017602:	4931      	ldr	r1, [pc, #196]	; (80176c8 <test_transmit_receive_data+0x1f8>)
 8017604:	4618      	mov	r0, r3
 8017606:	f000 f901 	bl	801780c <memcpy>

	return result;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	f107 0410 	add.w	r4, r7, #16
 8017610:	469c      	mov	ip, r3
 8017612:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017616:	e02c      	b.n	8017672 <test_transmit_receive_data+0x1a2>
		HAL_Delay(10);
 8017618:	200a      	movs	r0, #10
 801761a:	f7ea fd23 	bl	8002064 <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 801761e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017620:	3301      	adds	r3, #1
 8017622:	647b      	str	r3, [r7, #68]	; 0x44
 8017624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017626:	2b05      	cmp	r3, #5
 8017628:	f77f af69 	ble.w	80174fe <test_transmit_receive_data+0x2e>
			result.bool_test=FALSE;
 801762c:	2300      	movs	r3, #0
 801762e:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , "bad conotion between UART",  26);
 8017630:	f107 0310 	add.w	r3, r7, #16
 8017634:	3301      	adds	r3, #1
 8017636:	221a      	movs	r2, #26
 8017638:	4924      	ldr	r1, [pc, #144]	; (80176cc <test_transmit_receive_data+0x1fc>)
 801763a:	4618      	mov	r0, r3
 801763c:	f000 f8e6 	bl	801780c <memcpy>
			return result;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	f107 0410 	add.w	r4, r7, #16
 8017646:	469c      	mov	ip, r3
 8017648:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801764c:	4665      	mov	r5, ip
 801764e:	4626      	mov	r6, r4
 8017650:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017652:	6028      	str	r0, [r5, #0]
 8017654:	6069      	str	r1, [r5, #4]
 8017656:	60aa      	str	r2, [r5, #8]
 8017658:	60eb      	str	r3, [r5, #12]
 801765a:	3410      	adds	r4, #16
 801765c:	f10c 0c10 	add.w	ip, ip, #16
 8017660:	4574      	cmp	r4, lr
 8017662:	d1f3      	bne.n	801764c <test_transmit_receive_data+0x17c>
 8017664:	4663      	mov	r3, ip
 8017666:	4622      	mov	r2, r4
 8017668:	8811      	ldrh	r1, [r2, #0]
 801766a:	7892      	ldrb	r2, [r2, #2]
 801766c:	8019      	strh	r1, [r3, #0]
 801766e:	709a      	strb	r2, [r3, #2]
 8017670:	e011      	b.n	8017696 <test_transmit_receive_data+0x1c6>
	return result;
 8017672:	4665      	mov	r5, ip
 8017674:	4626      	mov	r6, r4
 8017676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017678:	6028      	str	r0, [r5, #0]
 801767a:	6069      	str	r1, [r5, #4]
 801767c:	60aa      	str	r2, [r5, #8]
 801767e:	60eb      	str	r3, [r5, #12]
 8017680:	3410      	adds	r4, #16
 8017682:	f10c 0c10 	add.w	ip, ip, #16
 8017686:	4574      	cmp	r4, lr
 8017688:	d1f3      	bne.n	8017672 <test_transmit_receive_data+0x1a2>
 801768a:	4663      	mov	r3, ip
 801768c:	4622      	mov	r2, r4
 801768e:	8811      	ldrh	r1, [r2, #0]
 8017690:	7892      	ldrb	r2, [r2, #2]
 8017692:	8019      	strh	r1, [r3, #0]
 8017694:	709a      	strb	r2, [r3, #2]

}
 8017696:	68f8      	ldr	r0, [r7, #12]
 8017698:	374c      	adds	r7, #76	; 0x4c
 801769a:	46bd      	mov	sp, r7
 801769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801769e:	bf00      	nop
 80176a0:	20009058 	.word	0x20009058
 80176a4:	2000078c 	.word	0x2000078c
 80176a8:	20000704 	.word	0x20000704
 80176ac:	20008f66 	.word	0x20008f66
 80176b0:	0801b4f0 	.word	0x0801b4f0
 80176b4:	20009044 	.word	0x20009044
 80176b8:	20008f67 	.word	0x20008f67
 80176bc:	40020400 	.word	0x40020400
 80176c0:	0801b508 	.word	0x0801b508
 80176c4:	0801b53c 	.word	0x0801b53c
 80176c8:	0801b548 	.word	0x0801b548
 80176cc:	0801b520 	.word	0x0801b520

080176d0 <UART_tests>:


void UART_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 80176d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176d2:	b093      	sub	sp, #76	; 0x4c
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6478      	str	r0, [r7, #68]	; 0x44
 80176d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80176da:	460b      	mov	r3, r1
 80176dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80176e0:	4613      	mov	r3, r2
 80176e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	printf("\r\n*** **** ****\r\n");
 80176e6:	4817      	ldr	r0, [pc, #92]	; (8017744 <UART_tests+0x74>)
 80176e8:	f000 f92c 	bl	8017944 <puts>

	HAL_UART_Transmit(UART_DEBUG, "start initialization", 21, TIMEOUT_TIME_100);
 80176ec:	2364      	movs	r3, #100	; 0x64
 80176ee:	2215      	movs	r2, #21
 80176f0:	4915      	ldr	r1, [pc, #84]	; (8017748 <UART_tests+0x78>)
 80176f2:	4816      	ldr	r0, [pc, #88]	; (801774c <UART_tests+0x7c>)
 80176f4:	f7f2 f956 	bl	80099a4 <HAL_UART_Transmit>

	*result=test_transmit_receive_data(data,lenght);
 80176f8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80176fa:	463b      	mov	r3, r7
 80176fc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017702:	4618      	mov	r0, r3
 8017704:	f7ff fee4 	bl	80174d0 <test_transmit_receive_data>
 8017708:	463b      	mov	r3, r7
 801770a:	4620      	mov	r0, r4
 801770c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8017710:	4602      	mov	r2, r0
 8017712:	4619      	mov	r1, r3
 8017714:	f8d1 c000 	ldr.w	ip, [r1]
 8017718:	684e      	ldr	r6, [r1, #4]
 801771a:	688d      	ldr	r5, [r1, #8]
 801771c:	68c9      	ldr	r1, [r1, #12]
 801771e:	f8c2 c000 	str.w	ip, [r2]
 8017722:	6056      	str	r6, [r2, #4]
 8017724:	6095      	str	r5, [r2, #8]
 8017726:	60d1      	str	r1, [r2, #12]
 8017728:	3310      	adds	r3, #16
 801772a:	3010      	adds	r0, #16
 801772c:	42a3      	cmp	r3, r4
 801772e:	d1ef      	bne.n	8017710 <UART_tests+0x40>
 8017730:	4602      	mov	r2, r0
 8017732:	8819      	ldrh	r1, [r3, #0]
 8017734:	789b      	ldrb	r3, [r3, #2]
 8017736:	8011      	strh	r1, [r2, #0]
 8017738:	7093      	strb	r3, [r2, #2]

}
 801773a:	bf00      	nop
 801773c:	374c      	adds	r7, #76	; 0x4c
 801773e:	46bd      	mov	sp, r7
 8017740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017742:	bf00      	nop
 8017744:	0801b550 	.word	0x0801b550
 8017748:	0801b564 	.word	0x0801b564
 801774c:	20000814 	.word	0x20000814

08017750 <timer_test>:

#include "RTG.h"

void timer_test( result_test*result)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b086      	sub	sp, #24
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]

int counter=0;
 8017758:	2300      	movs	r3, #0
 801775a:	617b      	str	r3, [r7, #20]
	HAL_TIM_Base_Start_IT(TIM_2); //Initiate timer 2
 801775c:	480e      	ldr	r0, [pc, #56]	; (8017798 <timer_test+0x48>)
 801775e:	f7f1 fc63 	bl	8009028 <HAL_TIM_Base_Start_IT>
int new_TIM_counter,old_TIM_counter;
	while (1)
	{
		if(time_flag_PeriodElapsedCallback==TRUE)
 8017762:	4b0e      	ldr	r3, [pc, #56]	; (801779c <timer_test+0x4c>)
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d106      	bne.n	8017778 <timer_test+0x28>
		{
			printf("\r\n counter-> %d \r\n",counter);
 801776a:	6979      	ldr	r1, [r7, #20]
 801776c:	480c      	ldr	r0, [pc, #48]	; (80177a0 <timer_test+0x50>)
 801776e:	f000 f863 	bl	8017838 <iprintf>
			time_flag_PeriodElapsedCallback=FALSE;
 8017772:	4b0a      	ldr	r3, [pc, #40]	; (801779c <timer_test+0x4c>)
 8017774:	2200      	movs	r2, #0
 8017776:	701a      	strb	r2, [r3, #0]
		}

		new_TIM_counter = __HAL_TIM_GET_COUNTER(TIM_2); //Get the TIM3 Counter Register value on runtime
 8017778:	4b07      	ldr	r3, [pc, #28]	; (8017798 <timer_test+0x48>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801777e:	60fb      	str	r3, [r7, #12]
		if (new_TIM_counter < old_TIM_counter) //Check if period looped
 8017780:	68fa      	ldr	r2, [r7, #12]
 8017782:	693b      	ldr	r3, [r7, #16]
 8017784:	429a      	cmp	r2, r3
 8017786:	da01      	bge.n	801778c <timer_test+0x3c>
		{
			counter=0;
 8017788:	2300      	movs	r3, #0
 801778a:	617b      	str	r3, [r7, #20]
		}
		counter++;
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	3301      	adds	r3, #1
 8017790:	617b      	str	r3, [r7, #20]
		old_TIM_counter = new_TIM_counter; //save old counter
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	613b      	str	r3, [r7, #16]
		if(time_flag_PeriodElapsedCallback==TRUE)
 8017796:	e7e4      	b.n	8017762 <timer_test+0x12>
 8017798:	200006b8 	.word	0x200006b8
 801779c:	20008f6b 	.word	0x20008f6b
 80177a0:	0801b57c 	.word	0x0801b57c

080177a4 <__libc_init_array>:
 80177a4:	b570      	push	{r4, r5, r6, lr}
 80177a6:	4d0d      	ldr	r5, [pc, #52]	; (80177dc <__libc_init_array+0x38>)
 80177a8:	4c0d      	ldr	r4, [pc, #52]	; (80177e0 <__libc_init_array+0x3c>)
 80177aa:	1b64      	subs	r4, r4, r5
 80177ac:	10a4      	asrs	r4, r4, #2
 80177ae:	2600      	movs	r6, #0
 80177b0:	42a6      	cmp	r6, r4
 80177b2:	d109      	bne.n	80177c8 <__libc_init_array+0x24>
 80177b4:	4d0b      	ldr	r5, [pc, #44]	; (80177e4 <__libc_init_array+0x40>)
 80177b6:	4c0c      	ldr	r4, [pc, #48]	; (80177e8 <__libc_init_array+0x44>)
 80177b8:	f001 f904 	bl	80189c4 <_init>
 80177bc:	1b64      	subs	r4, r4, r5
 80177be:	10a4      	asrs	r4, r4, #2
 80177c0:	2600      	movs	r6, #0
 80177c2:	42a6      	cmp	r6, r4
 80177c4:	d105      	bne.n	80177d2 <__libc_init_array+0x2e>
 80177c6:	bd70      	pop	{r4, r5, r6, pc}
 80177c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80177cc:	4798      	blx	r3
 80177ce:	3601      	adds	r6, #1
 80177d0:	e7ee      	b.n	80177b0 <__libc_init_array+0xc>
 80177d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80177d6:	4798      	blx	r3
 80177d8:	3601      	adds	r6, #1
 80177da:	e7f2      	b.n	80177c2 <__libc_init_array+0x1e>
 80177dc:	0801b7f0 	.word	0x0801b7f0
 80177e0:	0801b7f0 	.word	0x0801b7f0
 80177e4:	0801b7f0 	.word	0x0801b7f0
 80177e8:	0801b7f4 	.word	0x0801b7f4

080177ec <memcmp>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	3901      	subs	r1, #1
 80177f0:	4402      	add	r2, r0
 80177f2:	4290      	cmp	r0, r2
 80177f4:	d101      	bne.n	80177fa <memcmp+0xe>
 80177f6:	2000      	movs	r0, #0
 80177f8:	e005      	b.n	8017806 <memcmp+0x1a>
 80177fa:	7803      	ldrb	r3, [r0, #0]
 80177fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017800:	42a3      	cmp	r3, r4
 8017802:	d001      	beq.n	8017808 <memcmp+0x1c>
 8017804:	1b18      	subs	r0, r3, r4
 8017806:	bd10      	pop	{r4, pc}
 8017808:	3001      	adds	r0, #1
 801780a:	e7f2      	b.n	80177f2 <memcmp+0x6>

0801780c <memcpy>:
 801780c:	440a      	add	r2, r1
 801780e:	4291      	cmp	r1, r2
 8017810:	f100 33ff 	add.w	r3, r0, #4294967295
 8017814:	d100      	bne.n	8017818 <memcpy+0xc>
 8017816:	4770      	bx	lr
 8017818:	b510      	push	{r4, lr}
 801781a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801781e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017822:	4291      	cmp	r1, r2
 8017824:	d1f9      	bne.n	801781a <memcpy+0xe>
 8017826:	bd10      	pop	{r4, pc}

08017828 <memset>:
 8017828:	4402      	add	r2, r0
 801782a:	4603      	mov	r3, r0
 801782c:	4293      	cmp	r3, r2
 801782e:	d100      	bne.n	8017832 <memset+0xa>
 8017830:	4770      	bx	lr
 8017832:	f803 1b01 	strb.w	r1, [r3], #1
 8017836:	e7f9      	b.n	801782c <memset+0x4>

08017838 <iprintf>:
 8017838:	b40f      	push	{r0, r1, r2, r3}
 801783a:	4b0a      	ldr	r3, [pc, #40]	; (8017864 <iprintf+0x2c>)
 801783c:	b513      	push	{r0, r1, r4, lr}
 801783e:	681c      	ldr	r4, [r3, #0]
 8017840:	b124      	cbz	r4, 801784c <iprintf+0x14>
 8017842:	69a3      	ldr	r3, [r4, #24]
 8017844:	b913      	cbnz	r3, 801784c <iprintf+0x14>
 8017846:	4620      	mov	r0, r4
 8017848:	f000 faba 	bl	8017dc0 <__sinit>
 801784c:	ab05      	add	r3, sp, #20
 801784e:	9a04      	ldr	r2, [sp, #16]
 8017850:	68a1      	ldr	r1, [r4, #8]
 8017852:	9301      	str	r3, [sp, #4]
 8017854:	4620      	mov	r0, r4
 8017856:	f000 fcdd 	bl	8018214 <_vfiprintf_r>
 801785a:	b002      	add	sp, #8
 801785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017860:	b004      	add	sp, #16
 8017862:	4770      	bx	lr
 8017864:	2000002c 	.word	0x2000002c

08017868 <_puts_r>:
 8017868:	b570      	push	{r4, r5, r6, lr}
 801786a:	460e      	mov	r6, r1
 801786c:	4605      	mov	r5, r0
 801786e:	b118      	cbz	r0, 8017878 <_puts_r+0x10>
 8017870:	6983      	ldr	r3, [r0, #24]
 8017872:	b90b      	cbnz	r3, 8017878 <_puts_r+0x10>
 8017874:	f000 faa4 	bl	8017dc0 <__sinit>
 8017878:	69ab      	ldr	r3, [r5, #24]
 801787a:	68ac      	ldr	r4, [r5, #8]
 801787c:	b913      	cbnz	r3, 8017884 <_puts_r+0x1c>
 801787e:	4628      	mov	r0, r5
 8017880:	f000 fa9e 	bl	8017dc0 <__sinit>
 8017884:	4b2c      	ldr	r3, [pc, #176]	; (8017938 <_puts_r+0xd0>)
 8017886:	429c      	cmp	r4, r3
 8017888:	d120      	bne.n	80178cc <_puts_r+0x64>
 801788a:	686c      	ldr	r4, [r5, #4]
 801788c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801788e:	07db      	lsls	r3, r3, #31
 8017890:	d405      	bmi.n	801789e <_puts_r+0x36>
 8017892:	89a3      	ldrh	r3, [r4, #12]
 8017894:	0598      	lsls	r0, r3, #22
 8017896:	d402      	bmi.n	801789e <_puts_r+0x36>
 8017898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801789a:	f000 fb41 	bl	8017f20 <__retarget_lock_acquire_recursive>
 801789e:	89a3      	ldrh	r3, [r4, #12]
 80178a0:	0719      	lsls	r1, r3, #28
 80178a2:	d51d      	bpl.n	80178e0 <_puts_r+0x78>
 80178a4:	6923      	ldr	r3, [r4, #16]
 80178a6:	b1db      	cbz	r3, 80178e0 <_puts_r+0x78>
 80178a8:	3e01      	subs	r6, #1
 80178aa:	68a3      	ldr	r3, [r4, #8]
 80178ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80178b0:	3b01      	subs	r3, #1
 80178b2:	60a3      	str	r3, [r4, #8]
 80178b4:	bb39      	cbnz	r1, 8017906 <_puts_r+0x9e>
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	da38      	bge.n	801792c <_puts_r+0xc4>
 80178ba:	4622      	mov	r2, r4
 80178bc:	210a      	movs	r1, #10
 80178be:	4628      	mov	r0, r5
 80178c0:	f000 f886 	bl	80179d0 <__swbuf_r>
 80178c4:	3001      	adds	r0, #1
 80178c6:	d011      	beq.n	80178ec <_puts_r+0x84>
 80178c8:	250a      	movs	r5, #10
 80178ca:	e011      	b.n	80178f0 <_puts_r+0x88>
 80178cc:	4b1b      	ldr	r3, [pc, #108]	; (801793c <_puts_r+0xd4>)
 80178ce:	429c      	cmp	r4, r3
 80178d0:	d101      	bne.n	80178d6 <_puts_r+0x6e>
 80178d2:	68ac      	ldr	r4, [r5, #8]
 80178d4:	e7da      	b.n	801788c <_puts_r+0x24>
 80178d6:	4b1a      	ldr	r3, [pc, #104]	; (8017940 <_puts_r+0xd8>)
 80178d8:	429c      	cmp	r4, r3
 80178da:	bf08      	it	eq
 80178dc:	68ec      	ldreq	r4, [r5, #12]
 80178de:	e7d5      	b.n	801788c <_puts_r+0x24>
 80178e0:	4621      	mov	r1, r4
 80178e2:	4628      	mov	r0, r5
 80178e4:	f000 f8c6 	bl	8017a74 <__swsetup_r>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d0dd      	beq.n	80178a8 <_puts_r+0x40>
 80178ec:	f04f 35ff 	mov.w	r5, #4294967295
 80178f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178f2:	07da      	lsls	r2, r3, #31
 80178f4:	d405      	bmi.n	8017902 <_puts_r+0x9a>
 80178f6:	89a3      	ldrh	r3, [r4, #12]
 80178f8:	059b      	lsls	r3, r3, #22
 80178fa:	d402      	bmi.n	8017902 <_puts_r+0x9a>
 80178fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178fe:	f000 fb10 	bl	8017f22 <__retarget_lock_release_recursive>
 8017902:	4628      	mov	r0, r5
 8017904:	bd70      	pop	{r4, r5, r6, pc}
 8017906:	2b00      	cmp	r3, #0
 8017908:	da04      	bge.n	8017914 <_puts_r+0xac>
 801790a:	69a2      	ldr	r2, [r4, #24]
 801790c:	429a      	cmp	r2, r3
 801790e:	dc06      	bgt.n	801791e <_puts_r+0xb6>
 8017910:	290a      	cmp	r1, #10
 8017912:	d004      	beq.n	801791e <_puts_r+0xb6>
 8017914:	6823      	ldr	r3, [r4, #0]
 8017916:	1c5a      	adds	r2, r3, #1
 8017918:	6022      	str	r2, [r4, #0]
 801791a:	7019      	strb	r1, [r3, #0]
 801791c:	e7c5      	b.n	80178aa <_puts_r+0x42>
 801791e:	4622      	mov	r2, r4
 8017920:	4628      	mov	r0, r5
 8017922:	f000 f855 	bl	80179d0 <__swbuf_r>
 8017926:	3001      	adds	r0, #1
 8017928:	d1bf      	bne.n	80178aa <_puts_r+0x42>
 801792a:	e7df      	b.n	80178ec <_puts_r+0x84>
 801792c:	6823      	ldr	r3, [r4, #0]
 801792e:	250a      	movs	r5, #10
 8017930:	1c5a      	adds	r2, r3, #1
 8017932:	6022      	str	r2, [r4, #0]
 8017934:	701d      	strb	r5, [r3, #0]
 8017936:	e7db      	b.n	80178f0 <_puts_r+0x88>
 8017938:	0801b774 	.word	0x0801b774
 801793c:	0801b794 	.word	0x0801b794
 8017940:	0801b754 	.word	0x0801b754

08017944 <puts>:
 8017944:	4b02      	ldr	r3, [pc, #8]	; (8017950 <puts+0xc>)
 8017946:	4601      	mov	r1, r0
 8017948:	6818      	ldr	r0, [r3, #0]
 801794a:	f7ff bf8d 	b.w	8017868 <_puts_r>
 801794e:	bf00      	nop
 8017950:	2000002c 	.word	0x2000002c

08017954 <rand>:
 8017954:	4b16      	ldr	r3, [pc, #88]	; (80179b0 <rand+0x5c>)
 8017956:	b510      	push	{r4, lr}
 8017958:	681c      	ldr	r4, [r3, #0]
 801795a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801795c:	b9b3      	cbnz	r3, 801798c <rand+0x38>
 801795e:	2018      	movs	r0, #24
 8017960:	f000 fb46 	bl	8017ff0 <malloc>
 8017964:	63a0      	str	r0, [r4, #56]	; 0x38
 8017966:	b928      	cbnz	r0, 8017974 <rand+0x20>
 8017968:	4602      	mov	r2, r0
 801796a:	4b12      	ldr	r3, [pc, #72]	; (80179b4 <rand+0x60>)
 801796c:	4812      	ldr	r0, [pc, #72]	; (80179b8 <rand+0x64>)
 801796e:	214e      	movs	r1, #78	; 0x4e
 8017970:	f000 f8ee 	bl	8017b50 <__assert_func>
 8017974:	4a11      	ldr	r2, [pc, #68]	; (80179bc <rand+0x68>)
 8017976:	4b12      	ldr	r3, [pc, #72]	; (80179c0 <rand+0x6c>)
 8017978:	e9c0 2300 	strd	r2, r3, [r0]
 801797c:	4b11      	ldr	r3, [pc, #68]	; (80179c4 <rand+0x70>)
 801797e:	6083      	str	r3, [r0, #8]
 8017980:	230b      	movs	r3, #11
 8017982:	8183      	strh	r3, [r0, #12]
 8017984:	2201      	movs	r2, #1
 8017986:	2300      	movs	r3, #0
 8017988:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801798c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801798e:	4a0e      	ldr	r2, [pc, #56]	; (80179c8 <rand+0x74>)
 8017990:	6920      	ldr	r0, [r4, #16]
 8017992:	6963      	ldr	r3, [r4, #20]
 8017994:	490d      	ldr	r1, [pc, #52]	; (80179cc <rand+0x78>)
 8017996:	4342      	muls	r2, r0
 8017998:	fb01 2203 	mla	r2, r1, r3, r2
 801799c:	fba0 0101 	umull	r0, r1, r0, r1
 80179a0:	1c43      	adds	r3, r0, #1
 80179a2:	eb42 0001 	adc.w	r0, r2, r1
 80179a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80179aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80179ae:	bd10      	pop	{r4, pc}
 80179b0:	2000002c 	.word	0x2000002c
 80179b4:	0801b6a4 	.word	0x0801b6a4
 80179b8:	0801b6bb 	.word	0x0801b6bb
 80179bc:	abcd330e 	.word	0xabcd330e
 80179c0:	e66d1234 	.word	0xe66d1234
 80179c4:	0005deec 	.word	0x0005deec
 80179c8:	5851f42d 	.word	0x5851f42d
 80179cc:	4c957f2d 	.word	0x4c957f2d

080179d0 <__swbuf_r>:
 80179d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179d2:	460e      	mov	r6, r1
 80179d4:	4614      	mov	r4, r2
 80179d6:	4605      	mov	r5, r0
 80179d8:	b118      	cbz	r0, 80179e2 <__swbuf_r+0x12>
 80179da:	6983      	ldr	r3, [r0, #24]
 80179dc:	b90b      	cbnz	r3, 80179e2 <__swbuf_r+0x12>
 80179de:	f000 f9ef 	bl	8017dc0 <__sinit>
 80179e2:	4b21      	ldr	r3, [pc, #132]	; (8017a68 <__swbuf_r+0x98>)
 80179e4:	429c      	cmp	r4, r3
 80179e6:	d12b      	bne.n	8017a40 <__swbuf_r+0x70>
 80179e8:	686c      	ldr	r4, [r5, #4]
 80179ea:	69a3      	ldr	r3, [r4, #24]
 80179ec:	60a3      	str	r3, [r4, #8]
 80179ee:	89a3      	ldrh	r3, [r4, #12]
 80179f0:	071a      	lsls	r2, r3, #28
 80179f2:	d52f      	bpl.n	8017a54 <__swbuf_r+0x84>
 80179f4:	6923      	ldr	r3, [r4, #16]
 80179f6:	b36b      	cbz	r3, 8017a54 <__swbuf_r+0x84>
 80179f8:	6923      	ldr	r3, [r4, #16]
 80179fa:	6820      	ldr	r0, [r4, #0]
 80179fc:	1ac0      	subs	r0, r0, r3
 80179fe:	6963      	ldr	r3, [r4, #20]
 8017a00:	b2f6      	uxtb	r6, r6
 8017a02:	4283      	cmp	r3, r0
 8017a04:	4637      	mov	r7, r6
 8017a06:	dc04      	bgt.n	8017a12 <__swbuf_r+0x42>
 8017a08:	4621      	mov	r1, r4
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	f000 f944 	bl	8017c98 <_fflush_r>
 8017a10:	bb30      	cbnz	r0, 8017a60 <__swbuf_r+0x90>
 8017a12:	68a3      	ldr	r3, [r4, #8]
 8017a14:	3b01      	subs	r3, #1
 8017a16:	60a3      	str	r3, [r4, #8]
 8017a18:	6823      	ldr	r3, [r4, #0]
 8017a1a:	1c5a      	adds	r2, r3, #1
 8017a1c:	6022      	str	r2, [r4, #0]
 8017a1e:	701e      	strb	r6, [r3, #0]
 8017a20:	6963      	ldr	r3, [r4, #20]
 8017a22:	3001      	adds	r0, #1
 8017a24:	4283      	cmp	r3, r0
 8017a26:	d004      	beq.n	8017a32 <__swbuf_r+0x62>
 8017a28:	89a3      	ldrh	r3, [r4, #12]
 8017a2a:	07db      	lsls	r3, r3, #31
 8017a2c:	d506      	bpl.n	8017a3c <__swbuf_r+0x6c>
 8017a2e:	2e0a      	cmp	r6, #10
 8017a30:	d104      	bne.n	8017a3c <__swbuf_r+0x6c>
 8017a32:	4621      	mov	r1, r4
 8017a34:	4628      	mov	r0, r5
 8017a36:	f000 f92f 	bl	8017c98 <_fflush_r>
 8017a3a:	b988      	cbnz	r0, 8017a60 <__swbuf_r+0x90>
 8017a3c:	4638      	mov	r0, r7
 8017a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a40:	4b0a      	ldr	r3, [pc, #40]	; (8017a6c <__swbuf_r+0x9c>)
 8017a42:	429c      	cmp	r4, r3
 8017a44:	d101      	bne.n	8017a4a <__swbuf_r+0x7a>
 8017a46:	68ac      	ldr	r4, [r5, #8]
 8017a48:	e7cf      	b.n	80179ea <__swbuf_r+0x1a>
 8017a4a:	4b09      	ldr	r3, [pc, #36]	; (8017a70 <__swbuf_r+0xa0>)
 8017a4c:	429c      	cmp	r4, r3
 8017a4e:	bf08      	it	eq
 8017a50:	68ec      	ldreq	r4, [r5, #12]
 8017a52:	e7ca      	b.n	80179ea <__swbuf_r+0x1a>
 8017a54:	4621      	mov	r1, r4
 8017a56:	4628      	mov	r0, r5
 8017a58:	f000 f80c 	bl	8017a74 <__swsetup_r>
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	d0cb      	beq.n	80179f8 <__swbuf_r+0x28>
 8017a60:	f04f 37ff 	mov.w	r7, #4294967295
 8017a64:	e7ea      	b.n	8017a3c <__swbuf_r+0x6c>
 8017a66:	bf00      	nop
 8017a68:	0801b774 	.word	0x0801b774
 8017a6c:	0801b794 	.word	0x0801b794
 8017a70:	0801b754 	.word	0x0801b754

08017a74 <__swsetup_r>:
 8017a74:	4b32      	ldr	r3, [pc, #200]	; (8017b40 <__swsetup_r+0xcc>)
 8017a76:	b570      	push	{r4, r5, r6, lr}
 8017a78:	681d      	ldr	r5, [r3, #0]
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	460c      	mov	r4, r1
 8017a7e:	b125      	cbz	r5, 8017a8a <__swsetup_r+0x16>
 8017a80:	69ab      	ldr	r3, [r5, #24]
 8017a82:	b913      	cbnz	r3, 8017a8a <__swsetup_r+0x16>
 8017a84:	4628      	mov	r0, r5
 8017a86:	f000 f99b 	bl	8017dc0 <__sinit>
 8017a8a:	4b2e      	ldr	r3, [pc, #184]	; (8017b44 <__swsetup_r+0xd0>)
 8017a8c:	429c      	cmp	r4, r3
 8017a8e:	d10f      	bne.n	8017ab0 <__swsetup_r+0x3c>
 8017a90:	686c      	ldr	r4, [r5, #4]
 8017a92:	89a3      	ldrh	r3, [r4, #12]
 8017a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a98:	0719      	lsls	r1, r3, #28
 8017a9a:	d42c      	bmi.n	8017af6 <__swsetup_r+0x82>
 8017a9c:	06dd      	lsls	r5, r3, #27
 8017a9e:	d411      	bmi.n	8017ac4 <__swsetup_r+0x50>
 8017aa0:	2309      	movs	r3, #9
 8017aa2:	6033      	str	r3, [r6, #0]
 8017aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017aa8:	81a3      	strh	r3, [r4, #12]
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8017aae:	e03e      	b.n	8017b2e <__swsetup_r+0xba>
 8017ab0:	4b25      	ldr	r3, [pc, #148]	; (8017b48 <__swsetup_r+0xd4>)
 8017ab2:	429c      	cmp	r4, r3
 8017ab4:	d101      	bne.n	8017aba <__swsetup_r+0x46>
 8017ab6:	68ac      	ldr	r4, [r5, #8]
 8017ab8:	e7eb      	b.n	8017a92 <__swsetup_r+0x1e>
 8017aba:	4b24      	ldr	r3, [pc, #144]	; (8017b4c <__swsetup_r+0xd8>)
 8017abc:	429c      	cmp	r4, r3
 8017abe:	bf08      	it	eq
 8017ac0:	68ec      	ldreq	r4, [r5, #12]
 8017ac2:	e7e6      	b.n	8017a92 <__swsetup_r+0x1e>
 8017ac4:	0758      	lsls	r0, r3, #29
 8017ac6:	d512      	bpl.n	8017aee <__swsetup_r+0x7a>
 8017ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017aca:	b141      	cbz	r1, 8017ade <__swsetup_r+0x6a>
 8017acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ad0:	4299      	cmp	r1, r3
 8017ad2:	d002      	beq.n	8017ada <__swsetup_r+0x66>
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	f000 fa93 	bl	8018000 <_free_r>
 8017ada:	2300      	movs	r3, #0
 8017adc:	6363      	str	r3, [r4, #52]	; 0x34
 8017ade:	89a3      	ldrh	r3, [r4, #12]
 8017ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017ae4:	81a3      	strh	r3, [r4, #12]
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	6063      	str	r3, [r4, #4]
 8017aea:	6923      	ldr	r3, [r4, #16]
 8017aec:	6023      	str	r3, [r4, #0]
 8017aee:	89a3      	ldrh	r3, [r4, #12]
 8017af0:	f043 0308 	orr.w	r3, r3, #8
 8017af4:	81a3      	strh	r3, [r4, #12]
 8017af6:	6923      	ldr	r3, [r4, #16]
 8017af8:	b94b      	cbnz	r3, 8017b0e <__swsetup_r+0x9a>
 8017afa:	89a3      	ldrh	r3, [r4, #12]
 8017afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b04:	d003      	beq.n	8017b0e <__swsetup_r+0x9a>
 8017b06:	4621      	mov	r1, r4
 8017b08:	4630      	mov	r0, r6
 8017b0a:	f000 fa31 	bl	8017f70 <__smakebuf_r>
 8017b0e:	89a0      	ldrh	r0, [r4, #12]
 8017b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b14:	f010 0301 	ands.w	r3, r0, #1
 8017b18:	d00a      	beq.n	8017b30 <__swsetup_r+0xbc>
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	60a3      	str	r3, [r4, #8]
 8017b1e:	6963      	ldr	r3, [r4, #20]
 8017b20:	425b      	negs	r3, r3
 8017b22:	61a3      	str	r3, [r4, #24]
 8017b24:	6923      	ldr	r3, [r4, #16]
 8017b26:	b943      	cbnz	r3, 8017b3a <__swsetup_r+0xc6>
 8017b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017b2c:	d1ba      	bne.n	8017aa4 <__swsetup_r+0x30>
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}
 8017b30:	0781      	lsls	r1, r0, #30
 8017b32:	bf58      	it	pl
 8017b34:	6963      	ldrpl	r3, [r4, #20]
 8017b36:	60a3      	str	r3, [r4, #8]
 8017b38:	e7f4      	b.n	8017b24 <__swsetup_r+0xb0>
 8017b3a:	2000      	movs	r0, #0
 8017b3c:	e7f7      	b.n	8017b2e <__swsetup_r+0xba>
 8017b3e:	bf00      	nop
 8017b40:	2000002c 	.word	0x2000002c
 8017b44:	0801b774 	.word	0x0801b774
 8017b48:	0801b794 	.word	0x0801b794
 8017b4c:	0801b754 	.word	0x0801b754

08017b50 <__assert_func>:
 8017b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b52:	4614      	mov	r4, r2
 8017b54:	461a      	mov	r2, r3
 8017b56:	4b09      	ldr	r3, [pc, #36]	; (8017b7c <__assert_func+0x2c>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	4605      	mov	r5, r0
 8017b5c:	68d8      	ldr	r0, [r3, #12]
 8017b5e:	b14c      	cbz	r4, 8017b74 <__assert_func+0x24>
 8017b60:	4b07      	ldr	r3, [pc, #28]	; (8017b80 <__assert_func+0x30>)
 8017b62:	9100      	str	r1, [sp, #0]
 8017b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b68:	4906      	ldr	r1, [pc, #24]	; (8017b84 <__assert_func+0x34>)
 8017b6a:	462b      	mov	r3, r5
 8017b6c:	f000 f9a6 	bl	8017ebc <fiprintf>
 8017b70:	f000 fe7a 	bl	8018868 <abort>
 8017b74:	4b04      	ldr	r3, [pc, #16]	; (8017b88 <__assert_func+0x38>)
 8017b76:	461c      	mov	r4, r3
 8017b78:	e7f3      	b.n	8017b62 <__assert_func+0x12>
 8017b7a:	bf00      	nop
 8017b7c:	2000002c 	.word	0x2000002c
 8017b80:	0801b716 	.word	0x0801b716
 8017b84:	0801b723 	.word	0x0801b723
 8017b88:	0801b751 	.word	0x0801b751

08017b8c <__sflush_r>:
 8017b8c:	898a      	ldrh	r2, [r1, #12]
 8017b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b92:	4605      	mov	r5, r0
 8017b94:	0710      	lsls	r0, r2, #28
 8017b96:	460c      	mov	r4, r1
 8017b98:	d458      	bmi.n	8017c4c <__sflush_r+0xc0>
 8017b9a:	684b      	ldr	r3, [r1, #4]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	dc05      	bgt.n	8017bac <__sflush_r+0x20>
 8017ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	dc02      	bgt.n	8017bac <__sflush_r+0x20>
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bae:	2e00      	cmp	r6, #0
 8017bb0:	d0f9      	beq.n	8017ba6 <__sflush_r+0x1a>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017bb8:	682f      	ldr	r7, [r5, #0]
 8017bba:	602b      	str	r3, [r5, #0]
 8017bbc:	d032      	beq.n	8017c24 <__sflush_r+0x98>
 8017bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017bc0:	89a3      	ldrh	r3, [r4, #12]
 8017bc2:	075a      	lsls	r2, r3, #29
 8017bc4:	d505      	bpl.n	8017bd2 <__sflush_r+0x46>
 8017bc6:	6863      	ldr	r3, [r4, #4]
 8017bc8:	1ac0      	subs	r0, r0, r3
 8017bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bcc:	b10b      	cbz	r3, 8017bd2 <__sflush_r+0x46>
 8017bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017bd0:	1ac0      	subs	r0, r0, r3
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	4602      	mov	r2, r0
 8017bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bd8:	6a21      	ldr	r1, [r4, #32]
 8017bda:	4628      	mov	r0, r5
 8017bdc:	47b0      	blx	r6
 8017bde:	1c43      	adds	r3, r0, #1
 8017be0:	89a3      	ldrh	r3, [r4, #12]
 8017be2:	d106      	bne.n	8017bf2 <__sflush_r+0x66>
 8017be4:	6829      	ldr	r1, [r5, #0]
 8017be6:	291d      	cmp	r1, #29
 8017be8:	d82c      	bhi.n	8017c44 <__sflush_r+0xb8>
 8017bea:	4a2a      	ldr	r2, [pc, #168]	; (8017c94 <__sflush_r+0x108>)
 8017bec:	40ca      	lsrs	r2, r1
 8017bee:	07d6      	lsls	r6, r2, #31
 8017bf0:	d528      	bpl.n	8017c44 <__sflush_r+0xb8>
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	6062      	str	r2, [r4, #4]
 8017bf6:	04d9      	lsls	r1, r3, #19
 8017bf8:	6922      	ldr	r2, [r4, #16]
 8017bfa:	6022      	str	r2, [r4, #0]
 8017bfc:	d504      	bpl.n	8017c08 <__sflush_r+0x7c>
 8017bfe:	1c42      	adds	r2, r0, #1
 8017c00:	d101      	bne.n	8017c06 <__sflush_r+0x7a>
 8017c02:	682b      	ldr	r3, [r5, #0]
 8017c04:	b903      	cbnz	r3, 8017c08 <__sflush_r+0x7c>
 8017c06:	6560      	str	r0, [r4, #84]	; 0x54
 8017c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c0a:	602f      	str	r7, [r5, #0]
 8017c0c:	2900      	cmp	r1, #0
 8017c0e:	d0ca      	beq.n	8017ba6 <__sflush_r+0x1a>
 8017c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c14:	4299      	cmp	r1, r3
 8017c16:	d002      	beq.n	8017c1e <__sflush_r+0x92>
 8017c18:	4628      	mov	r0, r5
 8017c1a:	f000 f9f1 	bl	8018000 <_free_r>
 8017c1e:	2000      	movs	r0, #0
 8017c20:	6360      	str	r0, [r4, #52]	; 0x34
 8017c22:	e7c1      	b.n	8017ba8 <__sflush_r+0x1c>
 8017c24:	6a21      	ldr	r1, [r4, #32]
 8017c26:	2301      	movs	r3, #1
 8017c28:	4628      	mov	r0, r5
 8017c2a:	47b0      	blx	r6
 8017c2c:	1c41      	adds	r1, r0, #1
 8017c2e:	d1c7      	bne.n	8017bc0 <__sflush_r+0x34>
 8017c30:	682b      	ldr	r3, [r5, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d0c4      	beq.n	8017bc0 <__sflush_r+0x34>
 8017c36:	2b1d      	cmp	r3, #29
 8017c38:	d001      	beq.n	8017c3e <__sflush_r+0xb2>
 8017c3a:	2b16      	cmp	r3, #22
 8017c3c:	d101      	bne.n	8017c42 <__sflush_r+0xb6>
 8017c3e:	602f      	str	r7, [r5, #0]
 8017c40:	e7b1      	b.n	8017ba6 <__sflush_r+0x1a>
 8017c42:	89a3      	ldrh	r3, [r4, #12]
 8017c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c48:	81a3      	strh	r3, [r4, #12]
 8017c4a:	e7ad      	b.n	8017ba8 <__sflush_r+0x1c>
 8017c4c:	690f      	ldr	r7, [r1, #16]
 8017c4e:	2f00      	cmp	r7, #0
 8017c50:	d0a9      	beq.n	8017ba6 <__sflush_r+0x1a>
 8017c52:	0793      	lsls	r3, r2, #30
 8017c54:	680e      	ldr	r6, [r1, #0]
 8017c56:	bf08      	it	eq
 8017c58:	694b      	ldreq	r3, [r1, #20]
 8017c5a:	600f      	str	r7, [r1, #0]
 8017c5c:	bf18      	it	ne
 8017c5e:	2300      	movne	r3, #0
 8017c60:	eba6 0807 	sub.w	r8, r6, r7
 8017c64:	608b      	str	r3, [r1, #8]
 8017c66:	f1b8 0f00 	cmp.w	r8, #0
 8017c6a:	dd9c      	ble.n	8017ba6 <__sflush_r+0x1a>
 8017c6c:	6a21      	ldr	r1, [r4, #32]
 8017c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c70:	4643      	mov	r3, r8
 8017c72:	463a      	mov	r2, r7
 8017c74:	4628      	mov	r0, r5
 8017c76:	47b0      	blx	r6
 8017c78:	2800      	cmp	r0, #0
 8017c7a:	dc06      	bgt.n	8017c8a <__sflush_r+0xfe>
 8017c7c:	89a3      	ldrh	r3, [r4, #12]
 8017c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c82:	81a3      	strh	r3, [r4, #12]
 8017c84:	f04f 30ff 	mov.w	r0, #4294967295
 8017c88:	e78e      	b.n	8017ba8 <__sflush_r+0x1c>
 8017c8a:	4407      	add	r7, r0
 8017c8c:	eba8 0800 	sub.w	r8, r8, r0
 8017c90:	e7e9      	b.n	8017c66 <__sflush_r+0xda>
 8017c92:	bf00      	nop
 8017c94:	20400001 	.word	0x20400001

08017c98 <_fflush_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	690b      	ldr	r3, [r1, #16]
 8017c9c:	4605      	mov	r5, r0
 8017c9e:	460c      	mov	r4, r1
 8017ca0:	b913      	cbnz	r3, 8017ca8 <_fflush_r+0x10>
 8017ca2:	2500      	movs	r5, #0
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	bd38      	pop	{r3, r4, r5, pc}
 8017ca8:	b118      	cbz	r0, 8017cb2 <_fflush_r+0x1a>
 8017caa:	6983      	ldr	r3, [r0, #24]
 8017cac:	b90b      	cbnz	r3, 8017cb2 <_fflush_r+0x1a>
 8017cae:	f000 f887 	bl	8017dc0 <__sinit>
 8017cb2:	4b14      	ldr	r3, [pc, #80]	; (8017d04 <_fflush_r+0x6c>)
 8017cb4:	429c      	cmp	r4, r3
 8017cb6:	d11b      	bne.n	8017cf0 <_fflush_r+0x58>
 8017cb8:	686c      	ldr	r4, [r5, #4]
 8017cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d0ef      	beq.n	8017ca2 <_fflush_r+0xa>
 8017cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017cc4:	07d0      	lsls	r0, r2, #31
 8017cc6:	d404      	bmi.n	8017cd2 <_fflush_r+0x3a>
 8017cc8:	0599      	lsls	r1, r3, #22
 8017cca:	d402      	bmi.n	8017cd2 <_fflush_r+0x3a>
 8017ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cce:	f000 f927 	bl	8017f20 <__retarget_lock_acquire_recursive>
 8017cd2:	4628      	mov	r0, r5
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	f7ff ff59 	bl	8017b8c <__sflush_r>
 8017cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017cdc:	07da      	lsls	r2, r3, #31
 8017cde:	4605      	mov	r5, r0
 8017ce0:	d4e0      	bmi.n	8017ca4 <_fflush_r+0xc>
 8017ce2:	89a3      	ldrh	r3, [r4, #12]
 8017ce4:	059b      	lsls	r3, r3, #22
 8017ce6:	d4dd      	bmi.n	8017ca4 <_fflush_r+0xc>
 8017ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cea:	f000 f91a 	bl	8017f22 <__retarget_lock_release_recursive>
 8017cee:	e7d9      	b.n	8017ca4 <_fflush_r+0xc>
 8017cf0:	4b05      	ldr	r3, [pc, #20]	; (8017d08 <_fflush_r+0x70>)
 8017cf2:	429c      	cmp	r4, r3
 8017cf4:	d101      	bne.n	8017cfa <_fflush_r+0x62>
 8017cf6:	68ac      	ldr	r4, [r5, #8]
 8017cf8:	e7df      	b.n	8017cba <_fflush_r+0x22>
 8017cfa:	4b04      	ldr	r3, [pc, #16]	; (8017d0c <_fflush_r+0x74>)
 8017cfc:	429c      	cmp	r4, r3
 8017cfe:	bf08      	it	eq
 8017d00:	68ec      	ldreq	r4, [r5, #12]
 8017d02:	e7da      	b.n	8017cba <_fflush_r+0x22>
 8017d04:	0801b774 	.word	0x0801b774
 8017d08:	0801b794 	.word	0x0801b794
 8017d0c:	0801b754 	.word	0x0801b754

08017d10 <std>:
 8017d10:	2300      	movs	r3, #0
 8017d12:	b510      	push	{r4, lr}
 8017d14:	4604      	mov	r4, r0
 8017d16:	e9c0 3300 	strd	r3, r3, [r0]
 8017d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017d1e:	6083      	str	r3, [r0, #8]
 8017d20:	8181      	strh	r1, [r0, #12]
 8017d22:	6643      	str	r3, [r0, #100]	; 0x64
 8017d24:	81c2      	strh	r2, [r0, #14]
 8017d26:	6183      	str	r3, [r0, #24]
 8017d28:	4619      	mov	r1, r3
 8017d2a:	2208      	movs	r2, #8
 8017d2c:	305c      	adds	r0, #92	; 0x5c
 8017d2e:	f7ff fd7b 	bl	8017828 <memset>
 8017d32:	4b05      	ldr	r3, [pc, #20]	; (8017d48 <std+0x38>)
 8017d34:	6263      	str	r3, [r4, #36]	; 0x24
 8017d36:	4b05      	ldr	r3, [pc, #20]	; (8017d4c <std+0x3c>)
 8017d38:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d3a:	4b05      	ldr	r3, [pc, #20]	; (8017d50 <std+0x40>)
 8017d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d3e:	4b05      	ldr	r3, [pc, #20]	; (8017d54 <std+0x44>)
 8017d40:	6224      	str	r4, [r4, #32]
 8017d42:	6323      	str	r3, [r4, #48]	; 0x30
 8017d44:	bd10      	pop	{r4, pc}
 8017d46:	bf00      	nop
 8017d48:	080187bd 	.word	0x080187bd
 8017d4c:	080187df 	.word	0x080187df
 8017d50:	08018817 	.word	0x08018817
 8017d54:	0801883b 	.word	0x0801883b

08017d58 <_cleanup_r>:
 8017d58:	4901      	ldr	r1, [pc, #4]	; (8017d60 <_cleanup_r+0x8>)
 8017d5a:	f000 b8c1 	b.w	8017ee0 <_fwalk_reent>
 8017d5e:	bf00      	nop
 8017d60:	08017c99 	.word	0x08017c99

08017d64 <__sfmoreglue>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	2268      	movs	r2, #104	; 0x68
 8017d68:	1e4d      	subs	r5, r1, #1
 8017d6a:	4355      	muls	r5, r2
 8017d6c:	460e      	mov	r6, r1
 8017d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d72:	f000 f9b1 	bl	80180d8 <_malloc_r>
 8017d76:	4604      	mov	r4, r0
 8017d78:	b140      	cbz	r0, 8017d8c <__sfmoreglue+0x28>
 8017d7a:	2100      	movs	r1, #0
 8017d7c:	e9c0 1600 	strd	r1, r6, [r0]
 8017d80:	300c      	adds	r0, #12
 8017d82:	60a0      	str	r0, [r4, #8]
 8017d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017d88:	f7ff fd4e 	bl	8017828 <memset>
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	bd70      	pop	{r4, r5, r6, pc}

08017d90 <__sfp_lock_acquire>:
 8017d90:	4801      	ldr	r0, [pc, #4]	; (8017d98 <__sfp_lock_acquire+0x8>)
 8017d92:	f000 b8c5 	b.w	8017f20 <__retarget_lock_acquire_recursive>
 8017d96:	bf00      	nop
 8017d98:	20009071 	.word	0x20009071

08017d9c <__sfp_lock_release>:
 8017d9c:	4801      	ldr	r0, [pc, #4]	; (8017da4 <__sfp_lock_release+0x8>)
 8017d9e:	f000 b8c0 	b.w	8017f22 <__retarget_lock_release_recursive>
 8017da2:	bf00      	nop
 8017da4:	20009071 	.word	0x20009071

08017da8 <__sinit_lock_acquire>:
 8017da8:	4801      	ldr	r0, [pc, #4]	; (8017db0 <__sinit_lock_acquire+0x8>)
 8017daa:	f000 b8b9 	b.w	8017f20 <__retarget_lock_acquire_recursive>
 8017dae:	bf00      	nop
 8017db0:	20009072 	.word	0x20009072

08017db4 <__sinit_lock_release>:
 8017db4:	4801      	ldr	r0, [pc, #4]	; (8017dbc <__sinit_lock_release+0x8>)
 8017db6:	f000 b8b4 	b.w	8017f22 <__retarget_lock_release_recursive>
 8017dba:	bf00      	nop
 8017dbc:	20009072 	.word	0x20009072

08017dc0 <__sinit>:
 8017dc0:	b510      	push	{r4, lr}
 8017dc2:	4604      	mov	r4, r0
 8017dc4:	f7ff fff0 	bl	8017da8 <__sinit_lock_acquire>
 8017dc8:	69a3      	ldr	r3, [r4, #24]
 8017dca:	b11b      	cbz	r3, 8017dd4 <__sinit+0x14>
 8017dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dd0:	f7ff bff0 	b.w	8017db4 <__sinit_lock_release>
 8017dd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8017dda:	4b13      	ldr	r3, [pc, #76]	; (8017e28 <__sinit+0x68>)
 8017ddc:	4a13      	ldr	r2, [pc, #76]	; (8017e2c <__sinit+0x6c>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8017de2:	42a3      	cmp	r3, r4
 8017de4:	bf04      	itt	eq
 8017de6:	2301      	moveq	r3, #1
 8017de8:	61a3      	streq	r3, [r4, #24]
 8017dea:	4620      	mov	r0, r4
 8017dec:	f000 f820 	bl	8017e30 <__sfp>
 8017df0:	6060      	str	r0, [r4, #4]
 8017df2:	4620      	mov	r0, r4
 8017df4:	f000 f81c 	bl	8017e30 <__sfp>
 8017df8:	60a0      	str	r0, [r4, #8]
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	f000 f818 	bl	8017e30 <__sfp>
 8017e00:	2200      	movs	r2, #0
 8017e02:	60e0      	str	r0, [r4, #12]
 8017e04:	2104      	movs	r1, #4
 8017e06:	6860      	ldr	r0, [r4, #4]
 8017e08:	f7ff ff82 	bl	8017d10 <std>
 8017e0c:	68a0      	ldr	r0, [r4, #8]
 8017e0e:	2201      	movs	r2, #1
 8017e10:	2109      	movs	r1, #9
 8017e12:	f7ff ff7d 	bl	8017d10 <std>
 8017e16:	68e0      	ldr	r0, [r4, #12]
 8017e18:	2202      	movs	r2, #2
 8017e1a:	2112      	movs	r1, #18
 8017e1c:	f7ff ff78 	bl	8017d10 <std>
 8017e20:	2301      	movs	r3, #1
 8017e22:	61a3      	str	r3, [r4, #24]
 8017e24:	e7d2      	b.n	8017dcc <__sinit+0xc>
 8017e26:	bf00      	nop
 8017e28:	0801b6a0 	.word	0x0801b6a0
 8017e2c:	08017d59 	.word	0x08017d59

08017e30 <__sfp>:
 8017e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e32:	4607      	mov	r7, r0
 8017e34:	f7ff ffac 	bl	8017d90 <__sfp_lock_acquire>
 8017e38:	4b1e      	ldr	r3, [pc, #120]	; (8017eb4 <__sfp+0x84>)
 8017e3a:	681e      	ldr	r6, [r3, #0]
 8017e3c:	69b3      	ldr	r3, [r6, #24]
 8017e3e:	b913      	cbnz	r3, 8017e46 <__sfp+0x16>
 8017e40:	4630      	mov	r0, r6
 8017e42:	f7ff ffbd 	bl	8017dc0 <__sinit>
 8017e46:	3648      	adds	r6, #72	; 0x48
 8017e48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017e4c:	3b01      	subs	r3, #1
 8017e4e:	d503      	bpl.n	8017e58 <__sfp+0x28>
 8017e50:	6833      	ldr	r3, [r6, #0]
 8017e52:	b30b      	cbz	r3, 8017e98 <__sfp+0x68>
 8017e54:	6836      	ldr	r6, [r6, #0]
 8017e56:	e7f7      	b.n	8017e48 <__sfp+0x18>
 8017e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017e5c:	b9d5      	cbnz	r5, 8017e94 <__sfp+0x64>
 8017e5e:	4b16      	ldr	r3, [pc, #88]	; (8017eb8 <__sfp+0x88>)
 8017e60:	60e3      	str	r3, [r4, #12]
 8017e62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e66:	6665      	str	r5, [r4, #100]	; 0x64
 8017e68:	f000 f859 	bl	8017f1e <__retarget_lock_init_recursive>
 8017e6c:	f7ff ff96 	bl	8017d9c <__sfp_lock_release>
 8017e70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017e74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017e78:	6025      	str	r5, [r4, #0]
 8017e7a:	61a5      	str	r5, [r4, #24]
 8017e7c:	2208      	movs	r2, #8
 8017e7e:	4629      	mov	r1, r5
 8017e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e84:	f7ff fcd0 	bl	8017828 <memset>
 8017e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e90:	4620      	mov	r0, r4
 8017e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e94:	3468      	adds	r4, #104	; 0x68
 8017e96:	e7d9      	b.n	8017e4c <__sfp+0x1c>
 8017e98:	2104      	movs	r1, #4
 8017e9a:	4638      	mov	r0, r7
 8017e9c:	f7ff ff62 	bl	8017d64 <__sfmoreglue>
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	6030      	str	r0, [r6, #0]
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	d1d5      	bne.n	8017e54 <__sfp+0x24>
 8017ea8:	f7ff ff78 	bl	8017d9c <__sfp_lock_release>
 8017eac:	230c      	movs	r3, #12
 8017eae:	603b      	str	r3, [r7, #0]
 8017eb0:	e7ee      	b.n	8017e90 <__sfp+0x60>
 8017eb2:	bf00      	nop
 8017eb4:	0801b6a0 	.word	0x0801b6a0
 8017eb8:	ffff0001 	.word	0xffff0001

08017ebc <fiprintf>:
 8017ebc:	b40e      	push	{r1, r2, r3}
 8017ebe:	b503      	push	{r0, r1, lr}
 8017ec0:	4601      	mov	r1, r0
 8017ec2:	ab03      	add	r3, sp, #12
 8017ec4:	4805      	ldr	r0, [pc, #20]	; (8017edc <fiprintf+0x20>)
 8017ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017eca:	6800      	ldr	r0, [r0, #0]
 8017ecc:	9301      	str	r3, [sp, #4]
 8017ece:	f000 f9a1 	bl	8018214 <_vfiprintf_r>
 8017ed2:	b002      	add	sp, #8
 8017ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ed8:	b003      	add	sp, #12
 8017eda:	4770      	bx	lr
 8017edc:	2000002c 	.word	0x2000002c

08017ee0 <_fwalk_reent>:
 8017ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ee4:	4606      	mov	r6, r0
 8017ee6:	4688      	mov	r8, r1
 8017ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017eec:	2700      	movs	r7, #0
 8017eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8017ef6:	d505      	bpl.n	8017f04 <_fwalk_reent+0x24>
 8017ef8:	6824      	ldr	r4, [r4, #0]
 8017efa:	2c00      	cmp	r4, #0
 8017efc:	d1f7      	bne.n	8017eee <_fwalk_reent+0xe>
 8017efe:	4638      	mov	r0, r7
 8017f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f04:	89ab      	ldrh	r3, [r5, #12]
 8017f06:	2b01      	cmp	r3, #1
 8017f08:	d907      	bls.n	8017f1a <_fwalk_reent+0x3a>
 8017f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f0e:	3301      	adds	r3, #1
 8017f10:	d003      	beq.n	8017f1a <_fwalk_reent+0x3a>
 8017f12:	4629      	mov	r1, r5
 8017f14:	4630      	mov	r0, r6
 8017f16:	47c0      	blx	r8
 8017f18:	4307      	orrs	r7, r0
 8017f1a:	3568      	adds	r5, #104	; 0x68
 8017f1c:	e7e9      	b.n	8017ef2 <_fwalk_reent+0x12>

08017f1e <__retarget_lock_init_recursive>:
 8017f1e:	4770      	bx	lr

08017f20 <__retarget_lock_acquire_recursive>:
 8017f20:	4770      	bx	lr

08017f22 <__retarget_lock_release_recursive>:
 8017f22:	4770      	bx	lr

08017f24 <__swhatbuf_r>:
 8017f24:	b570      	push	{r4, r5, r6, lr}
 8017f26:	460e      	mov	r6, r1
 8017f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f2c:	2900      	cmp	r1, #0
 8017f2e:	b096      	sub	sp, #88	; 0x58
 8017f30:	4614      	mov	r4, r2
 8017f32:	461d      	mov	r5, r3
 8017f34:	da08      	bge.n	8017f48 <__swhatbuf_r+0x24>
 8017f36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	602a      	str	r2, [r5, #0]
 8017f3e:	061a      	lsls	r2, r3, #24
 8017f40:	d410      	bmi.n	8017f64 <__swhatbuf_r+0x40>
 8017f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f46:	e00e      	b.n	8017f66 <__swhatbuf_r+0x42>
 8017f48:	466a      	mov	r2, sp
 8017f4a:	f000 fca5 	bl	8018898 <_fstat_r>
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	dbf1      	blt.n	8017f36 <__swhatbuf_r+0x12>
 8017f52:	9a01      	ldr	r2, [sp, #4]
 8017f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f5c:	425a      	negs	r2, r3
 8017f5e:	415a      	adcs	r2, r3
 8017f60:	602a      	str	r2, [r5, #0]
 8017f62:	e7ee      	b.n	8017f42 <__swhatbuf_r+0x1e>
 8017f64:	2340      	movs	r3, #64	; 0x40
 8017f66:	2000      	movs	r0, #0
 8017f68:	6023      	str	r3, [r4, #0]
 8017f6a:	b016      	add	sp, #88	; 0x58
 8017f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017f70 <__smakebuf_r>:
 8017f70:	898b      	ldrh	r3, [r1, #12]
 8017f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f74:	079d      	lsls	r5, r3, #30
 8017f76:	4606      	mov	r6, r0
 8017f78:	460c      	mov	r4, r1
 8017f7a:	d507      	bpl.n	8017f8c <__smakebuf_r+0x1c>
 8017f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f80:	6023      	str	r3, [r4, #0]
 8017f82:	6123      	str	r3, [r4, #16]
 8017f84:	2301      	movs	r3, #1
 8017f86:	6163      	str	r3, [r4, #20]
 8017f88:	b002      	add	sp, #8
 8017f8a:	bd70      	pop	{r4, r5, r6, pc}
 8017f8c:	ab01      	add	r3, sp, #4
 8017f8e:	466a      	mov	r2, sp
 8017f90:	f7ff ffc8 	bl	8017f24 <__swhatbuf_r>
 8017f94:	9900      	ldr	r1, [sp, #0]
 8017f96:	4605      	mov	r5, r0
 8017f98:	4630      	mov	r0, r6
 8017f9a:	f000 f89d 	bl	80180d8 <_malloc_r>
 8017f9e:	b948      	cbnz	r0, 8017fb4 <__smakebuf_r+0x44>
 8017fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fa4:	059a      	lsls	r2, r3, #22
 8017fa6:	d4ef      	bmi.n	8017f88 <__smakebuf_r+0x18>
 8017fa8:	f023 0303 	bic.w	r3, r3, #3
 8017fac:	f043 0302 	orr.w	r3, r3, #2
 8017fb0:	81a3      	strh	r3, [r4, #12]
 8017fb2:	e7e3      	b.n	8017f7c <__smakebuf_r+0xc>
 8017fb4:	4b0d      	ldr	r3, [pc, #52]	; (8017fec <__smakebuf_r+0x7c>)
 8017fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8017fb8:	89a3      	ldrh	r3, [r4, #12]
 8017fba:	6020      	str	r0, [r4, #0]
 8017fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fc0:	81a3      	strh	r3, [r4, #12]
 8017fc2:	9b00      	ldr	r3, [sp, #0]
 8017fc4:	6163      	str	r3, [r4, #20]
 8017fc6:	9b01      	ldr	r3, [sp, #4]
 8017fc8:	6120      	str	r0, [r4, #16]
 8017fca:	b15b      	cbz	r3, 8017fe4 <__smakebuf_r+0x74>
 8017fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	f000 fc73 	bl	80188bc <_isatty_r>
 8017fd6:	b128      	cbz	r0, 8017fe4 <__smakebuf_r+0x74>
 8017fd8:	89a3      	ldrh	r3, [r4, #12]
 8017fda:	f023 0303 	bic.w	r3, r3, #3
 8017fde:	f043 0301 	orr.w	r3, r3, #1
 8017fe2:	81a3      	strh	r3, [r4, #12]
 8017fe4:	89a0      	ldrh	r0, [r4, #12]
 8017fe6:	4305      	orrs	r5, r0
 8017fe8:	81a5      	strh	r5, [r4, #12]
 8017fea:	e7cd      	b.n	8017f88 <__smakebuf_r+0x18>
 8017fec:	08017d59 	.word	0x08017d59

08017ff0 <malloc>:
 8017ff0:	4b02      	ldr	r3, [pc, #8]	; (8017ffc <malloc+0xc>)
 8017ff2:	4601      	mov	r1, r0
 8017ff4:	6818      	ldr	r0, [r3, #0]
 8017ff6:	f000 b86f 	b.w	80180d8 <_malloc_r>
 8017ffa:	bf00      	nop
 8017ffc:	2000002c 	.word	0x2000002c

08018000 <_free_r>:
 8018000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018002:	2900      	cmp	r1, #0
 8018004:	d044      	beq.n	8018090 <_free_r+0x90>
 8018006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801800a:	9001      	str	r0, [sp, #4]
 801800c:	2b00      	cmp	r3, #0
 801800e:	f1a1 0404 	sub.w	r4, r1, #4
 8018012:	bfb8      	it	lt
 8018014:	18e4      	addlt	r4, r4, r3
 8018016:	f000 fc73 	bl	8018900 <__malloc_lock>
 801801a:	4a1e      	ldr	r2, [pc, #120]	; (8018094 <_free_r+0x94>)
 801801c:	9801      	ldr	r0, [sp, #4]
 801801e:	6813      	ldr	r3, [r2, #0]
 8018020:	b933      	cbnz	r3, 8018030 <_free_r+0x30>
 8018022:	6063      	str	r3, [r4, #4]
 8018024:	6014      	str	r4, [r2, #0]
 8018026:	b003      	add	sp, #12
 8018028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801802c:	f000 bc6e 	b.w	801890c <__malloc_unlock>
 8018030:	42a3      	cmp	r3, r4
 8018032:	d908      	bls.n	8018046 <_free_r+0x46>
 8018034:	6825      	ldr	r5, [r4, #0]
 8018036:	1961      	adds	r1, r4, r5
 8018038:	428b      	cmp	r3, r1
 801803a:	bf01      	itttt	eq
 801803c:	6819      	ldreq	r1, [r3, #0]
 801803e:	685b      	ldreq	r3, [r3, #4]
 8018040:	1949      	addeq	r1, r1, r5
 8018042:	6021      	streq	r1, [r4, #0]
 8018044:	e7ed      	b.n	8018022 <_free_r+0x22>
 8018046:	461a      	mov	r2, r3
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	b10b      	cbz	r3, 8018050 <_free_r+0x50>
 801804c:	42a3      	cmp	r3, r4
 801804e:	d9fa      	bls.n	8018046 <_free_r+0x46>
 8018050:	6811      	ldr	r1, [r2, #0]
 8018052:	1855      	adds	r5, r2, r1
 8018054:	42a5      	cmp	r5, r4
 8018056:	d10b      	bne.n	8018070 <_free_r+0x70>
 8018058:	6824      	ldr	r4, [r4, #0]
 801805a:	4421      	add	r1, r4
 801805c:	1854      	adds	r4, r2, r1
 801805e:	42a3      	cmp	r3, r4
 8018060:	6011      	str	r1, [r2, #0]
 8018062:	d1e0      	bne.n	8018026 <_free_r+0x26>
 8018064:	681c      	ldr	r4, [r3, #0]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	6053      	str	r3, [r2, #4]
 801806a:	4421      	add	r1, r4
 801806c:	6011      	str	r1, [r2, #0]
 801806e:	e7da      	b.n	8018026 <_free_r+0x26>
 8018070:	d902      	bls.n	8018078 <_free_r+0x78>
 8018072:	230c      	movs	r3, #12
 8018074:	6003      	str	r3, [r0, #0]
 8018076:	e7d6      	b.n	8018026 <_free_r+0x26>
 8018078:	6825      	ldr	r5, [r4, #0]
 801807a:	1961      	adds	r1, r4, r5
 801807c:	428b      	cmp	r3, r1
 801807e:	bf04      	itt	eq
 8018080:	6819      	ldreq	r1, [r3, #0]
 8018082:	685b      	ldreq	r3, [r3, #4]
 8018084:	6063      	str	r3, [r4, #4]
 8018086:	bf04      	itt	eq
 8018088:	1949      	addeq	r1, r1, r5
 801808a:	6021      	streq	r1, [r4, #0]
 801808c:	6054      	str	r4, [r2, #4]
 801808e:	e7ca      	b.n	8018026 <_free_r+0x26>
 8018090:	b003      	add	sp, #12
 8018092:	bd30      	pop	{r4, r5, pc}
 8018094:	20009074 	.word	0x20009074

08018098 <sbrk_aligned>:
 8018098:	b570      	push	{r4, r5, r6, lr}
 801809a:	4e0e      	ldr	r6, [pc, #56]	; (80180d4 <sbrk_aligned+0x3c>)
 801809c:	460c      	mov	r4, r1
 801809e:	6831      	ldr	r1, [r6, #0]
 80180a0:	4605      	mov	r5, r0
 80180a2:	b911      	cbnz	r1, 80180aa <sbrk_aligned+0x12>
 80180a4:	f000 fb7a 	bl	801879c <_sbrk_r>
 80180a8:	6030      	str	r0, [r6, #0]
 80180aa:	4621      	mov	r1, r4
 80180ac:	4628      	mov	r0, r5
 80180ae:	f000 fb75 	bl	801879c <_sbrk_r>
 80180b2:	1c43      	adds	r3, r0, #1
 80180b4:	d00a      	beq.n	80180cc <sbrk_aligned+0x34>
 80180b6:	1cc4      	adds	r4, r0, #3
 80180b8:	f024 0403 	bic.w	r4, r4, #3
 80180bc:	42a0      	cmp	r0, r4
 80180be:	d007      	beq.n	80180d0 <sbrk_aligned+0x38>
 80180c0:	1a21      	subs	r1, r4, r0
 80180c2:	4628      	mov	r0, r5
 80180c4:	f000 fb6a 	bl	801879c <_sbrk_r>
 80180c8:	3001      	adds	r0, #1
 80180ca:	d101      	bne.n	80180d0 <sbrk_aligned+0x38>
 80180cc:	f04f 34ff 	mov.w	r4, #4294967295
 80180d0:	4620      	mov	r0, r4
 80180d2:	bd70      	pop	{r4, r5, r6, pc}
 80180d4:	20009078 	.word	0x20009078

080180d8 <_malloc_r>:
 80180d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180dc:	1ccd      	adds	r5, r1, #3
 80180de:	f025 0503 	bic.w	r5, r5, #3
 80180e2:	3508      	adds	r5, #8
 80180e4:	2d0c      	cmp	r5, #12
 80180e6:	bf38      	it	cc
 80180e8:	250c      	movcc	r5, #12
 80180ea:	2d00      	cmp	r5, #0
 80180ec:	4607      	mov	r7, r0
 80180ee:	db01      	blt.n	80180f4 <_malloc_r+0x1c>
 80180f0:	42a9      	cmp	r1, r5
 80180f2:	d905      	bls.n	8018100 <_malloc_r+0x28>
 80180f4:	230c      	movs	r3, #12
 80180f6:	603b      	str	r3, [r7, #0]
 80180f8:	2600      	movs	r6, #0
 80180fa:	4630      	mov	r0, r6
 80180fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018100:	4e2e      	ldr	r6, [pc, #184]	; (80181bc <_malloc_r+0xe4>)
 8018102:	f000 fbfd 	bl	8018900 <__malloc_lock>
 8018106:	6833      	ldr	r3, [r6, #0]
 8018108:	461c      	mov	r4, r3
 801810a:	bb34      	cbnz	r4, 801815a <_malloc_r+0x82>
 801810c:	4629      	mov	r1, r5
 801810e:	4638      	mov	r0, r7
 8018110:	f7ff ffc2 	bl	8018098 <sbrk_aligned>
 8018114:	1c43      	adds	r3, r0, #1
 8018116:	4604      	mov	r4, r0
 8018118:	d14d      	bne.n	80181b6 <_malloc_r+0xde>
 801811a:	6834      	ldr	r4, [r6, #0]
 801811c:	4626      	mov	r6, r4
 801811e:	2e00      	cmp	r6, #0
 8018120:	d140      	bne.n	80181a4 <_malloc_r+0xcc>
 8018122:	6823      	ldr	r3, [r4, #0]
 8018124:	4631      	mov	r1, r6
 8018126:	4638      	mov	r0, r7
 8018128:	eb04 0803 	add.w	r8, r4, r3
 801812c:	f000 fb36 	bl	801879c <_sbrk_r>
 8018130:	4580      	cmp	r8, r0
 8018132:	d13a      	bne.n	80181aa <_malloc_r+0xd2>
 8018134:	6821      	ldr	r1, [r4, #0]
 8018136:	3503      	adds	r5, #3
 8018138:	1a6d      	subs	r5, r5, r1
 801813a:	f025 0503 	bic.w	r5, r5, #3
 801813e:	3508      	adds	r5, #8
 8018140:	2d0c      	cmp	r5, #12
 8018142:	bf38      	it	cc
 8018144:	250c      	movcc	r5, #12
 8018146:	4629      	mov	r1, r5
 8018148:	4638      	mov	r0, r7
 801814a:	f7ff ffa5 	bl	8018098 <sbrk_aligned>
 801814e:	3001      	adds	r0, #1
 8018150:	d02b      	beq.n	80181aa <_malloc_r+0xd2>
 8018152:	6823      	ldr	r3, [r4, #0]
 8018154:	442b      	add	r3, r5
 8018156:	6023      	str	r3, [r4, #0]
 8018158:	e00e      	b.n	8018178 <_malloc_r+0xa0>
 801815a:	6822      	ldr	r2, [r4, #0]
 801815c:	1b52      	subs	r2, r2, r5
 801815e:	d41e      	bmi.n	801819e <_malloc_r+0xc6>
 8018160:	2a0b      	cmp	r2, #11
 8018162:	d916      	bls.n	8018192 <_malloc_r+0xba>
 8018164:	1961      	adds	r1, r4, r5
 8018166:	42a3      	cmp	r3, r4
 8018168:	6025      	str	r5, [r4, #0]
 801816a:	bf18      	it	ne
 801816c:	6059      	strne	r1, [r3, #4]
 801816e:	6863      	ldr	r3, [r4, #4]
 8018170:	bf08      	it	eq
 8018172:	6031      	streq	r1, [r6, #0]
 8018174:	5162      	str	r2, [r4, r5]
 8018176:	604b      	str	r3, [r1, #4]
 8018178:	4638      	mov	r0, r7
 801817a:	f104 060b 	add.w	r6, r4, #11
 801817e:	f000 fbc5 	bl	801890c <__malloc_unlock>
 8018182:	f026 0607 	bic.w	r6, r6, #7
 8018186:	1d23      	adds	r3, r4, #4
 8018188:	1af2      	subs	r2, r6, r3
 801818a:	d0b6      	beq.n	80180fa <_malloc_r+0x22>
 801818c:	1b9b      	subs	r3, r3, r6
 801818e:	50a3      	str	r3, [r4, r2]
 8018190:	e7b3      	b.n	80180fa <_malloc_r+0x22>
 8018192:	6862      	ldr	r2, [r4, #4]
 8018194:	42a3      	cmp	r3, r4
 8018196:	bf0c      	ite	eq
 8018198:	6032      	streq	r2, [r6, #0]
 801819a:	605a      	strne	r2, [r3, #4]
 801819c:	e7ec      	b.n	8018178 <_malloc_r+0xa0>
 801819e:	4623      	mov	r3, r4
 80181a0:	6864      	ldr	r4, [r4, #4]
 80181a2:	e7b2      	b.n	801810a <_malloc_r+0x32>
 80181a4:	4634      	mov	r4, r6
 80181a6:	6876      	ldr	r6, [r6, #4]
 80181a8:	e7b9      	b.n	801811e <_malloc_r+0x46>
 80181aa:	230c      	movs	r3, #12
 80181ac:	603b      	str	r3, [r7, #0]
 80181ae:	4638      	mov	r0, r7
 80181b0:	f000 fbac 	bl	801890c <__malloc_unlock>
 80181b4:	e7a1      	b.n	80180fa <_malloc_r+0x22>
 80181b6:	6025      	str	r5, [r4, #0]
 80181b8:	e7de      	b.n	8018178 <_malloc_r+0xa0>
 80181ba:	bf00      	nop
 80181bc:	20009074 	.word	0x20009074

080181c0 <__sfputc_r>:
 80181c0:	6893      	ldr	r3, [r2, #8]
 80181c2:	3b01      	subs	r3, #1
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	b410      	push	{r4}
 80181c8:	6093      	str	r3, [r2, #8]
 80181ca:	da08      	bge.n	80181de <__sfputc_r+0x1e>
 80181cc:	6994      	ldr	r4, [r2, #24]
 80181ce:	42a3      	cmp	r3, r4
 80181d0:	db01      	blt.n	80181d6 <__sfputc_r+0x16>
 80181d2:	290a      	cmp	r1, #10
 80181d4:	d103      	bne.n	80181de <__sfputc_r+0x1e>
 80181d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181da:	f7ff bbf9 	b.w	80179d0 <__swbuf_r>
 80181de:	6813      	ldr	r3, [r2, #0]
 80181e0:	1c58      	adds	r0, r3, #1
 80181e2:	6010      	str	r0, [r2, #0]
 80181e4:	7019      	strb	r1, [r3, #0]
 80181e6:	4608      	mov	r0, r1
 80181e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181ec:	4770      	bx	lr

080181ee <__sfputs_r>:
 80181ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181f0:	4606      	mov	r6, r0
 80181f2:	460f      	mov	r7, r1
 80181f4:	4614      	mov	r4, r2
 80181f6:	18d5      	adds	r5, r2, r3
 80181f8:	42ac      	cmp	r4, r5
 80181fa:	d101      	bne.n	8018200 <__sfputs_r+0x12>
 80181fc:	2000      	movs	r0, #0
 80181fe:	e007      	b.n	8018210 <__sfputs_r+0x22>
 8018200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018204:	463a      	mov	r2, r7
 8018206:	4630      	mov	r0, r6
 8018208:	f7ff ffda 	bl	80181c0 <__sfputc_r>
 801820c:	1c43      	adds	r3, r0, #1
 801820e:	d1f3      	bne.n	80181f8 <__sfputs_r+0xa>
 8018210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018214 <_vfiprintf_r>:
 8018214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018218:	460d      	mov	r5, r1
 801821a:	b09d      	sub	sp, #116	; 0x74
 801821c:	4614      	mov	r4, r2
 801821e:	4698      	mov	r8, r3
 8018220:	4606      	mov	r6, r0
 8018222:	b118      	cbz	r0, 801822c <_vfiprintf_r+0x18>
 8018224:	6983      	ldr	r3, [r0, #24]
 8018226:	b90b      	cbnz	r3, 801822c <_vfiprintf_r+0x18>
 8018228:	f7ff fdca 	bl	8017dc0 <__sinit>
 801822c:	4b89      	ldr	r3, [pc, #548]	; (8018454 <_vfiprintf_r+0x240>)
 801822e:	429d      	cmp	r5, r3
 8018230:	d11b      	bne.n	801826a <_vfiprintf_r+0x56>
 8018232:	6875      	ldr	r5, [r6, #4]
 8018234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018236:	07d9      	lsls	r1, r3, #31
 8018238:	d405      	bmi.n	8018246 <_vfiprintf_r+0x32>
 801823a:	89ab      	ldrh	r3, [r5, #12]
 801823c:	059a      	lsls	r2, r3, #22
 801823e:	d402      	bmi.n	8018246 <_vfiprintf_r+0x32>
 8018240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018242:	f7ff fe6d 	bl	8017f20 <__retarget_lock_acquire_recursive>
 8018246:	89ab      	ldrh	r3, [r5, #12]
 8018248:	071b      	lsls	r3, r3, #28
 801824a:	d501      	bpl.n	8018250 <_vfiprintf_r+0x3c>
 801824c:	692b      	ldr	r3, [r5, #16]
 801824e:	b9eb      	cbnz	r3, 801828c <_vfiprintf_r+0x78>
 8018250:	4629      	mov	r1, r5
 8018252:	4630      	mov	r0, r6
 8018254:	f7ff fc0e 	bl	8017a74 <__swsetup_r>
 8018258:	b1c0      	cbz	r0, 801828c <_vfiprintf_r+0x78>
 801825a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801825c:	07dc      	lsls	r4, r3, #31
 801825e:	d50e      	bpl.n	801827e <_vfiprintf_r+0x6a>
 8018260:	f04f 30ff 	mov.w	r0, #4294967295
 8018264:	b01d      	add	sp, #116	; 0x74
 8018266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801826a:	4b7b      	ldr	r3, [pc, #492]	; (8018458 <_vfiprintf_r+0x244>)
 801826c:	429d      	cmp	r5, r3
 801826e:	d101      	bne.n	8018274 <_vfiprintf_r+0x60>
 8018270:	68b5      	ldr	r5, [r6, #8]
 8018272:	e7df      	b.n	8018234 <_vfiprintf_r+0x20>
 8018274:	4b79      	ldr	r3, [pc, #484]	; (801845c <_vfiprintf_r+0x248>)
 8018276:	429d      	cmp	r5, r3
 8018278:	bf08      	it	eq
 801827a:	68f5      	ldreq	r5, [r6, #12]
 801827c:	e7da      	b.n	8018234 <_vfiprintf_r+0x20>
 801827e:	89ab      	ldrh	r3, [r5, #12]
 8018280:	0598      	lsls	r0, r3, #22
 8018282:	d4ed      	bmi.n	8018260 <_vfiprintf_r+0x4c>
 8018284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018286:	f7ff fe4c 	bl	8017f22 <__retarget_lock_release_recursive>
 801828a:	e7e9      	b.n	8018260 <_vfiprintf_r+0x4c>
 801828c:	2300      	movs	r3, #0
 801828e:	9309      	str	r3, [sp, #36]	; 0x24
 8018290:	2320      	movs	r3, #32
 8018292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018296:	f8cd 800c 	str.w	r8, [sp, #12]
 801829a:	2330      	movs	r3, #48	; 0x30
 801829c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018460 <_vfiprintf_r+0x24c>
 80182a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182a4:	f04f 0901 	mov.w	r9, #1
 80182a8:	4623      	mov	r3, r4
 80182aa:	469a      	mov	sl, r3
 80182ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182b0:	b10a      	cbz	r2, 80182b6 <_vfiprintf_r+0xa2>
 80182b2:	2a25      	cmp	r2, #37	; 0x25
 80182b4:	d1f9      	bne.n	80182aa <_vfiprintf_r+0x96>
 80182b6:	ebba 0b04 	subs.w	fp, sl, r4
 80182ba:	d00b      	beq.n	80182d4 <_vfiprintf_r+0xc0>
 80182bc:	465b      	mov	r3, fp
 80182be:	4622      	mov	r2, r4
 80182c0:	4629      	mov	r1, r5
 80182c2:	4630      	mov	r0, r6
 80182c4:	f7ff ff93 	bl	80181ee <__sfputs_r>
 80182c8:	3001      	adds	r0, #1
 80182ca:	f000 80aa 	beq.w	8018422 <_vfiprintf_r+0x20e>
 80182ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80182d0:	445a      	add	r2, fp
 80182d2:	9209      	str	r2, [sp, #36]	; 0x24
 80182d4:	f89a 3000 	ldrb.w	r3, [sl]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	f000 80a2 	beq.w	8018422 <_vfiprintf_r+0x20e>
 80182de:	2300      	movs	r3, #0
 80182e0:	f04f 32ff 	mov.w	r2, #4294967295
 80182e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80182e8:	f10a 0a01 	add.w	sl, sl, #1
 80182ec:	9304      	str	r3, [sp, #16]
 80182ee:	9307      	str	r3, [sp, #28]
 80182f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80182f4:	931a      	str	r3, [sp, #104]	; 0x68
 80182f6:	4654      	mov	r4, sl
 80182f8:	2205      	movs	r2, #5
 80182fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182fe:	4858      	ldr	r0, [pc, #352]	; (8018460 <_vfiprintf_r+0x24c>)
 8018300:	f7e7 ff8e 	bl	8000220 <memchr>
 8018304:	9a04      	ldr	r2, [sp, #16]
 8018306:	b9d8      	cbnz	r0, 8018340 <_vfiprintf_r+0x12c>
 8018308:	06d1      	lsls	r1, r2, #27
 801830a:	bf44      	itt	mi
 801830c:	2320      	movmi	r3, #32
 801830e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018312:	0713      	lsls	r3, r2, #28
 8018314:	bf44      	itt	mi
 8018316:	232b      	movmi	r3, #43	; 0x2b
 8018318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801831c:	f89a 3000 	ldrb.w	r3, [sl]
 8018320:	2b2a      	cmp	r3, #42	; 0x2a
 8018322:	d015      	beq.n	8018350 <_vfiprintf_r+0x13c>
 8018324:	9a07      	ldr	r2, [sp, #28]
 8018326:	4654      	mov	r4, sl
 8018328:	2000      	movs	r0, #0
 801832a:	f04f 0c0a 	mov.w	ip, #10
 801832e:	4621      	mov	r1, r4
 8018330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018334:	3b30      	subs	r3, #48	; 0x30
 8018336:	2b09      	cmp	r3, #9
 8018338:	d94e      	bls.n	80183d8 <_vfiprintf_r+0x1c4>
 801833a:	b1b0      	cbz	r0, 801836a <_vfiprintf_r+0x156>
 801833c:	9207      	str	r2, [sp, #28]
 801833e:	e014      	b.n	801836a <_vfiprintf_r+0x156>
 8018340:	eba0 0308 	sub.w	r3, r0, r8
 8018344:	fa09 f303 	lsl.w	r3, r9, r3
 8018348:	4313      	orrs	r3, r2
 801834a:	9304      	str	r3, [sp, #16]
 801834c:	46a2      	mov	sl, r4
 801834e:	e7d2      	b.n	80182f6 <_vfiprintf_r+0xe2>
 8018350:	9b03      	ldr	r3, [sp, #12]
 8018352:	1d19      	adds	r1, r3, #4
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	9103      	str	r1, [sp, #12]
 8018358:	2b00      	cmp	r3, #0
 801835a:	bfbb      	ittet	lt
 801835c:	425b      	neglt	r3, r3
 801835e:	f042 0202 	orrlt.w	r2, r2, #2
 8018362:	9307      	strge	r3, [sp, #28]
 8018364:	9307      	strlt	r3, [sp, #28]
 8018366:	bfb8      	it	lt
 8018368:	9204      	strlt	r2, [sp, #16]
 801836a:	7823      	ldrb	r3, [r4, #0]
 801836c:	2b2e      	cmp	r3, #46	; 0x2e
 801836e:	d10c      	bne.n	801838a <_vfiprintf_r+0x176>
 8018370:	7863      	ldrb	r3, [r4, #1]
 8018372:	2b2a      	cmp	r3, #42	; 0x2a
 8018374:	d135      	bne.n	80183e2 <_vfiprintf_r+0x1ce>
 8018376:	9b03      	ldr	r3, [sp, #12]
 8018378:	1d1a      	adds	r2, r3, #4
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	9203      	str	r2, [sp, #12]
 801837e:	2b00      	cmp	r3, #0
 8018380:	bfb8      	it	lt
 8018382:	f04f 33ff 	movlt.w	r3, #4294967295
 8018386:	3402      	adds	r4, #2
 8018388:	9305      	str	r3, [sp, #20]
 801838a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018470 <_vfiprintf_r+0x25c>
 801838e:	7821      	ldrb	r1, [r4, #0]
 8018390:	2203      	movs	r2, #3
 8018392:	4650      	mov	r0, sl
 8018394:	f7e7 ff44 	bl	8000220 <memchr>
 8018398:	b140      	cbz	r0, 80183ac <_vfiprintf_r+0x198>
 801839a:	2340      	movs	r3, #64	; 0x40
 801839c:	eba0 000a 	sub.w	r0, r0, sl
 80183a0:	fa03 f000 	lsl.w	r0, r3, r0
 80183a4:	9b04      	ldr	r3, [sp, #16]
 80183a6:	4303      	orrs	r3, r0
 80183a8:	3401      	adds	r4, #1
 80183aa:	9304      	str	r3, [sp, #16]
 80183ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183b0:	482c      	ldr	r0, [pc, #176]	; (8018464 <_vfiprintf_r+0x250>)
 80183b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80183b6:	2206      	movs	r2, #6
 80183b8:	f7e7 ff32 	bl	8000220 <memchr>
 80183bc:	2800      	cmp	r0, #0
 80183be:	d03f      	beq.n	8018440 <_vfiprintf_r+0x22c>
 80183c0:	4b29      	ldr	r3, [pc, #164]	; (8018468 <_vfiprintf_r+0x254>)
 80183c2:	bb1b      	cbnz	r3, 801840c <_vfiprintf_r+0x1f8>
 80183c4:	9b03      	ldr	r3, [sp, #12]
 80183c6:	3307      	adds	r3, #7
 80183c8:	f023 0307 	bic.w	r3, r3, #7
 80183cc:	3308      	adds	r3, #8
 80183ce:	9303      	str	r3, [sp, #12]
 80183d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183d2:	443b      	add	r3, r7
 80183d4:	9309      	str	r3, [sp, #36]	; 0x24
 80183d6:	e767      	b.n	80182a8 <_vfiprintf_r+0x94>
 80183d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80183dc:	460c      	mov	r4, r1
 80183de:	2001      	movs	r0, #1
 80183e0:	e7a5      	b.n	801832e <_vfiprintf_r+0x11a>
 80183e2:	2300      	movs	r3, #0
 80183e4:	3401      	adds	r4, #1
 80183e6:	9305      	str	r3, [sp, #20]
 80183e8:	4619      	mov	r1, r3
 80183ea:	f04f 0c0a 	mov.w	ip, #10
 80183ee:	4620      	mov	r0, r4
 80183f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183f4:	3a30      	subs	r2, #48	; 0x30
 80183f6:	2a09      	cmp	r2, #9
 80183f8:	d903      	bls.n	8018402 <_vfiprintf_r+0x1ee>
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d0c5      	beq.n	801838a <_vfiprintf_r+0x176>
 80183fe:	9105      	str	r1, [sp, #20]
 8018400:	e7c3      	b.n	801838a <_vfiprintf_r+0x176>
 8018402:	fb0c 2101 	mla	r1, ip, r1, r2
 8018406:	4604      	mov	r4, r0
 8018408:	2301      	movs	r3, #1
 801840a:	e7f0      	b.n	80183ee <_vfiprintf_r+0x1da>
 801840c:	ab03      	add	r3, sp, #12
 801840e:	9300      	str	r3, [sp, #0]
 8018410:	462a      	mov	r2, r5
 8018412:	4b16      	ldr	r3, [pc, #88]	; (801846c <_vfiprintf_r+0x258>)
 8018414:	a904      	add	r1, sp, #16
 8018416:	4630      	mov	r0, r6
 8018418:	f3af 8000 	nop.w
 801841c:	4607      	mov	r7, r0
 801841e:	1c78      	adds	r0, r7, #1
 8018420:	d1d6      	bne.n	80183d0 <_vfiprintf_r+0x1bc>
 8018422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018424:	07d9      	lsls	r1, r3, #31
 8018426:	d405      	bmi.n	8018434 <_vfiprintf_r+0x220>
 8018428:	89ab      	ldrh	r3, [r5, #12]
 801842a:	059a      	lsls	r2, r3, #22
 801842c:	d402      	bmi.n	8018434 <_vfiprintf_r+0x220>
 801842e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018430:	f7ff fd77 	bl	8017f22 <__retarget_lock_release_recursive>
 8018434:	89ab      	ldrh	r3, [r5, #12]
 8018436:	065b      	lsls	r3, r3, #25
 8018438:	f53f af12 	bmi.w	8018260 <_vfiprintf_r+0x4c>
 801843c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801843e:	e711      	b.n	8018264 <_vfiprintf_r+0x50>
 8018440:	ab03      	add	r3, sp, #12
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	462a      	mov	r2, r5
 8018446:	4b09      	ldr	r3, [pc, #36]	; (801846c <_vfiprintf_r+0x258>)
 8018448:	a904      	add	r1, sp, #16
 801844a:	4630      	mov	r0, r6
 801844c:	f000 f880 	bl	8018550 <_printf_i>
 8018450:	e7e4      	b.n	801841c <_vfiprintf_r+0x208>
 8018452:	bf00      	nop
 8018454:	0801b774 	.word	0x0801b774
 8018458:	0801b794 	.word	0x0801b794
 801845c:	0801b754 	.word	0x0801b754
 8018460:	0801b7b4 	.word	0x0801b7b4
 8018464:	0801b7be 	.word	0x0801b7be
 8018468:	00000000 	.word	0x00000000
 801846c:	080181ef 	.word	0x080181ef
 8018470:	0801b7ba 	.word	0x0801b7ba

08018474 <_printf_common>:
 8018474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018478:	4616      	mov	r6, r2
 801847a:	4699      	mov	r9, r3
 801847c:	688a      	ldr	r2, [r1, #8]
 801847e:	690b      	ldr	r3, [r1, #16]
 8018480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018484:	4293      	cmp	r3, r2
 8018486:	bfb8      	it	lt
 8018488:	4613      	movlt	r3, r2
 801848a:	6033      	str	r3, [r6, #0]
 801848c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018490:	4607      	mov	r7, r0
 8018492:	460c      	mov	r4, r1
 8018494:	b10a      	cbz	r2, 801849a <_printf_common+0x26>
 8018496:	3301      	adds	r3, #1
 8018498:	6033      	str	r3, [r6, #0]
 801849a:	6823      	ldr	r3, [r4, #0]
 801849c:	0699      	lsls	r1, r3, #26
 801849e:	bf42      	ittt	mi
 80184a0:	6833      	ldrmi	r3, [r6, #0]
 80184a2:	3302      	addmi	r3, #2
 80184a4:	6033      	strmi	r3, [r6, #0]
 80184a6:	6825      	ldr	r5, [r4, #0]
 80184a8:	f015 0506 	ands.w	r5, r5, #6
 80184ac:	d106      	bne.n	80184bc <_printf_common+0x48>
 80184ae:	f104 0a19 	add.w	sl, r4, #25
 80184b2:	68e3      	ldr	r3, [r4, #12]
 80184b4:	6832      	ldr	r2, [r6, #0]
 80184b6:	1a9b      	subs	r3, r3, r2
 80184b8:	42ab      	cmp	r3, r5
 80184ba:	dc26      	bgt.n	801850a <_printf_common+0x96>
 80184bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80184c0:	1e13      	subs	r3, r2, #0
 80184c2:	6822      	ldr	r2, [r4, #0]
 80184c4:	bf18      	it	ne
 80184c6:	2301      	movne	r3, #1
 80184c8:	0692      	lsls	r2, r2, #26
 80184ca:	d42b      	bmi.n	8018524 <_printf_common+0xb0>
 80184cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80184d0:	4649      	mov	r1, r9
 80184d2:	4638      	mov	r0, r7
 80184d4:	47c0      	blx	r8
 80184d6:	3001      	adds	r0, #1
 80184d8:	d01e      	beq.n	8018518 <_printf_common+0xa4>
 80184da:	6823      	ldr	r3, [r4, #0]
 80184dc:	68e5      	ldr	r5, [r4, #12]
 80184de:	6832      	ldr	r2, [r6, #0]
 80184e0:	f003 0306 	and.w	r3, r3, #6
 80184e4:	2b04      	cmp	r3, #4
 80184e6:	bf08      	it	eq
 80184e8:	1aad      	subeq	r5, r5, r2
 80184ea:	68a3      	ldr	r3, [r4, #8]
 80184ec:	6922      	ldr	r2, [r4, #16]
 80184ee:	bf0c      	ite	eq
 80184f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80184f4:	2500      	movne	r5, #0
 80184f6:	4293      	cmp	r3, r2
 80184f8:	bfc4      	itt	gt
 80184fa:	1a9b      	subgt	r3, r3, r2
 80184fc:	18ed      	addgt	r5, r5, r3
 80184fe:	2600      	movs	r6, #0
 8018500:	341a      	adds	r4, #26
 8018502:	42b5      	cmp	r5, r6
 8018504:	d11a      	bne.n	801853c <_printf_common+0xc8>
 8018506:	2000      	movs	r0, #0
 8018508:	e008      	b.n	801851c <_printf_common+0xa8>
 801850a:	2301      	movs	r3, #1
 801850c:	4652      	mov	r2, sl
 801850e:	4649      	mov	r1, r9
 8018510:	4638      	mov	r0, r7
 8018512:	47c0      	blx	r8
 8018514:	3001      	adds	r0, #1
 8018516:	d103      	bne.n	8018520 <_printf_common+0xac>
 8018518:	f04f 30ff 	mov.w	r0, #4294967295
 801851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018520:	3501      	adds	r5, #1
 8018522:	e7c6      	b.n	80184b2 <_printf_common+0x3e>
 8018524:	18e1      	adds	r1, r4, r3
 8018526:	1c5a      	adds	r2, r3, #1
 8018528:	2030      	movs	r0, #48	; 0x30
 801852a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801852e:	4422      	add	r2, r4
 8018530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018538:	3302      	adds	r3, #2
 801853a:	e7c7      	b.n	80184cc <_printf_common+0x58>
 801853c:	2301      	movs	r3, #1
 801853e:	4622      	mov	r2, r4
 8018540:	4649      	mov	r1, r9
 8018542:	4638      	mov	r0, r7
 8018544:	47c0      	blx	r8
 8018546:	3001      	adds	r0, #1
 8018548:	d0e6      	beq.n	8018518 <_printf_common+0xa4>
 801854a:	3601      	adds	r6, #1
 801854c:	e7d9      	b.n	8018502 <_printf_common+0x8e>
	...

08018550 <_printf_i>:
 8018550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018554:	7e0f      	ldrb	r7, [r1, #24]
 8018556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018558:	2f78      	cmp	r7, #120	; 0x78
 801855a:	4691      	mov	r9, r2
 801855c:	4680      	mov	r8, r0
 801855e:	460c      	mov	r4, r1
 8018560:	469a      	mov	sl, r3
 8018562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018566:	d807      	bhi.n	8018578 <_printf_i+0x28>
 8018568:	2f62      	cmp	r7, #98	; 0x62
 801856a:	d80a      	bhi.n	8018582 <_printf_i+0x32>
 801856c:	2f00      	cmp	r7, #0
 801856e:	f000 80d8 	beq.w	8018722 <_printf_i+0x1d2>
 8018572:	2f58      	cmp	r7, #88	; 0x58
 8018574:	f000 80a3 	beq.w	80186be <_printf_i+0x16e>
 8018578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801857c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018580:	e03a      	b.n	80185f8 <_printf_i+0xa8>
 8018582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018586:	2b15      	cmp	r3, #21
 8018588:	d8f6      	bhi.n	8018578 <_printf_i+0x28>
 801858a:	a101      	add	r1, pc, #4	; (adr r1, 8018590 <_printf_i+0x40>)
 801858c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018590:	080185e9 	.word	0x080185e9
 8018594:	080185fd 	.word	0x080185fd
 8018598:	08018579 	.word	0x08018579
 801859c:	08018579 	.word	0x08018579
 80185a0:	08018579 	.word	0x08018579
 80185a4:	08018579 	.word	0x08018579
 80185a8:	080185fd 	.word	0x080185fd
 80185ac:	08018579 	.word	0x08018579
 80185b0:	08018579 	.word	0x08018579
 80185b4:	08018579 	.word	0x08018579
 80185b8:	08018579 	.word	0x08018579
 80185bc:	08018709 	.word	0x08018709
 80185c0:	0801862d 	.word	0x0801862d
 80185c4:	080186eb 	.word	0x080186eb
 80185c8:	08018579 	.word	0x08018579
 80185cc:	08018579 	.word	0x08018579
 80185d0:	0801872b 	.word	0x0801872b
 80185d4:	08018579 	.word	0x08018579
 80185d8:	0801862d 	.word	0x0801862d
 80185dc:	08018579 	.word	0x08018579
 80185e0:	08018579 	.word	0x08018579
 80185e4:	080186f3 	.word	0x080186f3
 80185e8:	682b      	ldr	r3, [r5, #0]
 80185ea:	1d1a      	adds	r2, r3, #4
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	602a      	str	r2, [r5, #0]
 80185f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80185f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80185f8:	2301      	movs	r3, #1
 80185fa:	e0a3      	b.n	8018744 <_printf_i+0x1f4>
 80185fc:	6820      	ldr	r0, [r4, #0]
 80185fe:	6829      	ldr	r1, [r5, #0]
 8018600:	0606      	lsls	r6, r0, #24
 8018602:	f101 0304 	add.w	r3, r1, #4
 8018606:	d50a      	bpl.n	801861e <_printf_i+0xce>
 8018608:	680e      	ldr	r6, [r1, #0]
 801860a:	602b      	str	r3, [r5, #0]
 801860c:	2e00      	cmp	r6, #0
 801860e:	da03      	bge.n	8018618 <_printf_i+0xc8>
 8018610:	232d      	movs	r3, #45	; 0x2d
 8018612:	4276      	negs	r6, r6
 8018614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018618:	485e      	ldr	r0, [pc, #376]	; (8018794 <_printf_i+0x244>)
 801861a:	230a      	movs	r3, #10
 801861c:	e019      	b.n	8018652 <_printf_i+0x102>
 801861e:	680e      	ldr	r6, [r1, #0]
 8018620:	602b      	str	r3, [r5, #0]
 8018622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018626:	bf18      	it	ne
 8018628:	b236      	sxthne	r6, r6
 801862a:	e7ef      	b.n	801860c <_printf_i+0xbc>
 801862c:	682b      	ldr	r3, [r5, #0]
 801862e:	6820      	ldr	r0, [r4, #0]
 8018630:	1d19      	adds	r1, r3, #4
 8018632:	6029      	str	r1, [r5, #0]
 8018634:	0601      	lsls	r1, r0, #24
 8018636:	d501      	bpl.n	801863c <_printf_i+0xec>
 8018638:	681e      	ldr	r6, [r3, #0]
 801863a:	e002      	b.n	8018642 <_printf_i+0xf2>
 801863c:	0646      	lsls	r6, r0, #25
 801863e:	d5fb      	bpl.n	8018638 <_printf_i+0xe8>
 8018640:	881e      	ldrh	r6, [r3, #0]
 8018642:	4854      	ldr	r0, [pc, #336]	; (8018794 <_printf_i+0x244>)
 8018644:	2f6f      	cmp	r7, #111	; 0x6f
 8018646:	bf0c      	ite	eq
 8018648:	2308      	moveq	r3, #8
 801864a:	230a      	movne	r3, #10
 801864c:	2100      	movs	r1, #0
 801864e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018652:	6865      	ldr	r5, [r4, #4]
 8018654:	60a5      	str	r5, [r4, #8]
 8018656:	2d00      	cmp	r5, #0
 8018658:	bfa2      	ittt	ge
 801865a:	6821      	ldrge	r1, [r4, #0]
 801865c:	f021 0104 	bicge.w	r1, r1, #4
 8018660:	6021      	strge	r1, [r4, #0]
 8018662:	b90e      	cbnz	r6, 8018668 <_printf_i+0x118>
 8018664:	2d00      	cmp	r5, #0
 8018666:	d04d      	beq.n	8018704 <_printf_i+0x1b4>
 8018668:	4615      	mov	r5, r2
 801866a:	fbb6 f1f3 	udiv	r1, r6, r3
 801866e:	fb03 6711 	mls	r7, r3, r1, r6
 8018672:	5dc7      	ldrb	r7, [r0, r7]
 8018674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018678:	4637      	mov	r7, r6
 801867a:	42bb      	cmp	r3, r7
 801867c:	460e      	mov	r6, r1
 801867e:	d9f4      	bls.n	801866a <_printf_i+0x11a>
 8018680:	2b08      	cmp	r3, #8
 8018682:	d10b      	bne.n	801869c <_printf_i+0x14c>
 8018684:	6823      	ldr	r3, [r4, #0]
 8018686:	07de      	lsls	r6, r3, #31
 8018688:	d508      	bpl.n	801869c <_printf_i+0x14c>
 801868a:	6923      	ldr	r3, [r4, #16]
 801868c:	6861      	ldr	r1, [r4, #4]
 801868e:	4299      	cmp	r1, r3
 8018690:	bfde      	ittt	le
 8018692:	2330      	movle	r3, #48	; 0x30
 8018694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018698:	f105 35ff 	addle.w	r5, r5, #4294967295
 801869c:	1b52      	subs	r2, r2, r5
 801869e:	6122      	str	r2, [r4, #16]
 80186a0:	f8cd a000 	str.w	sl, [sp]
 80186a4:	464b      	mov	r3, r9
 80186a6:	aa03      	add	r2, sp, #12
 80186a8:	4621      	mov	r1, r4
 80186aa:	4640      	mov	r0, r8
 80186ac:	f7ff fee2 	bl	8018474 <_printf_common>
 80186b0:	3001      	adds	r0, #1
 80186b2:	d14c      	bne.n	801874e <_printf_i+0x1fe>
 80186b4:	f04f 30ff 	mov.w	r0, #4294967295
 80186b8:	b004      	add	sp, #16
 80186ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186be:	4835      	ldr	r0, [pc, #212]	; (8018794 <_printf_i+0x244>)
 80186c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80186c4:	6829      	ldr	r1, [r5, #0]
 80186c6:	6823      	ldr	r3, [r4, #0]
 80186c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80186cc:	6029      	str	r1, [r5, #0]
 80186ce:	061d      	lsls	r5, r3, #24
 80186d0:	d514      	bpl.n	80186fc <_printf_i+0x1ac>
 80186d2:	07df      	lsls	r7, r3, #31
 80186d4:	bf44      	itt	mi
 80186d6:	f043 0320 	orrmi.w	r3, r3, #32
 80186da:	6023      	strmi	r3, [r4, #0]
 80186dc:	b91e      	cbnz	r6, 80186e6 <_printf_i+0x196>
 80186de:	6823      	ldr	r3, [r4, #0]
 80186e0:	f023 0320 	bic.w	r3, r3, #32
 80186e4:	6023      	str	r3, [r4, #0]
 80186e6:	2310      	movs	r3, #16
 80186e8:	e7b0      	b.n	801864c <_printf_i+0xfc>
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	f043 0320 	orr.w	r3, r3, #32
 80186f0:	6023      	str	r3, [r4, #0]
 80186f2:	2378      	movs	r3, #120	; 0x78
 80186f4:	4828      	ldr	r0, [pc, #160]	; (8018798 <_printf_i+0x248>)
 80186f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80186fa:	e7e3      	b.n	80186c4 <_printf_i+0x174>
 80186fc:	0659      	lsls	r1, r3, #25
 80186fe:	bf48      	it	mi
 8018700:	b2b6      	uxthmi	r6, r6
 8018702:	e7e6      	b.n	80186d2 <_printf_i+0x182>
 8018704:	4615      	mov	r5, r2
 8018706:	e7bb      	b.n	8018680 <_printf_i+0x130>
 8018708:	682b      	ldr	r3, [r5, #0]
 801870a:	6826      	ldr	r6, [r4, #0]
 801870c:	6961      	ldr	r1, [r4, #20]
 801870e:	1d18      	adds	r0, r3, #4
 8018710:	6028      	str	r0, [r5, #0]
 8018712:	0635      	lsls	r5, r6, #24
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	d501      	bpl.n	801871c <_printf_i+0x1cc>
 8018718:	6019      	str	r1, [r3, #0]
 801871a:	e002      	b.n	8018722 <_printf_i+0x1d2>
 801871c:	0670      	lsls	r0, r6, #25
 801871e:	d5fb      	bpl.n	8018718 <_printf_i+0x1c8>
 8018720:	8019      	strh	r1, [r3, #0]
 8018722:	2300      	movs	r3, #0
 8018724:	6123      	str	r3, [r4, #16]
 8018726:	4615      	mov	r5, r2
 8018728:	e7ba      	b.n	80186a0 <_printf_i+0x150>
 801872a:	682b      	ldr	r3, [r5, #0]
 801872c:	1d1a      	adds	r2, r3, #4
 801872e:	602a      	str	r2, [r5, #0]
 8018730:	681d      	ldr	r5, [r3, #0]
 8018732:	6862      	ldr	r2, [r4, #4]
 8018734:	2100      	movs	r1, #0
 8018736:	4628      	mov	r0, r5
 8018738:	f7e7 fd72 	bl	8000220 <memchr>
 801873c:	b108      	cbz	r0, 8018742 <_printf_i+0x1f2>
 801873e:	1b40      	subs	r0, r0, r5
 8018740:	6060      	str	r0, [r4, #4]
 8018742:	6863      	ldr	r3, [r4, #4]
 8018744:	6123      	str	r3, [r4, #16]
 8018746:	2300      	movs	r3, #0
 8018748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801874c:	e7a8      	b.n	80186a0 <_printf_i+0x150>
 801874e:	6923      	ldr	r3, [r4, #16]
 8018750:	462a      	mov	r2, r5
 8018752:	4649      	mov	r1, r9
 8018754:	4640      	mov	r0, r8
 8018756:	47d0      	blx	sl
 8018758:	3001      	adds	r0, #1
 801875a:	d0ab      	beq.n	80186b4 <_printf_i+0x164>
 801875c:	6823      	ldr	r3, [r4, #0]
 801875e:	079b      	lsls	r3, r3, #30
 8018760:	d413      	bmi.n	801878a <_printf_i+0x23a>
 8018762:	68e0      	ldr	r0, [r4, #12]
 8018764:	9b03      	ldr	r3, [sp, #12]
 8018766:	4298      	cmp	r0, r3
 8018768:	bfb8      	it	lt
 801876a:	4618      	movlt	r0, r3
 801876c:	e7a4      	b.n	80186b8 <_printf_i+0x168>
 801876e:	2301      	movs	r3, #1
 8018770:	4632      	mov	r2, r6
 8018772:	4649      	mov	r1, r9
 8018774:	4640      	mov	r0, r8
 8018776:	47d0      	blx	sl
 8018778:	3001      	adds	r0, #1
 801877a:	d09b      	beq.n	80186b4 <_printf_i+0x164>
 801877c:	3501      	adds	r5, #1
 801877e:	68e3      	ldr	r3, [r4, #12]
 8018780:	9903      	ldr	r1, [sp, #12]
 8018782:	1a5b      	subs	r3, r3, r1
 8018784:	42ab      	cmp	r3, r5
 8018786:	dcf2      	bgt.n	801876e <_printf_i+0x21e>
 8018788:	e7eb      	b.n	8018762 <_printf_i+0x212>
 801878a:	2500      	movs	r5, #0
 801878c:	f104 0619 	add.w	r6, r4, #25
 8018790:	e7f5      	b.n	801877e <_printf_i+0x22e>
 8018792:	bf00      	nop
 8018794:	0801b7c5 	.word	0x0801b7c5
 8018798:	0801b7d6 	.word	0x0801b7d6

0801879c <_sbrk_r>:
 801879c:	b538      	push	{r3, r4, r5, lr}
 801879e:	4d06      	ldr	r5, [pc, #24]	; (80187b8 <_sbrk_r+0x1c>)
 80187a0:	2300      	movs	r3, #0
 80187a2:	4604      	mov	r4, r0
 80187a4:	4608      	mov	r0, r1
 80187a6:	602b      	str	r3, [r5, #0]
 80187a8:	f7e9 fa2a 	bl	8001c00 <_sbrk>
 80187ac:	1c43      	adds	r3, r0, #1
 80187ae:	d102      	bne.n	80187b6 <_sbrk_r+0x1a>
 80187b0:	682b      	ldr	r3, [r5, #0]
 80187b2:	b103      	cbz	r3, 80187b6 <_sbrk_r+0x1a>
 80187b4:	6023      	str	r3, [r4, #0]
 80187b6:	bd38      	pop	{r3, r4, r5, pc}
 80187b8:	2000906c 	.word	0x2000906c

080187bc <__sread>:
 80187bc:	b510      	push	{r4, lr}
 80187be:	460c      	mov	r4, r1
 80187c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187c4:	f000 f8a8 	bl	8018918 <_read_r>
 80187c8:	2800      	cmp	r0, #0
 80187ca:	bfab      	itete	ge
 80187cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80187ce:	89a3      	ldrhlt	r3, [r4, #12]
 80187d0:	181b      	addge	r3, r3, r0
 80187d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80187d6:	bfac      	ite	ge
 80187d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80187da:	81a3      	strhlt	r3, [r4, #12]
 80187dc:	bd10      	pop	{r4, pc}

080187de <__swrite>:
 80187de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187e2:	461f      	mov	r7, r3
 80187e4:	898b      	ldrh	r3, [r1, #12]
 80187e6:	05db      	lsls	r3, r3, #23
 80187e8:	4605      	mov	r5, r0
 80187ea:	460c      	mov	r4, r1
 80187ec:	4616      	mov	r6, r2
 80187ee:	d505      	bpl.n	80187fc <__swrite+0x1e>
 80187f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187f4:	2302      	movs	r3, #2
 80187f6:	2200      	movs	r2, #0
 80187f8:	f000 f870 	bl	80188dc <_lseek_r>
 80187fc:	89a3      	ldrh	r3, [r4, #12]
 80187fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018806:	81a3      	strh	r3, [r4, #12]
 8018808:	4632      	mov	r2, r6
 801880a:	463b      	mov	r3, r7
 801880c:	4628      	mov	r0, r5
 801880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018812:	f000 b817 	b.w	8018844 <_write_r>

08018816 <__sseek>:
 8018816:	b510      	push	{r4, lr}
 8018818:	460c      	mov	r4, r1
 801881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801881e:	f000 f85d 	bl	80188dc <_lseek_r>
 8018822:	1c43      	adds	r3, r0, #1
 8018824:	89a3      	ldrh	r3, [r4, #12]
 8018826:	bf15      	itete	ne
 8018828:	6560      	strne	r0, [r4, #84]	; 0x54
 801882a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801882e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018832:	81a3      	strheq	r3, [r4, #12]
 8018834:	bf18      	it	ne
 8018836:	81a3      	strhne	r3, [r4, #12]
 8018838:	bd10      	pop	{r4, pc}

0801883a <__sclose>:
 801883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801883e:	f000 b81b 	b.w	8018878 <_close_r>
	...

08018844 <_write_r>:
 8018844:	b538      	push	{r3, r4, r5, lr}
 8018846:	4d07      	ldr	r5, [pc, #28]	; (8018864 <_write_r+0x20>)
 8018848:	4604      	mov	r4, r0
 801884a:	4608      	mov	r0, r1
 801884c:	4611      	mov	r1, r2
 801884e:	2200      	movs	r2, #0
 8018850:	602a      	str	r2, [r5, #0]
 8018852:	461a      	mov	r2, r3
 8018854:	f7fe f81e 	bl	8016894 <_write>
 8018858:	1c43      	adds	r3, r0, #1
 801885a:	d102      	bne.n	8018862 <_write_r+0x1e>
 801885c:	682b      	ldr	r3, [r5, #0]
 801885e:	b103      	cbz	r3, 8018862 <_write_r+0x1e>
 8018860:	6023      	str	r3, [r4, #0]
 8018862:	bd38      	pop	{r3, r4, r5, pc}
 8018864:	2000906c 	.word	0x2000906c

08018868 <abort>:
 8018868:	b508      	push	{r3, lr}
 801886a:	2006      	movs	r0, #6
 801886c:	f000 f88e 	bl	801898c <raise>
 8018870:	2001      	movs	r0, #1
 8018872:	f7e9 f987 	bl	8001b84 <_exit>
	...

08018878 <_close_r>:
 8018878:	b538      	push	{r3, r4, r5, lr}
 801887a:	4d06      	ldr	r5, [pc, #24]	; (8018894 <_close_r+0x1c>)
 801887c:	2300      	movs	r3, #0
 801887e:	4604      	mov	r4, r0
 8018880:	4608      	mov	r0, r1
 8018882:	602b      	str	r3, [r5, #0]
 8018884:	f7e9 f988 	bl	8001b98 <_close>
 8018888:	1c43      	adds	r3, r0, #1
 801888a:	d102      	bne.n	8018892 <_close_r+0x1a>
 801888c:	682b      	ldr	r3, [r5, #0]
 801888e:	b103      	cbz	r3, 8018892 <_close_r+0x1a>
 8018890:	6023      	str	r3, [r4, #0]
 8018892:	bd38      	pop	{r3, r4, r5, pc}
 8018894:	2000906c 	.word	0x2000906c

08018898 <_fstat_r>:
 8018898:	b538      	push	{r3, r4, r5, lr}
 801889a:	4d07      	ldr	r5, [pc, #28]	; (80188b8 <_fstat_r+0x20>)
 801889c:	2300      	movs	r3, #0
 801889e:	4604      	mov	r4, r0
 80188a0:	4608      	mov	r0, r1
 80188a2:	4611      	mov	r1, r2
 80188a4:	602b      	str	r3, [r5, #0]
 80188a6:	f7e9 f983 	bl	8001bb0 <_fstat>
 80188aa:	1c43      	adds	r3, r0, #1
 80188ac:	d102      	bne.n	80188b4 <_fstat_r+0x1c>
 80188ae:	682b      	ldr	r3, [r5, #0]
 80188b0:	b103      	cbz	r3, 80188b4 <_fstat_r+0x1c>
 80188b2:	6023      	str	r3, [r4, #0]
 80188b4:	bd38      	pop	{r3, r4, r5, pc}
 80188b6:	bf00      	nop
 80188b8:	2000906c 	.word	0x2000906c

080188bc <_isatty_r>:
 80188bc:	b538      	push	{r3, r4, r5, lr}
 80188be:	4d06      	ldr	r5, [pc, #24]	; (80188d8 <_isatty_r+0x1c>)
 80188c0:	2300      	movs	r3, #0
 80188c2:	4604      	mov	r4, r0
 80188c4:	4608      	mov	r0, r1
 80188c6:	602b      	str	r3, [r5, #0]
 80188c8:	f7e9 f982 	bl	8001bd0 <_isatty>
 80188cc:	1c43      	adds	r3, r0, #1
 80188ce:	d102      	bne.n	80188d6 <_isatty_r+0x1a>
 80188d0:	682b      	ldr	r3, [r5, #0]
 80188d2:	b103      	cbz	r3, 80188d6 <_isatty_r+0x1a>
 80188d4:	6023      	str	r3, [r4, #0]
 80188d6:	bd38      	pop	{r3, r4, r5, pc}
 80188d8:	2000906c 	.word	0x2000906c

080188dc <_lseek_r>:
 80188dc:	b538      	push	{r3, r4, r5, lr}
 80188de:	4d07      	ldr	r5, [pc, #28]	; (80188fc <_lseek_r+0x20>)
 80188e0:	4604      	mov	r4, r0
 80188e2:	4608      	mov	r0, r1
 80188e4:	4611      	mov	r1, r2
 80188e6:	2200      	movs	r2, #0
 80188e8:	602a      	str	r2, [r5, #0]
 80188ea:	461a      	mov	r2, r3
 80188ec:	f7e9 f97b 	bl	8001be6 <_lseek>
 80188f0:	1c43      	adds	r3, r0, #1
 80188f2:	d102      	bne.n	80188fa <_lseek_r+0x1e>
 80188f4:	682b      	ldr	r3, [r5, #0]
 80188f6:	b103      	cbz	r3, 80188fa <_lseek_r+0x1e>
 80188f8:	6023      	str	r3, [r4, #0]
 80188fa:	bd38      	pop	{r3, r4, r5, pc}
 80188fc:	2000906c 	.word	0x2000906c

08018900 <__malloc_lock>:
 8018900:	4801      	ldr	r0, [pc, #4]	; (8018908 <__malloc_lock+0x8>)
 8018902:	f7ff bb0d 	b.w	8017f20 <__retarget_lock_acquire_recursive>
 8018906:	bf00      	nop
 8018908:	20009070 	.word	0x20009070

0801890c <__malloc_unlock>:
 801890c:	4801      	ldr	r0, [pc, #4]	; (8018914 <__malloc_unlock+0x8>)
 801890e:	f7ff bb08 	b.w	8017f22 <__retarget_lock_release_recursive>
 8018912:	bf00      	nop
 8018914:	20009070 	.word	0x20009070

08018918 <_read_r>:
 8018918:	b538      	push	{r3, r4, r5, lr}
 801891a:	4d07      	ldr	r5, [pc, #28]	; (8018938 <_read_r+0x20>)
 801891c:	4604      	mov	r4, r0
 801891e:	4608      	mov	r0, r1
 8018920:	4611      	mov	r1, r2
 8018922:	2200      	movs	r2, #0
 8018924:	602a      	str	r2, [r5, #0]
 8018926:	461a      	mov	r2, r3
 8018928:	f7fd ffe4 	bl	80168f4 <_read>
 801892c:	1c43      	adds	r3, r0, #1
 801892e:	d102      	bne.n	8018936 <_read_r+0x1e>
 8018930:	682b      	ldr	r3, [r5, #0]
 8018932:	b103      	cbz	r3, 8018936 <_read_r+0x1e>
 8018934:	6023      	str	r3, [r4, #0]
 8018936:	bd38      	pop	{r3, r4, r5, pc}
 8018938:	2000906c 	.word	0x2000906c

0801893c <_raise_r>:
 801893c:	291f      	cmp	r1, #31
 801893e:	b538      	push	{r3, r4, r5, lr}
 8018940:	4604      	mov	r4, r0
 8018942:	460d      	mov	r5, r1
 8018944:	d904      	bls.n	8018950 <_raise_r+0x14>
 8018946:	2316      	movs	r3, #22
 8018948:	6003      	str	r3, [r0, #0]
 801894a:	f04f 30ff 	mov.w	r0, #4294967295
 801894e:	bd38      	pop	{r3, r4, r5, pc}
 8018950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018952:	b112      	cbz	r2, 801895a <_raise_r+0x1e>
 8018954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018958:	b94b      	cbnz	r3, 801896e <_raise_r+0x32>
 801895a:	4620      	mov	r0, r4
 801895c:	f000 f830 	bl	80189c0 <_getpid_r>
 8018960:	462a      	mov	r2, r5
 8018962:	4601      	mov	r1, r0
 8018964:	4620      	mov	r0, r4
 8018966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801896a:	f000 b817 	b.w	801899c <_kill_r>
 801896e:	2b01      	cmp	r3, #1
 8018970:	d00a      	beq.n	8018988 <_raise_r+0x4c>
 8018972:	1c59      	adds	r1, r3, #1
 8018974:	d103      	bne.n	801897e <_raise_r+0x42>
 8018976:	2316      	movs	r3, #22
 8018978:	6003      	str	r3, [r0, #0]
 801897a:	2001      	movs	r0, #1
 801897c:	e7e7      	b.n	801894e <_raise_r+0x12>
 801897e:	2400      	movs	r4, #0
 8018980:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018984:	4628      	mov	r0, r5
 8018986:	4798      	blx	r3
 8018988:	2000      	movs	r0, #0
 801898a:	e7e0      	b.n	801894e <_raise_r+0x12>

0801898c <raise>:
 801898c:	4b02      	ldr	r3, [pc, #8]	; (8018998 <raise+0xc>)
 801898e:	4601      	mov	r1, r0
 8018990:	6818      	ldr	r0, [r3, #0]
 8018992:	f7ff bfd3 	b.w	801893c <_raise_r>
 8018996:	bf00      	nop
 8018998:	2000002c 	.word	0x2000002c

0801899c <_kill_r>:
 801899c:	b538      	push	{r3, r4, r5, lr}
 801899e:	4d07      	ldr	r5, [pc, #28]	; (80189bc <_kill_r+0x20>)
 80189a0:	2300      	movs	r3, #0
 80189a2:	4604      	mov	r4, r0
 80189a4:	4608      	mov	r0, r1
 80189a6:	4611      	mov	r1, r2
 80189a8:	602b      	str	r3, [r5, #0]
 80189aa:	f7e9 f8d9 	bl	8001b60 <_kill>
 80189ae:	1c43      	adds	r3, r0, #1
 80189b0:	d102      	bne.n	80189b8 <_kill_r+0x1c>
 80189b2:	682b      	ldr	r3, [r5, #0]
 80189b4:	b103      	cbz	r3, 80189b8 <_kill_r+0x1c>
 80189b6:	6023      	str	r3, [r4, #0]
 80189b8:	bd38      	pop	{r3, r4, r5, pc}
 80189ba:	bf00      	nop
 80189bc:	2000906c 	.word	0x2000906c

080189c0 <_getpid_r>:
 80189c0:	f7e9 b8c6 	b.w	8001b50 <_getpid>

080189c4 <_init>:
 80189c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189c6:	bf00      	nop
 80189c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189ca:	bc08      	pop	{r3}
 80189cc:	469e      	mov	lr, r3
 80189ce:	4770      	bx	lr

080189d0 <_fini>:
 80189d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189d2:	bf00      	nop
 80189d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189d6:	bc08      	pop	{r3}
 80189d8:	469e      	mov	lr, r3
 80189da:	4770      	bx	lr
