
F7_ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c74  08015128  08015128  00025128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d9c  08017d9c  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08017d9c  08017d9c  00027d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017da4  08017da4  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017da4  08017da4  00027da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017da8  08017da8  00027da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08017dac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08017e3c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08017edc  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008c34  200001d0  08017f7c  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008e04  08017f7c  00038e04  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032c47  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000709c  00000000  00000000  00062e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002648  00000000  00000000  00069ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024c8  00000000  00000000  0006c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000372c1  00000000  00000000  0006e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c25a  00000000  00000000  000a5cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00115fe0  00000000  00000000  000e1f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f7ef3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab38  00000000  00000000  001f7f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015110 	.word	0x08015110

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08015110 	.word	0x08015110

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fbb4 	bl	8001d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f822 	bl	8000604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005c0:	f000 fb08 	bl	8000bd4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb3c 	bl	8000c40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 faa6 	bl	8000b18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fad4 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005d0:	f000 f880 	bl	80006d4 <MX_ADC1_Init>
  MX_DAC_Init();
 80005d4:	f000 f8d0 	bl	8000778 <MX_DAC_Init>
  MX_TIM2_Init();
 80005d8:	f000 f9f0 	bl	80009bc <MX_TIM2_Init>
  MX_UART4_Init();
 80005dc:	f000 fa3c 	bl	8000a58 <MX_UART4_Init>
  MX_UART5_Init();
 80005e0:	f000 fa6a 	bl	8000ab8 <MX_UART5_Init>
  MX_I2C1_Init();
 80005e4:	f000 f8f2 	bl	80007cc <MX_I2C1_Init>
  MX_DMA_Init();
 80005e8:	f000 faf4 	bl	8000bd4 <MX_DMA_Init>
  MX_I2C2_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_I2C2_Init>
  MX_SPI1_Init();
 80005f0:	f000 f96c 	bl	80008cc <MX_SPI1_Init>
  MX_SPI2_Init();
 80005f4:	f000 f9a8 	bl	8000948 <MX_SPI2_Init>
  MX_LWIP_Init();
 80005f8:	f008 fb0c 	bl	8008c14 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005fc:	f013 fa20 	bl	8013a40 <rtg_main>
 8000600:	e7fc      	b.n	80005fc <main+0x48>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f013 fb70 	bl	8013cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f004 ffe2 	bl	80055f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000678:	2348      	movs	r3, #72	; 0x48
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f004 ffc1 	bl	8005610 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fb7e 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fa4f 	bl	8005b58 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 fb68 	bl	8000d94 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0x98>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_ADC1_Init+0x9c>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC1_Init+0x98>)
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_ADC1_Init+0xa0>)
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_ADC1_Init+0x98>)
 8000734:	f001 fb78 	bl	8001e28 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fb29 	bl	8000d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0x98>)
 8000754:	f001 fbac 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075e:	f000 fb19 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001ec 	.word	0x200001ec
 8000770:	40012000 	.word	0x40012000
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_DAC_Init+0x4c>)
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_DAC_Init+0x50>)
 800078a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_DAC_Init+0x4c>)
 800078e:	f001 fef0 	bl	8002572 <HAL_DAC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000798:	f000 fafc 	bl	8000d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_DAC_Init+0x4c>)
 80007ac:	f001 ff67 	bl	800267e <HAL_DAC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b6:	f000 faed 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000234 	.word	0x20000234
 80007c8:	40007400 	.word	0x40007400

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f003 feec 	bl	80045e4 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fabf 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f004 fd0a 	bl	8005232 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fab6 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f004 fd4c 	bl	80052c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 faad 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000248 	.word	0x20000248
 8000844:	40005400 	.word	0x40005400
 8000848:	00808cd2 	.word	0x00808cd2

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 44;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	222c      	movs	r2, #44	; 0x2c
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f003 feac 	bl	80045e4 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fa7f 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f004 fcca 	bl	8005232 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fa76 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f004 fd0c 	bl	80052c8 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fa6d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000029c 	.word	0x2000029c
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00808cd2 	.word	0x00808cd2

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x74>)
 800092c:	f005 ff2a 	bl	8006784 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fa2d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000470 	.word	0x20000470
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_SPI2_Init+0x70>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000960:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI2_Init+0x6c>)
 80009a0:	f005 fef0 	bl	8006784 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009aa:	f000 f9f3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004d4 	.word	0x200004d4
 80009b8:	40003800 	.word	0x40003800

080009bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a06:	f006 f888 	bl	8006b1a <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f9c0 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a22:	f006 f9f1 	bl	8006e08 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f9b2 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a3e:	f006 fc19 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f9a4 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000538 	.word	0x20000538

08000a58 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_UART4_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a9c:	f006 fc96 	bl	80073cc <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f975 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000584 	.word	0x20000584
 8000ab4:	40004c00 	.word	0x40004c00

08000ab8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_UART5_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_UART5_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_UART5_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_UART5_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_UART5_Init+0x58>)
 8000afc:	f006 fc66 	bl	80073cc <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f945 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000060c 	.word	0x2000060c
 8000b14:	40005000 	.word	0x40005000

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f006 fc36 	bl	80073cc <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f915 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000694 	.word	0x20000694
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	f004 fbd0 	bl	8005360 <HAL_PCD_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f8e5 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000071c 	.word	0x2000071c

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_DMA_Init+0x68>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_DMA_Init+0x68>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_DMA_Init+0x68>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f001 fc85 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f001 fc9e 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200d      	movs	r0, #13
 8000c08:	f001 fc7d 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f001 fc96 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2011      	movs	r0, #17
 8000c18:	f001 fc75 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f001 fc8e 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	202f      	movs	r0, #47	; 0x2f
 8000c28:	f001 fc6d 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c2c:	202f      	movs	r0, #47	; 0x2f
 8000c2e:	f001 fc86 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_GPIO_Init+0x148>)
 8000cee:	f003 fc3b 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	4825      	ldr	r0, [pc, #148]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cf8:	f003 fc36 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	481f      	ldr	r0, [pc, #124]	; (8000d90 <MX_GPIO_Init+0x150>)
 8000d14:	f003 fa7c 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x148>)
 8000d32:	f003 fa6d 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000d4e:	f003 fa5f 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000d66:	f003 fa53 	bl	8004210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f001 fbc9 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d74:	2028      	movs	r0, #40	; 0x28
 8000d76:	f001 fbe2 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_ADC_MspInit+0x74>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d123      	bne.n	8000e52 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_ADC_MspInit+0x78>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_ADC_MspInit+0x78>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_ADC_MspInit+0x78>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_ADC_MspInit+0x78>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_ADC_MspInit+0x78>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_ADC_MspInit+0x78>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_ADC_MspInit+0x7c>)
 8000e4e:	f003 f9df 	bl	8004210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012000 	.word	0x40012000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_DAC_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12b      	bne.n	8000ee2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_DAC_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_DAC_MspInit+0x88>)
 8000e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_DAC_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_DAC_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_DAC_MspInit+0x88>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_DAC_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_DAC_MspInit+0x8c>)
 8000ece:	f003 f99f 	bl	8004210 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2036      	movs	r0, #54	; 0x36
 8000ed8:	f001 fb15 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000edc:	2036      	movs	r0, #54	; 0x36
 8000ede:	f001 fb2e 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40007400 	.word	0x40007400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0ac      	sub	sp, #176	; 0xb0
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	2284      	movs	r2, #132	; 0x84
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 feed 	bl	8013cf8 <memset>
  if(hi2c->Instance==I2C1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a57      	ldr	r2, [pc, #348]	; (8001080 <HAL_I2C_MspInit+0x188>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	f040 80b9 	bne.w	800109c <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 f833 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f44:	f7ff ff26 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b4e      	ldr	r3, [pc, #312]	; (8001084 <HAL_I2C_MspInit+0x18c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_I2C_MspInit+0x18c>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <HAL_I2C_MspInit+0x18c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f60:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4840      	ldr	r0, [pc, #256]	; (8001088 <HAL_I2C_MspInit+0x190>)
 8000f88:	f003 f942 	bl	8004210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <HAL_I2C_MspInit+0x18c>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a3c      	ldr	r2, [pc, #240]	; (8001084 <HAL_I2C_MspInit+0x18c>)
 8000f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <HAL_I2C_MspInit+0x18c>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	; (8001090 <HAL_I2C_MspInit+0x198>)
 8000fa8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fb0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fe4:	4829      	ldr	r0, [pc, #164]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000fe6:	f001 fba3 	bl	8002730 <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000ff0:	f7ff fed0 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ffa:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_I2C_MspInit+0x194>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <HAL_I2C_MspInit+0x1a0>)
 8001004:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800100c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 800101c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001020:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001042:	f001 fb75 	bl	8002730 <HAL_DMA_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 800104c:	f7ff fea2 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_I2C_MspInit+0x19c>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201f      	movs	r0, #31
 8001062:	f001 fa50 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001066:	201f      	movs	r0, #31
 8001068:	f001 fa69 	bl	800253e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2020      	movs	r0, #32
 8001072:	f001 fa48 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001076:	2020      	movs	r0, #32
 8001078:	f001 fa61 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800107c:	e0be      	b.n	80011fc <HAL_I2C_MspInit+0x304>
 800107e:	bf00      	nop
 8001080:	40005400 	.word	0x40005400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400
 800108c:	200002f0 	.word	0x200002f0
 8001090:	40026010 	.word	0x40026010
 8001094:	20000350 	.word	0x20000350
 8001098:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_I2C_MspInit+0x30c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f040 80aa 	bne.w	80011fc <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 ff73 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 80010c4:	f7ff fe66 	bl	8000d94 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_I2C_MspInit+0x310>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_I2C_MspInit+0x310>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <HAL_I2C_MspInit+0x310>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e8:	2312      	movs	r3, #18
 80010ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010fa:	2304      	movs	r3, #4
 80010fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001104:	4619      	mov	r1, r3
 8001106:	4841      	ldr	r0, [pc, #260]	; (800120c <HAL_I2C_MspInit+0x314>)
 8001108:	f003 f882 	bl	8004210 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_I2C_MspInit+0x310>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_I2C_MspInit+0x310>)
 8001112:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_I2C_MspInit+0x310>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001126:	4a3b      	ldr	r2, [pc, #236]	; (8001214 <HAL_I2C_MspInit+0x31c>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_I2C_MspInit+0x318>)
 800112c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_I2C_MspInit+0x318>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_I2C_MspInit+0x318>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_I2C_MspInit+0x318>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001164:	482a      	ldr	r0, [pc, #168]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001166:	f001 fae3 	bl	8002730 <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001170:	f7ff fe10 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_I2C_MspInit+0x318>)
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_I2C_MspInit+0x318>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_I2C_MspInit+0x320>)
 8001182:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_I2C_MspInit+0x324>)
 8001184:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_I2C_MspInit+0x320>)
 8001188:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800118c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_I2C_MspInit+0x320>)
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_I2C_MspInit+0x320>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_I2C_MspInit+0x320>)
 800119c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80011c0:	4815      	ldr	r0, [pc, #84]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011c2:	f001 fab5 	bl	8002730 <HAL_DMA_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80011cc:	f7ff fde2 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_I2C_MspInit+0x320>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2021      	movs	r0, #33	; 0x21
 80011e2:	f001 f990 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011e6:	2021      	movs	r0, #33	; 0x21
 80011e8:	f001 f9a9 	bl	800253e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2022      	movs	r0, #34	; 0x22
 80011f2:	f001 f988 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80011f6:	2022      	movs	r0, #34	; 0x22
 80011f8:	f001 f9a1 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	37b0      	adds	r7, #176	; 0xb0
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40005800 	.word	0x40005800
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400
 8001210:	200003b0 	.word	0x200003b0
 8001214:	40026040 	.word	0x40026040
 8001218:	20000410 	.word	0x20000410
 800121c:	400260b8 	.word	0x400260b8

08001220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_SPI_MspInit+0x168>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d14c      	bne.n	80012dc <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001256:	623b      	str	r3, [r7, #32]
 8001258:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b4c      	ldr	r3, [pc, #304]	; (800138c <HAL_SPI_MspInit+0x16c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a45      	ldr	r2, [pc, #276]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800128a:	2360      	movs	r3, #96	; 0x60
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800129a:	2305      	movs	r3, #5
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <HAL_SPI_MspInit+0x170>)
 80012a6:	f002 ffb3 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012aa:	2320      	movs	r3, #32
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ba:	2305      	movs	r3, #5
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4833      	ldr	r0, [pc, #204]	; (8001394 <HAL_SPI_MspInit+0x174>)
 80012c6:	f002 ffa3 	bl	8004210 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2023      	movs	r0, #35	; 0x23
 80012d0:	f001 f919 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012d4:	2023      	movs	r0, #35	; 0x23
 80012d6:	f001 f932 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012da:	e050      	b.n	800137e <HAL_SPI_MspInit+0x15e>
  else if(hspi->Instance==SPI2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <HAL_SPI_MspInit+0x178>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d14b      	bne.n	800137e <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_SPI_MspInit+0x16c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a28      	ldr	r2, [pc, #160]	; (800138c <HAL_SPI_MspInit+0x16c>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_SPI_MspInit+0x16c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_SPI_MspInit+0x16c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_SPI_MspInit+0x16c>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_SPI_MspInit+0x16c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800132e:	230c      	movs	r3, #12
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133e:	2305      	movs	r3, #5
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <HAL_SPI_MspInit+0x17c>)
 800134a:	f002 ff61 	bl	8004210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800134e:	2308      	movs	r3, #8
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135e:	2305      	movs	r3, #5
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_SPI_MspInit+0x180>)
 800136a:	f002 ff51 	bl	8004210 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2024      	movs	r0, #36	; 0x24
 8001374:	f001 f8c7 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001378:	2024      	movs	r0, #36	; 0x24
 800137a:	f001 f8e0 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3738      	adds	r7, #56	; 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40013000 	.word	0x40013000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40003800 	.word	0x40003800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b4:	d113      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201c      	movs	r0, #28
 80013d4:	f001 f897 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d8:	201c      	movs	r0, #28
 80013da:	f001 f8b0 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b0      	sub	sp, #192	; 0xc0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001408:	2284      	movs	r2, #132	; 0x84
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f012 fc73 	bl	8013cf8 <memset>
  if(huart->Instance==UART4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a81      	ldr	r2, [pc, #516]	; (800161c <HAL_UART_MspInit+0x230>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d145      	bne.n	80014a8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800141c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f004 fdba 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001436:	f7ff fcad 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800143a:	4b79      	ldr	r3, [pc, #484]	; (8001620 <HAL_UART_MspInit+0x234>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a78      	ldr	r2, [pc, #480]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b73      	ldr	r3, [pc, #460]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a72      	ldr	r2, [pc, #456]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800146a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800146e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001484:	2308      	movs	r3, #8
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800148e:	4619      	mov	r1, r3
 8001490:	4864      	ldr	r0, [pc, #400]	; (8001624 <HAL_UART_MspInit+0x238>)
 8001492:	f002 febd 	bl	8004210 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2034      	movs	r0, #52	; 0x34
 800149c:	f001 f833 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014a0:	2034      	movs	r0, #52	; 0x34
 80014a2:	f001 f84c 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a6:	e0b5      	b.n	8001614 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==UART5)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_UART_MspInit+0x23c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d166      	bne.n	8001580 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fd6f 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80014cc:	f7ff fc62 	bl	8000d94 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_UART_MspInit+0x234>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_UART_MspInit+0x234>)
 80014d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_UART_MspInit+0x234>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_UART_MspInit+0x234>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_UART_MspInit+0x234>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_UART_MspInit+0x234>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_UART_MspInit+0x234>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_UART_MspInit+0x234>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001532:	2308      	movs	r3, #8
 8001534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800153c:	4619      	mov	r1, r3
 800153e:	4839      	ldr	r0, [pc, #228]	; (8001624 <HAL_UART_MspInit+0x238>)
 8001540:	f002 fe66 	bl	8004210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001544:	2304      	movs	r3, #4
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800155c:	2308      	movs	r3, #8
 800155e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001566:	4619      	mov	r1, r3
 8001568:	4830      	ldr	r0, [pc, #192]	; (800162c <HAL_UART_MspInit+0x240>)
 800156a:	f002 fe51 	bl	8004210 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2035      	movs	r0, #53	; 0x35
 8001574:	f000 ffc7 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001578:	2035      	movs	r0, #53	; 0x35
 800157a:	f000 ffe0 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 800157e:	e049      	b.n	8001614 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2a      	ldr	r2, [pc, #168]	; (8001630 <HAL_UART_MspInit+0x244>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d144      	bne.n	8001614 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001590:	2300      	movs	r3, #0
 8001592:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fd03 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80015a4:	f7ff fbf6 	bl	8000d94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_UART_MspInit+0x234>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_UART_MspInit+0x234>)
 80015ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_UART_MspInit+0x234>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x234>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_UART_MspInit+0x234>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_UART_MspInit+0x234>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f2:	2307      	movs	r3, #7
 80015f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_UART_MspInit+0x240>)
 8001600:	f002 fe06 	bl	8004210 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2027      	movs	r0, #39	; 0x27
 800160a:	f000 ff7c 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800160e:	2027      	movs	r0, #39	; 0x27
 8001610:	f000 ff95 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 8001614:	bf00      	nop
 8001616:	37c0      	adds	r7, #192	; 0xc0
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40004c00 	.word	0x40004c00
 8001620:	40023800 	.word	0x40023800
 8001624:	40020800 	.word	0x40020800
 8001628:	40005000 	.word	0x40005000
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40004800 	.word	0x40004800

08001634 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ac      	sub	sp, #176	; 0xb0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	2284      	movs	r2, #132	; 0x84
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f012 fb4f 	bl	8013cf8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001662:	d159      	bne.n	8001718 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001664:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001668:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fc95 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001680:	f7ff fb88 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_PCD_MspInit+0xec>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_PCD_MspInit+0xec>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_PCD_MspInit+0xec>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800169c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b6:	230a      	movs	r3, #10
 80016b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c0:	4619      	mov	r1, r3
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <HAL_PCD_MspInit+0xf0>)
 80016c4:	f002 fda4 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e0:	4619      	mov	r1, r3
 80016e2:	4810      	ldr	r0, [pc, #64]	; (8001724 <HAL_PCD_MspInit+0xf0>)
 80016e4:	f002 fd94 	bl	8004210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_PCD_MspInit+0xec>)
 80016ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_PCD_MspInit+0xec>)
 80016ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f2:	6353      	str	r3, [r2, #52]	; 0x34
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_PCD_MspInit+0xec>)
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_PCD_MspInit+0xec>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_PCD_MspInit+0xec>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6453      	str	r3, [r2, #68]	; 0x44
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_PCD_MspInit+0xec>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	37b0      	adds	r7, #176	; 0xb0
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 fb14 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Stream0_IRQHandler+0x10>)
 8001782:	f001 f915 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200002f0 	.word	0x200002f0

08001790 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Stream2_IRQHandler+0x10>)
 8001796:	f001 f90b 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003b0 	.word	0x200003b0

080017a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Stream6_IRQHandler+0x10>)
 80017aa:	f001 f901 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000350 	.word	0x20000350

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f005 fa03 	bl	8006bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000538 	.word	0x20000538

080017cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <I2C1_EV_IRQHandler+0x10>)
 80017d2:	f002 ff97 	bl	8004704 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000248 	.word	0x20000248

080017e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <I2C1_ER_IRQHandler+0x10>)
 80017e6:	f002 ffa7 	bl	8004738 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000248 	.word	0x20000248

080017f4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <I2C2_EV_IRQHandler+0x10>)
 80017fa:	f002 ff83 	bl	8004704 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000029c 	.word	0x2000029c

08001808 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <I2C2_ER_IRQHandler+0x10>)
 800180e:	f002 ff93 	bl	8004738 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000029c 	.word	0x2000029c

0800181c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <SPI1_IRQHandler+0x10>)
 8001822:	f005 f85b 	bl	80068dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000470 	.word	0x20000470

08001830 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <SPI2_IRQHandler+0x10>)
 8001836:	f005 f851 	bl	80068dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200004d4 	.word	0x200004d4

08001844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <USART3_IRQHandler+0x10>)
 800184a:	f005 ff55 	bl	80076f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000694 	.word	0x20000694

08001858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800185c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001860:	f002 fe9c 	bl	800459c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA1_Stream7_IRQHandler+0x10>)
 800186e:	f001 f89f 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000410 	.word	0x20000410

0800187c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <UART4_IRQHandler+0x10>)
 8001882:	f005 ff39 	bl	80076f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000584 	.word	0x20000584

08001890 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <UART5_IRQHandler+0x10>)
 8001896:	f005 ff2f 	bl	80076f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000060c 	.word	0x2000060c

080018a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM6_DAC_IRQHandler+0x10>)
 80018aa:	f000 fe84 	bl	80025b6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000234 	.word	0x20000234

080018b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <ETH_IRQHandler+0x10>)
 80018be:	f001 fdc1 	bl	8003444 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20005604 	.word	0x20005604

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <_kill+0x20>)
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
	return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20008df4 	.word	0x20008df4

08001900 <_exit>:

void _exit (int status)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ffe5 	bl	80018dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001912:	e7fe      	b.n	8001912 <_exit+0x12>

08001914 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193c:	605a      	str	r2, [r3, #4]
	return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_isatty>:

int _isatty(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
	return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d205      	bcs.n	80019b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <_sbrk+0x6c>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	20050000 	.word	0x20050000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	20000c24 	.word	0x20000c24
 80019e4:	20008e08 	.word	0x20008e08
 80019e8:	20008df4 	.word	0x20008df4

080019ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:
 8001a1e:	58d4      	ldr	r4, [r2, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:
 8001a24:	18c4      	adds	r4, r0, r3
 8001a26:	428c      	cmp	r4, r1
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:
 8001a36:	42a2      	cmp	r2, r4
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>
 8001a3a:	f7ff ffd7 	bl	80019ec <SystemInit>
 8001a3e:	f012 f8ff 	bl	8013c40 <__libc_init_array>
 8001a42:	f7fe fdb7 	bl	80005b4 <main>
 8001a46:	4770      	bx	lr
 8001a48:	20050000 	.word	0x20050000
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000090 	.word	0x20000090
 8001a54:	08017dac 	.word	0x08017dac
 8001a58:	200001d0 	.word	0x200001d0
 8001a5c:	20008e04 	.word	0x20008e04

08001a60 <ADC_IRQHandler>:
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>

08001a62 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <LAN8742_RegisterBusIO+0x28>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <LAN8742_RegisterBusIO+0x28>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <LAN8742_RegisterBusIO+0x28>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e014      	b.n	8001aba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d17c      	bne.n	8001be0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e01c      	b.n	8001b3a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f107 0208 	add.w	r2, r7, #8
 8001b08:	2112      	movs	r1, #18
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	4798      	blx	r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da03      	bge.n	8001b1c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001b14:	f06f 0304 	mvn.w	r3, #4
 8001b18:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001b1a:	e00b      	b.n	8001b34 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d105      	bne.n	8001b34 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
         break;
 8001b32:	e005      	b.n	8001b40 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b1f      	cmp	r3, #31
 8001b3e:	d9df      	bls.n	8001b00 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b1f      	cmp	r3, #31
 8001b46:	d902      	bls.n	8001b4e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b48:	f06f 0302 	mvn.w	r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d145      	bne.n	8001be0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6810      	ldr	r0, [r2, #0]
 8001b5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b60:	2100      	movs	r1, #0
 8001b62:	4798      	blx	r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db37      	blt.n	8001bda <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6810      	ldr	r0, [r2, #0]
 8001b72:	f107 0208 	add.w	r2, r7, #8
 8001b76:	2100      	movs	r1, #0
 8001b78:	4798      	blx	r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db28      	blt.n	8001bd2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4798      	blx	r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b8a:	e01c      	b.n	8001bc6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4798      	blx	r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b9e:	d80e      	bhi.n	8001bbe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6810      	ldr	r0, [r2, #0]
 8001ba8:	f107 0208 	add.w	r2, r7, #8
 8001bac:	2100      	movs	r1, #0
 8001bae:	4798      	blx	r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da07      	bge.n	8001bc6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001bb6:	f06f 0304 	mvn.w	r3, #4
 8001bba:	613b      	str	r3, [r7, #16]
                 break;
 8001bbc:	e010      	b.n	8001be0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001bbe:	f06f 0301 	mvn.w	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
               break;
 8001bc4:	e00c      	b.n	8001be0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1dd      	bne.n	8001b8c <LAN8742_Init+0xc6>
 8001bd0:	e006      	b.n	8001be0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001bd2:	f06f 0304 	mvn.w	r3, #4
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e002      	b.n	8001be0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001bda:	f06f 0303 	mvn.w	r3, #3
 8001bde:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d112      	bne.n	8001c0c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4798      	blx	r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001bf0:	bf00      	nop
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4798      	blx	r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c04:	d9f5      	bls.n	8001bf2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 }
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6810      	ldr	r0, [r2, #0]
 8001c2a:	f107 020c 	add.w	r2, r7, #12
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4798      	blx	r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da02      	bge.n	8001c3e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c38:	f06f 0304 	mvn.w	r3, #4
 8001c3c:	e06e      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6810      	ldr	r0, [r2, #0]
 8001c46:	f107 020c 	add.w	r2, r7, #12
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4798      	blx	r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da02      	bge.n	8001c5a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c54:	f06f 0304 	mvn.w	r3, #4
 8001c58:	e060      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001c64:	2301      	movs	r3, #1
 8001c66:	e059      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6810      	ldr	r0, [r2, #0]
 8001c70:	f107 020c 	add.w	r2, r7, #12
 8001c74:	2100      	movs	r1, #0
 8001c76:	4798      	blx	r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da02      	bge.n	8001c84 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c7e:	f06f 0304 	mvn.w	r3, #4
 8001c82:	e04b      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11b      	bne.n	8001cc6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <LAN8742_GetLinkState+0x90>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e03a      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e033      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e02c      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e02a      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6810      	ldr	r0, [r2, #0]
 8001cce:	f107 020c 	add.w	r2, r7, #12
 8001cd2:	211f      	movs	r1, #31
 8001cd4:	4798      	blx	r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da02      	bge.n	8001ce2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001cdc:	f06f 0304 	mvn.w	r3, #4
 8001ce0:	e01c      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001cec:	2306      	movs	r3, #6
 8001cee:	e015      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 031c 	and.w	r3, r3, #28
 8001cf6:	2b18      	cmp	r3, #24
 8001cf8:	d101      	bne.n	8001cfe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e00e      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 031c 	and.w	r3, r3, #28
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d101      	bne.n	8001d0c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e007      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 031c 	and.w	r3, r3, #28
 8001d12:	2b14      	cmp	r3, #20
 8001d14:	d101      	bne.n	8001d1a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d16:	2304      	movs	r3, #4
 8001d18:	e000      	b.n	8001d1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d1a:	2305      	movs	r3, #5
    }				
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 fbe1 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f806 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff f834 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x54>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_InitTick+0x58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fbfb 	bl	800255a <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 fbc3 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_InitTick+0x5c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000c28 	.word	0x20000c28

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000c28 	.word	0x20000c28

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e031      	b.n	8001ea2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe ffce 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_ADC_Init+0x84>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f970 	bl	800215c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
 8001e92:	e001      	b.n	8001e98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	ffffeefd 	.word	0xffffeefd

08001eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e136      	b.n	800213a <HAL_ADC_ConfigChannel+0x28a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d93a      	bls.n	8001f52 <HAL_ADC_ConfigChannel+0xa2>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ee4:	d035      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68d9      	ldr	r1, [r3, #12]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	2207      	movs	r2, #7
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a8d      	ldr	r2, [pc, #564]	; (8002148 <HAL_ADC_ConfigChannel+0x298>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2a:	e035      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4403      	add	r3, r0
 8001f44:	3b1e      	subs	r3, #30
 8001f46:	409a      	lsls	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f50:	e022      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	400a      	ands	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4403      	add	r3, r0
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b06      	cmp	r3, #6
 8001f9e:	d824      	bhi.n	8001fea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b05      	subs	r3, #5
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b05      	subs	r3, #5
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8001fe8:	e04c      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d824      	bhi.n	800203c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b23      	subs	r3, #35	; 0x23
 8002004:	221f      	movs	r2, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	400a      	ands	r2, r1
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b23      	subs	r3, #35	; 0x23
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
 800203a:	e023      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b41      	subs	r3, #65	; 0x41
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b41      	subs	r3, #65	; 0x41
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_ADC_ConfigChannel+0x29c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 800209e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_ADC_ConfigChannel+0x29c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10f      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d10b      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_ADC_ConfigChannel+0x29c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_ADC_ConfigChannel+0x298>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x23a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d122      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002100:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_ADC_ConfigChannel+0x298>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_ADC_ConfigChannel+0x2a4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_ADC_ConfigChannel+0x2a8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002122:	e002      	b.n	800212a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	10000012 	.word	0x10000012
 800214c:	40012000 	.word	0x40012000
 8002150:	40012300 	.word	0x40012300
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002164:	4b78      	ldr	r3, [pc, #480]	; (8002348 <ADC_Init+0x1ec>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a77      	ldr	r2, [pc, #476]	; (8002348 <ADC_Init+0x1ec>)
 800216a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800216e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <ADC_Init+0x1ec>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4973      	ldr	r1, [pc, #460]	; (8002348 <ADC_Init+0x1ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <ADC_Init+0x1f0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6899      	ldr	r1, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00f      	b.n	8002256 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0202 	bic.w	r2, r2, #2
 8002264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	005a      	lsls	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	035a      	lsls	r2, r3, #13
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	051a      	lsls	r2, r3, #20
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230e:	025a      	lsls	r2, r3, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	029a      	lsls	r2, r3, #10
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	0f000001 	.word	0x0f000001

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <__NVIC_SetPriorityGrouping+0x40>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	4313      	orrs	r3, r2
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x40>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00
 8002394:	05fa0000 	.word	0x05fa0000

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff8e 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff29 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff3e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff8e 	bl	8002444 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5d 	bl	80023f0 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff31 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e014      	b.n	80025ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe fc67 	bl	8000e68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025cc:	d120      	bne.n	8002610 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025dc:	d118      	bne.n	8002610 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002608:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f82d 	bl	800266a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800261a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261e:	d120      	bne.n	8002662 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262e:	d118      	bne.n	8002662 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f85d 	bl	800271c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800267e:	b480      	push	{r7}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	795b      	ldrb	r3, [r3, #5]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_DAC_ConfigChannel+0x18>
 8002692:	2302      	movs	r3, #2
 8002694:	e03c      	b.n	8002710 <HAL_DAC_ConfigChannel+0x92>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2202      	movs	r2, #2
 80026a0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	22c0      	movs	r2, #192	; 0xc0
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff fb44 	bl	8001dc8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e099      	b.n	8002880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276c:	e00f      	b.n	800278e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276e:	f7ff fb2b 	bl	8001dc8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b05      	cmp	r3, #5
 800277a:	d908      	bls.n	800278e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2203      	movs	r2, #3
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e078      	b.n	8002880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e8      	bne.n	800276e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_DMA_Init+0x158>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0307 	bic.w	r3, r3, #7
 800280e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2b04      	cmp	r3, #4
 8002820:	d117      	bne.n	8002852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fa89 	bl	8002d4c <DMA_CheckFifoParam>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2240      	movs	r2, #64	; 0x40
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800284e:	2301      	movs	r3, #1
 8002850:	e016      	b.n	8002880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa40 	bl	8002ce0 <DMA_CalcBaseAndBitshift>
 8002860:	4603      	mov	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	223f      	movs	r2, #63	; 0x3f
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	f010803f 	.word	0xf010803f

0800288c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800289a:	f7ff fa95 	bl	8001dc8 <HAL_GetTick>
 800289e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e052      	b.n	8002964 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0216 	bic.w	r2, r2, #22
 80028cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_DMA_Abort+0x62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0208 	bic.w	r2, r2, #8
 80028fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290e:	e013      	b.n	8002938 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002910:	f7ff fa5a 	bl	8001dc8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d90c      	bls.n	8002938 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e015      	b.n	8002964 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e4      	bne.n	8002910 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	223f      	movs	r2, #63	; 0x3f
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d004      	beq.n	800298a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00c      	b.n	80029a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2205      	movs	r2, #5
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_DMA_IRQHandler+0x248>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a8e      	ldr	r2, [pc, #568]	; (8002bfc <HAL_DMA_IRQHandler+0x24c>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2208      	movs	r2, #8
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01a      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2208      	movs	r2, #8
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f043 0202 	orr.w	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2204      	movs	r2, #4
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2204      	movs	r2, #4
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0204 	orr.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d043      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03c      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2210      	movs	r2, #16
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d024      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	e01f      	b.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e016      	b.n	8002b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0208 	bic.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2220      	movs	r2, #32
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 808f 	beq.w	8002c50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8087 	beq.w	8002c50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2220      	movs	r2, #32
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d136      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0216 	bic.w	r2, r2, #22
 8002b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x1da>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0208 	bic.w	r2, r2, #8
 8002b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	223f      	movs	r2, #63	; 0x3f
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d07e      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
        }
        return;
 8002bc6:	e079      	b.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01d      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d031      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e02c      	b.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d023      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
 8002c10:	e01e      	b.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0210 	bic.w	r2, r2, #16
 8002c2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d032      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2205      	movs	r2, #5
 8002c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d307      	bcc.n	8002c98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f2      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x2cc>
 8002c96:	e000      	b.n	8002c9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e000      	b.n	8002cbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cbc:	bf00      	nop
    }
  }
}
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3b10      	subs	r3, #16
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <DMA_CalcBaseAndBitshift+0x60>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <DMA_CalcBaseAndBitshift+0x64>)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d908      	bls.n	8002d20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <DMA_CalcBaseAndBitshift+0x68>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002d1e:	e006      	b.n	8002d2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <DMA_CalcBaseAndBitshift+0x68>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	aaaaaaab 	.word	0xaaaaaaab
 8002d44:	08017b5c 	.word	0x08017b5c
 8002d48:	fffffc00 	.word	0xfffffc00

08002d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11f      	bne.n	8002da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d856      	bhi.n	8002e1a <DMA_CheckFifoParam+0xce>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <DMA_CheckFifoParam+0x28>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d97 	.word	0x08002d97
 8002d7c:	08002d85 	.word	0x08002d85
 8002d80:	08002e1b 	.word	0x08002e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d046      	beq.n	8002e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d94:	e043      	b.n	8002e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d9e:	d140      	bne.n	8002e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da4:	e03d      	b.n	8002e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dae:	d121      	bne.n	8002df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d837      	bhi.n	8002e26 <DMA_CheckFifoParam+0xda>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <DMA_CheckFifoParam+0x70>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002dd3 	.word	0x08002dd3
 8002dc4:	08002dcd 	.word	0x08002dcd
 8002dc8:	08002de5 	.word	0x08002de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e030      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d025      	beq.n	8002e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de2:	e022      	b.n	8002e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dec:	d11f      	bne.n	8002e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002df2:	e01c      	b.n	8002e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d903      	bls.n	8002e02 <DMA_CheckFifoParam+0xb6>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d003      	beq.n	8002e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e00:	e018      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      break;
 8002e06:	e015      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      break;
 8002e18:	e00b      	b.n	8002e32 <DMA_CheckFifoParam+0xe6>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e00a      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e008      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e006      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
 8002e28:	e004      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
    }
  } 
  
  return status; 
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop

08002e44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06a      	b.n	8002f2c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2223      	movs	r2, #35	; 0x23
 8002e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f006 f9df 	bl	800922c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <HAL_ETH_Init+0xf0>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <HAL_ETH_Init+0xf0>)
 8002e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e78:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7a:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_ETH_Init+0xf0>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_ETH_Init+0xf4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a2b      	ldr	r2, [pc, #172]	; (8002f38 <HAL_ETH_Init+0xf4>)
 8002e8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_ETH_Init+0xf4>)
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_ETH_Init+0xf4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_ETH_Init+0xf4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ebc:	f7fe ff84 	bl	8001dc8 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ec2:	e011      	b.n	8002ee8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ec4:	f7fe ff80 	bl	8001dc8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ed2:	d909      	bls.n	8002ee8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	22e0      	movs	r2, #224	; 0xe0
 8002ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e021      	b.n	8002f2c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e4      	bne.n	8002ec4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fee4 	bl	8003cc8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 ff8b 	bl	8003e1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 ffe1 	bl	8003ece <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	461a      	mov	r2, r3
 8002f12:	2100      	movs	r1, #0
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 ff49 	bl	8003dac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2210      	movs	r2, #16
 8002f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40013800 	.word	0x40013800

08002f3c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d150      	bne.n	8002ff0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2223      	movs	r2, #35	; 0x23
 8002f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9fd 	bl	800335c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0208 	orr.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f7fe ff30 	bl	8001de0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0204 	orr.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f7fe ff1d 	bl	8001de0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fd2a 	bl	8003a08 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	f043 0302 	orr.w	r3, r3, #2
 8002fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fe2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2223      	movs	r2, #35	; 0x23
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003008:	2b23      	cmp	r3, #35	; 0x23
 800300a:	d14a      	bne.n	80030a2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2223      	movs	r2, #35	; 0x23
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003026:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800302a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	f023 0302 	bic.w	r3, r3, #2
 800303e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003042:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800305c:	2001      	movs	r0, #1
 800305e:	f7fe febf 	bl	8001de0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fccc 	bl	8003a08 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0208 	bic.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003088:	2001      	movs	r0, #1
 800308a:	f7fe fea9 	bl	8001de0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2210      	movs	r2, #16
 800309a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07c      	b.n	80031cc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	2b23      	cmp	r3, #35	; 0x23
 80030da:	d176      	bne.n	80031ca <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80030dc:	2200      	movs	r2, #0
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 ff61 	bl	8003fa8 <ETH_Prepare_Tx_Descriptors>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e065      	b.n	80031cc <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003100:	f3bf 8f4f 	dsb	sy
}
 8003104:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3206      	adds	r2, #6
 800310e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003112:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	2b03      	cmp	r3, #3
 8003124:	d904      	bls.n	8003130 <HAL_ETH_Transmit+0x84>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	1f1a      	subs	r2, r3, #4
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3106      	adds	r1, #6
 800313c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003144:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003146:	f7fe fe3f 	bl	8001dc8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800314c:	e037      	b.n	80031be <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d011      	beq.n	8003184 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e023      	b.n	80031cc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d018      	beq.n	80031be <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800318c:	f7fe fe1c 	bl	8001dc8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	d302      	bcc.n	80031a2 <HAL_ETH_Transmit+0xf6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80031b8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e006      	b.n	80031cc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dbc3      	blt.n	800314e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0a8      	b.n	8003352 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	2b23      	cmp	r3, #35	; 0x23
 8003208:	d001      	beq.n	800320e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0a1      	b.n	8003352 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	3212      	adds	r2, #18
 800321a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003224:	f1c3 0304 	rsb	r3, r3, #4
 8003228:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800322a:	e06a      	b.n	8003302 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_ETH_ReadData+0x88>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d040      	beq.n	80032de <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003290:	3b04      	subs	r3, #4
 8003292:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80032b8:	461a      	mov	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f006 f97f 	bl	80095c0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2200      	movs	r2, #0
 80032dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d902      	bls.n	80032f0 <HAL_ETH_ReadData+0x11c>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b04      	subs	r3, #4
 80032ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	3212      	adds	r2, #18
 80032f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db06      	blt.n	8003318 <HAL_ETH_ReadData+0x144>
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d202      	bcs.n	8003318 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d089      	beq.n	800322c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f815 	bl	800335c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003370:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	3212      	adds	r2, #18
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003382:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003384:	e040      	b.n	8003408 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d112      	bne.n	80033b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4618      	mov	r0, r3
 8003394:	f006 f8e4 	bl	8009560 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	74fb      	strb	r3, [r7, #19]
 80033a2:	e007      	b.n	80033b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d026      	beq.n	8003408 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <ETH_UpdateDescriptor+0xe4>)
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	e003      	b.n	80033d2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80033d0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033d2:	f3bf 8f5f 	dmb	sy
}
 80033d6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d902      	bls.n	80033f6 <ETH_UpdateDescriptor+0x9a>
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3b04      	subs	r3, #4
 80033f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	3212      	adds	r2, #18
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	617b      	str	r3, [r7, #20]
      desccount--;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	3b01      	subs	r3, #1
 8003406:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <ETH_UpdateDescriptor+0xb8>
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1b8      	bne.n	8003386 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	429a      	cmp	r2, r3
 800341c:	d00c      	beq.n	8003438 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	800045f8 	.word	0x800045f8

08003444 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d112      	bne.n	8003484 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d109      	bne.n	8003484 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	461a      	mov	r2, r3
 800347a:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_ETH_IRQHandler+0x178>)
 800347c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8ac 	bl	80035dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d113      	bne.n	80034be <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10a      	bne.n	80034be <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b0:	461a      	mov	r2, r3
 80034b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80034b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f885 	bl	80035c8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d0:	d14c      	bne.n	800356c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	d142      	bne.n	800356c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f043 0208 	orr.w	r2, r3, #8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003508:	d11a      	bne.n	8003540 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_ETH_IRQHandler+0x17c>)
 8003516:	4013      	ands	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003534:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	22e0      	movs	r2, #224	; 0xe0
 800353a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800353e:	e012      	b.n	8003566 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	f248 6380 	movw	r3, #34432	; 0x8680
 800354e:	4013      	ands	r3, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355e:	461a      	mov	r2, r3
 8003560:	f248 6380 	movw	r3, #34432	; 0x8680
 8003564:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f842 	bl	80035f0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d10e      	bne.n	8003598 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f83a 	bl	8003604 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_ETH_IRQHandler+0x180>)
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d006      	beq.n	80035b2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_ETH_IRQHandler+0x180>)
 80035a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035aa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f833 	bl	8003618 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	00010040 	.word	0x00010040
 80035c0:	007e2000 	.word	0x007e2000
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 031c 	and.w	r3, r3, #28
 8003648:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	02db      	lsls	r3, r3, #11
 800364e:	b29b      	uxth	r3, r3
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0302 	bic.w	r3, r3, #2
 800366a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800367c:	f7fe fba4 	bl	8001dc8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003682:	e00d      	b.n	80036a0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003684:	f7fe fba0 	bl	8001dc8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d301      	bcc.n	8003698 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e010      	b.n	80036ba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ec      	bne.n	8003684 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 031c 	and.w	r3, r3, #28
 80036de:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	02db      	lsls	r3, r3, #11
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	019b      	lsls	r3, r3, #6
 80036f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800371c:	f7fe fb54 	bl	8001dc8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003722:	e00d      	b.n	8003740 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003724:	f7fe fb50 	bl	8001dc8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d301      	bcc.n	8003738 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e009      	b.n	800374c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1ec      	bne.n	8003724 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0d9      	b.n	800391c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	b29a      	uxth	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e00b      	b.n	8003954 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	2b10      	cmp	r3, #16
 8003944:	d105      	bne.n	8003952 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f883 	bl	8003a54 <ETH_SetMACConfig>

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 031c 	bic.w	r3, r3, #28
 8003972:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003974:	f002 fae2 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8003978:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d908      	bls.n	8003994 <HAL_ETH_SetMDIOClockRange+0x38>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d804      	bhi.n	8003994 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f043 0308 	orr.w	r3, r3, #8
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e027      	b.n	80039e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d908      	bls.n	80039ae <HAL_ETH_SetMDIOClockRange+0x52>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d204      	bcs.n	80039ae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f043 030c 	orr.w	r3, r3, #12
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e01a      	b.n	80039e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d303      	bcc.n	80039be <HAL_ETH_SetMDIOClockRange+0x62>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d911      	bls.n	80039e2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4a0f      	ldr	r2, [pc, #60]	; (8003a00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d908      	bls.n	80039d8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d804      	bhi.n	80039d8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e005      	b.n	80039e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e000      	b.n	80039e4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80039e2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	611a      	str	r2, [r3, #16]
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	01312cff 	.word	0x01312cff
 80039f8:	02160ebf 	.word	0x02160ebf
 80039fc:	03938700 	.word	0x03938700
 8003a00:	05f5e0ff 	.word	0x05f5e0ff
 8003a04:	08f0d17f 	.word	0x08f0d17f

08003a08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a2a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a38:	2001      	movs	r0, #1
 8003a3a:	f7fe f9d1 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a48:	6193      	str	r3, [r2, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <ETH_SetMACConfig+0x15c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	7c1b      	ldrb	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <ETH_SetMACConfig+0x28>
 8003a76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a7a:	e000      	b.n	8003a7e <ETH_SetMACConfig+0x2a>
 8003a7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7c5b      	ldrb	r3, [r3, #17]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <ETH_SetMACConfig+0x38>
 8003a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a8a:	e000      	b.n	8003a8e <ETH_SetMACConfig+0x3a>
 8003a8c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	7fdb      	ldrb	r3, [r3, #31]
 8003a9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003a9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003aa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	7f92      	ldrb	r2, [r2, #30]
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d102      	bne.n	8003ab2 <ETH_SetMACConfig+0x5e>
 8003aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ab0:	e000      	b.n	8003ab4 <ETH_SetMACConfig+0x60>
 8003ab2:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ab4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	7f1b      	ldrb	r3, [r3, #28]
 8003aba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003abc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ac2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	791b      	ldrb	r3, [r3, #4]
 8003ac8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003aca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ad2:	2a00      	cmp	r2, #0
 8003ad4:	d102      	bne.n	8003adc <ETH_SetMACConfig+0x88>
 8003ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ada:	e000      	b.n	8003ade <ETH_SetMACConfig+0x8a>
 8003adc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ade:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	7bdb      	ldrb	r3, [r3, #15]
 8003ae4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ae6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003aec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003af6:	4313      	orrs	r3, r2
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7fe f966 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	d101      	bne.n	8003b42 <ETH_SetMACConfig+0xee>
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	e000      	b.n	8003b44 <ETH_SetMACConfig+0xf0>
 8003b42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003b52:	2a01      	cmp	r2, #1
 8003b54:	d101      	bne.n	8003b5a <ETH_SetMACConfig+0x106>
 8003b56:	2208      	movs	r2, #8
 8003b58:	e000      	b.n	8003b5c <ETH_SetMACConfig+0x108>
 8003b5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003b64:	2a01      	cmp	r2, #1
 8003b66:	d101      	bne.n	8003b6c <ETH_SetMACConfig+0x118>
 8003b68:	2204      	movs	r2, #4
 8003b6a:	e000      	b.n	8003b6e <ETH_SetMACConfig+0x11a>
 8003b6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003b76:	2a01      	cmp	r2, #1
 8003b78:	d101      	bne.n	8003b7e <ETH_SetMACConfig+0x12a>
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	e000      	b.n	8003b80 <ETH_SetMACConfig+0x12c>
 8003b7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b80:	4313      	orrs	r3, r2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7fe f921 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	619a      	str	r2, [r3, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	ff20810f 	.word	0xff20810f

08003bb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <ETH_SetDMAConfig+0x110>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	7b1b      	ldrb	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <ETH_SetDMAConfig+0x2c>
 8003bda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bde:	e000      	b.n	8003be2 <ETH_SetDMAConfig+0x2e>
 8003be0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	7b5b      	ldrb	r3, [r3, #13]
 8003be6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003be8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	7f52      	ldrb	r2, [r2, #29]
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d102      	bne.n	8003bf8 <ETH_SetDMAConfig+0x44>
 8003bf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bf6:	e000      	b.n	8003bfa <ETH_SetDMAConfig+0x46>
 8003bf8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	7b9b      	ldrb	r3, [r3, #14]
 8003c00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	7f1b      	ldrb	r3, [r3, #28]
 8003c0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	7f9b      	ldrb	r3, [r3, #30]
 8003c16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7fe f8c8 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003c7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fe f899 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6013      	str	r3, [r2, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	f8de3f23 	.word	0xf8de3f23

08003cc8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0a6      	sub	sp, #152	; 0x98
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d04:	2300      	movs	r3, #0
 8003d06:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d40:	4619      	mov	r1, r3
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fe86 	bl	8003a54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d88:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d98:	f107 0308 	add.w	r3, r7, #8
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff08 	bl	8003bb4 <ETH_SetDMAConfig>
}
 8003da4:	bf00      	nop
 8003da6:	3798      	adds	r7, #152	; 0x98
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3305      	adds	r3, #5
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	3204      	adds	r2, #4
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <ETH_MACAddressConfig+0x68>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3303      	adds	r3, #3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	061a      	lsls	r2, r3, #24
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3302      	adds	r3, #2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3301      	adds	r3, #1
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	4313      	orrs	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <ETH_MACAddressConfig+0x6c>)
 8003dfe:	4413      	add	r3, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	6013      	str	r3, [r2, #0]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40028040 	.word	0x40028040
 8003e18:	40028044 	.word	0x40028044

08003e1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e03e      	b.n	8003ea8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68d9      	ldr	r1, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	440b      	add	r3, r1
 8003e3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	3206      	adds	r2, #6
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d80c      	bhi.n	8003e8c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68d9      	ldr	r1, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e004      	b.n	8003e96 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d9bd      	bls.n	8003e2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	611a      	str	r2, [r3, #16]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e046      	b.n	8003f6a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6919      	ldr	r1, [r3, #16]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	440b      	add	r3, r1
 8003eec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2200      	movs	r2, #0
 8003f04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f18:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003f20:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	3212      	adds	r2, #18
 8003f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d80c      	bhi.n	8003f5a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6919      	ldr	r1, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	e004      	b.n	8003f64 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d9b5      	bls.n	8003edc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9a:	60da      	str	r2, [r3, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b08d      	sub	sp, #52	; 0x34
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fea:	d007      	beq.n	8003ffc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0ff      	b.n	8004200 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	3301      	adds	r3, #1
 8004004:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	4b7d      	ldr	r3, [pc, #500]	; (800420c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004016:	4013      	ands	r3, r2
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	6852      	ldr	r2, [r2, #4]
 800401c:	431a      	orrs	r2, r3
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	431a      	orrs	r2, r3
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004082:	f3bf 8f5f 	dmb	sy
}
 8004086:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004094:	e082      	b.n	800419c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e005      	b.n	80040c2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	3301      	adds	r3, #1
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d902      	bls.n	80040d4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	3b04      	subs	r3, #4
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f6:	d007      	beq.n	8004108 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	3304      	adds	r3, #4
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d029      	beq.n	800415c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004114:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004116:	2300      	movs	r3, #0
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
 800411a:	e019      	b.n	8004150 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800411c:	f3bf 8f5f 	dmb	sy
}
 8004120:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	3301      	adds	r3, #1
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	2b03      	cmp	r3, #3
 8004138:	d902      	bls.n	8004140 <ETH_Prepare_Tx_Descriptors+0x198>
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	3b04      	subs	r3, #4
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004148:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	3301      	adds	r3, #1
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	429a      	cmp	r2, r3
 8004156:	d3e1      	bcc.n	800411c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	e051      	b.n	8004200 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	3301      	adds	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4b25      	ldr	r3, [pc, #148]	; (800420c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004178:	4013      	ands	r3, r2
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	6852      	ldr	r2, [r2, #4]
 800417e:	431a      	orrs	r2, r3
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	3301      	adds	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800418a:	f3bf 8f5f 	dmb	sy
}
 800418e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f47f af78 	bne.w	8004096 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d006      	beq.n	80041ba <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e005      	b.n	80041c6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	3304      	adds	r3, #4
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80041e8:	b672      	cpsid	i
}
 80041ea:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80041fa:	b662      	cpsie	i
}
 80041fc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3734      	adds	r7, #52	; 0x34
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	ffffe000 	.word	0xffffe000

08004210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e175      	b.n	800451c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004230:	2201      	movs	r2, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	f040 8164 	bne.w	8004516 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d005      	beq.n	8004266 <HAL_GPIO_Init+0x56>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d130      	bne.n	80042c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d017      	beq.n	8004304 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d123      	bne.n	8004358 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0203 	and.w	r2, r3, #3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80be 	beq.w	8004516 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_GPIO_Init+0x324>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	4a65      	ldr	r2, [pc, #404]	; (8004534 <HAL_GPIO_Init+0x324>)
 80043a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a4:	6453      	str	r3, [r2, #68]	; 0x44
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_GPIO_Init+0x324>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043b2:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_GPIO_Init+0x328>)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	3302      	adds	r3, #2
 80043ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	220f      	movs	r2, #15
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_GPIO_Init+0x32c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d037      	beq.n	800444e <HAL_GPIO_Init+0x23e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a57      	ldr	r2, [pc, #348]	; (8004540 <HAL_GPIO_Init+0x330>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d031      	beq.n	800444a <HAL_GPIO_Init+0x23a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a56      	ldr	r2, [pc, #344]	; (8004544 <HAL_GPIO_Init+0x334>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x236>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a55      	ldr	r2, [pc, #340]	; (8004548 <HAL_GPIO_Init+0x338>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x232>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a54      	ldr	r2, [pc, #336]	; (800454c <HAL_GPIO_Init+0x33c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x22e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a53      	ldr	r2, [pc, #332]	; (8004550 <HAL_GPIO_Init+0x340>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x22a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_GPIO_Init+0x344>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x226>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a51      	ldr	r2, [pc, #324]	; (8004558 <HAL_GPIO_Init+0x348>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x222>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a50      	ldr	r2, [pc, #320]	; (800455c <HAL_GPIO_Init+0x34c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x21e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4f      	ldr	r2, [pc, #316]	; (8004560 <HAL_GPIO_Init+0x350>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x21a>
 8004426:	2309      	movs	r3, #9
 8004428:	e012      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800442a:	230a      	movs	r3, #10
 800442c:	e010      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800442e:	2308      	movs	r3, #8
 8004430:	e00e      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004432:	2307      	movs	r3, #7
 8004434:	e00c      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004436:	2306      	movs	r3, #6
 8004438:	e00a      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800443a:	2305      	movs	r3, #5
 800443c:	e008      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800443e:	2304      	movs	r3, #4
 8004440:	e006      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004442:	2303      	movs	r3, #3
 8004444:	e004      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004446:	2302      	movs	r3, #2
 8004448:	e002      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800444e:	2300      	movs	r3, #0
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f002 0203 	and.w	r2, r2, #3
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	4093      	lsls	r3, r2
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004460:	4935      	ldr	r1, [pc, #212]	; (8004538 <HAL_GPIO_Init+0x328>)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	3302      	adds	r3, #2
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_GPIO_Init+0x354>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <HAL_GPIO_Init+0x354>)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_GPIO_Init+0x354>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044c2:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044e6:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <HAL_GPIO_Init+0x354>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	f67f ae86 	bls.w	8004230 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3724      	adds	r7, #36	; 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	40013800 	.word	0x40013800
 800453c:	40020000 	.word	0x40020000
 8004540:	40020400 	.word	0x40020400
 8004544:	40020800 	.word	0x40020800
 8004548:	40020c00 	.word	0x40020c00
 800454c:	40021000 	.word	0x40021000
 8004550:	40021400 	.word	0x40021400
 8004554:	40021800 	.word	0x40021800
 8004558:	40021c00 	.word	0x40021c00
 800455c:	40022000 	.word	0x40022000
 8004560:	40022400 	.word	0x40022400
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
 8004574:	4613      	mov	r3, r2
 8004576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004578:	787b      	ldrb	r3, [r7, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004584:	e003      	b.n	800458e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045b2:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f806 	bl	80045cc <HAL_GPIO_EXTI_Callback>
  }
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40013c00 	.word	0x40013c00

080045cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fc74 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004634:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004644:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	e006      	b.n	800466c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800466a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d104      	bne.n	800467e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800467c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_I2C_Init+0x11c>)
 800468a:	430b      	orrs	r3, r1
 800468c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	02008000 	.word	0x02008000

08004704 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	4798      	blx	r3
  }
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	09db      	lsrs	r3, r3, #7
 8004760:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	0a9b      	lsrs	r3, r3, #10
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0208 	orr.w	r2, r3, #8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f043 0202 	orr.w	r2, r3, #2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 030b 	and.w	r3, r3, #11
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb89 	bl	8004f04 <I2C_ITError>
  }
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	70fb      	strb	r3, [r7, #3]
 800482e:	4613      	mov	r3, r2
 8004830:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <I2C_Slave_ISR_IT+0x24>
 800489a:	2302      	movs	r3, #2
 800489c:	e0ec      	b.n	8004a78 <I2C_Slave_ISR_IT+0x1fe>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f9bf 	bl	8004c44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d04d      	beq.n	800496e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d047      	beq.n	800496e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d128      	bne.n	800493a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b28      	cmp	r3, #40	; 0x28
 80048f2:	d108      	bne.n	8004906 <I2C_Slave_ISR_IT+0x8c>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048fa:	d104      	bne.n	8004906 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80048fc:	6939      	ldr	r1, [r7, #16]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 faaa 	bl	8004e58 <I2C_ITListenCplt>
 8004904:	e032      	b.n	800496c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b29      	cmp	r3, #41	; 0x29
 8004910:	d10e      	bne.n	8004930 <I2C_Slave_ISR_IT+0xb6>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004918:	d00a      	beq.n	8004930 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2210      	movs	r2, #16
 8004920:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fbe5 	bl	80050f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f92d 	bl	8004b88 <I2C_ITSlaveSeqCplt>
 800492e:	e01d      	b.n	800496c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2210      	movs	r2, #16
 8004936:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004938:	e096      	b.n	8004a68 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2210      	movs	r2, #16
 8004940:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <I2C_Slave_ISR_IT+0xe4>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800495a:	f040 8085 	bne.w	8004a68 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	4619      	mov	r1, r3
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 facd 	bl	8004f04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800496a:	e07d      	b.n	8004a68 <I2C_Slave_ISR_IT+0x1ee>
 800496c:	e07c      	b.n	8004a68 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	089b      	lsrs	r3, r3, #2
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d030      	beq.n	80049dc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02a      	beq.n	80049dc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d018      	beq.n	80049c2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d14f      	bne.n	8004a6c <I2C_Slave_ISR_IT+0x1f2>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d2:	d04b      	beq.n	8004a6c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f8d7 	bl	8004b88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80049da:	e047      	b.n	8004a6c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	08db      	lsrs	r3, r3, #3
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80049f4:	6939      	ldr	r1, [r7, #16]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f842 	bl	8004a80 <I2C_ITAddrCplt>
 80049fc:	e037      	b.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d031      	beq.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02b      	beq.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d018      	beq.n	8004a52 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a50:	e00d      	b.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a58:	d002      	beq.n	8004a60 <I2C_Slave_ISR_IT+0x1e6>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f891 	bl	8004b88 <I2C_ITSlaveSeqCplt>
 8004a66:	e002      	b.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004a6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a96:	2b28      	cmp	r3, #40	; 0x28
 8004a98:	d16a      	bne.n	8004b70 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ab8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ad4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d138      	bne.n	8004b50 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004ade:	897b      	ldrh	r3, [r7, #10]
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	89bb      	ldrh	r3, [r7, #12]
 8004ae6:	4053      	eors	r3, r2
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f003 0306 	and.w	r3, r3, #6
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11c      	bne.n	8004b2c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d13b      	bne.n	8004b80 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2208      	movs	r2, #8
 8004b14:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b1e:	89ba      	ldrh	r2, [r7, #12]
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe7c 	bl	8004822 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b2a:	e029      	b.n	8004b80 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b2c:	893b      	ldrh	r3, [r7, #8]
 8004b2e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fb1e 	bl	8005176 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b42:	89ba      	ldrh	r2, [r7, #12]
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fe6a 	bl	8004822 <HAL_I2C_AddrCallback>
}
 8004b4e:	e017      	b.n	8004b80 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fb0e 	bl	8005176 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b62:	89ba      	ldrh	r2, [r7, #12]
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff fe5a 	bl	8004822 <HAL_I2C_AddrCallback>
}
 8004b6e:	e007      	b.n	8004b80 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2208      	movs	r2, #8
 8004b76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	0b9b      	lsrs	r3, r3, #14
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e00d      	b.n	8004bda <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0bdb      	lsrs	r3, r3, #15
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b29      	cmp	r3, #41	; 0x29
 8004be4:	d112      	bne.n	8004c0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2228      	movs	r2, #40	; 0x28
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2221      	movs	r2, #33	; 0x21
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fabd 	bl	8005176 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fdf8 	bl	80047fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c0a:	e017      	b.n	8004c3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b2a      	cmp	r3, #42	; 0x2a
 8004c16:	d111      	bne.n	8004c3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2228      	movs	r2, #40	; 0x28
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2222      	movs	r2, #34	; 0x22
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c26:	2102      	movs	r1, #2
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 faa4 	bl	8005176 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fde9 	bl	800480e <HAL_I2C_SlaveRxCpltCallback>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2220      	movs	r2, #32
 8004c68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b21      	cmp	r3, #33	; 0x21
 8004c6e:	d002      	beq.n	8004c76 <I2C_ITSlaveCplt+0x32>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b29      	cmp	r3, #41	; 0x29
 8004c74:	d108      	bne.n	8004c88 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c76:	f248 0101 	movw	r1, #32769	; 0x8001
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa7b 	bl	8005176 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2221      	movs	r2, #33	; 0x21
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
 8004c86:	e00d      	b.n	8004ca4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b22      	cmp	r3, #34	; 0x22
 8004c8c:	d002      	beq.n	8004c94 <I2C_ITSlaveCplt+0x50>
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b2a      	cmp	r3, #42	; 0x2a
 8004c92:	d107      	bne.n	8004ca4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c94:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fa6c 	bl	8005176 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2222      	movs	r2, #34	; 0x22
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b64      	ldr	r3, [pc, #400]	; (8004e50 <I2C_ITSlaveCplt+0x20c>)
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa14 	bl	80050f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	0b9b      	lsrs	r3, r3, #14
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d013      	beq.n	8004cfe <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ce4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cfc:	e018      	b.n	8004d30 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	0bdb      	lsrs	r3, r3, #15
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d012      	beq.n	8004d30 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 0304 	bic.w	r3, r3, #4
 8004d42:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8a7 	bl	8004f04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b28      	cmp	r3, #40	; 0x28
 8004dc0:	d141      	bne.n	8004e46 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f847 	bl	8004e58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dca:	e03c      	b.n	8004e46 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dd4:	d014      	beq.n	8004e00 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff fed6 	bl	8004b88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <I2C_ITSlaveCplt+0x210>)
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fd20 	bl	800483e <HAL_I2C_ListenCpltCallback>
}
 8004dfe:	e022      	b.n	8004e46 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b22      	cmp	r3, #34	; 0x22
 8004e0a:	d10e      	bne.n	8004e2a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fcf3 	bl	800480e <HAL_I2C_SlaveRxCpltCallback>
}
 8004e28:	e00d      	b.n	8004e46 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fcda 	bl	80047fa <HAL_I2C_SlaveTxCpltCallback>
}
 8004e46:	bf00      	nop
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	fe00e800 	.word	0xfe00e800
 8004e54:	ffff0000 	.word	0xffff0000

08004e58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <I2C_ITListenCplt+0xa8>)
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d022      	beq.n	8004ed6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d012      	beq.n	8004ed6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	f043 0204 	orr.w	r2, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ed6:	f248 0103 	movw	r1, #32771	; 0x8003
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f94b 	bl	8005176 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fca4 	bl	800483e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	ffff0000 	.word	0xffff0000

08004f04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <I2C_ITError+0x194>)
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b28      	cmp	r3, #40	; 0x28
 8004f3a:	d005      	beq.n	8004f48 <I2C_ITError+0x44>
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b29      	cmp	r3, #41	; 0x29
 8004f40:	d002      	beq.n	8004f48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b2a      	cmp	r3, #42	; 0x2a
 8004f46:	d10b      	bne.n	8004f60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f48:	2103      	movs	r1, #3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f913 	bl	8005176 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2228      	movs	r2, #40	; 0x28
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a50      	ldr	r2, [pc, #320]	; (800509c <I2C_ITError+0x198>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5e:	e011      	b.n	8004f84 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f60:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f906 	bl	8005176 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b60      	cmp	r3, #96	; 0x60
 8004f74:	d003      	beq.n	8004f7e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d039      	beq.n	8005006 <I2C_ITError+0x102>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b11      	cmp	r3, #17
 8004f96:	d002      	beq.n	8004f9e <I2C_ITError+0x9a>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b21      	cmp	r3, #33	; 0x21
 8004f9c:	d133      	bne.n	8005006 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fac:	d107      	bne.n	8004fbe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fbc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd fe7e 	bl	8002cc4 <HAL_DMA_GetState>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d017      	beq.n	8004ffe <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	4a33      	ldr	r2, [pc, #204]	; (80050a0 <I2C_ITError+0x19c>)
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd fcc2 	bl	800296c <HAL_DMA_Abort_IT>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04d      	beq.n	800508a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ffc:	e045      	b.n	800508a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f850 	bl	80050a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005004:	e041      	b.n	800508a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d039      	beq.n	8005082 <I2C_ITError+0x17e>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b12      	cmp	r3, #18
 8005012:	d002      	beq.n	800501a <I2C_ITError+0x116>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b22      	cmp	r3, #34	; 0x22
 8005018:	d133      	bne.n	8005082 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005028:	d107      	bne.n	800503a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005038:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fe40 	bl	8002cc4 <HAL_DMA_GetState>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d017      	beq.n	800507a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <I2C_ITError+0x19c>)
 8005050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fc84 	bl	800296c <HAL_DMA_Abort_IT>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d011      	beq.n	800508e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005074:	4610      	mov	r0, r2
 8005076:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005078:	e009      	b.n	800508e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f812 	bl	80050a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005080:	e005      	b.n	800508e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f80e 	bl	80050a4 <I2C_TreatErrorCallback>
  }
}
 8005088:	e002      	b.n	8005090 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800508e:	bf00      	nop
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	ffff0000 	.word	0xffff0000
 800509c:	0800487b 	.word	0x0800487b
 80050a0:	0800513b 	.word	0x0800513b

080050a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b60      	cmp	r3, #96	; 0x60
 80050b6:	d10e      	bne.n	80050d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff fbc9 	bl	8004866 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050d4:	e009      	b.n	80050ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fbb4 	bl	8004852 <HAL_I2C_ErrorCallback>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d103      	bne.n	8005110 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2200      	movs	r2, #0
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d007      	beq.n	800512e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	619a      	str	r2, [r3, #24]
  }
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2200      	movs	r2, #0
 8005156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	2200      	movs	r2, #0
 8005166:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff ff9b 	bl	80050a4 <I2C_TreatErrorCallback>
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005186:	887b      	ldrh	r3, [r7, #2]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00f      	beq.n	80051b0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005196:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a4:	2b28      	cmp	r3, #40	; 0x28
 80051a6:	d003      	beq.n	80051b0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80051ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051b0:	887b      	ldrh	r3, [r7, #2]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00f      	beq.n	80051da <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80051c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051ce:	2b28      	cmp	r3, #40	; 0x28
 80051d0:	d003      	beq.n	80051da <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80051d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da03      	bge.n	80051ea <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d103      	bne.n	80051f8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d103      	bne.n	8005206 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f043 0320 	orr.w	r3, r3, #32
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d103      	bne.n	8005214 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005212:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	43da      	mvns	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	400a      	ands	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b20      	cmp	r3, #32
 8005246:	d138      	bne.n	80052ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005252:	2302      	movs	r3, #2
 8005254:	e032      	b.n	80052bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	; 0x24
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005284:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6819      	ldr	r1, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e000      	b.n	80052bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
  }
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d139      	bne.n	8005352 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e033      	b.n	8005354 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	; 0x24
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800531a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b08f      	sub	sp, #60	; 0x3c
 8005364:	af0a      	add	r7, sp, #40	; 0x28
 8005366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e116      	b.n	80055a0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fc f951 	bl	8001634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f003 f993 	bl	80086dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	687e      	ldr	r6, [r7, #4]
 80053be:	466d      	mov	r5, sp
 80053c0:	f106 0410 	add.w	r4, r6, #16
 80053c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80053d4:	1d33      	adds	r3, r6, #4
 80053d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d8:	6838      	ldr	r0, [r7, #0]
 80053da:	f003 f927 	bl	800862c <USB_CoreInit>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0d7      	b.n	80055a0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f003 f981 	bl	80086fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fc:	2300      	movs	r3, #0
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e04a      	b.n	8005498 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005402:	7bfa      	ldrb	r2, [r7, #15]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	333d      	adds	r3, #61	; 0x3d
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	333c      	adds	r3, #60	; 0x3c
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800542a:	7bfa      	ldrb	r2, [r7, #15]
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	b298      	uxth	r0, r3
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3344      	adds	r3, #68	; 0x44
 800543e:	4602      	mov	r2, r0
 8005440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005442:	7bfa      	ldrb	r2, [r7, #15]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	3340      	adds	r3, #64	; 0x40
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005456:	7bfa      	ldrb	r2, [r7, #15]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	3348      	adds	r3, #72	; 0x48
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	334c      	adds	r3, #76	; 0x4c
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800547e:	7bfa      	ldrb	r2, [r7, #15]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	3354      	adds	r3, #84	; 0x54
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	3301      	adds	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d3af      	bcc.n	8005402 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
 80054a6:	e044      	b.n	8005532 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054a8:	7bfa      	ldrb	r2, [r7, #15]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054d4:	7bfa      	ldrb	r2, [r7, #15]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054ea:	7bfa      	ldrb	r2, [r7, #15]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005500:	7bfa      	ldrb	r2, [r7, #15]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	3301      	adds	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	7bfa      	ldrb	r2, [r7, #15]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3b5      	bcc.n	80054a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	687e      	ldr	r6, [r7, #4]
 8005544:	466d      	mov	r5, sp
 8005546:	f106 0410 	add.w	r4, r6, #16
 800554a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800554c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800554e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005556:	e885 0003 	stmia.w	r5, {r0, r1}
 800555a:	1d33      	adds	r3, r6, #4
 800555c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800555e:	6838      	ldr	r0, [r7, #0]
 8005560:	f003 f91a 	bl	8008798 <USB_DevInit>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e014      	b.n	80055a0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f80a 	bl	80055a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f003 fad8 	bl	8008b4e <USB_DevDisconnect>

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_PCDEx_ActivateLPM+0x44>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	10000003 	.word	0x10000003

080055f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a04      	ldr	r2, [pc, #16]	; (800560c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fe:	6013      	str	r3, [r2, #0]
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40007000 	.word	0x40007000

08005610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005618:	2300      	movs	r3, #0
 800561a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e291      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8087 	beq.w	8005742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005634:	4b96      	ldr	r3, [pc, #600]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b04      	cmp	r3, #4
 800563e:	d00c      	beq.n	800565a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005640:	4b93      	ldr	r3, [pc, #588]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b08      	cmp	r3, #8
 800564a:	d112      	bne.n	8005672 <HAL_RCC_OscConfig+0x62>
 800564c:	4b90      	ldr	r3, [pc, #576]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005658:	d10b      	bne.n	8005672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565a:	4b8d      	ldr	r3, [pc, #564]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d06c      	beq.n	8005740 <HAL_RCC_OscConfig+0x130>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d168      	bne.n	8005740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e26b      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567a:	d106      	bne.n	800568a <HAL_RCC_OscConfig+0x7a>
 800567c:	4b84      	ldr	r3, [pc, #528]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a83      	ldr	r2, [pc, #524]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	e02e      	b.n	80056e8 <HAL_RCC_OscConfig+0xd8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0x9c>
 8005692:	4b7f      	ldr	r3, [pc, #508]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a7e      	ldr	r2, [pc, #504]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b7c      	ldr	r3, [pc, #496]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7b      	ldr	r2, [pc, #492]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e01d      	b.n	80056e8 <HAL_RCC_OscConfig+0xd8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCC_OscConfig+0xc0>
 80056b6:	4b76      	ldr	r3, [pc, #472]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a75      	ldr	r2, [pc, #468]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b73      	ldr	r3, [pc, #460]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a72      	ldr	r2, [pc, #456]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e00b      	b.n	80056e8 <HAL_RCC_OscConfig+0xd8>
 80056d0:	4b6f      	ldr	r3, [pc, #444]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	4b6c      	ldr	r3, [pc, #432]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a6b      	ldr	r2, [pc, #428]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80056e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d013      	beq.n	8005718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fc fb6a 	bl	8001dc8 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fc fb66 	bl	8001dc8 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	; 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e21f      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570a:	4b61      	ldr	r3, [pc, #388]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0xe8>
 8005716:	e014      	b.n	8005742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fc fb56 	bl	8001dc8 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fc fb52 	bl	8001dc8 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e20b      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005732:	4b57      	ldr	r3, [pc, #348]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x110>
 800573e:	e000      	b.n	8005742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d069      	beq.n	8005822 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800574e:	4b50      	ldr	r3, [pc, #320]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575a:	4b4d      	ldr	r3, [pc, #308]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b08      	cmp	r3, #8
 8005764:	d11c      	bne.n	80057a0 <HAL_RCC_OscConfig+0x190>
 8005766:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d116      	bne.n	80057a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_RCC_OscConfig+0x17a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d001      	beq.n	800578a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e1df      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	493d      	ldr	r1, [pc, #244]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579e:	e040      	b.n	8005822 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d023      	beq.n	80057f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057a8:	4b39      	ldr	r3, [pc, #228]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a38      	ldr	r2, [pc, #224]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fc fb08 	bl	8001dc8 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057bc:	f7fc fb04 	bl	8001dc8 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e1bd      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ce:	4b30      	ldr	r3, [pc, #192]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057da:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4929      	ldr	r1, [pc, #164]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
 80057ee:	e018      	b.n	8005822 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f0:	4b27      	ldr	r3, [pc, #156]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a26      	ldr	r2, [pc, #152]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fc fae4 	bl	8001dc8 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005804:	f7fc fae0 	bl	8001dc8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e199      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005816:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d038      	beq.n	80058a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d019      	beq.n	800586a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005836:	4b16      	ldr	r3, [pc, #88]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583a:	4a15      	ldr	r2, [pc, #84]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005842:	f7fc fac1 	bl	8001dc8 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800584a:	f7fc fabd 	bl	8001dc8 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e176      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800585e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f0      	beq.n	800584a <HAL_RCC_OscConfig+0x23a>
 8005868:	e01a      	b.n	80058a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800586a:	4b09      	ldr	r3, [pc, #36]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 800586c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586e:	4a08      	ldr	r2, [pc, #32]	; (8005890 <HAL_RCC_OscConfig+0x280>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc faa7 	bl	8001dc8 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800587e:	f7fc faa3 	bl	8001dc8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d903      	bls.n	8005894 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e15c      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
 8005890:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005894:	4b91      	ldr	r3, [pc, #580]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1ee      	bne.n	800587e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80a4 	beq.w	80059f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ae:	4b8b      	ldr	r3, [pc, #556]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10d      	bne.n	80058d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b88      	ldr	r3, [pc, #544]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a87      	ldr	r2, [pc, #540]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b85      	ldr	r3, [pc, #532]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d6:	4b82      	ldr	r3, [pc, #520]	; (8005ae0 <HAL_RCC_OscConfig+0x4d0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d118      	bne.n	8005914 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <HAL_RCC_OscConfig+0x4d0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a7e      	ldr	r2, [pc, #504]	; (8005ae0 <HAL_RCC_OscConfig+0x4d0>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ee:	f7fc fa6b 	bl	8001dc8 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f6:	f7fc fa67 	bl	8001dc8 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b64      	cmp	r3, #100	; 0x64
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e120      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005908:	4b75      	ldr	r3, [pc, #468]	; (8005ae0 <HAL_RCC_OscConfig+0x4d0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <HAL_RCC_OscConfig+0x31a>
 800591c:	4b6f      	ldr	r3, [pc, #444]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	4a6e      	ldr	r2, [pc, #440]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6713      	str	r3, [r2, #112]	; 0x70
 8005928:	e02d      	b.n	8005986 <HAL_RCC_OscConfig+0x376>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10c      	bne.n	800594c <HAL_RCC_OscConfig+0x33c>
 8005932:	4b6a      	ldr	r3, [pc, #424]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a69      	ldr	r2, [pc, #420]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
 800593e:	4b67      	ldr	r3, [pc, #412]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	4a66      	ldr	r2, [pc, #408]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6713      	str	r3, [r2, #112]	; 0x70
 800594a:	e01c      	b.n	8005986 <HAL_RCC_OscConfig+0x376>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2b05      	cmp	r3, #5
 8005952:	d10c      	bne.n	800596e <HAL_RCC_OscConfig+0x35e>
 8005954:	4b61      	ldr	r3, [pc, #388]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	4a60      	ldr	r2, [pc, #384]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 800595a:	f043 0304 	orr.w	r3, r3, #4
 800595e:	6713      	str	r3, [r2, #112]	; 0x70
 8005960:	4b5e      	ldr	r3, [pc, #376]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	4a5d      	ldr	r2, [pc, #372]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6713      	str	r3, [r2, #112]	; 0x70
 800596c:	e00b      	b.n	8005986 <HAL_RCC_OscConfig+0x376>
 800596e:	4b5b      	ldr	r3, [pc, #364]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	4a5a      	ldr	r2, [pc, #360]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	6713      	str	r3, [r2, #112]	; 0x70
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	4a57      	ldr	r2, [pc, #348]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d015      	beq.n	80059ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7fc fa1b 	bl	8001dc8 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fc fa17 	bl	8001dc8 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0ce      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ac:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ee      	beq.n	8005996 <HAL_RCC_OscConfig+0x386>
 80059b8:	e014      	b.n	80059e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fc fa05 	bl	8001dc8 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fc fa01 	bl	8001dc8 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0b8      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d8:	4b40      	ldr	r3, [pc, #256]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ee      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ea:	4b3c      	ldr	r3, [pc, #240]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 80059f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80a4 	beq.w	8005b48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a00:	4b36      	ldr	r3, [pc, #216]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d06b      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d149      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a14:	4b31      	ldr	r3, [pc, #196]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a30      	ldr	r2, [pc, #192]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fc f9d2 	bl	8001dc8 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fc f9ce 	bl	8001dc8 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e087      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3a:	4b28      	ldr	r3, [pc, #160]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69da      	ldr	r2, [r3, #28]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	019b      	lsls	r3, r3, #6
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	061b      	lsls	r3, r3, #24
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a18      	ldr	r2, [pc, #96]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fc f9a2 	bl	8001dc8 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a88:	f7fc f99e 	bl	8001dc8 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e057      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0x478>
 8005aa6:	e04f      	b.n	8005b48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fc f988 	bl	8001dc8 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fc f984 	bl	8001dc8 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e03d      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_OscConfig+0x4cc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0x4ac>
 8005ada:	e035      	b.n	8005b48 <HAL_RCC_OscConfig+0x538>
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_RCC_OscConfig+0x544>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d028      	beq.n	8005b44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d121      	bne.n	8005b44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d11a      	bne.n	8005b44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b14:	4013      	ands	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d111      	bne.n	8005b44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800

08005b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d0      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b6a      	ldr	r3, [pc, #424]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d910      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 020f 	bic.w	r2, r3, #15
 8005b86:	4965      	ldr	r1, [pc, #404]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b63      	ldr	r3, [pc, #396]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0b8      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb8:	4b59      	ldr	r3, [pc, #356]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a58      	ldr	r2, [pc, #352]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd0:	4b53      	ldr	r3, [pc, #332]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	494d      	ldr	r1, [pc, #308]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d040      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d115      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e073      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4936      	ldr	r1, [pc, #216]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4c:	f7fc f8bc 	bl	8001dc8 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fc f8b8 	bl	8001dc8 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e053      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d210      	bcs.n	8005cac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 020f 	bic.w	r2, r3, #15
 8005c92:	4922      	ldr	r1, [pc, #136]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e032      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4916      	ldr	r1, [pc, #88]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	490e      	ldr	r1, [pc, #56]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cea:	f000 f821 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490a      	ldr	r1, [pc, #40]	; (8005d24 <HAL_RCC_ClockConfig+0x1cc>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <HAL_RCC_ClockConfig+0x1d0>)
 8005d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_RCC_ClockConfig+0x1d4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fc f818 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40023c00 	.word	0x40023c00
 8005d20:	40023800 	.word	0x40023800
 8005d24:	08017b44 	.word	0x08017b44
 8005d28:	20000000 	.word	0x20000000
 8005d2c:	20000004 	.word	0x20000004

08005d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b094      	sub	sp, #80	; 0x50
 8005d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d40:	2300      	movs	r3, #0
 8005d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d48:	4b79      	ldr	r3, [pc, #484]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d00d      	beq.n	8005d70 <HAL_RCC_GetSysClockFreq+0x40>
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	f200 80e1 	bhi.w	8005f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_RCC_GetSysClockFreq+0x34>
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d003      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d62:	e0db      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d64:	4b73      	ldr	r3, [pc, #460]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d68:	e0db      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d6a:	4b73      	ldr	r3, [pc, #460]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6e:	e0d8      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d70:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d063      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d86:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	099b      	lsrs	r3, r3, #6
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f04f 0000 	mov.w	r0, #0
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	0159      	lsls	r1, r3, #5
 8005db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db4:	0150      	lsls	r0, r2, #5
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4621      	mov	r1, r4
 8005dbc:	1a51      	subs	r1, r2, r1
 8005dbe:	6139      	str	r1, [r7, #16]
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	018b      	lsls	r3, r1, #6
 8005dd8:	4651      	mov	r1, sl
 8005dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dde:	4651      	mov	r1, sl
 8005de0:	018a      	lsls	r2, r1, #6
 8005de2:	4651      	mov	r1, sl
 8005de4:	ebb2 0801 	subs.w	r8, r2, r1
 8005de8:	4659      	mov	r1, fp
 8005dea:	eb63 0901 	sbc.w	r9, r3, r1
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e02:	4690      	mov	r8, r2
 8005e04:	4699      	mov	r9, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	eb18 0303 	adds.w	r3, r8, r3
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	eb49 0303 	adc.w	r3, r9, r3
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e22:	4629      	mov	r1, r5
 8005e24:	024b      	lsls	r3, r1, #9
 8005e26:	4621      	mov	r1, r4
 8005e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	024a      	lsls	r2, r1, #9
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	2200      	movs	r2, #0
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e40:	f7fa fa36 	bl	80002b0 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	e058      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	2200      	movs	r2, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	4611      	mov	r1, r2
 8005e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e5e:	623b      	str	r3, [r7, #32]
 8005e60:	2300      	movs	r3, #0
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	f04f 0000 	mov.w	r0, #0
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	0159      	lsls	r1, r3, #5
 8005e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e7a:	0150      	lsls	r0, r2, #5
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4641      	mov	r1, r8
 8005e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e86:	4649      	mov	r1, r9
 8005e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	00eb      	lsls	r3, r5, #3
 8005eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb6:	00e2      	lsls	r2, r4, #3
 8005eb8:	4614      	mov	r4, r2
 8005eba:	461d      	mov	r5, r3
 8005ebc:	4643      	mov	r3, r8
 8005ebe:	18e3      	adds	r3, r4, r3
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	eb45 0303 	adc.w	r3, r5, r3
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	028b      	lsls	r3, r1, #10
 8005eda:	4621      	mov	r1, r4
 8005edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	028a      	lsls	r2, r1, #10
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eea:	2200      	movs	r2, #0
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	61fa      	str	r2, [r7, #28]
 8005ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef4:	f7fa f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4613      	mov	r3, r2
 8005efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f1a:	e002      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3750      	adds	r7, #80	; 0x50
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	007a1200 	.word	0x007a1200

08005f3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f42:	681b      	ldr	r3, [r3, #0]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000000 	.word	0x20000000

08005f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f58:	f7ff fff0 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	0a9b      	lsrs	r3, r3, #10
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	4903      	ldr	r1, [pc, #12]	; (8005f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40023800 	.word	0x40023800
 8005f78:	08017b54 	.word	0x08017b54

08005f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f80:	f7ff ffdc 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8005f84:	4602      	mov	r2, r0
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	0b5b      	lsrs	r3, r3, #13
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	4903      	ldr	r1, [pc, #12]	; (8005fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f92:	5ccb      	ldrb	r3, [r1, r3]
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	08017b54 	.word	0x08017b54

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fcc:	4b69      	ldr	r3, [pc, #420]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a68      	ldr	r2, [pc, #416]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005fd6:	6093      	str	r3, [r2, #8]
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	4964      	ldr	r1, [pc, #400]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d017      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ffe:	4b5d      	ldr	r3, [pc, #372]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	4959      	ldr	r1, [pc, #356]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601c:	d101      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d017      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800603a:	4b4e      	ldr	r3, [pc, #312]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	494a      	ldr	r1, [pc, #296]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006058:	d101      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800605a:	2301      	movs	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006066:	2301      	movs	r3, #1
 8006068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 808b 	beq.w	800619e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b3a      	ldr	r3, [pc, #232]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	4a39      	ldr	r2, [pc, #228]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	6413      	str	r3, [r2, #64]	; 0x40
 8006094:	4b37      	ldr	r3, [pc, #220]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060a0:	4b35      	ldr	r3, [pc, #212]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a34      	ldr	r2, [pc, #208]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ac:	f7fb fe8c 	bl	8001dc8 <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b4:	f7fb fe88 	bl	8001dc8 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e357      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060c6:	4b2c      	ldr	r3, [pc, #176]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060d2:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d035      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d02e      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060f0:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060fa:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006106:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d114      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fb fe50 	bl	8001dc8 <HAL_GetTick>
 8006128:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612a:	e00a      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fb fe4c 	bl	8001dc8 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	; 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e319      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ee      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d111      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800616a:	400b      	ands	r3, r1
 800616c:	4901      	ldr	r1, [pc, #4]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
 8006172:	e00b      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006174:	40023800 	.word	0x40023800
 8006178:	40007000 	.word	0x40007000
 800617c:	0ffffcff 	.word	0x0ffffcff
 8006180:	4baa      	ldr	r3, [pc, #680]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4aa9      	ldr	r2, [pc, #676]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006186:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800618a:	6093      	str	r3, [r2, #8]
 800618c:	4ba7      	ldr	r3, [pc, #668]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800618e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	49a4      	ldr	r1, [pc, #656]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800619a:	4313      	orrs	r3, r2
 800619c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061aa:	4ba0      	ldr	r3, [pc, #640]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b0:	4a9e      	ldr	r2, [pc, #632]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061ba:	4b9c      	ldr	r3, [pc, #624]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	4999      	ldr	r1, [pc, #612]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061d8:	4b94      	ldr	r3, [pc, #592]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e6:	4991      	ldr	r1, [pc, #580]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061fa:	4b8c      	ldr	r3, [pc, #560]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006208:	4988      	ldr	r1, [pc, #544]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800621c:	4b83      	ldr	r3, [pc, #524]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622a:	4980      	ldr	r1, [pc, #512]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800623e:	4b7b      	ldr	r3, [pc, #492]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	4977      	ldr	r1, [pc, #476]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006260:	4b72      	ldr	r3, [pc, #456]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f023 0203 	bic.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	496f      	ldr	r1, [pc, #444]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006282:	4b6a      	ldr	r3, [pc, #424]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f023 020c 	bic.w	r2, r3, #12
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006290:	4966      	ldr	r1, [pc, #408]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a4:	4b61      	ldr	r3, [pc, #388]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	495e      	ldr	r1, [pc, #376]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c6:	4b59      	ldr	r3, [pc, #356]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	4955      	ldr	r1, [pc, #340]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062e8:	4b50      	ldr	r3, [pc, #320]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	494d      	ldr	r1, [pc, #308]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800630a:	4b48      	ldr	r3, [pc, #288]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	4944      	ldr	r1, [pc, #272]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800632c:	4b3f      	ldr	r3, [pc, #252]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633a:	493c      	ldr	r1, [pc, #240]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800634e:	4b37      	ldr	r3, [pc, #220]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635c:	4933      	ldr	r1, [pc, #204]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006370:	4b2e      	ldr	r3, [pc, #184]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800637e:	492b      	ldr	r1, [pc, #172]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006392:	4b26      	ldr	r3, [pc, #152]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a0:	4922      	ldr	r1, [pc, #136]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b0:	d101      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b16      	ldr	r3, [pc, #88]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e0:	4912      	ldr	r1, [pc, #72]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006404:	4909      	ldr	r1, [pc, #36]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d006      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 80d9 	beq.w	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006420:	4b02      	ldr	r3, [pc, #8]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a01      	ldr	r2, [pc, #4]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006426:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800642a:	e001      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800642c:	40023800 	.word	0x40023800
 8006430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006432:	f7fb fcc9 	bl	8001dc8 <HAL_GetTick>
 8006436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006438:	e008      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800643a:	f7fb fcc5 	bl	8001dc8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b64      	cmp	r3, #100	; 0x64
 8006446:	d901      	bls.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e194      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800644c:	4b6c      	ldr	r3, [pc, #432]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f0      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d021      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11d      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800646c:	4b64      	ldr	r3, [pc, #400]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800646e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800647a:	4b61      	ldr	r3, [pc, #388]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006480:	0e1b      	lsrs	r3, r3, #24
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	019a      	lsls	r2, r3, #6
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	431a      	orrs	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	061b      	lsls	r3, r3, #24
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	071b      	lsls	r3, r3, #28
 80064a0:	4957      	ldr	r1, [pc, #348]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d02e      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d2:	d129      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064d4:	4b4a      	ldr	r3, [pc, #296]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064e2:	4b47      	ldr	r3, [pc, #284]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e8:	0f1b      	lsrs	r3, r3, #28
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	019a      	lsls	r2, r3, #6
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	061b      	lsls	r3, r3, #24
 8006502:	431a      	orrs	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	071b      	lsls	r3, r3, #28
 8006508:	493d      	ldr	r1, [pc, #244]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006510:	4b3b      	ldr	r3, [pc, #236]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006516:	f023 021f 	bic.w	r2, r3, #31
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	3b01      	subs	r3, #1
 8006520:	4937      	ldr	r1, [pc, #220]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01d      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006534:	4b32      	ldr	r3, [pc, #200]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653a:	0e1b      	lsrs	r3, r3, #24
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006542:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006548:	0f1b      	lsrs	r3, r3, #28
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	019a      	lsls	r2, r3, #6
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	431a      	orrs	r2, r3
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	061b      	lsls	r3, r3, #24
 8006562:	431a      	orrs	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	071b      	lsls	r3, r3, #28
 8006568:	4925      	ldr	r1, [pc, #148]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d011      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	019a      	lsls	r2, r3, #6
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	061b      	lsls	r3, r3, #24
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	071b      	lsls	r3, r3, #28
 8006598:	4919      	ldr	r1, [pc, #100]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ac:	f7fb fc0c 	bl	8001dc8 <HAL_GetTick>
 80065b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065b4:	f7fb fc08 	bl	8001dc8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b64      	cmp	r3, #100	; 0x64
 80065c0:	d901      	bls.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e0d7      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	f040 80cd 	bne.w	8006774 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a08      	ldr	r2, [pc, #32]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e6:	f7fb fbef 	bl	8001dc8 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ec:	e00a      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065ee:	f7fb fbeb 	bl	8001dc8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b64      	cmp	r3, #100	; 0x64
 80065fa:	d903      	bls.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0ba      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006600:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006604:	4b5e      	ldr	r3, [pc, #376]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800660c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006610:	d0ed      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02e      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d12a      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800663a:	4b51      	ldr	r3, [pc, #324]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006648:	4b4d      	ldr	r3, [pc, #308]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	0f1b      	lsrs	r3, r3, #28
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	019a      	lsls	r2, r3, #6
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	061b      	lsls	r3, r3, #24
 8006668:	431a      	orrs	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	071b      	lsls	r3, r3, #28
 800666e:	4944      	ldr	r1, [pc, #272]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006676:	4b42      	ldr	r3, [pc, #264]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800667c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	3b01      	subs	r3, #1
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	493d      	ldr	r1, [pc, #244]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d022      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a4:	d11d      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066a6:	4b36      	ldr	r3, [pc, #216]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066b4:	4b32      	ldr	r3, [pc, #200]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	0f1b      	lsrs	r3, r3, #28
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	019a      	lsls	r2, r3, #6
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	431a      	orrs	r2, r3
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	071b      	lsls	r3, r3, #28
 80066da:	4929      	ldr	r1, [pc, #164]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d028      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066ee:	4b24      	ldr	r3, [pc, #144]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	019a      	lsls	r2, r3, #6
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	431a      	orrs	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	061b      	lsls	r3, r3, #24
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	071b      	lsls	r3, r3, #28
 8006722:	4917      	ldr	r1, [pc, #92]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800672c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	4911      	ldr	r1, [pc, #68]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006740:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0e      	ldr	r2, [pc, #56]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674c:	f7fb fb3c 	bl	8001dc8 <HAL_GetTick>
 8006750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006754:	f7fb fb38 	bl	8001dc8 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e007      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800676e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006772:	d1ef      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40023800 	.word	0x40023800

08006784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e09d      	b.n	80068d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d108      	bne.n	80067b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a6:	d009      	beq.n	80067bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	e005      	b.n	80067bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fa fd22 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067fc:	d902      	bls.n	8006804 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e002      	b.n	800680a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006808:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006812:	d007      	beq.n	8006824 <HAL_SPI_Init+0xa0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800681c:	d002      	beq.n	8006824 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	ea42 0103 	orr.w	r1, r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	f003 0204 	and.w	r2, r3, #4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068a0:	ea42 0103 	orr.w	r1, r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	099b      	lsrs	r3, r3, #6
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10f      	bne.n	8006920 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	099b      	lsrs	r3, r3, #6
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
    return;
 800691e:	e0d7      	b.n	8006ad0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <HAL_SPI_IRQHandler+0x66>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
    return;
 8006940:	e0c6      	b.n	8006ad0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <HAL_SPI_IRQHandler+0x8c>
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	099b      	lsrs	r3, r3, #6
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80b4 	beq.w	8006ad0 <HAL_SPI_IRQHandler+0x1f4>
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80ad 	beq.w	8006ad0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	099b      	lsrs	r3, r3, #6
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d023      	beq.n	80069ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b03      	cmp	r3, #3
 800698c:	d011      	beq.n	80069b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006992:	f043 0204 	orr.w	r2, r3, #4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	e00b      	b.n	80069ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	693b      	ldr	r3, [r7, #16]
        return;
 80069c8:	e082      	b.n	8006ad0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d014      	beq.n	8006a00 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069da:	f043 0201 	orr.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00c      	beq.n	8006a26 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a10:	f043 0208 	orr.w	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60bb      	str	r3, [r7, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	60bb      	str	r3, [r7, #8]
 8006a24:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d04f      	beq.n	8006ace <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <HAL_SPI_IRQHandler+0x17e>
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d034      	beq.n	8006ac4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0203 	bic.w	r2, r2, #3
 8006a68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d011      	beq.n	8006a96 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_SPI_IRQHandler+0x1fc>)
 8006a78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fb ff74 	bl	800296c <HAL_DMA_Abort_IT>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d016      	beq.n	8006acc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	4a0d      	ldr	r2, [pc, #52]	; (8006ad8 <HAL_SPI_IRQHandler+0x1fc>)
 8006aa4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fb ff5e 	bl	800296c <HAL_DMA_Abort_IT>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006ac2:	e003      	b.n	8006acc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f809 	bl	8006adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006aca:	e000      	b.n	8006ace <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006acc:	bf00      	nop
    return;
 8006ace:	bf00      	nop
  }
}
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	08006af1 	.word	0x08006af1

08006adc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff ffe5 	bl	8006adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e049      	b.n	8006bc0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fa fc2f 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f000 fa51 	bl	8007000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d122      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d11b      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0202 	mvn.w	r2, #2
 8006bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9da 	bl	8006fc4 <HAL_TIM_IC_CaptureCallback>
 8006c10:	e005      	b.n	8006c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9cc 	bl	8006fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9dd 	bl	8006fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d122      	bne.n	8006c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d11b      	bne.n	8006c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0204 	mvn.w	r2, #4
 8006c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9b0 	bl	8006fc4 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9a2 	bl	8006fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f9b3 	bl	8006fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d122      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d11b      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0208 	mvn.w	r2, #8
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f986 	bl	8006fc4 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f978 	bl	8006fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f989 	bl	8006fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0210 	mvn.w	r2, #16
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f95c 	bl	8006fc4 <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f94e 	bl	8006fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f95f 	bl	8006fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10e      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d107      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0201 	mvn.w	r2, #1
 8006d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f928 	bl	8006f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d10e      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d107      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fb16 	bl	80073a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d86:	d10e      	bne.n	8006da6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d107      	bne.n	8006da6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb09 	bl	80073b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d10e      	bne.n	8006dd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d107      	bne.n	8006dd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f90d 	bl	8006fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d10e      	bne.n	8006dfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d107      	bne.n	8006dfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f06f 0220 	mvn.w	r2, #32
 8006df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fac9 	bl	8007390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dfe:	bf00      	nop
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_ConfigClockSource+0x1c>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e0b4      	b.n	8006f8e <HAL_TIM_ConfigClockSource+0x186>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	4b56      	ldr	r3, [pc, #344]	; (8006f98 <HAL_TIM_ConfigClockSource+0x190>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5c:	d03e      	beq.n	8006edc <HAL_TIM_ConfigClockSource+0xd4>
 8006e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e62:	f200 8087 	bhi.w	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6a:	f000 8086 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x172>
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e72:	d87f      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e74:	2b70      	cmp	r3, #112	; 0x70
 8006e76:	d01a      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0xa6>
 8006e78:	2b70      	cmp	r3, #112	; 0x70
 8006e7a:	d87b      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e7c:	2b60      	cmp	r3, #96	; 0x60
 8006e7e:	d050      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x11a>
 8006e80:	2b60      	cmp	r3, #96	; 0x60
 8006e82:	d877      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b50      	cmp	r3, #80	; 0x50
 8006e86:	d03c      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0xfa>
 8006e88:	2b50      	cmp	r3, #80	; 0x50
 8006e8a:	d873      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d058      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0x13a>
 8006e90:	2b40      	cmp	r3, #64	; 0x40
 8006e92:	d86f      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d064      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006e98:	2b30      	cmp	r3, #48	; 0x30
 8006e9a:	d86b      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d060      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d867      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d05a      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006eac:	e062      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6899      	ldr	r1, [r3, #8]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f000 f9b9 	bl	8007234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	609a      	str	r2, [r3, #8]
      break;
 8006eda:	e04f      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6899      	ldr	r1, [r3, #8]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f000 f9a2 	bl	8007234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006efe:	609a      	str	r2, [r3, #8]
      break;
 8006f00:	e03c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6859      	ldr	r1, [r3, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f000 f916 	bl	8007140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2150      	movs	r1, #80	; 0x50
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f96f 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f20:	e02c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f000 f935 	bl	800719e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2160      	movs	r1, #96	; 0x60
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f95f 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f40:	e01c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f000 f8f6 	bl	8007140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2140      	movs	r1, #64	; 0x40
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f94f 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f60:	e00c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f000 f946 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006f72:	e003      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	e000      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	fffeff88 	.word	0xfffeff88

08006f9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a40      	ldr	r2, [pc, #256]	; (8007114 <TIM_Base_SetConfig+0x114>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d013      	beq.n	8007040 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d00f      	beq.n	8007040 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3d      	ldr	r2, [pc, #244]	; (8007118 <TIM_Base_SetConfig+0x118>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00b      	beq.n	8007040 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a3c      	ldr	r2, [pc, #240]	; (800711c <TIM_Base_SetConfig+0x11c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d007      	beq.n	8007040 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a3b      	ldr	r2, [pc, #236]	; (8007120 <TIM_Base_SetConfig+0x120>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_Base_SetConfig+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a3a      	ldr	r2, [pc, #232]	; (8007124 <TIM_Base_SetConfig+0x124>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d108      	bne.n	8007052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2f      	ldr	r2, [pc, #188]	; (8007114 <TIM_Base_SetConfig+0x114>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d02b      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007060:	d027      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2c      	ldr	r2, [pc, #176]	; (8007118 <TIM_Base_SetConfig+0x118>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d023      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2b      	ldr	r2, [pc, #172]	; (800711c <TIM_Base_SetConfig+0x11c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01f      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <TIM_Base_SetConfig+0x120>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d01b      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a29      	ldr	r2, [pc, #164]	; (8007124 <TIM_Base_SetConfig+0x124>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d017      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a28      	ldr	r2, [pc, #160]	; (8007128 <TIM_Base_SetConfig+0x128>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a27      	ldr	r2, [pc, #156]	; (800712c <TIM_Base_SetConfig+0x12c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00f      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a26      	ldr	r2, [pc, #152]	; (8007130 <TIM_Base_SetConfig+0x130>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00b      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a25      	ldr	r2, [pc, #148]	; (8007134 <TIM_Base_SetConfig+0x134>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d007      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a24      	ldr	r2, [pc, #144]	; (8007138 <TIM_Base_SetConfig+0x138>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a23      	ldr	r2, [pc, #140]	; (800713c <TIM_Base_SetConfig+0x13c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d108      	bne.n	80070c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a0a      	ldr	r2, [pc, #40]	; (8007114 <TIM_Base_SetConfig+0x114>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_Base_SetConfig+0xf8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a0c      	ldr	r2, [pc, #48]	; (8007124 <TIM_Base_SetConfig+0x124>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d103      	bne.n	8007100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	615a      	str	r2, [r3, #20]
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40010000 	.word	0x40010000
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40010400 	.word	0x40010400
 8007128:	40014000 	.word	0x40014000
 800712c:	40014400 	.word	0x40014400
 8007130:	40014800 	.word	0x40014800
 8007134:	40001800 	.word	0x40001800
 8007138:	40001c00 	.word	0x40001c00
 800713c:	40002000 	.word	0x40002000

08007140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f023 0201 	bic.w	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800716a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f023 030a 	bic.w	r3, r3, #10
 800717c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0210 	bic.w	r2, r3, #16
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	031b      	lsls	r3, r3, #12
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	f043 0307 	orr.w	r3, r3, #7
 8007220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800724e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	431a      	orrs	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4313      	orrs	r3, r2
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	609a      	str	r2, [r3, #8]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007288:	2302      	movs	r3, #2
 800728a:	e06d      	b.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d108      	bne.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a20      	ldr	r2, [pc, #128]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d022      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d01d      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a16      	ldr	r2, [pc, #88]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10c      	bne.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4313      	orrs	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40010000 	.word	0x40010000
 8007378:	40010400 	.word	0x40010400
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40014000 	.word	0x40014000
 800738c:	40001800 	.word	0x40001800

08007390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e040      	b.n	8007460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d106      	bne.n	80073f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7f9 fffc 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2224      	movs	r2, #36	; 0x24
 80073f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fc66 	bl	8007cdc <UART_SetConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e022      	b.n	8007460 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 febe 	bl	80081a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ff45 	bl	80082e8 <UART_CheckIdleState>
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747c:	2b20      	cmp	r3, #32
 800747e:	d171      	bne.n	8007564 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_UART_Transmit+0x24>
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e06a      	b.n	8007566 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2221      	movs	r2, #33	; 0x21
 800749c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749e:	f7fa fc93 	bl	8001dc8 <HAL_GetTick>
 80074a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074bc:	d108      	bne.n	80074d0 <HAL_UART_Transmit+0x68>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e003      	b.n	80074d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d8:	e02c      	b.n	8007534 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2200      	movs	r2, #0
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 ff36 	bl	8008356 <UART_WaitOnFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e038      	b.n	8007566 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007508:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	3302      	adds	r3, #2
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e007      	b.n	8007522 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1cc      	bne.n	80074da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2200      	movs	r2, #0
 8007548:	2140      	movs	r1, #64	; 0x40
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 ff03 	bl	8008356 <UART_WaitOnFlagUntilTimeout>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e005      	b.n	8007566 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b08a      	sub	sp, #40	; 0x28
 8007572:	af02      	add	r7, sp, #8
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	4613      	mov	r3, r2
 800757c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007584:	2b20      	cmp	r3, #32
 8007586:	f040 80b1 	bne.w	80076ec <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_UART_Receive+0x28>
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e0a9      	b.n	80076ee <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2222      	movs	r2, #34	; 0x22
 80075a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075b0:	f7fa fc0a 	bl	8001dc8 <HAL_GetTick>
 80075b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	88fa      	ldrh	r2, [r7, #6]
 80075c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ce:	d10e      	bne.n	80075ee <HAL_UART_Receive+0x80>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <HAL_UART_Receive+0x76>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075e2:	e02d      	b.n	8007640 <HAL_UART_Receive+0xd2>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	22ff      	movs	r2, #255	; 0xff
 80075e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ec:	e028      	b.n	8007640 <HAL_UART_Receive+0xd2>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <HAL_UART_Receive+0xa4>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d104      	bne.n	8007608 <HAL_UART_Receive+0x9a>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007606:	e01b      	b.n	8007640 <HAL_UART_Receive+0xd2>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	227f      	movs	r2, #127	; 0x7f
 800760c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007610:	e016      	b.n	8007640 <HAL_UART_Receive+0xd2>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800761a:	d10d      	bne.n	8007638 <HAL_UART_Receive+0xca>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <HAL_UART_Receive+0xc0>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	227f      	movs	r2, #127	; 0x7f
 8007628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800762c:	e008      	b.n	8007640 <HAL_UART_Receive+0xd2>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	223f      	movs	r2, #63	; 0x3f
 8007632:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007636:	e003      	b.n	8007640 <HAL_UART_Receive+0xd2>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007646:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007650:	d108      	bne.n	8007664 <HAL_UART_Receive+0xf6>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e003      	b.n	800766c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800766c:	e032      	b.n	80076d4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	2120      	movs	r1, #32
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fe6c 	bl	8008356 <UART_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e032      	b.n	80076ee <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	b29a      	uxth	r2, r3
 8007696:	8a7b      	ldrh	r3, [r7, #18]
 8007698:	4013      	ands	r3, r2
 800769a:	b29a      	uxth	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	3302      	adds	r3, #2
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e00c      	b.n	80076c2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	8a7b      	ldrh	r3, [r7, #18]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	4013      	ands	r3, r2
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3301      	adds	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1c6      	bne.n	800766e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b0ba      	sub	sp, #232	; 0xe8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800771e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007722:	f640 030f 	movw	r3, #2063	; 0x80f
 8007726:	4013      	ands	r3, r2
 8007728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800772c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d115      	bne.n	8007760 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00f      	beq.n	8007760 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d009      	beq.n	8007760 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 8297 	beq.w	8007c84 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
      }
      return;
 800775e:	e291      	b.n	8007c84 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8117 	beq.w	8007998 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800776a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007776:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800777a:	4b85      	ldr	r3, [pc, #532]	; (8007990 <HAL_UART_IRQHandler+0x298>)
 800777c:	4013      	ands	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 810a 	beq.w	8007998 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d011      	beq.n	80077b4 <HAL_UART_IRQHandler+0xbc>
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2201      	movs	r2, #1
 80077a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077aa:	f043 0201 	orr.w	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d011      	beq.n	80077e4 <HAL_UART_IRQHandler+0xec>
 80077c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2202      	movs	r2, #2
 80077d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077da:	f043 0204 	orr.w	r2, r3, #4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d011      	beq.n	8007814 <HAL_UART_IRQHandler+0x11c>
 80077f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2204      	movs	r2, #4
 8007802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800780a:	f043 0202 	orr.w	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d017      	beq.n	8007850 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d105      	bne.n	8007838 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800782c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007830:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2208      	movs	r2, #8
 800783e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007846:	f043 0208 	orr.w	r2, r3, #8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007858:	2b00      	cmp	r3, #0
 800785a:	d012      	beq.n	8007882 <HAL_UART_IRQHandler+0x18a>
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00c      	beq.n	8007882 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 81fd 	beq.w	8007c88 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d005      	beq.n	80078da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d04f      	beq.n	800797a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fe01 	bl	80084e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d141      	bne.n	8007972 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800791a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800791e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1d9      	bne.n	80078ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	2b00      	cmp	r3, #0
 8007940:	d013      	beq.n	800796a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007946:	4a13      	ldr	r2, [pc, #76]	; (8007994 <HAL_UART_IRQHandler+0x29c>)
 8007948:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	4618      	mov	r0, r3
 8007950:	f7fb f80c 	bl	800296c <HAL_DMA_Abort_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d017      	beq.n	800798a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	e00f      	b.n	800798a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9a0 	bl	8007cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	e00b      	b.n	800798a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f99c 	bl	8007cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	e007      	b.n	800798a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f998 	bl	8007cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007988:	e17e      	b.n	8007c88 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798a:	bf00      	nop
    return;
 800798c:	e17c      	b.n	8007c88 <HAL_UART_IRQHandler+0x590>
 800798e:	bf00      	nop
 8007990:	04000120 	.word	0x04000120
 8007994:	080085ab 	.word	0x080085ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 814c 	bne.w	8007c3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a6:	f003 0310 	and.w	r3, r3, #16
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8145 	beq.w	8007c3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 813e 	beq.w	8007c3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2210      	movs	r2, #16
 80079c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	f040 80b6 	bne.w	8007b42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8150 	beq.w	8007c8c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f080 8148 	bcs.w	8007c8c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a10:	f000 8086 	beq.w	8007b20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1da      	bne.n	8007a14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e1      	bne.n	8007a5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e3      	bne.n	8007a9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af0:	f023 0310 	bic.w	r3, r3, #16
 8007af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e4      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fa feb6 	bl	800288c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f8c2 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b40:	e0a4      	b.n	8007c8c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8096 	beq.w	8007c90 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8091 	beq.w	8007c90 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b90:	647b      	str	r3, [r7, #68]	; 0x44
 8007b92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e4      	bne.n	8007b6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3308      	adds	r3, #8
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e3      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f023 0310 	bic.w	r3, r3, #16
 8007c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	69b9      	ldr	r1, [r7, #24]
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e4      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f846 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c38:	e02a      	b.n	8007c90 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01c      	beq.n	8007c94 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
    }
    return;
 8007c62:	e017      	b.n	8007c94 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d012      	beq.n	8007c96 <HAL_UART_IRQHandler+0x59e>
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00c      	beq.n	8007c96 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fcaa 	bl	80085d6 <UART_EndTransmit_IT>
    return;
 8007c82:	e008      	b.n	8007c96 <HAL_UART_IRQHandler+0x59e>
      return;
 8007c84:	bf00      	nop
 8007c86:	e006      	b.n	8007c96 <HAL_UART_IRQHandler+0x59e>
    return;
 8007c88:	bf00      	nop
 8007c8a:	e004      	b.n	8007c96 <HAL_UART_IRQHandler+0x59e>
      return;
 8007c8c:	bf00      	nop
 8007c8e:	e002      	b.n	8007c96 <HAL_UART_IRQHandler+0x59e>
      return;
 8007c90:	bf00      	nop
 8007c92:	e000      	b.n	8007c96 <HAL_UART_IRQHandler+0x59e>
    return;
 8007c94:	bf00      	nop
  }

}
 8007c96:	37e8      	adds	r7, #232	; 0xe8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4ba6      	ldr	r3, [pc, #664]	; (8007fa0 <UART_SetConfig+0x2c4>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	6979      	ldr	r1, [r7, #20]
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a94      	ldr	r2, [pc, #592]	; (8007fa4 <UART_SetConfig+0x2c8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d120      	bne.n	8007d9a <UART_SetConfig+0xbe>
 8007d58:	4b93      	ldr	r3, [pc, #588]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d816      	bhi.n	8007d94 <UART_SetConfig+0xb8>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0x90>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d89 	.word	0x08007d89
 8007d74:	08007d83 	.word	0x08007d83
 8007d78:	08007d8f 	.word	0x08007d8f
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	77fb      	strb	r3, [r7, #31]
 8007d80:	e150      	b.n	8008024 <UART_SetConfig+0x348>
 8007d82:	2302      	movs	r3, #2
 8007d84:	77fb      	strb	r3, [r7, #31]
 8007d86:	e14d      	b.n	8008024 <UART_SetConfig+0x348>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e14a      	b.n	8008024 <UART_SetConfig+0x348>
 8007d8e:	2308      	movs	r3, #8
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e147      	b.n	8008024 <UART_SetConfig+0x348>
 8007d94:	2310      	movs	r3, #16
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e144      	b.n	8008024 <UART_SetConfig+0x348>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a83      	ldr	r2, [pc, #524]	; (8007fac <UART_SetConfig+0x2d0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d132      	bne.n	8007e0a <UART_SetConfig+0x12e>
 8007da4:	4b80      	ldr	r3, [pc, #512]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007daa:	f003 030c 	and.w	r3, r3, #12
 8007dae:	2b0c      	cmp	r3, #12
 8007db0:	d828      	bhi.n	8007e04 <UART_SetConfig+0x128>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <UART_SetConfig+0xdc>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007ded 	.word	0x08007ded
 8007dbc:	08007e05 	.word	0x08007e05
 8007dc0:	08007e05 	.word	0x08007e05
 8007dc4:	08007e05 	.word	0x08007e05
 8007dc8:	08007df9 	.word	0x08007df9
 8007dcc:	08007e05 	.word	0x08007e05
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007e05 	.word	0x08007e05
 8007dd8:	08007df3 	.word	0x08007df3
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e05 	.word	0x08007e05
 8007de8:	08007dff 	.word	0x08007dff
 8007dec:	2300      	movs	r3, #0
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e118      	b.n	8008024 <UART_SetConfig+0x348>
 8007df2:	2302      	movs	r3, #2
 8007df4:	77fb      	strb	r3, [r7, #31]
 8007df6:	e115      	b.n	8008024 <UART_SetConfig+0x348>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	77fb      	strb	r3, [r7, #31]
 8007dfc:	e112      	b.n	8008024 <UART_SetConfig+0x348>
 8007dfe:	2308      	movs	r3, #8
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e10f      	b.n	8008024 <UART_SetConfig+0x348>
 8007e04:	2310      	movs	r3, #16
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e10c      	b.n	8008024 <UART_SetConfig+0x348>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a68      	ldr	r2, [pc, #416]	; (8007fb0 <UART_SetConfig+0x2d4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d120      	bne.n	8007e56 <UART_SetConfig+0x17a>
 8007e14:	4b64      	ldr	r3, [pc, #400]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e1e:	2b30      	cmp	r3, #48	; 0x30
 8007e20:	d013      	beq.n	8007e4a <UART_SetConfig+0x16e>
 8007e22:	2b30      	cmp	r3, #48	; 0x30
 8007e24:	d814      	bhi.n	8007e50 <UART_SetConfig+0x174>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d009      	beq.n	8007e3e <UART_SetConfig+0x162>
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d810      	bhi.n	8007e50 <UART_SetConfig+0x174>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <UART_SetConfig+0x15c>
 8007e32:	2b10      	cmp	r3, #16
 8007e34:	d006      	beq.n	8007e44 <UART_SetConfig+0x168>
 8007e36:	e00b      	b.n	8007e50 <UART_SetConfig+0x174>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e0f2      	b.n	8008024 <UART_SetConfig+0x348>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e0ef      	b.n	8008024 <UART_SetConfig+0x348>
 8007e44:	2304      	movs	r3, #4
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e0ec      	b.n	8008024 <UART_SetConfig+0x348>
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e0e9      	b.n	8008024 <UART_SetConfig+0x348>
 8007e50:	2310      	movs	r3, #16
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e0e6      	b.n	8008024 <UART_SetConfig+0x348>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a56      	ldr	r2, [pc, #344]	; (8007fb4 <UART_SetConfig+0x2d8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d120      	bne.n	8007ea2 <UART_SetConfig+0x1c6>
 8007e60:	4b51      	ldr	r3, [pc, #324]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e6c:	d013      	beq.n	8007e96 <UART_SetConfig+0x1ba>
 8007e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e70:	d814      	bhi.n	8007e9c <UART_SetConfig+0x1c0>
 8007e72:	2b80      	cmp	r3, #128	; 0x80
 8007e74:	d009      	beq.n	8007e8a <UART_SetConfig+0x1ae>
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	d810      	bhi.n	8007e9c <UART_SetConfig+0x1c0>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <UART_SetConfig+0x1a8>
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d006      	beq.n	8007e90 <UART_SetConfig+0x1b4>
 8007e82:	e00b      	b.n	8007e9c <UART_SetConfig+0x1c0>
 8007e84:	2300      	movs	r3, #0
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e0cc      	b.n	8008024 <UART_SetConfig+0x348>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	e0c9      	b.n	8008024 <UART_SetConfig+0x348>
 8007e90:	2304      	movs	r3, #4
 8007e92:	77fb      	strb	r3, [r7, #31]
 8007e94:	e0c6      	b.n	8008024 <UART_SetConfig+0x348>
 8007e96:	2308      	movs	r3, #8
 8007e98:	77fb      	strb	r3, [r7, #31]
 8007e9a:	e0c3      	b.n	8008024 <UART_SetConfig+0x348>
 8007e9c:	2310      	movs	r3, #16
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e0c0      	b.n	8008024 <UART_SetConfig+0x348>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a44      	ldr	r2, [pc, #272]	; (8007fb8 <UART_SetConfig+0x2dc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d125      	bne.n	8007ef8 <UART_SetConfig+0x21c>
 8007eac:	4b3e      	ldr	r3, [pc, #248]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eba:	d017      	beq.n	8007eec <UART_SetConfig+0x210>
 8007ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec0:	d817      	bhi.n	8007ef2 <UART_SetConfig+0x216>
 8007ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec6:	d00b      	beq.n	8007ee0 <UART_SetConfig+0x204>
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ecc:	d811      	bhi.n	8007ef2 <UART_SetConfig+0x216>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <UART_SetConfig+0x1fe>
 8007ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed6:	d006      	beq.n	8007ee6 <UART_SetConfig+0x20a>
 8007ed8:	e00b      	b.n	8007ef2 <UART_SetConfig+0x216>
 8007eda:	2300      	movs	r3, #0
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e0a1      	b.n	8008024 <UART_SetConfig+0x348>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e09e      	b.n	8008024 <UART_SetConfig+0x348>
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e09b      	b.n	8008024 <UART_SetConfig+0x348>
 8007eec:	2308      	movs	r3, #8
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e098      	b.n	8008024 <UART_SetConfig+0x348>
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e095      	b.n	8008024 <UART_SetConfig+0x348>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a2f      	ldr	r2, [pc, #188]	; (8007fbc <UART_SetConfig+0x2e0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d125      	bne.n	8007f4e <UART_SetConfig+0x272>
 8007f02:	4b29      	ldr	r3, [pc, #164]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f10:	d017      	beq.n	8007f42 <UART_SetConfig+0x266>
 8007f12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f16:	d817      	bhi.n	8007f48 <UART_SetConfig+0x26c>
 8007f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1c:	d00b      	beq.n	8007f36 <UART_SetConfig+0x25a>
 8007f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f22:	d811      	bhi.n	8007f48 <UART_SetConfig+0x26c>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <UART_SetConfig+0x254>
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2c:	d006      	beq.n	8007f3c <UART_SetConfig+0x260>
 8007f2e:	e00b      	b.n	8007f48 <UART_SetConfig+0x26c>
 8007f30:	2301      	movs	r3, #1
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e076      	b.n	8008024 <UART_SetConfig+0x348>
 8007f36:	2302      	movs	r3, #2
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e073      	b.n	8008024 <UART_SetConfig+0x348>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e070      	b.n	8008024 <UART_SetConfig+0x348>
 8007f42:	2308      	movs	r3, #8
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e06d      	b.n	8008024 <UART_SetConfig+0x348>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e06a      	b.n	8008024 <UART_SetConfig+0x348>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d138      	bne.n	8007fca <UART_SetConfig+0x2ee>
 8007f58:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <UART_SetConfig+0x2cc>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f66:	d017      	beq.n	8007f98 <UART_SetConfig+0x2bc>
 8007f68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f6c:	d82a      	bhi.n	8007fc4 <UART_SetConfig+0x2e8>
 8007f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f72:	d00b      	beq.n	8007f8c <UART_SetConfig+0x2b0>
 8007f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f78:	d824      	bhi.n	8007fc4 <UART_SetConfig+0x2e8>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <UART_SetConfig+0x2aa>
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f82:	d006      	beq.n	8007f92 <UART_SetConfig+0x2b6>
 8007f84:	e01e      	b.n	8007fc4 <UART_SetConfig+0x2e8>
 8007f86:	2300      	movs	r3, #0
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e04b      	b.n	8008024 <UART_SetConfig+0x348>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e048      	b.n	8008024 <UART_SetConfig+0x348>
 8007f92:	2304      	movs	r3, #4
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e045      	b.n	8008024 <UART_SetConfig+0x348>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e042      	b.n	8008024 <UART_SetConfig+0x348>
 8007f9e:	bf00      	nop
 8007fa0:	efff69f3 	.word	0xefff69f3
 8007fa4:	40011000 	.word	0x40011000
 8007fa8:	40023800 	.word	0x40023800
 8007fac:	40004400 	.word	0x40004400
 8007fb0:	40004800 	.word	0x40004800
 8007fb4:	40004c00 	.word	0x40004c00
 8007fb8:	40005000 	.word	0x40005000
 8007fbc:	40011400 	.word	0x40011400
 8007fc0:	40007800 	.word	0x40007800
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	77fb      	strb	r3, [r7, #31]
 8007fc8:	e02c      	b.n	8008024 <UART_SetConfig+0x348>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a72      	ldr	r2, [pc, #456]	; (8008198 <UART_SetConfig+0x4bc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d125      	bne.n	8008020 <UART_SetConfig+0x344>
 8007fd4:	4b71      	ldr	r3, [pc, #452]	; (800819c <UART_SetConfig+0x4c0>)
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fe2:	d017      	beq.n	8008014 <UART_SetConfig+0x338>
 8007fe4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fe8:	d817      	bhi.n	800801a <UART_SetConfig+0x33e>
 8007fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fee:	d00b      	beq.n	8008008 <UART_SetConfig+0x32c>
 8007ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff4:	d811      	bhi.n	800801a <UART_SetConfig+0x33e>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <UART_SetConfig+0x326>
 8007ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ffe:	d006      	beq.n	800800e <UART_SetConfig+0x332>
 8008000:	e00b      	b.n	800801a <UART_SetConfig+0x33e>
 8008002:	2300      	movs	r3, #0
 8008004:	77fb      	strb	r3, [r7, #31]
 8008006:	e00d      	b.n	8008024 <UART_SetConfig+0x348>
 8008008:	2302      	movs	r3, #2
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e00a      	b.n	8008024 <UART_SetConfig+0x348>
 800800e:	2304      	movs	r3, #4
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e007      	b.n	8008024 <UART_SetConfig+0x348>
 8008014:	2308      	movs	r3, #8
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e004      	b.n	8008024 <UART_SetConfig+0x348>
 800801a:	2310      	movs	r3, #16
 800801c:	77fb      	strb	r3, [r7, #31]
 800801e:	e001      	b.n	8008024 <UART_SetConfig+0x348>
 8008020:	2310      	movs	r3, #16
 8008022:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802c:	d15b      	bne.n	80080e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800802e:	7ffb      	ldrb	r3, [r7, #31]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d828      	bhi.n	8008086 <UART_SetConfig+0x3aa>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <UART_SetConfig+0x360>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008061 	.word	0x08008061
 8008040:	08008069 	.word	0x08008069
 8008044:	08008071 	.word	0x08008071
 8008048:	08008087 	.word	0x08008087
 800804c:	08008077 	.word	0x08008077
 8008050:	08008087 	.word	0x08008087
 8008054:	08008087 	.word	0x08008087
 8008058:	08008087 	.word	0x08008087
 800805c:	0800807f 	.word	0x0800807f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008060:	f7fd ff78 	bl	8005f54 <HAL_RCC_GetPCLK1Freq>
 8008064:	61b8      	str	r0, [r7, #24]
        break;
 8008066:	e013      	b.n	8008090 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008068:	f7fd ff88 	bl	8005f7c <HAL_RCC_GetPCLK2Freq>
 800806c:	61b8      	str	r0, [r7, #24]
        break;
 800806e:	e00f      	b.n	8008090 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008070:	4b4b      	ldr	r3, [pc, #300]	; (80081a0 <UART_SetConfig+0x4c4>)
 8008072:	61bb      	str	r3, [r7, #24]
        break;
 8008074:	e00c      	b.n	8008090 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008076:	f7fd fe5b 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 800807a:	61b8      	str	r0, [r7, #24]
        break;
 800807c:	e008      	b.n	8008090 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008082:	61bb      	str	r3, [r7, #24]
        break;
 8008084:	e004      	b.n	8008090 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	77bb      	strb	r3, [r7, #30]
        break;
 800808e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d074      	beq.n	8008180 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	005a      	lsls	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	441a      	add	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b0f      	cmp	r3, #15
 80080b0:	d916      	bls.n	80080e0 <UART_SetConfig+0x404>
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b8:	d212      	bcs.n	80080e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f023 030f 	bic.w	r3, r3, #15
 80080c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	89fb      	ldrh	r3, [r7, #14]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	89fa      	ldrh	r2, [r7, #14]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	e04f      	b.n	8008180 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	77bb      	strb	r3, [r7, #30]
 80080e4:	e04c      	b.n	8008180 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080e6:	7ffb      	ldrb	r3, [r7, #31]
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d828      	bhi.n	800813e <UART_SetConfig+0x462>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0x418>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008121 	.word	0x08008121
 80080fc:	08008129 	.word	0x08008129
 8008100:	0800813f 	.word	0x0800813f
 8008104:	0800812f 	.word	0x0800812f
 8008108:	0800813f 	.word	0x0800813f
 800810c:	0800813f 	.word	0x0800813f
 8008110:	0800813f 	.word	0x0800813f
 8008114:	08008137 	.word	0x08008137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008118:	f7fd ff1c 	bl	8005f54 <HAL_RCC_GetPCLK1Freq>
 800811c:	61b8      	str	r0, [r7, #24]
        break;
 800811e:	e013      	b.n	8008148 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008120:	f7fd ff2c 	bl	8005f7c <HAL_RCC_GetPCLK2Freq>
 8008124:	61b8      	str	r0, [r7, #24]
        break;
 8008126:	e00f      	b.n	8008148 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008128:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <UART_SetConfig+0x4c4>)
 800812a:	61bb      	str	r3, [r7, #24]
        break;
 800812c:	e00c      	b.n	8008148 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800812e:	f7fd fdff 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8008132:	61b8      	str	r0, [r7, #24]
        break;
 8008134:	e008      	b.n	8008148 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813a:	61bb      	str	r3, [r7, #24]
        break;
 800813c:	e004      	b.n	8008148 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	77bb      	strb	r3, [r7, #30]
        break;
 8008146:	bf00      	nop
    }

    if (pclk != 0U)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d018      	beq.n	8008180 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	085a      	lsrs	r2, r3, #1
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	441a      	add	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008160:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b0f      	cmp	r3, #15
 8008166:	d909      	bls.n	800817c <UART_SetConfig+0x4a0>
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800816e:	d205      	bcs.n	800817c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	b29a      	uxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	e001      	b.n	8008180 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800818c:	7fbb      	ldrb	r3, [r7, #30]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40007c00 	.word	0x40007c00
 800819c:	40023800 	.word	0x40023800
 80081a0:	00f42400 	.word	0x00f42400

080081a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01a      	beq.n	80082ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a2:	d10a      	bne.n	80082ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	605a      	str	r2, [r3, #4]
  }
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082f8:	f7f9 fd66 	bl	8001dc8 <HAL_GetTick>
 80082fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b08      	cmp	r3, #8
 800830a:	d10e      	bne.n	800832a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800830c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f81b 	bl	8008356 <UART_WaitOnFlagUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e011      	b.n	800834e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b09c      	sub	sp, #112	; 0x70
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	603b      	str	r3, [r7, #0]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008366:	e0a7      	b.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836e:	f000 80a3 	beq.w	80084b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008372:	f7f9 fd29 	bl	8001dc8 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800837e:	429a      	cmp	r2, r3
 8008380:	d302      	bcc.n	8008388 <UART_WaitOnFlagUntilTimeout+0x32>
 8008382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008384:	2b00      	cmp	r3, #0
 8008386:	d13f      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800839c:	667b      	str	r3, [r7, #100]	; 0x64
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e6      	bne.n	8008388 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	f023 0301 	bic.w	r3, r3, #1
 80083d0:	663b      	str	r3, [r7, #96]	; 0x60
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083da:	64ba      	str	r2, [r7, #72]	; 0x48
 80083dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e5      	bne.n	80083ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2220      	movs	r2, #32
 80083f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e068      	b.n	80084da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d050      	beq.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008424:	d148      	bne.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800842e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008444:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
 8008450:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e6      	bne.n	8008430 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	613b      	str	r3, [r7, #16]
   return(result);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	66bb      	str	r3, [r7, #104]	; 0x68
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008482:	623a      	str	r2, [r7, #32]
 8008484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	69f9      	ldr	r1, [r7, #28]
 8008488:	6a3a      	ldr	r2, [r7, #32]
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e010      	b.n	80084da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	461a      	mov	r2, r3
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	f43f af48 	beq.w	8008368 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3770      	adds	r7, #112	; 0x70
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b095      	sub	sp, #84	; 0x54
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008508:	643b      	str	r3, [r7, #64]	; 0x40
 800850a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800850e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e6      	bne.n	80084ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	61fb      	str	r3, [r7, #28]
   return(result);
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f023 0301 	bic.w	r3, r3, #1
 8008532:	64bb      	str	r3, [r7, #72]	; 0x48
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800853c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e5      	bne.n	800851c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008554:	2b01      	cmp	r3, #1
 8008556:	d118      	bne.n	800858a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	60bb      	str	r3, [r7, #8]
   return(result);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f023 0310 	bic.w	r3, r3, #16
 800856c:	647b      	str	r3, [r7, #68]	; 0x44
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	6979      	ldr	r1, [r7, #20]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	613b      	str	r3, [r7, #16]
   return(result);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e6      	bne.n	8008558 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800859e:	bf00      	nop
 80085a0:	3754      	adds	r7, #84	; 0x54
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fb71 	bl	8007cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b088      	sub	sp, #32
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6979      	ldr	r1, [r7, #20]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	613b      	str	r3, [r7, #16]
   return(result);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff fb3d 	bl	8007c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008622:	bf00      	nop
 8008624:	3720      	adds	r7, #32
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800862c:	b084      	sub	sp, #16
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	f107 001c 	add.w	r0, r7, #28
 800863a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	2b01      	cmp	r3, #1
 8008642:	d120      	bne.n	8008686 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <USB_CoreInit+0xac>)
 8008656:	4013      	ands	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866a:	2b01      	cmp	r3, #1
 800866c:	d105      	bne.n	800867a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa96 	bl	8008bac <USB_CoreReset>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
 8008684:	e010      	b.n	80086a8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa8a 	bl	8008bac <USB_CoreReset>
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10b      	bne.n	80086c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f043 0206 	orr.w	r2, r3, #6
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f043 0220 	orr.w	r2, r3, #32
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086d2:	b004      	add	sp, #16
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	ffbdffbf 	.word	0xffbdffbf

080086dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f023 0201 	bic.w	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d115      	bne.n	800874c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800872c:	2001      	movs	r0, #1
 800872e:	f7f9 fb57 	bl	8001de0 <HAL_Delay>
      ms++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fa29 	bl	8008b90 <USB_GetMode>
 800873e:	4603      	mov	r3, r0
 8008740:	2b01      	cmp	r3, #1
 8008742:	d01e      	beq.n	8008782 <USB_SetCurrentMode+0x84>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b31      	cmp	r3, #49	; 0x31
 8008748:	d9f0      	bls.n	800872c <USB_SetCurrentMode+0x2e>
 800874a:	e01a      	b.n	8008782 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d115      	bne.n	800877e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800875e:	2001      	movs	r0, #1
 8008760:	f7f9 fb3e 	bl	8001de0 <HAL_Delay>
      ms++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa10 	bl	8008b90 <USB_GetMode>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <USB_SetCurrentMode+0x84>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b31      	cmp	r3, #49	; 0x31
 800877a:	d9f0      	bls.n	800875e <USB_SetCurrentMode+0x60>
 800877c:	e001      	b.n	8008782 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e005      	b.n	800878e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b32      	cmp	r3, #50	; 0x32
 8008786:	d101      	bne.n	800878c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008798:	b084      	sub	sp, #16
 800879a:	b580      	push	{r7, lr}
 800879c:	b086      	sub	sp, #24
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
 80087b6:	e009      	b.n	80087cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	3340      	adds	r3, #64	; 0x40
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2b0e      	cmp	r3, #14
 80087d0:	d9f2      	bls.n	80087b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d11c      	bne.n	8008812 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e6:	f043 0302 	orr.w	r3, r3, #2
 80087ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e005      	b.n	800881e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	4619      	mov	r1, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008838:	461a      	mov	r2, r3
 800883a:	680b      	ldr	r3, [r1, #0]
 800883c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b01      	cmp	r3, #1
 8008842:	d10c      	bne.n	800885e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f965 	bl	8008b1c <USB_SetDevSpeed>
 8008852:	e008      	b.n	8008866 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008854:	2101      	movs	r1, #1
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f960 	bl	8008b1c <USB_SetDevSpeed>
 800885c:	e003      	b.n	8008866 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800885e:	2103      	movs	r1, #3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f95b 	bl	8008b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008866:	2110      	movs	r1, #16
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8f3 	bl	8008a54 <USB_FlushTxFifo>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f91f 	bl	8008abc <USB_FlushRxFifo>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888e:	461a      	mov	r2, r3
 8008890:	2300      	movs	r3, #0
 8008892:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889a:	461a      	mov	r2, r3
 800889c:	2300      	movs	r3, #0
 800889e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a6:	461a      	mov	r2, r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ac:	2300      	movs	r3, #0
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	e043      	b.n	800893a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c8:	d118      	bne.n	80088fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	461a      	mov	r2, r3
 80088de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	e013      	b.n	800890e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	461a      	mov	r2, r3
 80088f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e008      	b.n	800890e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891a:	461a      	mov	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892c:	461a      	mov	r2, r3
 800892e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008932:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3301      	adds	r3, #1
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	429a      	cmp	r2, r3
 8008940:	d3b7      	bcc.n	80088b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008942:	2300      	movs	r3, #0
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	e043      	b.n	80089d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800895a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800895e:	d118      	bne.n	8008992 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008972:	461a      	mov	r2, r3
 8008974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	e013      	b.n	80089a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	461a      	mov	r2, r3
 800898a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	e008      	b.n	80089a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	461a      	mov	r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b0:	461a      	mov	r2, r3
 80089b2:	2300      	movs	r3, #0
 80089b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	461a      	mov	r2, r3
 80089c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	3301      	adds	r3, #1
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3b7      	bcc.n	8008948 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f043 0210 	orr.w	r2, r3, #16
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <USB_DevInit+0x2b4>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	f043 0208 	orr.w	r2, r3, #8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d105      	bne.n	8008a3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <USB_DevInit+0x2b8>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a48:	b004      	add	sp, #16
 8008a4a:	4770      	bx	lr
 8008a4c:	803c3800 	.word	0x803c3800
 8008a50:	40000004 	.word	0x40000004

08008a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4a13      	ldr	r2, [pc, #76]	; (8008ab8 <USB_FlushTxFifo+0x64>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e01b      	b.n	8008aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	daf2      	bge.n	8008a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	019b      	lsls	r3, r3, #6
 8008a84:	f043 0220 	orr.w	r2, r3, #32
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <USB_FlushTxFifo+0x64>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d901      	bls.n	8008a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e006      	b.n	8008aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d0f0      	beq.n	8008a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	00030d40 	.word	0x00030d40

08008abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <USB_FlushRxFifo+0x5c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d901      	bls.n	8008ada <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e018      	b.n	8008b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	daf2      	bge.n	8008ac8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2210      	movs	r2, #16
 8008aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <USB_FlushRxFifo+0x5c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d901      	bls.n	8008afe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e006      	b.n	8008b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d0f0      	beq.n	8008aec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	00030d40 	.word	0x00030d40

08008b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	68f9      	ldr	r1, [r7, #12]
 8008b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b68:	f023 0303 	bic.w	r3, r3, #3
 8008b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b7c:	f043 0302 	orr.w	r3, r3, #2
 8008b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <USB_CoreReset+0x64>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d901      	bls.n	8008bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e01b      	b.n	8008c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	daf2      	bge.n	8008bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	f043 0201 	orr.w	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <USB_CoreReset+0x64>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d901      	bls.n	8008bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e006      	b.n	8008c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d0f0      	beq.n	8008be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	00030d40 	.word	0x00030d40

08008c14 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008c1a:	4b8d      	ldr	r3, [pc, #564]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c1c:	22c0      	movs	r2, #192	; 0xc0
 8008c1e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008c20:	4b8b      	ldr	r3, [pc, #556]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c22:	22a8      	movs	r2, #168	; 0xa8
 8008c24:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8008c26:	4b8a      	ldr	r3, [pc, #552]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 8008c2c:	4b88      	ldr	r3, [pc, #544]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c2e:	224d      	movs	r2, #77	; 0x4d
 8008c30:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008c32:	4b88      	ldr	r3, [pc, #544]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008c38:	4b86      	ldr	r3, [pc, #536]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008c3a:	22ff      	movs	r2, #255	; 0xff
 8008c3c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008c3e:	4b85      	ldr	r3, [pc, #532]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008c40:	22ff      	movs	r2, #255	; 0xff
 8008c42:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008c44:	4b83      	ldr	r3, [pc, #524]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008c4a:	4b83      	ldr	r3, [pc, #524]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008c4c:	22c0      	movs	r2, #192	; 0xc0
 8008c4e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008c50:	4b81      	ldr	r3, [pc, #516]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008c52:	22a8      	movs	r2, #168	; 0xa8
 8008c54:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8008c56:	4b80      	ldr	r3, [pc, #512]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8008c5c:	4b7e      	ldr	r3, [pc, #504]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008c5e:	2264      	movs	r2, #100	; 0x64
 8008c60:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008c62:	f000 fd1d 	bl	80096a0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008c66:	4b7a      	ldr	r3, [pc, #488]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	061a      	lsls	r2, r3, #24
 8008c6c:	4b78      	ldr	r3, [pc, #480]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	431a      	orrs	r2, r3
 8008c74:	4b76      	ldr	r3, [pc, #472]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c76:	789b      	ldrb	r3, [r3, #2]
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	4a74      	ldr	r2, [pc, #464]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c7e:	78d2      	ldrb	r2, [r2, #3]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	061a      	lsls	r2, r3, #24
 8008c84:	4b72      	ldr	r3, [pc, #456]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	0619      	lsls	r1, r3, #24
 8008c8a:	4b71      	ldr	r3, [pc, #452]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	041b      	lsls	r3, r3, #16
 8008c90:	4319      	orrs	r1, r3
 8008c92:	4b6f      	ldr	r3, [pc, #444]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c94:	789b      	ldrb	r3, [r3, #2]
 8008c96:	021b      	lsls	r3, r3, #8
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	496d      	ldr	r1, [pc, #436]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008c9c:	78c9      	ldrb	r1, [r1, #3]
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	4b69      	ldr	r3, [pc, #420]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	0619      	lsls	r1, r3, #24
 8008cae:	4b68      	ldr	r3, [pc, #416]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	041b      	lsls	r3, r3, #16
 8008cb4:	4319      	orrs	r1, r3
 8008cb6:	4b66      	ldr	r3, [pc, #408]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008cb8:	789b      	ldrb	r3, [r3, #2]
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	4964      	ldr	r1, [pc, #400]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008cc0:	78c9      	ldrb	r1, [r1, #3]
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	0a1b      	lsrs	r3, r3, #8
 8008cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	4b60      	ldr	r3, [pc, #384]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	0619      	lsls	r1, r3, #24
 8008cd2:	4b5f      	ldr	r3, [pc, #380]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	041b      	lsls	r3, r3, #16
 8008cd8:	4319      	orrs	r1, r3
 8008cda:	4b5d      	ldr	r3, [pc, #372]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008cdc:	789b      	ldrb	r3, [r3, #2]
 8008cde:	021b      	lsls	r3, r3, #8
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	495b      	ldr	r1, [pc, #364]	; (8008e50 <MX_LWIP_Init+0x23c>)
 8008ce4:	78c9      	ldrb	r1, [r1, #3]
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	0e1b      	lsrs	r3, r3, #24
 8008cea:	4313      	orrs	r3, r2
 8008cec:	4a5b      	ldr	r2, [pc, #364]	; (8008e5c <MX_LWIP_Init+0x248>)
 8008cee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008cf0:	4b58      	ldr	r3, [pc, #352]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	061a      	lsls	r2, r3, #24
 8008cf6:	4b57      	ldr	r3, [pc, #348]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	041b      	lsls	r3, r3, #16
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	4b55      	ldr	r3, [pc, #340]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d00:	789b      	ldrb	r3, [r3, #2]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	4313      	orrs	r3, r2
 8008d06:	4a53      	ldr	r2, [pc, #332]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d08:	78d2      	ldrb	r2, [r2, #3]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	061a      	lsls	r2, r3, #24
 8008d0e:	4b51      	ldr	r3, [pc, #324]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	0619      	lsls	r1, r3, #24
 8008d14:	4b4f      	ldr	r3, [pc, #316]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	4319      	orrs	r1, r3
 8008d1c:	4b4d      	ldr	r3, [pc, #308]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d1e:	789b      	ldrb	r3, [r3, #2]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	430b      	orrs	r3, r1
 8008d24:	494b      	ldr	r1, [pc, #300]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d26:	78c9      	ldrb	r1, [r1, #3]
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d30:	431a      	orrs	r2, r3
 8008d32:	4b48      	ldr	r3, [pc, #288]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	0619      	lsls	r1, r3, #24
 8008d38:	4b46      	ldr	r3, [pc, #280]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	4319      	orrs	r1, r3
 8008d40:	4b44      	ldr	r3, [pc, #272]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d42:	789b      	ldrb	r3, [r3, #2]
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	430b      	orrs	r3, r1
 8008d48:	4942      	ldr	r1, [pc, #264]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d4a:	78c9      	ldrb	r1, [r1, #3]
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d54:	431a      	orrs	r2, r3
 8008d56:	4b3f      	ldr	r3, [pc, #252]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	0619      	lsls	r1, r3, #24
 8008d5c:	4b3d      	ldr	r3, [pc, #244]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	041b      	lsls	r3, r3, #16
 8008d62:	4319      	orrs	r1, r3
 8008d64:	4b3b      	ldr	r3, [pc, #236]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d66:	789b      	ldrb	r3, [r3, #2]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	4939      	ldr	r1, [pc, #228]	; (8008e54 <MX_LWIP_Init+0x240>)
 8008d6e:	78c9      	ldrb	r1, [r1, #3]
 8008d70:	430b      	orrs	r3, r1
 8008d72:	0e1b      	lsrs	r3, r3, #24
 8008d74:	4313      	orrs	r3, r2
 8008d76:	4a3a      	ldr	r2, [pc, #232]	; (8008e60 <MX_LWIP_Init+0x24c>)
 8008d78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008d7a:	4b37      	ldr	r3, [pc, #220]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	061a      	lsls	r2, r3, #24
 8008d80:	4b35      	ldr	r3, [pc, #212]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	431a      	orrs	r2, r3
 8008d88:	4b33      	ldr	r3, [pc, #204]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008d8a:	789b      	ldrb	r3, [r3, #2]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	4a31      	ldr	r2, [pc, #196]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008d92:	78d2      	ldrb	r2, [r2, #3]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	061a      	lsls	r2, r3, #24
 8008d98:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	0619      	lsls	r1, r3, #24
 8008d9e:	4b2e      	ldr	r3, [pc, #184]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	041b      	lsls	r3, r3, #16
 8008da4:	4319      	orrs	r1, r3
 8008da6:	4b2c      	ldr	r3, [pc, #176]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008da8:	789b      	ldrb	r3, [r3, #2]
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	430b      	orrs	r3, r1
 8008dae:	492a      	ldr	r1, [pc, #168]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008db0:	78c9      	ldrb	r1, [r1, #3]
 8008db2:	430b      	orrs	r3, r1
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	4b26      	ldr	r3, [pc, #152]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	0619      	lsls	r1, r3, #24
 8008dc2:	4b25      	ldr	r3, [pc, #148]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	4319      	orrs	r1, r3
 8008dca:	4b23      	ldr	r3, [pc, #140]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008dcc:	789b      	ldrb	r3, [r3, #2]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	4921      	ldr	r1, [pc, #132]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008dd4:	78c9      	ldrb	r1, [r1, #3]
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	0a1b      	lsrs	r3, r3, #8
 8008dda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008dde:	431a      	orrs	r2, r3
 8008de0:	4b1d      	ldr	r3, [pc, #116]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	0619      	lsls	r1, r3, #24
 8008de6:	4b1c      	ldr	r3, [pc, #112]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	4319      	orrs	r1, r3
 8008dee:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008df0:	789b      	ldrb	r3, [r3, #2]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	430b      	orrs	r3, r1
 8008df6:	4918      	ldr	r1, [pc, #96]	; (8008e58 <MX_LWIP_Init+0x244>)
 8008df8:	78c9      	ldrb	r1, [r1, #3]
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	0e1b      	lsrs	r3, r3, #24
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <MX_LWIP_Init+0x250>)
 8008e02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008e04:	4b18      	ldr	r3, [pc, #96]	; (8008e68 <MX_LWIP_Init+0x254>)
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	4b18      	ldr	r3, [pc, #96]	; (8008e6c <MX_LWIP_Init+0x258>)
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <MX_LWIP_Init+0x250>)
 8008e12:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <MX_LWIP_Init+0x24c>)
 8008e14:	4911      	ldr	r1, [pc, #68]	; (8008e5c <MX_LWIP_Init+0x248>)
 8008e16:	4816      	ldr	r0, [pc, #88]	; (8008e70 <MX_LWIP_Init+0x25c>)
 8008e18:	f001 f92e 	bl	800a078 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008e1c:	4814      	ldr	r0, [pc, #80]	; (8008e70 <MX_LWIP_Init+0x25c>)
 8008e1e:	f001 fadd 	bl	800a3dc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <MX_LWIP_Init+0x25c>)
 8008e24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e28:	089b      	lsrs	r3, r3, #2
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008e34:	480e      	ldr	r0, [pc, #56]	; (8008e70 <MX_LWIP_Init+0x25c>)
 8008e36:	f001 fae1 	bl	800a3fc <netif_set_up>
 8008e3a:	e002      	b.n	8008e42 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008e3c:	480c      	ldr	r0, [pc, #48]	; (8008e70 <MX_LWIP_Init+0x25c>)
 8008e3e:	f001 fb49 	bl	800a4d4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008e42:	490c      	ldr	r1, [pc, #48]	; (8008e74 <MX_LWIP_Init+0x260>)
 8008e44:	480a      	ldr	r0, [pc, #40]	; (8008e70 <MX_LWIP_Init+0x25c>)
 8008e46:	f001 fbdb 	bl	800a600 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008e4a:	bf00      	nop
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000c6c 	.word	0x20000c6c
 8008e54:	20000c70 	.word	0x20000c70
 8008e58:	20000c74 	.word	0x20000c74
 8008e5c:	20000c60 	.word	0x20000c60
 8008e60:	20000c64 	.word	0x20000c64
 8008e64:	20000c68 	.word	0x20000c68
 8008e68:	08013895 	.word	0x08013895
 8008e6c:	0800918d 	.word	0x0800918d
 8008e70:	20000c2c 	.word	0x20000c2c
 8008e74:	08008e79 	.word	0x08008e79

08008e78 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <SCB_InvalidateDCache_by_Addr>:
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ea2:	f3bf 8f4f 	dsb	sy
}
 8008ea6:	bf00      	nop
    while (op_size > 0) {
 8008ea8:	e00b      	b.n	8008ec2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008eaa:	4a0d      	ldr	r2, [pc, #52]	; (8008ee0 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dcf0      	bgt.n	8008eaa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ec8:	f3bf 8f4f 	dsb	sy
}
 8008ecc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008ece:	f3bf 8f6f 	isb	sy
}
 8008ed2:	bf00      	nop
}
 8008ed4:	bf00      	nop
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	e000ed00 	.word	0xe000ed00

08008ee4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008ef0:	4b40      	ldr	r3, [pc, #256]	; (8008ff4 <low_level_init+0x110>)
 8008ef2:	4a41      	ldr	r2, [pc, #260]	; (8008ff8 <low_level_init+0x114>)
 8008ef4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008efa:	2380      	movs	r3, #128	; 0x80
 8008efc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008efe:	23e1      	movs	r3, #225	; 0xe1
 8008f00:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008f02:	2300      	movs	r3, #0
 8008f04:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008f06:	2300      	movs	r3, #0
 8008f08:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008f0e:	4a39      	ldr	r2, [pc, #228]	; (8008ff4 <low_level_init+0x110>)
 8008f10:	f107 0308 	add.w	r3, r7, #8
 8008f14:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008f16:	4b37      	ldr	r3, [pc, #220]	; (8008ff4 <low_level_init+0x110>)
 8008f18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008f1c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008f1e:	4b35      	ldr	r3, [pc, #212]	; (8008ff4 <low_level_init+0x110>)
 8008f20:	4a36      	ldr	r2, [pc, #216]	; (8008ffc <low_level_init+0x118>)
 8008f22:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008f24:	4b33      	ldr	r3, [pc, #204]	; (8008ff4 <low_level_init+0x110>)
 8008f26:	4a36      	ldr	r2, [pc, #216]	; (8009000 <low_level_init+0x11c>)
 8008f28:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008f2a:	4b32      	ldr	r3, [pc, #200]	; (8008ff4 <low_level_init+0x110>)
 8008f2c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008f30:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008f32:	4830      	ldr	r0, [pc, #192]	; (8008ff4 <low_level_init+0x110>)
 8008f34:	f7f9 ff86 	bl	8002e44 <HAL_ETH_Init>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008f3c:	2238      	movs	r2, #56	; 0x38
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4830      	ldr	r0, [pc, #192]	; (8009004 <low_level_init+0x120>)
 8008f42:	f00a fed9 	bl	8013cf8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008f46:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <low_level_init+0x120>)
 8008f48:	2221      	movs	r2, #33	; 0x21
 8008f4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008f4c:	4b2d      	ldr	r3, [pc, #180]	; (8009004 <low_level_init+0x120>)
 8008f4e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008f52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008f54:	4b2b      	ldr	r3, [pc, #172]	; (8009004 <low_level_init+0x120>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008f5a:	482b      	ldr	r0, [pc, #172]	; (8009008 <low_level_init+0x124>)
 8008f5c:	f000 ff54 	bl	8009e08 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2206      	movs	r2, #6
 8008f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008f68:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <low_level_init+0x110>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	781a      	ldrb	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008f74:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <low_level_init+0x110>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	785a      	ldrb	r2, [r3, #1]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008f80:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <low_level_init+0x110>)
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	789a      	ldrb	r2, [r3, #2]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008f8c:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <low_level_init+0x110>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	78da      	ldrb	r2, [r3, #3]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008f98:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <low_level_init+0x110>)
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	791a      	ldrb	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <low_level_init+0x110>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	795a      	ldrb	r2, [r3, #5]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008fb6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fbe:	f043 030a 	orr.w	r3, r3, #10
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008fca:	4910      	ldr	r1, [pc, #64]	; (800900c <low_level_init+0x128>)
 8008fcc:	4810      	ldr	r0, [pc, #64]	; (8009010 <low_level_init+0x12c>)
 8008fce:	f7f8 fd48 	bl	8001a62 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008fd2:	480f      	ldr	r0, [pc, #60]	; (8009010 <low_level_init+0x12c>)
 8008fd4:	f7f8 fd77 	bl	8001ac6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d103      	bne.n	8008fe6 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa32 	bl	8009448 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008fe4:	e001      	b.n	8008fea <low_level_init+0x106>
    Error_Handler();
 8008fe6:	f7f7 fed5 	bl	8000d94 <Error_Handler>
}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20005604 	.word	0x20005604
 8008ff8:	40028000 	.word	0x40028000
 8008ffc:	20000130 	.word	0x20000130
 8009000:	20000090 	.word	0x20000090
 8009004:	200056b4 	.word	0x200056b4
 8009008:	08017b64 	.word	0x08017b64
 800900c:	2000000c 	.word	0x2000000c
 8009010:	200056ec 	.word	0x200056ec

08009014 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b092      	sub	sp, #72	; 0x48
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800902c:	f107 030c 	add.w	r3, r7, #12
 8009030:	2230      	movs	r2, #48	; 0x30
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f00a fe5f 	bl	8013cf8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800903a:	f107 030c 	add.w	r3, r7, #12
 800903e:	2230      	movs	r2, #48	; 0x30
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f00a fe58 	bl	8013cf8 <memset>

  for(q = p; q != NULL; q = q->next)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	643b      	str	r3, [r7, #64]	; 0x40
 800904c:	e045      	b.n	80090da <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800904e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009050:	2b03      	cmp	r3, #3
 8009052:	d902      	bls.n	800905a <low_level_output+0x46>
      return ERR_IF;
 8009054:	f06f 030b 	mvn.w	r3, #11
 8009058:	e055      	b.n	8009106 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800905a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800905c:	6859      	ldr	r1, [r3, #4]
 800905e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009060:	4613      	mov	r3, r2
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	3348      	adds	r3, #72	; 0x48
 800906a:	443b      	add	r3, r7
 800906c:	3b3c      	subs	r3, #60	; 0x3c
 800906e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009072:	895b      	ldrh	r3, [r3, #10]
 8009074:	4619      	mov	r1, r3
 8009076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009078:	4613      	mov	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	3348      	adds	r3, #72	; 0x48
 8009082:	443b      	add	r3, r7
 8009084:	3b38      	subs	r3, #56	; 0x38
 8009086:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800908a:	2b00      	cmp	r3, #0
 800908c:	d011      	beq.n	80090b2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800908e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	f107 000c 	add.w	r0, r7, #12
 8009096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009098:	460b      	mov	r3, r1
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	440b      	add	r3, r1
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	18c1      	adds	r1, r0, r3
 80090a2:	4613      	mov	r3, r2
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	3348      	adds	r3, #72	; 0x48
 80090ac:	443b      	add	r3, r7
 80090ae:	3b34      	subs	r3, #52	; 0x34
 80090b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80090b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80090ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090bc:	4613      	mov	r3, r2
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	3348      	adds	r3, #72	; 0x48
 80090c6:	443b      	add	r3, r7
 80090c8:	3b34      	subs	r3, #52	; 0x34
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80090ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d0:	3301      	adds	r3, #1
 80090d2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80090d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	643b      	str	r3, [r7, #64]	; 0x40
 80090da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1b6      	bne.n	800904e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	891b      	ldrh	r3, [r3, #8]
 80090e4:	461a      	mov	r2, r3
 80090e6:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <low_level_output+0xfc>)
 80090e8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80090ea:	4a09      	ldr	r2, [pc, #36]	; (8009110 <low_level_output+0xfc>)
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80090f2:	4a07      	ldr	r2, [pc, #28]	; (8009110 <low_level_output+0xfc>)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80090f8:	2214      	movs	r2, #20
 80090fa:	4905      	ldr	r1, [pc, #20]	; (8009110 <low_level_output+0xfc>)
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <low_level_output+0x100>)
 80090fe:	f7f9 ffd5 	bl	80030ac <HAL_ETH_Transmit>

  return errval;
 8009102:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009106:	4618      	mov	r0, r3
 8009108:	3748      	adds	r7, #72	; 0x48
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200056b4 	.word	0x200056b4
 8009114:	20005604 	.word	0x20005604

08009118 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009124:	4b07      	ldr	r3, [pc, #28]	; (8009144 <low_level_input+0x2c>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800912c:	f107 030c 	add.w	r3, r7, #12
 8009130:	4619      	mov	r1, r3
 8009132:	4805      	ldr	r0, [pc, #20]	; (8009148 <low_level_input+0x30>)
 8009134:	f7fa f84e 	bl	80031d4 <HAL_ETH_ReadData>
  }

  return p;
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20005600 	.word	0x20005600
 8009148:	20005604 	.word	0x20005604

0800914c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ffdd 	bl	8009118 <low_level_input>
 800915e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	4798      	blx	r3
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f001 fdc2 	bl	800ad00 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1ea      	bne.n	8009158 <ethernetif_input+0xc>
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <ethernetif_init+0x1c>
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <ethernetif_init+0x48>)
 800919c:	f240 127b 	movw	r2, #379	; 0x17b
 80091a0:	490d      	ldr	r1, [pc, #52]	; (80091d8 <ethernetif_init+0x4c>)
 80091a2:	480e      	ldr	r0, [pc, #56]	; (80091dc <ethernetif_init+0x50>)
 80091a4:	f00a fdb0 	bl	8013d08 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2273      	movs	r2, #115	; 0x73
 80091ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2274      	movs	r2, #116	; 0x74
 80091b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <ethernetif_init+0x54>)
 80091bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <ethernetif_init+0x58>)
 80091c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fe8d 	bl	8008ee4 <low_level_init>

  return ERR_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	08015128 	.word	0x08015128
 80091d8:	08015144 	.word	0x08015144
 80091dc:	08015154 	.word	0x08015154
 80091e0:	08011c2d 	.word	0x08011c2d
 80091e4:	08009015 	.word	0x08009015

080091e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80091f4:	68f9      	ldr	r1, [r7, #12]
 80091f6:	4807      	ldr	r0, [pc, #28]	; (8009214 <pbuf_free_custom+0x2c>)
 80091f8:	f000 fee8 	bl	8009fcc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <pbuf_free_custom+0x30>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d102      	bne.n	800920a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <pbuf_free_custom+0x30>)
 8009206:	2200      	movs	r2, #0
 8009208:	701a      	strb	r2, [r3, #0]
  }
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	08017b64 	.word	0x08017b64
 8009218:	20005600 	.word	0x20005600

0800921c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009220:	f7f8 fdd2 	bl	8001dc8 <HAL_GetTick>
 8009224:	4603      	mov	r3, r0
}
 8009226:	4618      	mov	r0, r3
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08e      	sub	sp, #56	; 0x38
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	609a      	str	r2, [r3, #8]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a52      	ldr	r2, [pc, #328]	; (8009394 <HAL_ETH_MspInit+0x168>)
 800924a:	4293      	cmp	r3, r2
 800924c:	f040 809e 	bne.w	800938c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009250:	4b51      	ldr	r3, [pc, #324]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	4a50      	ldr	r2, [pc, #320]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 8009256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800925a:	6313      	str	r3, [r2, #48]	; 0x30
 800925c:	4b4e      	ldr	r3, [pc, #312]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009264:	623b      	str	r3, [r7, #32]
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	4b4b      	ldr	r3, [pc, #300]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	4a4a      	ldr	r2, [pc, #296]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 800926e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009272:	6313      	str	r3, [r2, #48]	; 0x30
 8009274:	4b48      	ldr	r3, [pc, #288]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800927c:	61fb      	str	r3, [r7, #28]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4b45      	ldr	r3, [pc, #276]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 8009282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009284:	4a44      	ldr	r2, [pc, #272]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 8009286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800928a:	6313      	str	r3, [r2, #48]	; 0x30
 800928c:	4b42      	ldr	r3, [pc, #264]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009298:	4b3f      	ldr	r3, [pc, #252]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	4a3e      	ldr	r2, [pc, #248]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 800929e:	f043 0304 	orr.w	r3, r3, #4
 80092a2:	6313      	str	r3, [r2, #48]	; 0x30
 80092a4:	4b3c      	ldr	r3, [pc, #240]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092b0:	4b39      	ldr	r3, [pc, #228]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	4a38      	ldr	r2, [pc, #224]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092b6:	f043 0301 	orr.w	r3, r3, #1
 80092ba:	6313      	str	r3, [r2, #48]	; 0x30
 80092bc:	4b36      	ldr	r3, [pc, #216]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092c8:	4b33      	ldr	r3, [pc, #204]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092cc:	4a32      	ldr	r2, [pc, #200]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092ce:	f043 0302 	orr.w	r3, r3, #2
 80092d2:	6313      	str	r3, [r2, #48]	; 0x30
 80092d4:	4b30      	ldr	r3, [pc, #192]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092e0:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e4:	4a2c      	ldr	r2, [pc, #176]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	6313      	str	r3, [r2, #48]	; 0x30
 80092ec:	4b2a      	ldr	r3, [pc, #168]	; (8009398 <HAL_ETH_MspInit+0x16c>)
 80092ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f4:	60bb      	str	r3, [r7, #8]
 80092f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80092f8:	2332      	movs	r3, #50	; 0x32
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fc:	2302      	movs	r3, #2
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009300:	2300      	movs	r3, #0
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009304:	2303      	movs	r3, #3
 8009306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009308:	230b      	movs	r3, #11
 800930a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800930c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009310:	4619      	mov	r1, r3
 8009312:	4822      	ldr	r0, [pc, #136]	; (800939c <HAL_ETH_MspInit+0x170>)
 8009314:	f7fa ff7c 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009318:	2386      	movs	r3, #134	; 0x86
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931c:	2302      	movs	r3, #2
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009320:	2300      	movs	r3, #0
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009324:	2303      	movs	r3, #3
 8009326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009328:	230b      	movs	r3, #11
 800932a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800932c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009330:	4619      	mov	r1, r3
 8009332:	481b      	ldr	r0, [pc, #108]	; (80093a0 <HAL_ETH_MspInit+0x174>)
 8009334:	f7fa ff6c 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933e:	2302      	movs	r3, #2
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009342:	2300      	movs	r3, #0
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009346:	2303      	movs	r3, #3
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800934a:	230b      	movs	r3, #11
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800934e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009352:	4619      	mov	r1, r3
 8009354:	4813      	ldr	r0, [pc, #76]	; (80093a4 <HAL_ETH_MspInit+0x178>)
 8009356:	f7fa ff5b 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800935a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009360:	2302      	movs	r3, #2
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009364:	2300      	movs	r3, #0
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009368:	2303      	movs	r3, #3
 800936a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800936c:	230b      	movs	r3, #11
 800936e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009374:	4619      	mov	r1, r3
 8009376:	480c      	ldr	r0, [pc, #48]	; (80093a8 <HAL_ETH_MspInit+0x17c>)
 8009378:	f7fa ff4a 	bl	8004210 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	203d      	movs	r0, #61	; 0x3d
 8009382:	f7f9 f8c0 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009386:	203d      	movs	r0, #61	; 0x3d
 8009388:	f7f9 f8d9 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800938c:	bf00      	nop
 800938e:	3738      	adds	r7, #56	; 0x38
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40028000 	.word	0x40028000
 8009398:	40023800 	.word	0x40023800
 800939c:	40020800 	.word	0x40020800
 80093a0:	40020000 	.word	0x40020000
 80093a4:	40020400 	.word	0x40020400
 80093a8:	40021800 	.word	0x40021800

080093ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80093b0:	4802      	ldr	r0, [pc, #8]	; (80093bc <ETH_PHY_IO_Init+0x10>)
 80093b2:	f7fa fad3 	bl	800395c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20005604 	.word	0x20005604

080093c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
  return 0;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	68f9      	ldr	r1, [r7, #12]
 80093e2:	4807      	ldr	r0, [pc, #28]	; (8009400 <ETH_PHY_IO_ReadReg+0x30>)
 80093e4:	f7fa f922 	bl	800362c <HAL_ETH_ReadPHYRegister>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e000      	b.n	80093f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20005604 	.word	0x20005604

08009404 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	68f9      	ldr	r1, [r7, #12]
 8009416:	4807      	ldr	r0, [pc, #28]	; (8009434 <ETH_PHY_IO_WriteReg+0x30>)
 8009418:	f7fa f953 	bl	80036c2 <HAL_ETH_WritePHYRegister>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	e000      	b.n	800942a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20005604 	.word	0x20005604

08009438 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800943c:	f7f8 fcc4 	bl	8001dc8 <HAL_GetTick>
 8009440:	4603      	mov	r3, r0
}
 8009442:	4618      	mov	r0, r3
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b0a0      	sub	sp, #128	; 0x80
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009450:	f107 030c 	add.w	r3, r7, #12
 8009454:	2264      	movs	r2, #100	; 0x64
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f00a fc4d 	bl	8013cf8 <memset>
  int32_t PHYLinkState = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009466:	2300      	movs	r3, #0
 8009468:	67bb      	str	r3, [r7, #120]	; 0x78
 800946a:	2300      	movs	r3, #0
 800946c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800946e:	483a      	ldr	r0, [pc, #232]	; (8009558 <ethernet_link_check_state+0x110>)
 8009470:	f7f8 fbd1 	bl	8001c16 <LAN8742_GetLinkState>
 8009474:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800947c:	089b      	lsrs	r3, r3, #2
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <ethernet_link_check_state+0x5a>
 8009488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800948a:	2b01      	cmp	r3, #1
 800948c:	dc09      	bgt.n	80094a2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800948e:	4833      	ldr	r0, [pc, #204]	; (800955c <ethernet_link_check_state+0x114>)
 8009490:	f7f9 fdb3 	bl	8002ffa <HAL_ETH_Stop>
    netif_set_down(netif);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 f81d 	bl	800a4d4 <netif_set_down>
    netif_set_link_down(netif);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 f880 	bl	800a5a0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80094a0:	e055      	b.n	800954e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d14e      	bne.n	800954e <ethernet_link_check_state+0x106>
 80094b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	dd4b      	ble.n	800954e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80094b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094b8:	3b02      	subs	r3, #2
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d82a      	bhi.n	8009514 <ethernet_link_check_state+0xcc>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <ethernet_link_check_state+0x7c>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094e7 	.word	0x080094e7
 80094cc:	080094f7 	.word	0x080094f7
 80094d0:	08009507 	.word	0x08009507
      duplex = ETH_FULLDUPLEX_MODE;
 80094d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80094da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80094e0:	2301      	movs	r3, #1
 80094e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80094e4:	e017      	b.n	8009516 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80094e6:	2300      	movs	r3, #0
 80094e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80094ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80094f0:	2301      	movs	r3, #1
 80094f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80094f4:	e00f      	b.n	8009516 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80094f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094fa:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80094fc:	2300      	movs	r3, #0
 80094fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009500:	2301      	movs	r3, #1
 8009502:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009504:	e007      	b.n	8009516 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009506:	2300      	movs	r3, #0
 8009508:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800950a:	2300      	movs	r3, #0
 800950c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800950e:	2301      	movs	r3, #1
 8009510:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009512:	e000      	b.n	8009516 <ethernet_link_check_state+0xce>
      break;
 8009514:	bf00      	nop
    if(linkchanged)
 8009516:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d018      	beq.n	800954e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	4619      	mov	r1, r3
 8009522:	480e      	ldr	r0, [pc, #56]	; (800955c <ethernet_link_check_state+0x114>)
 8009524:	f7fa f916 	bl	8003754 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800952c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800952e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	4619      	mov	r1, r3
 8009536:	4809      	ldr	r0, [pc, #36]	; (800955c <ethernet_link_check_state+0x114>)
 8009538:	f7fa f9f6 	bl	8003928 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800953c:	4807      	ldr	r0, [pc, #28]	; (800955c <ethernet_link_check_state+0x114>)
 800953e:	f7f9 fcfd 	bl	8002f3c <HAL_ETH_Start>
      netif_set_up(netif);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 ff5a 	bl	800a3fc <netif_set_up>
      netif_set_link_up(netif);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fff5 	bl	800a538 <netif_set_link_up>
}
 800954e:	bf00      	nop
 8009550:	3780      	adds	r7, #128	; 0x80
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200056ec 	.word	0x200056ec
 800955c:	20005604 	.word	0x20005604

08009560 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af02      	add	r7, sp, #8
 8009566:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009568:	4812      	ldr	r0, [pc, #72]	; (80095b4 <HAL_ETH_RxAllocateCallback+0x54>)
 800956a:	f000 fcc1 	bl	8009ef0 <memp_malloc_pool>
 800956e:	60f8      	str	r0, [r7, #12]
  if (p)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d014      	beq.n	80095a0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f103 0220 	add.w	r2, r3, #32
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a0d      	ldr	r2, [pc, #52]	; (80095b8 <HAL_ETH_RxAllocateCallback+0x58>)
 8009584:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800958e:	9201      	str	r2, [sp, #4]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2241      	movs	r2, #65	; 0x41
 8009596:	2100      	movs	r1, #0
 8009598:	2000      	movs	r0, #0
 800959a:	f001 f9f7 	bl	800a98c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800959e:	e005      	b.n	80095ac <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <HAL_ETH_RxAllocateCallback+0x5c>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	08017b64 	.word	0x08017b64
 80095b8:	080091e9 	.word	0x080091e9
 80095bc:	20005600 	.word	0x20005600

080095c0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3b20      	subs	r3, #32
 80095de:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	2200      	movs	r2, #0
 80095ea:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	887a      	ldrh	r2, [r7, #2]
 80095f0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d103      	bne.n	8009602 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	e003      	b.n	800960a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	61fb      	str	r3, [r7, #28]
 8009616:	e009      	b.n	800962c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	891a      	ldrh	r2, [r3, #8]
 800961c:	887b      	ldrh	r3, [r7, #2]
 800961e:	4413      	add	r3, r2
 8009620:	b29a      	uxth	r2, r3
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	61fb      	str	r3, [r7, #28]
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f2      	bne.n	8009618 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009632:	887b      	ldrh	r3, [r7, #2]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fc28 	bl	8008e8c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800963c:	bf00      	nop
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800964e:	88fb      	ldrh	r3, [r7, #6]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	b21a      	sxth	r2, r3
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b29b      	uxth	r3, r3
 800965a:	b21b      	sxth	r3, r3
 800965c:	4313      	orrs	r3, r2
 800965e:	b21b      	sxth	r3, r3
 8009660:	b29b      	uxth	r3, r3
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	061a      	lsls	r2, r3, #24
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800968c:	431a      	orrs	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	0e1b      	lsrs	r3, r3, #24
 8009692:	4313      	orrs	r3, r2
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80096aa:	f000 f8d5 	bl	8009858 <mem_init>
  memp_init();
 80096ae:	f000 fbdb 	bl	8009e68 <memp_init>
  pbuf_init();
  netif_init();
 80096b2:	f000 fcd9 	bl	800a068 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80096b6:	f007 f8f9 	bl	80108ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80096ba:	f001 fe51 	bl	800b360 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80096be:	f007 f86b 	bl	8010798 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <ptr_to_mem+0x20>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	88fb      	ldrh	r3, [r7, #6]
 80096dc:	4413      	add	r3, r2
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	20005d78 	.word	0x20005d78

080096f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <mem_to_ptr+0x20>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20005d78 	.word	0x20005d78

08009714 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800971c:	4b45      	ldr	r3, [pc, #276]	; (8009834 <plug_holes+0x120>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	429a      	cmp	r2, r3
 8009724:	d206      	bcs.n	8009734 <plug_holes+0x20>
 8009726:	4b44      	ldr	r3, [pc, #272]	; (8009838 <plug_holes+0x124>)
 8009728:	f240 12df 	movw	r2, #479	; 0x1df
 800972c:	4943      	ldr	r1, [pc, #268]	; (800983c <plug_holes+0x128>)
 800972e:	4844      	ldr	r0, [pc, #272]	; (8009840 <plug_holes+0x12c>)
 8009730:	f00a faea 	bl	8013d08 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009734:	4b43      	ldr	r3, [pc, #268]	; (8009844 <plug_holes+0x130>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	429a      	cmp	r2, r3
 800973c:	d306      	bcc.n	800974c <plug_holes+0x38>
 800973e:	4b3e      	ldr	r3, [pc, #248]	; (8009838 <plug_holes+0x124>)
 8009740:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009744:	4940      	ldr	r1, [pc, #256]	; (8009848 <plug_holes+0x134>)
 8009746:	483e      	ldr	r0, [pc, #248]	; (8009840 <plug_holes+0x12c>)
 8009748:	f00a fade 	bl	8013d08 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	791b      	ldrb	r3, [r3, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <plug_holes+0x4e>
 8009754:	4b38      	ldr	r3, [pc, #224]	; (8009838 <plug_holes+0x124>)
 8009756:	f240 12e1 	movw	r2, #481	; 0x1e1
 800975a:	493c      	ldr	r1, [pc, #240]	; (800984c <plug_holes+0x138>)
 800975c:	4838      	ldr	r0, [pc, #224]	; (8009840 <plug_holes+0x12c>)
 800975e:	f00a fad3 	bl	8013d08 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800976a:	d906      	bls.n	800977a <plug_holes+0x66>
 800976c:	4b32      	ldr	r3, [pc, #200]	; (8009838 <plug_holes+0x124>)
 800976e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009772:	4937      	ldr	r1, [pc, #220]	; (8009850 <plug_holes+0x13c>)
 8009774:	4832      	ldr	r0, [pc, #200]	; (8009840 <plug_holes+0x12c>)
 8009776:	f00a fac7 	bl	8013d08 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff ffa4 	bl	80096cc <ptr_to_mem>
 8009784:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	429a      	cmp	r2, r3
 800978c:	d024      	beq.n	80097d8 <plug_holes+0xc4>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	791b      	ldrb	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d120      	bne.n	80097d8 <plug_holes+0xc4>
 8009796:	4b2b      	ldr	r3, [pc, #172]	; (8009844 <plug_holes+0x130>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	429a      	cmp	r2, r3
 800979e:	d01b      	beq.n	80097d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80097a0:	4b2c      	ldr	r3, [pc, #176]	; (8009854 <plug_holes+0x140>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d102      	bne.n	80097b0 <plug_holes+0x9c>
      lfree = mem;
 80097aa:	4a2a      	ldr	r2, [pc, #168]	; (8009854 <plug_holes+0x140>)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	881a      	ldrh	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097c0:	d00a      	beq.n	80097d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff ff80 	bl	80096cc <ptr_to_mem>
 80097cc:	4604      	mov	r4, r0
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff ff8e 	bl	80096f0 <mem_to_ptr>
 80097d4:	4603      	mov	r3, r0
 80097d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	885b      	ldrh	r3, [r3, #2]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ff75 	bl	80096cc <ptr_to_mem>
 80097e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d01f      	beq.n	800982c <plug_holes+0x118>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	791b      	ldrb	r3, [r3, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d11b      	bne.n	800982c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80097f4:	4b17      	ldr	r3, [pc, #92]	; (8009854 <plug_holes+0x140>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d102      	bne.n	8009804 <plug_holes+0xf0>
      lfree = pmem;
 80097fe:	4a15      	ldr	r2, [pc, #84]	; (8009854 <plug_holes+0x140>)
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	881a      	ldrh	r2, [r3, #0]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009814:	d00a      	beq.n	800982c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff ff56 	bl	80096cc <ptr_to_mem>
 8009820:	4604      	mov	r4, r0
 8009822:	68b8      	ldr	r0, [r7, #8]
 8009824:	f7ff ff64 	bl	80096f0 <mem_to_ptr>
 8009828:	4603      	mov	r3, r0
 800982a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800982c:	bf00      	nop
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	bd90      	pop	{r4, r7, pc}
 8009834:	20005d78 	.word	0x20005d78
 8009838:	0801517c 	.word	0x0801517c
 800983c:	080151ac 	.word	0x080151ac
 8009840:	080151c4 	.word	0x080151c4
 8009844:	20005d7c 	.word	0x20005d7c
 8009848:	080151ec 	.word	0x080151ec
 800984c:	08015208 	.word	0x08015208
 8009850:	08015224 	.word	0x08015224
 8009854:	20005d80 	.word	0x20005d80

08009858 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800985e:	4b18      	ldr	r3, [pc, #96]	; (80098c0 <mem_init+0x68>)
 8009860:	3303      	adds	r3, #3
 8009862:	f023 0303 	bic.w	r3, r3, #3
 8009866:	461a      	mov	r2, r3
 8009868:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <mem_init+0x6c>)
 800986a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800986c:	4b15      	ldr	r3, [pc, #84]	; (80098c4 <mem_init+0x6c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009878:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009886:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800988a:	f7ff ff1f 	bl	80096cc <ptr_to_mem>
 800988e:	4603      	mov	r3, r0
 8009890:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <mem_init+0x70>)
 8009892:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009894:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <mem_init+0x70>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2201      	movs	r2, #1
 800989a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <mem_init+0x70>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80098a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80098a6:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <mem_init+0x70>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80098ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <mem_init+0x6c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a05      	ldr	r2, [pc, #20]	; (80098cc <mem_init+0x74>)
 80098b6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20005724 	.word	0x20005724
 80098c4:	20005d78 	.word	0x20005d78
 80098c8:	20005d7c 	.word	0x20005d7c
 80098cc:	20005d80 	.word	0x20005d80

080098d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ff09 	bl	80096f0 <mem_to_ptr>
 80098de:	4603      	mov	r3, r0
 80098e0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fef0 	bl	80096cc <ptr_to_mem>
 80098ec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	885b      	ldrh	r3, [r3, #2]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff feea 	bl	80096cc <ptr_to_mem>
 80098f8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009902:	d818      	bhi.n	8009936 <mem_link_valid+0x66>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	885b      	ldrh	r3, [r3, #2]
 8009908:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800990c:	d813      	bhi.n	8009936 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009912:	8afa      	ldrh	r2, [r7, #22]
 8009914:	429a      	cmp	r2, r3
 8009916:	d004      	beq.n	8009922 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	8afa      	ldrh	r2, [r7, #22]
 800991e:	429a      	cmp	r2, r3
 8009920:	d109      	bne.n	8009936 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009922:	4b08      	ldr	r3, [pc, #32]	; (8009944 <mem_link_valid+0x74>)
 8009924:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	429a      	cmp	r2, r3
 800992a:	d006      	beq.n	800993a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	885b      	ldrh	r3, [r3, #2]
 8009930:	8afa      	ldrh	r2, [r7, #22]
 8009932:	429a      	cmp	r2, r3
 8009934:	d001      	beq.n	800993a <mem_link_valid+0x6a>
    return 0;
 8009936:	2300      	movs	r3, #0
 8009938:	e000      	b.n	800993c <mem_link_valid+0x6c>
  }
  return 1;
 800993a:	2301      	movs	r3, #1
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20005d7c 	.word	0x20005d7c

08009948 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d04c      	beq.n	80099f0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f003 0303 	and.w	r3, r3, #3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009960:	4b25      	ldr	r3, [pc, #148]	; (80099f8 <mem_free+0xb0>)
 8009962:	f240 2273 	movw	r2, #627	; 0x273
 8009966:	4925      	ldr	r1, [pc, #148]	; (80099fc <mem_free+0xb4>)
 8009968:	4825      	ldr	r0, [pc, #148]	; (8009a00 <mem_free+0xb8>)
 800996a:	f00a f9cd 	bl	8013d08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800996e:	e040      	b.n	80099f2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3b08      	subs	r3, #8
 8009974:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009976:	4b23      	ldr	r3, [pc, #140]	; (8009a04 <mem_free+0xbc>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	429a      	cmp	r2, r3
 800997e:	d306      	bcc.n	800998e <mem_free+0x46>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f103 020c 	add.w	r2, r3, #12
 8009986:	4b20      	ldr	r3, [pc, #128]	; (8009a08 <mem_free+0xc0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d907      	bls.n	800999e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800998e:	4b1a      	ldr	r3, [pc, #104]	; (80099f8 <mem_free+0xb0>)
 8009990:	f240 227f 	movw	r2, #639	; 0x27f
 8009994:	491d      	ldr	r1, [pc, #116]	; (8009a0c <mem_free+0xc4>)
 8009996:	481a      	ldr	r0, [pc, #104]	; (8009a00 <mem_free+0xb8>)
 8009998:	f00a f9b6 	bl	8013d08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800999c:	e029      	b.n	80099f2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	791b      	ldrb	r3, [r3, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d107      	bne.n	80099b6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <mem_free+0xb0>)
 80099a8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80099ac:	4918      	ldr	r1, [pc, #96]	; (8009a10 <mem_free+0xc8>)
 80099ae:	4814      	ldr	r0, [pc, #80]	; (8009a00 <mem_free+0xb8>)
 80099b0:	f00a f9aa 	bl	8013d08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80099b4:	e01d      	b.n	80099f2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff ff8a 	bl	80098d0 <mem_link_valid>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d107      	bne.n	80099d2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80099c2:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <mem_free+0xb0>)
 80099c4:	f240 2295 	movw	r2, #661	; 0x295
 80099c8:	4912      	ldr	r1, [pc, #72]	; (8009a14 <mem_free+0xcc>)
 80099ca:	480d      	ldr	r0, [pc, #52]	; (8009a00 <mem_free+0xb8>)
 80099cc:	f00a f99c 	bl	8013d08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80099d0:	e00f      	b.n	80099f2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80099d8:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <mem_free+0xd0>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d202      	bcs.n	80099e8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80099e2:	4a0d      	ldr	r2, [pc, #52]	; (8009a18 <mem_free+0xd0>)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff fe93 	bl	8009714 <plug_holes>
 80099ee:	e000      	b.n	80099f2 <mem_free+0xaa>
    return;
 80099f0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	0801517c 	.word	0x0801517c
 80099fc:	08015250 	.word	0x08015250
 8009a00:	080151c4 	.word	0x080151c4
 8009a04:	20005d78 	.word	0x20005d78
 8009a08:	20005d7c 	.word	0x20005d7c
 8009a0c:	08015274 	.word	0x08015274
 8009a10:	08015290 	.word	0x08015290
 8009a14:	080152b8 	.word	0x080152b8
 8009a18:	20005d80 	.word	0x20005d80

08009a1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009a28:	887b      	ldrh	r3, [r7, #2]
 8009a2a:	3303      	adds	r3, #3
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f023 0303 	bic.w	r3, r3, #3
 8009a32:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009a34:	8bfb      	ldrh	r3, [r7, #30]
 8009a36:	2b0b      	cmp	r3, #11
 8009a38:	d801      	bhi.n	8009a3e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009a3e:	8bfb      	ldrh	r3, [r7, #30]
 8009a40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a44:	d803      	bhi.n	8009a4e <mem_trim+0x32>
 8009a46:	8bfa      	ldrh	r2, [r7, #30]
 8009a48:	887b      	ldrh	r3, [r7, #2]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d201      	bcs.n	8009a52 <mem_trim+0x36>
    return NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e0cc      	b.n	8009bec <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009a52:	4b68      	ldr	r3, [pc, #416]	; (8009bf4 <mem_trim+0x1d8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d304      	bcc.n	8009a66 <mem_trim+0x4a>
 8009a5c:	4b66      	ldr	r3, [pc, #408]	; (8009bf8 <mem_trim+0x1dc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d306      	bcc.n	8009a74 <mem_trim+0x58>
 8009a66:	4b65      	ldr	r3, [pc, #404]	; (8009bfc <mem_trim+0x1e0>)
 8009a68:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009a6c:	4964      	ldr	r1, [pc, #400]	; (8009c00 <mem_trim+0x1e4>)
 8009a6e:	4865      	ldr	r0, [pc, #404]	; (8009c04 <mem_trim+0x1e8>)
 8009a70:	f00a f94a 	bl	8013d08 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009a74:	4b5f      	ldr	r3, [pc, #380]	; (8009bf4 <mem_trim+0x1d8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d304      	bcc.n	8009a88 <mem_trim+0x6c>
 8009a7e:	4b5e      	ldr	r3, [pc, #376]	; (8009bf8 <mem_trim+0x1dc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d301      	bcc.n	8009a8c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	e0af      	b.n	8009bec <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3b08      	subs	r3, #8
 8009a90:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f7ff fe2c 	bl	80096f0 <mem_to_ptr>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	881a      	ldrh	r2, [r3, #0]
 8009aa0:	8afb      	ldrh	r3, [r7, #22]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3b08      	subs	r3, #8
 8009aa8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009aaa:	8bfa      	ldrh	r2, [r7, #30]
 8009aac:	8abb      	ldrh	r3, [r7, #20]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d906      	bls.n	8009ac0 <mem_trim+0xa4>
 8009ab2:	4b52      	ldr	r3, [pc, #328]	; (8009bfc <mem_trim+0x1e0>)
 8009ab4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009ab8:	4953      	ldr	r1, [pc, #332]	; (8009c08 <mem_trim+0x1ec>)
 8009aba:	4852      	ldr	r0, [pc, #328]	; (8009c04 <mem_trim+0x1e8>)
 8009abc:	f00a f924 	bl	8013d08 <iprintf>
  if (newsize > size) {
 8009ac0:	8bfa      	ldrh	r2, [r7, #30]
 8009ac2:	8abb      	ldrh	r3, [r7, #20]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d901      	bls.n	8009acc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e08f      	b.n	8009bec <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009acc:	8bfa      	ldrh	r2, [r7, #30]
 8009ace:	8abb      	ldrh	r3, [r7, #20]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d101      	bne.n	8009ad8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	e089      	b.n	8009bec <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff fdf5 	bl	80096cc <ptr_to_mem>
 8009ae2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	791b      	ldrb	r3, [r3, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d13f      	bne.n	8009b6c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009af4:	d106      	bne.n	8009b04 <mem_trim+0xe8>
 8009af6:	4b41      	ldr	r3, [pc, #260]	; (8009bfc <mem_trim+0x1e0>)
 8009af8:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009afc:	4943      	ldr	r1, [pc, #268]	; (8009c0c <mem_trim+0x1f0>)
 8009afe:	4841      	ldr	r0, [pc, #260]	; (8009c04 <mem_trim+0x1e8>)
 8009b00:	f00a f902 	bl	8013d08 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b0a:	8afa      	ldrh	r2, [r7, #22]
 8009b0c:	8bfb      	ldrh	r3, [r7, #30]
 8009b0e:	4413      	add	r3, r2
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3308      	adds	r3, #8
 8009b14:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009b16:	4b3e      	ldr	r3, [pc, #248]	; (8009c10 <mem_trim+0x1f4>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d106      	bne.n	8009b2e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009b20:	89fb      	ldrh	r3, [r7, #14]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fdd2 	bl	80096cc <ptr_to_mem>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	4a39      	ldr	r2, [pc, #228]	; (8009c10 <mem_trim+0x1f4>)
 8009b2c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009b2e:	89fb      	ldrh	r3, [r7, #14]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff fdcb 	bl	80096cc <ptr_to_mem>
 8009b36:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	89ba      	ldrh	r2, [r7, #12]
 8009b42:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	8afa      	ldrh	r2, [r7, #22]
 8009b48:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	89fa      	ldrh	r2, [r7, #14]
 8009b4e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b58:	d047      	beq.n	8009bea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff fdb4 	bl	80096cc <ptr_to_mem>
 8009b64:	4602      	mov	r2, r0
 8009b66:	89fb      	ldrh	r3, [r7, #14]
 8009b68:	8053      	strh	r3, [r2, #2]
 8009b6a:	e03e      	b.n	8009bea <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009b6c:	8bfb      	ldrh	r3, [r7, #30]
 8009b6e:	f103 0214 	add.w	r2, r3, #20
 8009b72:	8abb      	ldrh	r3, [r7, #20]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d838      	bhi.n	8009bea <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b78:	8afa      	ldrh	r2, [r7, #22]
 8009b7a:	8bfb      	ldrh	r3, [r7, #30]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	3308      	adds	r3, #8
 8009b82:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b8c:	d106      	bne.n	8009b9c <mem_trim+0x180>
 8009b8e:	4b1b      	ldr	r3, [pc, #108]	; (8009bfc <mem_trim+0x1e0>)
 8009b90:	f240 3216 	movw	r2, #790	; 0x316
 8009b94:	491d      	ldr	r1, [pc, #116]	; (8009c0c <mem_trim+0x1f0>)
 8009b96:	481b      	ldr	r0, [pc, #108]	; (8009c04 <mem_trim+0x1e8>)
 8009b98:	f00a f8b6 	bl	8013d08 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009b9c:	89fb      	ldrh	r3, [r7, #14]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fd94 	bl	80096cc <ptr_to_mem>
 8009ba4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009ba6:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <mem_trim+0x1f4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d202      	bcs.n	8009bb6 <mem_trim+0x19a>
      lfree = mem2;
 8009bb0:	4a17      	ldr	r2, [pc, #92]	; (8009c10 <mem_trim+0x1f4>)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	881a      	ldrh	r2, [r3, #0]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	8afa      	ldrh	r2, [r7, #22]
 8009bc8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	89fa      	ldrh	r2, [r7, #14]
 8009bce:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009bd8:	d007      	beq.n	8009bea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff fd74 	bl	80096cc <ptr_to_mem>
 8009be4:	4602      	mov	r2, r0
 8009be6:	89fb      	ldrh	r3, [r7, #14]
 8009be8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009bea:	687b      	ldr	r3, [r7, #4]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20005d78 	.word	0x20005d78
 8009bf8:	20005d7c 	.word	0x20005d7c
 8009bfc:	0801517c 	.word	0x0801517c
 8009c00:	080152ec 	.word	0x080152ec
 8009c04:	080151c4 	.word	0x080151c4
 8009c08:	08015304 	.word	0x08015304
 8009c0c:	08015324 	.word	0x08015324
 8009c10:	20005d80 	.word	0x20005d80

08009c14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009c1e:	88fb      	ldrh	r3, [r7, #6]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <mem_malloc+0x14>
    return NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e0d9      	b.n	8009ddc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009c28:	88fb      	ldrh	r3, [r7, #6]
 8009c2a:	3303      	adds	r3, #3
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f023 0303 	bic.w	r3, r3, #3
 8009c32:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009c34:	8bbb      	ldrh	r3, [r7, #28]
 8009c36:	2b0b      	cmp	r3, #11
 8009c38:	d801      	bhi.n	8009c3e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009c3e:	8bbb      	ldrh	r3, [r7, #28]
 8009c40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c44:	d803      	bhi.n	8009c4e <mem_malloc+0x3a>
 8009c46:	8bba      	ldrh	r2, [r7, #28]
 8009c48:	88fb      	ldrh	r3, [r7, #6]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d201      	bcs.n	8009c52 <mem_malloc+0x3e>
    return NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e0c4      	b.n	8009ddc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c52:	4b64      	ldr	r3, [pc, #400]	; (8009de4 <mem_malloc+0x1d0>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff fd4a 	bl	80096f0 <mem_to_ptr>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	83fb      	strh	r3, [r7, #30]
 8009c60:	e0b4      	b.n	8009dcc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009c62:	8bfb      	ldrh	r3, [r7, #30]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff fd31 	bl	80096cc <ptr_to_mem>
 8009c6a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	791b      	ldrb	r3, [r3, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f040 80a4 	bne.w	8009dbe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	8bfb      	ldrh	r3, [r7, #30]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	f1a3 0208 	sub.w	r2, r3, #8
 8009c84:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009c86:	429a      	cmp	r2, r3
 8009c88:	f0c0 8099 	bcc.w	8009dbe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	8bfb      	ldrh	r3, [r7, #30]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	f1a3 0208 	sub.w	r2, r3, #8
 8009c9a:	8bbb      	ldrh	r3, [r7, #28]
 8009c9c:	3314      	adds	r3, #20
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d333      	bcc.n	8009d0a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009ca2:	8bfa      	ldrh	r2, [r7, #30]
 8009ca4:	8bbb      	ldrh	r3, [r7, #28]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3308      	adds	r3, #8
 8009cac:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009cae:	8a7b      	ldrh	r3, [r7, #18]
 8009cb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009cb4:	d106      	bne.n	8009cc4 <mem_malloc+0xb0>
 8009cb6:	4b4c      	ldr	r3, [pc, #304]	; (8009de8 <mem_malloc+0x1d4>)
 8009cb8:	f240 3287 	movw	r2, #903	; 0x387
 8009cbc:	494b      	ldr	r1, [pc, #300]	; (8009dec <mem_malloc+0x1d8>)
 8009cbe:	484c      	ldr	r0, [pc, #304]	; (8009df0 <mem_malloc+0x1dc>)
 8009cc0:	f00a f822 	bl	8013d08 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009cc4:	8a7b      	ldrh	r3, [r7, #18]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fd00 	bl	80096cc <ptr_to_mem>
 8009ccc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	881a      	ldrh	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	8bfa      	ldrh	r2, [r7, #30]
 8009ce0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	8a7a      	ldrh	r2, [r7, #18]
 8009ce6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2201      	movs	r2, #1
 8009cec:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009cf6:	d00b      	beq.n	8009d10 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fce5 	bl	80096cc <ptr_to_mem>
 8009d02:	4602      	mov	r2, r0
 8009d04:	8a7b      	ldrh	r3, [r7, #18]
 8009d06:	8053      	strh	r3, [r2, #2]
 8009d08:	e002      	b.n	8009d10 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009d10:	4b34      	ldr	r3, [pc, #208]	; (8009de4 <mem_malloc+0x1d0>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d127      	bne.n	8009d6a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009d1a:	4b32      	ldr	r3, [pc, #200]	; (8009de4 <mem_malloc+0x1d0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009d20:	e005      	b.n	8009d2e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fcd0 	bl	80096cc <ptr_to_mem>
 8009d2c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	791b      	ldrb	r3, [r3, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d004      	beq.n	8009d40 <mem_malloc+0x12c>
 8009d36:	4b2f      	ldr	r3, [pc, #188]	; (8009df4 <mem_malloc+0x1e0>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d1f0      	bne.n	8009d22 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009d40:	4a28      	ldr	r2, [pc, #160]	; (8009de4 <mem_malloc+0x1d0>)
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009d46:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <mem_malloc+0x1d0>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <mem_malloc+0x1e0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d00b      	beq.n	8009d6a <mem_malloc+0x156>
 8009d52:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <mem_malloc+0x1d0>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	791b      	ldrb	r3, [r3, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <mem_malloc+0x156>
 8009d5c:	4b22      	ldr	r3, [pc, #136]	; (8009de8 <mem_malloc+0x1d4>)
 8009d5e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009d62:	4925      	ldr	r1, [pc, #148]	; (8009df8 <mem_malloc+0x1e4>)
 8009d64:	4822      	ldr	r0, [pc, #136]	; (8009df0 <mem_malloc+0x1dc>)
 8009d66:	f009 ffcf 	bl	8013d08 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d6a:	8bba      	ldrh	r2, [r7, #28]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4413      	add	r3, r2
 8009d70:	3308      	adds	r3, #8
 8009d72:	4a20      	ldr	r2, [pc, #128]	; (8009df4 <mem_malloc+0x1e0>)
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d906      	bls.n	8009d88 <mem_malloc+0x174>
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <mem_malloc+0x1d4>)
 8009d7c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009d80:	491e      	ldr	r1, [pc, #120]	; (8009dfc <mem_malloc+0x1e8>)
 8009d82:	481b      	ldr	r0, [pc, #108]	; (8009df0 <mem_malloc+0x1dc>)
 8009d84:	f009 ffc0 	bl	8013d08 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d006      	beq.n	8009da0 <mem_malloc+0x18c>
 8009d92:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <mem_malloc+0x1d4>)
 8009d94:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009d98:	4919      	ldr	r1, [pc, #100]	; (8009e00 <mem_malloc+0x1ec>)
 8009d9a:	4815      	ldr	r0, [pc, #84]	; (8009df0 <mem_malloc+0x1dc>)
 8009d9c:	f009 ffb4 	bl	8013d08 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d006      	beq.n	8009db8 <mem_malloc+0x1a4>
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <mem_malloc+0x1d4>)
 8009dac:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009db0:	4914      	ldr	r1, [pc, #80]	; (8009e04 <mem_malloc+0x1f0>)
 8009db2:	480f      	ldr	r0, [pc, #60]	; (8009df0 <mem_malloc+0x1dc>)
 8009db4:	f009 ffa8 	bl	8013d08 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	e00e      	b.n	8009ddc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009dbe:	8bfb      	ldrh	r3, [r7, #30]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fc83 	bl	80096cc <ptr_to_mem>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009dcc:	8bfa      	ldrh	r2, [r7, #30]
 8009dce:	8bbb      	ldrh	r3, [r7, #28]
 8009dd0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	f4ff af44 	bcc.w	8009c62 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20005d80 	.word	0x20005d80
 8009de8:	0801517c 	.word	0x0801517c
 8009dec:	08015324 	.word	0x08015324
 8009df0:	080151c4 	.word	0x080151c4
 8009df4:	20005d7c 	.word	0x20005d7c
 8009df8:	08015338 	.word	0x08015338
 8009dfc:	08015354 	.word	0x08015354
 8009e00:	08015384 	.word	0x08015384
 8009e04:	080153b4 	.word	0x080153b4

08009e08 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	3303      	adds	r3, #3
 8009e1e:	f023 0303 	bic.w	r3, r3, #3
 8009e22:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	e011      	b.n	8009e4e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	4413      	add	r3, r2
 8009e46:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	885b      	ldrh	r3, [r3, #2]
 8009e52:	461a      	mov	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	dbe7      	blt.n	8009e2a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009e5a:	bf00      	nop
 8009e5c:	bf00      	nop
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e6e:	2300      	movs	r3, #0
 8009e70:	80fb      	strh	r3, [r7, #6]
 8009e72:	e009      	b.n	8009e88 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009e74:	88fb      	ldrh	r3, [r7, #6]
 8009e76:	4a08      	ldr	r2, [pc, #32]	; (8009e98 <memp_init+0x30>)
 8009e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff ffc3 	bl	8009e08 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	3301      	adds	r3, #1
 8009e86:	80fb      	strh	r3, [r7, #6]
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d9f2      	bls.n	8009e74 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	08017bdc 	.word	0x08017bdc

08009e9c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d012      	beq.n	8009ed8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	6812      	ldr	r2, [r2, #0]
 8009eba:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <do_memp_malloc_pool+0x38>
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <do_memp_malloc_pool+0x48>)
 8009ec8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009ecc:	4906      	ldr	r1, [pc, #24]	; (8009ee8 <do_memp_malloc_pool+0x4c>)
 8009ece:	4807      	ldr	r0, [pc, #28]	; (8009eec <do_memp_malloc_pool+0x50>)
 8009ed0:	f009 ff1a 	bl	8013d08 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	e000      	b.n	8009eda <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	080153d8 	.word	0x080153d8
 8009ee8:	08015408 	.word	0x08015408
 8009eec:	0801542c 	.word	0x0801542c

08009ef0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <memp_malloc_pool+0x1c>
 8009efe:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <memp_malloc_pool+0x38>)
 8009f00:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009f04:	4909      	ldr	r1, [pc, #36]	; (8009f2c <memp_malloc_pool+0x3c>)
 8009f06:	480a      	ldr	r0, [pc, #40]	; (8009f30 <memp_malloc_pool+0x40>)
 8009f08:	f009 fefe 	bl	8013d08 <iprintf>
  if (desc == NULL) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <memp_malloc_pool+0x26>
    return NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e003      	b.n	8009f1e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff ffc0 	bl	8009e9c <do_memp_malloc_pool>
 8009f1c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	080153d8 	.word	0x080153d8
 8009f2c:	08015454 	.word	0x08015454
 8009f30:	0801542c 	.word	0x0801542c

08009f34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d908      	bls.n	8009f56 <memp_malloc+0x22>
 8009f44:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <memp_malloc+0x3c>)
 8009f46:	f240 1257 	movw	r2, #343	; 0x157
 8009f4a:	490a      	ldr	r1, [pc, #40]	; (8009f74 <memp_malloc+0x40>)
 8009f4c:	480a      	ldr	r0, [pc, #40]	; (8009f78 <memp_malloc+0x44>)
 8009f4e:	f009 fedb 	bl	8013d08 <iprintf>
 8009f52:	2300      	movs	r3, #0
 8009f54:	e008      	b.n	8009f68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	4a08      	ldr	r2, [pc, #32]	; (8009f7c <memp_malloc+0x48>)
 8009f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff ff9c 	bl	8009e9c <do_memp_malloc_pool>
 8009f64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009f66:	68fb      	ldr	r3, [r7, #12]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	080153d8 	.word	0x080153d8
 8009f74:	08015468 	.word	0x08015468
 8009f78:	0801542c 	.word	0x0801542c
 8009f7c:	08017bdc 	.word	0x08017bdc

08009f80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d006      	beq.n	8009fa2 <do_memp_free_pool+0x22>
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <do_memp_free_pool+0x40>)
 8009f96:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009f9a:	490a      	ldr	r1, [pc, #40]	; (8009fc4 <do_memp_free_pool+0x44>)
 8009f9c:	480a      	ldr	r0, [pc, #40]	; (8009fc8 <do_memp_free_pool+0x48>)
 8009f9e:	f009 feb3 	bl	8013d08 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009fb8:	bf00      	nop
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	080153d8 	.word	0x080153d8
 8009fc4:	08015488 	.word	0x08015488
 8009fc8:	0801542c 	.word	0x0801542c

08009fcc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d106      	bne.n	8009fea <memp_free_pool+0x1e>
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <memp_free_pool+0x3c>)
 8009fde:	f240 1295 	movw	r2, #405	; 0x195
 8009fe2:	490a      	ldr	r1, [pc, #40]	; (800a00c <memp_free_pool+0x40>)
 8009fe4:	480a      	ldr	r0, [pc, #40]	; (800a010 <memp_free_pool+0x44>)
 8009fe6:	f009 fe8f 	bl	8013d08 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <memp_free_pool+0x34>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff ffc1 	bl	8009f80 <do_memp_free_pool>
 8009ffe:	e000      	b.n	800a002 <memp_free_pool+0x36>
    return;
 800a000:	bf00      	nop
}
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	080153d8 	.word	0x080153d8
 800a00c:	08015454 	.word	0x08015454
 800a010:	0801542c 	.word	0x0801542c

0800a014 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	2b08      	cmp	r3, #8
 800a024:	d907      	bls.n	800a036 <memp_free+0x22>
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <memp_free+0x44>)
 800a028:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a02c:	490b      	ldr	r1, [pc, #44]	; (800a05c <memp_free+0x48>)
 800a02e:	480c      	ldr	r0, [pc, #48]	; (800a060 <memp_free+0x4c>)
 800a030:	f009 fe6a 	bl	8013d08 <iprintf>
 800a034:	e00c      	b.n	800a050 <memp_free+0x3c>

  if (mem == NULL) {
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	4a09      	ldr	r2, [pc, #36]	; (800a064 <memp_free+0x50>)
 800a040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff ff9a 	bl	8009f80 <do_memp_free_pool>
 800a04c:	e000      	b.n	800a050 <memp_free+0x3c>
    return;
 800a04e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	080153d8 	.word	0x080153d8
 800a05c:	080154a8 	.word	0x080154a8
 800a060:	0801542c 	.word	0x0801542c
 800a064:	08017bdc 	.word	0x08017bdc

0800a068 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a06c:	bf00      	nop
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d108      	bne.n	800a09e <netif_add+0x26>
 800a08c:	4b57      	ldr	r3, [pc, #348]	; (800a1ec <netif_add+0x174>)
 800a08e:	f240 1227 	movw	r2, #295	; 0x127
 800a092:	4957      	ldr	r1, [pc, #348]	; (800a1f0 <netif_add+0x178>)
 800a094:	4857      	ldr	r0, [pc, #348]	; (800a1f4 <netif_add+0x17c>)
 800a096:	f009 fe37 	bl	8013d08 <iprintf>
 800a09a:	2300      	movs	r3, #0
 800a09c:	e0a2      	b.n	800a1e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d108      	bne.n	800a0b6 <netif_add+0x3e>
 800a0a4:	4b51      	ldr	r3, [pc, #324]	; (800a1ec <netif_add+0x174>)
 800a0a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a0aa:	4953      	ldr	r1, [pc, #332]	; (800a1f8 <netif_add+0x180>)
 800a0ac:	4851      	ldr	r0, [pc, #324]	; (800a1f4 <netif_add+0x17c>)
 800a0ae:	f009 fe2b 	bl	8013d08 <iprintf>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e096      	b.n	800a1e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a0bc:	4b4f      	ldr	r3, [pc, #316]	; (800a1fc <netif_add+0x184>)
 800a0be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a0c6:	4b4d      	ldr	r3, [pc, #308]	; (800a1fc <netif_add+0x184>)
 800a0c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a0d0:	4b4a      	ldr	r3, [pc, #296]	; (800a1fc <netif_add+0x184>)
 800a0d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4a45      	ldr	r2, [pc, #276]	; (800a200 <netif_add+0x188>)
 800a0ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a106:	4b3f      	ldr	r3, [pc, #252]	; (800a204 <netif_add+0x18c>)
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a114:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f913 	bl	800a348 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	4798      	blx	r3
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <netif_add+0xba>
    return NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	e058      	b.n	800a1e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a138:	2bff      	cmp	r3, #255	; 0xff
 800a13a:	d103      	bne.n	800a144 <netif_add+0xcc>
        netif->num = 0;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a148:	4b2f      	ldr	r3, [pc, #188]	; (800a208 <netif_add+0x190>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e02b      	b.n	800a1a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	429a      	cmp	r2, r3
 800a156:	d106      	bne.n	800a166 <netif_add+0xee>
 800a158:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <netif_add+0x174>)
 800a15a:	f240 128b 	movw	r2, #395	; 0x18b
 800a15e:	492b      	ldr	r1, [pc, #172]	; (800a20c <netif_add+0x194>)
 800a160:	4824      	ldr	r0, [pc, #144]	; (800a1f4 <netif_add+0x17c>)
 800a162:	f009 fdd1 	bl	8013d08 <iprintf>
        num_netifs++;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3301      	adds	r3, #1
 800a16a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2bff      	cmp	r3, #255	; 0xff
 800a170:	dd06      	ble.n	800a180 <netif_add+0x108>
 800a172:	4b1e      	ldr	r3, [pc, #120]	; (800a1ec <netif_add+0x174>)
 800a174:	f240 128d 	movw	r2, #397	; 0x18d
 800a178:	4925      	ldr	r1, [pc, #148]	; (800a210 <netif_add+0x198>)
 800a17a:	481e      	ldr	r0, [pc, #120]	; (800a1f4 <netif_add+0x17c>)
 800a17c:	f009 fdc4 	bl	8013d08 <iprintf>
        if (netif2->num == netif->num) {
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d108      	bne.n	800a1a2 <netif_add+0x12a>
          netif->num++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a196:	3301      	adds	r3, #1
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a1a0:	e005      	b.n	800a1ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1d0      	bne.n	800a150 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1be      	bne.n	800a132 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1ba:	2bfe      	cmp	r3, #254	; 0xfe
 800a1bc:	d103      	bne.n	800a1c6 <netif_add+0x14e>
    netif_num = 0;
 800a1be:	4b11      	ldr	r3, [pc, #68]	; (800a204 <netif_add+0x18c>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
 800a1c4:	e006      	b.n	800a1d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <netif_add+0x18c>)
 800a1d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <netif_add+0x190>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <netif_add+0x190>)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	080154c4 	.word	0x080154c4
 800a1f0:	08015558 	.word	0x08015558
 800a1f4:	08015514 	.word	0x08015514
 800a1f8:	08015574 	.word	0x08015574
 800a1fc:	08017c40 	.word	0x08017c40
 800a200:	0800a623 	.word	0x0800a623
 800a204:	20008c78 	.word	0x20008c78
 800a208:	20008c70 	.word	0x20008c70
 800a20c:	08015598 	.word	0x08015598
 800a210:	080155ac 	.word	0x080155ac

0800a214 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f002 fbe5 	bl	800c9f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f007 f883 	bl	8011334 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <netif_do_set_ipaddr+0x20>
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <netif_do_set_ipaddr+0x88>)
 800a24c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a250:	491c      	ldr	r1, [pc, #112]	; (800a2c4 <netif_do_set_ipaddr+0x8c>)
 800a252:	481d      	ldr	r0, [pc, #116]	; (800a2c8 <netif_do_set_ipaddr+0x90>)
 800a254:	f009 fd58 	bl	8013d08 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <netif_do_set_ipaddr+0x34>
 800a25e:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <netif_do_set_ipaddr+0x88>)
 800a260:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a264:	4917      	ldr	r1, [pc, #92]	; (800a2c4 <netif_do_set_ipaddr+0x8c>)
 800a266:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <netif_do_set_ipaddr+0x90>)
 800a268:	f009 fd4e 	bl	8013d08 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3304      	adds	r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d01c      	beq.n	800a2b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3304      	adds	r3, #4
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a28a:	f107 0314 	add.w	r3, r7, #20
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ffbf 	bl	800a214 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <netif_do_set_ipaddr+0x6a>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	e000      	b.n	800a2a4 <netif_do_set_ipaddr+0x6c>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f8d2 	bl	800a454 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e000      	b.n	800a2b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	080154c4 	.word	0x080154c4
 800a2c4:	080155dc 	.word	0x080155dc
 800a2c8:	08015514 	.word	0x08015514

0800a2cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d00a      	beq.n	800a2fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <netif_do_set_netmask+0x26>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	e000      	b.n	800a2f4 <netif_do_set_netmask+0x28>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b085      	sub	sp, #20
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	330c      	adds	r3, #12
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d00a      	beq.n	800a33a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <netif_do_set_gw+0x26>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	e000      	b.n	800a332 <netif_do_set_gw+0x28>
 800a330:	2300      	movs	r3, #0
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a364:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <netif_set_addr+0x90>)
 800a366:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a36e:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <netif_set_addr+0x90>)
 800a370:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a378:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <netif_set_addr+0x90>)
 800a37a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <netif_set_addr+0x42>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <netif_set_addr+0x46>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <netif_set_addr+0x48>
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d006      	beq.n	800a3a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a398:	f107 0310 	add.w	r3, r7, #16
 800a39c:	461a      	mov	r2, r3
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f7ff ff49 	bl	800a238 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff ff8e 	bl	800a2cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff ffa8 	bl	800a30a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d106      	bne.n	800a3ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a3c0:	f107 0310 	add.w	r3, r7, #16
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff ff35 	bl	800a238 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a3ce:	bf00      	nop
 800a3d0:	3720      	adds	r7, #32
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	08017c40 	.word	0x08017c40

0800a3dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a3e4:	4a04      	ldr	r2, [pc, #16]	; (800a3f8 <netif_set_default+0x1c>)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a3ea:	bf00      	nop
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20008c74 	.word	0x20008c74

0800a3fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d107      	bne.n	800a41a <netif_set_up+0x1e>
 800a40a:	4b0f      	ldr	r3, [pc, #60]	; (800a448 <netif_set_up+0x4c>)
 800a40c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a410:	490e      	ldr	r1, [pc, #56]	; (800a44c <netif_set_up+0x50>)
 800a412:	480f      	ldr	r0, [pc, #60]	; (800a450 <netif_set_up+0x54>)
 800a414:	f009 fc78 	bl	8013d08 <iprintf>
 800a418:	e013      	b.n	800a442 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10c      	bne.n	800a442 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	b2da      	uxtb	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a43a:	2103      	movs	r1, #3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f809 	bl	800a454 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	080154c4 	.word	0x080154c4
 800a44c:	0801564c 	.word	0x0801564c
 800a450:	08015514 	.word	0x08015514

0800a454 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <netif_issue_reports+0x20>
 800a466:	4b18      	ldr	r3, [pc, #96]	; (800a4c8 <netif_issue_reports+0x74>)
 800a468:	f240 326d 	movw	r2, #877	; 0x36d
 800a46c:	4917      	ldr	r1, [pc, #92]	; (800a4cc <netif_issue_reports+0x78>)
 800a46e:	4818      	ldr	r0, [pc, #96]	; (800a4d0 <netif_issue_reports+0x7c>)
 800a470:	f009 fc4a 	bl	8013d08 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a47a:	f003 0304 	and.w	r3, r3, #4
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01e      	beq.n	800a4c0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a488:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d017      	beq.n	800a4c0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d013      	beq.n	800a4c2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3304      	adds	r3, #4
 800a49e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00e      	beq.n	800a4c2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4aa:	f003 0308 	and.w	r3, r3, #8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d007      	beq.n	800a4c2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f007 fea5 	bl	8012208 <etharp_request>
 800a4be:	e000      	b.n	800a4c2 <netif_issue_reports+0x6e>
    return;
 800a4c0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	080154c4 	.word	0x080154c4
 800a4cc:	08015668 	.word	0x08015668
 800a4d0:	08015514 	.word	0x08015514

0800a4d4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d107      	bne.n	800a4f2 <netif_set_down+0x1e>
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <netif_set_down+0x58>)
 800a4e4:	f240 329b 	movw	r2, #923	; 0x39b
 800a4e8:	4911      	ldr	r1, [pc, #68]	; (800a530 <netif_set_down+0x5c>)
 800a4ea:	4812      	ldr	r0, [pc, #72]	; (800a534 <netif_set_down+0x60>)
 800a4ec:	f009 fc0c 	bl	8013d08 <iprintf>
 800a4f0:	e019      	b.n	800a526 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d012      	beq.n	800a526 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a506:	f023 0301 	bic.w	r3, r3, #1
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f007 fa2f 	bl	8011984 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	080154c4 	.word	0x080154c4
 800a530:	0801568c 	.word	0x0801568c
 800a534:	08015514 	.word	0x08015514

0800a538 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d107      	bne.n	800a556 <netif_set_link_up+0x1e>
 800a546:	4b13      	ldr	r3, [pc, #76]	; (800a594 <netif_set_link_up+0x5c>)
 800a548:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a54c:	4912      	ldr	r1, [pc, #72]	; (800a598 <netif_set_link_up+0x60>)
 800a54e:	4813      	ldr	r0, [pc, #76]	; (800a59c <netif_set_link_up+0x64>)
 800a550:	f009 fbda 	bl	8013d08 <iprintf>
 800a554:	e01b      	b.n	800a58e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d114      	bne.n	800a58e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a56a:	f043 0304 	orr.w	r3, r3, #4
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a576:	2103      	movs	r1, #3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff ff6b 	bl	800a454 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <netif_set_link_up+0x56>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	080154c4 	.word	0x080154c4
 800a598:	080156ac 	.word	0x080156ac
 800a59c:	08015514 	.word	0x08015514

0800a5a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d107      	bne.n	800a5be <netif_set_link_down+0x1e>
 800a5ae:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <netif_set_link_down+0x54>)
 800a5b0:	f240 4206 	movw	r2, #1030	; 0x406
 800a5b4:	4910      	ldr	r1, [pc, #64]	; (800a5f8 <netif_set_link_down+0x58>)
 800a5b6:	4811      	ldr	r0, [pc, #68]	; (800a5fc <netif_set_link_down+0x5c>)
 800a5b8:	f009 fba6 	bl	8013d08 <iprintf>
 800a5bc:	e017      	b.n	800a5ee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d010      	beq.n	800a5ee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5d2:	f023 0304 	bic.w	r3, r3, #4
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <netif_set_link_down+0x4e>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	080154c4 	.word	0x080154c4
 800a5f8:	080156d0 	.word	0x080156d0
 800a5fc:	08015514 	.word	0x08015514

0800a600 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	61da      	str	r2, [r3, #28]
  }
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a622:	b480      	push	{r7}
 800a624:	b085      	sub	sp, #20
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a62e:	f06f 030b 	mvn.w	r3, #11
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
	...

0800a640 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d013      	beq.n	800a678 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a650:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <netif_get_by_index+0x48>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	e00c      	b.n	800a672 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a65e:	3301      	adds	r3, #1
 800a660:	b2db      	uxtb	r3, r3
 800a662:	79fa      	ldrb	r2, [r7, #7]
 800a664:	429a      	cmp	r2, r3
 800a666:	d101      	bne.n	800a66c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	e006      	b.n	800a67a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1ef      	bne.n	800a658 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	20008c70 	.word	0x20008c70

0800a68c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <pbuf_free_ooseq+0x38>)
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a698:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <pbuf_free_ooseq+0x3c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	607b      	str	r3, [r7, #4]
 800a69e:	e00a      	b.n	800a6b6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f002 f9df 	bl	800ca6c <tcp_free_ooseq>
      return;
 800a6ae:	e005      	b.n	800a6bc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1f1      	bne.n	800a6a0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20008c79 	.word	0x20008c79
 800a6c8:	20008c88 	.word	0x20008c88

0800a6cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a6d0:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <pbuf_pool_is_empty+0x14>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a6d6:	bf00      	nop
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	20008c79 	.word	0x20008c79

0800a6e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	80fb      	strh	r3, [r7, #6]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	88fa      	ldrh	r2, [r7, #6]
 800a70a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	88ba      	ldrh	r2, [r7, #4]
 800a710:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a712:	8b3b      	ldrh	r3, [r7, #24]
 800a714:	b2da      	uxtb	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	7f3a      	ldrb	r2, [r7, #28]
 800a71e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	73da      	strb	r2, [r3, #15]
}
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08c      	sub	sp, #48	; 0x30
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
 800a742:	460b      	mov	r3, r1
 800a744:	80bb      	strh	r3, [r7, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a74e:	887b      	ldrh	r3, [r7, #2]
 800a750:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a754:	d07f      	beq.n	800a856 <pbuf_alloc+0x11e>
 800a756:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a75a:	f300 80c8 	bgt.w	800a8ee <pbuf_alloc+0x1b6>
 800a75e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a762:	d010      	beq.n	800a786 <pbuf_alloc+0x4e>
 800a764:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a768:	f300 80c1 	bgt.w	800a8ee <pbuf_alloc+0x1b6>
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d002      	beq.n	800a776 <pbuf_alloc+0x3e>
 800a770:	2b41      	cmp	r3, #65	; 0x41
 800a772:	f040 80bc 	bne.w	800a8ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a776:	887a      	ldrh	r2, [r7, #2]
 800a778:	88bb      	ldrh	r3, [r7, #4]
 800a77a:	4619      	mov	r1, r3
 800a77c:	2000      	movs	r0, #0
 800a77e:	f000 f8d1 	bl	800a924 <pbuf_alloc_reference>
 800a782:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a784:	e0bd      	b.n	800a902 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a786:	2300      	movs	r3, #0
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a78e:	88bb      	ldrh	r3, [r7, #4]
 800a790:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a792:	2008      	movs	r0, #8
 800a794:	f7ff fbce 	bl	8009f34 <memp_malloc>
 800a798:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d109      	bne.n	800a7b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a7a0:	f7ff ff94 	bl	800a6cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a7aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7ac:	f000 faa8 	bl	800ad00 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e0a7      	b.n	800a904 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7b6:	3303      	adds	r3, #3
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	8b7a      	ldrh	r2, [r7, #26]
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	bf28      	it	cs
 800a7cc:	4613      	movcs	r3, r2
 800a7ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a7d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7d2:	3310      	adds	r3, #16
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3303      	adds	r3, #3
 800a7da:	f023 0303 	bic.w	r3, r3, #3
 800a7de:	4618      	mov	r0, r3
 800a7e0:	89f9      	ldrh	r1, [r7, #14]
 800a7e2:	8b7a      	ldrh	r2, [r7, #26]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	887b      	ldrh	r3, [r7, #2]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4601      	mov	r1, r0
 800a7f0:	6938      	ldr	r0, [r7, #16]
 800a7f2:	f7ff ff77 	bl	800a6e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d006      	beq.n	800a810 <pbuf_alloc+0xd8>
 800a802:	4b42      	ldr	r3, [pc, #264]	; (800a90c <pbuf_alloc+0x1d4>)
 800a804:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a808:	4941      	ldr	r1, [pc, #260]	; (800a910 <pbuf_alloc+0x1d8>)
 800a80a:	4842      	ldr	r0, [pc, #264]	; (800a914 <pbuf_alloc+0x1dc>)
 800a80c:	f009 fa7c 	bl	8013d08 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a812:	3303      	adds	r3, #3
 800a814:	f023 0303 	bic.w	r3, r3, #3
 800a818:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a81c:	d106      	bne.n	800a82c <pbuf_alloc+0xf4>
 800a81e:	4b3b      	ldr	r3, [pc, #236]	; (800a90c <pbuf_alloc+0x1d4>)
 800a820:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a824:	493c      	ldr	r1, [pc, #240]	; (800a918 <pbuf_alloc+0x1e0>)
 800a826:	483b      	ldr	r0, [pc, #236]	; (800a914 <pbuf_alloc+0x1dc>)
 800a828:	f009 fa6e 	bl	8013d08 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	627b      	str	r3, [r7, #36]	; 0x24
 800a836:	e002      	b.n	800a83e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a842:	8b7a      	ldrh	r2, [r7, #26]
 800a844:	89fb      	ldrh	r3, [r7, #14]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a84e:	8b7b      	ldrh	r3, [r7, #26]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d19e      	bne.n	800a792 <pbuf_alloc+0x5a>
      break;
 800a854:	e055      	b.n	800a902 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a858:	3303      	adds	r3, #3
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	b29a      	uxth	r2, r3
 800a862:	88bb      	ldrh	r3, [r7, #4]
 800a864:	3303      	adds	r3, #3
 800a866:	b29b      	uxth	r3, r3
 800a868:	f023 0303 	bic.w	r3, r3, #3
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	4413      	add	r3, r2
 800a870:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a872:	8b3b      	ldrh	r3, [r7, #24]
 800a874:	3310      	adds	r3, #16
 800a876:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a878:	8b3a      	ldrh	r2, [r7, #24]
 800a87a:	88bb      	ldrh	r3, [r7, #4]
 800a87c:	3303      	adds	r3, #3
 800a87e:	f023 0303 	bic.w	r3, r3, #3
 800a882:	429a      	cmp	r2, r3
 800a884:	d306      	bcc.n	800a894 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a886:	8afa      	ldrh	r2, [r7, #22]
 800a888:	88bb      	ldrh	r3, [r7, #4]
 800a88a:	3303      	adds	r3, #3
 800a88c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a890:	429a      	cmp	r2, r3
 800a892:	d201      	bcs.n	800a898 <pbuf_alloc+0x160>
        return NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	e035      	b.n	800a904 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a898:	8afb      	ldrh	r3, [r7, #22]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff f9ba 	bl	8009c14 <mem_malloc>
 800a8a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <pbuf_alloc+0x174>
        return NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	e02b      	b.n	800a904 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a8ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8ae:	3310      	adds	r3, #16
 800a8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3303      	adds	r3, #3
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	88b9      	ldrh	r1, [r7, #4]
 800a8be:	88ba      	ldrh	r2, [r7, #4]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	887b      	ldrh	r3, [r7, #2]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8ce:	f7ff ff09 	bl	800a6e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f003 0303 	and.w	r3, r3, #3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d010      	beq.n	800a900 <pbuf_alloc+0x1c8>
 800a8de:	4b0b      	ldr	r3, [pc, #44]	; (800a90c <pbuf_alloc+0x1d4>)
 800a8e0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a8e4:	490d      	ldr	r1, [pc, #52]	; (800a91c <pbuf_alloc+0x1e4>)
 800a8e6:	480b      	ldr	r0, [pc, #44]	; (800a914 <pbuf_alloc+0x1dc>)
 800a8e8:	f009 fa0e 	bl	8013d08 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a8ec:	e008      	b.n	800a900 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a8ee:	4b07      	ldr	r3, [pc, #28]	; (800a90c <pbuf_alloc+0x1d4>)
 800a8f0:	f240 1227 	movw	r2, #295	; 0x127
 800a8f4:	490a      	ldr	r1, [pc, #40]	; (800a920 <pbuf_alloc+0x1e8>)
 800a8f6:	4807      	ldr	r0, [pc, #28]	; (800a914 <pbuf_alloc+0x1dc>)
 800a8f8:	f009 fa06 	bl	8013d08 <iprintf>
      return NULL;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e001      	b.n	800a904 <pbuf_alloc+0x1cc>
      break;
 800a900:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a904:	4618      	mov	r0, r3
 800a906:	3728      	adds	r7, #40	; 0x28
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	080156f4 	.word	0x080156f4
 800a910:	08015724 	.word	0x08015724
 800a914:	08015754 	.word	0x08015754
 800a918:	0801577c 	.word	0x0801577c
 800a91c:	080157b0 	.word	0x080157b0
 800a920:	080157dc 	.word	0x080157dc

0800a924 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af02      	add	r7, sp, #8
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	807b      	strh	r3, [r7, #2]
 800a930:	4613      	mov	r3, r2
 800a932:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a934:	883b      	ldrh	r3, [r7, #0]
 800a936:	2b41      	cmp	r3, #65	; 0x41
 800a938:	d009      	beq.n	800a94e <pbuf_alloc_reference+0x2a>
 800a93a:	883b      	ldrh	r3, [r7, #0]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d006      	beq.n	800a94e <pbuf_alloc_reference+0x2a>
 800a940:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <pbuf_alloc_reference+0x5c>)
 800a942:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a946:	490f      	ldr	r1, [pc, #60]	; (800a984 <pbuf_alloc_reference+0x60>)
 800a948:	480f      	ldr	r0, [pc, #60]	; (800a988 <pbuf_alloc_reference+0x64>)
 800a94a:	f009 f9dd 	bl	8013d08 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a94e:	2007      	movs	r0, #7
 800a950:	f7ff faf0 	bl	8009f34 <memp_malloc>
 800a954:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	e00b      	b.n	800a978 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a960:	8879      	ldrh	r1, [r7, #2]
 800a962:	887a      	ldrh	r2, [r7, #2]
 800a964:	2300      	movs	r3, #0
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	883b      	ldrh	r3, [r7, #0]
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	460b      	mov	r3, r1
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff feb7 	bl	800a6e4 <pbuf_init_alloced_pbuf>
  return p;
 800a976:	68fb      	ldr	r3, [r7, #12]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	080156f4 	.word	0x080156f4
 800a984:	080157f8 	.word	0x080157f8
 800a988:	08015754 	.word	0x08015754

0800a98c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af02      	add	r7, sp, #8
 800a992:	607b      	str	r3, [r7, #4]
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
 800a998:	460b      	mov	r3, r1
 800a99a:	81bb      	strh	r3, [r7, #12]
 800a99c:	4613      	mov	r3, r2
 800a99e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a9a4:	8a7b      	ldrh	r3, [r7, #18]
 800a9a6:	3303      	adds	r3, #3
 800a9a8:	f023 0203 	bic.w	r2, r3, #3
 800a9ac:	89bb      	ldrh	r3, [r7, #12]
 800a9ae:	441a      	add	r2, r3
 800a9b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d901      	bls.n	800a9ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e018      	b.n	800a9ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a9c0:	8a7b      	ldrh	r3, [r7, #18]
 800a9c2:	3303      	adds	r3, #3
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	6a3a      	ldr	r2, [r7, #32]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]
 800a9ce:	e001      	b.n	800a9d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	89b9      	ldrh	r1, [r7, #12]
 800a9d8:	89ba      	ldrh	r2, [r7, #12]
 800a9da:	2302      	movs	r3, #2
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	897b      	ldrh	r3, [r7, #10]
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	6979      	ldr	r1, [r7, #20]
 800a9e6:	f7ff fe7d 	bl	800a6e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a9ea:	687b      	ldr	r3, [r7, #4]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <pbuf_realloc+0x20>
 800aa06:	4b3a      	ldr	r3, [pc, #232]	; (800aaf0 <pbuf_realloc+0xfc>)
 800aa08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800aa0c:	4939      	ldr	r1, [pc, #228]	; (800aaf4 <pbuf_realloc+0x100>)
 800aa0e:	483a      	ldr	r0, [pc, #232]	; (800aaf8 <pbuf_realloc+0x104>)
 800aa10:	f009 f97a 	bl	8013d08 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	891b      	ldrh	r3, [r3, #8]
 800aa18:	887a      	ldrh	r2, [r7, #2]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d263      	bcs.n	800aae6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	891a      	ldrh	r2, [r3, #8]
 800aa22:	887b      	ldrh	r3, [r7, #2]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800aa28:	887b      	ldrh	r3, [r7, #2]
 800aa2a:	817b      	strh	r3, [r7, #10]
  q = p;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800aa30:	e018      	b.n	800aa64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	895b      	ldrh	r3, [r3, #10]
 800aa36:	897a      	ldrh	r2, [r7, #10]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	891a      	ldrh	r2, [r3, #8]
 800aa40:	893b      	ldrh	r3, [r7, #8]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <pbuf_realloc+0x70>
 800aa56:	4b26      	ldr	r3, [pc, #152]	; (800aaf0 <pbuf_realloc+0xfc>)
 800aa58:	f240 12af 	movw	r2, #431	; 0x1af
 800aa5c:	4927      	ldr	r1, [pc, #156]	; (800aafc <pbuf_realloc+0x108>)
 800aa5e:	4826      	ldr	r0, [pc, #152]	; (800aaf8 <pbuf_realloc+0x104>)
 800aa60:	f009 f952 	bl	8013d08 <iprintf>
  while (rem_len > q->len) {
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	895b      	ldrh	r3, [r3, #10]
 800aa68:	897a      	ldrh	r2, [r7, #10]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d8e1      	bhi.n	800aa32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	7b1b      	ldrb	r3, [r3, #12]
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d121      	bne.n	800aabe <pbuf_realloc+0xca>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	895b      	ldrh	r3, [r3, #10]
 800aa7e:	897a      	ldrh	r2, [r7, #10]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d01c      	beq.n	800aabe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	7b5b      	ldrb	r3, [r3, #13]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d116      	bne.n	800aabe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	897b      	ldrh	r3, [r7, #10]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7fe ffba 	bl	8009a1c <mem_trim>
 800aaa8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <pbuf_realloc+0xca>
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <pbuf_realloc+0xfc>)
 800aab2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800aab6:	4912      	ldr	r1, [pc, #72]	; (800ab00 <pbuf_realloc+0x10c>)
 800aab8:	480f      	ldr	r0, [pc, #60]	; (800aaf8 <pbuf_realloc+0x104>)
 800aaba:	f009 f925 	bl	8013d08 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	897a      	ldrh	r2, [r7, #10]
 800aac2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	895a      	ldrh	r2, [r3, #10]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f911 	bl	800ad00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	e000      	b.n	800aae8 <pbuf_realloc+0xf4>
    return;
 800aae6:	bf00      	nop

}
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	080156f4 	.word	0x080156f4
 800aaf4:	0801580c 	.word	0x0801580c
 800aaf8:	08015754 	.word	0x08015754
 800aafc:	08015824 	.word	0x08015824
 800ab00:	0801583c 	.word	0x0801583c

0800ab04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <pbuf_add_header_impl+0x22>
 800ab18:	4b2b      	ldr	r3, [pc, #172]	; (800abc8 <pbuf_add_header_impl+0xc4>)
 800ab1a:	f240 12df 	movw	r2, #479	; 0x1df
 800ab1e:	492b      	ldr	r1, [pc, #172]	; (800abcc <pbuf_add_header_impl+0xc8>)
 800ab20:	482b      	ldr	r0, [pc, #172]	; (800abd0 <pbuf_add_header_impl+0xcc>)
 800ab22:	f009 f8f1 	bl	8013d08 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <pbuf_add_header_impl+0x30>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab32:	d301      	bcc.n	800ab38 <pbuf_add_header_impl+0x34>
    return 1;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e043      	b.n	800abc0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <pbuf_add_header_impl+0x3e>
    return 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e03e      	b.n	800abc0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	891a      	ldrh	r2, [r3, #8]
 800ab4a:	8a7b      	ldrh	r3, [r7, #18]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	8a7a      	ldrh	r2, [r7, #18]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d901      	bls.n	800ab5a <pbuf_add_header_impl+0x56>
    return 1;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e032      	b.n	800abc0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	7b1b      	ldrb	r3, [r3, #12]
 800ab5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ab60:	8a3b      	ldrh	r3, [r7, #16]
 800ab62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00c      	beq.n	800ab84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	425b      	negs	r3, r3
 800ab72:	4413      	add	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3310      	adds	r3, #16
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d20d      	bcs.n	800ab9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e01d      	b.n	800abc0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d006      	beq.n	800ab98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	425b      	negs	r3, r3
 800ab92:	4413      	add	r3, r2
 800ab94:	617b      	str	r3, [r7, #20]
 800ab96:	e001      	b.n	800ab9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e011      	b.n	800abc0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	895a      	ldrh	r2, [r3, #10]
 800aba6:	8a7b      	ldrh	r3, [r7, #18]
 800aba8:	4413      	add	r3, r2
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	891a      	ldrh	r2, [r3, #8]
 800abb4:	8a7b      	ldrh	r3, [r7, #18]
 800abb6:	4413      	add	r3, r2
 800abb8:	b29a      	uxth	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	811a      	strh	r2, [r3, #8]


  return 0;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	080156f4 	.word	0x080156f4
 800abcc:	08015858 	.word	0x08015858
 800abd0:	08015754 	.word	0x08015754

0800abd4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800abde:	2200      	movs	r2, #0
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff ff8e 	bl	800ab04 <pbuf_add_header_impl>
 800abe8:	4603      	mov	r3, r0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d106      	bne.n	800ac12 <pbuf_remove_header+0x1e>
 800ac04:	4b20      	ldr	r3, [pc, #128]	; (800ac88 <pbuf_remove_header+0x94>)
 800ac06:	f240 224b 	movw	r2, #587	; 0x24b
 800ac0a:	4920      	ldr	r1, [pc, #128]	; (800ac8c <pbuf_remove_header+0x98>)
 800ac0c:	4820      	ldr	r0, [pc, #128]	; (800ac90 <pbuf_remove_header+0x9c>)
 800ac0e:	f009 f87b 	bl	8013d08 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <pbuf_remove_header+0x2c>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac1e:	d301      	bcc.n	800ac24 <pbuf_remove_header+0x30>
    return 1;
 800ac20:	2301      	movs	r3, #1
 800ac22:	e02c      	b.n	800ac7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <pbuf_remove_header+0x3a>
    return 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e027      	b.n	800ac7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	895b      	ldrh	r3, [r3, #10]
 800ac36:	89fa      	ldrh	r2, [r7, #14]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d908      	bls.n	800ac4e <pbuf_remove_header+0x5a>
 800ac3c:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <pbuf_remove_header+0x94>)
 800ac3e:	f240 2255 	movw	r2, #597	; 0x255
 800ac42:	4914      	ldr	r1, [pc, #80]	; (800ac94 <pbuf_remove_header+0xa0>)
 800ac44:	4812      	ldr	r0, [pc, #72]	; (800ac90 <pbuf_remove_header+0x9c>)
 800ac46:	f009 f85f 	bl	8013d08 <iprintf>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e017      	b.n	800ac7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	441a      	add	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	895a      	ldrh	r2, [r3, #10]
 800ac64:	89fb      	ldrh	r3, [r7, #14]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	891a      	ldrh	r2, [r3, #8]
 800ac72:	89fb      	ldrh	r3, [r7, #14]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	080156f4 	.word	0x080156f4
 800ac8c:	08015858 	.word	0x08015858
 800ac90:	08015754 	.word	0x08015754
 800ac94:	08015864 	.word	0x08015864

0800ac98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	807b      	strh	r3, [r7, #2]
 800aca4:	4613      	mov	r3, r2
 800aca6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aca8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da08      	bge.n	800acc2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800acb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acb4:	425b      	negs	r3, r3
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff ff9b 	bl	800abf4 <pbuf_remove_header>
 800acbe:	4603      	mov	r3, r0
 800acc0:	e007      	b.n	800acd2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800acc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acc6:	787a      	ldrb	r2, [r7, #1]
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff ff1a 	bl	800ab04 <pbuf_add_header_impl>
 800acd0:	4603      	mov	r3, r0
  }
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	460b      	mov	r3, r1
 800ace4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ace6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acea:	2201      	movs	r2, #1
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff ffd2 	bl	800ac98 <pbuf_header_impl>
 800acf4:	4603      	mov	r3, r0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <pbuf_free+0x22>
 800ad14:	4b38      	ldr	r3, [pc, #224]	; (800adf8 <pbuf_free+0xf8>)
 800ad16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ad1a:	4938      	ldr	r1, [pc, #224]	; (800adfc <pbuf_free+0xfc>)
 800ad1c:	4838      	ldr	r0, [pc, #224]	; (800ae00 <pbuf_free+0x100>)
 800ad1e:	f008 fff3 	bl	8013d08 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e063      	b.n	800adee <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ad2a:	e05c      	b.n	800ade6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7b9b      	ldrb	r3, [r3, #14]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <pbuf_free+0x42>
 800ad34:	4b30      	ldr	r3, [pc, #192]	; (800adf8 <pbuf_free+0xf8>)
 800ad36:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ad3a:	4932      	ldr	r1, [pc, #200]	; (800ae04 <pbuf_free+0x104>)
 800ad3c:	4830      	ldr	r0, [pc, #192]	; (800ae00 <pbuf_free+0x100>)
 800ad3e:	f008 ffe3 	bl	8013d08 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7b9b      	ldrb	r3, [r3, #14]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	739a      	strb	r2, [r3, #14]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7b9b      	ldrb	r3, [r3, #14]
 800ad52:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ad54:	7dbb      	ldrb	r3, [r7, #22]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d143      	bne.n	800ade2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	7b1b      	ldrb	r3, [r3, #12]
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7b5b      	ldrb	r3, [r3, #13]
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d011      	beq.n	800ad9a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <pbuf_free+0x90>
 800ad82:	4b1d      	ldr	r3, [pc, #116]	; (800adf8 <pbuf_free+0xf8>)
 800ad84:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ad88:	491f      	ldr	r1, [pc, #124]	; (800ae08 <pbuf_free+0x108>)
 800ad8a:	481d      	ldr	r0, [pc, #116]	; (800ae00 <pbuf_free+0x100>)
 800ad8c:	f008 ffbc 	bl	8013d08 <iprintf>
        pc->custom_free_function(p);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	4798      	blx	r3
 800ad98:	e01d      	b.n	800add6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d104      	bne.n	800adaa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	2008      	movs	r0, #8
 800ada4:	f7ff f936 	bl	800a014 <memp_free>
 800ada8:	e015      	b.n	800add6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d104      	bne.n	800adba <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	2007      	movs	r0, #7
 800adb4:	f7ff f92e 	bl	800a014 <memp_free>
 800adb8:	e00d      	b.n	800add6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <pbuf_free+0xc8>
          mem_free(p);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7fe fdc1 	bl	8009948 <mem_free>
 800adc6:	e006      	b.n	800add6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800adc8:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <pbuf_free+0xf8>)
 800adca:	f240 320f 	movw	r2, #783	; 0x30f
 800adce:	490f      	ldr	r1, [pc, #60]	; (800ae0c <pbuf_free+0x10c>)
 800add0:	480b      	ldr	r0, [pc, #44]	; (800ae00 <pbuf_free+0x100>)
 800add2:	f008 ff99 	bl	8013d08 <iprintf>
        }
      }
      count++;
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	3301      	adds	r3, #1
 800adda:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	607b      	str	r3, [r7, #4]
 800ade0:	e001      	b.n	800ade6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d19f      	bne.n	800ad2c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	080156f4 	.word	0x080156f4
 800adfc:	08015858 	.word	0x08015858
 800ae00:	08015754 	.word	0x08015754
 800ae04:	08015884 	.word	0x08015884
 800ae08:	0801589c 	.word	0x0801589c
 800ae0c:	080158c0 	.word	0x080158c0

0800ae10 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ae1c:	e005      	b.n	800ae2a <pbuf_clen+0x1a>
    ++len;
 800ae1e:	89fb      	ldrh	r3, [r7, #14]
 800ae20:	3301      	adds	r3, #1
 800ae22:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f6      	bne.n	800ae1e <pbuf_clen+0xe>
  }
  return len;
 800ae30:	89fb      	ldrh	r3, [r7, #14]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
	...

0800ae40 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d010      	beq.n	800ae70 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7b9b      	ldrb	r3, [r3, #14]
 800ae52:	3301      	adds	r3, #1
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7b9b      	ldrb	r3, [r3, #14]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d106      	bne.n	800ae70 <pbuf_ref+0x30>
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <pbuf_ref+0x38>)
 800ae64:	f240 3242 	movw	r2, #834	; 0x342
 800ae68:	4904      	ldr	r1, [pc, #16]	; (800ae7c <pbuf_ref+0x3c>)
 800ae6a:	4805      	ldr	r0, [pc, #20]	; (800ae80 <pbuf_ref+0x40>)
 800ae6c:	f008 ff4c 	bl	8013d08 <iprintf>
  }
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	080156f4 	.word	0x080156f4
 800ae7c:	080158d4 	.word	0x080158d4
 800ae80:	08015754 	.word	0x08015754

0800ae84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <pbuf_cat+0x16>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d107      	bne.n	800aeaa <pbuf_cat+0x26>
 800ae9a:	4b20      	ldr	r3, [pc, #128]	; (800af1c <pbuf_cat+0x98>)
 800ae9c:	f240 3259 	movw	r2, #857	; 0x359
 800aea0:	491f      	ldr	r1, [pc, #124]	; (800af20 <pbuf_cat+0x9c>)
 800aea2:	4820      	ldr	r0, [pc, #128]	; (800af24 <pbuf_cat+0xa0>)
 800aea4:	f008 ff30 	bl	8013d08 <iprintf>
 800aea8:	e034      	b.n	800af14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	e00a      	b.n	800aec6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	891a      	ldrh	r2, [r3, #8]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	891b      	ldrh	r3, [r3, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f0      	bne.n	800aeb0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	891a      	ldrh	r2, [r3, #8]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	895b      	ldrh	r3, [r3, #10]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d006      	beq.n	800aee8 <pbuf_cat+0x64>
 800aeda:	4b10      	ldr	r3, [pc, #64]	; (800af1c <pbuf_cat+0x98>)
 800aedc:	f240 3262 	movw	r2, #866	; 0x362
 800aee0:	4911      	ldr	r1, [pc, #68]	; (800af28 <pbuf_cat+0xa4>)
 800aee2:	4810      	ldr	r0, [pc, #64]	; (800af24 <pbuf_cat+0xa0>)
 800aee4:	f008 ff10 	bl	8013d08 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d006      	beq.n	800aefe <pbuf_cat+0x7a>
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <pbuf_cat+0x98>)
 800aef2:	f240 3263 	movw	r2, #867	; 0x363
 800aef6:	490d      	ldr	r1, [pc, #52]	; (800af2c <pbuf_cat+0xa8>)
 800aef8:	480a      	ldr	r0, [pc, #40]	; (800af24 <pbuf_cat+0xa0>)
 800aefa:	f008 ff05 	bl	8013d08 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	891a      	ldrh	r2, [r3, #8]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	891b      	ldrh	r3, [r3, #8]
 800af06:	4413      	add	r3, r2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	080156f4 	.word	0x080156f4
 800af20:	080158e8 	.word	0x080158e8
 800af24:	08015754 	.word	0x08015754
 800af28:	08015920 	.word	0x08015920
 800af2c:	08015950 	.word	0x08015950

0800af30 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff ffa1 	bl	800ae84 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800af42:	6838      	ldr	r0, [r7, #0]
 800af44:	f7ff ff7c 	bl	800ae40 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	2300      	movs	r3, #0
 800af60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d008      	beq.n	800af7a <pbuf_copy+0x2a>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d005      	beq.n	800af7a <pbuf_copy+0x2a>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	891a      	ldrh	r2, [r3, #8]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	891b      	ldrh	r3, [r3, #8]
 800af76:	429a      	cmp	r2, r3
 800af78:	d209      	bcs.n	800af8e <pbuf_copy+0x3e>
 800af7a:	4b57      	ldr	r3, [pc, #348]	; (800b0d8 <pbuf_copy+0x188>)
 800af7c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800af80:	4956      	ldr	r1, [pc, #344]	; (800b0dc <pbuf_copy+0x18c>)
 800af82:	4857      	ldr	r0, [pc, #348]	; (800b0e0 <pbuf_copy+0x190>)
 800af84:	f008 fec0 	bl	8013d08 <iprintf>
 800af88:	f06f 030f 	mvn.w	r3, #15
 800af8c:	e09f      	b.n	800b0ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	895b      	ldrh	r3, [r3, #10]
 800af92:	461a      	mov	r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	1ad2      	subs	r2, r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	895b      	ldrh	r3, [r3, #10]
 800af9c:	4619      	mov	r1, r3
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	1acb      	subs	r3, r1, r3
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d306      	bcc.n	800afb4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	895b      	ldrh	r3, [r3, #10]
 800afaa:	461a      	mov	r2, r3
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e005      	b.n	800afc0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	895b      	ldrh	r3, [r3, #10]
 800afb8:	461a      	mov	r2, r3
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	18d0      	adds	r0, r2, r3
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	4413      	add	r3, r2
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4619      	mov	r1, r3
 800afd4:	f008 fe68 	bl	8013ca8 <memcpy>
    offset_to += len;
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	4413      	add	r3, r2
 800afde:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4413      	add	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	895b      	ldrh	r3, [r3, #10]
 800afec:	461a      	mov	r2, r3
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d906      	bls.n	800b002 <pbuf_copy+0xb2>
 800aff4:	4b38      	ldr	r3, [pc, #224]	; (800b0d8 <pbuf_copy+0x188>)
 800aff6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800affa:	493a      	ldr	r1, [pc, #232]	; (800b0e4 <pbuf_copy+0x194>)
 800affc:	4838      	ldr	r0, [pc, #224]	; (800b0e0 <pbuf_copy+0x190>)
 800affe:	f008 fe83 	bl	8013d08 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	895b      	ldrh	r3, [r3, #10]
 800b006:	461a      	mov	r2, r3
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d906      	bls.n	800b01c <pbuf_copy+0xcc>
 800b00e:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <pbuf_copy+0x188>)
 800b010:	f240 32da 	movw	r2, #986	; 0x3da
 800b014:	4934      	ldr	r1, [pc, #208]	; (800b0e8 <pbuf_copy+0x198>)
 800b016:	4832      	ldr	r0, [pc, #200]	; (800b0e0 <pbuf_copy+0x190>)
 800b018:	f008 fe76 	bl	8013d08 <iprintf>
    if (offset_from >= p_from->len) {
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	895b      	ldrh	r3, [r3, #10]
 800b020:	461a      	mov	r2, r3
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	4293      	cmp	r3, r2
 800b026:	d304      	bcc.n	800b032 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	895b      	ldrh	r3, [r3, #10]
 800b036:	461a      	mov	r2, r3
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d114      	bne.n	800b068 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10c      	bne.n	800b068 <pbuf_copy+0x118>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d009      	beq.n	800b068 <pbuf_copy+0x118>
 800b054:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <pbuf_copy+0x188>)
 800b056:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b05a:	4924      	ldr	r1, [pc, #144]	; (800b0ec <pbuf_copy+0x19c>)
 800b05c:	4820      	ldr	r0, [pc, #128]	; (800b0e0 <pbuf_copy+0x190>)
 800b05e:	f008 fe53 	bl	8013d08 <iprintf>
 800b062:	f06f 030f 	mvn.w	r3, #15
 800b066:	e032      	b.n	800b0ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d013      	beq.n	800b096 <pbuf_copy+0x146>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	895a      	ldrh	r2, [r3, #10]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	891b      	ldrh	r3, [r3, #8]
 800b076:	429a      	cmp	r2, r3
 800b078:	d10d      	bne.n	800b096 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d009      	beq.n	800b096 <pbuf_copy+0x146>
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <pbuf_copy+0x188>)
 800b084:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b088:	4919      	ldr	r1, [pc, #100]	; (800b0f0 <pbuf_copy+0x1a0>)
 800b08a:	4815      	ldr	r0, [pc, #84]	; (800b0e0 <pbuf_copy+0x190>)
 800b08c:	f008 fe3c 	bl	8013d08 <iprintf>
 800b090:	f06f 0305 	mvn.w	r3, #5
 800b094:	e01b      	b.n	800b0ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d013      	beq.n	800b0c4 <pbuf_copy+0x174>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	895a      	ldrh	r2, [r3, #10]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	891b      	ldrh	r3, [r3, #8]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d10d      	bne.n	800b0c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d009      	beq.n	800b0c4 <pbuf_copy+0x174>
 800b0b0:	4b09      	ldr	r3, [pc, #36]	; (800b0d8 <pbuf_copy+0x188>)
 800b0b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b0b6:	490e      	ldr	r1, [pc, #56]	; (800b0f0 <pbuf_copy+0x1a0>)
 800b0b8:	4809      	ldr	r0, [pc, #36]	; (800b0e0 <pbuf_copy+0x190>)
 800b0ba:	f008 fe25 	bl	8013d08 <iprintf>
 800b0be:	f06f 0305 	mvn.w	r3, #5
 800b0c2:	e004      	b.n	800b0ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f47f af61 	bne.w	800af8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	080156f4 	.word	0x080156f4
 800b0dc:	0801599c 	.word	0x0801599c
 800b0e0:	08015754 	.word	0x08015754
 800b0e4:	080159cc 	.word	0x080159cc
 800b0e8:	080159e4 	.word	0x080159e4
 800b0ec:	08015a00 	.word	0x08015a00
 800b0f0:	08015a10 	.word	0x08015a10

0800b0f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	4611      	mov	r1, r2
 800b100:	461a      	mov	r2, r3
 800b102:	460b      	mov	r3, r1
 800b104:	80fb      	strh	r3, [r7, #6]
 800b106:	4613      	mov	r3, r2
 800b108:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d108      	bne.n	800b12a <pbuf_copy_partial+0x36>
 800b118:	4b2b      	ldr	r3, [pc, #172]	; (800b1c8 <pbuf_copy_partial+0xd4>)
 800b11a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b11e:	492b      	ldr	r1, [pc, #172]	; (800b1cc <pbuf_copy_partial+0xd8>)
 800b120:	482b      	ldr	r0, [pc, #172]	; (800b1d0 <pbuf_copy_partial+0xdc>)
 800b122:	f008 fdf1 	bl	8013d08 <iprintf>
 800b126:	2300      	movs	r3, #0
 800b128:	e04a      	b.n	800b1c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d108      	bne.n	800b142 <pbuf_copy_partial+0x4e>
 800b130:	4b25      	ldr	r3, [pc, #148]	; (800b1c8 <pbuf_copy_partial+0xd4>)
 800b132:	f240 420b 	movw	r2, #1035	; 0x40b
 800b136:	4927      	ldr	r1, [pc, #156]	; (800b1d4 <pbuf_copy_partial+0xe0>)
 800b138:	4825      	ldr	r0, [pc, #148]	; (800b1d0 <pbuf_copy_partial+0xdc>)
 800b13a:	f008 fde5 	bl	8013d08 <iprintf>
 800b13e:	2300      	movs	r3, #0
 800b140:	e03e      	b.n	800b1c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	e034      	b.n	800b1b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b148:	88bb      	ldrh	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <pbuf_copy_partial+0x70>
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	895b      	ldrh	r3, [r3, #10]
 800b152:	88ba      	ldrh	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d305      	bcc.n	800b164 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	895b      	ldrh	r3, [r3, #10]
 800b15c:	88ba      	ldrh	r2, [r7, #4]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	80bb      	strh	r3, [r7, #4]
 800b162:	e023      	b.n	800b1ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	895a      	ldrh	r2, [r3, #10]
 800b168:	88bb      	ldrh	r3, [r7, #4]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b16e:	8b3a      	ldrh	r2, [r7, #24]
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	429a      	cmp	r2, r3
 800b174:	d901      	bls.n	800b17a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b176:	88fb      	ldrh	r3, [r7, #6]
 800b178:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b17a:	8b7b      	ldrh	r3, [r7, #26]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	18d0      	adds	r0, r2, r3
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	88bb      	ldrh	r3, [r7, #4]
 800b186:	4413      	add	r3, r2
 800b188:	8b3a      	ldrh	r2, [r7, #24]
 800b18a:	4619      	mov	r1, r3
 800b18c:	f008 fd8c 	bl	8013ca8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b190:	8afa      	ldrh	r2, [r7, #22]
 800b192:	8b3b      	ldrh	r3, [r7, #24]
 800b194:	4413      	add	r3, r2
 800b196:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b198:	8b7a      	ldrh	r2, [r7, #26]
 800b19a:	8b3b      	ldrh	r3, [r7, #24]
 800b19c:	4413      	add	r3, r2
 800b19e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b1a0:	88fa      	ldrh	r2, [r7, #6]
 800b1a2:	8b3b      	ldrh	r3, [r7, #24]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	88fb      	ldrh	r3, [r7, #6]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <pbuf_copy_partial+0xca>
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1c4      	bne.n	800b148 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b1be:	8afb      	ldrh	r3, [r7, #22]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3720      	adds	r7, #32
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	080156f4 	.word	0x080156f4
 800b1cc:	08015a3c 	.word	0x08015a3c
 800b1d0:	08015754 	.word	0x08015754
 800b1d4:	08015a5c 	.word	0x08015a5c

0800b1d8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800b1e6:	88fb      	ldrh	r3, [r7, #6]
 800b1e8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d109      	bne.n	800b208 <pbuf_take+0x30>
 800b1f4:	4b3a      	ldr	r3, [pc, #232]	; (800b2e0 <pbuf_take+0x108>)
 800b1f6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800b1fa:	493a      	ldr	r1, [pc, #232]	; (800b2e4 <pbuf_take+0x10c>)
 800b1fc:	483a      	ldr	r0, [pc, #232]	; (800b2e8 <pbuf_take+0x110>)
 800b1fe:	f008 fd83 	bl	8013d08 <iprintf>
 800b202:	f06f 030f 	mvn.w	r3, #15
 800b206:	e067      	b.n	800b2d8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d109      	bne.n	800b222 <pbuf_take+0x4a>
 800b20e:	4b34      	ldr	r3, [pc, #208]	; (800b2e0 <pbuf_take+0x108>)
 800b210:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800b214:	4935      	ldr	r1, [pc, #212]	; (800b2ec <pbuf_take+0x114>)
 800b216:	4834      	ldr	r0, [pc, #208]	; (800b2e8 <pbuf_take+0x110>)
 800b218:	f008 fd76 	bl	8013d08 <iprintf>
 800b21c:	f06f 030f 	mvn.w	r3, #15
 800b220:	e05a      	b.n	800b2d8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	891b      	ldrh	r3, [r3, #8]
 800b226:	88fa      	ldrh	r2, [r7, #6]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d909      	bls.n	800b240 <pbuf_take+0x68>
 800b22c:	4b2c      	ldr	r3, [pc, #176]	; (800b2e0 <pbuf_take+0x108>)
 800b22e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800b232:	492f      	ldr	r1, [pc, #188]	; (800b2f0 <pbuf_take+0x118>)
 800b234:	482c      	ldr	r0, [pc, #176]	; (800b2e8 <pbuf_take+0x110>)
 800b236:	f008 fd67 	bl	8013d08 <iprintf>
 800b23a:	f04f 33ff 	mov.w	r3, #4294967295
 800b23e:	e04b      	b.n	800b2d8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d007      	beq.n	800b256 <pbuf_take+0x7e>
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <pbuf_take+0x7e>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	891b      	ldrh	r3, [r3, #8]
 800b250:	88fa      	ldrh	r2, [r7, #6]
 800b252:	429a      	cmp	r2, r3
 800b254:	d902      	bls.n	800b25c <pbuf_take+0x84>
    return ERR_ARG;
 800b256:	f06f 030f 	mvn.w	r3, #15
 800b25a:	e03d      	b.n	800b2d8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	61fb      	str	r3, [r7, #28]
 800b260:	e028      	b.n	800b2b4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <pbuf_take+0x9e>
 800b268:	4b1d      	ldr	r3, [pc, #116]	; (800b2e0 <pbuf_take+0x108>)
 800b26a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800b26e:	4921      	ldr	r1, [pc, #132]	; (800b2f4 <pbuf_take+0x11c>)
 800b270:	481d      	ldr	r0, [pc, #116]	; (800b2e8 <pbuf_take+0x110>)
 800b272:	f008 fd49 	bl	8013d08 <iprintf>
    buf_copy_len = total_copy_len;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	895b      	ldrh	r3, [r3, #10]
 800b27e:	461a      	mov	r2, r3
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	4293      	cmp	r3, r2
 800b284:	d902      	bls.n	800b28c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	895b      	ldrh	r3, [r3, #10]
 800b28a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	6858      	ldr	r0, [r3, #4]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	4413      	add	r3, r2
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	4619      	mov	r1, r3
 800b29a:	f008 fd05 	bl	8013ca8 <memcpy>
    total_copy_len -= buf_copy_len;
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1d3      	bne.n	800b262 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d103      	bne.n	800b2c8 <pbuf_take+0xf0>
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d006      	beq.n	800b2d6 <pbuf_take+0xfe>
 800b2c8:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <pbuf_take+0x108>)
 800b2ca:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800b2ce:	490a      	ldr	r1, [pc, #40]	; (800b2f8 <pbuf_take+0x120>)
 800b2d0:	4805      	ldr	r0, [pc, #20]	; (800b2e8 <pbuf_take+0x110>)
 800b2d2:	f008 fd19 	bl	8013d08 <iprintf>
  return ERR_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3720      	adds	r7, #32
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	080156f4 	.word	0x080156f4
 800b2e4:	08015acc 	.word	0x08015acc
 800b2e8:	08015754 	.word	0x08015754
 800b2ec:	08015ae4 	.word	0x08015ae4
 800b2f0:	08015b00 	.word	0x08015b00
 800b2f4:	08015b20 	.word	0x08015b20
 800b2f8:	08015b38 	.word	0x08015b38

0800b2fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	603a      	str	r2, [r7, #0]
 800b306:	71fb      	strb	r3, [r7, #7]
 800b308:	460b      	mov	r3, r1
 800b30a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	8919      	ldrh	r1, [r3, #8]
 800b310:	88ba      	ldrh	r2, [r7, #4]
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff fa0f 	bl	800a738 <pbuf_alloc>
 800b31a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <pbuf_clone+0x2a>
    return NULL;
 800b322:	2300      	movs	r3, #0
 800b324:	e011      	b.n	800b34a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f7ff fe11 	bl	800af50 <pbuf_copy>
 800b32e:	4603      	mov	r3, r0
 800b330:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b332:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d006      	beq.n	800b348 <pbuf_clone+0x4c>
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <pbuf_clone+0x58>)
 800b33c:	f240 5224 	movw	r2, #1316	; 0x524
 800b340:	4905      	ldr	r1, [pc, #20]	; (800b358 <pbuf_clone+0x5c>)
 800b342:	4806      	ldr	r0, [pc, #24]	; (800b35c <pbuf_clone+0x60>)
 800b344:	f008 fce0 	bl	8013d08 <iprintf>
  return q;
 800b348:	68fb      	ldr	r3, [r7, #12]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	080156f4 	.word	0x080156f4
 800b358:	08015b68 	.word	0x08015b68
 800b35c:	08015754 	.word	0x08015754

0800b360 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b364:	f008 fce8 	bl	8013d38 <rand>
 800b368:	4603      	mov	r3, r0
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b370:	b29b      	uxth	r3, r3
 800b372:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b376:	b29a      	uxth	r2, r3
 800b378:	4b01      	ldr	r3, [pc, #4]	; (800b380 <tcp_init+0x20>)
 800b37a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b37c:	bf00      	nop
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	20000020 	.word	0x20000020

0800b384 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	7d1b      	ldrb	r3, [r3, #20]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d105      	bne.n	800b3a0 <tcp_free+0x1c>
 800b394:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <tcp_free+0x2c>)
 800b396:	22d4      	movs	r2, #212	; 0xd4
 800b398:	4906      	ldr	r1, [pc, #24]	; (800b3b4 <tcp_free+0x30>)
 800b39a:	4807      	ldr	r0, [pc, #28]	; (800b3b8 <tcp_free+0x34>)
 800b39c:	f008 fcb4 	bl	8013d08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	f7fe fe36 	bl	800a014 <memp_free>
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	08015bf4 	.word	0x08015bf4
 800b3b4:	08015c24 	.word	0x08015c24
 800b3b8:	08015c38 	.word	0x08015c38

0800b3bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	7d1b      	ldrb	r3, [r3, #20]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d105      	bne.n	800b3d8 <tcp_free_listen+0x1c>
 800b3cc:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <tcp_free_listen+0x2c>)
 800b3ce:	22df      	movs	r2, #223	; 0xdf
 800b3d0:	4906      	ldr	r1, [pc, #24]	; (800b3ec <tcp_free_listen+0x30>)
 800b3d2:	4807      	ldr	r0, [pc, #28]	; (800b3f0 <tcp_free_listen+0x34>)
 800b3d4:	f008 fc98 	bl	8013d08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	2002      	movs	r0, #2
 800b3dc:	f7fe fe1a 	bl	800a014 <memp_free>
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	08015bf4 	.word	0x08015bf4
 800b3ec:	08015c60 	.word	0x08015c60
 800b3f0:	08015c38 	.word	0x08015c38

0800b3f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b3f8:	f000 fea2 	bl	800c140 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b3fc:	4b07      	ldr	r3, [pc, #28]	; (800b41c <tcp_tmr+0x28>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	b2da      	uxtb	r2, r3
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <tcp_tmr+0x28>)
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	4b04      	ldr	r3, [pc, #16]	; (800b41c <tcp_tmr+0x28>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b414:	f000 fb54 	bl	800bac0 <tcp_slowtmr>
  }
}
 800b418:	bf00      	nop
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20008c91 	.word	0x20008c91

0800b420 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d105      	bne.n	800b43c <tcp_remove_listener+0x1c>
 800b430:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <tcp_remove_listener+0x48>)
 800b432:	22ff      	movs	r2, #255	; 0xff
 800b434:	490d      	ldr	r1, [pc, #52]	; (800b46c <tcp_remove_listener+0x4c>)
 800b436:	480e      	ldr	r0, [pc, #56]	; (800b470 <tcp_remove_listener+0x50>)
 800b438:	f008 fc66 	bl	8013d08 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	e00a      	b.n	800b458 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d102      	bne.n	800b452 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1f1      	bne.n	800b442 <tcp_remove_listener+0x22>
    }
  }
}
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	08015bf4 	.word	0x08015bf4
 800b46c:	08015c7c 	.word	0x08015c7c
 800b470:	08015c38 	.word	0x08015c38

0800b474 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d106      	bne.n	800b490 <tcp_listen_closed+0x1c>
 800b482:	4b14      	ldr	r3, [pc, #80]	; (800b4d4 <tcp_listen_closed+0x60>)
 800b484:	f240 1211 	movw	r2, #273	; 0x111
 800b488:	4913      	ldr	r1, [pc, #76]	; (800b4d8 <tcp_listen_closed+0x64>)
 800b48a:	4814      	ldr	r0, [pc, #80]	; (800b4dc <tcp_listen_closed+0x68>)
 800b48c:	f008 fc3c 	bl	8013d08 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7d1b      	ldrb	r3, [r3, #20]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d006      	beq.n	800b4a6 <tcp_listen_closed+0x32>
 800b498:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <tcp_listen_closed+0x60>)
 800b49a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b49e:	4910      	ldr	r1, [pc, #64]	; (800b4e0 <tcp_listen_closed+0x6c>)
 800b4a0:	480e      	ldr	r0, [pc, #56]	; (800b4dc <tcp_listen_closed+0x68>)
 800b4a2:	f008 fc31 	bl	8013d08 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	e00b      	b.n	800b4c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b4ac:	4a0d      	ldr	r2, [pc, #52]	; (800b4e4 <tcp_listen_closed+0x70>)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff ffb1 	bl	800b420 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d9f0      	bls.n	800b4ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b4ca:	bf00      	nop
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	08015bf4 	.word	0x08015bf4
 800b4d8:	08015ca4 	.word	0x08015ca4
 800b4dc:	08015c38 	.word	0x08015c38
 800b4e0:	08015cb0 	.word	0x08015cb0
 800b4e4:	08017c18 	.word	0x08017c18

0800b4e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b4e8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af04      	add	r7, sp, #16
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <tcp_close_shutdown+0x20>
 800b4fa:	4b63      	ldr	r3, [pc, #396]	; (800b688 <tcp_close_shutdown+0x1a0>)
 800b4fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b500:	4962      	ldr	r1, [pc, #392]	; (800b68c <tcp_close_shutdown+0x1a4>)
 800b502:	4863      	ldr	r0, [pc, #396]	; (800b690 <tcp_close_shutdown+0x1a8>)
 800b504:	f008 fc00 	bl	8013d08 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d066      	beq.n	800b5dc <tcp_close_shutdown+0xf4>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7d1b      	ldrb	r3, [r3, #20]
 800b512:	2b04      	cmp	r3, #4
 800b514:	d003      	beq.n	800b51e <tcp_close_shutdown+0x36>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7d1b      	ldrb	r3, [r3, #20]
 800b51a:	2b07      	cmp	r3, #7
 800b51c:	d15e      	bne.n	800b5dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b522:	2b00      	cmp	r3, #0
 800b524:	d104      	bne.n	800b530 <tcp_close_shutdown+0x48>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b52a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b52e:	d055      	beq.n	800b5dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8b5b      	ldrh	r3, [r3, #26]
 800b534:	f003 0310 	and.w	r3, r3, #16
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <tcp_close_shutdown+0x62>
 800b53c:	4b52      	ldr	r3, [pc, #328]	; (800b688 <tcp_close_shutdown+0x1a0>)
 800b53e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b542:	4954      	ldr	r1, [pc, #336]	; (800b694 <tcp_close_shutdown+0x1ac>)
 800b544:	4852      	ldr	r0, [pc, #328]	; (800b690 <tcp_close_shutdown+0x1a8>)
 800b546:	f008 fbdf 	bl	8013d08 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b552:	687d      	ldr	r5, [r7, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3304      	adds	r3, #4
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	8ad2      	ldrh	r2, [r2, #22]
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	8b09      	ldrh	r1, [r1, #24]
 800b560:	9102      	str	r1, [sp, #8]
 800b562:	9201      	str	r2, [sp, #4]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	462b      	mov	r3, r5
 800b568:	4622      	mov	r2, r4
 800b56a:	4601      	mov	r1, r0
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f004 fe91 	bl	8010294 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f001 f8c6 	bl	800c704 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b578:	4b47      	ldr	r3, [pc, #284]	; (800b698 <tcp_close_shutdown+0x1b0>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d105      	bne.n	800b58e <tcp_close_shutdown+0xa6>
 800b582:	4b45      	ldr	r3, [pc, #276]	; (800b698 <tcp_close_shutdown+0x1b0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4a43      	ldr	r2, [pc, #268]	; (800b698 <tcp_close_shutdown+0x1b0>)
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	e013      	b.n	800b5b6 <tcp_close_shutdown+0xce>
 800b58e:	4b42      	ldr	r3, [pc, #264]	; (800b698 <tcp_close_shutdown+0x1b0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e00c      	b.n	800b5b0 <tcp_close_shutdown+0xc8>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d104      	bne.n	800b5aa <tcp_close_shutdown+0xc2>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	68da      	ldr	r2, [r3, #12]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	60da      	str	r2, [r3, #12]
 800b5a8:	e005      	b.n	800b5b6 <tcp_close_shutdown+0xce>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1ef      	bne.n	800b596 <tcp_close_shutdown+0xae>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	60da      	str	r2, [r3, #12]
 800b5bc:	4b37      	ldr	r3, [pc, #220]	; (800b69c <tcp_close_shutdown+0x1b4>)
 800b5be:	2201      	movs	r2, #1
 800b5c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b5c2:	4b37      	ldr	r3, [pc, #220]	; (800b6a0 <tcp_close_shutdown+0x1b8>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d102      	bne.n	800b5d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b5cc:	f003 fd5e 	bl	800f08c <tcp_trigger_input_pcb_close>
 800b5d0:	e002      	b.n	800b5d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fed6 	bl	800b384 <tcp_free>
      }
      return ERR_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e050      	b.n	800b67e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	7d1b      	ldrb	r3, [r3, #20]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d03b      	beq.n	800b65c <tcp_close_shutdown+0x174>
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	dc44      	bgt.n	800b672 <tcp_close_shutdown+0x18a>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <tcp_close_shutdown+0x10a>
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d02a      	beq.n	800b646 <tcp_close_shutdown+0x15e>
 800b5f0:	e03f      	b.n	800b672 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	8adb      	ldrh	r3, [r3, #22]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d021      	beq.n	800b63e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5fa:	4b2a      	ldr	r3, [pc, #168]	; (800b6a4 <tcp_close_shutdown+0x1bc>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d105      	bne.n	800b610 <tcp_close_shutdown+0x128>
 800b604:	4b27      	ldr	r3, [pc, #156]	; (800b6a4 <tcp_close_shutdown+0x1bc>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	4a26      	ldr	r2, [pc, #152]	; (800b6a4 <tcp_close_shutdown+0x1bc>)
 800b60c:	6013      	str	r3, [r2, #0]
 800b60e:	e013      	b.n	800b638 <tcp_close_shutdown+0x150>
 800b610:	4b24      	ldr	r3, [pc, #144]	; (800b6a4 <tcp_close_shutdown+0x1bc>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	60bb      	str	r3, [r7, #8]
 800b616:	e00c      	b.n	800b632 <tcp_close_shutdown+0x14a>
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d104      	bne.n	800b62c <tcp_close_shutdown+0x144>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	60da      	str	r2, [r3, #12]
 800b62a:	e005      	b.n	800b638 <tcp_close_shutdown+0x150>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	60bb      	str	r3, [r7, #8]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1ef      	bne.n	800b618 <tcp_close_shutdown+0x130>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fea0 	bl	800b384 <tcp_free>
      break;
 800b644:	e01a      	b.n	800b67c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff ff14 	bl	800b474 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	4816      	ldr	r0, [pc, #88]	; (800b6a8 <tcp_close_shutdown+0x1c0>)
 800b650:	f001 f8a8 	bl	800c7a4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff feb1 	bl	800b3bc <tcp_free_listen>
      break;
 800b65a:	e00f      	b.n	800b67c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	480e      	ldr	r0, [pc, #56]	; (800b698 <tcp_close_shutdown+0x1b0>)
 800b660:	f001 f8a0 	bl	800c7a4 <tcp_pcb_remove>
 800b664:	4b0d      	ldr	r3, [pc, #52]	; (800b69c <tcp_close_shutdown+0x1b4>)
 800b666:	2201      	movs	r2, #1
 800b668:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fe8a 	bl	800b384 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b670:	e004      	b.n	800b67c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f81a 	bl	800b6ac <tcp_close_shutdown_fin>
 800b678:	4603      	mov	r3, r0
 800b67a:	e000      	b.n	800b67e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bdb0      	pop	{r4, r5, r7, pc}
 800b686:	bf00      	nop
 800b688:	08015bf4 	.word	0x08015bf4
 800b68c:	08015cc8 	.word	0x08015cc8
 800b690:	08015c38 	.word	0x08015c38
 800b694:	08015ce8 	.word	0x08015ce8
 800b698:	20008c88 	.word	0x20008c88
 800b69c:	20008c90 	.word	0x20008c90
 800b6a0:	20008cc8 	.word	0x20008cc8
 800b6a4:	20008c80 	.word	0x20008c80
 800b6a8:	20008c84 	.word	0x20008c84

0800b6ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d106      	bne.n	800b6c8 <tcp_close_shutdown_fin+0x1c>
 800b6ba:	4b2e      	ldr	r3, [pc, #184]	; (800b774 <tcp_close_shutdown_fin+0xc8>)
 800b6bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b6c0:	492d      	ldr	r1, [pc, #180]	; (800b778 <tcp_close_shutdown_fin+0xcc>)
 800b6c2:	482e      	ldr	r0, [pc, #184]	; (800b77c <tcp_close_shutdown_fin+0xd0>)
 800b6c4:	f008 fb20 	bl	8013d08 <iprintf>

  switch (pcb->state) {
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7d1b      	ldrb	r3, [r3, #20]
 800b6cc:	2b07      	cmp	r3, #7
 800b6ce:	d020      	beq.n	800b712 <tcp_close_shutdown_fin+0x66>
 800b6d0:	2b07      	cmp	r3, #7
 800b6d2:	dc2b      	bgt.n	800b72c <tcp_close_shutdown_fin+0x80>
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d002      	beq.n	800b6de <tcp_close_shutdown_fin+0x32>
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d00d      	beq.n	800b6f8 <tcp_close_shutdown_fin+0x4c>
 800b6dc:	e026      	b.n	800b72c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f003 fee6 	bl	800f4b0 <tcp_send_fin>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d11f      	bne.n	800b730 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2205      	movs	r2, #5
 800b6f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b6f6:	e01b      	b.n	800b730 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f003 fed9 	bl	800f4b0 <tcp_send_fin>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d114      	bne.n	800b734 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2205      	movs	r2, #5
 800b70e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b710:	e010      	b.n	800b734 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f003 fecc 	bl	800f4b0 <tcp_send_fin>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2209      	movs	r2, #9
 800b728:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b72a:	e005      	b.n	800b738 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	e01c      	b.n	800b76a <tcp_close_shutdown_fin+0xbe>
      break;
 800b730:	bf00      	nop
 800b732:	e002      	b.n	800b73a <tcp_close_shutdown_fin+0x8e>
      break;
 800b734:	bf00      	nop
 800b736:	e000      	b.n	800b73a <tcp_close_shutdown_fin+0x8e>
      break;
 800b738:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d103      	bne.n	800b74a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f003 fff2 	bl	800f72c <tcp_output>
 800b748:	e00d      	b.n	800b766 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b752:	d108      	bne.n	800b766 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	8b5b      	ldrh	r3, [r3, #26]
 800b758:	f043 0308 	orr.w	r3, r3, #8
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	e001      	b.n	800b76a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	08015bf4 	.word	0x08015bf4
 800b778:	08015ca4 	.word	0x08015ca4
 800b77c:	08015c38 	.word	0x08015c38

0800b780 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <tcp_close+0x22>
 800b78e:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <tcp_close+0x4c>)
 800b790:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b794:	490e      	ldr	r1, [pc, #56]	; (800b7d0 <tcp_close+0x50>)
 800b796:	480f      	ldr	r0, [pc, #60]	; (800b7d4 <tcp_close+0x54>)
 800b798:	f008 fab6 	bl	8013d08 <iprintf>
 800b79c:	f06f 030f 	mvn.w	r3, #15
 800b7a0:	e00f      	b.n	800b7c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7d1b      	ldrb	r3, [r3, #20]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d006      	beq.n	800b7b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	8b5b      	ldrh	r3, [r3, #26]
 800b7ae:	f043 0310 	orr.w	r3, r3, #16
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fe94 	bl	800b4e8 <tcp_close_shutdown>
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	08015bf4 	.word	0x08015bf4
 800b7d0:	08015d04 	.word	0x08015d04
 800b7d4:	08015c38 	.word	0x08015c38

0800b7d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08e      	sub	sp, #56	; 0x38
 800b7dc:	af04      	add	r7, sp, #16
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d107      	bne.n	800b7f8 <tcp_abandon+0x20>
 800b7e8:	4b52      	ldr	r3, [pc, #328]	; (800b934 <tcp_abandon+0x15c>)
 800b7ea:	f240 223d 	movw	r2, #573	; 0x23d
 800b7ee:	4952      	ldr	r1, [pc, #328]	; (800b938 <tcp_abandon+0x160>)
 800b7f0:	4852      	ldr	r0, [pc, #328]	; (800b93c <tcp_abandon+0x164>)
 800b7f2:	f008 fa89 	bl	8013d08 <iprintf>
 800b7f6:	e099      	b.n	800b92c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	7d1b      	ldrb	r3, [r3, #20]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d106      	bne.n	800b80e <tcp_abandon+0x36>
 800b800:	4b4c      	ldr	r3, [pc, #304]	; (800b934 <tcp_abandon+0x15c>)
 800b802:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b806:	494e      	ldr	r1, [pc, #312]	; (800b940 <tcp_abandon+0x168>)
 800b808:	484c      	ldr	r0, [pc, #304]	; (800b93c <tcp_abandon+0x164>)
 800b80a:	f008 fa7d 	bl	8013d08 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	7d1b      	ldrb	r3, [r3, #20]
 800b812:	2b0a      	cmp	r3, #10
 800b814:	d107      	bne.n	800b826 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	484a      	ldr	r0, [pc, #296]	; (800b944 <tcp_abandon+0x16c>)
 800b81a:	f000 ffc3 	bl	800c7a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff fdb0 	bl	800b384 <tcp_free>
 800b824:	e082      	b.n	800b92c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b832:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b840:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7d1b      	ldrb	r3, [r3, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d126      	bne.n	800b89e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8adb      	ldrh	r3, [r3, #22]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d02e      	beq.n	800b8b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b858:	4b3b      	ldr	r3, [pc, #236]	; (800b948 <tcp_abandon+0x170>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d105      	bne.n	800b86e <tcp_abandon+0x96>
 800b862:	4b39      	ldr	r3, [pc, #228]	; (800b948 <tcp_abandon+0x170>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	4a37      	ldr	r2, [pc, #220]	; (800b948 <tcp_abandon+0x170>)
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	e013      	b.n	800b896 <tcp_abandon+0xbe>
 800b86e:	4b36      	ldr	r3, [pc, #216]	; (800b948 <tcp_abandon+0x170>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	e00c      	b.n	800b890 <tcp_abandon+0xb8>
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d104      	bne.n	800b88a <tcp_abandon+0xb2>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68da      	ldr	r2, [r3, #12]
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	60da      	str	r2, [r3, #12]
 800b888:	e005      	b.n	800b896 <tcp_abandon+0xbe>
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	61fb      	str	r3, [r7, #28]
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1ef      	bne.n	800b876 <tcp_abandon+0x9e>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	60da      	str	r2, [r3, #12]
 800b89c:	e00b      	b.n	800b8b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8adb      	ldrh	r3, [r3, #22]
 800b8a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	4828      	ldr	r0, [pc, #160]	; (800b94c <tcp_abandon+0x174>)
 800b8ac:	f000 ff7a 	bl	800c7a4 <tcp_pcb_remove>
 800b8b0:	4b27      	ldr	r3, [pc, #156]	; (800b950 <tcp_abandon+0x178>)
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 fd1c 	bl	800c300 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fd13 	bl	800c300 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d004      	beq.n	800b8ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 fd0a 	bl	800c300 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00e      	beq.n	800b910 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	8b12      	ldrh	r2, [r2, #24]
 800b8fc:	9202      	str	r2, [sp, #8]
 800b8fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b900:	9201      	str	r2, [sp, #4]
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	460b      	mov	r3, r1
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	69b9      	ldr	r1, [r7, #24]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f004 fcc2 	bl	8010294 <tcp_rst>
    }
    last_state = pcb->state;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	7d1b      	ldrb	r3, [r3, #20]
 800b914:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff fd34 	bl	800b384 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <tcp_abandon+0x154>
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f06f 010c 	mvn.w	r1, #12
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	4798      	blx	r3
  }
}
 800b92c:	3728      	adds	r7, #40	; 0x28
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	08015bf4 	.word	0x08015bf4
 800b938:	08015d38 	.word	0x08015d38
 800b93c:	08015c38 	.word	0x08015c38
 800b940:	08015d54 	.word	0x08015d54
 800b944:	20008c8c 	.word	0x20008c8c
 800b948:	20008c80 	.word	0x20008c80
 800b94c:	20008c88 	.word	0x20008c88
 800b950:	20008c90 	.word	0x20008c90

0800b954 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b95c:	2101      	movs	r1, #1
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff ff3a 	bl	800b7d8 <tcp_abandon>
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <tcp_update_rcv_ann_wnd+0x1c>
 800b97a:	4b25      	ldr	r3, [pc, #148]	; (800ba10 <tcp_update_rcv_ann_wnd+0xa4>)
 800b97c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b980:	4924      	ldr	r1, [pc, #144]	; (800ba14 <tcp_update_rcv_ann_wnd+0xa8>)
 800b982:	4825      	ldr	r0, [pc, #148]	; (800ba18 <tcp_update_rcv_ann_wnd+0xac>)
 800b984:	f008 f9c0 	bl	8013d08 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b990:	4413      	add	r3, r2
 800b992:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b99c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b9a0:	bf28      	it	cs
 800b9a2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b9a6:	b292      	uxth	r2, r2
 800b9a8:	4413      	add	r3, r2
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	db08      	blt.n	800b9c4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	e020      	b.n	800ba06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd03      	ble.n	800b9da <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9d8:	e014      	b.n	800ba04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ec:	d306      	bcc.n	800b9fc <tcp_update_rcv_ann_wnd+0x90>
 800b9ee:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <tcp_update_rcv_ann_wnd+0xa4>)
 800b9f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b9f4:	4909      	ldr	r1, [pc, #36]	; (800ba1c <tcp_update_rcv_ann_wnd+0xb0>)
 800b9f6:	4808      	ldr	r0, [pc, #32]	; (800ba18 <tcp_update_rcv_ann_wnd+0xac>)
 800b9f8:	f008 f986 	bl	8013d08 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ba04:	2300      	movs	r3, #0
  }
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	08015bf4 	.word	0x08015bf4
 800ba14:	08015e50 	.word	0x08015e50
 800ba18:	08015c38 	.word	0x08015c38
 800ba1c:	08015e74 	.word	0x08015e74

0800ba20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d107      	bne.n	800ba42 <tcp_recved+0x22>
 800ba32:	4b1f      	ldr	r3, [pc, #124]	; (800bab0 <tcp_recved+0x90>)
 800ba34:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ba38:	491e      	ldr	r1, [pc, #120]	; (800bab4 <tcp_recved+0x94>)
 800ba3a:	481f      	ldr	r0, [pc, #124]	; (800bab8 <tcp_recved+0x98>)
 800ba3c:	f008 f964 	bl	8013d08 <iprintf>
 800ba40:	e032      	b.n	800baa8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	7d1b      	ldrb	r3, [r3, #20]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d106      	bne.n	800ba58 <tcp_recved+0x38>
 800ba4a:	4b19      	ldr	r3, [pc, #100]	; (800bab0 <tcp_recved+0x90>)
 800ba4c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ba50:	491a      	ldr	r1, [pc, #104]	; (800babc <tcp_recved+0x9c>)
 800ba52:	4819      	ldr	r0, [pc, #100]	; (800bab8 <tcp_recved+0x98>)
 800ba54:	f008 f958 	bl	8013d08 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba5c:	887b      	ldrh	r3, [r7, #2]
 800ba5e:	4413      	add	r3, r2
 800ba60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ba62:	89fb      	ldrh	r3, [r7, #14]
 800ba64:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba68:	d804      	bhi.n	800ba74 <tcp_recved+0x54>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba6e:	89fa      	ldrh	r2, [r7, #14]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d204      	bcs.n	800ba7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ba7a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ba7c:	e002      	b.n	800ba84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	89fa      	ldrh	r2, [r7, #14]
 800ba82:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ff71 	bl	800b96c <tcp_update_rcv_ann_wnd>
 800ba8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ba92:	d309      	bcc.n	800baa8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	8b5b      	ldrh	r3, [r3, #26]
 800ba98:	f043 0302 	orr.w	r3, r3, #2
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f003 fe42 	bl	800f72c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08015bf4 	.word	0x08015bf4
 800bab4:	08015e90 	.word	0x08015e90
 800bab8:	08015c38 	.word	0x08015c38
 800babc:	08015ea8 	.word	0x08015ea8

0800bac0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bac0:	b5b0      	push	{r4, r5, r7, lr}
 800bac2:	b090      	sub	sp, #64	; 0x40
 800bac4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bacc:	4b94      	ldr	r3, [pc, #592]	; (800bd20 <tcp_slowtmr+0x260>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	3301      	adds	r3, #1
 800bad2:	4a93      	ldr	r2, [pc, #588]	; (800bd20 <tcp_slowtmr+0x260>)
 800bad4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bad6:	4b93      	ldr	r3, [pc, #588]	; (800bd24 <tcp_slowtmr+0x264>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	b2da      	uxtb	r2, r3
 800bade:	4b91      	ldr	r3, [pc, #580]	; (800bd24 <tcp_slowtmr+0x264>)
 800bae0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bae6:	4b90      	ldr	r3, [pc, #576]	; (800bd28 <tcp_slowtmr+0x268>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800baec:	e29d      	b.n	800c02a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800baee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf0:	7d1b      	ldrb	r3, [r3, #20]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d106      	bne.n	800bb04 <tcp_slowtmr+0x44>
 800baf6:	4b8d      	ldr	r3, [pc, #564]	; (800bd2c <tcp_slowtmr+0x26c>)
 800baf8:	f240 42be 	movw	r2, #1214	; 0x4be
 800bafc:	498c      	ldr	r1, [pc, #560]	; (800bd30 <tcp_slowtmr+0x270>)
 800bafe:	488d      	ldr	r0, [pc, #564]	; (800bd34 <tcp_slowtmr+0x274>)
 800bb00:	f008 f902 	bl	8013d08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	7d1b      	ldrb	r3, [r3, #20]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d106      	bne.n	800bb1a <tcp_slowtmr+0x5a>
 800bb0c:	4b87      	ldr	r3, [pc, #540]	; (800bd2c <tcp_slowtmr+0x26c>)
 800bb0e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bb12:	4989      	ldr	r1, [pc, #548]	; (800bd38 <tcp_slowtmr+0x278>)
 800bb14:	4887      	ldr	r0, [pc, #540]	; (800bd34 <tcp_slowtmr+0x274>)
 800bb16:	f008 f8f7 	bl	8013d08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	7d1b      	ldrb	r3, [r3, #20]
 800bb1e:	2b0a      	cmp	r3, #10
 800bb20:	d106      	bne.n	800bb30 <tcp_slowtmr+0x70>
 800bb22:	4b82      	ldr	r3, [pc, #520]	; (800bd2c <tcp_slowtmr+0x26c>)
 800bb24:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bb28:	4984      	ldr	r1, [pc, #528]	; (800bd3c <tcp_slowtmr+0x27c>)
 800bb2a:	4882      	ldr	r0, [pc, #520]	; (800bd34 <tcp_slowtmr+0x274>)
 800bb2c:	f008 f8ec 	bl	8013d08 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb32:	7f9a      	ldrb	r2, [r3, #30]
 800bb34:	4b7b      	ldr	r3, [pc, #492]	; (800bd24 <tcp_slowtmr+0x264>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d105      	bne.n	800bb48 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bb46:	e270      	b.n	800c02a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bb48:	4b76      	ldr	r3, [pc, #472]	; (800bd24 <tcp_slowtmr+0x264>)
 800bb4a:	781a      	ldrb	r2, [r3, #0]
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	7d1b      	ldrb	r3, [r3, #20]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d10a      	bne.n	800bb7a <tcp_slowtmr+0xba>
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb6a:	2b05      	cmp	r3, #5
 800bb6c:	d905      	bls.n	800bb7a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bb6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb72:	3301      	adds	r3, #1
 800bb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb78:	e11e      	b.n	800bdb8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb80:	2b0b      	cmp	r3, #11
 800bb82:	d905      	bls.n	800bb90 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb88:	3301      	adds	r3, #1
 800bb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb8e:	e113      	b.n	800bdb8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d075      	beq.n	800bc86 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d006      	beq.n	800bbb0 <tcp_slowtmr+0xf0>
 800bba2:	4b62      	ldr	r3, [pc, #392]	; (800bd2c <tcp_slowtmr+0x26c>)
 800bba4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bba8:	4965      	ldr	r1, [pc, #404]	; (800bd40 <tcp_slowtmr+0x280>)
 800bbaa:	4862      	ldr	r0, [pc, #392]	; (800bd34 <tcp_slowtmr+0x274>)
 800bbac:	f008 f8ac 	bl	8013d08 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d106      	bne.n	800bbc6 <tcp_slowtmr+0x106>
 800bbb8:	4b5c      	ldr	r3, [pc, #368]	; (800bd2c <tcp_slowtmr+0x26c>)
 800bbba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bbbe:	4961      	ldr	r1, [pc, #388]	; (800bd44 <tcp_slowtmr+0x284>)
 800bbc0:	485c      	ldr	r0, [pc, #368]	; (800bd34 <tcp_slowtmr+0x274>)
 800bbc2:	f008 f8a1 	bl	8013d08 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bbcc:	2b0b      	cmp	r3, #11
 800bbce:	d905      	bls.n	800bbdc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbda:	e0ed      	b.n	800bdb8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	4a58      	ldr	r2, [pc, #352]	; (800bd48 <tcp_slowtmr+0x288>)
 800bbe6:	5cd3      	ldrb	r3, [r2, r3]
 800bbe8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bbf0:	7c7a      	ldrb	r2, [r7, #17]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d907      	bls.n	800bc06 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc0c:	7c7a      	ldrb	r2, [r7, #17]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	f200 80d2 	bhi.w	800bdb8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bc14:	2301      	movs	r3, #1
 800bc16:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d108      	bne.n	800bc34 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bc22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc24:	f004 fc2a 	bl	801047c <tcp_zero_window_probe>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d014      	beq.n	800bc58 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bc2e:	2300      	movs	r3, #0
 800bc30:	623b      	str	r3, [r7, #32]
 800bc32:	e011      	b.n	800bc58 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc3e:	f003 faef 	bl	800f220 <tcp_split_unsent_seg>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d107      	bne.n	800bc58 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc4a:	f003 fd6f 	bl	800f72c <tcp_output>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f000 80ac 	beq.w	800bdb8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc6e:	2b06      	cmp	r3, #6
 800bc70:	f200 80a2 	bhi.w	800bdb8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bc84:	e098      	b.n	800bdb8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	db0f      	blt.n	800bcb0 <tcp_slowtmr+0x1f0>
 800bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d008      	beq.n	800bcb0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	3301      	adds	r3, #1
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	b21a      	sxth	r2, r3
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	db7b      	blt.n	800bdb8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bcc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcc2:	f004 f825 	bl	800fd10 <tcp_rexmit_rto_prepare>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d007      	beq.n	800bcdc <tcp_slowtmr+0x21c>
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d171      	bne.n	800bdb8 <tcp_slowtmr+0x2f8>
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d06d      	beq.n	800bdb8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcde:	7d1b      	ldrb	r3, [r3, #20]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d03a      	beq.n	800bd5a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcea:	2b0c      	cmp	r3, #12
 800bcec:	bf28      	it	cs
 800bcee:	230c      	movcs	r3, #12
 800bcf0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bcf8:	10db      	asrs	r3, r3, #3
 800bcfa:	b21b      	sxth	r3, r3
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bd04:	4413      	add	r3, r2
 800bd06:	7efa      	ldrb	r2, [r7, #27]
 800bd08:	4910      	ldr	r1, [pc, #64]	; (800bd4c <tcp_slowtmr+0x28c>)
 800bd0a:	5c8a      	ldrb	r2, [r1, r2]
 800bd0c:	4093      	lsls	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bd16:	4293      	cmp	r3, r2
 800bd18:	dc1a      	bgt.n	800bd50 <tcp_slowtmr+0x290>
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	b21a      	sxth	r2, r3
 800bd1e:	e019      	b.n	800bd54 <tcp_slowtmr+0x294>
 800bd20:	20008c7c 	.word	0x20008c7c
 800bd24:	20008c92 	.word	0x20008c92
 800bd28:	20008c88 	.word	0x20008c88
 800bd2c:	08015bf4 	.word	0x08015bf4
 800bd30:	08015f38 	.word	0x08015f38
 800bd34:	08015c38 	.word	0x08015c38
 800bd38:	08015f64 	.word	0x08015f64
 800bd3c:	08015f90 	.word	0x08015f90
 800bd40:	08015fc0 	.word	0x08015fc0
 800bd44:	08015ff4 	.word	0x08015ff4
 800bd48:	08017c10 	.word	0x08017c10
 800bd4c:	08017c00 	.word	0x08017c00
 800bd50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	bf28      	it	cs
 800bd70:	4613      	movcs	r3, r2
 800bd72:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bd74:	8a7b      	ldrh	r3, [r7, #18]
 800bd76:	085b      	lsrs	r3, r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d206      	bcs.n	800bda0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	2200      	movs	r2, #0
 800bdae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bdb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdb4:	f004 f81c 	bl	800fdf0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	7d1b      	ldrb	r3, [r3, #20]
 800bdbc:	2b06      	cmp	r3, #6
 800bdbe:	d111      	bne.n	800bde4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	8b5b      	ldrh	r3, [r3, #26]
 800bdc4:	f003 0310 	and.w	r3, r3, #16
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00b      	beq.n	800bde4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdcc:	4b9c      	ldr	r3, [pc, #624]	; (800c040 <tcp_slowtmr+0x580>)
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	6a1b      	ldr	r3, [r3, #32]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	2b28      	cmp	r3, #40	; 0x28
 800bdd8:	d904      	bls.n	800bde4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bdda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdde:	3301      	adds	r3, #1
 800bde0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	7a5b      	ldrb	r3, [r3, #9]
 800bde8:	f003 0308 	and.w	r3, r3, #8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d04a      	beq.n	800be86 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bdf4:	2b04      	cmp	r3, #4
 800bdf6:	d003      	beq.n	800be00 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bdfc:	2b07      	cmp	r3, #7
 800bdfe:	d142      	bne.n	800be86 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be00:	4b8f      	ldr	r3, [pc, #572]	; (800c040 <tcp_slowtmr+0x580>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800be10:	4b8c      	ldr	r3, [pc, #560]	; (800c044 <tcp_slowtmr+0x584>)
 800be12:	440b      	add	r3, r1
 800be14:	498c      	ldr	r1, [pc, #560]	; (800c048 <tcp_slowtmr+0x588>)
 800be16:	fba1 1303 	umull	r1, r3, r1, r3
 800be1a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d90a      	bls.n	800be36 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800be20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be24:	3301      	adds	r3, #1
 800be26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800be2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be2e:	3301      	adds	r3, #1
 800be30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be34:	e027      	b.n	800be86 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be36:	4b82      	ldr	r3, [pc, #520]	; (800c040 <tcp_slowtmr+0x580>)
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800be46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800be4c:	4618      	mov	r0, r3
 800be4e:	4b7f      	ldr	r3, [pc, #508]	; (800c04c <tcp_slowtmr+0x58c>)
 800be50:	fb00 f303 	mul.w	r3, r0, r3
 800be54:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800be56:	497c      	ldr	r1, [pc, #496]	; (800c048 <tcp_slowtmr+0x588>)
 800be58:	fba1 1303 	umull	r1, r3, r1, r3
 800be5c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be5e:	429a      	cmp	r2, r3
 800be60:	d911      	bls.n	800be86 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800be62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be64:	f004 faca 	bl	80103fc <tcp_keepalive>
 800be68:	4603      	mov	r3, r0
 800be6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800be6e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800be72:	2b00      	cmp	r3, #0
 800be74:	d107      	bne.n	800be86 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800be7c:	3301      	adds	r3, #1
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d011      	beq.n	800beb2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800be8e:	4b6c      	ldr	r3, [pc, #432]	; (800c040 <tcp_slowtmr+0x580>)
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800be9e:	4619      	mov	r1, r3
 800bea0:	460b      	mov	r3, r1
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	440b      	add	r3, r1
 800bea6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d302      	bcc.n	800beb2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800beac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beae:	f000 fddd 	bl	800ca6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	7d1b      	ldrb	r3, [r3, #20]
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d10b      	bne.n	800bed2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800beba:	4b61      	ldr	r3, [pc, #388]	; (800c040 <tcp_slowtmr+0x580>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b28      	cmp	r3, #40	; 0x28
 800bec6:	d904      	bls.n	800bed2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800becc:	3301      	adds	r3, #1
 800bece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	7d1b      	ldrb	r3, [r3, #20]
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	d10b      	bne.n	800bef2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800beda:	4b59      	ldr	r3, [pc, #356]	; (800c040 <tcp_slowtmr+0x580>)
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2bf0      	cmp	r3, #240	; 0xf0
 800bee6:	d904      	bls.n	800bef2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beec:	3301      	adds	r3, #1
 800beee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d060      	beq.n	800bfbc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf00:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bf02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf04:	f000 fbfe 	bl	800c704 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d010      	beq.n	800bf30 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bf0e:	4b50      	ldr	r3, [pc, #320]	; (800c050 <tcp_slowtmr+0x590>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d106      	bne.n	800bf26 <tcp_slowtmr+0x466>
 800bf18:	4b4e      	ldr	r3, [pc, #312]	; (800c054 <tcp_slowtmr+0x594>)
 800bf1a:	f240 526d 	movw	r2, #1389	; 0x56d
 800bf1e:	494e      	ldr	r1, [pc, #312]	; (800c058 <tcp_slowtmr+0x598>)
 800bf20:	484e      	ldr	r0, [pc, #312]	; (800c05c <tcp_slowtmr+0x59c>)
 800bf22:	f007 fef1 	bl	8013d08 <iprintf>
        prev->next = pcb->next;
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	68da      	ldr	r2, [r3, #12]
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	60da      	str	r2, [r3, #12]
 800bf2e:	e00f      	b.n	800bf50 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bf30:	4b47      	ldr	r3, [pc, #284]	; (800c050 <tcp_slowtmr+0x590>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d006      	beq.n	800bf48 <tcp_slowtmr+0x488>
 800bf3a:	4b46      	ldr	r3, [pc, #280]	; (800c054 <tcp_slowtmr+0x594>)
 800bf3c:	f240 5271 	movw	r2, #1393	; 0x571
 800bf40:	4947      	ldr	r1, [pc, #284]	; (800c060 <tcp_slowtmr+0x5a0>)
 800bf42:	4846      	ldr	r0, [pc, #280]	; (800c05c <tcp_slowtmr+0x59c>)
 800bf44:	f007 fee0 	bl	8013d08 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	4a40      	ldr	r2, [pc, #256]	; (800c050 <tcp_slowtmr+0x590>)
 800bf4e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bf50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d013      	beq.n	800bf80 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bf60:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf64:	3304      	adds	r3, #4
 800bf66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf68:	8ad2      	ldrh	r2, [r2, #22]
 800bf6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf6c:	8b09      	ldrh	r1, [r1, #24]
 800bf6e:	9102      	str	r1, [sp, #8]
 800bf70:	9201      	str	r2, [sp, #4]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	462b      	mov	r3, r5
 800bf76:	4622      	mov	r2, r4
 800bf78:	4601      	mov	r1, r0
 800bf7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf7c:	f004 f98a 	bl	8010294 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	7d1b      	ldrb	r3, [r3, #20]
 800bf8a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bf96:	6838      	ldr	r0, [r7, #0]
 800bf98:	f7ff f9f4 	bl	800b384 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bf9c:	4b31      	ldr	r3, [pc, #196]	; (800c064 <tcp_slowtmr+0x5a4>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <tcp_slowtmr+0x4f2>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f06f 010c 	mvn.w	r1, #12
 800bfae:	68b8      	ldr	r0, [r7, #8]
 800bfb0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bfb2:	4b2c      	ldr	r3, [pc, #176]	; (800c064 <tcp_slowtmr+0x5a4>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d037      	beq.n	800c02a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bfba:	e592      	b.n	800bae2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc8:	7f1b      	ldrb	r3, [r3, #28]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	7f1a      	ldrb	r2, [r3, #28]
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	7f5b      	ldrb	r3, [r3, #29]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d325      	bcc.n	800c02a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bfe4:	4b1f      	ldr	r3, [pc, #124]	; (800c064 <tcp_slowtmr+0x5a4>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00b      	beq.n	800c00c <tcp_slowtmr+0x54c>
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bffc:	6912      	ldr	r2, [r2, #16]
 800bffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	4603      	mov	r3, r0
 800c006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c00a:	e002      	b.n	800c012 <tcp_slowtmr+0x552>
 800c00c:	2300      	movs	r3, #0
 800c00e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c012:	4b14      	ldr	r3, [pc, #80]	; (800c064 <tcp_slowtmr+0x5a4>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d000      	beq.n	800c01c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c01a:	e562      	b.n	800bae2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c01c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c020:	2b00      	cmp	r3, #0
 800c022:	d102      	bne.n	800c02a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c026:	f003 fb81 	bl	800f72c <tcp_output>
  while (pcb != NULL) {
 800c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f47f ad5e 	bne.w	800baee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c032:	2300      	movs	r3, #0
 800c034:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c036:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <tcp_slowtmr+0x5a8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c03c:	e069      	b.n	800c112 <tcp_slowtmr+0x652>
 800c03e:	bf00      	nop
 800c040:	20008c7c 	.word	0x20008c7c
 800c044:	000a4cb8 	.word	0x000a4cb8
 800c048:	10624dd3 	.word	0x10624dd3
 800c04c:	000124f8 	.word	0x000124f8
 800c050:	20008c88 	.word	0x20008c88
 800c054:	08015bf4 	.word	0x08015bf4
 800c058:	0801602c 	.word	0x0801602c
 800c05c:	08015c38 	.word	0x08015c38
 800c060:	08016058 	.word	0x08016058
 800c064:	20008c90 	.word	0x20008c90
 800c068:	20008c8c 	.word	0x20008c8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	7d1b      	ldrb	r3, [r3, #20]
 800c070:	2b0a      	cmp	r3, #10
 800c072:	d006      	beq.n	800c082 <tcp_slowtmr+0x5c2>
 800c074:	4b2b      	ldr	r3, [pc, #172]	; (800c124 <tcp_slowtmr+0x664>)
 800c076:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c07a:	492b      	ldr	r1, [pc, #172]	; (800c128 <tcp_slowtmr+0x668>)
 800c07c:	482b      	ldr	r0, [pc, #172]	; (800c12c <tcp_slowtmr+0x66c>)
 800c07e:	f007 fe43 	bl	8013d08 <iprintf>
    pcb_remove = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c088:	4b29      	ldr	r3, [pc, #164]	; (800c130 <tcp_slowtmr+0x670>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2bf0      	cmp	r3, #240	; 0xf0
 800c094:	d904      	bls.n	800c0a0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c09a:	3301      	adds	r3, #1
 800c09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d02f      	beq.n	800c108 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c0a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0aa:	f000 fb2b 	bl	800c704 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d010      	beq.n	800c0d6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c0b4:	4b1f      	ldr	r3, [pc, #124]	; (800c134 <tcp_slowtmr+0x674>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d106      	bne.n	800c0cc <tcp_slowtmr+0x60c>
 800c0be:	4b19      	ldr	r3, [pc, #100]	; (800c124 <tcp_slowtmr+0x664>)
 800c0c0:	f240 52af 	movw	r2, #1455	; 0x5af
 800c0c4:	491c      	ldr	r1, [pc, #112]	; (800c138 <tcp_slowtmr+0x678>)
 800c0c6:	4819      	ldr	r0, [pc, #100]	; (800c12c <tcp_slowtmr+0x66c>)
 800c0c8:	f007 fe1e 	bl	8013d08 <iprintf>
        prev->next = pcb->next;
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	60da      	str	r2, [r3, #12]
 800c0d4:	e00f      	b.n	800c0f6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c0d6:	4b17      	ldr	r3, [pc, #92]	; (800c134 <tcp_slowtmr+0x674>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d006      	beq.n	800c0ee <tcp_slowtmr+0x62e>
 800c0e0:	4b10      	ldr	r3, [pc, #64]	; (800c124 <tcp_slowtmr+0x664>)
 800c0e2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c0e6:	4915      	ldr	r1, [pc, #84]	; (800c13c <tcp_slowtmr+0x67c>)
 800c0e8:	4810      	ldr	r0, [pc, #64]	; (800c12c <tcp_slowtmr+0x66c>)
 800c0ea:	f007 fe0d 	bl	8013d08 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	4a10      	ldr	r2, [pc, #64]	; (800c134 <tcp_slowtmr+0x674>)
 800c0f4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c100:	69f8      	ldr	r0, [r7, #28]
 800c102:	f7ff f93f 	bl	800b384 <tcp_free>
 800c106:	e004      	b.n	800c112 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1a9      	bne.n	800c06c <tcp_slowtmr+0x5ac>
    }
  }
}
 800c118:	bf00      	nop
 800c11a:	bf00      	nop
 800c11c:	3730      	adds	r7, #48	; 0x30
 800c11e:	46bd      	mov	sp, r7
 800c120:	bdb0      	pop	{r4, r5, r7, pc}
 800c122:	bf00      	nop
 800c124:	08015bf4 	.word	0x08015bf4
 800c128:	08016084 	.word	0x08016084
 800c12c:	08015c38 	.word	0x08015c38
 800c130:	20008c7c 	.word	0x20008c7c
 800c134:	20008c8c 	.word	0x20008c8c
 800c138:	080160b4 	.word	0x080160b4
 800c13c:	080160dc 	.word	0x080160dc

0800c140 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c146:	4b2d      	ldr	r3, [pc, #180]	; (800c1fc <tcp_fasttmr+0xbc>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	4b2b      	ldr	r3, [pc, #172]	; (800c1fc <tcp_fasttmr+0xbc>)
 800c150:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c152:	4b2b      	ldr	r3, [pc, #172]	; (800c200 <tcp_fasttmr+0xc0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c158:	e048      	b.n	800c1ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7f9a      	ldrb	r2, [r3, #30]
 800c15e:	4b27      	ldr	r3, [pc, #156]	; (800c1fc <tcp_fasttmr+0xbc>)
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d03f      	beq.n	800c1e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c166:	4b25      	ldr	r3, [pc, #148]	; (800c1fc <tcp_fasttmr+0xbc>)
 800c168:	781a      	ldrb	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	8b5b      	ldrh	r3, [r3, #26]
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	d010      	beq.n	800c19c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	8b5b      	ldrh	r3, [r3, #26]
 800c17e:	f043 0302 	orr.w	r3, r3, #2
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f003 facf 	bl	800f72c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8b5b      	ldrh	r3, [r3, #26]
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	8b5b      	ldrh	r3, [r3, #26]
 800c1a0:	f003 0308 	and.w	r3, r3, #8
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d009      	beq.n	800c1bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8b5b      	ldrh	r3, [r3, #26]
 800c1ac:	f023 0308 	bic.w	r3, r3, #8
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff fa78 	bl	800b6ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00a      	beq.n	800c1e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c1ca:	4b0e      	ldr	r3, [pc, #56]	; (800c204 <tcp_fasttmr+0xc4>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f819 	bl	800c208 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c1d6:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <tcp_fasttmr+0xc4>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d000      	beq.n	800c1e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c1de:	e7b8      	b.n	800c152 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	607b      	str	r3, [r7, #4]
 800c1e4:	e002      	b.n	800c1ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1b3      	bne.n	800c15a <tcp_fasttmr+0x1a>
    }
  }
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	20008c92 	.word	0x20008c92
 800c200:	20008c88 	.word	0x20008c88
 800c204:	20008c90 	.word	0x20008c90

0800c208 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c208:	b590      	push	{r4, r7, lr}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d109      	bne.n	800c22a <tcp_process_refused_data+0x22>
 800c216:	4b37      	ldr	r3, [pc, #220]	; (800c2f4 <tcp_process_refused_data+0xec>)
 800c218:	f240 6209 	movw	r2, #1545	; 0x609
 800c21c:	4936      	ldr	r1, [pc, #216]	; (800c2f8 <tcp_process_refused_data+0xf0>)
 800c21e:	4837      	ldr	r0, [pc, #220]	; (800c2fc <tcp_process_refused_data+0xf4>)
 800c220:	f007 fd72 	bl	8013d08 <iprintf>
 800c224:	f06f 030f 	mvn.w	r3, #15
 800c228:	e060      	b.n	800c2ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c22e:	7b5b      	ldrb	r3, [r3, #13]
 800c230:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c236:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00b      	beq.n	800c260 <tcp_process_refused_data+0x58>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6918      	ldr	r0, [r3, #16]
 800c252:	2300      	movs	r3, #0
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	47a0      	blx	r4
 800c25a:	4603      	mov	r3, r0
 800c25c:	73fb      	strb	r3, [r7, #15]
 800c25e:	e007      	b.n	800c270 <tcp_process_refused_data+0x68>
 800c260:	2300      	movs	r3, #0
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	2000      	movs	r0, #0
 800c268:	f000 f8a4 	bl	800c3b4 <tcp_recv_null>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d12a      	bne.n	800c2ce <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	f003 0320 	and.w	r3, r3, #32
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d033      	beq.n	800c2ea <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c286:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c28a:	d005      	beq.n	800c298 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c290:	3301      	adds	r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00b      	beq.n	800c2ba <tcp_process_refused_data+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6918      	ldr	r0, [r3, #16]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	47a0      	blx	r4
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
 800c2b8:	e001      	b.n	800c2be <tcp_process_refused_data+0xb6>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2c2:	f113 0f0d 	cmn.w	r3, #13
 800c2c6:	d110      	bne.n	800c2ea <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c2c8:	f06f 030c 	mvn.w	r3, #12
 800c2cc:	e00e      	b.n	800c2ec <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d2:	f113 0f0d 	cmn.w	r3, #13
 800c2d6:	d102      	bne.n	800c2de <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c2d8:	f06f 030c 	mvn.w	r3, #12
 800c2dc:	e006      	b.n	800c2ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c2e4:	f06f 0304 	mvn.w	r3, #4
 800c2e8:	e000      	b.n	800c2ec <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd90      	pop	{r4, r7, pc}
 800c2f4:	08015bf4 	.word	0x08015bf4
 800c2f8:	08016104 	.word	0x08016104
 800c2fc:	08015c38 	.word	0x08015c38

0800c300 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c308:	e007      	b.n	800c31a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f80a 	bl	800c32a <tcp_seg_free>
    seg = next;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f4      	bne.n	800c30a <tcp_segs_free+0xa>
  }
}
 800c320:	bf00      	nop
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b082      	sub	sp, #8
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00c      	beq.n	800c352 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d004      	beq.n	800c34a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe fcdb 	bl	800ad00 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	2003      	movs	r0, #3
 800c34e:	f7fd fe61 	bl	800a014 <memp_free>
  }
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <tcp_seg_copy+0x1c>
 800c36a:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <tcp_seg_copy+0x4c>)
 800c36c:	f240 6282 	movw	r2, #1666	; 0x682
 800c370:	490e      	ldr	r1, [pc, #56]	; (800c3ac <tcp_seg_copy+0x50>)
 800c372:	480f      	ldr	r0, [pc, #60]	; (800c3b0 <tcp_seg_copy+0x54>)
 800c374:	f007 fcc8 	bl	8013d08 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c378:	2003      	movs	r0, #3
 800c37a:	f7fd fddb 	bl	8009f34 <memp_malloc>
 800c37e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <tcp_seg_copy+0x2e>
    return NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	e00a      	b.n	800c3a0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c38a:	2210      	movs	r2, #16
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f007 fc8a 	bl	8013ca8 <memcpy>
  pbuf_ref(cseg->p);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe fd51 	bl	800ae40 <pbuf_ref>
  return cseg;
 800c39e:	68fb      	ldr	r3, [r7, #12]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	08015bf4 	.word	0x08015bf4
 800c3ac:	08016148 	.word	0x08016148
 800c3b0:	08015c38 	.word	0x08015c38

0800c3b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d109      	bne.n	800c3dc <tcp_recv_null+0x28>
 800c3c8:	4b12      	ldr	r3, [pc, #72]	; (800c414 <tcp_recv_null+0x60>)
 800c3ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c3ce:	4912      	ldr	r1, [pc, #72]	; (800c418 <tcp_recv_null+0x64>)
 800c3d0:	4812      	ldr	r0, [pc, #72]	; (800c41c <tcp_recv_null+0x68>)
 800c3d2:	f007 fc99 	bl	8013d08 <iprintf>
 800c3d6:	f06f 030f 	mvn.w	r3, #15
 800c3da:	e016      	b.n	800c40a <tcp_recv_null+0x56>

  if (p != NULL) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d009      	beq.n	800c3f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	891b      	ldrh	r3, [r3, #8]
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	68b8      	ldr	r0, [r7, #8]
 800c3ea:	f7ff fb19 	bl	800ba20 <tcp_recved>
    pbuf_free(p);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7fe fc86 	bl	800ad00 <pbuf_free>
 800c3f4:	e008      	b.n	800c408 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c3f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d104      	bne.n	800c408 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c3fe:	68b8      	ldr	r0, [r7, #8]
 800c400:	f7ff f9be 	bl	800b780 <tcp_close>
 800c404:	4603      	mov	r3, r0
 800c406:	e000      	b.n	800c40a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	08015bf4 	.word	0x08015bf4
 800c418:	08016164 	.word	0x08016164
 800c41c:	08015c38 	.word	0x08015c38

0800c420 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	db01      	blt.n	800c436 <tcp_kill_prio+0x16>
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	e000      	b.n	800c438 <tcp_kill_prio+0x18>
 800c436:	237f      	movs	r3, #127	; 0x7f
 800c438:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c43a:	7afb      	ldrb	r3, [r7, #11]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d034      	beq.n	800c4aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3b01      	subs	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c44e:	4b19      	ldr	r3, [pc, #100]	; (800c4b4 <tcp_kill_prio+0x94>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	e01f      	b.n	800c496 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	7d5b      	ldrb	r3, [r3, #21]
 800c45a:	7afa      	ldrb	r2, [r7, #11]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d80c      	bhi.n	800c47a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c464:	7afa      	ldrb	r2, [r7, #11]
 800c466:	429a      	cmp	r2, r3
 800c468:	d112      	bne.n	800c490 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <tcp_kill_prio+0x98>)
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	429a      	cmp	r2, r3
 800c478:	d80a      	bhi.n	800c490 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c47a:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <tcp_kill_prio+0x98>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	7d5b      	ldrb	r3, [r3, #21]
 800c48e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1dc      	bne.n	800c456 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d004      	beq.n	800c4ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c4a2:	6938      	ldr	r0, [r7, #16]
 800c4a4:	f7ff fa56 	bl	800b954 <tcp_abort>
 800c4a8:	e000      	b.n	800c4ac <tcp_kill_prio+0x8c>
    return;
 800c4aa:	bf00      	nop
  }
}
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20008c88 	.word	0x20008c88
 800c4b8:	20008c7c 	.word	0x20008c7c

0800c4bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c4c6:	79fb      	ldrb	r3, [r7, #7]
 800c4c8:	2b08      	cmp	r3, #8
 800c4ca:	d009      	beq.n	800c4e0 <tcp_kill_state+0x24>
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d006      	beq.n	800c4e0 <tcp_kill_state+0x24>
 800c4d2:	4b1a      	ldr	r3, [pc, #104]	; (800c53c <tcp_kill_state+0x80>)
 800c4d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c4d8:	4919      	ldr	r1, [pc, #100]	; (800c540 <tcp_kill_state+0x84>)
 800c4da:	481a      	ldr	r0, [pc, #104]	; (800c544 <tcp_kill_state+0x88>)
 800c4dc:	f007 fc14 	bl	8013d08 <iprintf>

  inactivity = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4e8:	4b17      	ldr	r3, [pc, #92]	; (800c548 <tcp_kill_state+0x8c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	e017      	b.n	800c520 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	7d1b      	ldrb	r3, [r3, #20]
 800c4f4:	79fa      	ldrb	r2, [r7, #7]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d10f      	bne.n	800c51a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c4fa:	4b14      	ldr	r3, [pc, #80]	; (800c54c <tcp_kill_state+0x90>)
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	429a      	cmp	r2, r3
 800c508:	d807      	bhi.n	800c51a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c50a:	4b10      	ldr	r3, [pc, #64]	; (800c54c <tcp_kill_state+0x90>)
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	617b      	str	r3, [r7, #20]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e4      	bne.n	800c4f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c52c:	2100      	movs	r1, #0
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f7ff f952 	bl	800b7d8 <tcp_abandon>
  }
}
 800c534:	bf00      	nop
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	08015bf4 	.word	0x08015bf4
 800c540:	08016180 	.word	0x08016180
 800c544:	08015c38 	.word	0x08015c38
 800c548:	20008c88 	.word	0x20008c88
 800c54c:	20008c7c 	.word	0x20008c7c

0800c550 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c55e:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <tcp_kill_timewait+0x58>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e012      	b.n	800c58c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c566:	4b11      	ldr	r3, [pc, #68]	; (800c5ac <tcp_kill_timewait+0x5c>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d807      	bhi.n	800c586 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <tcp_kill_timewait+0x5c>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e9      	bne.n	800c566 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c598:	68b8      	ldr	r0, [r7, #8]
 800c59a:	f7ff f9db 	bl	800b954 <tcp_abort>
  }
}
 800c59e:	bf00      	nop
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20008c8c 	.word	0x20008c8c
 800c5ac:	20008c7c 	.word	0x20008c7c

0800c5b0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c5b6:	4b10      	ldr	r3, [pc, #64]	; (800c5f8 <tcp_handle_closepend+0x48>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c5bc:	e014      	b.n	800c5e8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	8b5b      	ldrh	r3, [r3, #26]
 800c5c8:	f003 0308 	and.w	r3, r3, #8
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d009      	beq.n	800c5e4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	8b5b      	ldrh	r3, [r3, #26]
 800c5d4:	f023 0308 	bic.w	r3, r3, #8
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff f864 	bl	800b6ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e7      	bne.n	800c5be <tcp_handle_closepend+0xe>
  }
}
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20008c88 	.word	0x20008c88

0800c5fc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c606:	2001      	movs	r0, #1
 800c608:	f7fd fc94 	bl	8009f34 <memp_malloc>
 800c60c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d126      	bne.n	800c662 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c614:	f7ff ffcc 	bl	800c5b0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c618:	f7ff ff9a 	bl	800c550 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c61c:	2001      	movs	r0, #1
 800c61e:	f7fd fc89 	bl	8009f34 <memp_malloc>
 800c622:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d11b      	bne.n	800c662 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c62a:	2009      	movs	r0, #9
 800c62c:	f7ff ff46 	bl	800c4bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c630:	2001      	movs	r0, #1
 800c632:	f7fd fc7f 	bl	8009f34 <memp_malloc>
 800c636:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d111      	bne.n	800c662 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c63e:	2008      	movs	r0, #8
 800c640:	f7ff ff3c 	bl	800c4bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c644:	2001      	movs	r0, #1
 800c646:	f7fd fc75 	bl	8009f34 <memp_malloc>
 800c64a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d107      	bne.n	800c662 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff fee3 	bl	800c420 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c65a:	2001      	movs	r0, #1
 800c65c:	f7fd fc6a 	bl	8009f34 <memp_malloc>
 800c660:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d03f      	beq.n	800c6e8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c668:	229c      	movs	r2, #156	; 0x9c
 800c66a:	2100      	movs	r1, #0
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f007 fb43 	bl	8013cf8 <memset>
    pcb->prio = prio;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	79fa      	ldrb	r2, [r7, #7]
 800c676:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c67e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	22ff      	movs	r2, #255	; 0xff
 800c696:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c69e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2206      	movs	r2, #6
 800c6a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2206      	movs	r2, #6
 800c6ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6b4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c6be:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <tcp_alloc+0xf8>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c6c6:	4b0c      	ldr	r3, [pc, #48]	; (800c6f8 <tcp_alloc+0xfc>)
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c6d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	4a08      	ldr	r2, [pc, #32]	; (800c6fc <tcp_alloc+0x100>)
 800c6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4a07      	ldr	r2, [pc, #28]	; (800c700 <tcp_alloc+0x104>)
 800c6e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20008c7c 	.word	0x20008c7c
 800c6f8:	20008c92 	.word	0x20008c92
 800c6fc:	0800c3b5 	.word	0x0800c3b5
 800c700:	006ddd00 	.word	0x006ddd00

0800c704 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d107      	bne.n	800c722 <tcp_pcb_purge+0x1e>
 800c712:	4b21      	ldr	r3, [pc, #132]	; (800c798 <tcp_pcb_purge+0x94>)
 800c714:	f640 0251 	movw	r2, #2129	; 0x851
 800c718:	4920      	ldr	r1, [pc, #128]	; (800c79c <tcp_pcb_purge+0x98>)
 800c71a:	4821      	ldr	r0, [pc, #132]	; (800c7a0 <tcp_pcb_purge+0x9c>)
 800c71c:	f007 faf4 	bl	8013d08 <iprintf>
 800c720:	e037      	b.n	800c792 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7d1b      	ldrb	r3, [r3, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d033      	beq.n	800c792 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c72e:	2b0a      	cmp	r3, #10
 800c730:	d02f      	beq.n	800c792 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c736:	2b01      	cmp	r3, #1
 800c738:	d02b      	beq.n	800c792 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d007      	beq.n	800c752 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c746:	4618      	mov	r0, r3
 800c748:	f7fe fada 	bl	800ad00 <pbuf_free>
      pcb->refused_data = NULL;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f986 	bl	800ca6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c766:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff fdc7 	bl	800c300 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c776:	4618      	mov	r0, r3
 800c778:	f7ff fdc2 	bl	800c300 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	66da      	str	r2, [r3, #108]	; 0x6c
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	08015bf4 	.word	0x08015bf4
 800c79c:	08016240 	.word	0x08016240
 800c7a0:	08015c38 	.word	0x08015c38

0800c7a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d106      	bne.n	800c7c2 <tcp_pcb_remove+0x1e>
 800c7b4:	4b3e      	ldr	r3, [pc, #248]	; (800c8b0 <tcp_pcb_remove+0x10c>)
 800c7b6:	f640 0283 	movw	r2, #2179	; 0x883
 800c7ba:	493e      	ldr	r1, [pc, #248]	; (800c8b4 <tcp_pcb_remove+0x110>)
 800c7bc:	483e      	ldr	r0, [pc, #248]	; (800c8b8 <tcp_pcb_remove+0x114>)
 800c7be:	f007 faa3 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d106      	bne.n	800c7d6 <tcp_pcb_remove+0x32>
 800c7c8:	4b39      	ldr	r3, [pc, #228]	; (800c8b0 <tcp_pcb_remove+0x10c>)
 800c7ca:	f640 0284 	movw	r2, #2180	; 0x884
 800c7ce:	493b      	ldr	r1, [pc, #236]	; (800c8bc <tcp_pcb_remove+0x118>)
 800c7d0:	4839      	ldr	r0, [pc, #228]	; (800c8b8 <tcp_pcb_remove+0x114>)
 800c7d2:	f007 fa99 	bl	8013d08 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d105      	bne.n	800c7ec <tcp_pcb_remove+0x48>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68da      	ldr	r2, [r3, #12]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	601a      	str	r2, [r3, #0]
 800c7ea:	e013      	b.n	800c814 <tcp_pcb_remove+0x70>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	e00c      	b.n	800c80e <tcp_pcb_remove+0x6a>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d104      	bne.n	800c808 <tcp_pcb_remove+0x64>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	e005      	b.n	800c814 <tcp_pcb_remove+0x70>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1ef      	bne.n	800c7f4 <tcp_pcb_remove+0x50>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2200      	movs	r2, #0
 800c818:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c81a:	6838      	ldr	r0, [r7, #0]
 800c81c:	f7ff ff72 	bl	800c704 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	7d1b      	ldrb	r3, [r3, #20]
 800c824:	2b0a      	cmp	r3, #10
 800c826:	d013      	beq.n	800c850 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d00f      	beq.n	800c850 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	8b5b      	ldrh	r3, [r3, #26]
 800c834:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d009      	beq.n	800c850 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	8b5b      	ldrh	r3, [r3, #26]
 800c840:	f043 0302 	orr.w	r3, r3, #2
 800c844:	b29a      	uxth	r2, r3
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c84a:	6838      	ldr	r0, [r7, #0]
 800c84c:	f002 ff6e 	bl	800f72c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	7d1b      	ldrb	r3, [r3, #20]
 800c854:	2b01      	cmp	r3, #1
 800c856:	d020      	beq.n	800c89a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d006      	beq.n	800c86e <tcp_pcb_remove+0xca>
 800c860:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <tcp_pcb_remove+0x10c>)
 800c862:	f640 0293 	movw	r2, #2195	; 0x893
 800c866:	4916      	ldr	r1, [pc, #88]	; (800c8c0 <tcp_pcb_remove+0x11c>)
 800c868:	4813      	ldr	r0, [pc, #76]	; (800c8b8 <tcp_pcb_remove+0x114>)
 800c86a:	f007 fa4d 	bl	8013d08 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c872:	2b00      	cmp	r3, #0
 800c874:	d006      	beq.n	800c884 <tcp_pcb_remove+0xe0>
 800c876:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <tcp_pcb_remove+0x10c>)
 800c878:	f640 0294 	movw	r2, #2196	; 0x894
 800c87c:	4911      	ldr	r1, [pc, #68]	; (800c8c4 <tcp_pcb_remove+0x120>)
 800c87e:	480e      	ldr	r0, [pc, #56]	; (800c8b8 <tcp_pcb_remove+0x114>)
 800c880:	f007 fa42 	bl	8013d08 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d006      	beq.n	800c89a <tcp_pcb_remove+0xf6>
 800c88c:	4b08      	ldr	r3, [pc, #32]	; (800c8b0 <tcp_pcb_remove+0x10c>)
 800c88e:	f640 0296 	movw	r2, #2198	; 0x896
 800c892:	490d      	ldr	r1, [pc, #52]	; (800c8c8 <tcp_pcb_remove+0x124>)
 800c894:	4808      	ldr	r0, [pc, #32]	; (800c8b8 <tcp_pcb_remove+0x114>)
 800c896:	f007 fa37 	bl	8013d08 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	2200      	movs	r2, #0
 800c89e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c8a6:	bf00      	nop
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	08015bf4 	.word	0x08015bf4
 800c8b4:	0801625c 	.word	0x0801625c
 800c8b8:	08015c38 	.word	0x08015c38
 800c8bc:	08016278 	.word	0x08016278
 800c8c0:	08016298 	.word	0x08016298
 800c8c4:	080162b0 	.word	0x080162b0
 800c8c8:	080162cc 	.word	0x080162cc

0800c8cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <tcp_next_iss+0x1c>
 800c8da:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <tcp_next_iss+0x38>)
 800c8dc:	f640 02af 	movw	r2, #2223	; 0x8af
 800c8e0:	4909      	ldr	r1, [pc, #36]	; (800c908 <tcp_next_iss+0x3c>)
 800c8e2:	480a      	ldr	r0, [pc, #40]	; (800c90c <tcp_next_iss+0x40>)
 800c8e4:	f007 fa10 	bl	8013d08 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c8e8:	4b09      	ldr	r3, [pc, #36]	; (800c910 <tcp_next_iss+0x44>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	4b09      	ldr	r3, [pc, #36]	; (800c914 <tcp_next_iss+0x48>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	4a07      	ldr	r2, [pc, #28]	; (800c910 <tcp_next_iss+0x44>)
 800c8f4:	6013      	str	r3, [r2, #0]
  return iss;
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <tcp_next_iss+0x44>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	08015bf4 	.word	0x08015bf4
 800c908:	080162e4 	.word	0x080162e4
 800c90c:	08015c38 	.word	0x08015c38
 800c910:	20000024 	.word	0x20000024
 800c914:	20008c7c 	.word	0x20008c7c

0800c918 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d106      	bne.n	800c93a <tcp_eff_send_mss_netif+0x22>
 800c92c:	4b14      	ldr	r3, [pc, #80]	; (800c980 <tcp_eff_send_mss_netif+0x68>)
 800c92e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c932:	4914      	ldr	r1, [pc, #80]	; (800c984 <tcp_eff_send_mss_netif+0x6c>)
 800c934:	4814      	ldr	r0, [pc, #80]	; (800c988 <tcp_eff_send_mss_netif+0x70>)
 800c936:	f007 f9e7 	bl	8013d08 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c940:	89fb      	ldrh	r3, [r7, #14]
 800c942:	e019      	b.n	800c978 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c948:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c94a:	8afb      	ldrh	r3, [r7, #22]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d012      	beq.n	800c976 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c950:	2328      	movs	r3, #40	; 0x28
 800c952:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c954:	8afa      	ldrh	r2, [r7, #22]
 800c956:	8abb      	ldrh	r3, [r7, #20]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d904      	bls.n	800c966 <tcp_eff_send_mss_netif+0x4e>
 800c95c:	8afa      	ldrh	r2, [r7, #22]
 800c95e:	8abb      	ldrh	r3, [r7, #20]
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	b29b      	uxth	r3, r3
 800c964:	e000      	b.n	800c968 <tcp_eff_send_mss_netif+0x50>
 800c966:	2300      	movs	r3, #0
 800c968:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c96a:	8a7a      	ldrh	r2, [r7, #18]
 800c96c:	89fb      	ldrh	r3, [r7, #14]
 800c96e:	4293      	cmp	r3, r2
 800c970:	bf28      	it	cs
 800c972:	4613      	movcs	r3, r2
 800c974:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c976:	89fb      	ldrh	r3, [r7, #14]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	08015bf4 	.word	0x08015bf4
 800c984:	08016300 	.word	0x08016300
 800c988:	08015c38 	.word	0x08015c38

0800c98c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d119      	bne.n	800c9d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c9a0:	4b10      	ldr	r3, [pc, #64]	; (800c9e4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c9a2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c9a6:	4910      	ldr	r1, [pc, #64]	; (800c9e8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c9a8:	4810      	ldr	r0, [pc, #64]	; (800c9ec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c9aa:	f007 f9ad 	bl	8013d08 <iprintf>

  while (pcb != NULL) {
 800c9ae:	e011      	b.n	800c9d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d108      	bne.n	800c9ce <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f7fe ffc6 	bl	800b954 <tcp_abort>
      pcb = next;
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	e002      	b.n	800c9d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1ea      	bne.n	800c9b0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c9da:	bf00      	nop
 800c9dc:	bf00      	nop
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	08015bf4 	.word	0x08015bf4
 800c9e8:	08016328 	.word	0x08016328
 800c9ec:	08015c38 	.word	0x08015c38

0800c9f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02a      	beq.n	800ca56 <tcp_netif_ip_addr_changed+0x66>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d026      	beq.n	800ca56 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ca08:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <tcp_netif_ip_addr_changed+0x70>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff ffbc 	bl	800c98c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ca14:	4b13      	ldr	r3, [pc, #76]	; (800ca64 <tcp_netif_ip_addr_changed+0x74>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff ffb6 	bl	800c98c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d017      	beq.n	800ca56 <tcp_netif_ip_addr_changed+0x66>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d013      	beq.n	800ca56 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca2e:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <tcp_netif_ip_addr_changed+0x78>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	e00c      	b.n	800ca50 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d103      	bne.n	800ca4a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1ef      	bne.n	800ca36 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ca56:	bf00      	nop
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20008c88 	.word	0x20008c88
 800ca64:	20008c80 	.word	0x20008c80
 800ca68:	20008c84 	.word	0x20008c84

0800ca6c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d007      	beq.n	800ca8c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff fc3d 	bl	800c300 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ca94:	b590      	push	{r4, r7, lr}
 800ca96:	b08d      	sub	sp, #52	; 0x34
 800ca98:	af04      	add	r7, sp, #16
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d105      	bne.n	800cab0 <tcp_input+0x1c>
 800caa4:	4b9b      	ldr	r3, [pc, #620]	; (800cd14 <tcp_input+0x280>)
 800caa6:	2283      	movs	r2, #131	; 0x83
 800caa8:	499b      	ldr	r1, [pc, #620]	; (800cd18 <tcp_input+0x284>)
 800caaa:	489c      	ldr	r0, [pc, #624]	; (800cd1c <tcp_input+0x288>)
 800caac:	f007 f92c 	bl	8013d08 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4a9a      	ldr	r2, [pc, #616]	; (800cd20 <tcp_input+0x28c>)
 800cab6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	895b      	ldrh	r3, [r3, #10]
 800cabc:	2b13      	cmp	r3, #19
 800cabe:	f240 83d1 	bls.w	800d264 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cac2:	4b98      	ldr	r3, [pc, #608]	; (800cd24 <tcp_input+0x290>)
 800cac4:	695b      	ldr	r3, [r3, #20]
 800cac6:	4a97      	ldr	r2, [pc, #604]	; (800cd24 <tcp_input+0x290>)
 800cac8:	6812      	ldr	r2, [r2, #0]
 800caca:	4611      	mov	r1, r2
 800cacc:	4618      	mov	r0, r3
 800cace:	f005 ffd1 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f040 83c7 	bne.w	800d268 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cada:	4b92      	ldr	r3, [pc, #584]	; (800cd24 <tcp_input+0x290>)
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cae2:	2be0      	cmp	r3, #224	; 0xe0
 800cae4:	f000 83c0 	beq.w	800d268 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cae8:	4b8d      	ldr	r3, [pc, #564]	; (800cd20 <tcp_input+0x28c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	899b      	ldrh	r3, [r3, #12]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fc fda7 	bl	8009644 <lwip_htons>
 800caf6:	4603      	mov	r3, r0
 800caf8:	0b1b      	lsrs	r3, r3, #12
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cb02:	7cbb      	ldrb	r3, [r7, #18]
 800cb04:	2b13      	cmp	r3, #19
 800cb06:	f240 83b1 	bls.w	800d26c <tcp_input+0x7d8>
 800cb0a:	7cbb      	ldrb	r3, [r7, #18]
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	891b      	ldrh	r3, [r3, #8]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	f200 83aa 	bhi.w	800d26c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cb18:	7cbb      	ldrb	r3, [r7, #18]
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	3b14      	subs	r3, #20
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	4b81      	ldr	r3, [pc, #516]	; (800cd28 <tcp_input+0x294>)
 800cb22:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cb24:	4b81      	ldr	r3, [pc, #516]	; (800cd2c <tcp_input+0x298>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	895a      	ldrh	r2, [r3, #10]
 800cb2e:	7cbb      	ldrb	r3, [r7, #18]
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d309      	bcc.n	800cb4a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cb36:	4b7c      	ldr	r3, [pc, #496]	; (800cd28 <tcp_input+0x294>)
 800cb38:	881a      	ldrh	r2, [r3, #0]
 800cb3a:	4b7d      	ldr	r3, [pc, #500]	; (800cd30 <tcp_input+0x29c>)
 800cb3c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cb3e:	7cbb      	ldrb	r3, [r7, #18]
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7fe f856 	bl	800abf4 <pbuf_remove_header>
 800cb48:	e04e      	b.n	800cbe8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d105      	bne.n	800cb5e <tcp_input+0xca>
 800cb52:	4b70      	ldr	r3, [pc, #448]	; (800cd14 <tcp_input+0x280>)
 800cb54:	22c2      	movs	r2, #194	; 0xc2
 800cb56:	4977      	ldr	r1, [pc, #476]	; (800cd34 <tcp_input+0x2a0>)
 800cb58:	4870      	ldr	r0, [pc, #448]	; (800cd1c <tcp_input+0x288>)
 800cb5a:	f007 f8d5 	bl	8013d08 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cb5e:	2114      	movs	r1, #20
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7fe f847 	bl	800abf4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	895a      	ldrh	r2, [r3, #10]
 800cb6a:	4b71      	ldr	r3, [pc, #452]	; (800cd30 <tcp_input+0x29c>)
 800cb6c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cb6e:	4b6e      	ldr	r3, [pc, #440]	; (800cd28 <tcp_input+0x294>)
 800cb70:	881a      	ldrh	r2, [r3, #0]
 800cb72:	4b6f      	ldr	r3, [pc, #444]	; (800cd30 <tcp_input+0x29c>)
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cb7a:	4b6d      	ldr	r3, [pc, #436]	; (800cd30 <tcp_input+0x29c>)
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7fe f837 	bl	800abf4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	895b      	ldrh	r3, [r3, #10]
 800cb8c:	8a3a      	ldrh	r2, [r7, #16]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	f200 836e 	bhi.w	800d270 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	4a64      	ldr	r2, [pc, #400]	; (800cd2c <tcp_input+0x298>)
 800cb9c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	8a3a      	ldrh	r2, [r7, #16]
 800cba4:	4611      	mov	r1, r2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe f824 	bl	800abf4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	891a      	ldrh	r2, [r3, #8]
 800cbb0:	8a3b      	ldrh	r3, [r7, #16]
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	895b      	ldrh	r3, [r3, #10]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d005      	beq.n	800cbce <tcp_input+0x13a>
 800cbc2:	4b54      	ldr	r3, [pc, #336]	; (800cd14 <tcp_input+0x280>)
 800cbc4:	22df      	movs	r2, #223	; 0xdf
 800cbc6:	495c      	ldr	r1, [pc, #368]	; (800cd38 <tcp_input+0x2a4>)
 800cbc8:	4854      	ldr	r0, [pc, #336]	; (800cd1c <tcp_input+0x288>)
 800cbca:	f007 f89d 	bl	8013d08 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	891a      	ldrh	r2, [r3, #8]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	891b      	ldrh	r3, [r3, #8]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d005      	beq.n	800cbe8 <tcp_input+0x154>
 800cbdc:	4b4d      	ldr	r3, [pc, #308]	; (800cd14 <tcp_input+0x280>)
 800cbde:	22e0      	movs	r2, #224	; 0xe0
 800cbe0:	4956      	ldr	r1, [pc, #344]	; (800cd3c <tcp_input+0x2a8>)
 800cbe2:	484e      	ldr	r0, [pc, #312]	; (800cd1c <tcp_input+0x288>)
 800cbe4:	f007 f890 	bl	8013d08 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cbe8:	4b4d      	ldr	r3, [pc, #308]	; (800cd20 <tcp_input+0x28c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	4a4b      	ldr	r2, [pc, #300]	; (800cd20 <tcp_input+0x28c>)
 800cbf2:	6814      	ldr	r4, [r2, #0]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fc fd25 	bl	8009644 <lwip_htons>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cbfe:	4b48      	ldr	r3, [pc, #288]	; (800cd20 <tcp_input+0x28c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	885b      	ldrh	r3, [r3, #2]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4a46      	ldr	r2, [pc, #280]	; (800cd20 <tcp_input+0x28c>)
 800cc08:	6814      	ldr	r4, [r2, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fc fd1a 	bl	8009644 <lwip_htons>
 800cc10:	4603      	mov	r3, r0
 800cc12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cc14:	4b42      	ldr	r3, [pc, #264]	; (800cd20 <tcp_input+0x28c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	4a41      	ldr	r2, [pc, #260]	; (800cd20 <tcp_input+0x28c>)
 800cc1c:	6814      	ldr	r4, [r2, #0]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fc fd25 	bl	800966e <lwip_htonl>
 800cc24:	4603      	mov	r3, r0
 800cc26:	6063      	str	r3, [r4, #4]
 800cc28:	6863      	ldr	r3, [r4, #4]
 800cc2a:	4a45      	ldr	r2, [pc, #276]	; (800cd40 <tcp_input+0x2ac>)
 800cc2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cc2e:	4b3c      	ldr	r3, [pc, #240]	; (800cd20 <tcp_input+0x28c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	4a3a      	ldr	r2, [pc, #232]	; (800cd20 <tcp_input+0x28c>)
 800cc36:	6814      	ldr	r4, [r2, #0]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fc fd18 	bl	800966e <lwip_htonl>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	60a3      	str	r3, [r4, #8]
 800cc42:	68a3      	ldr	r3, [r4, #8]
 800cc44:	4a3f      	ldr	r2, [pc, #252]	; (800cd44 <tcp_input+0x2b0>)
 800cc46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cc48:	4b35      	ldr	r3, [pc, #212]	; (800cd20 <tcp_input+0x28c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	89db      	ldrh	r3, [r3, #14]
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	4a33      	ldr	r2, [pc, #204]	; (800cd20 <tcp_input+0x28c>)
 800cc52:	6814      	ldr	r4, [r2, #0]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fc fcf5 	bl	8009644 <lwip_htons>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cc5e:	4b30      	ldr	r3, [pc, #192]	; (800cd20 <tcp_input+0x28c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	899b      	ldrh	r3, [r3, #12]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fc fcec 	bl	8009644 <lwip_htons>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	4b34      	ldr	r3, [pc, #208]	; (800cd48 <tcp_input+0x2b4>)
 800cc78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	891a      	ldrh	r2, [r3, #8]
 800cc7e:	4b33      	ldr	r3, [pc, #204]	; (800cd4c <tcp_input+0x2b8>)
 800cc80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cc82:	4b31      	ldr	r3, [pc, #196]	; (800cd48 <tcp_input+0x2b4>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f003 0303 	and.w	r3, r3, #3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00c      	beq.n	800cca8 <tcp_input+0x214>
    tcplen++;
 800cc8e:	4b2f      	ldr	r3, [pc, #188]	; (800cd4c <tcp_input+0x2b8>)
 800cc90:	881b      	ldrh	r3, [r3, #0]
 800cc92:	3301      	adds	r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	4b2d      	ldr	r3, [pc, #180]	; (800cd4c <tcp_input+0x2b8>)
 800cc98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	891a      	ldrh	r2, [r3, #8]
 800cc9e:	4b2b      	ldr	r3, [pc, #172]	; (800cd4c <tcp_input+0x2b8>)
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	f200 82e6 	bhi.w	800d274 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccac:	4b28      	ldr	r3, [pc, #160]	; (800cd50 <tcp_input+0x2bc>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	e09d      	b.n	800cdf0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	7d1b      	ldrb	r3, [r3, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d105      	bne.n	800ccc8 <tcp_input+0x234>
 800ccbc:	4b15      	ldr	r3, [pc, #84]	; (800cd14 <tcp_input+0x280>)
 800ccbe:	22fb      	movs	r2, #251	; 0xfb
 800ccc0:	4924      	ldr	r1, [pc, #144]	; (800cd54 <tcp_input+0x2c0>)
 800ccc2:	4816      	ldr	r0, [pc, #88]	; (800cd1c <tcp_input+0x288>)
 800ccc4:	f007 f820 	bl	8013d08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	7d1b      	ldrb	r3, [r3, #20]
 800cccc:	2b0a      	cmp	r3, #10
 800ccce:	d105      	bne.n	800ccdc <tcp_input+0x248>
 800ccd0:	4b10      	ldr	r3, [pc, #64]	; (800cd14 <tcp_input+0x280>)
 800ccd2:	22fc      	movs	r2, #252	; 0xfc
 800ccd4:	4920      	ldr	r1, [pc, #128]	; (800cd58 <tcp_input+0x2c4>)
 800ccd6:	4811      	ldr	r0, [pc, #68]	; (800cd1c <tcp_input+0x288>)
 800ccd8:	f007 f816 	bl	8013d08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	7d1b      	ldrb	r3, [r3, #20]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d105      	bne.n	800ccf0 <tcp_input+0x25c>
 800cce4:	4b0b      	ldr	r3, [pc, #44]	; (800cd14 <tcp_input+0x280>)
 800cce6:	22fd      	movs	r2, #253	; 0xfd
 800cce8:	491c      	ldr	r1, [pc, #112]	; (800cd5c <tcp_input+0x2c8>)
 800ccea:	480c      	ldr	r0, [pc, #48]	; (800cd1c <tcp_input+0x288>)
 800ccec:	f007 f80c 	bl	8013d08 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	7a1b      	ldrb	r3, [r3, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d033      	beq.n	800cd60 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	7a1a      	ldrb	r2, [r3, #8]
 800ccfc:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <tcp_input+0x290>)
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd04:	3301      	adds	r3, #1
 800cd06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d029      	beq.n	800cd60 <tcp_input+0x2cc>
      prev = pcb;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	61bb      	str	r3, [r7, #24]
      continue;
 800cd10:	e06b      	b.n	800cdea <tcp_input+0x356>
 800cd12:	bf00      	nop
 800cd14:	0801635c 	.word	0x0801635c
 800cd18:	08016390 	.word	0x08016390
 800cd1c:	080163a8 	.word	0x080163a8
 800cd20:	20008ca4 	.word	0x20008ca4
 800cd24:	2000570c 	.word	0x2000570c
 800cd28:	20008ca8 	.word	0x20008ca8
 800cd2c:	20008cac 	.word	0x20008cac
 800cd30:	20008caa 	.word	0x20008caa
 800cd34:	080163d0 	.word	0x080163d0
 800cd38:	080163e0 	.word	0x080163e0
 800cd3c:	080163ec 	.word	0x080163ec
 800cd40:	20008cb4 	.word	0x20008cb4
 800cd44:	20008cb8 	.word	0x20008cb8
 800cd48:	20008cc0 	.word	0x20008cc0
 800cd4c:	20008cbe 	.word	0x20008cbe
 800cd50:	20008c88 	.word	0x20008c88
 800cd54:	0801640c 	.word	0x0801640c
 800cd58:	08016434 	.word	0x08016434
 800cd5c:	08016460 	.word	0x08016460
    }

    if (pcb->remote_port == tcphdr->src &&
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	8b1a      	ldrh	r2, [r3, #24]
 800cd64:	4b72      	ldr	r3, [pc, #456]	; (800cf30 <tcp_input+0x49c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d13a      	bne.n	800cde6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	8ada      	ldrh	r2, [r3, #22]
 800cd74:	4b6e      	ldr	r3, [pc, #440]	; (800cf30 <tcp_input+0x49c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	885b      	ldrh	r3, [r3, #2]
 800cd7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d132      	bne.n	800cde6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	4b6b      	ldr	r3, [pc, #428]	; (800cf34 <tcp_input+0x4a0>)
 800cd86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d12c      	bne.n	800cde6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	4b68      	ldr	r3, [pc, #416]	; (800cf34 <tcp_input+0x4a0>)
 800cd92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d126      	bne.n	800cde6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	69fa      	ldr	r2, [r7, #28]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d106      	bne.n	800cdb0 <tcp_input+0x31c>
 800cda2:	4b65      	ldr	r3, [pc, #404]	; (800cf38 <tcp_input+0x4a4>)
 800cda4:	f240 120d 	movw	r2, #269	; 0x10d
 800cda8:	4964      	ldr	r1, [pc, #400]	; (800cf3c <tcp_input+0x4a8>)
 800cdaa:	4865      	ldr	r0, [pc, #404]	; (800cf40 <tcp_input+0x4ac>)
 800cdac:	f006 ffac 	bl	8013d08 <iprintf>
      if (prev != NULL) {
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00a      	beq.n	800cdcc <tcp_input+0x338>
        prev->next = pcb->next;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	68da      	ldr	r2, [r3, #12]
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cdbe:	4b61      	ldr	r3, [pc, #388]	; (800cf44 <tcp_input+0x4b0>)
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cdc6:	4a5f      	ldr	r2, [pc, #380]	; (800cf44 <tcp_input+0x4b0>)
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	69fa      	ldr	r2, [r7, #28]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d111      	bne.n	800cdfa <tcp_input+0x366>
 800cdd6:	4b58      	ldr	r3, [pc, #352]	; (800cf38 <tcp_input+0x4a4>)
 800cdd8:	f240 1215 	movw	r2, #277	; 0x115
 800cddc:	495a      	ldr	r1, [pc, #360]	; (800cf48 <tcp_input+0x4b4>)
 800cdde:	4858      	ldr	r0, [pc, #352]	; (800cf40 <tcp_input+0x4ac>)
 800cde0:	f006 ff92 	bl	8013d08 <iprintf>
      break;
 800cde4:	e009      	b.n	800cdfa <tcp_input+0x366>
    }
    prev = pcb;
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f47f af5e 	bne.w	800ccb4 <tcp_input+0x220>
 800cdf8:	e000      	b.n	800cdfc <tcp_input+0x368>
      break;
 800cdfa:	bf00      	nop
  }

  if (pcb == NULL) {
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f040 80aa 	bne.w	800cf58 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce04:	4b51      	ldr	r3, [pc, #324]	; (800cf4c <tcp_input+0x4b8>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	61fb      	str	r3, [r7, #28]
 800ce0a:	e03f      	b.n	800ce8c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	7d1b      	ldrb	r3, [r3, #20]
 800ce10:	2b0a      	cmp	r3, #10
 800ce12:	d006      	beq.n	800ce22 <tcp_input+0x38e>
 800ce14:	4b48      	ldr	r3, [pc, #288]	; (800cf38 <tcp_input+0x4a4>)
 800ce16:	f240 121f 	movw	r2, #287	; 0x11f
 800ce1a:	494d      	ldr	r1, [pc, #308]	; (800cf50 <tcp_input+0x4bc>)
 800ce1c:	4848      	ldr	r0, [pc, #288]	; (800cf40 <tcp_input+0x4ac>)
 800ce1e:	f006 ff73 	bl	8013d08 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	7a1b      	ldrb	r3, [r3, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d009      	beq.n	800ce3e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	7a1a      	ldrb	r2, [r3, #8]
 800ce2e:	4b41      	ldr	r3, [pc, #260]	; (800cf34 <tcp_input+0x4a0>)
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce36:	3301      	adds	r3, #1
 800ce38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d122      	bne.n	800ce84 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	8b1a      	ldrh	r2, [r3, #24]
 800ce42:	4b3b      	ldr	r3, [pc, #236]	; (800cf30 <tcp_input+0x49c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d11b      	bne.n	800ce86 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	8ada      	ldrh	r2, [r3, #22]
 800ce52:	4b37      	ldr	r3, [pc, #220]	; (800cf30 <tcp_input+0x49c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	885b      	ldrh	r3, [r3, #2]
 800ce58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d113      	bne.n	800ce86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	4b34      	ldr	r3, [pc, #208]	; (800cf34 <tcp_input+0x4a0>)
 800ce64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d10d      	bne.n	800ce86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	4b31      	ldr	r3, [pc, #196]	; (800cf34 <tcp_input+0x4a0>)
 800ce70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d107      	bne.n	800ce86 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ce76:	69f8      	ldr	r0, [r7, #28]
 800ce78:	f000 fb56 	bl	800d528 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7fd ff3f 	bl	800ad00 <pbuf_free>
        return;
 800ce82:	e1fd      	b.n	800d280 <tcp_input+0x7ec>
        continue;
 800ce84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	61fb      	str	r3, [r7, #28]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1bc      	bne.n	800ce0c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ce92:	2300      	movs	r3, #0
 800ce94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce96:	4b2f      	ldr	r3, [pc, #188]	; (800cf54 <tcp_input+0x4c0>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	e02a      	b.n	800cef4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	7a1b      	ldrb	r3, [r3, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00c      	beq.n	800cec0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	7a1a      	ldrb	r2, [r3, #8]
 800ceaa:	4b22      	ldr	r3, [pc, #136]	; (800cf34 <tcp_input+0x4a0>)
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d002      	beq.n	800cec0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	61bb      	str	r3, [r7, #24]
        continue;
 800cebe:	e016      	b.n	800ceee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	8ada      	ldrh	r2, [r3, #22]
 800cec4:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <tcp_input+0x49c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	885b      	ldrh	r3, [r3, #2]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	429a      	cmp	r2, r3
 800cece:	d10c      	bne.n	800ceea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	4b17      	ldr	r3, [pc, #92]	; (800cf34 <tcp_input+0x4a0>)
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d00f      	beq.n	800cefc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00d      	beq.n	800cefe <tcp_input+0x46a>
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d009      	beq.n	800cefe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	617b      	str	r3, [r7, #20]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1d1      	bne.n	800ce9e <tcp_input+0x40a>
 800cefa:	e000      	b.n	800cefe <tcp_input+0x46a>
            break;
 800cefc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d029      	beq.n	800cf58 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	68da      	ldr	r2, [r3, #12]
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cf12:	4b10      	ldr	r3, [pc, #64]	; (800cf54 <tcp_input+0x4c0>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cf1a:	4a0e      	ldr	r2, [pc, #56]	; (800cf54 <tcp_input+0x4c0>)
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cf20:	6978      	ldr	r0, [r7, #20]
 800cf22:	f000 fa03 	bl	800d32c <tcp_listen_input>
      }
      pbuf_free(p);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7fd feea 	bl	800ad00 <pbuf_free>
      return;
 800cf2c:	e1a8      	b.n	800d280 <tcp_input+0x7ec>
 800cf2e:	bf00      	nop
 800cf30:	20008ca4 	.word	0x20008ca4
 800cf34:	2000570c 	.word	0x2000570c
 800cf38:	0801635c 	.word	0x0801635c
 800cf3c:	08016488 	.word	0x08016488
 800cf40:	080163a8 	.word	0x080163a8
 800cf44:	20008c88 	.word	0x20008c88
 800cf48:	080164b4 	.word	0x080164b4
 800cf4c:	20008c8c 	.word	0x20008c8c
 800cf50:	080164e0 	.word	0x080164e0
 800cf54:	20008c84 	.word	0x20008c84
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 8158 	beq.w	800d210 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cf60:	4b95      	ldr	r3, [pc, #596]	; (800d1b8 <tcp_input+0x724>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	891a      	ldrh	r2, [r3, #8]
 800cf6a:	4b93      	ldr	r3, [pc, #588]	; (800d1b8 <tcp_input+0x724>)
 800cf6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cf6e:	4a92      	ldr	r2, [pc, #584]	; (800d1b8 <tcp_input+0x724>)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cf74:	4b91      	ldr	r3, [pc, #580]	; (800d1bc <tcp_input+0x728>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a8f      	ldr	r2, [pc, #572]	; (800d1b8 <tcp_input+0x724>)
 800cf7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cf7c:	4b90      	ldr	r3, [pc, #576]	; (800d1c0 <tcp_input+0x72c>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cf82:	4b90      	ldr	r3, [pc, #576]	; (800d1c4 <tcp_input+0x730>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cf88:	4b8f      	ldr	r3, [pc, #572]	; (800d1c8 <tcp_input+0x734>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cf8e:	4b8f      	ldr	r3, [pc, #572]	; (800d1cc <tcp_input+0x738>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f003 0308 	and.w	r3, r3, #8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d006      	beq.n	800cfa8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7b5b      	ldrb	r3, [r3, #13]
 800cf9e:	f043 0301 	orr.w	r3, r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d017      	beq.n	800cfe0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cfb0:	69f8      	ldr	r0, [r7, #28]
 800cfb2:	f7ff f929 	bl	800c208 <tcp_process_refused_data>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f113 0f0d 	cmn.w	r3, #13
 800cfbc:	d007      	beq.n	800cfce <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00c      	beq.n	800cfe0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cfc6:	4b82      	ldr	r3, [pc, #520]	; (800d1d0 <tcp_input+0x73c>)
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d008      	beq.n	800cfe0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f040 80e3 	bne.w	800d19e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cfd8:	69f8      	ldr	r0, [r7, #28]
 800cfda:	f003 f9ad 	bl	8010338 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cfde:	e0de      	b.n	800d19e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cfe0:	4a7c      	ldr	r2, [pc, #496]	; (800d1d4 <tcp_input+0x740>)
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cfe6:	69f8      	ldr	r0, [r7, #28]
 800cfe8:	f000 fb18 	bl	800d61c <tcp_process>
 800cfec:	4603      	mov	r3, r0
 800cfee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cff0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cff4:	f113 0f0d 	cmn.w	r3, #13
 800cff8:	f000 80d3 	beq.w	800d1a2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800cffc:	4b71      	ldr	r3, [pc, #452]	; (800d1c4 <tcp_input+0x730>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	f003 0308 	and.w	r3, r3, #8
 800d004:	2b00      	cmp	r3, #0
 800d006:	d015      	beq.n	800d034 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d008      	beq.n	800d024 <tcp_input+0x590>
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d018:	69fa      	ldr	r2, [r7, #28]
 800d01a:	6912      	ldr	r2, [r2, #16]
 800d01c:	f06f 010d 	mvn.w	r1, #13
 800d020:	4610      	mov	r0, r2
 800d022:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d024:	69f9      	ldr	r1, [r7, #28]
 800d026:	486c      	ldr	r0, [pc, #432]	; (800d1d8 <tcp_input+0x744>)
 800d028:	f7ff fbbc 	bl	800c7a4 <tcp_pcb_remove>
        tcp_free(pcb);
 800d02c:	69f8      	ldr	r0, [r7, #28]
 800d02e:	f7fe f9a9 	bl	800b384 <tcp_free>
 800d032:	e0da      	b.n	800d1ea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d038:	4b63      	ldr	r3, [pc, #396]	; (800d1c8 <tcp_input+0x734>)
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01d      	beq.n	800d07c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d040:	4b61      	ldr	r3, [pc, #388]	; (800d1c8 <tcp_input+0x734>)
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00a      	beq.n	800d066 <tcp_input+0x5d2>
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d056:	69fa      	ldr	r2, [r7, #28]
 800d058:	6910      	ldr	r0, [r2, #16]
 800d05a:	89fa      	ldrh	r2, [r7, #14]
 800d05c:	69f9      	ldr	r1, [r7, #28]
 800d05e:	4798      	blx	r3
 800d060:	4603      	mov	r3, r0
 800d062:	74fb      	strb	r3, [r7, #19]
 800d064:	e001      	b.n	800d06a <tcp_input+0x5d6>
 800d066:	2300      	movs	r3, #0
 800d068:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d06a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d06e:	f113 0f0d 	cmn.w	r3, #13
 800d072:	f000 8098 	beq.w	800d1a6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d076:	4b54      	ldr	r3, [pc, #336]	; (800d1c8 <tcp_input+0x734>)
 800d078:	2200      	movs	r2, #0
 800d07a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d07c:	69f8      	ldr	r0, [r7, #28]
 800d07e:	f000 f915 	bl	800d2ac <tcp_input_delayed_close>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	f040 8090 	bne.w	800d1aa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d08a:	4b4d      	ldr	r3, [pc, #308]	; (800d1c0 <tcp_input+0x72c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d041      	beq.n	800d116 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d096:	2b00      	cmp	r3, #0
 800d098:	d006      	beq.n	800d0a8 <tcp_input+0x614>
 800d09a:	4b50      	ldr	r3, [pc, #320]	; (800d1dc <tcp_input+0x748>)
 800d09c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d0a0:	494f      	ldr	r1, [pc, #316]	; (800d1e0 <tcp_input+0x74c>)
 800d0a2:	4850      	ldr	r0, [pc, #320]	; (800d1e4 <tcp_input+0x750>)
 800d0a4:	f006 fe30 	bl	8013d08 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	8b5b      	ldrh	r3, [r3, #26]
 800d0ac:	f003 0310 	and.w	r3, r3, #16
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d008      	beq.n	800d0c6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d0b4:	4b42      	ldr	r3, [pc, #264]	; (800d1c0 <tcp_input+0x72c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fd fe21 	bl	800ad00 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d0be:	69f8      	ldr	r0, [r7, #28]
 800d0c0:	f7fe fc48 	bl	800b954 <tcp_abort>
            goto aborted;
 800d0c4:	e091      	b.n	800d1ea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00c      	beq.n	800d0ea <tcp_input+0x656>
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	6918      	ldr	r0, [r3, #16]
 800d0da:	4b39      	ldr	r3, [pc, #228]	; (800d1c0 <tcp_input+0x72c>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	69f9      	ldr	r1, [r7, #28]
 800d0e2:	47a0      	blx	r4
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	74fb      	strb	r3, [r7, #19]
 800d0e8:	e008      	b.n	800d0fc <tcp_input+0x668>
 800d0ea:	4b35      	ldr	r3, [pc, #212]	; (800d1c0 <tcp_input+0x72c>)
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	69f9      	ldr	r1, [r7, #28]
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	f7ff f95e 	bl	800c3b4 <tcp_recv_null>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d0fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d100:	f113 0f0d 	cmn.w	r3, #13
 800d104:	d053      	beq.n	800d1ae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d003      	beq.n	800d116 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d10e:	4b2c      	ldr	r3, [pc, #176]	; (800d1c0 <tcp_input+0x72c>)
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d116:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <tcp_input+0x730>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	f003 0320 	and.w	r3, r3, #32
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d030      	beq.n	800d184 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d126:	2b00      	cmp	r3, #0
 800d128:	d009      	beq.n	800d13e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d12e:	7b5a      	ldrb	r2, [r3, #13]
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d134:	f042 0220 	orr.w	r2, r2, #32
 800d138:	b2d2      	uxtb	r2, r2
 800d13a:	735a      	strb	r2, [r3, #13]
 800d13c:	e022      	b.n	800d184 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d142:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d146:	d005      	beq.n	800d154 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d14c:	3301      	adds	r3, #1
 800d14e:	b29a      	uxth	r2, r3
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00b      	beq.n	800d176 <tcp_input+0x6e2>
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	6918      	ldr	r0, [r3, #16]
 800d168:	2300      	movs	r3, #0
 800d16a:	2200      	movs	r2, #0
 800d16c:	69f9      	ldr	r1, [r7, #28]
 800d16e:	47a0      	blx	r4
 800d170:	4603      	mov	r3, r0
 800d172:	74fb      	strb	r3, [r7, #19]
 800d174:	e001      	b.n	800d17a <tcp_input+0x6e6>
 800d176:	2300      	movs	r3, #0
 800d178:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d17a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d17e:	f113 0f0d 	cmn.w	r3, #13
 800d182:	d016      	beq.n	800d1b2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d184:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <tcp_input+0x740>)
 800d186:	2200      	movs	r2, #0
 800d188:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d18a:	69f8      	ldr	r0, [r7, #28]
 800d18c:	f000 f88e 	bl	800d2ac <tcp_input_delayed_close>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d128      	bne.n	800d1e8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d196:	69f8      	ldr	r0, [r7, #28]
 800d198:	f002 fac8 	bl	800f72c <tcp_output>
 800d19c:	e025      	b.n	800d1ea <tcp_input+0x756>
        goto aborted;
 800d19e:	bf00      	nop
 800d1a0:	e023      	b.n	800d1ea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d1a2:	bf00      	nop
 800d1a4:	e021      	b.n	800d1ea <tcp_input+0x756>
              goto aborted;
 800d1a6:	bf00      	nop
 800d1a8:	e01f      	b.n	800d1ea <tcp_input+0x756>
          goto aborted;
 800d1aa:	bf00      	nop
 800d1ac:	e01d      	b.n	800d1ea <tcp_input+0x756>
            goto aborted;
 800d1ae:	bf00      	nop
 800d1b0:	e01b      	b.n	800d1ea <tcp_input+0x756>
              goto aborted;
 800d1b2:	bf00      	nop
 800d1b4:	e019      	b.n	800d1ea <tcp_input+0x756>
 800d1b6:	bf00      	nop
 800d1b8:	20008c94 	.word	0x20008c94
 800d1bc:	20008ca4 	.word	0x20008ca4
 800d1c0:	20008cc4 	.word	0x20008cc4
 800d1c4:	20008cc1 	.word	0x20008cc1
 800d1c8:	20008cbc 	.word	0x20008cbc
 800d1cc:	20008cc0 	.word	0x20008cc0
 800d1d0:	20008cbe 	.word	0x20008cbe
 800d1d4:	20008cc8 	.word	0x20008cc8
 800d1d8:	20008c88 	.word	0x20008c88
 800d1dc:	0801635c 	.word	0x0801635c
 800d1e0:	08016510 	.word	0x08016510
 800d1e4:	080163a8 	.word	0x080163a8
          goto aborted;
 800d1e8:	bf00      	nop
    tcp_input_pcb = NULL;
 800d1ea:	4b27      	ldr	r3, [pc, #156]	; (800d288 <tcp_input+0x7f4>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d1f0:	4b26      	ldr	r3, [pc, #152]	; (800d28c <tcp_input+0x7f8>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d1f6:	4b26      	ldr	r3, [pc, #152]	; (800d290 <tcp_input+0x7fc>)
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d03f      	beq.n	800d27e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d1fe:	4b24      	ldr	r3, [pc, #144]	; (800d290 <tcp_input+0x7fc>)
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	4618      	mov	r0, r3
 800d204:	f7fd fd7c 	bl	800ad00 <pbuf_free>
      inseg.p = NULL;
 800d208:	4b21      	ldr	r3, [pc, #132]	; (800d290 <tcp_input+0x7fc>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d20e:	e036      	b.n	800d27e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d210:	4b20      	ldr	r3, [pc, #128]	; (800d294 <tcp_input+0x800>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	899b      	ldrh	r3, [r3, #12]
 800d216:	b29b      	uxth	r3, r3
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fc fa13 	bl	8009644 <lwip_htons>
 800d21e:	4603      	mov	r3, r0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0304 	and.w	r3, r3, #4
 800d226:	2b00      	cmp	r3, #0
 800d228:	d118      	bne.n	800d25c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d22a:	4b1b      	ldr	r3, [pc, #108]	; (800d298 <tcp_input+0x804>)
 800d22c:	6819      	ldr	r1, [r3, #0]
 800d22e:	4b1b      	ldr	r3, [pc, #108]	; (800d29c <tcp_input+0x808>)
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	4b1a      	ldr	r3, [pc, #104]	; (800d2a0 <tcp_input+0x80c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d23a:	4b16      	ldr	r3, [pc, #88]	; (800d294 <tcp_input+0x800>)
 800d23c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d23e:	885b      	ldrh	r3, [r3, #2]
 800d240:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d242:	4a14      	ldr	r2, [pc, #80]	; (800d294 <tcp_input+0x800>)
 800d244:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d246:	8812      	ldrh	r2, [r2, #0]
 800d248:	b292      	uxth	r2, r2
 800d24a:	9202      	str	r2, [sp, #8]
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	4b15      	ldr	r3, [pc, #84]	; (800d2a4 <tcp_input+0x810>)
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <tcp_input+0x814>)
 800d254:	4602      	mov	r2, r0
 800d256:	2000      	movs	r0, #0
 800d258:	f003 f81c 	bl	8010294 <tcp_rst>
    pbuf_free(p);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7fd fd4f 	bl	800ad00 <pbuf_free>
  return;
 800d262:	e00c      	b.n	800d27e <tcp_input+0x7ea>
    goto dropped;
 800d264:	bf00      	nop
 800d266:	e006      	b.n	800d276 <tcp_input+0x7e2>
    goto dropped;
 800d268:	bf00      	nop
 800d26a:	e004      	b.n	800d276 <tcp_input+0x7e2>
    goto dropped;
 800d26c:	bf00      	nop
 800d26e:	e002      	b.n	800d276 <tcp_input+0x7e2>
      goto dropped;
 800d270:	bf00      	nop
 800d272:	e000      	b.n	800d276 <tcp_input+0x7e2>
      goto dropped;
 800d274:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7fd fd42 	bl	800ad00 <pbuf_free>
 800d27c:	e000      	b.n	800d280 <tcp_input+0x7ec>
  return;
 800d27e:	bf00      	nop
}
 800d280:	3724      	adds	r7, #36	; 0x24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd90      	pop	{r4, r7, pc}
 800d286:	bf00      	nop
 800d288:	20008cc8 	.word	0x20008cc8
 800d28c:	20008cc4 	.word	0x20008cc4
 800d290:	20008c94 	.word	0x20008c94
 800d294:	20008ca4 	.word	0x20008ca4
 800d298:	20008cb8 	.word	0x20008cb8
 800d29c:	20008cbe 	.word	0x20008cbe
 800d2a0:	20008cb4 	.word	0x20008cb4
 800d2a4:	2000571c 	.word	0x2000571c
 800d2a8:	20005720 	.word	0x20005720

0800d2ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d106      	bne.n	800d2c8 <tcp_input_delayed_close+0x1c>
 800d2ba:	4b17      	ldr	r3, [pc, #92]	; (800d318 <tcp_input_delayed_close+0x6c>)
 800d2bc:	f240 225a 	movw	r2, #602	; 0x25a
 800d2c0:	4916      	ldr	r1, [pc, #88]	; (800d31c <tcp_input_delayed_close+0x70>)
 800d2c2:	4817      	ldr	r0, [pc, #92]	; (800d320 <tcp_input_delayed_close+0x74>)
 800d2c4:	f006 fd20 	bl	8013d08 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d2c8:	4b16      	ldr	r3, [pc, #88]	; (800d324 <tcp_input_delayed_close+0x78>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 0310 	and.w	r3, r3, #16
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d01c      	beq.n	800d30e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	8b5b      	ldrh	r3, [r3, #26]
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10d      	bne.n	800d2fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d008      	beq.n	800d2fc <tcp_input_delayed_close+0x50>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	6912      	ldr	r2, [r2, #16]
 800d2f4:	f06f 010e 	mvn.w	r1, #14
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d2fc:	6879      	ldr	r1, [r7, #4]
 800d2fe:	480a      	ldr	r0, [pc, #40]	; (800d328 <tcp_input_delayed_close+0x7c>)
 800d300:	f7ff fa50 	bl	800c7a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7fe f83d 	bl	800b384 <tcp_free>
    return 1;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e000      	b.n	800d310 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	0801635c 	.word	0x0801635c
 800d31c:	0801652c 	.word	0x0801652c
 800d320:	080163a8 	.word	0x080163a8
 800d324:	20008cc1 	.word	0x20008cc1
 800d328:	20008c88 	.word	0x20008c88

0800d32c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d32c:	b590      	push	{r4, r7, lr}
 800d32e:	b08b      	sub	sp, #44	; 0x2c
 800d330:	af04      	add	r7, sp, #16
 800d332:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d334:	4b6f      	ldr	r3, [pc, #444]	; (800d4f4 <tcp_listen_input+0x1c8>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	f003 0304 	and.w	r3, r3, #4
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f040 80d2 	bne.w	800d4e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d106      	bne.n	800d356 <tcp_listen_input+0x2a>
 800d348:	4b6b      	ldr	r3, [pc, #428]	; (800d4f8 <tcp_listen_input+0x1cc>)
 800d34a:	f240 2281 	movw	r2, #641	; 0x281
 800d34e:	496b      	ldr	r1, [pc, #428]	; (800d4fc <tcp_listen_input+0x1d0>)
 800d350:	486b      	ldr	r0, [pc, #428]	; (800d500 <tcp_listen_input+0x1d4>)
 800d352:	f006 fcd9 	bl	8013d08 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d356:	4b67      	ldr	r3, [pc, #412]	; (800d4f4 <tcp_listen_input+0x1c8>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	f003 0310 	and.w	r3, r3, #16
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d019      	beq.n	800d396 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d362:	4b68      	ldr	r3, [pc, #416]	; (800d504 <tcp_listen_input+0x1d8>)
 800d364:	6819      	ldr	r1, [r3, #0]
 800d366:	4b68      	ldr	r3, [pc, #416]	; (800d508 <tcp_listen_input+0x1dc>)
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	4b67      	ldr	r3, [pc, #412]	; (800d50c <tcp_listen_input+0x1e0>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d372:	4b67      	ldr	r3, [pc, #412]	; (800d510 <tcp_listen_input+0x1e4>)
 800d374:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d376:	885b      	ldrh	r3, [r3, #2]
 800d378:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d37a:	4a65      	ldr	r2, [pc, #404]	; (800d510 <tcp_listen_input+0x1e4>)
 800d37c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d37e:	8812      	ldrh	r2, [r2, #0]
 800d380:	b292      	uxth	r2, r2
 800d382:	9202      	str	r2, [sp, #8]
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	4b63      	ldr	r3, [pc, #396]	; (800d514 <tcp_listen_input+0x1e8>)
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	4b63      	ldr	r3, [pc, #396]	; (800d518 <tcp_listen_input+0x1ec>)
 800d38c:	4602      	mov	r2, r0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f002 ff80 	bl	8010294 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d394:	e0a9      	b.n	800d4ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d396:	4b57      	ldr	r3, [pc, #348]	; (800d4f4 <tcp_listen_input+0x1c8>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	f003 0302 	and.w	r3, r3, #2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f000 80a3 	beq.w	800d4ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7d5b      	ldrb	r3, [r3, #21]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff f927 	bl	800c5fc <tcp_alloc>
 800d3ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d111      	bne.n	800d3da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <tcp_listen_input+0xa8>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	699b      	ldr	r3, [r3, #24]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	6910      	ldr	r0, [r2, #16]
 800d3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	4798      	blx	r3
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73bb      	strb	r3, [r7, #14]
      return;
 800d3d2:	e08b      	b.n	800d4ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d3d4:	23f0      	movs	r3, #240	; 0xf0
 800d3d6:	73bb      	strb	r3, [r7, #14]
      return;
 800d3d8:	e088      	b.n	800d4ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d3da:	4b50      	ldr	r3, [pc, #320]	; (800d51c <tcp_listen_input+0x1f0>)
 800d3dc:	695a      	ldr	r2, [r3, #20]
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d3e2:	4b4e      	ldr	r3, [pc, #312]	; (800d51c <tcp_listen_input+0x1f0>)
 800d3e4:	691a      	ldr	r2, [r3, #16]
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8ada      	ldrh	r2, [r3, #22]
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d3f2:	4b47      	ldr	r3, [pc, #284]	; (800d510 <tcp_listen_input+0x1e4>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	2203      	movs	r2, #3
 800d402:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d404:	4b41      	ldr	r3, [pc, #260]	; (800d50c <tcp_listen_input+0x1e0>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d416:	6978      	ldr	r0, [r7, #20]
 800d418:	f7ff fa58 	bl	800c8cc <tcp_next_iss>
 800d41c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d436:	4b35      	ldr	r3, [pc, #212]	; (800d50c <tcp_listen_input+0x1e0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	1e5a      	subs	r2, r3, #1
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	691a      	ldr	r2, [r3, #16]
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7a5b      	ldrb	r3, [r3, #9]
 800d452:	f003 030c 	and.w	r3, r3, #12
 800d456:	b2da      	uxtb	r2, r3
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7a1a      	ldrb	r2, [r3, #8]
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d464:	4b2e      	ldr	r3, [pc, #184]	; (800d520 <tcp_listen_input+0x1f4>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	60da      	str	r2, [r3, #12]
 800d46c:	4a2c      	ldr	r2, [pc, #176]	; (800d520 <tcp_listen_input+0x1f4>)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	f003 f8d1 	bl	8010618 <tcp_timer_needed>
 800d476:	4b2b      	ldr	r3, [pc, #172]	; (800d524 <tcp_listen_input+0x1f8>)
 800d478:	2201      	movs	r2, #1
 800d47a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d47c:	6978      	ldr	r0, [r7, #20]
 800d47e:	f001 fd8f 	bl	800efa0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d482:	4b23      	ldr	r3, [pc, #140]	; (800d510 <tcp_listen_input+0x1e4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	89db      	ldrh	r3, [r3, #14]
 800d488:	b29a      	uxth	r2, r3
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f005 f84f 	bl	8012548 <ip4_route>
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f7ff fa30 	bl	800c918 <tcp_eff_send_mss_netif>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d4c0:	2112      	movs	r1, #18
 800d4c2:	6978      	ldr	r0, [r7, #20]
 800d4c4:	f002 f844 	bl	800f550 <tcp_enqueue_flags>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d004      	beq.n	800d4de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	6978      	ldr	r0, [r7, #20]
 800d4d8:	f7fe f97e 	bl	800b7d8 <tcp_abandon>
      return;
 800d4dc:	e006      	b.n	800d4ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d4de:	6978      	ldr	r0, [r7, #20]
 800d4e0:	f002 f924 	bl	800f72c <tcp_output>
  return;
 800d4e4:	e001      	b.n	800d4ea <tcp_listen_input+0x1be>
    return;
 800d4e6:	bf00      	nop
 800d4e8:	e000      	b.n	800d4ec <tcp_listen_input+0x1c0>
  return;
 800d4ea:	bf00      	nop
}
 800d4ec:	371c      	adds	r7, #28
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd90      	pop	{r4, r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20008cc0 	.word	0x20008cc0
 800d4f8:	0801635c 	.word	0x0801635c
 800d4fc:	08016554 	.word	0x08016554
 800d500:	080163a8 	.word	0x080163a8
 800d504:	20008cb8 	.word	0x20008cb8
 800d508:	20008cbe 	.word	0x20008cbe
 800d50c:	20008cb4 	.word	0x20008cb4
 800d510:	20008ca4 	.word	0x20008ca4
 800d514:	2000571c 	.word	0x2000571c
 800d518:	20005720 	.word	0x20005720
 800d51c:	2000570c 	.word	0x2000570c
 800d520:	20008c88 	.word	0x20008c88
 800d524:	20008c90 	.word	0x20008c90

0800d528 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af04      	add	r7, sp, #16
 800d52e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d530:	4b2f      	ldr	r3, [pc, #188]	; (800d5f0 <tcp_timewait_input+0xc8>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d153      	bne.n	800d5e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <tcp_timewait_input+0x28>
 800d542:	4b2c      	ldr	r3, [pc, #176]	; (800d5f4 <tcp_timewait_input+0xcc>)
 800d544:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d548:	492b      	ldr	r1, [pc, #172]	; (800d5f8 <tcp_timewait_input+0xd0>)
 800d54a:	482c      	ldr	r0, [pc, #176]	; (800d5fc <tcp_timewait_input+0xd4>)
 800d54c:	f006 fbdc 	bl	8013d08 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d550:	4b27      	ldr	r3, [pc, #156]	; (800d5f0 <tcp_timewait_input+0xc8>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	f003 0302 	and.w	r3, r3, #2
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d02a      	beq.n	800d5b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d55c:	4b28      	ldr	r3, [pc, #160]	; (800d600 <tcp_timewait_input+0xd8>)
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	db2d      	blt.n	800d5c6 <tcp_timewait_input+0x9e>
 800d56a:	4b25      	ldr	r3, [pc, #148]	; (800d600 <tcp_timewait_input+0xd8>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d576:	440b      	add	r3, r1
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	dc23      	bgt.n	800d5c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d57e:	4b21      	ldr	r3, [pc, #132]	; (800d604 <tcp_timewait_input+0xdc>)
 800d580:	6819      	ldr	r1, [r3, #0]
 800d582:	4b21      	ldr	r3, [pc, #132]	; (800d608 <tcp_timewait_input+0xe0>)
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	461a      	mov	r2, r3
 800d588:	4b1d      	ldr	r3, [pc, #116]	; (800d600 <tcp_timewait_input+0xd8>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d58e:	4b1f      	ldr	r3, [pc, #124]	; (800d60c <tcp_timewait_input+0xe4>)
 800d590:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d592:	885b      	ldrh	r3, [r3, #2]
 800d594:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d596:	4a1d      	ldr	r2, [pc, #116]	; (800d60c <tcp_timewait_input+0xe4>)
 800d598:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d59a:	8812      	ldrh	r2, [r2, #0]
 800d59c:	b292      	uxth	r2, r2
 800d59e:	9202      	str	r2, [sp, #8]
 800d5a0:	9301      	str	r3, [sp, #4]
 800d5a2:	4b1b      	ldr	r3, [pc, #108]	; (800d610 <tcp_timewait_input+0xe8>)
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	4b1b      	ldr	r3, [pc, #108]	; (800d614 <tcp_timewait_input+0xec>)
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f002 fe72 	bl	8010294 <tcp_rst>
      return;
 800d5b0:	e01b      	b.n	800d5ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d5b2:	4b0f      	ldr	r3, [pc, #60]	; (800d5f0 <tcp_timewait_input+0xc8>)
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d003      	beq.n	800d5c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d5be:	4b16      	ldr	r3, [pc, #88]	; (800d618 <tcp_timewait_input+0xf0>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d5c6:	4b10      	ldr	r3, [pc, #64]	; (800d608 <tcp_timewait_input+0xe0>)
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	8b5b      	ldrh	r3, [r3, #26]
 800d5d2:	f043 0302 	orr.w	r3, r3, #2
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f002 f8a5 	bl	800f72c <tcp_output>
  }
  return;
 800d5e2:	e001      	b.n	800d5e8 <tcp_timewait_input+0xc0>
    return;
 800d5e4:	bf00      	nop
 800d5e6:	e000      	b.n	800d5ea <tcp_timewait_input+0xc2>
  return;
 800d5e8:	bf00      	nop
}
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	20008cc0 	.word	0x20008cc0
 800d5f4:	0801635c 	.word	0x0801635c
 800d5f8:	08016574 	.word	0x08016574
 800d5fc:	080163a8 	.word	0x080163a8
 800d600:	20008cb4 	.word	0x20008cb4
 800d604:	20008cb8 	.word	0x20008cb8
 800d608:	20008cbe 	.word	0x20008cbe
 800d60c:	20008ca4 	.word	0x20008ca4
 800d610:	2000571c 	.word	0x2000571c
 800d614:	20005720 	.word	0x20005720
 800d618:	20008c7c 	.word	0x20008c7c

0800d61c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d61c:	b590      	push	{r4, r7, lr}
 800d61e:	b08d      	sub	sp, #52	; 0x34
 800d620:	af04      	add	r7, sp, #16
 800d622:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <tcp_process+0x24>
 800d632:	4b9d      	ldr	r3, [pc, #628]	; (800d8a8 <tcp_process+0x28c>)
 800d634:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d638:	499c      	ldr	r1, [pc, #624]	; (800d8ac <tcp_process+0x290>)
 800d63a:	489d      	ldr	r0, [pc, #628]	; (800d8b0 <tcp_process+0x294>)
 800d63c:	f006 fb64 	bl	8013d08 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d640:	4b9c      	ldr	r3, [pc, #624]	; (800d8b4 <tcp_process+0x298>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	f003 0304 	and.w	r3, r3, #4
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d04e      	beq.n	800d6ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7d1b      	ldrb	r3, [r3, #20]
 800d650:	2b02      	cmp	r3, #2
 800d652:	d108      	bne.n	800d666 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d658:	4b97      	ldr	r3, [pc, #604]	; (800d8b8 <tcp_process+0x29c>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d123      	bne.n	800d6a8 <tcp_process+0x8c>
        acceptable = 1;
 800d660:	2301      	movs	r3, #1
 800d662:	76fb      	strb	r3, [r7, #27]
 800d664:	e020      	b.n	800d6a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d66a:	4b94      	ldr	r3, [pc, #592]	; (800d8bc <tcp_process+0x2a0>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d102      	bne.n	800d678 <tcp_process+0x5c>
        acceptable = 1;
 800d672:	2301      	movs	r3, #1
 800d674:	76fb      	strb	r3, [r7, #27]
 800d676:	e017      	b.n	800d6a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d678:	4b90      	ldr	r3, [pc, #576]	; (800d8bc <tcp_process+0x2a0>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	db10      	blt.n	800d6a8 <tcp_process+0x8c>
 800d686:	4b8d      	ldr	r3, [pc, #564]	; (800d8bc <tcp_process+0x2a0>)
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68e:	6879      	ldr	r1, [r7, #4]
 800d690:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d692:	440b      	add	r3, r1
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	dc06      	bgt.n	800d6a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	8b5b      	ldrh	r3, [r3, #26]
 800d69e:	f043 0302 	orr.w	r3, r3, #2
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d6a8:	7efb      	ldrb	r3, [r7, #27]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d01b      	beq.n	800d6e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	7d1b      	ldrb	r3, [r3, #20]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <tcp_process+0xa8>
 800d6b6:	4b7c      	ldr	r3, [pc, #496]	; (800d8a8 <tcp_process+0x28c>)
 800d6b8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d6bc:	4980      	ldr	r1, [pc, #512]	; (800d8c0 <tcp_process+0x2a4>)
 800d6be:	487c      	ldr	r0, [pc, #496]	; (800d8b0 <tcp_process+0x294>)
 800d6c0:	f006 fb22 	bl	8013d08 <iprintf>
      recv_flags |= TF_RESET;
 800d6c4:	4b7f      	ldr	r3, [pc, #508]	; (800d8c4 <tcp_process+0x2a8>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	f043 0308 	orr.w	r3, r3, #8
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	4b7d      	ldr	r3, [pc, #500]	; (800d8c4 <tcp_process+0x2a8>)
 800d6d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8b5b      	ldrh	r3, [r3, #26]
 800d6d6:	f023 0301 	bic.w	r3, r3, #1
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d6e0:	f06f 030d 	mvn.w	r3, #13
 800d6e4:	e37a      	b.n	800dddc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e378      	b.n	800dddc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d6ea:	4b72      	ldr	r3, [pc, #456]	; (800d8b4 <tcp_process+0x298>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	f003 0302 	and.w	r3, r3, #2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d010      	beq.n	800d718 <tcp_process+0xfc>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d00c      	beq.n	800d718 <tcp_process+0xfc>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	7d1b      	ldrb	r3, [r3, #20]
 800d702:	2b03      	cmp	r3, #3
 800d704:	d008      	beq.n	800d718 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8b5b      	ldrh	r3, [r3, #26]
 800d70a:	f043 0302 	orr.w	r3, r3, #2
 800d70e:	b29a      	uxth	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d714:	2300      	movs	r3, #0
 800d716:	e361      	b.n	800dddc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	8b5b      	ldrh	r3, [r3, #26]
 800d71c:	f003 0310 	and.w	r3, r3, #16
 800d720:	2b00      	cmp	r3, #0
 800d722:	d103      	bne.n	800d72c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d724:	4b68      	ldr	r3, [pc, #416]	; (800d8c8 <tcp_process+0x2ac>)
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f001 fc2f 	bl	800efa0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	7d1b      	ldrb	r3, [r3, #20]
 800d746:	3b02      	subs	r3, #2
 800d748:	2b07      	cmp	r3, #7
 800d74a:	f200 8337 	bhi.w	800ddbc <tcp_process+0x7a0>
 800d74e:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <tcp_process+0x138>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d775 	.word	0x0800d775
 800d758:	0800d9a5 	.word	0x0800d9a5
 800d75c:	0800db1d 	.word	0x0800db1d
 800d760:	0800db47 	.word	0x0800db47
 800d764:	0800dc6b 	.word	0x0800dc6b
 800d768:	0800db1d 	.word	0x0800db1d
 800d76c:	0800dcf7 	.word	0x0800dcf7
 800d770:	0800dd87 	.word	0x0800dd87
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d774:	4b4f      	ldr	r3, [pc, #316]	; (800d8b4 <tcp_process+0x298>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	f003 0310 	and.w	r3, r3, #16
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 80e4 	beq.w	800d94a <tcp_process+0x32e>
 800d782:	4b4c      	ldr	r3, [pc, #304]	; (800d8b4 <tcp_process+0x298>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	f003 0302 	and.w	r3, r3, #2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 80dd 	beq.w	800d94a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	4b48      	ldr	r3, [pc, #288]	; (800d8b8 <tcp_process+0x29c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	f040 80d5 	bne.w	800d94a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d7a0:	4b46      	ldr	r3, [pc, #280]	; (800d8bc <tcp_process+0x2a0>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	1c5a      	adds	r2, r3, #1
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d7b2:	4b41      	ldr	r3, [pc, #260]	; (800d8b8 <tcp_process+0x29c>)
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d7ba:	4b44      	ldr	r3, [pc, #272]	; (800d8cc <tcp_process+0x2b0>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	89db      	ldrh	r3, [r3, #14]
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d7d4:	4b39      	ldr	r3, [pc, #228]	; (800d8bc <tcp_process+0x2a0>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	1e5a      	subs	r2, r3, #1
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2204      	movs	r2, #4
 800d7e2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f004 feab 	bl	8012548 <ip4_route>
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f7ff f88c 	bl	800c918 <tcp_eff_send_mss_netif>
 800d800:	4603      	mov	r3, r0
 800d802:	461a      	mov	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d80c:	009a      	lsls	r2, r3, #2
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	f241 111c 	movw	r1, #4380	; 0x111c
 800d818:	428b      	cmp	r3, r1
 800d81a:	bf38      	it	cc
 800d81c:	460b      	movcc	r3, r1
 800d81e:	429a      	cmp	r2, r3
 800d820:	d204      	bcs.n	800d82c <tcp_process+0x210>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	b29b      	uxth	r3, r3
 800d82a:	e00d      	b.n	800d848 <tcp_process+0x22c>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d830:	005b      	lsls	r3, r3, #1
 800d832:	f241 121c 	movw	r2, #4380	; 0x111c
 800d836:	4293      	cmp	r3, r2
 800d838:	d904      	bls.n	800d844 <tcp_process+0x228>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	b29b      	uxth	r3, r3
 800d842:	e001      	b.n	800d848 <tcp_process+0x22c>
 800d844:	f241 131c 	movw	r3, #4380	; 0x111c
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d854:	2b00      	cmp	r3, #0
 800d856:	d106      	bne.n	800d866 <tcp_process+0x24a>
 800d858:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <tcp_process+0x28c>)
 800d85a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d85e:	491c      	ldr	r1, [pc, #112]	; (800d8d0 <tcp_process+0x2b4>)
 800d860:	4813      	ldr	r0, [pc, #76]	; (800d8b0 <tcp_process+0x294>)
 800d862:	f006 fa51 	bl	8013d08 <iprintf>
        --pcb->snd_queuelen;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d86c:	3b01      	subs	r3, #1
 800d86e:	b29a      	uxth	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d87a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d12a      	bne.n	800d8d8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d886:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_process+0x280>
 800d88e:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <tcp_process+0x28c>)
 800d890:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d894:	490f      	ldr	r1, [pc, #60]	; (800d8d4 <tcp_process+0x2b8>)
 800d896:	4806      	ldr	r0, [pc, #24]	; (800d8b0 <tcp_process+0x294>)
 800d898:	f006 fa36 	bl	8013d08 <iprintf>
          pcb->unsent = rseg->next;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	66da      	str	r2, [r3, #108]	; 0x6c
 800d8a4:	e01c      	b.n	800d8e0 <tcp_process+0x2c4>
 800d8a6:	bf00      	nop
 800d8a8:	0801635c 	.word	0x0801635c
 800d8ac:	08016594 	.word	0x08016594
 800d8b0:	080163a8 	.word	0x080163a8
 800d8b4:	20008cc0 	.word	0x20008cc0
 800d8b8:	20008cb8 	.word	0x20008cb8
 800d8bc:	20008cb4 	.word	0x20008cb4
 800d8c0:	080165b0 	.word	0x080165b0
 800d8c4:	20008cc1 	.word	0x20008cc1
 800d8c8:	20008c7c 	.word	0x20008c7c
 800d8cc:	20008ca4 	.word	0x20008ca4
 800d8d0:	080165d0 	.word	0x080165d0
 800d8d4:	080165e8 	.word	0x080165e8
        } else {
          pcb->unacked = rseg->next;
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d8e0:	69f8      	ldr	r0, [r7, #28]
 800d8e2:	f7fe fd22 	bl	800c32a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d104      	bne.n	800d8f8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8f4:	861a      	strh	r2, [r3, #48]	; 0x30
 800d8f6:	e006      	b.n	800d906 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00a      	beq.n	800d926 <tcp_process+0x30a>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	6910      	ldr	r0, [r2, #16]
 800d91a:	2200      	movs	r2, #0
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	4798      	blx	r3
 800d920:	4603      	mov	r3, r0
 800d922:	76bb      	strb	r3, [r7, #26]
 800d924:	e001      	b.n	800d92a <tcp_process+0x30e>
 800d926:	2300      	movs	r3, #0
 800d928:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d92a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d92e:	f113 0f0d 	cmn.w	r3, #13
 800d932:	d102      	bne.n	800d93a <tcp_process+0x31e>
          return ERR_ABRT;
 800d934:	f06f 030c 	mvn.w	r3, #12
 800d938:	e250      	b.n	800dddc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8b5b      	ldrh	r3, [r3, #26]
 800d93e:	f043 0302 	orr.w	r3, r3, #2
 800d942:	b29a      	uxth	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d948:	e23a      	b.n	800ddc0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d94a:	4b98      	ldr	r3, [pc, #608]	; (800dbac <tcp_process+0x590>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	f003 0310 	and.w	r3, r3, #16
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 8234 	beq.w	800ddc0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d958:	4b95      	ldr	r3, [pc, #596]	; (800dbb0 <tcp_process+0x594>)
 800d95a:	6819      	ldr	r1, [r3, #0]
 800d95c:	4b95      	ldr	r3, [pc, #596]	; (800dbb4 <tcp_process+0x598>)
 800d95e:	881b      	ldrh	r3, [r3, #0]
 800d960:	461a      	mov	r2, r3
 800d962:	4b95      	ldr	r3, [pc, #596]	; (800dbb8 <tcp_process+0x59c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d968:	4b94      	ldr	r3, [pc, #592]	; (800dbbc <tcp_process+0x5a0>)
 800d96a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d96c:	885b      	ldrh	r3, [r3, #2]
 800d96e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d970:	4a92      	ldr	r2, [pc, #584]	; (800dbbc <tcp_process+0x5a0>)
 800d972:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d974:	8812      	ldrh	r2, [r2, #0]
 800d976:	b292      	uxth	r2, r2
 800d978:	9202      	str	r2, [sp, #8]
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	4b90      	ldr	r3, [pc, #576]	; (800dbc0 <tcp_process+0x5a4>)
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	4b90      	ldr	r3, [pc, #576]	; (800dbc4 <tcp_process+0x5a8>)
 800d982:	4602      	mov	r2, r0
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f002 fc85 	bl	8010294 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d990:	2b05      	cmp	r3, #5
 800d992:	f200 8215 	bhi.w	800ddc0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f002 fa4f 	bl	800fe40 <tcp_rexmit_rto>
      break;
 800d9a2:	e20d      	b.n	800ddc0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d9a4:	4b81      	ldr	r3, [pc, #516]	; (800dbac <tcp_process+0x590>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	f003 0310 	and.w	r3, r3, #16
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 80a1 	beq.w	800daf4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9b2:	4b7f      	ldr	r3, [pc, #508]	; (800dbb0 <tcp_process+0x594>)
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	db7e      	blt.n	800dac0 <tcp_process+0x4a4>
 800d9c2:	4b7b      	ldr	r3, [pc, #492]	; (800dbb0 <tcp_process+0x594>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	dc77      	bgt.n	800dac0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d102      	bne.n	800d9e4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d9de:	23fa      	movs	r3, #250	; 0xfa
 800d9e0:	76bb      	strb	r3, [r7, #26]
 800d9e2:	e01d      	b.n	800da20 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d106      	bne.n	800d9fc <tcp_process+0x3e0>
 800d9ee:	4b76      	ldr	r3, [pc, #472]	; (800dbc8 <tcp_process+0x5ac>)
 800d9f0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d9f4:	4975      	ldr	r1, [pc, #468]	; (800dbcc <tcp_process+0x5b0>)
 800d9f6:	4876      	ldr	r0, [pc, #472]	; (800dbd0 <tcp_process+0x5b4>)
 800d9f8:	f006 f986 	bl	8013d08 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <tcp_process+0x400>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	6910      	ldr	r0, [r2, #16]
 800da10:	2200      	movs	r2, #0
 800da12:	6879      	ldr	r1, [r7, #4]
 800da14:	4798      	blx	r3
 800da16:	4603      	mov	r3, r0
 800da18:	76bb      	strb	r3, [r7, #26]
 800da1a:	e001      	b.n	800da20 <tcp_process+0x404>
 800da1c:	23f0      	movs	r3, #240	; 0xf0
 800da1e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800da20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00a      	beq.n	800da3e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800da28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da2c:	f113 0f0d 	cmn.w	r3, #13
 800da30:	d002      	beq.n	800da38 <tcp_process+0x41c>
              tcp_abort(pcb);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7fd ff8e 	bl	800b954 <tcp_abort>
            }
            return ERR_ABRT;
 800da38:	f06f 030c 	mvn.w	r3, #12
 800da3c:	e1ce      	b.n	800dddc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fae0 	bl	800e004 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800da44:	4b63      	ldr	r3, [pc, #396]	; (800dbd4 <tcp_process+0x5b8>)
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d005      	beq.n	800da58 <tcp_process+0x43c>
            recv_acked--;
 800da4c:	4b61      	ldr	r3, [pc, #388]	; (800dbd4 <tcp_process+0x5b8>)
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	3b01      	subs	r3, #1
 800da52:	b29a      	uxth	r2, r3
 800da54:	4b5f      	ldr	r3, [pc, #380]	; (800dbd4 <tcp_process+0x5b8>)
 800da56:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da5c:	009a      	lsls	r2, r3, #2
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	f241 111c 	movw	r1, #4380	; 0x111c
 800da68:	428b      	cmp	r3, r1
 800da6a:	bf38      	it	cc
 800da6c:	460b      	movcc	r3, r1
 800da6e:	429a      	cmp	r2, r3
 800da70:	d204      	bcs.n	800da7c <tcp_process+0x460>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	b29b      	uxth	r3, r3
 800da7a:	e00d      	b.n	800da98 <tcp_process+0x47c>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	f241 121c 	movw	r2, #4380	; 0x111c
 800da86:	4293      	cmp	r3, r2
 800da88:	d904      	bls.n	800da94 <tcp_process+0x478>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da8e:	005b      	lsls	r3, r3, #1
 800da90:	b29b      	uxth	r3, r3
 800da92:	e001      	b.n	800da98 <tcp_process+0x47c>
 800da94:	f241 131c 	movw	r3, #4380	; 0x111c
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800da9e:	4b4e      	ldr	r3, [pc, #312]	; (800dbd8 <tcp_process+0x5bc>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	f003 0320 	and.w	r3, r3, #32
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d037      	beq.n	800db1a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	8b5b      	ldrh	r3, [r3, #26]
 800daae:	f043 0302 	orr.w	r3, r3, #2
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2207      	movs	r2, #7
 800dabc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dabe:	e02c      	b.n	800db1a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dac0:	4b3b      	ldr	r3, [pc, #236]	; (800dbb0 <tcp_process+0x594>)
 800dac2:	6819      	ldr	r1, [r3, #0]
 800dac4:	4b3b      	ldr	r3, [pc, #236]	; (800dbb4 <tcp_process+0x598>)
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	461a      	mov	r2, r3
 800daca:	4b3b      	ldr	r3, [pc, #236]	; (800dbb8 <tcp_process+0x59c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dad0:	4b3a      	ldr	r3, [pc, #232]	; (800dbbc <tcp_process+0x5a0>)
 800dad2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dad8:	4a38      	ldr	r2, [pc, #224]	; (800dbbc <tcp_process+0x5a0>)
 800dada:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dadc:	8812      	ldrh	r2, [r2, #0]
 800dade:	b292      	uxth	r2, r2
 800dae0:	9202      	str	r2, [sp, #8]
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	4b36      	ldr	r3, [pc, #216]	; (800dbc0 <tcp_process+0x5a4>)
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	4b36      	ldr	r3, [pc, #216]	; (800dbc4 <tcp_process+0x5a8>)
 800daea:	4602      	mov	r2, r0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f002 fbd1 	bl	8010294 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800daf2:	e167      	b.n	800ddc4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800daf4:	4b2d      	ldr	r3, [pc, #180]	; (800dbac <tcp_process+0x590>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f003 0302 	and.w	r3, r3, #2
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f000 8161 	beq.w	800ddc4 <tcp_process+0x7a8>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db06:	1e5a      	subs	r2, r3, #1
 800db08:	4b2b      	ldr	r3, [pc, #172]	; (800dbb8 <tcp_process+0x59c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	f040 8159 	bne.w	800ddc4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f002 f9b6 	bl	800fe84 <tcp_rexmit>
      break;
 800db18:	e154      	b.n	800ddc4 <tcp_process+0x7a8>
 800db1a:	e153      	b.n	800ddc4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fa71 	bl	800e004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800db22:	4b2d      	ldr	r3, [pc, #180]	; (800dbd8 <tcp_process+0x5bc>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	f003 0320 	and.w	r3, r3, #32
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 814c 	beq.w	800ddc8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	8b5b      	ldrh	r3, [r3, #26]
 800db34:	f043 0302 	orr.w	r3, r3, #2
 800db38:	b29a      	uxth	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2207      	movs	r2, #7
 800db42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db44:	e140      	b.n	800ddc8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fa5c 	bl	800e004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800db4c:	4b22      	ldr	r3, [pc, #136]	; (800dbd8 <tcp_process+0x5bc>)
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	f003 0320 	and.w	r3, r3, #32
 800db54:	2b00      	cmp	r3, #0
 800db56:	d071      	beq.n	800dc3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800db58:	4b14      	ldr	r3, [pc, #80]	; (800dbac <tcp_process+0x590>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	2b00      	cmp	r3, #0
 800db62:	d060      	beq.n	800dc26 <tcp_process+0x60a>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db68:	4b11      	ldr	r3, [pc, #68]	; (800dbb0 <tcp_process+0x594>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d15a      	bne.n	800dc26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800db74:	2b00      	cmp	r3, #0
 800db76:	d156      	bne.n	800dc26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	8b5b      	ldrh	r3, [r3, #26]
 800db7c:	f043 0302 	orr.w	r3, r3, #2
 800db80:	b29a      	uxth	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7fe fdbc 	bl	800c704 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800db8c:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <tcp_process+0x5c0>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	429a      	cmp	r2, r3
 800db94:	d105      	bne.n	800dba2 <tcp_process+0x586>
 800db96:	4b11      	ldr	r3, [pc, #68]	; (800dbdc <tcp_process+0x5c0>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	4a0f      	ldr	r2, [pc, #60]	; (800dbdc <tcp_process+0x5c0>)
 800db9e:	6013      	str	r3, [r2, #0]
 800dba0:	e02e      	b.n	800dc00 <tcp_process+0x5e4>
 800dba2:	4b0e      	ldr	r3, [pc, #56]	; (800dbdc <tcp_process+0x5c0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	617b      	str	r3, [r7, #20]
 800dba8:	e027      	b.n	800dbfa <tcp_process+0x5de>
 800dbaa:	bf00      	nop
 800dbac:	20008cc0 	.word	0x20008cc0
 800dbb0:	20008cb8 	.word	0x20008cb8
 800dbb4:	20008cbe 	.word	0x20008cbe
 800dbb8:	20008cb4 	.word	0x20008cb4
 800dbbc:	20008ca4 	.word	0x20008ca4
 800dbc0:	2000571c 	.word	0x2000571c
 800dbc4:	20005720 	.word	0x20005720
 800dbc8:	0801635c 	.word	0x0801635c
 800dbcc:	080165fc 	.word	0x080165fc
 800dbd0:	080163a8 	.word	0x080163a8
 800dbd4:	20008cbc 	.word	0x20008cbc
 800dbd8:	20008cc1 	.word	0x20008cc1
 800dbdc:	20008c88 	.word	0x20008c88
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d104      	bne.n	800dbf4 <tcp_process+0x5d8>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68da      	ldr	r2, [r3, #12]
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	60da      	str	r2, [r3, #12]
 800dbf2:	e005      	b.n	800dc00 <tcp_process+0x5e4>
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	617b      	str	r3, [r7, #20]
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1ef      	bne.n	800dbe0 <tcp_process+0x5c4>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	60da      	str	r2, [r3, #12]
 800dc06:	4b77      	ldr	r3, [pc, #476]	; (800dde4 <tcp_process+0x7c8>)
 800dc08:	2201      	movs	r2, #1
 800dc0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	220a      	movs	r2, #10
 800dc10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dc12:	4b75      	ldr	r3, [pc, #468]	; (800dde8 <tcp_process+0x7cc>)
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	60da      	str	r2, [r3, #12]
 800dc1a:	4a73      	ldr	r2, [pc, #460]	; (800dde8 <tcp_process+0x7cc>)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6013      	str	r3, [r2, #0]
 800dc20:	f002 fcfa 	bl	8010618 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dc24:	e0d2      	b.n	800ddcc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	8b5b      	ldrh	r3, [r3, #26]
 800dc2a:	f043 0302 	orr.w	r3, r3, #2
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2208      	movs	r2, #8
 800dc38:	751a      	strb	r2, [r3, #20]
      break;
 800dc3a:	e0c7      	b.n	800ddcc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc3c:	4b6b      	ldr	r3, [pc, #428]	; (800ddec <tcp_process+0x7d0>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	f003 0310 	and.w	r3, r3, #16
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f000 80c1 	beq.w	800ddcc <tcp_process+0x7b0>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc4e:	4b68      	ldr	r3, [pc, #416]	; (800ddf0 <tcp_process+0x7d4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	f040 80ba 	bne.w	800ddcc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f040 80b5 	bne.w	800ddcc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2206      	movs	r2, #6
 800dc66:	751a      	strb	r2, [r3, #20]
      break;
 800dc68:	e0b0      	b.n	800ddcc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9ca 	bl	800e004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dc70:	4b60      	ldr	r3, [pc, #384]	; (800ddf4 <tcp_process+0x7d8>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	f003 0320 	and.w	r3, r3, #32
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 80a9 	beq.w	800ddd0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	8b5b      	ldrh	r3, [r3, #26]
 800dc82:	f043 0302 	orr.w	r3, r3, #2
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7fe fd39 	bl	800c704 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dc92:	4b59      	ldr	r3, [pc, #356]	; (800ddf8 <tcp_process+0x7dc>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d105      	bne.n	800dca8 <tcp_process+0x68c>
 800dc9c:	4b56      	ldr	r3, [pc, #344]	; (800ddf8 <tcp_process+0x7dc>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	4a55      	ldr	r2, [pc, #340]	; (800ddf8 <tcp_process+0x7dc>)
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	e013      	b.n	800dcd0 <tcp_process+0x6b4>
 800dca8:	4b53      	ldr	r3, [pc, #332]	; (800ddf8 <tcp_process+0x7dc>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	613b      	str	r3, [r7, #16]
 800dcae:	e00c      	b.n	800dcca <tcp_process+0x6ae>
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d104      	bne.n	800dcc4 <tcp_process+0x6a8>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68da      	ldr	r2, [r3, #12]
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	60da      	str	r2, [r3, #12]
 800dcc2:	e005      	b.n	800dcd0 <tcp_process+0x6b4>
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	613b      	str	r3, [r7, #16]
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1ef      	bne.n	800dcb0 <tcp_process+0x694>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	60da      	str	r2, [r3, #12]
 800dcd6:	4b43      	ldr	r3, [pc, #268]	; (800dde4 <tcp_process+0x7c8>)
 800dcd8:	2201      	movs	r2, #1
 800dcda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	220a      	movs	r2, #10
 800dce0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dce2:	4b41      	ldr	r3, [pc, #260]	; (800dde8 <tcp_process+0x7cc>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	60da      	str	r2, [r3, #12]
 800dcea:	4a3f      	ldr	r2, [pc, #252]	; (800dde8 <tcp_process+0x7cc>)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	f002 fc92 	bl	8010618 <tcp_timer_needed>
      }
      break;
 800dcf4:	e06c      	b.n	800ddd0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f984 	bl	800e004 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dcfc:	4b3b      	ldr	r3, [pc, #236]	; (800ddec <tcp_process+0x7d0>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	f003 0310 	and.w	r3, r3, #16
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d065      	beq.n	800ddd4 <tcp_process+0x7b8>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd0c:	4b38      	ldr	r3, [pc, #224]	; (800ddf0 <tcp_process+0x7d4>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d15f      	bne.n	800ddd4 <tcp_process+0x7b8>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d15b      	bne.n	800ddd4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f7fe fcf1 	bl	800c704 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dd22:	4b35      	ldr	r3, [pc, #212]	; (800ddf8 <tcp_process+0x7dc>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d105      	bne.n	800dd38 <tcp_process+0x71c>
 800dd2c:	4b32      	ldr	r3, [pc, #200]	; (800ddf8 <tcp_process+0x7dc>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	4a31      	ldr	r2, [pc, #196]	; (800ddf8 <tcp_process+0x7dc>)
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	e013      	b.n	800dd60 <tcp_process+0x744>
 800dd38:	4b2f      	ldr	r3, [pc, #188]	; (800ddf8 <tcp_process+0x7dc>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	e00c      	b.n	800dd5a <tcp_process+0x73e>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d104      	bne.n	800dd54 <tcp_process+0x738>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68da      	ldr	r2, [r3, #12]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	60da      	str	r2, [r3, #12]
 800dd52:	e005      	b.n	800dd60 <tcp_process+0x744>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1ef      	bne.n	800dd40 <tcp_process+0x724>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	60da      	str	r2, [r3, #12]
 800dd66:	4b1f      	ldr	r3, [pc, #124]	; (800dde4 <tcp_process+0x7c8>)
 800dd68:	2201      	movs	r2, #1
 800dd6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	220a      	movs	r2, #10
 800dd70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dd72:	4b1d      	ldr	r3, [pc, #116]	; (800dde8 <tcp_process+0x7cc>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	60da      	str	r2, [r3, #12]
 800dd7a:	4a1b      	ldr	r2, [pc, #108]	; (800dde8 <tcp_process+0x7cc>)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	f002 fc4a 	bl	8010618 <tcp_timer_needed>
      }
      break;
 800dd84:	e026      	b.n	800ddd4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f93c 	bl	800e004 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dd8c:	4b17      	ldr	r3, [pc, #92]	; (800ddec <tcp_process+0x7d0>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	f003 0310 	and.w	r3, r3, #16
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d01f      	beq.n	800ddd8 <tcp_process+0x7bc>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd9c:	4b14      	ldr	r3, [pc, #80]	; (800ddf0 <tcp_process+0x7d4>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d119      	bne.n	800ddd8 <tcp_process+0x7bc>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d115      	bne.n	800ddd8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ddac:	4b11      	ldr	r3, [pc, #68]	; (800ddf4 <tcp_process+0x7d8>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f043 0310 	orr.w	r3, r3, #16
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	4b0f      	ldr	r3, [pc, #60]	; (800ddf4 <tcp_process+0x7d8>)
 800ddb8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ddba:	e00d      	b.n	800ddd8 <tcp_process+0x7bc>
    default:
      break;
 800ddbc:	bf00      	nop
 800ddbe:	e00c      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddc0:	bf00      	nop
 800ddc2:	e00a      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddc4:	bf00      	nop
 800ddc6:	e008      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddc8:	bf00      	nop
 800ddca:	e006      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddcc:	bf00      	nop
 800ddce:	e004      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddd0:	bf00      	nop
 800ddd2:	e002      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddd4:	bf00      	nop
 800ddd6:	e000      	b.n	800ddda <tcp_process+0x7be>
      break;
 800ddd8:	bf00      	nop
  }
  return ERR_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3724      	adds	r7, #36	; 0x24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd90      	pop	{r4, r7, pc}
 800dde4:	20008c90 	.word	0x20008c90
 800dde8:	20008c8c 	.word	0x20008c8c
 800ddec:	20008cc0 	.word	0x20008cc0
 800ddf0:	20008cb8 	.word	0x20008cb8
 800ddf4:	20008cc1 	.word	0x20008cc1
 800ddf8:	20008c88 	.word	0x20008c88

0800ddfc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ddfc:	b590      	push	{r4, r7, lr}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <tcp_oos_insert_segment+0x1e>
 800de0c:	4b3b      	ldr	r3, [pc, #236]	; (800defc <tcp_oos_insert_segment+0x100>)
 800de0e:	f240 421f 	movw	r2, #1055	; 0x41f
 800de12:	493b      	ldr	r1, [pc, #236]	; (800df00 <tcp_oos_insert_segment+0x104>)
 800de14:	483b      	ldr	r0, [pc, #236]	; (800df04 <tcp_oos_insert_segment+0x108>)
 800de16:	f005 ff77 	bl	8013d08 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	899b      	ldrh	r3, [r3, #12]
 800de20:	b29b      	uxth	r3, r3
 800de22:	4618      	mov	r0, r3
 800de24:	f7fb fc0e 	bl	8009644 <lwip_htons>
 800de28:	4603      	mov	r3, r0
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	f003 0301 	and.w	r3, r3, #1
 800de30:	2b00      	cmp	r3, #0
 800de32:	d028      	beq.n	800de86 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800de34:	6838      	ldr	r0, [r7, #0]
 800de36:	f7fe fa63 	bl	800c300 <tcp_segs_free>
    next = NULL;
 800de3a:	2300      	movs	r3, #0
 800de3c:	603b      	str	r3, [r7, #0]
 800de3e:	e056      	b.n	800deee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	899b      	ldrh	r3, [r3, #12]
 800de46:	b29b      	uxth	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fb fbfb 	bl	8009644 <lwip_htons>
 800de4e:	4603      	mov	r3, r0
 800de50:	b2db      	uxtb	r3, r3
 800de52:	f003 0301 	and.w	r3, r3, #1
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00d      	beq.n	800de76 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	899b      	ldrh	r3, [r3, #12]
 800de60:	b29c      	uxth	r4, r3
 800de62:	2001      	movs	r0, #1
 800de64:	f7fb fbee 	bl	8009644 <lwip_htons>
 800de68:	4603      	mov	r3, r0
 800de6a:	461a      	mov	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	4322      	orrs	r2, r4
 800de72:	b292      	uxth	r2, r2
 800de74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f7fe fa52 	bl	800c32a <tcp_seg_free>
    while (next &&
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	891b      	ldrh	r3, [r3, #8]
 800de90:	461a      	mov	r2, r3
 800de92:	4b1d      	ldr	r3, [pc, #116]	; (800df08 <tcp_oos_insert_segment+0x10c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	441a      	add	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	6839      	ldr	r1, [r7, #0]
 800dea0:	8909      	ldrh	r1, [r1, #8]
 800dea2:	440b      	add	r3, r1
 800dea4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	daca      	bge.n	800de40 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d01e      	beq.n	800deee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	891b      	ldrh	r3, [r3, #8]
 800deb4:	461a      	mov	r2, r3
 800deb6:	4b14      	ldr	r3, [pc, #80]	; (800df08 <tcp_oos_insert_segment+0x10c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	441a      	add	r2, r3
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd12      	ble.n	800deee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	b29a      	uxth	r2, r3
 800ded0:	4b0d      	ldr	r3, [pc, #52]	; (800df08 <tcp_oos_insert_segment+0x10c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	b29a      	uxth	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	891b      	ldrh	r3, [r3, #8]
 800dee6:	4619      	mov	r1, r3
 800dee8:	4610      	mov	r0, r2
 800deea:	f7fc fd83 	bl	800a9f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	601a      	str	r2, [r3, #0]
}
 800def4:	bf00      	nop
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	bd90      	pop	{r4, r7, pc}
 800defc:	0801635c 	.word	0x0801635c
 800df00:	0801661c 	.word	0x0801661c
 800df04:	080163a8 	.word	0x080163a8
 800df08:	20008cb4 	.word	0x20008cb4

0800df0c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800df0c:	b5b0      	push	{r4, r5, r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800df1a:	e03e      	b.n	800df9a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fc ff70 	bl	800ae10 <pbuf_clen>
 800df30:	4603      	mov	r3, r0
 800df32:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df3a:	8a7a      	ldrh	r2, [r7, #18]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d906      	bls.n	800df4e <tcp_free_acked_segments+0x42>
 800df40:	4b2a      	ldr	r3, [pc, #168]	; (800dfec <tcp_free_acked_segments+0xe0>)
 800df42:	f240 4257 	movw	r2, #1111	; 0x457
 800df46:	492a      	ldr	r1, [pc, #168]	; (800dff0 <tcp_free_acked_segments+0xe4>)
 800df48:	482a      	ldr	r0, [pc, #168]	; (800dff4 <tcp_free_acked_segments+0xe8>)
 800df4a:	f005 fedd 	bl	8013d08 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800df54:	8a7b      	ldrh	r3, [r7, #18]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	b29a      	uxth	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	891a      	ldrh	r2, [r3, #8]
 800df64:	4b24      	ldr	r3, [pc, #144]	; (800dff8 <tcp_free_acked_segments+0xec>)
 800df66:	881b      	ldrh	r3, [r3, #0]
 800df68:	4413      	add	r3, r2
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	4b22      	ldr	r3, [pc, #136]	; (800dff8 <tcp_free_acked_segments+0xec>)
 800df6e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800df70:	6978      	ldr	r0, [r7, #20]
 800df72:	f7fe f9da 	bl	800c32a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00c      	beq.n	800df9a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d109      	bne.n	800df9a <tcp_free_acked_segments+0x8e>
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <tcp_free_acked_segments+0x8e>
 800df8c:	4b17      	ldr	r3, [pc, #92]	; (800dfec <tcp_free_acked_segments+0xe0>)
 800df8e:	f240 4261 	movw	r2, #1121	; 0x461
 800df92:	491a      	ldr	r1, [pc, #104]	; (800dffc <tcp_free_acked_segments+0xf0>)
 800df94:	4817      	ldr	r0, [pc, #92]	; (800dff4 <tcp_free_acked_segments+0xe8>)
 800df96:	f005 feb7 	bl	8013d08 <iprintf>
  while (seg_list != NULL &&
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d020      	beq.n	800dfe2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fb fb61 	bl	800966e <lwip_htonl>
 800dfac:	4604      	mov	r4, r0
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	891b      	ldrh	r3, [r3, #8]
 800dfb2:	461d      	mov	r5, r3
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	899b      	ldrh	r3, [r3, #12]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fb fb41 	bl	8009644 <lwip_htons>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <tcp_free_acked_segments+0xc6>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e000      	b.n	800dfd4 <tcp_free_acked_segments+0xc8>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	442b      	add	r3, r5
 800dfd6:	18e2      	adds	r2, r4, r3
 800dfd8:	4b09      	ldr	r3, [pc, #36]	; (800e000 <tcp_free_acked_segments+0xf4>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	dd9c      	ble.n	800df1c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bdb0      	pop	{r4, r5, r7, pc}
 800dfec:	0801635c 	.word	0x0801635c
 800dff0:	08016644 	.word	0x08016644
 800dff4:	080163a8 	.word	0x080163a8
 800dff8:	20008cbc 	.word	0x20008cbc
 800dffc:	0801666c 	.word	0x0801666c
 800e000:	20008cb8 	.word	0x20008cb8

0800e004 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e004:	b5b0      	push	{r4, r5, r7, lr}
 800e006:	b094      	sub	sp, #80	; 0x50
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <tcp_receive+0x20>
 800e016:	4b91      	ldr	r3, [pc, #580]	; (800e25c <tcp_receive+0x258>)
 800e018:	f240 427b 	movw	r2, #1147	; 0x47b
 800e01c:	4990      	ldr	r1, [pc, #576]	; (800e260 <tcp_receive+0x25c>)
 800e01e:	4891      	ldr	r0, [pc, #580]	; (800e264 <tcp_receive+0x260>)
 800e020:	f005 fe72 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7d1b      	ldrb	r3, [r3, #20]
 800e028:	2b03      	cmp	r3, #3
 800e02a:	d806      	bhi.n	800e03a <tcp_receive+0x36>
 800e02c:	4b8b      	ldr	r3, [pc, #556]	; (800e25c <tcp_receive+0x258>)
 800e02e:	f240 427c 	movw	r2, #1148	; 0x47c
 800e032:	498d      	ldr	r1, [pc, #564]	; (800e268 <tcp_receive+0x264>)
 800e034:	488b      	ldr	r0, [pc, #556]	; (800e264 <tcp_receive+0x260>)
 800e036:	f005 fe67 	bl	8013d08 <iprintf>

  if (flags & TCP_ACK) {
 800e03a:	4b8c      	ldr	r3, [pc, #560]	; (800e26c <tcp_receive+0x268>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 0310 	and.w	r3, r3, #16
 800e042:	2b00      	cmp	r3, #0
 800e044:	f000 8264 	beq.w	800e510 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e04e:	461a      	mov	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e054:	4413      	add	r3, r2
 800e056:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e05c:	4b84      	ldr	r3, [pc, #528]	; (800e270 <tcp_receive+0x26c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	db1b      	blt.n	800e09e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e06a:	4b81      	ldr	r3, [pc, #516]	; (800e270 <tcp_receive+0x26c>)
 800e06c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e06e:	429a      	cmp	r2, r3
 800e070:	d106      	bne.n	800e080 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e076:	4b7f      	ldr	r3, [pc, #508]	; (800e274 <tcp_receive+0x270>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	db0e      	blt.n	800e09e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e084:	4b7b      	ldr	r3, [pc, #492]	; (800e274 <tcp_receive+0x270>)
 800e086:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e088:	429a      	cmp	r2, r3
 800e08a:	d125      	bne.n	800e0d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e08c:	4b7a      	ldr	r3, [pc, #488]	; (800e278 <tcp_receive+0x274>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	89db      	ldrh	r3, [r3, #14]
 800e092:	b29a      	uxth	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d91c      	bls.n	800e0d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e09e:	4b76      	ldr	r3, [pc, #472]	; (800e278 <tcp_receive+0x274>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	89db      	ldrh	r3, [r3, #14]
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d205      	bcs.n	800e0c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e0c8:	4b69      	ldr	r3, [pc, #420]	; (800e270 <tcp_receive+0x26c>)
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e0d0:	4b68      	ldr	r3, [pc, #416]	; (800e274 <tcp_receive+0x270>)
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e0d8:	4b66      	ldr	r3, [pc, #408]	; (800e274 <tcp_receive+0x270>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dc58      	bgt.n	800e198 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e0e6:	4b65      	ldr	r3, [pc, #404]	; (800e27c <tcp_receive+0x278>)
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d14b      	bne.n	800e186 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e0f8:	4413      	add	r3, r2
 800e0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d142      	bne.n	800e186 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e106:	2b00      	cmp	r3, #0
 800e108:	db3d      	blt.n	800e186 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e10e:	4b59      	ldr	r3, [pc, #356]	; (800e274 <tcp_receive+0x270>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d137      	bne.n	800e186 <tcp_receive+0x182>
              found_dupack = 1;
 800e116:	2301      	movs	r3, #1
 800e118:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e120:	2bff      	cmp	r3, #255	; 0xff
 800e122:	d007      	beq.n	800e134 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e12a:	3301      	adds	r3, #1
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d91b      	bls.n	800e176 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e148:	4413      	add	r3, r2
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e152:	429a      	cmp	r2, r3
 800e154:	d30a      	bcc.n	800e16c <tcp_receive+0x168>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e160:	4413      	add	r3, r2
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e16a:	e004      	b.n	800e176 <tcp_receive+0x172>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d902      	bls.n	800e186 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f001 feeb 	bl	800ff5c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f040 8161 	bne.w	800e450 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e196:	e15b      	b.n	800e450 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e198:	4b36      	ldr	r3, [pc, #216]	; (800e274 <tcp_receive+0x270>)
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f2c0 814e 	blt.w	800e446 <tcp_receive+0x442>
 800e1aa:	4b32      	ldr	r3, [pc, #200]	; (800e274 <tcp_receive+0x270>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f300 8146 	bgt.w	800e446 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	8b5b      	ldrh	r3, [r3, #26]
 800e1be:	f003 0304 	and.w	r3, r3, #4
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d010      	beq.n	800e1e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ca:	f023 0304 	bic.w	r3, r3, #4
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e1f6:	10db      	asrs	r3, r3, #3
 800e1f8:	b21b      	sxth	r3, r3
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e202:	b29b      	uxth	r3, r3
 800e204:	4413      	add	r3, r2
 800e206:	b29b      	uxth	r3, r3
 800e208:	b21a      	sxth	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e210:	4b18      	ldr	r3, [pc, #96]	; (800e274 <tcp_receive+0x270>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	b29a      	uxth	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e228:	4b12      	ldr	r3, [pc, #72]	; (800e274 <tcp_receive+0x270>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	7d1b      	ldrb	r3, [r3, #20]
 800e234:	2b03      	cmp	r3, #3
 800e236:	f240 8097 	bls.w	800e368 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e246:	429a      	cmp	r2, r3
 800e248:	d245      	bcs.n	800e2d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	8b5b      	ldrh	r3, [r3, #26]
 800e24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e252:	2b00      	cmp	r3, #0
 800e254:	d014      	beq.n	800e280 <tcp_receive+0x27c>
 800e256:	2301      	movs	r3, #1
 800e258:	e013      	b.n	800e282 <tcp_receive+0x27e>
 800e25a:	bf00      	nop
 800e25c:	0801635c 	.word	0x0801635c
 800e260:	0801668c 	.word	0x0801668c
 800e264:	080163a8 	.word	0x080163a8
 800e268:	080166a8 	.word	0x080166a8
 800e26c:	20008cc0 	.word	0x20008cc0
 800e270:	20008cb4 	.word	0x20008cb4
 800e274:	20008cb8 	.word	0x20008cb8
 800e278:	20008ca4 	.word	0x20008ca4
 800e27c:	20008cbe 	.word	0x20008cbe
 800e280:	2302      	movs	r3, #2
 800e282:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e286:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e290:	fb12 f303 	smulbb	r3, r2, r3
 800e294:	b29b      	uxth	r3, r3
 800e296:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e298:	4293      	cmp	r3, r2
 800e29a:	bf28      	it	cs
 800e29c:	4613      	movcs	r3, r2
 800e29e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2a8:	4413      	add	r3, r2
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d309      	bcc.n	800e2ca <tcp_receive+0x2c6>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2be:	4413      	add	r3, r2
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e2c8:	e04e      	b.n	800e368 <tcp_receive+0x364>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e2d4:	e048      	b.n	800e368 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e2dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e2de:	4413      	add	r3, r2
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d309      	bcc.n	800e300 <tcp_receive+0x2fc>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e2f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e2f4:	4413      	add	r3, r2
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2fe:	e004      	b.n	800e30a <tcp_receive+0x306>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e316:	429a      	cmp	r2, r3
 800e318:	d326      	bcc.n	800e368 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	b29a      	uxth	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e33a:	4413      	add	r3, r2
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e344:	429a      	cmp	r2, r3
 800e346:	d30a      	bcc.n	800e35e <tcp_receive+0x35a>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e352:	4413      	add	r3, r2
 800e354:	b29a      	uxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e35c:	e004      	b.n	800e368 <tcp_receive+0x364>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e364:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e370:	4a98      	ldr	r2, [pc, #608]	; (800e5d4 <tcp_receive+0x5d0>)
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff fdca 	bl	800df0c <tcp_free_acked_segments>
 800e378:	4602      	mov	r2, r0
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e386:	4a94      	ldr	r2, [pc, #592]	; (800e5d8 <tcp_receive+0x5d4>)
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff fdbf 	bl	800df0c <tcp_free_acked_segments>
 800e38e:	4602      	mov	r2, r0
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d104      	bne.n	800e3a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3a2:	861a      	strh	r2, [r3, #48]	; 0x30
 800e3a4:	e002      	b.n	800e3ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d103      	bne.n	800e3c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e3c8:	4b84      	ldr	r3, [pc, #528]	; (800e5dc <tcp_receive+0x5d8>)
 800e3ca:	881b      	ldrh	r3, [r3, #0]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8b5b      	ldrh	r3, [r3, #26]
 800e3da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d035      	beq.n	800e44e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d118      	bne.n	800e41c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00c      	beq.n	800e40c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fb f935 	bl	800966e <lwip_htonl>
 800e404:	4603      	mov	r3, r0
 800e406:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dc20      	bgt.n	800e44e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	8b5b      	ldrh	r3, [r3, #26]
 800e410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e414:	b29a      	uxth	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e41a:	e018      	b.n	800e44e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fb f920 	bl	800966e <lwip_htonl>
 800e42e:	4603      	mov	r3, r0
 800e430:	1ae3      	subs	r3, r4, r3
 800e432:	2b00      	cmp	r3, #0
 800e434:	dc0b      	bgt.n	800e44e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8b5b      	ldrh	r3, [r3, #26]
 800e43a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e43e:	b29a      	uxth	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e444:	e003      	b.n	800e44e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 ff76 	bl	8010338 <tcp_send_empty_ack>
 800e44c:	e000      	b.n	800e450 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e44e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e454:	2b00      	cmp	r3, #0
 800e456:	d05b      	beq.n	800e510 <tcp_receive+0x50c>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e45c:	4b60      	ldr	r3, [pc, #384]	; (800e5e0 <tcp_receive+0x5dc>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	da54      	bge.n	800e510 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e466:	4b5f      	ldr	r3, [pc, #380]	; (800e5e4 <tcp_receive+0x5e0>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e470:	b29b      	uxth	r3, r3
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	b29b      	uxth	r3, r3
 800e476:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e47a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e484:	10db      	asrs	r3, r3, #3
 800e486:	b21b      	sxth	r3, r3
 800e488:	b29b      	uxth	r3, r3
 800e48a:	1ad3      	subs	r3, r2, r3
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e498:	b29a      	uxth	r2, r3
 800e49a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e49e:	4413      	add	r3, r2
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	b21a      	sxth	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e4a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	da05      	bge.n	800e4bc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e4b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e4b4:	425b      	negs	r3, r3
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e4bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e4c6:	109b      	asrs	r3, r3, #2
 800e4c8:	b21b      	sxth	r3, r3
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e4e0:	4413      	add	r3, r2
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	b21a      	sxth	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e4f0:	10db      	asrs	r3, r3, #3
 800e4f2:	b21b      	sxth	r3, r3
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	4413      	add	r3, r2
 800e500:	b29b      	uxth	r3, r3
 800e502:	b21a      	sxth	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e510:	4b35      	ldr	r3, [pc, #212]	; (800e5e8 <tcp_receive+0x5e4>)
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 84e2 	beq.w	800eede <tcp_receive+0xeda>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	2b06      	cmp	r3, #6
 800e520:	f200 84dd 	bhi.w	800eede <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e528:	4b30      	ldr	r3, [pc, #192]	; (800e5ec <tcp_receive+0x5e8>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	3b01      	subs	r3, #1
 800e530:	2b00      	cmp	r3, #0
 800e532:	f2c0 808f 	blt.w	800e654 <tcp_receive+0x650>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e53a:	4b2b      	ldr	r3, [pc, #172]	; (800e5e8 <tcp_receive+0x5e4>)
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	4619      	mov	r1, r3
 800e540:	4b2a      	ldr	r3, [pc, #168]	; (800e5ec <tcp_receive+0x5e8>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	440b      	add	r3, r1
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	3301      	adds	r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	f300 8082 	bgt.w	800e654 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e550:	4b27      	ldr	r3, [pc, #156]	; (800e5f0 <tcp_receive+0x5ec>)
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e55a:	4b24      	ldr	r3, [pc, #144]	; (800e5ec <tcp_receive+0x5e8>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e562:	4b23      	ldr	r3, [pc, #140]	; (800e5f0 <tcp_receive+0x5ec>)
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d106      	bne.n	800e578 <tcp_receive+0x574>
 800e56a:	4b22      	ldr	r3, [pc, #136]	; (800e5f4 <tcp_receive+0x5f0>)
 800e56c:	f240 5294 	movw	r2, #1428	; 0x594
 800e570:	4921      	ldr	r1, [pc, #132]	; (800e5f8 <tcp_receive+0x5f4>)
 800e572:	4822      	ldr	r0, [pc, #136]	; (800e5fc <tcp_receive+0x5f8>)
 800e574:	f005 fbc8 	bl	8013d08 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e57e:	4293      	cmp	r3, r2
 800e580:	d906      	bls.n	800e590 <tcp_receive+0x58c>
 800e582:	4b1c      	ldr	r3, [pc, #112]	; (800e5f4 <tcp_receive+0x5f0>)
 800e584:	f240 5295 	movw	r2, #1429	; 0x595
 800e588:	491d      	ldr	r1, [pc, #116]	; (800e600 <tcp_receive+0x5fc>)
 800e58a:	481c      	ldr	r0, [pc, #112]	; (800e5fc <tcp_receive+0x5f8>)
 800e58c:	f005 fbbc 	bl	8013d08 <iprintf>
      off = (u16_t)off32;
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e596:	4b16      	ldr	r3, [pc, #88]	; (800e5f0 <tcp_receive+0x5ec>)
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	891b      	ldrh	r3, [r3, #8]
 800e59c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d906      	bls.n	800e5b2 <tcp_receive+0x5ae>
 800e5a4:	4b13      	ldr	r3, [pc, #76]	; (800e5f4 <tcp_receive+0x5f0>)
 800e5a6:	f240 5297 	movw	r2, #1431	; 0x597
 800e5aa:	4916      	ldr	r1, [pc, #88]	; (800e604 <tcp_receive+0x600>)
 800e5ac:	4813      	ldr	r0, [pc, #76]	; (800e5fc <tcp_receive+0x5f8>)
 800e5ae:	f005 fbab 	bl	8013d08 <iprintf>
      inseg.len -= off;
 800e5b2:	4b0f      	ldr	r3, [pc, #60]	; (800e5f0 <tcp_receive+0x5ec>)
 800e5b4:	891a      	ldrh	r2, [r3, #8]
 800e5b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5ba:	1ad3      	subs	r3, r2, r3
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	4b0c      	ldr	r3, [pc, #48]	; (800e5f0 <tcp_receive+0x5ec>)
 800e5c0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e5c2:	4b0b      	ldr	r3, [pc, #44]	; (800e5f0 <tcp_receive+0x5ec>)
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	891a      	ldrh	r2, [r3, #8]
 800e5c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e5d0:	e02a      	b.n	800e628 <tcp_receive+0x624>
 800e5d2:	bf00      	nop
 800e5d4:	080166c4 	.word	0x080166c4
 800e5d8:	080166cc 	.word	0x080166cc
 800e5dc:	20008cbc 	.word	0x20008cbc
 800e5e0:	20008cb8 	.word	0x20008cb8
 800e5e4:	20008c7c 	.word	0x20008c7c
 800e5e8:	20008cbe 	.word	0x20008cbe
 800e5ec:	20008cb4 	.word	0x20008cb4
 800e5f0:	20008c94 	.word	0x20008c94
 800e5f4:	0801635c 	.word	0x0801635c
 800e5f8:	080166d4 	.word	0x080166d4
 800e5fc:	080163a8 	.word	0x080163a8
 800e600:	080166e4 	.word	0x080166e4
 800e604:	080166f4 	.word	0x080166f4
        off -= p->len;
 800e608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e60a:	895b      	ldrh	r3, [r3, #10]
 800e60c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e618:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e61a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e61e:	2200      	movs	r2, #0
 800e620:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e62a:	895b      	ldrh	r3, [r3, #10]
 800e62c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e630:	429a      	cmp	r2, r3
 800e632:	d8e9      	bhi.n	800e608 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e638:	4619      	mov	r1, r3
 800e63a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e63c:	f7fc fada 	bl	800abf4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	4a91      	ldr	r2, [pc, #580]	; (800e88c <tcp_receive+0x888>)
 800e646:	6013      	str	r3, [r2, #0]
 800e648:	4b91      	ldr	r3, [pc, #580]	; (800e890 <tcp_receive+0x88c>)
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	4a8f      	ldr	r2, [pc, #572]	; (800e88c <tcp_receive+0x888>)
 800e64e:	6812      	ldr	r2, [r2, #0]
 800e650:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e652:	e00d      	b.n	800e670 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e654:	4b8d      	ldr	r3, [pc, #564]	; (800e88c <tcp_receive+0x888>)
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	da06      	bge.n	800e670 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	8b5b      	ldrh	r3, [r3, #26]
 800e666:	f043 0302 	orr.w	r3, r3, #2
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e670:	4b86      	ldr	r3, [pc, #536]	; (800e88c <tcp_receive+0x888>)
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f2c0 842a 	blt.w	800eed4 <tcp_receive+0xed0>
 800e680:	4b82      	ldr	r3, [pc, #520]	; (800e88c <tcp_receive+0x888>)
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e688:	6879      	ldr	r1, [r7, #4]
 800e68a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e68c:	440b      	add	r3, r1
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	3301      	adds	r3, #1
 800e692:	2b00      	cmp	r3, #0
 800e694:	f300 841e 	bgt.w	800eed4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e69c:	4b7b      	ldr	r3, [pc, #492]	; (800e88c <tcp_receive+0x888>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	f040 829a 	bne.w	800ebda <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e6a6:	4b7a      	ldr	r3, [pc, #488]	; (800e890 <tcp_receive+0x88c>)
 800e6a8:	891c      	ldrh	r4, [r3, #8]
 800e6aa:	4b79      	ldr	r3, [pc, #484]	; (800e890 <tcp_receive+0x88c>)
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	899b      	ldrh	r3, [r3, #12]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fa ffc6 	bl	8009644 <lwip_htons>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	f003 0303 	and.w	r3, r3, #3
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <tcp_receive+0x6c4>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e000      	b.n	800e6ca <tcp_receive+0x6c6>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4423      	add	r3, r4
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	4b71      	ldr	r3, [pc, #452]	; (800e894 <tcp_receive+0x890>)
 800e6d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6d6:	4b6f      	ldr	r3, [pc, #444]	; (800e894 <tcp_receive+0x890>)
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d275      	bcs.n	800e7ca <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e6de:	4b6c      	ldr	r3, [pc, #432]	; (800e890 <tcp_receive+0x88c>)
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	899b      	ldrh	r3, [r3, #12]
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fa ffac 	bl	8009644 <lwip_htons>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01f      	beq.n	800e738 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e6f8:	4b65      	ldr	r3, [pc, #404]	; (800e890 <tcp_receive+0x88c>)
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	899b      	ldrh	r3, [r3, #12]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	b21b      	sxth	r3, r3
 800e702:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e706:	b21c      	sxth	r4, r3
 800e708:	4b61      	ldr	r3, [pc, #388]	; (800e890 <tcp_receive+0x88c>)
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	899b      	ldrh	r3, [r3, #12]
 800e70e:	b29b      	uxth	r3, r3
 800e710:	4618      	mov	r0, r3
 800e712:	f7fa ff97 	bl	8009644 <lwip_htons>
 800e716:	4603      	mov	r3, r0
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e720:	b29b      	uxth	r3, r3
 800e722:	4618      	mov	r0, r3
 800e724:	f7fa ff8e 	bl	8009644 <lwip_htons>
 800e728:	4603      	mov	r3, r0
 800e72a:	b21b      	sxth	r3, r3
 800e72c:	4323      	orrs	r3, r4
 800e72e:	b21a      	sxth	r2, r3
 800e730:	4b57      	ldr	r3, [pc, #348]	; (800e890 <tcp_receive+0x88c>)
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	b292      	uxth	r2, r2
 800e736:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e73c:	4b54      	ldr	r3, [pc, #336]	; (800e890 <tcp_receive+0x88c>)
 800e73e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e740:	4b53      	ldr	r3, [pc, #332]	; (800e890 <tcp_receive+0x88c>)
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	899b      	ldrh	r3, [r3, #12]
 800e746:	b29b      	uxth	r3, r3
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fa ff7b 	bl	8009644 <lwip_htons>
 800e74e:	4603      	mov	r3, r0
 800e750:	b2db      	uxtb	r3, r3
 800e752:	f003 0302 	and.w	r3, r3, #2
 800e756:	2b00      	cmp	r3, #0
 800e758:	d005      	beq.n	800e766 <tcp_receive+0x762>
            inseg.len -= 1;
 800e75a:	4b4d      	ldr	r3, [pc, #308]	; (800e890 <tcp_receive+0x88c>)
 800e75c:	891b      	ldrh	r3, [r3, #8]
 800e75e:	3b01      	subs	r3, #1
 800e760:	b29a      	uxth	r2, r3
 800e762:	4b4b      	ldr	r3, [pc, #300]	; (800e890 <tcp_receive+0x88c>)
 800e764:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e766:	4b4a      	ldr	r3, [pc, #296]	; (800e890 <tcp_receive+0x88c>)
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	4a49      	ldr	r2, [pc, #292]	; (800e890 <tcp_receive+0x88c>)
 800e76c:	8912      	ldrh	r2, [r2, #8]
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7fc f93f 	bl	800a9f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e776:	4b46      	ldr	r3, [pc, #280]	; (800e890 <tcp_receive+0x88c>)
 800e778:	891c      	ldrh	r4, [r3, #8]
 800e77a:	4b45      	ldr	r3, [pc, #276]	; (800e890 <tcp_receive+0x88c>)
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	899b      	ldrh	r3, [r3, #12]
 800e780:	b29b      	uxth	r3, r3
 800e782:	4618      	mov	r0, r3
 800e784:	f7fa ff5e 	bl	8009644 <lwip_htons>
 800e788:	4603      	mov	r3, r0
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	f003 0303 	and.w	r3, r3, #3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d001      	beq.n	800e798 <tcp_receive+0x794>
 800e794:	2301      	movs	r3, #1
 800e796:	e000      	b.n	800e79a <tcp_receive+0x796>
 800e798:	2300      	movs	r3, #0
 800e79a:	4423      	add	r3, r4
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	4b3d      	ldr	r3, [pc, #244]	; (800e894 <tcp_receive+0x890>)
 800e7a0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e7a2:	4b3c      	ldr	r3, [pc, #240]	; (800e894 <tcp_receive+0x890>)
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	4b38      	ldr	r3, [pc, #224]	; (800e88c <tcp_receive+0x888>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	441a      	add	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b2:	6879      	ldr	r1, [r7, #4]
 800e7b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7b6:	440b      	add	r3, r1
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d006      	beq.n	800e7ca <tcp_receive+0x7c6>
 800e7bc:	4b36      	ldr	r3, [pc, #216]	; (800e898 <tcp_receive+0x894>)
 800e7be:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e7c2:	4936      	ldr	r1, [pc, #216]	; (800e89c <tcp_receive+0x898>)
 800e7c4:	4836      	ldr	r0, [pc, #216]	; (800e8a0 <tcp_receive+0x89c>)
 800e7c6:	f005 fa9f 	bl	8013d08 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 80e7 	beq.w	800e9a2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e7d4:	4b2e      	ldr	r3, [pc, #184]	; (800e890 <tcp_receive+0x88c>)
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	899b      	ldrh	r3, [r3, #12]
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fa ff31 	bl	8009644 <lwip_htons>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d010      	beq.n	800e810 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e7ee:	e00a      	b.n	800e806 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7f4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f7fd fd92 	bl	800c32a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1f0      	bne.n	800e7f0 <tcp_receive+0x7ec>
 800e80e:	e0c8      	b.n	800e9a2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e814:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e816:	e052      	b.n	800e8be <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	899b      	ldrh	r3, [r3, #12]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7fa ff0f 	bl	8009644 <lwip_htons>
 800e826:	4603      	mov	r3, r0
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d03d      	beq.n	800e8ae <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e832:	4b17      	ldr	r3, [pc, #92]	; (800e890 <tcp_receive+0x88c>)
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7fa ff02 	bl	8009644 <lwip_htons>
 800e840:	4603      	mov	r3, r0
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d130      	bne.n	800e8ae <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e84c:	4b10      	ldr	r3, [pc, #64]	; (800e890 <tcp_receive+0x88c>)
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	899b      	ldrh	r3, [r3, #12]
 800e852:	b29c      	uxth	r4, r3
 800e854:	2001      	movs	r0, #1
 800e856:	f7fa fef5 	bl	8009644 <lwip_htons>
 800e85a:	4603      	mov	r3, r0
 800e85c:	461a      	mov	r2, r3
 800e85e:	4b0c      	ldr	r3, [pc, #48]	; (800e890 <tcp_receive+0x88c>)
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	4322      	orrs	r2, r4
 800e864:	b292      	uxth	r2, r2
 800e866:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e868:	4b09      	ldr	r3, [pc, #36]	; (800e890 <tcp_receive+0x88c>)
 800e86a:	891c      	ldrh	r4, [r3, #8]
 800e86c:	4b08      	ldr	r3, [pc, #32]	; (800e890 <tcp_receive+0x88c>)
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	899b      	ldrh	r3, [r3, #12]
 800e872:	b29b      	uxth	r3, r3
 800e874:	4618      	mov	r0, r3
 800e876:	f7fa fee5 	bl	8009644 <lwip_htons>
 800e87a:	4603      	mov	r3, r0
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	f003 0303 	and.w	r3, r3, #3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00e      	beq.n	800e8a4 <tcp_receive+0x8a0>
 800e886:	2301      	movs	r3, #1
 800e888:	e00d      	b.n	800e8a6 <tcp_receive+0x8a2>
 800e88a:	bf00      	nop
 800e88c:	20008cb4 	.word	0x20008cb4
 800e890:	20008c94 	.word	0x20008c94
 800e894:	20008cbe 	.word	0x20008cbe
 800e898:	0801635c 	.word	0x0801635c
 800e89c:	08016704 	.word	0x08016704
 800e8a0:	080163a8 	.word	0x080163a8
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4423      	add	r3, r4
 800e8a8:	b29a      	uxth	r2, r3
 800e8aa:	4b98      	ldr	r3, [pc, #608]	; (800eb0c <tcp_receive+0xb08>)
 800e8ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e8b8:	6938      	ldr	r0, [r7, #16]
 800e8ba:	f7fd fd36 	bl	800c32a <tcp_seg_free>
            while (next &&
 800e8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00e      	beq.n	800e8e2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e8c4:	4b91      	ldr	r3, [pc, #580]	; (800eb0c <tcp_receive+0xb08>)
 800e8c6:	881b      	ldrh	r3, [r3, #0]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4b91      	ldr	r3, [pc, #580]	; (800eb10 <tcp_receive+0xb0c>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	441a      	add	r2, r3
 800e8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8d8:	8909      	ldrh	r1, [r1, #8]
 800e8da:	440b      	add	r3, r1
 800e8dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	da9a      	bge.n	800e818 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d059      	beq.n	800e99c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e8e8:	4b88      	ldr	r3, [pc, #544]	; (800eb0c <tcp_receive+0xb08>)
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	4b88      	ldr	r3, [pc, #544]	; (800eb10 <tcp_receive+0xb0c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	441a      	add	r2, r3
 800e8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd4d      	ble.n	800e99c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	b29a      	uxth	r2, r3
 800e908:	4b81      	ldr	r3, [pc, #516]	; (800eb10 <tcp_receive+0xb0c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	b29a      	uxth	r2, r3
 800e912:	4b80      	ldr	r3, [pc, #512]	; (800eb14 <tcp_receive+0xb10>)
 800e914:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e916:	4b7f      	ldr	r3, [pc, #508]	; (800eb14 <tcp_receive+0xb10>)
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	899b      	ldrh	r3, [r3, #12]
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fa fe90 	bl	8009644 <lwip_htons>
 800e924:	4603      	mov	r3, r0
 800e926:	b2db      	uxtb	r3, r3
 800e928:	f003 0302 	and.w	r3, r3, #2
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d005      	beq.n	800e93c <tcp_receive+0x938>
                inseg.len -= 1;
 800e930:	4b78      	ldr	r3, [pc, #480]	; (800eb14 <tcp_receive+0xb10>)
 800e932:	891b      	ldrh	r3, [r3, #8]
 800e934:	3b01      	subs	r3, #1
 800e936:	b29a      	uxth	r2, r3
 800e938:	4b76      	ldr	r3, [pc, #472]	; (800eb14 <tcp_receive+0xb10>)
 800e93a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e93c:	4b75      	ldr	r3, [pc, #468]	; (800eb14 <tcp_receive+0xb10>)
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	4a74      	ldr	r2, [pc, #464]	; (800eb14 <tcp_receive+0xb10>)
 800e942:	8912      	ldrh	r2, [r2, #8]
 800e944:	4611      	mov	r1, r2
 800e946:	4618      	mov	r0, r3
 800e948:	f7fc f854 	bl	800a9f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e94c:	4b71      	ldr	r3, [pc, #452]	; (800eb14 <tcp_receive+0xb10>)
 800e94e:	891c      	ldrh	r4, [r3, #8]
 800e950:	4b70      	ldr	r3, [pc, #448]	; (800eb14 <tcp_receive+0xb10>)
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	899b      	ldrh	r3, [r3, #12]
 800e956:	b29b      	uxth	r3, r3
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fa fe73 	bl	8009644 <lwip_htons>
 800e95e:	4603      	mov	r3, r0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	f003 0303 	and.w	r3, r3, #3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d001      	beq.n	800e96e <tcp_receive+0x96a>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e000      	b.n	800e970 <tcp_receive+0x96c>
 800e96e:	2300      	movs	r3, #0
 800e970:	4423      	add	r3, r4
 800e972:	b29a      	uxth	r2, r3
 800e974:	4b65      	ldr	r3, [pc, #404]	; (800eb0c <tcp_receive+0xb08>)
 800e976:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e978:	4b64      	ldr	r3, [pc, #400]	; (800eb0c <tcp_receive+0xb08>)
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	4b64      	ldr	r3, [pc, #400]	; (800eb10 <tcp_receive+0xb0c>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	441a      	add	r2, r3
 800e984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d006      	beq.n	800e99c <tcp_receive+0x998>
 800e98e:	4b62      	ldr	r3, [pc, #392]	; (800eb18 <tcp_receive+0xb14>)
 800e990:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e994:	4961      	ldr	r1, [pc, #388]	; (800eb1c <tcp_receive+0xb18>)
 800e996:	4862      	ldr	r0, [pc, #392]	; (800eb20 <tcp_receive+0xb1c>)
 800e998:	f005 f9b6 	bl	8013d08 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9a0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e9a2:	4b5a      	ldr	r3, [pc, #360]	; (800eb0c <tcp_receive+0xb08>)
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	4b59      	ldr	r3, [pc, #356]	; (800eb10 <tcp_receive+0xb0c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	441a      	add	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9b6:	4b55      	ldr	r3, [pc, #340]	; (800eb0c <tcp_receive+0xb08>)
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d206      	bcs.n	800e9cc <tcp_receive+0x9c8>
 800e9be:	4b56      	ldr	r3, [pc, #344]	; (800eb18 <tcp_receive+0xb14>)
 800e9c0:	f240 6207 	movw	r2, #1543	; 0x607
 800e9c4:	4957      	ldr	r1, [pc, #348]	; (800eb24 <tcp_receive+0xb20>)
 800e9c6:	4856      	ldr	r0, [pc, #344]	; (800eb20 <tcp_receive+0xb1c>)
 800e9c8:	f005 f99e 	bl	8013d08 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9d0:	4b4e      	ldr	r3, [pc, #312]	; (800eb0c <tcp_receive+0xb08>)
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7fc ffc5 	bl	800b96c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e9e2:	4b4c      	ldr	r3, [pc, #304]	; (800eb14 <tcp_receive+0xb10>)
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	891b      	ldrh	r3, [r3, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d006      	beq.n	800e9fa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e9ec:	4b49      	ldr	r3, [pc, #292]	; (800eb14 <tcp_receive+0xb10>)
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	4a4d      	ldr	r2, [pc, #308]	; (800eb28 <tcp_receive+0xb24>)
 800e9f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e9f4:	4b47      	ldr	r3, [pc, #284]	; (800eb14 <tcp_receive+0xb10>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e9fa:	4b46      	ldr	r3, [pc, #280]	; (800eb14 <tcp_receive+0xb10>)
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	899b      	ldrh	r3, [r3, #12]
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fa fe1e 	bl	8009644 <lwip_htons>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 80b8 	beq.w	800eb86 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ea16:	4b45      	ldr	r3, [pc, #276]	; (800eb2c <tcp_receive+0xb28>)
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	f043 0320 	orr.w	r3, r3, #32
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	4b42      	ldr	r3, [pc, #264]	; (800eb2c <tcp_receive+0xb28>)
 800ea22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ea24:	e0af      	b.n	800eb86 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	4a36      	ldr	r2, [pc, #216]	; (800eb10 <tcp_receive+0xb0c>)
 800ea36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	891b      	ldrh	r3, [r3, #8]
 800ea3c:	461c      	mov	r4, r3
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	899b      	ldrh	r3, [r3, #12]
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fa fdfc 	bl	8009644 <lwip_htons>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	f003 0303 	and.w	r3, r3, #3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <tcp_receive+0xa58>
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e000      	b.n	800ea5e <tcp_receive+0xa5a>
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	191a      	adds	r2, r3, r4
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea64:	441a      	add	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea6e:	461c      	mov	r4, r3
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	891b      	ldrh	r3, [r3, #8]
 800ea74:	461d      	mov	r5, r3
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	899b      	ldrh	r3, [r3, #12]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fa fde0 	bl	8009644 <lwip_htons>
 800ea84:	4603      	mov	r3, r0
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	f003 0303 	and.w	r3, r3, #3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <tcp_receive+0xa90>
 800ea90:	2301      	movs	r3, #1
 800ea92:	e000      	b.n	800ea96 <tcp_receive+0xa92>
 800ea94:	2300      	movs	r3, #0
 800ea96:	442b      	add	r3, r5
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	d206      	bcs.n	800eaaa <tcp_receive+0xaa6>
 800ea9c:	4b1e      	ldr	r3, [pc, #120]	; (800eb18 <tcp_receive+0xb14>)
 800ea9e:	f240 622b 	movw	r2, #1579	; 0x62b
 800eaa2:	4923      	ldr	r1, [pc, #140]	; (800eb30 <tcp_receive+0xb2c>)
 800eaa4:	481e      	ldr	r0, [pc, #120]	; (800eb20 <tcp_receive+0xb1c>)
 800eaa6:	f005 f92f 	bl	8013d08 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	891b      	ldrh	r3, [r3, #8]
 800eaae:	461c      	mov	r4, r3
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	899b      	ldrh	r3, [r3, #12]
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fa fdc3 	bl	8009644 <lwip_htons>
 800eabe:	4603      	mov	r3, r0
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	f003 0303 	and.w	r3, r3, #3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d001      	beq.n	800eace <tcp_receive+0xaca>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e000      	b.n	800ead0 <tcp_receive+0xacc>
 800eace:	2300      	movs	r3, #0
 800ead0:	1919      	adds	r1, r3, r4
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ead6:	b28b      	uxth	r3, r1
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	b29a      	uxth	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7fc ff43 	bl	800b96c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	891b      	ldrh	r3, [r3, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d028      	beq.n	800eb42 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eaf0:	4b0d      	ldr	r3, [pc, #52]	; (800eb28 <tcp_receive+0xb24>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d01d      	beq.n	800eb34 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800eaf8:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <tcp_receive+0xb24>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	4619      	mov	r1, r3
 800eb02:	4610      	mov	r0, r2
 800eb04:	f7fc f9be 	bl	800ae84 <pbuf_cat>
 800eb08:	e018      	b.n	800eb3c <tcp_receive+0xb38>
 800eb0a:	bf00      	nop
 800eb0c:	20008cbe 	.word	0x20008cbe
 800eb10:	20008cb4 	.word	0x20008cb4
 800eb14:	20008c94 	.word	0x20008c94
 800eb18:	0801635c 	.word	0x0801635c
 800eb1c:	0801673c 	.word	0x0801673c
 800eb20:	080163a8 	.word	0x080163a8
 800eb24:	08016778 	.word	0x08016778
 800eb28:	20008cc4 	.word	0x20008cc4
 800eb2c:	20008cc1 	.word	0x20008cc1
 800eb30:	08016798 	.word	0x08016798
            } else {
              recv_data = cseg->p;
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4a70      	ldr	r2, [pc, #448]	; (800ecfc <tcp_receive+0xcf8>)
 800eb3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	899b      	ldrh	r3, [r3, #12]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fa fd7a 	bl	8009644 <lwip_htons>
 800eb50:	4603      	mov	r3, r0
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00d      	beq.n	800eb78 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800eb5c:	4b68      	ldr	r3, [pc, #416]	; (800ed00 <tcp_receive+0xcfc>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f043 0320 	orr.w	r3, r3, #32
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	4b66      	ldr	r3, [pc, #408]	; (800ed00 <tcp_receive+0xcfc>)
 800eb68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	7d1b      	ldrb	r3, [r3, #20]
 800eb6e:	2b04      	cmp	r3, #4
 800eb70:	d102      	bne.n	800eb78 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2207      	movs	r2, #7
 800eb76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800eb80:	68b8      	ldr	r0, [r7, #8]
 800eb82:	f7fd fbd2 	bl	800c32a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d008      	beq.n	800eba0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	f43f af43 	beq.w	800ea26 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8b5b      	ldrh	r3, [r3, #26]
 800eba4:	f003 0301 	and.w	r3, r3, #1
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00e      	beq.n	800ebca <tcp_receive+0xbc6>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	8b5b      	ldrh	r3, [r3, #26]
 800ebb0:	f023 0301 	bic.w	r3, r3, #1
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	835a      	strh	r2, [r3, #26]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	8b5b      	ldrh	r3, [r3, #26]
 800ebbe:	f043 0302 	orr.w	r3, r3, #2
 800ebc2:	b29a      	uxth	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ebc8:	e188      	b.n	800eedc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	8b5b      	ldrh	r3, [r3, #26]
 800ebce:	f043 0301 	orr.w	r3, r3, #1
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ebd8:	e180      	b.n	800eedc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d106      	bne.n	800ebf0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ebe2:	4848      	ldr	r0, [pc, #288]	; (800ed04 <tcp_receive+0xd00>)
 800ebe4:	f7fd fbba 	bl	800c35c <tcp_seg_copy>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	675a      	str	r2, [r3, #116]	; 0x74
 800ebee:	e16d      	b.n	800eecc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ebfa:	e157      	b.n	800eeac <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	685a      	ldr	r2, [r3, #4]
 800ec02:	4b41      	ldr	r3, [pc, #260]	; (800ed08 <tcp_receive+0xd04>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d11d      	bne.n	800ec46 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ec0a:	4b3e      	ldr	r3, [pc, #248]	; (800ed04 <tcp_receive+0xd00>)
 800ec0c:	891a      	ldrh	r2, [r3, #8]
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	891b      	ldrh	r3, [r3, #8]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	f240 814f 	bls.w	800eeb6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ec18:	483a      	ldr	r0, [pc, #232]	; (800ed04 <tcp_receive+0xd00>)
 800ec1a:	f7fd fb9f 	bl	800c35c <tcp_seg_copy>
 800ec1e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f000 8149 	beq.w	800eeba <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ec28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d003      	beq.n	800ec36 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec30:	697a      	ldr	r2, [r7, #20]
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	e002      	b.n	800ec3c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ec3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec3e:	6978      	ldr	r0, [r7, #20]
 800ec40:	f7ff f8dc 	bl	800ddfc <tcp_oos_insert_segment>
                }
                break;
 800ec44:	e139      	b.n	800eeba <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ec46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d117      	bne.n	800ec7c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ec4c:	4b2e      	ldr	r3, [pc, #184]	; (800ed08 <tcp_receive+0xd04>)
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	1ad3      	subs	r3, r2, r3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	da57      	bge.n	800ed0c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ec5c:	4829      	ldr	r0, [pc, #164]	; (800ed04 <tcp_receive+0xd00>)
 800ec5e:	f7fd fb7d 	bl	800c35c <tcp_seg_copy>
 800ec62:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 8129 	beq.w	800eebe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ec72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec74:	69b8      	ldr	r0, [r7, #24]
 800ec76:	f7ff f8c1 	bl	800ddfc <tcp_oos_insert_segment>
                  }
                  break;
 800ec7a:	e120      	b.n	800eebe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ec7c:	4b22      	ldr	r3, [pc, #136]	; (800ed08 <tcp_receive+0xd04>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	db3e      	blt.n	800ed0c <tcp_receive+0xd08>
 800ec8e:	4b1e      	ldr	r3, [pc, #120]	; (800ed08 <tcp_receive+0xd04>)
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dc35      	bgt.n	800ed0c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eca0:	4818      	ldr	r0, [pc, #96]	; (800ed04 <tcp_receive+0xd00>)
 800eca2:	f7fd fb5b 	bl	800c35c <tcp_seg_copy>
 800eca6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f000 8109 	beq.w	800eec2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ecb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecb8:	8912      	ldrh	r2, [r2, #8]
 800ecba:	441a      	add	r2, r3
 800ecbc:	4b12      	ldr	r3, [pc, #72]	; (800ed08 <tcp_receive+0xd04>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	dd12      	ble.n	800ecec <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ecc6:	4b10      	ldr	r3, [pc, #64]	; (800ed08 <tcp_receive+0xd04>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	1ad3      	subs	r3, r2, r3
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece2:	891b      	ldrh	r3, [r3, #8]
 800ece4:	4619      	mov	r1, r3
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fb fe84 	bl	800a9f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ecec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecee:	69fa      	ldr	r2, [r7, #28]
 800ecf0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ecf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecf4:	69f8      	ldr	r0, [r7, #28]
 800ecf6:	f7ff f881 	bl	800ddfc <tcp_oos_insert_segment>
                  }
                  break;
 800ecfa:	e0e2      	b.n	800eec2 <tcp_receive+0xebe>
 800ecfc:	20008cc4 	.word	0x20008cc4
 800ed00:	20008cc1 	.word	0x20008cc1
 800ed04:	20008c94 	.word	0x20008c94
 800ed08:	20008cb4 	.word	0x20008cb4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ed10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f040 80c6 	bne.w	800eea6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ed1a:	4b80      	ldr	r3, [pc, #512]	; (800ef1c <tcp_receive+0xf18>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f340 80bd 	ble.w	800eea6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	899b      	ldrh	r3, [r3, #12]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fa fc85 	bl	8009644 <lwip_htons>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	f003 0301 	and.w	r3, r3, #1
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f040 80bf 	bne.w	800eec6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ed48:	4875      	ldr	r0, [pc, #468]	; (800ef20 <tcp_receive+0xf1c>)
 800ed4a:	f7fd fb07 	bl	800c35c <tcp_seg_copy>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed52:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f000 80b6 	beq.w	800eeca <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ed5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed66:	8912      	ldrh	r2, [r2, #8]
 800ed68:	441a      	add	r2, r3
 800ed6a:	4b6c      	ldr	r3, [pc, #432]	; (800ef1c <tcp_receive+0xf18>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	dd12      	ble.n	800ed9a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ed74:	4b69      	ldr	r3, [pc, #420]	; (800ef1c <tcp_receive+0xf18>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed88:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ed8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8c:	685a      	ldr	r2, [r3, #4]
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	891b      	ldrh	r3, [r3, #8]
 800ed92:	4619      	mov	r1, r3
 800ed94:	4610      	mov	r0, r2
 800ed96:	f7fb fe2d 	bl	800a9f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ed9a:	4b62      	ldr	r3, [pc, #392]	; (800ef24 <tcp_receive+0xf20>)
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4b5e      	ldr	r3, [pc, #376]	; (800ef1c <tcp_receive+0xf18>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	441a      	add	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edaa:	6879      	ldr	r1, [r7, #4]
 800edac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800edae:	440b      	add	r3, r1
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f340 8089 	ble.w	800eeca <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	899b      	ldrh	r3, [r3, #12]
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fa fc3e 	bl	8009644 <lwip_htons>
 800edc8:	4603      	mov	r3, r0
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d022      	beq.n	800ee1a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800edd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	899b      	ldrh	r3, [r3, #12]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	b21b      	sxth	r3, r3
 800ede0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ede4:	b21c      	sxth	r4, r3
 800ede6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	899b      	ldrh	r3, [r3, #12]
 800edee:	b29b      	uxth	r3, r3
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fa fc27 	bl	8009644 <lwip_htons>
 800edf6:	4603      	mov	r3, r0
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fa fc1e 	bl	8009644 <lwip_htons>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	b21b      	sxth	r3, r3
 800ee0c:	4323      	orrs	r3, r4
 800ee0e:	b21a      	sxth	r2, r3
 800ee10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	b292      	uxth	r2, r2
 800ee18:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee24:	4413      	add	r3, r2
 800ee26:	b299      	uxth	r1, r3
 800ee28:	4b3c      	ldr	r3, [pc, #240]	; (800ef1c <tcp_receive+0xf18>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	1a8a      	subs	r2, r1, r2
 800ee34:	b292      	uxth	r2, r2
 800ee36:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ee38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	685a      	ldr	r2, [r3, #4]
 800ee3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	891b      	ldrh	r3, [r3, #8]
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7fb fdd4 	bl	800a9f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	891c      	ldrh	r4, [r3, #8]
 800ee52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	899b      	ldrh	r3, [r3, #12]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fa fbf1 	bl	8009644 <lwip_htons>
 800ee62:	4603      	mov	r3, r0
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	f003 0303 	and.w	r3, r3, #3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <tcp_receive+0xe6e>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e000      	b.n	800ee74 <tcp_receive+0xe70>
 800ee72:	2300      	movs	r3, #0
 800ee74:	4423      	add	r3, r4
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	4b2a      	ldr	r3, [pc, #168]	; (800ef24 <tcp_receive+0xf20>)
 800ee7a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee7c:	4b29      	ldr	r3, [pc, #164]	; (800ef24 <tcp_receive+0xf20>)
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	461a      	mov	r2, r3
 800ee82:	4b26      	ldr	r3, [pc, #152]	; (800ef1c <tcp_receive+0xf18>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	441a      	add	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8c:	6879      	ldr	r1, [r7, #4]
 800ee8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee90:	440b      	add	r3, r1
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d019      	beq.n	800eeca <tcp_receive+0xec6>
 800ee96:	4b24      	ldr	r3, [pc, #144]	; (800ef28 <tcp_receive+0xf24>)
 800ee98:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ee9c:	4923      	ldr	r1, [pc, #140]	; (800ef2c <tcp_receive+0xf28>)
 800ee9e:	4824      	ldr	r0, [pc, #144]	; (800ef30 <tcp_receive+0xf2c>)
 800eea0:	f004 ff32 	bl	8013d08 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800eea4:	e011      	b.n	800eeca <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800eea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f47f aea4 	bne.w	800ebfc <tcp_receive+0xbf8>
 800eeb4:	e00a      	b.n	800eecc <tcp_receive+0xec8>
                break;
 800eeb6:	bf00      	nop
 800eeb8:	e008      	b.n	800eecc <tcp_receive+0xec8>
                break;
 800eeba:	bf00      	nop
 800eebc:	e006      	b.n	800eecc <tcp_receive+0xec8>
                  break;
 800eebe:	bf00      	nop
 800eec0:	e004      	b.n	800eecc <tcp_receive+0xec8>
                  break;
 800eec2:	bf00      	nop
 800eec4:	e002      	b.n	800eecc <tcp_receive+0xec8>
                  break;
 800eec6:	bf00      	nop
 800eec8:	e000      	b.n	800eecc <tcp_receive+0xec8>
                break;
 800eeca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f001 fa33 	bl	8010338 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800eed2:	e003      	b.n	800eedc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f001 fa2f 	bl	8010338 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eeda:	e01a      	b.n	800ef12 <tcp_receive+0xf0e>
 800eedc:	e019      	b.n	800ef12 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800eede:	4b0f      	ldr	r3, [pc, #60]	; (800ef1c <tcp_receive+0xf18>)
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	db0a      	blt.n	800ef02 <tcp_receive+0xefe>
 800eeec:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <tcp_receive+0xf18>)
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eef8:	440b      	add	r3, r1
 800eefa:	1ad3      	subs	r3, r2, r3
 800eefc:	3301      	adds	r3, #1
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	dd07      	ble.n	800ef12 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	8b5b      	ldrh	r3, [r3, #26]
 800ef06:	f043 0302 	orr.w	r3, r3, #2
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ef10:	e7ff      	b.n	800ef12 <tcp_receive+0xf0e>
 800ef12:	bf00      	nop
 800ef14:	3750      	adds	r7, #80	; 0x50
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bdb0      	pop	{r4, r5, r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	20008cb4 	.word	0x20008cb4
 800ef20:	20008c94 	.word	0x20008c94
 800ef24:	20008cbe 	.word	0x20008cbe
 800ef28:	0801635c 	.word	0x0801635c
 800ef2c:	08016704 	.word	0x08016704
 800ef30:	080163a8 	.word	0x080163a8

0800ef34 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ef3a:	4b15      	ldr	r3, [pc, #84]	; (800ef90 <tcp_get_next_optbyte+0x5c>)
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	1c5a      	adds	r2, r3, #1
 800ef40:	b291      	uxth	r1, r2
 800ef42:	4a13      	ldr	r2, [pc, #76]	; (800ef90 <tcp_get_next_optbyte+0x5c>)
 800ef44:	8011      	strh	r1, [r2, #0]
 800ef46:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ef48:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <tcp_get_next_optbyte+0x60>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d004      	beq.n	800ef5a <tcp_get_next_optbyte+0x26>
 800ef50:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <tcp_get_next_optbyte+0x64>)
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	88fa      	ldrh	r2, [r7, #6]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d208      	bcs.n	800ef6c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ef5a:	4b10      	ldr	r3, [pc, #64]	; (800ef9c <tcp_get_next_optbyte+0x68>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3314      	adds	r3, #20
 800ef60:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ef62:	88fb      	ldrh	r3, [r7, #6]
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	4413      	add	r3, r2
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	e00b      	b.n	800ef84 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ef6c:	88fb      	ldrh	r3, [r7, #6]
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	4b09      	ldr	r3, [pc, #36]	; (800ef98 <tcp_get_next_optbyte+0x64>)
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ef7a:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <tcp_get_next_optbyte+0x60>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	797b      	ldrb	r3, [r7, #5]
 800ef80:	4413      	add	r3, r2
 800ef82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr
 800ef90:	20008cb0 	.word	0x20008cb0
 800ef94:	20008cac 	.word	0x20008cac
 800ef98:	20008caa 	.word	0x20008caa
 800ef9c:	20008ca4 	.word	0x20008ca4

0800efa0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d106      	bne.n	800efbc <tcp_parseopt+0x1c>
 800efae:	4b32      	ldr	r3, [pc, #200]	; (800f078 <tcp_parseopt+0xd8>)
 800efb0:	f240 727d 	movw	r2, #1917	; 0x77d
 800efb4:	4931      	ldr	r1, [pc, #196]	; (800f07c <tcp_parseopt+0xdc>)
 800efb6:	4832      	ldr	r0, [pc, #200]	; (800f080 <tcp_parseopt+0xe0>)
 800efb8:	f004 fea6 	bl	8013d08 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800efbc:	4b31      	ldr	r3, [pc, #196]	; (800f084 <tcp_parseopt+0xe4>)
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d055      	beq.n	800f070 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800efc4:	4b30      	ldr	r3, [pc, #192]	; (800f088 <tcp_parseopt+0xe8>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	801a      	strh	r2, [r3, #0]
 800efca:	e045      	b.n	800f058 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800efcc:	f7ff ffb2 	bl	800ef34 <tcp_get_next_optbyte>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	d006      	beq.n	800efe8 <tcp_parseopt+0x48>
 800efda:	2b02      	cmp	r3, #2
 800efdc:	dc2b      	bgt.n	800f036 <tcp_parseopt+0x96>
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d041      	beq.n	800f066 <tcp_parseopt+0xc6>
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d127      	bne.n	800f036 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800efe6:	e037      	b.n	800f058 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800efe8:	f7ff ffa4 	bl	800ef34 <tcp_get_next_optbyte>
 800efec:	4603      	mov	r3, r0
 800efee:	2b04      	cmp	r3, #4
 800eff0:	d13b      	bne.n	800f06a <tcp_parseopt+0xca>
 800eff2:	4b25      	ldr	r3, [pc, #148]	; (800f088 <tcp_parseopt+0xe8>)
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	3301      	adds	r3, #1
 800eff8:	4a22      	ldr	r2, [pc, #136]	; (800f084 <tcp_parseopt+0xe4>)
 800effa:	8812      	ldrh	r2, [r2, #0]
 800effc:	4293      	cmp	r3, r2
 800effe:	da34      	bge.n	800f06a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f000:	f7ff ff98 	bl	800ef34 <tcp_get_next_optbyte>
 800f004:	4603      	mov	r3, r0
 800f006:	b29b      	uxth	r3, r3
 800f008:	021b      	lsls	r3, r3, #8
 800f00a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f00c:	f7ff ff92 	bl	800ef34 <tcp_get_next_optbyte>
 800f010:	4603      	mov	r3, r0
 800f012:	b29a      	uxth	r2, r3
 800f014:	89bb      	ldrh	r3, [r7, #12]
 800f016:	4313      	orrs	r3, r2
 800f018:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f01a:	89bb      	ldrh	r3, [r7, #12]
 800f01c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f020:	d804      	bhi.n	800f02c <tcp_parseopt+0x8c>
 800f022:	89bb      	ldrh	r3, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <tcp_parseopt+0x8c>
 800f028:	89ba      	ldrh	r2, [r7, #12]
 800f02a:	e001      	b.n	800f030 <tcp_parseopt+0x90>
 800f02c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f034:	e010      	b.n	800f058 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f036:	f7ff ff7d 	bl	800ef34 <tcp_get_next_optbyte>
 800f03a:	4603      	mov	r3, r0
 800f03c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f03e:	7afb      	ldrb	r3, [r7, #11]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d914      	bls.n	800f06e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f044:	7afb      	ldrb	r3, [r7, #11]
 800f046:	b29a      	uxth	r2, r3
 800f048:	4b0f      	ldr	r3, [pc, #60]	; (800f088 <tcp_parseopt+0xe8>)
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	4413      	add	r3, r2
 800f04e:	b29b      	uxth	r3, r3
 800f050:	3b02      	subs	r3, #2
 800f052:	b29a      	uxth	r2, r3
 800f054:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <tcp_parseopt+0xe8>)
 800f056:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f058:	4b0b      	ldr	r3, [pc, #44]	; (800f088 <tcp_parseopt+0xe8>)
 800f05a:	881a      	ldrh	r2, [r3, #0]
 800f05c:	4b09      	ldr	r3, [pc, #36]	; (800f084 <tcp_parseopt+0xe4>)
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	429a      	cmp	r2, r3
 800f062:	d3b3      	bcc.n	800efcc <tcp_parseopt+0x2c>
 800f064:	e004      	b.n	800f070 <tcp_parseopt+0xd0>
          return;
 800f066:	bf00      	nop
 800f068:	e002      	b.n	800f070 <tcp_parseopt+0xd0>
            return;
 800f06a:	bf00      	nop
 800f06c:	e000      	b.n	800f070 <tcp_parseopt+0xd0>
            return;
 800f06e:	bf00      	nop
      }
    }
  }
}
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	0801635c 	.word	0x0801635c
 800f07c:	080167c0 	.word	0x080167c0
 800f080:	080163a8 	.word	0x080163a8
 800f084:	20008ca8 	.word	0x20008ca8
 800f088:	20008cb0 	.word	0x20008cb0

0800f08c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f08c:	b480      	push	{r7}
 800f08e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f090:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <tcp_trigger_input_pcb_close+0x1c>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f043 0310 	orr.w	r3, r3, #16
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	4b03      	ldr	r3, [pc, #12]	; (800f0a8 <tcp_trigger_input_pcb_close+0x1c>)
 800f09c:	701a      	strb	r2, [r3, #0]
}
 800f09e:	bf00      	nop
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr
 800f0a8:	20008cc1 	.word	0x20008cc1

0800f0ac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00a      	beq.n	800f0d4 <tcp_route+0x28>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	7a1b      	ldrb	r3, [r3, #8]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d006      	beq.n	800f0d4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	7a1b      	ldrb	r3, [r3, #8]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fb fab8 	bl	800a640 <netif_get_by_index>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	e003      	b.n	800f0dc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f003 fa37 	bl	8012548 <ip4_route>
 800f0da:	4603      	mov	r3, r0
  }
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f0e4:	b590      	push	{r4, r7, lr}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	603b      	str	r3, [r7, #0]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d105      	bne.n	800f106 <tcp_create_segment+0x22>
 800f0fa:	4b44      	ldr	r3, [pc, #272]	; (800f20c <tcp_create_segment+0x128>)
 800f0fc:	22a3      	movs	r2, #163	; 0xa3
 800f0fe:	4944      	ldr	r1, [pc, #272]	; (800f210 <tcp_create_segment+0x12c>)
 800f100:	4844      	ldr	r0, [pc, #272]	; (800f214 <tcp_create_segment+0x130>)
 800f102:	f004 fe01 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d105      	bne.n	800f118 <tcp_create_segment+0x34>
 800f10c:	4b3f      	ldr	r3, [pc, #252]	; (800f20c <tcp_create_segment+0x128>)
 800f10e:	22a4      	movs	r2, #164	; 0xa4
 800f110:	4941      	ldr	r1, [pc, #260]	; (800f218 <tcp_create_segment+0x134>)
 800f112:	4840      	ldr	r0, [pc, #256]	; (800f214 <tcp_create_segment+0x130>)
 800f114:	f004 fdf8 	bl	8013d08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	f003 0304 	and.w	r3, r3, #4
 800f124:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f126:	2003      	movs	r0, #3
 800f128:	f7fa ff04 	bl	8009f34 <memp_malloc>
 800f12c:	6138      	str	r0, [r7, #16]
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d104      	bne.n	800f13e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f134:	68b8      	ldr	r0, [r7, #8]
 800f136:	f7fb fde3 	bl	800ad00 <pbuf_free>
    return NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	e061      	b.n	800f202 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f144:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	2200      	movs	r2, #0
 800f14a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	891a      	ldrh	r2, [r3, #8]
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d205      	bcs.n	800f16a <tcp_create_segment+0x86>
 800f15e:	4b2b      	ldr	r3, [pc, #172]	; (800f20c <tcp_create_segment+0x128>)
 800f160:	22b0      	movs	r2, #176	; 0xb0
 800f162:	492e      	ldr	r1, [pc, #184]	; (800f21c <tcp_create_segment+0x138>)
 800f164:	482b      	ldr	r0, [pc, #172]	; (800f214 <tcp_create_segment+0x130>)
 800f166:	f004 fdcf 	bl	8013d08 <iprintf>
  seg->len = p->tot_len - optlen;
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	891a      	ldrh	r2, [r3, #8]
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
 800f170:	b29b      	uxth	r3, r3
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	b29a      	uxth	r2, r3
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f17a:	2114      	movs	r1, #20
 800f17c:	68b8      	ldr	r0, [r7, #8]
 800f17e:	f7fb fd29 	bl	800abd4 <pbuf_add_header>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d004      	beq.n	800f192 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f188:	6938      	ldr	r0, [r7, #16]
 800f18a:	f7fd f8ce 	bl	800c32a <tcp_seg_free>
    return NULL;
 800f18e:	2300      	movs	r3, #0
 800f190:	e037      	b.n	800f202 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	8ada      	ldrh	r2, [r3, #22]
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	68dc      	ldr	r4, [r3, #12]
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	f7fa fa4d 	bl	8009644 <lwip_htons>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	8b1a      	ldrh	r2, [r3, #24]
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	68dc      	ldr	r4, [r3, #12]
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	f7fa fa44 	bl	8009644 <lwip_htons>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	68dc      	ldr	r4, [r3, #12]
 800f1c4:	6838      	ldr	r0, [r7, #0]
 800f1c6:	f7fa fa52 	bl	800966e <lwip_htonl>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f1ce:	7dfb      	ldrb	r3, [r7, #23]
 800f1d0:	089b      	lsrs	r3, r3, #2
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	3305      	adds	r3, #5
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	031b      	lsls	r3, r3, #12
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	68dc      	ldr	r4, [r3, #12]
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	f7fa fa2a 	bl	8009644 <lwip_htons>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	749a      	strb	r2, [r3, #18]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	74da      	strb	r2, [r3, #19]
  return seg;
 800f200:	693b      	ldr	r3, [r7, #16]
}
 800f202:	4618      	mov	r0, r3
 800f204:	371c      	adds	r7, #28
 800f206:	46bd      	mov	sp, r7
 800f208:	bd90      	pop	{r4, r7, pc}
 800f20a:	bf00      	nop
 800f20c:	080167dc 	.word	0x080167dc
 800f210:	08016810 	.word	0x08016810
 800f214:	08016830 	.word	0x08016830
 800f218:	08016858 	.word	0x08016858
 800f21c:	0801687c 	.word	0x0801687c

0800f220 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f220:	b590      	push	{r4, r7, lr}
 800f222:	b08b      	sub	sp, #44	; 0x2c
 800f224:	af02      	add	r7, sp, #8
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f22c:	2300      	movs	r3, #0
 800f22e:	61fb      	str	r3, [r7, #28]
 800f230:	2300      	movs	r3, #0
 800f232:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f234:	2300      	movs	r3, #0
 800f236:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <tcp_split_unsent_seg+0x2c>
 800f23e:	4b95      	ldr	r3, [pc, #596]	; (800f494 <tcp_split_unsent_seg+0x274>)
 800f240:	f240 324b 	movw	r2, #843	; 0x34b
 800f244:	4994      	ldr	r1, [pc, #592]	; (800f498 <tcp_split_unsent_seg+0x278>)
 800f246:	4895      	ldr	r0, [pc, #596]	; (800f49c <tcp_split_unsent_seg+0x27c>)
 800f248:	f004 fd5e 	bl	8013d08 <iprintf>

  useg = pcb->unsent;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f250:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f258:	f04f 33ff 	mov.w	r3, #4294967295
 800f25c:	e116      	b.n	800f48c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f25e:	887b      	ldrh	r3, [r7, #2]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d109      	bne.n	800f278 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f264:	4b8b      	ldr	r3, [pc, #556]	; (800f494 <tcp_split_unsent_seg+0x274>)
 800f266:	f240 3253 	movw	r2, #851	; 0x353
 800f26a:	498d      	ldr	r1, [pc, #564]	; (800f4a0 <tcp_split_unsent_seg+0x280>)
 800f26c:	488b      	ldr	r0, [pc, #556]	; (800f49c <tcp_split_unsent_seg+0x27c>)
 800f26e:	f004 fd4b 	bl	8013d08 <iprintf>
    return ERR_VAL;
 800f272:	f06f 0305 	mvn.w	r3, #5
 800f276:	e109      	b.n	800f48c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	891b      	ldrh	r3, [r3, #8]
 800f27c:	887a      	ldrh	r2, [r7, #2]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d301      	bcc.n	800f286 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	e102      	b.n	800f48c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f28a:	887a      	ldrh	r2, [r7, #2]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d906      	bls.n	800f29e <tcp_split_unsent_seg+0x7e>
 800f290:	4b80      	ldr	r3, [pc, #512]	; (800f494 <tcp_split_unsent_seg+0x274>)
 800f292:	f240 325b 	movw	r2, #859	; 0x35b
 800f296:	4983      	ldr	r1, [pc, #524]	; (800f4a4 <tcp_split_unsent_seg+0x284>)
 800f298:	4880      	ldr	r0, [pc, #512]	; (800f49c <tcp_split_unsent_seg+0x27c>)
 800f29a:	f004 fd35 	bl	8013d08 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	891b      	ldrh	r3, [r3, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d106      	bne.n	800f2b4 <tcp_split_unsent_seg+0x94>
 800f2a6:	4b7b      	ldr	r3, [pc, #492]	; (800f494 <tcp_split_unsent_seg+0x274>)
 800f2a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f2ac:	497e      	ldr	r1, [pc, #504]	; (800f4a8 <tcp_split_unsent_seg+0x288>)
 800f2ae:	487b      	ldr	r0, [pc, #492]	; (800f49c <tcp_split_unsent_seg+0x27c>)
 800f2b0:	f004 fd2a 	bl	8013d08 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	7a9b      	ldrb	r3, [r3, #10]
 800f2b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	891a      	ldrh	r2, [r3, #8]
 800f2ca:	887b      	ldrh	r3, [r7, #2]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f2d0:	7bbb      	ldrb	r3, [r7, #14]
 800f2d2:	b29a      	uxth	r2, r3
 800f2d4:	89bb      	ldrh	r3, [r7, #12]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2de:	4619      	mov	r1, r3
 800f2e0:	2036      	movs	r0, #54	; 0x36
 800f2e2:	f7fb fa29 	bl	800a738 <pbuf_alloc>
 800f2e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 80b7 	beq.w	800f45e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	891a      	ldrh	r2, [r3, #8]
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	891b      	ldrh	r3, [r3, #8]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	887b      	ldrh	r3, [r7, #2]
 800f300:	4413      	add	r3, r2
 800f302:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	6858      	ldr	r0, [r3, #4]
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	7bbb      	ldrb	r3, [r7, #14]
 800f30e:	18d1      	adds	r1, r2, r3
 800f310:	897b      	ldrh	r3, [r7, #10]
 800f312:	89ba      	ldrh	r2, [r7, #12]
 800f314:	f7fb feee 	bl	800b0f4 <pbuf_copy_partial>
 800f318:	4603      	mov	r3, r0
 800f31a:	461a      	mov	r2, r3
 800f31c:	89bb      	ldrh	r3, [r7, #12]
 800f31e:	4293      	cmp	r3, r2
 800f320:	f040 809f 	bne.w	800f462 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	899b      	ldrh	r3, [r3, #12]
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fa f989 	bl	8009644 <lwip_htons>
 800f332:	4603      	mov	r3, r0
 800f334:	b2db      	uxtb	r3, r3
 800f336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f33a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f33c:	2300      	movs	r3, #0
 800f33e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f340:	7efb      	ldrb	r3, [r7, #27]
 800f342:	f003 0308 	and.w	r3, r3, #8
 800f346:	2b00      	cmp	r3, #0
 800f348:	d007      	beq.n	800f35a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f34a:	7efb      	ldrb	r3, [r7, #27]
 800f34c:	f023 0308 	bic.w	r3, r3, #8
 800f350:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f352:	7ebb      	ldrb	r3, [r7, #26]
 800f354:	f043 0308 	orr.w	r3, r3, #8
 800f358:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f35a:	7efb      	ldrb	r3, [r7, #27]
 800f35c:	f003 0301 	and.w	r3, r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	d007      	beq.n	800f374 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f364:	7efb      	ldrb	r3, [r7, #27]
 800f366:	f023 0301 	bic.w	r3, r3, #1
 800f36a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f36c:	7ebb      	ldrb	r3, [r7, #26]
 800f36e:	f043 0301 	orr.w	r3, r3, #1
 800f372:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fa f977 	bl	800966e <lwip_htonl>
 800f380:	4602      	mov	r2, r0
 800f382:	887b      	ldrh	r3, [r7, #2]
 800f384:	18d1      	adds	r1, r2, r3
 800f386:	7eba      	ldrb	r2, [r7, #26]
 800f388:	7bfb      	ldrb	r3, [r7, #15]
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	460b      	mov	r3, r1
 800f38e:	6939      	ldr	r1, [r7, #16]
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f7ff fea7 	bl	800f0e4 <tcp_create_segment>
 800f396:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d063      	beq.n	800f466 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fb fd34 	bl	800ae10 <pbuf_clen>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3b2:	1a9b      	subs	r3, r3, r2
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	6858      	ldr	r0, [r3, #4]
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	891a      	ldrh	r2, [r3, #8]
 800f3c6:	89bb      	ldrh	r3, [r7, #12]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	f7fb fb11 	bl	800a9f4 <pbuf_realloc>
  useg->len -= remainder;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	891a      	ldrh	r2, [r3, #8]
 800f3d6:	89bb      	ldrh	r3, [r7, #12]
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	899b      	ldrh	r3, [r3, #12]
 800f3e6:	b29c      	uxth	r4, r3
 800f3e8:	7efb      	ldrb	r3, [r7, #27]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fa f929 	bl	8009644 <lwip_htons>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	4322      	orrs	r2, r4
 800f3fc:	b292      	uxth	r2, r2
 800f3fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	4618      	mov	r0, r3
 800f406:	f7fb fd03 	bl	800ae10 <pbuf_clen>
 800f40a:	4603      	mov	r3, r0
 800f40c:	461a      	mov	r2, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f414:	4413      	add	r3, r2
 800f416:	b29a      	uxth	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	4618      	mov	r0, r3
 800f424:	f7fb fcf4 	bl	800ae10 <pbuf_clen>
 800f428:	4603      	mov	r3, r0
 800f42a:	461a      	mov	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f432:	4413      	add	r3, r2
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	69fa      	ldr	r2, [r7, #28]
 800f448:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d103      	bne.n	800f45a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	e016      	b.n	800f48c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f45e:	bf00      	nop
 800f460:	e002      	b.n	800f468 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f462:	bf00      	nop
 800f464:	e000      	b.n	800f468 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f466:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d006      	beq.n	800f47c <tcp_split_unsent_seg+0x25c>
 800f46e:	4b09      	ldr	r3, [pc, #36]	; (800f494 <tcp_split_unsent_seg+0x274>)
 800f470:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f474:	490d      	ldr	r1, [pc, #52]	; (800f4ac <tcp_split_unsent_seg+0x28c>)
 800f476:	4809      	ldr	r0, [pc, #36]	; (800f49c <tcp_split_unsent_seg+0x27c>)
 800f478:	f004 fc46 	bl	8013d08 <iprintf>
  if (p != NULL) {
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f482:	6938      	ldr	r0, [r7, #16]
 800f484:	f7fb fc3c 	bl	800ad00 <pbuf_free>
  }

  return ERR_MEM;
 800f488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3724      	adds	r7, #36	; 0x24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd90      	pop	{r4, r7, pc}
 800f494:	080167dc 	.word	0x080167dc
 800f498:	08016b70 	.word	0x08016b70
 800f49c:	08016830 	.word	0x08016830
 800f4a0:	08016b94 	.word	0x08016b94
 800f4a4:	08016bb8 	.word	0x08016bb8
 800f4a8:	08016bc8 	.word	0x08016bc8
 800f4ac:	08016bd8 	.word	0x08016bd8

0800f4b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f4b0:	b590      	push	{r4, r7, lr}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d106      	bne.n	800f4cc <tcp_send_fin+0x1c>
 800f4be:	4b21      	ldr	r3, [pc, #132]	; (800f544 <tcp_send_fin+0x94>)
 800f4c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f4c4:	4920      	ldr	r1, [pc, #128]	; (800f548 <tcp_send_fin+0x98>)
 800f4c6:	4821      	ldr	r0, [pc, #132]	; (800f54c <tcp_send_fin+0x9c>)
 800f4c8:	f004 fc1e 	bl	8013d08 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d02e      	beq.n	800f532 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d8:	60fb      	str	r3, [r7, #12]
 800f4da:	e002      	b.n	800f4e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1f8      	bne.n	800f4dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	899b      	ldrh	r3, [r3, #12]
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fa f8a6 	bl	8009644 <lwip_htons>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	f003 0307 	and.w	r3, r3, #7
 800f500:	2b00      	cmp	r3, #0
 800f502:	d116      	bne.n	800f532 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	899b      	ldrh	r3, [r3, #12]
 800f50a:	b29c      	uxth	r4, r3
 800f50c:	2001      	movs	r0, #1
 800f50e:	f7fa f899 	bl	8009644 <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	461a      	mov	r2, r3
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	4322      	orrs	r2, r4
 800f51c:	b292      	uxth	r2, r2
 800f51e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	8b5b      	ldrh	r3, [r3, #26]
 800f524:	f043 0320 	orr.w	r3, r3, #32
 800f528:	b29a      	uxth	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	e004      	b.n	800f53c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f532:	2101      	movs	r1, #1
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f80b 	bl	800f550 <tcp_enqueue_flags>
 800f53a:	4603      	mov	r3, r0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	bd90      	pop	{r4, r7, pc}
 800f544:	080167dc 	.word	0x080167dc
 800f548:	08016be4 	.word	0x08016be4
 800f54c:	08016830 	.word	0x08016830

0800f550 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08a      	sub	sp, #40	; 0x28
 800f554:	af02      	add	r7, sp, #8
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	f003 0303 	and.w	r3, r3, #3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d106      	bne.n	800f57c <tcp_enqueue_flags+0x2c>
 800f56e:	4b67      	ldr	r3, [pc, #412]	; (800f70c <tcp_enqueue_flags+0x1bc>)
 800f570:	f240 4211 	movw	r2, #1041	; 0x411
 800f574:	4966      	ldr	r1, [pc, #408]	; (800f710 <tcp_enqueue_flags+0x1c0>)
 800f576:	4867      	ldr	r0, [pc, #412]	; (800f714 <tcp_enqueue_flags+0x1c4>)
 800f578:	f004 fbc6 	bl	8013d08 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <tcp_enqueue_flags+0x40>
 800f582:	4b62      	ldr	r3, [pc, #392]	; (800f70c <tcp_enqueue_flags+0x1bc>)
 800f584:	f240 4213 	movw	r2, #1043	; 0x413
 800f588:	4963      	ldr	r1, [pc, #396]	; (800f718 <tcp_enqueue_flags+0x1c8>)
 800f58a:	4862      	ldr	r0, [pc, #392]	; (800f714 <tcp_enqueue_flags+0x1c4>)
 800f58c:	f004 fbbc 	bl	8013d08 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f590:	78fb      	ldrb	r3, [r7, #3]
 800f592:	f003 0302 	and.w	r3, r3, #2
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f59a:	2301      	movs	r3, #1
 800f59c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f59e:	7ffb      	ldrb	r3, [r7, #31]
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	f003 0304 	and.w	r3, r3, #4
 800f5a8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	2036      	movs	r0, #54	; 0x36
 800f5b6:	f7fb f8bf 	bl	800a738 <pbuf_alloc>
 800f5ba:	6138      	str	r0, [r7, #16]
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d109      	bne.n	800f5d6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8b5b      	ldrh	r3, [r3, #26]
 800f5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d4:	e095      	b.n	800f702 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	895a      	ldrh	r2, [r3, #10]
 800f5da:	7dfb      	ldrb	r3, [r7, #23]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d206      	bcs.n	800f5f0 <tcp_enqueue_flags+0xa0>
 800f5e2:	4b4a      	ldr	r3, [pc, #296]	; (800f70c <tcp_enqueue_flags+0x1bc>)
 800f5e4:	f240 4239 	movw	r2, #1081	; 0x439
 800f5e8:	494c      	ldr	r1, [pc, #304]	; (800f71c <tcp_enqueue_flags+0x1cc>)
 800f5ea:	484a      	ldr	r0, [pc, #296]	; (800f714 <tcp_enqueue_flags+0x1c4>)
 800f5ec:	f004 fb8c 	bl	8013d08 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f5f4:	78fa      	ldrb	r2, [r7, #3]
 800f5f6:	7ffb      	ldrb	r3, [r7, #31]
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	6939      	ldr	r1, [r7, #16]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7ff fd70 	bl	800f0e4 <tcp_create_segment>
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d109      	bne.n	800f620 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8b5b      	ldrh	r3, [r3, #26]
 800f610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f614:	b29a      	uxth	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f61a:	f04f 33ff 	mov.w	r3, #4294967295
 800f61e:	e070      	b.n	800f702 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	f003 0303 	and.w	r3, r3, #3
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d006      	beq.n	800f63a <tcp_enqueue_flags+0xea>
 800f62c:	4b37      	ldr	r3, [pc, #220]	; (800f70c <tcp_enqueue_flags+0x1bc>)
 800f62e:	f240 4242 	movw	r2, #1090	; 0x442
 800f632:	493b      	ldr	r1, [pc, #236]	; (800f720 <tcp_enqueue_flags+0x1d0>)
 800f634:	4837      	ldr	r0, [pc, #220]	; (800f714 <tcp_enqueue_flags+0x1c4>)
 800f636:	f004 fb67 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	891b      	ldrh	r3, [r3, #8]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d006      	beq.n	800f650 <tcp_enqueue_flags+0x100>
 800f642:	4b32      	ldr	r3, [pc, #200]	; (800f70c <tcp_enqueue_flags+0x1bc>)
 800f644:	f240 4243 	movw	r2, #1091	; 0x443
 800f648:	4936      	ldr	r1, [pc, #216]	; (800f724 <tcp_enqueue_flags+0x1d4>)
 800f64a:	4832      	ldr	r0, [pc, #200]	; (800f714 <tcp_enqueue_flags+0x1c4>)
 800f64c:	f004 fb5c 	bl	8013d08 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f654:	2b00      	cmp	r3, #0
 800f656:	d103      	bne.n	800f660 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f65e:	e00d      	b.n	800f67c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	61bb      	str	r3, [r7, #24]
 800f666:	e002      	b.n	800f66e <tcp_enqueue_flags+0x11e>
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	61bb      	str	r3, [r7, #24]
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1f8      	bne.n	800f668 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	f003 0302 	and.w	r3, r3, #2
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d104      	bne.n	800f698 <tcp_enqueue_flags+0x148>
 800f68e:	78fb      	ldrb	r3, [r7, #3]
 800f690:	f003 0301 	and.w	r3, r3, #1
 800f694:	2b00      	cmp	r3, #0
 800f696:	d004      	beq.n	800f6a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f6a2:	78fb      	ldrb	r3, [r7, #3]
 800f6a4:	f003 0301 	and.w	r3, r3, #1
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d006      	beq.n	800f6ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8b5b      	ldrh	r3, [r3, #26]
 800f6b0:	f043 0320 	orr.w	r3, r3, #32
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fb fba6 	bl	800ae10 <pbuf_clen>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6ce:	4413      	add	r3, r2
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00e      	beq.n	800f700 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d10a      	bne.n	800f700 <tcp_enqueue_flags+0x1b0>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d106      	bne.n	800f700 <tcp_enqueue_flags+0x1b0>
 800f6f2:	4b06      	ldr	r3, [pc, #24]	; (800f70c <tcp_enqueue_flags+0x1bc>)
 800f6f4:	f240 4265 	movw	r2, #1125	; 0x465
 800f6f8:	490b      	ldr	r1, [pc, #44]	; (800f728 <tcp_enqueue_flags+0x1d8>)
 800f6fa:	4806      	ldr	r0, [pc, #24]	; (800f714 <tcp_enqueue_flags+0x1c4>)
 800f6fc:	f004 fb04 	bl	8013d08 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3720      	adds	r7, #32
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	080167dc 	.word	0x080167dc
 800f710:	08016c00 	.word	0x08016c00
 800f714:	08016830 	.word	0x08016830
 800f718:	08016c58 	.word	0x08016c58
 800f71c:	08016c78 	.word	0x08016c78
 800f720:	08016cb4 	.word	0x08016cb4
 800f724:	08016ccc 	.word	0x08016ccc
 800f728:	08016cf8 	.word	0x08016cf8

0800f72c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f72c:	b5b0      	push	{r4, r5, r7, lr}
 800f72e:	b08a      	sub	sp, #40	; 0x28
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <tcp_output+0x1c>
 800f73a:	4b8a      	ldr	r3, [pc, #552]	; (800f964 <tcp_output+0x238>)
 800f73c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f740:	4989      	ldr	r1, [pc, #548]	; (800f968 <tcp_output+0x23c>)
 800f742:	488a      	ldr	r0, [pc, #552]	; (800f96c <tcp_output+0x240>)
 800f744:	f004 fae0 	bl	8013d08 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d106      	bne.n	800f75e <tcp_output+0x32>
 800f750:	4b84      	ldr	r3, [pc, #528]	; (800f964 <tcp_output+0x238>)
 800f752:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f756:	4986      	ldr	r1, [pc, #536]	; (800f970 <tcp_output+0x244>)
 800f758:	4884      	ldr	r0, [pc, #528]	; (800f96c <tcp_output+0x240>)
 800f75a:	f004 fad5 	bl	8013d08 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f75e:	4b85      	ldr	r3, [pc, #532]	; (800f974 <tcp_output+0x248>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	429a      	cmp	r2, r3
 800f766:	d101      	bne.n	800f76c <tcp_output+0x40>
    return ERR_OK;
 800f768:	2300      	movs	r3, #0
 800f76a:	e1ce      	b.n	800fb0a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f778:	4293      	cmp	r3, r2
 800f77a:	bf28      	it	cs
 800f77c:	4613      	movcs	r3, r2
 800f77e:	b29b      	uxth	r3, r3
 800f780:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f786:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10b      	bne.n	800f7a6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	8b5b      	ldrh	r3, [r3, #26]
 800f792:	f003 0302 	and.w	r3, r3, #2
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 81aa 	beq.w	800faf0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fdcb 	bl	8010338 <tcp_send_empty_ack>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	e1b1      	b.n	800fb0a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f7a6:	6879      	ldr	r1, [r7, #4]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7ff fc7c 	bl	800f0ac <tcp_route>
 800f7b4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d102      	bne.n	800f7c2 <tcp_output+0x96>
    return ERR_RTE;
 800f7bc:	f06f 0303 	mvn.w	r3, #3
 800f7c0:	e1a3      	b.n	800fb0a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d003      	beq.n	800f7d0 <tcp_output+0xa4>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d111      	bne.n	800f7f4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d002      	beq.n	800f7dc <tcp_output+0xb0>
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	3304      	adds	r3, #4
 800f7da:	e000      	b.n	800f7de <tcp_output+0xb2>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d102      	bne.n	800f7ec <tcp_output+0xc0>
      return ERR_RTE;
 800f7e6:	f06f 0303 	mvn.w	r3, #3
 800f7ea:	e18e      	b.n	800fb0a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7f9 ff37 	bl	800966e <lwip_htonl>
 800f800:	4602      	mov	r2, r0
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80a:	8912      	ldrh	r2, [r2, #8]
 800f80c:	4413      	add	r3, r2
 800f80e:	69ba      	ldr	r2, [r7, #24]
 800f810:	429a      	cmp	r2, r3
 800f812:	d227      	bcs.n	800f864 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f81a:	461a      	mov	r2, r3
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	4293      	cmp	r3, r2
 800f820:	d114      	bne.n	800f84c <tcp_output+0x120>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f826:	2b00      	cmp	r3, #0
 800f828:	d110      	bne.n	800f84c <tcp_output+0x120>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10b      	bne.n	800f84c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	8b5b      	ldrh	r3, [r3, #26]
 800f850:	f003 0302 	and.w	r3, r3, #2
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 814d 	beq.w	800faf4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 fd6c 	bl	8010338 <tcp_send_empty_ack>
 800f860:	4603      	mov	r3, r0
 800f862:	e152      	b.n	800fb0a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f870:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 811c 	beq.w	800fab2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f87a:	e002      	b.n	800f882 <tcp_output+0x156>
 800f87c:	6a3b      	ldr	r3, [r7, #32]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	623b      	str	r3, [r7, #32]
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1f8      	bne.n	800f87c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f88a:	e112      	b.n	800fab2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	899b      	ldrh	r3, [r3, #12]
 800f892:	b29b      	uxth	r3, r3
 800f894:	4618      	mov	r0, r3
 800f896:	f7f9 fed5 	bl	8009644 <lwip_htons>
 800f89a:	4603      	mov	r3, r0
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	f003 0304 	and.w	r3, r3, #4
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d006      	beq.n	800f8b4 <tcp_output+0x188>
 800f8a6:	4b2f      	ldr	r3, [pc, #188]	; (800f964 <tcp_output+0x238>)
 800f8a8:	f240 5236 	movw	r2, #1334	; 0x536
 800f8ac:	4932      	ldr	r1, [pc, #200]	; (800f978 <tcp_output+0x24c>)
 800f8ae:	482f      	ldr	r0, [pc, #188]	; (800f96c <tcp_output+0x240>)
 800f8b0:	f004 fa2a 	bl	8013d08 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d01f      	beq.n	800f8fc <tcp_output+0x1d0>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	8b5b      	ldrh	r3, [r3, #26]
 800f8c0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d119      	bne.n	800f8fc <tcp_output+0x1d0>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00b      	beq.n	800f8e8 <tcp_output+0x1bc>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d110      	bne.n	800f8fc <tcp_output+0x1d0>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8de:	891a      	ldrh	r2, [r3, #8]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d209      	bcs.n	800f8fc <tcp_output+0x1d0>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d004      	beq.n	800f8fc <tcp_output+0x1d0>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8f8:	2b08      	cmp	r3, #8
 800f8fa:	d901      	bls.n	800f900 <tcp_output+0x1d4>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e000      	b.n	800f902 <tcp_output+0x1d6>
 800f900:	2300      	movs	r3, #0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d106      	bne.n	800f914 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	8b5b      	ldrh	r3, [r3, #26]
 800f90a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f000 80e4 	beq.w	800fadc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7d1b      	ldrb	r3, [r3, #20]
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d00d      	beq.n	800f938 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	899b      	ldrh	r3, [r3, #12]
 800f922:	b29c      	uxth	r4, r3
 800f924:	2010      	movs	r0, #16
 800f926:	f7f9 fe8d 	bl	8009644 <lwip_htons>
 800f92a:	4603      	mov	r3, r0
 800f92c:	461a      	mov	r2, r3
 800f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	4322      	orrs	r2, r4
 800f934:	b292      	uxth	r2, r2
 800f936:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f938:	697a      	ldr	r2, [r7, #20]
 800f93a:	6879      	ldr	r1, [r7, #4]
 800f93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f93e:	f000 f909 	bl	800fb54 <tcp_output_segment>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d016      	beq.n	800f97c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	8b5b      	ldrh	r3, [r3, #26]
 800f952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f956:	b29a      	uxth	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	835a      	strh	r2, [r3, #26]
      return err;
 800f95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f960:	e0d3      	b.n	800fb0a <tcp_output+0x3de>
 800f962:	bf00      	nop
 800f964:	080167dc 	.word	0x080167dc
 800f968:	08016d20 	.word	0x08016d20
 800f96c:	08016830 	.word	0x08016830
 800f970:	08016d38 	.word	0x08016d38
 800f974:	20008cc8 	.word	0x20008cc8
 800f978:	08016d60 	.word	0x08016d60
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	7d1b      	ldrb	r3, [r3, #20]
 800f988:	2b02      	cmp	r3, #2
 800f98a:	d006      	beq.n	800f99a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	8b5b      	ldrh	r3, [r3, #26]
 800f990:	f023 0303 	bic.w	r3, r3, #3
 800f994:	b29a      	uxth	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7f9 fe64 	bl	800966e <lwip_htonl>
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9aa:	891b      	ldrh	r3, [r3, #8]
 800f9ac:	461d      	mov	r5, r3
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	899b      	ldrh	r3, [r3, #12]
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f9 fe44 	bl	8009644 <lwip_htons>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	f003 0303 	and.w	r3, r3, #3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <tcp_output+0x2a0>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e000      	b.n	800f9ce <tcp_output+0x2a2>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	442b      	add	r3, r5
 800f9d0:	4423      	add	r3, r4
 800f9d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	da02      	bge.n	800f9e6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e8:	891b      	ldrh	r3, [r3, #8]
 800f9ea:	461c      	mov	r4, r3
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	899b      	ldrh	r3, [r3, #12]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f9 fe25 	bl	8009644 <lwip_htons>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	f003 0303 	and.w	r3, r3, #3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <tcp_output+0x2de>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e000      	b.n	800fa0c <tcp_output+0x2e0>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	4423      	add	r3, r4
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d049      	beq.n	800faa6 <tcp_output+0x37a>
      seg->next = NULL;
 800fa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa14:	2200      	movs	r2, #0
 800fa16:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d105      	bne.n	800fa2c <tcp_output+0x300>
        pcb->unacked = seg;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa24:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa28:	623b      	str	r3, [r7, #32]
 800fa2a:	e03f      	b.n	800faac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7f9 fe1b 	bl	800966e <lwip_htonl>
 800fa38:	4604      	mov	r4, r0
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7f9 fe14 	bl	800966e <lwip_htonl>
 800fa46:	4603      	mov	r3, r0
 800fa48:	1ae3      	subs	r3, r4, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	da24      	bge.n	800fa98 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3370      	adds	r3, #112	; 0x70
 800fa52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fa54:	e002      	b.n	800fa5c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d011      	beq.n	800fa88 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f9 fdfe 	bl	800966e <lwip_htonl>
 800fa72:	4604      	mov	r4, r0
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7f9 fdf7 	bl	800966e <lwip_htonl>
 800fa80:	4603      	mov	r3, r0
 800fa82:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	dbe6      	blt.n	800fa56 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa94:	601a      	str	r2, [r3, #0]
 800fa96:	e009      	b.n	800faac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa9c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fa9e:	6a3b      	ldr	r3, [r7, #32]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	623b      	str	r3, [r7, #32]
 800faa4:	e002      	b.n	800faac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800faa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faa8:	f7fc fc3f 	bl	800c32a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fab0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d012      	beq.n	800fade <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7f9 fdd5 	bl	800966e <lwip_htonl>
 800fac4:	4602      	mov	r2, r0
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800face:	8912      	ldrh	r2, [r2, #8]
 800fad0:	4413      	add	r3, r2
  while (seg != NULL &&
 800fad2:	69ba      	ldr	r2, [r7, #24]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	f4bf aed9 	bcs.w	800f88c <tcp_output+0x160>
 800fada:	e000      	b.n	800fade <tcp_output+0x3b2>
      break;
 800fadc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d108      	bne.n	800faf8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800faee:	e004      	b.n	800fafa <tcp_output+0x3ce>
    goto output_done;
 800faf0:	bf00      	nop
 800faf2:	e002      	b.n	800fafa <tcp_output+0x3ce>
    goto output_done;
 800faf4:	bf00      	nop
 800faf6:	e000      	b.n	800fafa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800faf8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	8b5b      	ldrh	r3, [r3, #26]
 800fafe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3728      	adds	r7, #40	; 0x28
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bdb0      	pop	{r4, r5, r7, pc}
 800fb12:	bf00      	nop

0800fb14 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d106      	bne.n	800fb30 <tcp_output_segment_busy+0x1c>
 800fb22:	4b09      	ldr	r3, [pc, #36]	; (800fb48 <tcp_output_segment_busy+0x34>)
 800fb24:	f240 529a 	movw	r2, #1434	; 0x59a
 800fb28:	4908      	ldr	r1, [pc, #32]	; (800fb4c <tcp_output_segment_busy+0x38>)
 800fb2a:	4809      	ldr	r0, [pc, #36]	; (800fb50 <tcp_output_segment_busy+0x3c>)
 800fb2c:	f004 f8ec 	bl	8013d08 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	7b9b      	ldrb	r3, [r3, #14]
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d001      	beq.n	800fb3e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	e000      	b.n	800fb40 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	080167dc 	.word	0x080167dc
 800fb4c:	08016d78 	.word	0x08016d78
 800fb50:	08016830 	.word	0x08016830

0800fb54 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fb54:	b5b0      	push	{r4, r5, r7, lr}
 800fb56:	b08c      	sub	sp, #48	; 0x30
 800fb58:	af04      	add	r7, sp, #16
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <tcp_output_segment+0x20>
 800fb66:	4b63      	ldr	r3, [pc, #396]	; (800fcf4 <tcp_output_segment+0x1a0>)
 800fb68:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fb6c:	4962      	ldr	r1, [pc, #392]	; (800fcf8 <tcp_output_segment+0x1a4>)
 800fb6e:	4863      	ldr	r0, [pc, #396]	; (800fcfc <tcp_output_segment+0x1a8>)
 800fb70:	f004 f8ca 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d106      	bne.n	800fb88 <tcp_output_segment+0x34>
 800fb7a:	4b5e      	ldr	r3, [pc, #376]	; (800fcf4 <tcp_output_segment+0x1a0>)
 800fb7c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fb80:	495f      	ldr	r1, [pc, #380]	; (800fd00 <tcp_output_segment+0x1ac>)
 800fb82:	485e      	ldr	r0, [pc, #376]	; (800fcfc <tcp_output_segment+0x1a8>)
 800fb84:	f004 f8c0 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d106      	bne.n	800fb9c <tcp_output_segment+0x48>
 800fb8e:	4b59      	ldr	r3, [pc, #356]	; (800fcf4 <tcp_output_segment+0x1a0>)
 800fb90:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800fb94:	495b      	ldr	r1, [pc, #364]	; (800fd04 <tcp_output_segment+0x1b0>)
 800fb96:	4859      	ldr	r0, [pc, #356]	; (800fcfc <tcp_output_segment+0x1a8>)
 800fb98:	f004 f8b6 	bl	8013d08 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff ffb9 	bl	800fb14 <tcp_output_segment_busy>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d001      	beq.n	800fbac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	e09f      	b.n	800fcec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	68dc      	ldr	r4, [r3, #12]
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	f7f9 fd5a 	bl	800966e <lwip_htonl>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	68dc      	ldr	r4, [r3, #12]
 800fbc6:	4610      	mov	r0, r2
 800fbc8:	f7f9 fd3c 	bl	8009644 <lwip_htons>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd4:	68ba      	ldr	r2, [r7, #8]
 800fbd6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fbd8:	441a      	add	r2, r3
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	3314      	adds	r3, #20
 800fbe4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	7a9b      	ldrb	r3, [r3, #10]
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d015      	beq.n	800fc1e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	6879      	ldr	r1, [r7, #4]
 800fbfa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fbfe:	f7fc fe8b 	bl	800c918 <tcp_eff_send_mss_netif>
 800fc02:	4603      	mov	r3, r0
 800fc04:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fc06:	8b7b      	ldrh	r3, [r7, #26]
 800fc08:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f9 fd2e 	bl	800966e <lwip_htonl>
 800fc12:	4602      	mov	r2, r0
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	da02      	bge.n	800fc2e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d10c      	bne.n	800fc50 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fc36:	4b34      	ldr	r3, [pc, #208]	; (800fd08 <tcp_output_segment+0x1b4>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f9 fd12 	bl	800966e <lwip_htonl>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	8959      	ldrh	r1, [r3, #10]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	8b3a      	ldrh	r2, [r7, #24]
 800fc6a:	1a8a      	subs	r2, r1, r2
 800fc6c:	b292      	uxth	r2, r2
 800fc6e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	8919      	ldrh	r1, [r3, #8]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	8b3a      	ldrh	r2, [r7, #24]
 800fc7c:	1a8a      	subs	r2, r1, r2
 800fc7e:	b292      	uxth	r2, r2
 800fc80:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	68d2      	ldr	r2, [r2, #12]
 800fc8a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	2200      	movs	r2, #0
 800fc92:	741a      	strb	r2, [r3, #16]
 800fc94:	2200      	movs	r2, #0
 800fc96:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	f103 0214 	add.w	r2, r3, #20
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	7a9b      	ldrb	r3, [r3, #10]
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	f003 0304 	and.w	r3, r3, #4
 800fcaa:	4413      	add	r3, r2
 800fcac:	69fa      	ldr	r2, [r7, #28]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d006      	beq.n	800fcc0 <tcp_output_segment+0x16c>
 800fcb2:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <tcp_output_segment+0x1a0>)
 800fcb4:	f240 621c 	movw	r2, #1564	; 0x61c
 800fcb8:	4914      	ldr	r1, [pc, #80]	; (800fd0c <tcp_output_segment+0x1b8>)
 800fcba:	4810      	ldr	r0, [pc, #64]	; (800fcfc <tcp_output_segment+0x1a8>)
 800fcbc:	f004 f824 	bl	8013d08 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6858      	ldr	r0, [r3, #4]
 800fcc4:	68b9      	ldr	r1, [r7, #8]
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	1d1c      	adds	r4, r3, #4
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	7add      	ldrb	r5, [r3, #11]
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	7a9b      	ldrb	r3, [r3, #10]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	9202      	str	r2, [sp, #8]
 800fcd6:	2206      	movs	r2, #6
 800fcd8:	9201      	str	r2, [sp, #4]
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	462b      	mov	r3, r5
 800fcde:	4622      	mov	r2, r4
 800fce0:	f002 fdf0 	bl	80128c4 <ip4_output_if>
 800fce4:	4603      	mov	r3, r0
 800fce6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3720      	adds	r7, #32
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bdb0      	pop	{r4, r5, r7, pc}
 800fcf4:	080167dc 	.word	0x080167dc
 800fcf8:	08016da0 	.word	0x08016da0
 800fcfc:	08016830 	.word	0x08016830
 800fd00:	08016dc0 	.word	0x08016dc0
 800fd04:	08016de0 	.word	0x08016de0
 800fd08:	20008c7c 	.word	0x20008c7c
 800fd0c:	08016e04 	.word	0x08016e04

0800fd10 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fd10:	b5b0      	push	{r4, r5, r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d106      	bne.n	800fd2c <tcp_rexmit_rto_prepare+0x1c>
 800fd1e:	4b31      	ldr	r3, [pc, #196]	; (800fde4 <tcp_rexmit_rto_prepare+0xd4>)
 800fd20:	f240 6263 	movw	r2, #1635	; 0x663
 800fd24:	4930      	ldr	r1, [pc, #192]	; (800fde8 <tcp_rexmit_rto_prepare+0xd8>)
 800fd26:	4831      	ldr	r0, [pc, #196]	; (800fdec <tcp_rexmit_rto_prepare+0xdc>)
 800fd28:	f003 ffee 	bl	8013d08 <iprintf>

  if (pcb->unacked == NULL) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d102      	bne.n	800fd3a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fd34:	f06f 0305 	mvn.w	r3, #5
 800fd38:	e050      	b.n	800fddc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	e00b      	b.n	800fd5a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f7ff fee6 	bl	800fb14 <tcp_output_segment_busy>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d002      	beq.n	800fd54 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fd4e:	f06f 0305 	mvn.w	r3, #5
 800fd52:	e043      	b.n	800fddc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1ef      	bne.n	800fd42 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff fed6 	bl	800fb14 <tcp_output_segment_busy>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fd6e:	f06f 0305 	mvn.w	r3, #5
 800fd72:	e033      	b.n	800fddc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	8b5b      	ldrh	r3, [r3, #26]
 800fd8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7f9 fc65 	bl	800966e <lwip_htonl>
 800fda4:	4604      	mov	r4, r0
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	891b      	ldrh	r3, [r3, #8]
 800fdaa:	461d      	mov	r5, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	899b      	ldrh	r3, [r3, #12]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7f9 fc45 	bl	8009644 <lwip_htons>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f003 0303 	and.w	r3, r3, #3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <tcp_rexmit_rto_prepare+0xba>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e000      	b.n	800fdcc <tcp_rexmit_rto_prepare+0xbc>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	442b      	add	r3, r5
 800fdce:	18e2      	adds	r2, r4, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bdb0      	pop	{r4, r5, r7, pc}
 800fde4:	080167dc 	.word	0x080167dc
 800fde8:	08016e18 	.word	0x08016e18
 800fdec:	08016830 	.word	0x08016830

0800fdf0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_rexmit_rto_commit+0x1c>
 800fdfe:	4b0d      	ldr	r3, [pc, #52]	; (800fe34 <tcp_rexmit_rto_commit+0x44>)
 800fe00:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fe04:	490c      	ldr	r1, [pc, #48]	; (800fe38 <tcp_rexmit_rto_commit+0x48>)
 800fe06:	480d      	ldr	r0, [pc, #52]	; (800fe3c <tcp_rexmit_rto_commit+0x4c>)
 800fe08:	f003 ff7e 	bl	8013d08 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe12:	2bff      	cmp	r3, #255	; 0xff
 800fe14:	d007      	beq.n	800fe26 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff fc80 	bl	800f72c <tcp_output>
}
 800fe2c:	bf00      	nop
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	080167dc 	.word	0x080167dc
 800fe38:	08016e3c 	.word	0x08016e3c
 800fe3c:	08016830 	.word	0x08016830

0800fe40 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d106      	bne.n	800fe5c <tcp_rexmit_rto+0x1c>
 800fe4e:	4b0a      	ldr	r3, [pc, #40]	; (800fe78 <tcp_rexmit_rto+0x38>)
 800fe50:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fe54:	4909      	ldr	r1, [pc, #36]	; (800fe7c <tcp_rexmit_rto+0x3c>)
 800fe56:	480a      	ldr	r0, [pc, #40]	; (800fe80 <tcp_rexmit_rto+0x40>)
 800fe58:	f003 ff56 	bl	8013d08 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7ff ff57 	bl	800fd10 <tcp_rexmit_rto_prepare>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d102      	bne.n	800fe6e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff ffc1 	bl	800fdf0 <tcp_rexmit_rto_commit>
  }
}
 800fe6e:	bf00      	nop
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	080167dc 	.word	0x080167dc
 800fe7c:	08016e60 	.word	0x08016e60
 800fe80:	08016830 	.word	0x08016830

0800fe84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fe84:	b590      	push	{r4, r7, lr}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d106      	bne.n	800fea0 <tcp_rexmit+0x1c>
 800fe92:	4b2f      	ldr	r3, [pc, #188]	; (800ff50 <tcp_rexmit+0xcc>)
 800fe94:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fe98:	492e      	ldr	r1, [pc, #184]	; (800ff54 <tcp_rexmit+0xd0>)
 800fe9a:	482f      	ldr	r0, [pc, #188]	; (800ff58 <tcp_rexmit+0xd4>)
 800fe9c:	f003 ff34 	bl	8013d08 <iprintf>

  if (pcb->unacked == NULL) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d102      	bne.n	800feae <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fea8:	f06f 0305 	mvn.w	r3, #5
 800feac:	e04c      	b.n	800ff48 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feb2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800feb4:	68b8      	ldr	r0, [r7, #8]
 800feb6:	f7ff fe2d 	bl	800fb14 <tcp_output_segment_busy>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fec0:	f06f 0305 	mvn.w	r3, #5
 800fec4:	e040      	b.n	800ff48 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	336c      	adds	r3, #108	; 0x6c
 800fed2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fed4:	e002      	b.n	800fedc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d011      	beq.n	800ff08 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	4618      	mov	r0, r3
 800feee:	f7f9 fbbe 	bl	800966e <lwip_htonl>
 800fef2:	4604      	mov	r4, r0
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7f9 fbb7 	bl	800966e <lwip_htonl>
 800ff00:	4603      	mov	r3, r0
 800ff02:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	dbe6      	blt.n	800fed6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d103      	bne.n	800ff26 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff2c:	2bff      	cmp	r3, #255	; 0xff
 800ff2e:	d007      	beq.n	800ff40 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff36:	3301      	adds	r3, #1
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ff46:	2300      	movs	r3, #0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3714      	adds	r7, #20
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd90      	pop	{r4, r7, pc}
 800ff50:	080167dc 	.word	0x080167dc
 800ff54:	08016e7c 	.word	0x08016e7c
 800ff58:	08016830 	.word	0x08016830

0800ff5c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d106      	bne.n	800ff78 <tcp_rexmit_fast+0x1c>
 800ff6a:	4b2a      	ldr	r3, [pc, #168]	; (8010014 <tcp_rexmit_fast+0xb8>)
 800ff6c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ff70:	4929      	ldr	r1, [pc, #164]	; (8010018 <tcp_rexmit_fast+0xbc>)
 800ff72:	482a      	ldr	r0, [pc, #168]	; (801001c <tcp_rexmit_fast+0xc0>)
 800ff74:	f003 fec8 	bl	8013d08 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d045      	beq.n	801000c <tcp_rexmit_fast+0xb0>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	8b5b      	ldrh	r3, [r3, #26]
 800ff84:	f003 0304 	and.w	r3, r3, #4
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d13f      	bne.n	801000c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7ff ff79 	bl	800fe84 <tcp_rexmit>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d139      	bne.n	801000c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	bf28      	it	cs
 800ffa8:	4613      	movcs	r3, r2
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	da00      	bge.n	800ffb2 <tcp_rexmit_fast+0x56>
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	105b      	asrs	r3, r3, #1
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d206      	bcs.n	800ffdc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffd2:	005b      	lsls	r3, r3, #1
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	0049      	lsls	r1, r1, #1
 800ffea:	440b      	add	r3, r1
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	4413      	add	r3, r2
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	8b5b      	ldrh	r3, [r3, #26]
 800fffc:	f043 0304 	orr.w	r3, r3, #4
 8010000:	b29a      	uxth	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	080167dc 	.word	0x080167dc
 8010018:	08016e94 	.word	0x08016e94
 801001c:	08016830 	.word	0x08016830

08010020 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	607b      	str	r3, [r7, #4]
 801002a:	460b      	mov	r3, r1
 801002c:	817b      	strh	r3, [r7, #10]
 801002e:	4613      	mov	r3, r2
 8010030:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010032:	897a      	ldrh	r2, [r7, #10]
 8010034:	893b      	ldrh	r3, [r7, #8]
 8010036:	4413      	add	r3, r2
 8010038:	b29b      	uxth	r3, r3
 801003a:	3314      	adds	r3, #20
 801003c:	b29b      	uxth	r3, r3
 801003e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010042:	4619      	mov	r1, r3
 8010044:	2022      	movs	r0, #34	; 0x22
 8010046:	f7fa fb77 	bl	800a738 <pbuf_alloc>
 801004a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d04d      	beq.n	80100ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010052:	897b      	ldrh	r3, [r7, #10]
 8010054:	3313      	adds	r3, #19
 8010056:	697a      	ldr	r2, [r7, #20]
 8010058:	8952      	ldrh	r2, [r2, #10]
 801005a:	4293      	cmp	r3, r2
 801005c:	db06      	blt.n	801006c <tcp_output_alloc_header_common+0x4c>
 801005e:	4b26      	ldr	r3, [pc, #152]	; (80100f8 <tcp_output_alloc_header_common+0xd8>)
 8010060:	f240 7223 	movw	r2, #1827	; 0x723
 8010064:	4925      	ldr	r1, [pc, #148]	; (80100fc <tcp_output_alloc_header_common+0xdc>)
 8010066:	4826      	ldr	r0, [pc, #152]	; (8010100 <tcp_output_alloc_header_common+0xe0>)
 8010068:	f003 fe4e 	bl	8013d08 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010072:	8c3b      	ldrh	r3, [r7, #32]
 8010074:	4618      	mov	r0, r3
 8010076:	f7f9 fae5 	bl	8009644 <lwip_htons>
 801007a:	4603      	mov	r3, r0
 801007c:	461a      	mov	r2, r3
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010084:	4618      	mov	r0, r3
 8010086:	f7f9 fadd 	bl	8009644 <lwip_htons>
 801008a:	4603      	mov	r3, r0
 801008c:	461a      	mov	r2, r3
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f7f9 fae8 	bl	800966e <lwip_htonl>
 801009e:	4602      	mov	r2, r0
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80100a4:	897b      	ldrh	r3, [r7, #10]
 80100a6:	089b      	lsrs	r3, r3, #2
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	3305      	adds	r3, #5
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	031b      	lsls	r3, r3, #12
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4313      	orrs	r3, r2
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	4618      	mov	r0, r3
 80100be:	f7f9 fac1 	bl	8009644 <lwip_htons>
 80100c2:	4603      	mov	r3, r0
 80100c4:	461a      	mov	r2, r3
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80100ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7f9 fab9 	bl	8009644 <lwip_htons>
 80100d2:	4603      	mov	r3, r0
 80100d4:	461a      	mov	r2, r3
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	2200      	movs	r2, #0
 80100de:	741a      	strb	r2, [r3, #16]
 80100e0:	2200      	movs	r2, #0
 80100e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	2200      	movs	r2, #0
 80100e8:	749a      	strb	r2, [r3, #18]
 80100ea:	2200      	movs	r2, #0
 80100ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80100ee:	697b      	ldr	r3, [r7, #20]
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3718      	adds	r7, #24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	080167dc 	.word	0x080167dc
 80100fc:	08016eb4 	.word	0x08016eb4
 8010100:	08016830 	.word	0x08016830

08010104 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010104:	b5b0      	push	{r4, r5, r7, lr}
 8010106:	b08a      	sub	sp, #40	; 0x28
 8010108:	af04      	add	r7, sp, #16
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	607b      	str	r3, [r7, #4]
 801010e:	460b      	mov	r3, r1
 8010110:	817b      	strh	r3, [r7, #10]
 8010112:	4613      	mov	r3, r2
 8010114:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d106      	bne.n	801012a <tcp_output_alloc_header+0x26>
 801011c:	4b15      	ldr	r3, [pc, #84]	; (8010174 <tcp_output_alloc_header+0x70>)
 801011e:	f240 7242 	movw	r2, #1858	; 0x742
 8010122:	4915      	ldr	r1, [pc, #84]	; (8010178 <tcp_output_alloc_header+0x74>)
 8010124:	4815      	ldr	r0, [pc, #84]	; (801017c <tcp_output_alloc_header+0x78>)
 8010126:	f003 fdef 	bl	8013d08 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	8adb      	ldrh	r3, [r3, #22]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	8b12      	ldrh	r2, [r2, #24]
 8010136:	68f9      	ldr	r1, [r7, #12]
 8010138:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801013a:	893d      	ldrh	r5, [r7, #8]
 801013c:	897c      	ldrh	r4, [r7, #10]
 801013e:	9103      	str	r1, [sp, #12]
 8010140:	2110      	movs	r1, #16
 8010142:	9102      	str	r1, [sp, #8]
 8010144:	9201      	str	r2, [sp, #4]
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	462a      	mov	r2, r5
 801014c:	4621      	mov	r1, r4
 801014e:	f7ff ff67 	bl	8010020 <tcp_output_alloc_header_common>
 8010152:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d006      	beq.n	8010168 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010162:	441a      	add	r2, r3
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010168:	697b      	ldr	r3, [r7, #20]
}
 801016a:	4618      	mov	r0, r3
 801016c:	3718      	adds	r7, #24
 801016e:	46bd      	mov	sp, r7
 8010170:	bdb0      	pop	{r4, r5, r7, pc}
 8010172:	bf00      	nop
 8010174:	080167dc 	.word	0x080167dc
 8010178:	08016ee4 	.word	0x08016ee4
 801017c:	08016830 	.word	0x08016830

08010180 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b088      	sub	sp, #32
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	4611      	mov	r1, r2
 801018c:	461a      	mov	r2, r3
 801018e:	460b      	mov	r3, r1
 8010190:	71fb      	strb	r3, [r7, #7]
 8010192:	4613      	mov	r3, r2
 8010194:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010196:	2300      	movs	r3, #0
 8010198:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d106      	bne.n	80101ae <tcp_output_fill_options+0x2e>
 80101a0:	4b13      	ldr	r3, [pc, #76]	; (80101f0 <tcp_output_fill_options+0x70>)
 80101a2:	f240 7256 	movw	r2, #1878	; 0x756
 80101a6:	4913      	ldr	r1, [pc, #76]	; (80101f4 <tcp_output_fill_options+0x74>)
 80101a8:	4813      	ldr	r0, [pc, #76]	; (80101f8 <tcp_output_fill_options+0x78>)
 80101aa:	f003 fdad 	bl	8013d08 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	3314      	adds	r3, #20
 80101b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	f103 0214 	add.w	r2, r3, #20
 80101c0:	8bfb      	ldrh	r3, [r7, #30]
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	4619      	mov	r1, r3
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	f003 0304 	and.w	r3, r3, #4
 80101ce:	440b      	add	r3, r1
 80101d0:	4413      	add	r3, r2
 80101d2:	697a      	ldr	r2, [r7, #20]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d006      	beq.n	80101e6 <tcp_output_fill_options+0x66>
 80101d8:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <tcp_output_fill_options+0x70>)
 80101da:	f240 7275 	movw	r2, #1909	; 0x775
 80101de:	4907      	ldr	r1, [pc, #28]	; (80101fc <tcp_output_fill_options+0x7c>)
 80101e0:	4805      	ldr	r0, [pc, #20]	; (80101f8 <tcp_output_fill_options+0x78>)
 80101e2:	f003 fd91 	bl	8013d08 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80101e6:	bf00      	nop
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	080167dc 	.word	0x080167dc
 80101f4:	08016f0c 	.word	0x08016f0c
 80101f8:	08016830 	.word	0x08016830
 80101fc:	08016e04 	.word	0x08016e04

08010200 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08a      	sub	sp, #40	; 0x28
 8010204:	af04      	add	r7, sp, #16
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d106      	bne.n	8010222 <tcp_output_control_segment+0x22>
 8010214:	4b1c      	ldr	r3, [pc, #112]	; (8010288 <tcp_output_control_segment+0x88>)
 8010216:	f240 7287 	movw	r2, #1927	; 0x787
 801021a:	491c      	ldr	r1, [pc, #112]	; (801028c <tcp_output_control_segment+0x8c>)
 801021c:	481c      	ldr	r0, [pc, #112]	; (8010290 <tcp_output_control_segment+0x90>)
 801021e:	f003 fd73 	bl	8013d08 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	6879      	ldr	r1, [r7, #4]
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f7fe ff40 	bl	800f0ac <tcp_route>
 801022c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010234:	23fc      	movs	r3, #252	; 0xfc
 8010236:	75fb      	strb	r3, [r7, #23]
 8010238:	e01c      	b.n	8010274 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d006      	beq.n	801024e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	7adb      	ldrb	r3, [r3, #11]
 8010244:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	7a9b      	ldrb	r3, [r3, #10]
 801024a:	757b      	strb	r3, [r7, #21]
 801024c:	e003      	b.n	8010256 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801024e:	23ff      	movs	r3, #255	; 0xff
 8010250:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010252:	2300      	movs	r3, #0
 8010254:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010256:	7dba      	ldrb	r2, [r7, #22]
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	9302      	str	r3, [sp, #8]
 801025c:	2306      	movs	r3, #6
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	7d7b      	ldrb	r3, [r7, #21]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	4613      	mov	r3, r2
 8010266:	683a      	ldr	r2, [r7, #0]
 8010268:	6879      	ldr	r1, [r7, #4]
 801026a:	68b8      	ldr	r0, [r7, #8]
 801026c:	f002 fb2a 	bl	80128c4 <ip4_output_if>
 8010270:	4603      	mov	r3, r0
 8010272:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010274:	68b8      	ldr	r0, [r7, #8]
 8010276:	f7fa fd43 	bl	800ad00 <pbuf_free>
  return err;
 801027a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	080167dc 	.word	0x080167dc
 801028c:	08016f34 	.word	0x08016f34
 8010290:	08016830 	.word	0x08016830

08010294 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010294:	b590      	push	{r4, r7, lr}
 8010296:	b08b      	sub	sp, #44	; 0x2c
 8010298:	af04      	add	r7, sp, #16
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
 80102a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d106      	bne.n	80102b6 <tcp_rst+0x22>
 80102a8:	4b1f      	ldr	r3, [pc, #124]	; (8010328 <tcp_rst+0x94>)
 80102aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80102ae:	491f      	ldr	r1, [pc, #124]	; (801032c <tcp_rst+0x98>)
 80102b0:	481f      	ldr	r0, [pc, #124]	; (8010330 <tcp_rst+0x9c>)
 80102b2:	f003 fd29 	bl	8013d08 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d106      	bne.n	80102ca <tcp_rst+0x36>
 80102bc:	4b1a      	ldr	r3, [pc, #104]	; (8010328 <tcp_rst+0x94>)
 80102be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80102c2:	491c      	ldr	r1, [pc, #112]	; (8010334 <tcp_rst+0xa0>)
 80102c4:	481a      	ldr	r0, [pc, #104]	; (8010330 <tcp_rst+0x9c>)
 80102c6:	f003 fd1f 	bl	8013d08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80102ca:	2300      	movs	r3, #0
 80102cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80102ce:	f246 0308 	movw	r3, #24584	; 0x6008
 80102d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80102d4:	7dfb      	ldrb	r3, [r7, #23]
 80102d6:	b29c      	uxth	r4, r3
 80102d8:	68b8      	ldr	r0, [r7, #8]
 80102da:	f7f9 f9c8 	bl	800966e <lwip_htonl>
 80102de:	4602      	mov	r2, r0
 80102e0:	8abb      	ldrh	r3, [r7, #20]
 80102e2:	9303      	str	r3, [sp, #12]
 80102e4:	2314      	movs	r3, #20
 80102e6:	9302      	str	r3, [sp, #8]
 80102e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80102ea:	9301      	str	r3, [sp, #4]
 80102ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	4613      	mov	r3, r2
 80102f2:	2200      	movs	r2, #0
 80102f4:	4621      	mov	r1, r4
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff fe92 	bl	8010020 <tcp_output_alloc_header_common>
 80102fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00c      	beq.n	801031e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	2200      	movs	r2, #0
 8010308:	6939      	ldr	r1, [r7, #16]
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f7ff ff38 	bl	8010180 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	6939      	ldr	r1, [r7, #16]
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f7ff ff72 	bl	8010200 <tcp_output_control_segment>
 801031c:	e000      	b.n	8010320 <tcp_rst+0x8c>
    return;
 801031e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010320:	371c      	adds	r7, #28
 8010322:	46bd      	mov	sp, r7
 8010324:	bd90      	pop	{r4, r7, pc}
 8010326:	bf00      	nop
 8010328:	080167dc 	.word	0x080167dc
 801032c:	08016f60 	.word	0x08016f60
 8010330:	08016830 	.word	0x08016830
 8010334:	08016f7c 	.word	0x08016f7c

08010338 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010338:	b590      	push	{r4, r7, lr}
 801033a:	b087      	sub	sp, #28
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010344:	2300      	movs	r3, #0
 8010346:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <tcp_send_empty_ack+0x24>
 801034e:	4b28      	ldr	r3, [pc, #160]	; (80103f0 <tcp_send_empty_ack+0xb8>)
 8010350:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010354:	4927      	ldr	r1, [pc, #156]	; (80103f4 <tcp_send_empty_ack+0xbc>)
 8010356:	4828      	ldr	r0, [pc, #160]	; (80103f8 <tcp_send_empty_ack+0xc0>)
 8010358:	f003 fcd6 	bl	8013d08 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801035c:	7dfb      	ldrb	r3, [r7, #23]
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	b2db      	uxtb	r3, r3
 8010362:	f003 0304 	and.w	r3, r3, #4
 8010366:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010368:	7d7b      	ldrb	r3, [r7, #21]
 801036a:	b29c      	uxth	r4, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010370:	4618      	mov	r0, r3
 8010372:	f7f9 f97c 	bl	800966e <lwip_htonl>
 8010376:	4603      	mov	r3, r0
 8010378:	2200      	movs	r2, #0
 801037a:	4621      	mov	r1, r4
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7ff fec1 	bl	8010104 <tcp_output_alloc_header>
 8010382:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d109      	bne.n	801039e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	8b5b      	ldrh	r3, [r3, #26]
 801038e:	f043 0303 	orr.w	r3, r3, #3
 8010392:	b29a      	uxth	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010398:	f06f 0301 	mvn.w	r3, #1
 801039c:	e023      	b.n	80103e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801039e:	7dbb      	ldrb	r3, [r7, #22]
 80103a0:	7dfa      	ldrb	r2, [r7, #23]
 80103a2:	6939      	ldr	r1, [r7, #16]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff feeb 	bl	8010180 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	3304      	adds	r3, #4
 80103b0:	6939      	ldr	r1, [r7, #16]
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7ff ff24 	bl	8010200 <tcp_output_control_segment>
 80103b8:	4603      	mov	r3, r0
 80103ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80103bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d007      	beq.n	80103d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	8b5b      	ldrh	r3, [r3, #26]
 80103c8:	f043 0303 	orr.w	r3, r3, #3
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	835a      	strh	r2, [r3, #26]
 80103d2:	e006      	b.n	80103e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	8b5b      	ldrh	r3, [r3, #26]
 80103d8:	f023 0303 	bic.w	r3, r3, #3
 80103dc:	b29a      	uxth	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80103e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	371c      	adds	r7, #28
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd90      	pop	{r4, r7, pc}
 80103ee:	bf00      	nop
 80103f0:	080167dc 	.word	0x080167dc
 80103f4:	08016f98 	.word	0x08016f98
 80103f8:	08016830 	.word	0x08016830

080103fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80103fc:	b590      	push	{r4, r7, lr}
 80103fe:	b087      	sub	sp, #28
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010404:	2300      	movs	r3, #0
 8010406:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d106      	bne.n	801041c <tcp_keepalive+0x20>
 801040e:	4b18      	ldr	r3, [pc, #96]	; (8010470 <tcp_keepalive+0x74>)
 8010410:	f640 0224 	movw	r2, #2084	; 0x824
 8010414:	4917      	ldr	r1, [pc, #92]	; (8010474 <tcp_keepalive+0x78>)
 8010416:	4818      	ldr	r0, [pc, #96]	; (8010478 <tcp_keepalive+0x7c>)
 8010418:	f003 fc76 	bl	8013d08 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801041c:	7dfb      	ldrb	r3, [r7, #23]
 801041e:	b29c      	uxth	r4, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010424:	3b01      	subs	r3, #1
 8010426:	4618      	mov	r0, r3
 8010428:	f7f9 f921 	bl	800966e <lwip_htonl>
 801042c:	4603      	mov	r3, r0
 801042e:	2200      	movs	r2, #0
 8010430:	4621      	mov	r1, r4
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff fe66 	bl	8010104 <tcp_output_alloc_header>
 8010438:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d102      	bne.n	8010446 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010440:	f04f 33ff 	mov.w	r3, #4294967295
 8010444:	e010      	b.n	8010468 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010446:	7dfb      	ldrb	r3, [r7, #23]
 8010448:	2200      	movs	r2, #0
 801044a:	6939      	ldr	r1, [r7, #16]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff fe97 	bl	8010180 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	3304      	adds	r3, #4
 8010458:	6939      	ldr	r1, [r7, #16]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff fed0 	bl	8010200 <tcp_output_control_segment>
 8010460:	4603      	mov	r3, r0
 8010462:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010468:	4618      	mov	r0, r3
 801046a:	371c      	adds	r7, #28
 801046c:	46bd      	mov	sp, r7
 801046e:	bd90      	pop	{r4, r7, pc}
 8010470:	080167dc 	.word	0x080167dc
 8010474:	08016fb8 	.word	0x08016fb8
 8010478:	08016830 	.word	0x08016830

0801047c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801047c:	b590      	push	{r4, r7, lr}
 801047e:	b08b      	sub	sp, #44	; 0x2c
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010484:	2300      	movs	r3, #0
 8010486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d106      	bne.n	801049e <tcp_zero_window_probe+0x22>
 8010490:	4b4c      	ldr	r3, [pc, #304]	; (80105c4 <tcp_zero_window_probe+0x148>)
 8010492:	f640 024f 	movw	r2, #2127	; 0x84f
 8010496:	494c      	ldr	r1, [pc, #304]	; (80105c8 <tcp_zero_window_probe+0x14c>)
 8010498:	484c      	ldr	r0, [pc, #304]	; (80105cc <tcp_zero_window_probe+0x150>)
 801049a:	f003 fc35 	bl	8013d08 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80104a4:	6a3b      	ldr	r3, [r7, #32]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80104aa:	2300      	movs	r3, #0
 80104ac:	e086      	b.n	80105bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80104b4:	2bff      	cmp	r3, #255	; 0xff
 80104b6:	d007      	beq.n	80104c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80104be:	3301      	adds	r3, #1
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	899b      	ldrh	r3, [r3, #12]
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f9 f8b7 	bl	8009644 <lwip_htons>
 80104d6:	4603      	mov	r3, r0
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d005      	beq.n	80104ee <tcp_zero_window_probe+0x72>
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	891b      	ldrh	r3, [r3, #8]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <tcp_zero_window_probe+0x72>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <tcp_zero_window_probe+0x74>
 80104ee:	2300      	movs	r3, #0
 80104f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80104f2:	7ffb      	ldrb	r3, [r7, #31]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	bf0c      	ite	eq
 80104f8:	2301      	moveq	r3, #1
 80104fa:	2300      	movne	r3, #0
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010504:	b299      	uxth	r1, r3
 8010506:	6a3b      	ldr	r3, [r7, #32]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	8bba      	ldrh	r2, [r7, #28]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7ff fdf8 	bl	8010104 <tcp_output_alloc_header>
 8010514:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d102      	bne.n	8010522 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801051c:	f04f 33ff 	mov.w	r3, #4294967295
 8010520:	e04c      	b.n	80105bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010528:	7ffb      	ldrb	r3, [r7, #31]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d011      	beq.n	8010552 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	899b      	ldrh	r3, [r3, #12]
 8010532:	b29b      	uxth	r3, r3
 8010534:	b21b      	sxth	r3, r3
 8010536:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801053a:	b21c      	sxth	r4, r3
 801053c:	2011      	movs	r0, #17
 801053e:	f7f9 f881 	bl	8009644 <lwip_htons>
 8010542:	4603      	mov	r3, r0
 8010544:	b21b      	sxth	r3, r3
 8010546:	4323      	orrs	r3, r4
 8010548:	b21b      	sxth	r3, r3
 801054a:	b29a      	uxth	r2, r3
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	819a      	strh	r2, [r3, #12]
 8010550:	e010      	b.n	8010574 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	3314      	adds	r3, #20
 8010558:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801055a:	6a3b      	ldr	r3, [r7, #32]
 801055c:	6858      	ldr	r0, [r3, #4]
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	891a      	ldrh	r2, [r3, #8]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	891b      	ldrh	r3, [r3, #8]
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	b29b      	uxth	r3, r3
 801056c:	2201      	movs	r2, #1
 801056e:	6939      	ldr	r1, [r7, #16]
 8010570:	f7fa fdc0 	bl	800b0f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010574:	6a3b      	ldr	r3, [r7, #32]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	4618      	mov	r0, r3
 801057c:	f7f9 f877 	bl	800966e <lwip_htonl>
 8010580:	4603      	mov	r3, r0
 8010582:	3301      	adds	r3, #1
 8010584:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	da02      	bge.n	8010598 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68fa      	ldr	r2, [r7, #12]
 8010596:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801059c:	2200      	movs	r2, #0
 801059e:	69b9      	ldr	r1, [r7, #24]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff fded 	bl	8010180 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	3304      	adds	r3, #4
 80105ac:	69b9      	ldr	r1, [r7, #24]
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7ff fe26 	bl	8010200 <tcp_output_control_segment>
 80105b4:	4603      	mov	r3, r0
 80105b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80105b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	372c      	adds	r7, #44	; 0x2c
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd90      	pop	{r4, r7, pc}
 80105c4:	080167dc 	.word	0x080167dc
 80105c8:	08016fd4 	.word	0x08016fd4
 80105cc:	08016830 	.word	0x08016830

080105d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80105d8:	f7fa ff0c 	bl	800b3f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80105dc:	4b0a      	ldr	r3, [pc, #40]	; (8010608 <tcpip_tcp_timer+0x38>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d103      	bne.n	80105ec <tcpip_tcp_timer+0x1c>
 80105e4:	4b09      	ldr	r3, [pc, #36]	; (801060c <tcpip_tcp_timer+0x3c>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d005      	beq.n	80105f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80105ec:	2200      	movs	r2, #0
 80105ee:	4908      	ldr	r1, [pc, #32]	; (8010610 <tcpip_tcp_timer+0x40>)
 80105f0:	20fa      	movs	r0, #250	; 0xfa
 80105f2:	f000 f8f3 	bl	80107dc <sys_timeout>
 80105f6:	e003      	b.n	8010600 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80105f8:	4b06      	ldr	r3, [pc, #24]	; (8010614 <tcpip_tcp_timer+0x44>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]
  }
}
 80105fe:	bf00      	nop
 8010600:	bf00      	nop
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	20008c88 	.word	0x20008c88
 801060c:	20008c8c 	.word	0x20008c8c
 8010610:	080105d1 	.word	0x080105d1
 8010614:	20008cd4 	.word	0x20008cd4

08010618 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801061c:	4b0a      	ldr	r3, [pc, #40]	; (8010648 <tcp_timer_needed+0x30>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10f      	bne.n	8010644 <tcp_timer_needed+0x2c>
 8010624:	4b09      	ldr	r3, [pc, #36]	; (801064c <tcp_timer_needed+0x34>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d103      	bne.n	8010634 <tcp_timer_needed+0x1c>
 801062c:	4b08      	ldr	r3, [pc, #32]	; (8010650 <tcp_timer_needed+0x38>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d007      	beq.n	8010644 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010634:	4b04      	ldr	r3, [pc, #16]	; (8010648 <tcp_timer_needed+0x30>)
 8010636:	2201      	movs	r2, #1
 8010638:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801063a:	2200      	movs	r2, #0
 801063c:	4905      	ldr	r1, [pc, #20]	; (8010654 <tcp_timer_needed+0x3c>)
 801063e:	20fa      	movs	r0, #250	; 0xfa
 8010640:	f000 f8cc 	bl	80107dc <sys_timeout>
  }
}
 8010644:	bf00      	nop
 8010646:	bd80      	pop	{r7, pc}
 8010648:	20008cd4 	.word	0x20008cd4
 801064c:	20008c88 	.word	0x20008c88
 8010650:	20008c8c 	.word	0x20008c8c
 8010654:	080105d1 	.word	0x080105d1

08010658 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010664:	2006      	movs	r0, #6
 8010666:	f7f9 fc65 	bl	8009f34 <memp_malloc>
 801066a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d109      	bne.n	8010686 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d151      	bne.n	801071c <sys_timeout_abs+0xc4>
 8010678:	4b2a      	ldr	r3, [pc, #168]	; (8010724 <sys_timeout_abs+0xcc>)
 801067a:	22be      	movs	r2, #190	; 0xbe
 801067c:	492a      	ldr	r1, [pc, #168]	; (8010728 <sys_timeout_abs+0xd0>)
 801067e:	482b      	ldr	r0, [pc, #172]	; (801072c <sys_timeout_abs+0xd4>)
 8010680:	f003 fb42 	bl	8013d08 <iprintf>
    return;
 8010684:	e04a      	b.n	801071c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2200      	movs	r2, #0
 801068a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	68ba      	ldr	r2, [r7, #8]
 8010690:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801069e:	4b24      	ldr	r3, [pc, #144]	; (8010730 <sys_timeout_abs+0xd8>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d103      	bne.n	80106ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80106a6:	4a22      	ldr	r2, [pc, #136]	; (8010730 <sys_timeout_abs+0xd8>)
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	6013      	str	r3, [r2, #0]
    return;
 80106ac:	e037      	b.n	801071e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	685a      	ldr	r2, [r3, #4]
 80106b2:	4b1f      	ldr	r3, [pc, #124]	; (8010730 <sys_timeout_abs+0xd8>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	0fdb      	lsrs	r3, r3, #31
 80106bc:	f003 0301 	and.w	r3, r3, #1
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d007      	beq.n	80106d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80106c6:	4b1a      	ldr	r3, [pc, #104]	; (8010730 <sys_timeout_abs+0xd8>)
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80106ce:	4a18      	ldr	r2, [pc, #96]	; (8010730 <sys_timeout_abs+0xd8>)
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	6013      	str	r3, [r2, #0]
 80106d4:	e023      	b.n	801071e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80106d6:	4b16      	ldr	r3, [pc, #88]	; (8010730 <sys_timeout_abs+0xd8>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	617b      	str	r3, [r7, #20]
 80106dc:	e01a      	b.n	8010714 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00b      	beq.n	80106fe <sys_timeout_abs+0xa6>
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	685a      	ldr	r2, [r3, #4]
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	0fdb      	lsrs	r3, r3, #31
 80106f4:	f003 0301 	and.w	r3, r3, #1
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d007      	beq.n	801070e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	601a      	str	r2, [r3, #0]
        break;
 801070c:	e007      	b.n	801071e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	617b      	str	r3, [r7, #20]
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1e1      	bne.n	80106de <sys_timeout_abs+0x86>
 801071a:	e000      	b.n	801071e <sys_timeout_abs+0xc6>
    return;
 801071c:	bf00      	nop
      }
    }
  }
}
 801071e:	3718      	adds	r7, #24
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	08016ff8 	.word	0x08016ff8
 8010728:	0801702c 	.word	0x0801702c
 801072c:	0801706c 	.word	0x0801706c
 8010730:	20008ccc 	.word	0x20008ccc

08010734 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	4798      	blx	r3

  now = sys_now();
 8010746:	f7f8 fd69 	bl	800921c <sys_now>
 801074a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	4b0f      	ldr	r3, [pc, #60]	; (8010790 <lwip_cyclic_timer+0x5c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4413      	add	r3, r2
 8010756:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	0fdb      	lsrs	r3, r3, #31
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	b2db      	uxtb	r3, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	d009      	beq.n	801077e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	4413      	add	r3, r2
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4907      	ldr	r1, [pc, #28]	; (8010794 <lwip_cyclic_timer+0x60>)
 8010776:	4618      	mov	r0, r3
 8010778:	f7ff ff6e 	bl	8010658 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801077c:	e004      	b.n	8010788 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	4904      	ldr	r1, [pc, #16]	; (8010794 <lwip_cyclic_timer+0x60>)
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f7ff ff68 	bl	8010658 <sys_timeout_abs>
}
 8010788:	bf00      	nop
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	20008cd0 	.word	0x20008cd0
 8010794:	08010735 	.word	0x08010735

08010798 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801079e:	2301      	movs	r3, #1
 80107a0:	607b      	str	r3, [r7, #4]
 80107a2:	e00e      	b.n	80107c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80107a4:	4a0b      	ldr	r2, [pc, #44]	; (80107d4 <sys_timeouts_init+0x3c>)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	4a08      	ldr	r2, [pc, #32]	; (80107d4 <sys_timeouts_init+0x3c>)
 80107b2:	4413      	add	r3, r2
 80107b4:	461a      	mov	r2, r3
 80107b6:	4908      	ldr	r1, [pc, #32]	; (80107d8 <sys_timeouts_init+0x40>)
 80107b8:	f000 f810 	bl	80107dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3301      	adds	r3, #1
 80107c0:	607b      	str	r3, [r7, #4]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d9ed      	bls.n	80107a4 <sys_timeouts_init+0xc>
  }
}
 80107c8:	bf00      	nop
 80107ca:	bf00      	nop
 80107cc:	3708      	adds	r7, #8
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	08017c28 	.word	0x08017c28
 80107d8:	08010735 	.word	0x08010735

080107dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107ee:	d306      	bcc.n	80107fe <sys_timeout+0x22>
 80107f0:	4b0a      	ldr	r3, [pc, #40]	; (801081c <sys_timeout+0x40>)
 80107f2:	f240 1229 	movw	r2, #297	; 0x129
 80107f6:	490a      	ldr	r1, [pc, #40]	; (8010820 <sys_timeout+0x44>)
 80107f8:	480a      	ldr	r0, [pc, #40]	; (8010824 <sys_timeout+0x48>)
 80107fa:	f003 fa85 	bl	8013d08 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80107fe:	f7f8 fd0d 	bl	800921c <sys_now>
 8010802:	4602      	mov	r2, r0
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	4413      	add	r3, r2
 8010808:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	68b9      	ldr	r1, [r7, #8]
 801080e:	6978      	ldr	r0, [r7, #20]
 8010810:	f7ff ff22 	bl	8010658 <sys_timeout_abs>
#endif
}
 8010814:	bf00      	nop
 8010816:	3718      	adds	r7, #24
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	08016ff8 	.word	0x08016ff8
 8010820:	08017094 	.word	0x08017094
 8010824:	0801706c 	.word	0x0801706c

08010828 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801082e:	f7f8 fcf5 	bl	800921c <sys_now>
 8010832:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010834:	4b1a      	ldr	r3, [pc, #104]	; (80108a0 <sys_check_timeouts+0x78>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d001      	beq.n	8010842 <sys_check_timeouts+0x1a>
 801083e:	f7f9 ff25 	bl	800a68c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010842:	4b18      	ldr	r3, [pc, #96]	; (80108a4 <sys_check_timeouts+0x7c>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d022      	beq.n	8010894 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	68fa      	ldr	r2, [r7, #12]
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	0fdb      	lsrs	r3, r3, #31
 8010858:	f003 0301 	and.w	r3, r3, #1
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	d11a      	bne.n	8010898 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a0f      	ldr	r2, [pc, #60]	; (80108a4 <sys_check_timeouts+0x7c>)
 8010868:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	4a0b      	ldr	r2, [pc, #44]	; (80108a8 <sys_check_timeouts+0x80>)
 801087c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801087e:	68b9      	ldr	r1, [r7, #8]
 8010880:	2006      	movs	r0, #6
 8010882:	f7f9 fbc7 	bl	800a014 <memp_free>
    if (handler != NULL) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d0d3      	beq.n	8010834 <sys_check_timeouts+0xc>
      handler(arg);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6838      	ldr	r0, [r7, #0]
 8010890:	4798      	blx	r3
  do {
 8010892:	e7cf      	b.n	8010834 <sys_check_timeouts+0xc>
      return;
 8010894:	bf00      	nop
 8010896:	e000      	b.n	801089a <sys_check_timeouts+0x72>
      return;
 8010898:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801089a:	3710      	adds	r7, #16
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20008c79 	.word	0x20008c79
 80108a4:	20008ccc 	.word	0x20008ccc
 80108a8:	20008cd0 	.word	0x20008cd0

080108ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80108b0:	f003 fa42 	bl	8013d38 <rand>
 80108b4:	4603      	mov	r3, r0
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	4b01      	ldr	r3, [pc, #4]	; (80108cc <udp_init+0x20>)
 80108c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80108c8:	bf00      	nop
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20000028 	.word	0x20000028

080108d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80108da:	4b17      	ldr	r3, [pc, #92]	; (8010938 <udp_new_port+0x68>)
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	b291      	uxth	r1, r2
 80108e2:	4a15      	ldr	r2, [pc, #84]	; (8010938 <udp_new_port+0x68>)
 80108e4:	8011      	strh	r1, [r2, #0]
 80108e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d103      	bne.n	80108f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80108ee:	4b12      	ldr	r3, [pc, #72]	; (8010938 <udp_new_port+0x68>)
 80108f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80108f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108f6:	4b11      	ldr	r3, [pc, #68]	; (801093c <udp_new_port+0x6c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	603b      	str	r3, [r7, #0]
 80108fc:	e011      	b.n	8010922 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	8a5a      	ldrh	r2, [r3, #18]
 8010902:	4b0d      	ldr	r3, [pc, #52]	; (8010938 <udp_new_port+0x68>)
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	429a      	cmp	r2, r3
 8010908:	d108      	bne.n	801091c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801090a:	88fb      	ldrh	r3, [r7, #6]
 801090c:	3301      	adds	r3, #1
 801090e:	80fb      	strh	r3, [r7, #6]
 8010910:	88fb      	ldrh	r3, [r7, #6]
 8010912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010916:	d3e0      	bcc.n	80108da <udp_new_port+0xa>
        return 0;
 8010918:	2300      	movs	r3, #0
 801091a:	e007      	b.n	801092c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	603b      	str	r3, [r7, #0]
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1ea      	bne.n	80108fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010928:	4b03      	ldr	r3, [pc, #12]	; (8010938 <udp_new_port+0x68>)
 801092a:	881b      	ldrh	r3, [r3, #0]
}
 801092c:	4618      	mov	r0, r3
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr
 8010938:	20000028 	.word	0x20000028
 801093c:	20008cd8 	.word	0x20008cd8

08010940 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	4613      	mov	r3, r2
 801094c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d105      	bne.n	8010960 <udp_input_local_match+0x20>
 8010954:	4b27      	ldr	r3, [pc, #156]	; (80109f4 <udp_input_local_match+0xb4>)
 8010956:	2287      	movs	r2, #135	; 0x87
 8010958:	4927      	ldr	r1, [pc, #156]	; (80109f8 <udp_input_local_match+0xb8>)
 801095a:	4828      	ldr	r0, [pc, #160]	; (80109fc <udp_input_local_match+0xbc>)
 801095c:	f003 f9d4 	bl	8013d08 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d105      	bne.n	8010972 <udp_input_local_match+0x32>
 8010966:	4b23      	ldr	r3, [pc, #140]	; (80109f4 <udp_input_local_match+0xb4>)
 8010968:	2288      	movs	r2, #136	; 0x88
 801096a:	4925      	ldr	r1, [pc, #148]	; (8010a00 <udp_input_local_match+0xc0>)
 801096c:	4823      	ldr	r0, [pc, #140]	; (80109fc <udp_input_local_match+0xbc>)
 801096e:	f003 f9cb 	bl	8013d08 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	7a1b      	ldrb	r3, [r3, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00b      	beq.n	8010992 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	7a1a      	ldrb	r2, [r3, #8]
 801097e:	4b21      	ldr	r3, [pc, #132]	; (8010a04 <udp_input_local_match+0xc4>)
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010986:	3301      	adds	r3, #1
 8010988:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801098a:	429a      	cmp	r2, r3
 801098c:	d001      	beq.n	8010992 <udp_input_local_match+0x52>
    return 0;
 801098e:	2300      	movs	r3, #0
 8010990:	e02b      	b.n	80109ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d018      	beq.n	80109ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d013      	beq.n	80109c6 <udp_input_local_match+0x86>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00f      	beq.n	80109c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80109a6:	4b17      	ldr	r3, [pc, #92]	; (8010a04 <udp_input_local_match+0xc4>)
 80109a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80109aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ae:	d00a      	beq.n	80109c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	4b13      	ldr	r3, [pc, #76]	; (8010a04 <udp_input_local_match+0xc4>)
 80109b6:	695b      	ldr	r3, [r3, #20]
 80109b8:	405a      	eors	r2, r3
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	3308      	adds	r3, #8
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d110      	bne.n	80109e8 <udp_input_local_match+0xa8>
          return 1;
 80109c6:	2301      	movs	r3, #1
 80109c8:	e00f      	b.n	80109ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d009      	beq.n	80109e4 <udp_input_local_match+0xa4>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d005      	beq.n	80109e4 <udp_input_local_match+0xa4>
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	4b09      	ldr	r3, [pc, #36]	; (8010a04 <udp_input_local_match+0xc4>)
 80109de:	695b      	ldr	r3, [r3, #20]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d101      	bne.n	80109e8 <udp_input_local_match+0xa8>
        return 1;
 80109e4:	2301      	movs	r3, #1
 80109e6:	e000      	b.n	80109ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	080170e0 	.word	0x080170e0
 80109f8:	08017110 	.word	0x08017110
 80109fc:	08017134 	.word	0x08017134
 8010a00:	0801715c 	.word	0x0801715c
 8010a04:	2000570c 	.word	0x2000570c

08010a08 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010a08:	b590      	push	{r4, r7, lr}
 8010a0a:	b08d      	sub	sp, #52	; 0x34
 8010a0c:	af02      	add	r7, sp, #8
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010a12:	2300      	movs	r3, #0
 8010a14:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d105      	bne.n	8010a28 <udp_input+0x20>
 8010a1c:	4b7c      	ldr	r3, [pc, #496]	; (8010c10 <udp_input+0x208>)
 8010a1e:	22cf      	movs	r2, #207	; 0xcf
 8010a20:	497c      	ldr	r1, [pc, #496]	; (8010c14 <udp_input+0x20c>)
 8010a22:	487d      	ldr	r0, [pc, #500]	; (8010c18 <udp_input+0x210>)
 8010a24:	f003 f970 	bl	8013d08 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d105      	bne.n	8010a3a <udp_input+0x32>
 8010a2e:	4b78      	ldr	r3, [pc, #480]	; (8010c10 <udp_input+0x208>)
 8010a30:	22d0      	movs	r2, #208	; 0xd0
 8010a32:	497a      	ldr	r1, [pc, #488]	; (8010c1c <udp_input+0x214>)
 8010a34:	4878      	ldr	r0, [pc, #480]	; (8010c18 <udp_input+0x210>)
 8010a36:	f003 f967 	bl	8013d08 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	895b      	ldrh	r3, [r3, #10]
 8010a3e:	2b07      	cmp	r3, #7
 8010a40:	d803      	bhi.n	8010a4a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f7fa f95c 	bl	800ad00 <pbuf_free>
    goto end;
 8010a48:	e0de      	b.n	8010c08 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010a50:	4b73      	ldr	r3, [pc, #460]	; (8010c20 <udp_input+0x218>)
 8010a52:	695b      	ldr	r3, [r3, #20]
 8010a54:	4a72      	ldr	r2, [pc, #456]	; (8010c20 <udp_input+0x218>)
 8010a56:	6812      	ldr	r2, [r2, #0]
 8010a58:	4611      	mov	r1, r2
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f002 f80a 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 8010a60:	4603      	mov	r3, r0
 8010a62:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7f8 fdea 	bl	8009644 <lwip_htons>
 8010a70:	4603      	mov	r3, r0
 8010a72:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	885b      	ldrh	r3, [r3, #2]
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7f8 fde2 	bl	8009644 <lwip_htons>
 8010a80:	4603      	mov	r3, r0
 8010a82:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010a84:	2300      	movs	r3, #0
 8010a86:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a90:	4b64      	ldr	r3, [pc, #400]	; (8010c24 <udp_input+0x21c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	627b      	str	r3, [r7, #36]	; 0x24
 8010a96:	e054      	b.n	8010b42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	8a5b      	ldrh	r3, [r3, #18]
 8010a9c:	89fa      	ldrh	r2, [r7, #14]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d14a      	bne.n	8010b38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010aa2:	7cfb      	ldrb	r3, [r7, #19]
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	6839      	ldr	r1, [r7, #0]
 8010aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aaa:	f7ff ff49 	bl	8010940 <udp_input_local_match>
 8010aae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d041      	beq.n	8010b38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab6:	7c1b      	ldrb	r3, [r3, #16]
 8010ab8:	f003 0304 	and.w	r3, r3, #4
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d11d      	bne.n	8010afc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d102      	bne.n	8010acc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	61fb      	str	r3, [r7, #28]
 8010aca:	e017      	b.n	8010afc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010acc:	7cfb      	ldrb	r3, [r7, #19]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d014      	beq.n	8010afc <udp_input+0xf4>
 8010ad2:	4b53      	ldr	r3, [pc, #332]	; (8010c20 <udp_input+0x218>)
 8010ad4:	695b      	ldr	r3, [r3, #20]
 8010ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ada:	d10f      	bne.n	8010afc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d008      	beq.n	8010afc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	3304      	adds	r3, #4
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d101      	bne.n	8010afc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	8a9b      	ldrh	r3, [r3, #20]
 8010b00:	8a3a      	ldrh	r2, [r7, #16]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d118      	bne.n	8010b38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d005      	beq.n	8010b1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b10:	685a      	ldr	r2, [r3, #4]
 8010b12:	4b43      	ldr	r3, [pc, #268]	; (8010c20 <udp_input+0x218>)
 8010b14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d10e      	bne.n	8010b38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010b1a:	6a3b      	ldr	r3, [r7, #32]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d014      	beq.n	8010b4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	68da      	ldr	r2, [r3, #12]
 8010b24:	6a3b      	ldr	r3, [r7, #32]
 8010b26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010b28:	4b3e      	ldr	r3, [pc, #248]	; (8010c24 <udp_input+0x21c>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010b30:	4a3c      	ldr	r2, [pc, #240]	; (8010c24 <udp_input+0x21c>)
 8010b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010b36:	e008      	b.n	8010b4a <udp_input+0x142>
      }
    }

    prev = pcb;
 8010b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
 8010b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d1a7      	bne.n	8010a98 <udp_input+0x90>
 8010b48:	e000      	b.n	8010b4c <udp_input+0x144>
        break;
 8010b4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d101      	bne.n	8010b56 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <udp_input+0x15a>
    for_us = 1;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	76fb      	strb	r3, [r7, #27]
 8010b60:	e00a      	b.n	8010b78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	3304      	adds	r3, #4
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	4b2d      	ldr	r3, [pc, #180]	; (8010c20 <udp_input+0x218>)
 8010b6a:	695b      	ldr	r3, [r3, #20]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	bf0c      	ite	eq
 8010b70:	2301      	moveq	r3, #1
 8010b72:	2300      	movne	r3, #0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010b78:	7efb      	ldrb	r3, [r7, #27]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d041      	beq.n	8010c02 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010b7e:	2108      	movs	r1, #8
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7fa f837 	bl	800abf4 <pbuf_remove_header>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00a      	beq.n	8010ba2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010b8c:	4b20      	ldr	r3, [pc, #128]	; (8010c10 <udp_input+0x208>)
 8010b8e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010b92:	4925      	ldr	r1, [pc, #148]	; (8010c28 <udp_input+0x220>)
 8010b94:	4820      	ldr	r0, [pc, #128]	; (8010c18 <udp_input+0x210>)
 8010b96:	f003 f8b7 	bl	8013d08 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7fa f8b0 	bl	800ad00 <pbuf_free>
      goto end;
 8010ba0:	e032      	b.n	8010c08 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d012      	beq.n	8010bce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	699b      	ldr	r3, [r3, #24]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00a      	beq.n	8010bc6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb2:	699c      	ldr	r4, [r3, #24]
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb6:	69d8      	ldr	r0, [r3, #28]
 8010bb8:	8a3b      	ldrh	r3, [r7, #16]
 8010bba:	9300      	str	r3, [sp, #0]
 8010bbc:	4b1b      	ldr	r3, [pc, #108]	; (8010c2c <udp_input+0x224>)
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bc2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010bc4:	e021      	b.n	8010c0a <udp_input+0x202>
        pbuf_free(p);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7fa f89a 	bl	800ad00 <pbuf_free>
        goto end;
 8010bcc:	e01c      	b.n	8010c08 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010bce:	7cfb      	ldrb	r3, [r7, #19]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d112      	bne.n	8010bfa <udp_input+0x1f2>
 8010bd4:	4b12      	ldr	r3, [pc, #72]	; (8010c20 <udp_input+0x218>)
 8010bd6:	695b      	ldr	r3, [r3, #20]
 8010bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bdc:	2be0      	cmp	r3, #224	; 0xe0
 8010bde:	d00c      	beq.n	8010bfa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010be0:	4b0f      	ldr	r3, [pc, #60]	; (8010c20 <udp_input+0x218>)
 8010be2:	899b      	ldrh	r3, [r3, #12]
 8010be4:	3308      	adds	r3, #8
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	b21b      	sxth	r3, r3
 8010bea:	4619      	mov	r1, r3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7fa f874 	bl	800acda <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010bf2:	2103      	movs	r1, #3
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f001 fc1d 	bl	8012434 <icmp_dest_unreach>
      pbuf_free(p);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7fa f880 	bl	800ad00 <pbuf_free>
  return;
 8010c00:	e003      	b.n	8010c0a <udp_input+0x202>
    pbuf_free(p);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7fa f87c 	bl	800ad00 <pbuf_free>
  return;
 8010c08:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010c0a:	372c      	adds	r7, #44	; 0x2c
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd90      	pop	{r4, r7, pc}
 8010c10:	080170e0 	.word	0x080170e0
 8010c14:	08017184 	.word	0x08017184
 8010c18:	08017134 	.word	0x08017134
 8010c1c:	0801719c 	.word	0x0801719c
 8010c20:	2000570c 	.word	0x2000570c
 8010c24:	20008cd8 	.word	0x20008cd8
 8010c28:	080171b8 	.word	0x080171b8
 8010c2c:	2000571c 	.word	0x2000571c

08010c30 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d109      	bne.n	8010c54 <udp_send+0x24>
 8010c40:	4b11      	ldr	r3, [pc, #68]	; (8010c88 <udp_send+0x58>)
 8010c42:	f240 12d5 	movw	r2, #469	; 0x1d5
 8010c46:	4911      	ldr	r1, [pc, #68]	; (8010c8c <udp_send+0x5c>)
 8010c48:	4811      	ldr	r0, [pc, #68]	; (8010c90 <udp_send+0x60>)
 8010c4a:	f003 f85d 	bl	8013d08 <iprintf>
 8010c4e:	f06f 030f 	mvn.w	r3, #15
 8010c52:	e015      	b.n	8010c80 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d109      	bne.n	8010c6e <udp_send+0x3e>
 8010c5a:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <udp_send+0x58>)
 8010c5c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010c60:	490c      	ldr	r1, [pc, #48]	; (8010c94 <udp_send+0x64>)
 8010c62:	480b      	ldr	r0, [pc, #44]	; (8010c90 <udp_send+0x60>)
 8010c64:	f003 f850 	bl	8013d08 <iprintf>
 8010c68:	f06f 030f 	mvn.w	r3, #15
 8010c6c:	e008      	b.n	8010c80 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	1d1a      	adds	r2, r3, #4
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	8a9b      	ldrh	r3, [r3, #20]
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 f80d 	bl	8010c98 <udp_sendto>
 8010c7e:	4603      	mov	r3, r0
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	080170e0 	.word	0x080170e0
 8010c8c:	080171d4 	.word	0x080171d4
 8010c90:	08017134 	.word	0x08017134
 8010c94:	080171ec 	.word	0x080171ec

08010c98 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b088      	sub	sp, #32
 8010c9c:	af02      	add	r7, sp, #8
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
 8010ca4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d109      	bne.n	8010cc0 <udp_sendto+0x28>
 8010cac:	4b23      	ldr	r3, [pc, #140]	; (8010d3c <udp_sendto+0xa4>)
 8010cae:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010cb2:	4923      	ldr	r1, [pc, #140]	; (8010d40 <udp_sendto+0xa8>)
 8010cb4:	4823      	ldr	r0, [pc, #140]	; (8010d44 <udp_sendto+0xac>)
 8010cb6:	f003 f827 	bl	8013d08 <iprintf>
 8010cba:	f06f 030f 	mvn.w	r3, #15
 8010cbe:	e038      	b.n	8010d32 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d109      	bne.n	8010cda <udp_sendto+0x42>
 8010cc6:	4b1d      	ldr	r3, [pc, #116]	; (8010d3c <udp_sendto+0xa4>)
 8010cc8:	f240 2219 	movw	r2, #537	; 0x219
 8010ccc:	491e      	ldr	r1, [pc, #120]	; (8010d48 <udp_sendto+0xb0>)
 8010cce:	481d      	ldr	r0, [pc, #116]	; (8010d44 <udp_sendto+0xac>)
 8010cd0:	f003 f81a 	bl	8013d08 <iprintf>
 8010cd4:	f06f 030f 	mvn.w	r3, #15
 8010cd8:	e02b      	b.n	8010d32 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d109      	bne.n	8010cf4 <udp_sendto+0x5c>
 8010ce0:	4b16      	ldr	r3, [pc, #88]	; (8010d3c <udp_sendto+0xa4>)
 8010ce2:	f240 221a 	movw	r2, #538	; 0x21a
 8010ce6:	4919      	ldr	r1, [pc, #100]	; (8010d4c <udp_sendto+0xb4>)
 8010ce8:	4816      	ldr	r0, [pc, #88]	; (8010d44 <udp_sendto+0xac>)
 8010cea:	f003 f80d 	bl	8013d08 <iprintf>
 8010cee:	f06f 030f 	mvn.w	r3, #15
 8010cf2:	e01e      	b.n	8010d32 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	7a1b      	ldrb	r3, [r3, #8]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d006      	beq.n	8010d0a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	7a1b      	ldrb	r3, [r3, #8]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7f9 fc9d 	bl	800a640 <netif_get_by_index>
 8010d06:	6178      	str	r0, [r7, #20]
 8010d08:	e003      	b.n	8010d12 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f001 fc1c 	bl	8012548 <ip4_route>
 8010d10:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d102      	bne.n	8010d1e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010d18:	f06f 0303 	mvn.w	r3, #3
 8010d1c:	e009      	b.n	8010d32 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010d1e:	887a      	ldrh	r2, [r7, #2]
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	4613      	mov	r3, r2
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	68b9      	ldr	r1, [r7, #8]
 8010d2a:	68f8      	ldr	r0, [r7, #12]
 8010d2c:	f000 f810 	bl	8010d50 <udp_sendto_if>
 8010d30:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3718      	adds	r7, #24
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	080170e0 	.word	0x080170e0
 8010d40:	08017204 	.word	0x08017204
 8010d44:	08017134 	.word	0x08017134
 8010d48:	0801721c 	.word	0x0801721c
 8010d4c:	08017238 	.word	0x08017238

08010d50 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af02      	add	r7, sp, #8
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d109      	bne.n	8010d78 <udp_sendto_if+0x28>
 8010d64:	4b2e      	ldr	r3, [pc, #184]	; (8010e20 <udp_sendto_if+0xd0>)
 8010d66:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d6a:	492e      	ldr	r1, [pc, #184]	; (8010e24 <udp_sendto_if+0xd4>)
 8010d6c:	482e      	ldr	r0, [pc, #184]	; (8010e28 <udp_sendto_if+0xd8>)
 8010d6e:	f002 ffcb 	bl	8013d08 <iprintf>
 8010d72:	f06f 030f 	mvn.w	r3, #15
 8010d76:	e04f      	b.n	8010e18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d109      	bne.n	8010d92 <udp_sendto_if+0x42>
 8010d7e:	4b28      	ldr	r3, [pc, #160]	; (8010e20 <udp_sendto_if+0xd0>)
 8010d80:	f240 2281 	movw	r2, #641	; 0x281
 8010d84:	4929      	ldr	r1, [pc, #164]	; (8010e2c <udp_sendto_if+0xdc>)
 8010d86:	4828      	ldr	r0, [pc, #160]	; (8010e28 <udp_sendto_if+0xd8>)
 8010d88:	f002 ffbe 	bl	8013d08 <iprintf>
 8010d8c:	f06f 030f 	mvn.w	r3, #15
 8010d90:	e042      	b.n	8010e18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d109      	bne.n	8010dac <udp_sendto_if+0x5c>
 8010d98:	4b21      	ldr	r3, [pc, #132]	; (8010e20 <udp_sendto_if+0xd0>)
 8010d9a:	f240 2282 	movw	r2, #642	; 0x282
 8010d9e:	4924      	ldr	r1, [pc, #144]	; (8010e30 <udp_sendto_if+0xe0>)
 8010da0:	4821      	ldr	r0, [pc, #132]	; (8010e28 <udp_sendto_if+0xd8>)
 8010da2:	f002 ffb1 	bl	8013d08 <iprintf>
 8010da6:	f06f 030f 	mvn.w	r3, #15
 8010daa:	e035      	b.n	8010e18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d109      	bne.n	8010dc6 <udp_sendto_if+0x76>
 8010db2:	4b1b      	ldr	r3, [pc, #108]	; (8010e20 <udp_sendto_if+0xd0>)
 8010db4:	f240 2283 	movw	r2, #643	; 0x283
 8010db8:	491e      	ldr	r1, [pc, #120]	; (8010e34 <udp_sendto_if+0xe4>)
 8010dba:	481b      	ldr	r0, [pc, #108]	; (8010e28 <udp_sendto_if+0xd8>)
 8010dbc:	f002 ffa4 	bl	8013d08 <iprintf>
 8010dc0:	f06f 030f 	mvn.w	r3, #15
 8010dc4:	e028      	b.n	8010e18 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d009      	beq.n	8010de0 <udp_sendto_if+0x90>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d005      	beq.n	8010de0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ddc:	2be0      	cmp	r3, #224	; 0xe0
 8010dde:	d103      	bne.n	8010de8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010de0:	6a3b      	ldr	r3, [r7, #32]
 8010de2:	3304      	adds	r3, #4
 8010de4:	617b      	str	r3, [r7, #20]
 8010de6:	e00b      	b.n	8010e00 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	6a3b      	ldr	r3, [r7, #32]
 8010dee:	3304      	adds	r3, #4
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d002      	beq.n	8010dfc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010df6:	f06f 0303 	mvn.w	r3, #3
 8010dfa:	e00d      	b.n	8010e18 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010e00:	887a      	ldrh	r2, [r7, #2]
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	9301      	str	r3, [sp, #4]
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	9300      	str	r3, [sp, #0]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	68b9      	ldr	r1, [r7, #8]
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f000 f811 	bl	8010e38 <udp_sendto_if_src>
 8010e16:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3718      	adds	r7, #24
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	080170e0 	.word	0x080170e0
 8010e24:	08017254 	.word	0x08017254
 8010e28:	08017134 	.word	0x08017134
 8010e2c:	08017270 	.word	0x08017270
 8010e30:	0801728c 	.word	0x0801728c
 8010e34:	080172ac 	.word	0x080172ac

08010e38 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b08c      	sub	sp, #48	; 0x30
 8010e3c:	af04      	add	r7, sp, #16
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	60b9      	str	r1, [r7, #8]
 8010e42:	607a      	str	r2, [r7, #4]
 8010e44:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d109      	bne.n	8010e60 <udp_sendto_if_src+0x28>
 8010e4c:	4b65      	ldr	r3, [pc, #404]	; (8010fe4 <udp_sendto_if_src+0x1ac>)
 8010e4e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010e52:	4965      	ldr	r1, [pc, #404]	; (8010fe8 <udp_sendto_if_src+0x1b0>)
 8010e54:	4865      	ldr	r0, [pc, #404]	; (8010fec <udp_sendto_if_src+0x1b4>)
 8010e56:	f002 ff57 	bl	8013d08 <iprintf>
 8010e5a:	f06f 030f 	mvn.w	r3, #15
 8010e5e:	e0bc      	b.n	8010fda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d109      	bne.n	8010e7a <udp_sendto_if_src+0x42>
 8010e66:	4b5f      	ldr	r3, [pc, #380]	; (8010fe4 <udp_sendto_if_src+0x1ac>)
 8010e68:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010e6c:	4960      	ldr	r1, [pc, #384]	; (8010ff0 <udp_sendto_if_src+0x1b8>)
 8010e6e:	485f      	ldr	r0, [pc, #380]	; (8010fec <udp_sendto_if_src+0x1b4>)
 8010e70:	f002 ff4a 	bl	8013d08 <iprintf>
 8010e74:	f06f 030f 	mvn.w	r3, #15
 8010e78:	e0af      	b.n	8010fda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d109      	bne.n	8010e94 <udp_sendto_if_src+0x5c>
 8010e80:	4b58      	ldr	r3, [pc, #352]	; (8010fe4 <udp_sendto_if_src+0x1ac>)
 8010e82:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010e86:	495b      	ldr	r1, [pc, #364]	; (8010ff4 <udp_sendto_if_src+0x1bc>)
 8010e88:	4858      	ldr	r0, [pc, #352]	; (8010fec <udp_sendto_if_src+0x1b4>)
 8010e8a:	f002 ff3d 	bl	8013d08 <iprintf>
 8010e8e:	f06f 030f 	mvn.w	r3, #15
 8010e92:	e0a2      	b.n	8010fda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d109      	bne.n	8010eae <udp_sendto_if_src+0x76>
 8010e9a:	4b52      	ldr	r3, [pc, #328]	; (8010fe4 <udp_sendto_if_src+0x1ac>)
 8010e9c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010ea0:	4955      	ldr	r1, [pc, #340]	; (8010ff8 <udp_sendto_if_src+0x1c0>)
 8010ea2:	4852      	ldr	r0, [pc, #328]	; (8010fec <udp_sendto_if_src+0x1b4>)
 8010ea4:	f002 ff30 	bl	8013d08 <iprintf>
 8010ea8:	f06f 030f 	mvn.w	r3, #15
 8010eac:	e095      	b.n	8010fda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d109      	bne.n	8010ec8 <udp_sendto_if_src+0x90>
 8010eb4:	4b4b      	ldr	r3, [pc, #300]	; (8010fe4 <udp_sendto_if_src+0x1ac>)
 8010eb6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010eba:	4950      	ldr	r1, [pc, #320]	; (8010ffc <udp_sendto_if_src+0x1c4>)
 8010ebc:	484b      	ldr	r0, [pc, #300]	; (8010fec <udp_sendto_if_src+0x1b4>)
 8010ebe:	f002 ff23 	bl	8013d08 <iprintf>
 8010ec2:	f06f 030f 	mvn.w	r3, #15
 8010ec6:	e088      	b.n	8010fda <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	8a5b      	ldrh	r3, [r3, #18]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d10f      	bne.n	8010ef0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010ed0:	68f9      	ldr	r1, [r7, #12]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	8a5b      	ldrh	r3, [r3, #18]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f000 f893 	bl	8011004 <udp_bind>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010ee2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d002      	beq.n	8010ef0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010eea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010eee:	e074      	b.n	8010fda <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	891b      	ldrh	r3, [r3, #8]
 8010ef4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d902      	bls.n	8010f02 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010efc:	f04f 33ff 	mov.w	r3, #4294967295
 8010f00:	e06b      	b.n	8010fda <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010f02:	2108      	movs	r1, #8
 8010f04:	68b8      	ldr	r0, [r7, #8]
 8010f06:	f7f9 fe65 	bl	800abd4 <pbuf_add_header>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d015      	beq.n	8010f3c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010f10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f14:	2108      	movs	r1, #8
 8010f16:	2022      	movs	r0, #34	; 0x22
 8010f18:	f7f9 fc0e 	bl	800a738 <pbuf_alloc>
 8010f1c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d102      	bne.n	8010f2a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010f24:	f04f 33ff 	mov.w	r3, #4294967295
 8010f28:	e057      	b.n	8010fda <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	891b      	ldrh	r3, [r3, #8]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d006      	beq.n	8010f40 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010f32:	68b9      	ldr	r1, [r7, #8]
 8010f34:	69f8      	ldr	r0, [r7, #28]
 8010f36:	f7f9 fffb 	bl	800af30 <pbuf_chain>
 8010f3a:	e001      	b.n	8010f40 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	895b      	ldrh	r3, [r3, #10]
 8010f44:	2b07      	cmp	r3, #7
 8010f46:	d806      	bhi.n	8010f56 <udp_sendto_if_src+0x11e>
 8010f48:	4b26      	ldr	r3, [pc, #152]	; (8010fe4 <udp_sendto_if_src+0x1ac>)
 8010f4a:	f240 320d 	movw	r2, #781	; 0x30d
 8010f4e:	492c      	ldr	r1, [pc, #176]	; (8011000 <udp_sendto_if_src+0x1c8>)
 8010f50:	4826      	ldr	r0, [pc, #152]	; (8010fec <udp_sendto_if_src+0x1b4>)
 8010f52:	f002 fed9 	bl	8013d08 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	8a5b      	ldrh	r3, [r3, #18]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f8 fb6f 	bl	8009644 <lwip_htons>
 8010f66:	4603      	mov	r3, r0
 8010f68:	461a      	mov	r2, r3
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010f6e:	887b      	ldrh	r3, [r7, #2]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7f8 fb67 	bl	8009644 <lwip_htons>
 8010f76:	4603      	mov	r3, r0
 8010f78:	461a      	mov	r2, r3
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2200      	movs	r2, #0
 8010f82:	719a      	strb	r2, [r3, #6]
 8010f84:	2200      	movs	r2, #0
 8010f86:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	891b      	ldrh	r3, [r3, #8]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f8 fb59 	bl	8009644 <lwip_htons>
 8010f92:	4603      	mov	r3, r0
 8010f94:	461a      	mov	r2, r3
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010f9a:	2311      	movs	r3, #17
 8010f9c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	7adb      	ldrb	r3, [r3, #11]
 8010fa2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	7a9b      	ldrb	r3, [r3, #10]
 8010fa8:	7cb9      	ldrb	r1, [r7, #18]
 8010faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fac:	9202      	str	r2, [sp, #8]
 8010fae:	7cfa      	ldrb	r2, [r7, #19]
 8010fb0:	9201      	str	r2, [sp, #4]
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fba:	69f8      	ldr	r0, [r7, #28]
 8010fbc:	f001 fcac 	bl	8012918 <ip4_output_if_src>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010fc4:	69fa      	ldr	r2, [r7, #28]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d004      	beq.n	8010fd6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010fcc:	69f8      	ldr	r0, [r7, #28]
 8010fce:	f7f9 fe97 	bl	800ad00 <pbuf_free>
    q = NULL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010fd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3720      	adds	r7, #32
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	080170e0 	.word	0x080170e0
 8010fe8:	080172cc 	.word	0x080172cc
 8010fec:	08017134 	.word	0x08017134
 8010ff0:	080172ec 	.word	0x080172ec
 8010ff4:	0801730c 	.word	0x0801730c
 8010ff8:	08017330 	.word	0x08017330
 8010ffc:	08017354 	.word	0x08017354
 8011000:	08017378 	.word	0x08017378

08011004 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b086      	sub	sp, #24
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	4613      	mov	r3, r2
 8011010:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d101      	bne.n	801101c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011018:	4b39      	ldr	r3, [pc, #228]	; (8011100 <udp_bind+0xfc>)
 801101a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d109      	bne.n	8011036 <udp_bind+0x32>
 8011022:	4b38      	ldr	r3, [pc, #224]	; (8011104 <udp_bind+0x100>)
 8011024:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011028:	4937      	ldr	r1, [pc, #220]	; (8011108 <udp_bind+0x104>)
 801102a:	4838      	ldr	r0, [pc, #224]	; (801110c <udp_bind+0x108>)
 801102c:	f002 fe6c 	bl	8013d08 <iprintf>
 8011030:	f06f 030f 	mvn.w	r3, #15
 8011034:	e060      	b.n	80110f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011036:	2300      	movs	r3, #0
 8011038:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801103a:	4b35      	ldr	r3, [pc, #212]	; (8011110 <udp_bind+0x10c>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	617b      	str	r3, [r7, #20]
 8011040:	e009      	b.n	8011056 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	429a      	cmp	r2, r3
 8011048:	d102      	bne.n	8011050 <udp_bind+0x4c>
      rebind = 1;
 801104a:	2301      	movs	r3, #1
 801104c:	74fb      	strb	r3, [r7, #19]
      break;
 801104e:	e005      	b.n	801105c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	617b      	str	r3, [r7, #20]
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1f2      	bne.n	8011042 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801105c:	88fb      	ldrh	r3, [r7, #6]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d109      	bne.n	8011076 <udp_bind+0x72>
    port = udp_new_port();
 8011062:	f7ff fc35 	bl	80108d0 <udp_new_port>
 8011066:	4603      	mov	r3, r0
 8011068:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801106a:	88fb      	ldrh	r3, [r7, #6]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d12c      	bne.n	80110ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011070:	f06f 0307 	mvn.w	r3, #7
 8011074:	e040      	b.n	80110f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011076:	4b26      	ldr	r3, [pc, #152]	; (8011110 <udp_bind+0x10c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	617b      	str	r3, [r7, #20]
 801107c:	e022      	b.n	80110c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	429a      	cmp	r2, r3
 8011084:	d01b      	beq.n	80110be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	8a5b      	ldrh	r3, [r3, #18]
 801108a:	88fa      	ldrh	r2, [r7, #6]
 801108c:	429a      	cmp	r2, r3
 801108e:	d116      	bne.n	80110be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011098:	429a      	cmp	r2, r3
 801109a:	d00d      	beq.n	80110b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00a      	beq.n	80110b8 <udp_bind+0xb4>
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d006      	beq.n	80110b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80110aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d003      	beq.n	80110b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80110b8:	f06f 0307 	mvn.w	r3, #7
 80110bc:	e01c      	b.n	80110f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	617b      	str	r3, [r7, #20]
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1d9      	bne.n	801107e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d002      	beq.n	80110d6 <udp_bind+0xd2>
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	e000      	b.n	80110d8 <udp_bind+0xd4>
 80110d6:	2300      	movs	r3, #0
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	88fa      	ldrh	r2, [r7, #6]
 80110e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80110e2:	7cfb      	ldrb	r3, [r7, #19]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d106      	bne.n	80110f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80110e8:	4b09      	ldr	r3, [pc, #36]	; (8011110 <udp_bind+0x10c>)
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80110f0:	4a07      	ldr	r2, [pc, #28]	; (8011110 <udp_bind+0x10c>)
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80110f6:	2300      	movs	r3, #0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3718      	adds	r7, #24
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	08017c40 	.word	0x08017c40
 8011104:	080170e0 	.word	0x080170e0
 8011108:	080173a8 	.word	0x080173a8
 801110c:	08017134 	.word	0x08017134
 8011110:	20008cd8 	.word	0x20008cd8

08011114 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b086      	sub	sp, #24
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	4613      	mov	r3, r2
 8011120:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d109      	bne.n	801113c <udp_connect+0x28>
 8011128:	4b2c      	ldr	r3, [pc, #176]	; (80111dc <udp_connect+0xc8>)
 801112a:	f240 4235 	movw	r2, #1077	; 0x435
 801112e:	492c      	ldr	r1, [pc, #176]	; (80111e0 <udp_connect+0xcc>)
 8011130:	482c      	ldr	r0, [pc, #176]	; (80111e4 <udp_connect+0xd0>)
 8011132:	f002 fde9 	bl	8013d08 <iprintf>
 8011136:	f06f 030f 	mvn.w	r3, #15
 801113a:	e04b      	b.n	80111d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d109      	bne.n	8011156 <udp_connect+0x42>
 8011142:	4b26      	ldr	r3, [pc, #152]	; (80111dc <udp_connect+0xc8>)
 8011144:	f240 4236 	movw	r2, #1078	; 0x436
 8011148:	4927      	ldr	r1, [pc, #156]	; (80111e8 <udp_connect+0xd4>)
 801114a:	4826      	ldr	r0, [pc, #152]	; (80111e4 <udp_connect+0xd0>)
 801114c:	f002 fddc 	bl	8013d08 <iprintf>
 8011150:	f06f 030f 	mvn.w	r3, #15
 8011154:	e03e      	b.n	80111d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	8a5b      	ldrh	r3, [r3, #18]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d10f      	bne.n	801117e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801115e:	68f9      	ldr	r1, [r7, #12]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	8a5b      	ldrh	r3, [r3, #18]
 8011164:	461a      	mov	r2, r3
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f7ff ff4c 	bl	8011004 <udp_bind>
 801116c:	4603      	mov	r3, r0
 801116e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011170:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d002      	beq.n	801117e <udp_connect+0x6a>
      return err;
 8011178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801117c:	e02a      	b.n	80111d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <udp_connect+0x76>
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	e000      	b.n	801118c <udp_connect+0x78>
 801118a:	2300      	movs	r3, #0
 801118c:	68fa      	ldr	r2, [r7, #12]
 801118e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	88fa      	ldrh	r2, [r7, #6]
 8011194:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	7c1b      	ldrb	r3, [r3, #16]
 801119a:	f043 0304 	orr.w	r3, r3, #4
 801119e:	b2da      	uxtb	r2, r3
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80111a4:	4b11      	ldr	r3, [pc, #68]	; (80111ec <udp_connect+0xd8>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	617b      	str	r3, [r7, #20]
 80111aa:	e008      	b.n	80111be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80111ac:	68fa      	ldr	r2, [r7, #12]
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d101      	bne.n	80111b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80111b4:	2300      	movs	r3, #0
 80111b6:	e00d      	b.n	80111d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	617b      	str	r3, [r7, #20]
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1f3      	bne.n	80111ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80111c4:	4b09      	ldr	r3, [pc, #36]	; (80111ec <udp_connect+0xd8>)
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80111cc:	4a07      	ldr	r2, [pc, #28]	; (80111ec <udp_connect+0xd8>)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3718      	adds	r7, #24
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	080170e0 	.word	0x080170e0
 80111e0:	080173c0 	.word	0x080173c0
 80111e4:	08017134 	.word	0x08017134
 80111e8:	080173dc 	.word	0x080173dc
 80111ec:	20008cd8 	.word	0x20008cd8

080111f0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d107      	bne.n	801120e <udp_disconnect+0x1e>
 80111fe:	4b0d      	ldr	r3, [pc, #52]	; (8011234 <udp_disconnect+0x44>)
 8011200:	f240 426a 	movw	r2, #1130	; 0x46a
 8011204:	490c      	ldr	r1, [pc, #48]	; (8011238 <udp_disconnect+0x48>)
 8011206:	480d      	ldr	r0, [pc, #52]	; (801123c <udp_disconnect+0x4c>)
 8011208:	f002 fd7e 	bl	8013d08 <iprintf>
 801120c:	e00f      	b.n	801122e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2200      	movs	r2, #0
 8011212:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2200      	movs	r2, #0
 8011218:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2200      	movs	r2, #0
 801121e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7c1b      	ldrb	r3, [r3, #16]
 8011224:	f023 0304 	bic.w	r3, r3, #4
 8011228:	b2da      	uxtb	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	741a      	strb	r2, [r3, #16]
}
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	080170e0 	.word	0x080170e0
 8011238:	080173f8 	.word	0x080173f8
 801123c:	08017134 	.word	0x08017134

08011240 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d107      	bne.n	8011262 <udp_recv+0x22>
 8011252:	4b08      	ldr	r3, [pc, #32]	; (8011274 <udp_recv+0x34>)
 8011254:	f240 428a 	movw	r2, #1162	; 0x48a
 8011258:	4907      	ldr	r1, [pc, #28]	; (8011278 <udp_recv+0x38>)
 801125a:	4808      	ldr	r0, [pc, #32]	; (801127c <udp_recv+0x3c>)
 801125c:	f002 fd54 	bl	8013d08 <iprintf>
 8011260:	e005      	b.n	801126e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	68ba      	ldr	r2, [r7, #8]
 8011266:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	61da      	str	r2, [r3, #28]
}
 801126e:	3710      	adds	r7, #16
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	080170e0 	.word	0x080170e0
 8011278:	08017414 	.word	0x08017414
 801127c:	08017134 	.word	0x08017134

08011280 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d107      	bne.n	801129e <udp_remove+0x1e>
 801128e:	4b19      	ldr	r3, [pc, #100]	; (80112f4 <udp_remove+0x74>)
 8011290:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011294:	4918      	ldr	r1, [pc, #96]	; (80112f8 <udp_remove+0x78>)
 8011296:	4819      	ldr	r0, [pc, #100]	; (80112fc <udp_remove+0x7c>)
 8011298:	f002 fd36 	bl	8013d08 <iprintf>
 801129c:	e026      	b.n	80112ec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801129e:	4b18      	ldr	r3, [pc, #96]	; (8011300 <udp_remove+0x80>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d105      	bne.n	80112b4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80112a8:	4b15      	ldr	r3, [pc, #84]	; (8011300 <udp_remove+0x80>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	4a14      	ldr	r2, [pc, #80]	; (8011300 <udp_remove+0x80>)
 80112b0:	6013      	str	r3, [r2, #0]
 80112b2:	e017      	b.n	80112e4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80112b4:	4b12      	ldr	r3, [pc, #72]	; (8011300 <udp_remove+0x80>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	60fb      	str	r3, [r7, #12]
 80112ba:	e010      	b.n	80112de <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d009      	beq.n	80112d8 <udp_remove+0x58>
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d104      	bne.n	80112d8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	68da      	ldr	r2, [r3, #12]
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	60da      	str	r2, [r3, #12]
        break;
 80112d6:	e005      	b.n	80112e4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	60fb      	str	r3, [r7, #12]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1eb      	bne.n	80112bc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80112e4:	6879      	ldr	r1, [r7, #4]
 80112e6:	2000      	movs	r0, #0
 80112e8:	f7f8 fe94 	bl	800a014 <memp_free>
}
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	080170e0 	.word	0x080170e0
 80112f8:	0801742c 	.word	0x0801742c
 80112fc:	08017134 	.word	0x08017134
 8011300:	20008cd8 	.word	0x20008cd8

08011304 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801130a:	2000      	movs	r0, #0
 801130c:	f7f8 fe12 	bl	8009f34 <memp_malloc>
 8011310:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d007      	beq.n	8011328 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011318:	2220      	movs	r2, #32
 801131a:	2100      	movs	r1, #0
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f002 fceb 	bl	8013cf8 <memset>
    pcb->ttl = UDP_TTL;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	22ff      	movs	r2, #255	; 0xff
 8011326:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011328:	687b      	ldr	r3, [r7, #4]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
	...

08011334 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011334:	b480      	push	{r7}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d01e      	beq.n	8011382 <udp_netif_ip_addr_changed+0x4e>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d01a      	beq.n	8011382 <udp_netif_ip_addr_changed+0x4e>
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d017      	beq.n	8011382 <udp_netif_ip_addr_changed+0x4e>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d013      	beq.n	8011382 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801135a:	4b0d      	ldr	r3, [pc, #52]	; (8011390 <udp_netif_ip_addr_changed+0x5c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	60fb      	str	r3, [r7, #12]
 8011360:	e00c      	b.n	801137c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	429a      	cmp	r2, r3
 801136c:	d103      	bne.n	8011376 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	60fb      	str	r3, [r7, #12]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d1ef      	bne.n	8011362 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011382:	bf00      	nop
 8011384:	3714      	adds	r7, #20
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	20008cd8 	.word	0x20008cd8

08011394 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801139c:	4915      	ldr	r1, [pc, #84]	; (80113f4 <etharp_free_entry+0x60>)
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	4613      	mov	r3, r2
 80113a2:	005b      	lsls	r3, r3, #1
 80113a4:	4413      	add	r3, r2
 80113a6:	00db      	lsls	r3, r3, #3
 80113a8:	440b      	add	r3, r1
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d013      	beq.n	80113d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80113b0:	4910      	ldr	r1, [pc, #64]	; (80113f4 <etharp_free_entry+0x60>)
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	4613      	mov	r3, r2
 80113b6:	005b      	lsls	r3, r3, #1
 80113b8:	4413      	add	r3, r2
 80113ba:	00db      	lsls	r3, r3, #3
 80113bc:	440b      	add	r3, r1
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7f9 fc9d 	bl	800ad00 <pbuf_free>
    arp_table[i].q = NULL;
 80113c6:	490b      	ldr	r1, [pc, #44]	; (80113f4 <etharp_free_entry+0x60>)
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	4613      	mov	r3, r2
 80113cc:	005b      	lsls	r3, r3, #1
 80113ce:	4413      	add	r3, r2
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	440b      	add	r3, r1
 80113d4:	2200      	movs	r2, #0
 80113d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80113d8:	4906      	ldr	r1, [pc, #24]	; (80113f4 <etharp_free_entry+0x60>)
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	4613      	mov	r3, r2
 80113de:	005b      	lsls	r3, r3, #1
 80113e0:	4413      	add	r3, r2
 80113e2:	00db      	lsls	r3, r3, #3
 80113e4:	440b      	add	r3, r1
 80113e6:	3314      	adds	r3, #20
 80113e8:	2200      	movs	r2, #0
 80113ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	20008cdc 	.word	0x20008cdc

080113f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113fe:	2300      	movs	r3, #0
 8011400:	607b      	str	r3, [r7, #4]
 8011402:	e096      	b.n	8011532 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011404:	494f      	ldr	r1, [pc, #316]	; (8011544 <etharp_tmr+0x14c>)
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	4613      	mov	r3, r2
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	4413      	add	r3, r2
 801140e:	00db      	lsls	r3, r3, #3
 8011410:	440b      	add	r3, r1
 8011412:	3314      	adds	r3, #20
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011418:	78fb      	ldrb	r3, [r7, #3]
 801141a:	2b00      	cmp	r3, #0
 801141c:	f000 8086 	beq.w	801152c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011420:	4948      	ldr	r1, [pc, #288]	; (8011544 <etharp_tmr+0x14c>)
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	4613      	mov	r3, r2
 8011426:	005b      	lsls	r3, r3, #1
 8011428:	4413      	add	r3, r2
 801142a:	00db      	lsls	r3, r3, #3
 801142c:	440b      	add	r3, r1
 801142e:	3312      	adds	r3, #18
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	3301      	adds	r3, #1
 8011434:	b298      	uxth	r0, r3
 8011436:	4943      	ldr	r1, [pc, #268]	; (8011544 <etharp_tmr+0x14c>)
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	4613      	mov	r3, r2
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	4413      	add	r3, r2
 8011440:	00db      	lsls	r3, r3, #3
 8011442:	440b      	add	r3, r1
 8011444:	3312      	adds	r3, #18
 8011446:	4602      	mov	r2, r0
 8011448:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801144a:	493e      	ldr	r1, [pc, #248]	; (8011544 <etharp_tmr+0x14c>)
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	4613      	mov	r3, r2
 8011450:	005b      	lsls	r3, r3, #1
 8011452:	4413      	add	r3, r2
 8011454:	00db      	lsls	r3, r3, #3
 8011456:	440b      	add	r3, r1
 8011458:	3312      	adds	r3, #18
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011460:	d215      	bcs.n	801148e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011462:	4938      	ldr	r1, [pc, #224]	; (8011544 <etharp_tmr+0x14c>)
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	4613      	mov	r3, r2
 8011468:	005b      	lsls	r3, r3, #1
 801146a:	4413      	add	r3, r2
 801146c:	00db      	lsls	r3, r3, #3
 801146e:	440b      	add	r3, r1
 8011470:	3314      	adds	r3, #20
 8011472:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011474:	2b01      	cmp	r3, #1
 8011476:	d10e      	bne.n	8011496 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011478:	4932      	ldr	r1, [pc, #200]	; (8011544 <etharp_tmr+0x14c>)
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	4613      	mov	r3, r2
 801147e:	005b      	lsls	r3, r3, #1
 8011480:	4413      	add	r3, r2
 8011482:	00db      	lsls	r3, r3, #3
 8011484:	440b      	add	r3, r1
 8011486:	3312      	adds	r3, #18
 8011488:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801148a:	2b04      	cmp	r3, #4
 801148c:	d903      	bls.n	8011496 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7ff ff80 	bl	8011394 <etharp_free_entry>
 8011494:	e04a      	b.n	801152c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011496:	492b      	ldr	r1, [pc, #172]	; (8011544 <etharp_tmr+0x14c>)
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	4613      	mov	r3, r2
 801149c:	005b      	lsls	r3, r3, #1
 801149e:	4413      	add	r3, r2
 80114a0:	00db      	lsls	r3, r3, #3
 80114a2:	440b      	add	r3, r1
 80114a4:	3314      	adds	r3, #20
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	2b03      	cmp	r3, #3
 80114aa:	d10a      	bne.n	80114c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80114ac:	4925      	ldr	r1, [pc, #148]	; (8011544 <etharp_tmr+0x14c>)
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	4613      	mov	r3, r2
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	4413      	add	r3, r2
 80114b6:	00db      	lsls	r3, r3, #3
 80114b8:	440b      	add	r3, r1
 80114ba:	3314      	adds	r3, #20
 80114bc:	2204      	movs	r2, #4
 80114be:	701a      	strb	r2, [r3, #0]
 80114c0:	e034      	b.n	801152c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80114c2:	4920      	ldr	r1, [pc, #128]	; (8011544 <etharp_tmr+0x14c>)
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	4613      	mov	r3, r2
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	4413      	add	r3, r2
 80114cc:	00db      	lsls	r3, r3, #3
 80114ce:	440b      	add	r3, r1
 80114d0:	3314      	adds	r3, #20
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	2b04      	cmp	r3, #4
 80114d6:	d10a      	bne.n	80114ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80114d8:	491a      	ldr	r1, [pc, #104]	; (8011544 <etharp_tmr+0x14c>)
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	4613      	mov	r3, r2
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	4413      	add	r3, r2
 80114e2:	00db      	lsls	r3, r3, #3
 80114e4:	440b      	add	r3, r1
 80114e6:	3314      	adds	r3, #20
 80114e8:	2202      	movs	r2, #2
 80114ea:	701a      	strb	r2, [r3, #0]
 80114ec:	e01e      	b.n	801152c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80114ee:	4915      	ldr	r1, [pc, #84]	; (8011544 <etharp_tmr+0x14c>)
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	4613      	mov	r3, r2
 80114f4:	005b      	lsls	r3, r3, #1
 80114f6:	4413      	add	r3, r2
 80114f8:	00db      	lsls	r3, r3, #3
 80114fa:	440b      	add	r3, r1
 80114fc:	3314      	adds	r3, #20
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d113      	bne.n	801152c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011504:	490f      	ldr	r1, [pc, #60]	; (8011544 <etharp_tmr+0x14c>)
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	4613      	mov	r3, r2
 801150a:	005b      	lsls	r3, r3, #1
 801150c:	4413      	add	r3, r2
 801150e:	00db      	lsls	r3, r3, #3
 8011510:	440b      	add	r3, r1
 8011512:	3308      	adds	r3, #8
 8011514:	6818      	ldr	r0, [r3, #0]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	4613      	mov	r3, r2
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	4413      	add	r3, r2
 801151e:	00db      	lsls	r3, r3, #3
 8011520:	4a08      	ldr	r2, [pc, #32]	; (8011544 <etharp_tmr+0x14c>)
 8011522:	4413      	add	r3, r2
 8011524:	3304      	adds	r3, #4
 8011526:	4619      	mov	r1, r3
 8011528:	f000 fe6e 	bl	8012208 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	3301      	adds	r3, #1
 8011530:	607b      	str	r3, [r7, #4]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b09      	cmp	r3, #9
 8011536:	f77f af65 	ble.w	8011404 <etharp_tmr+0xc>
      }
    }
  }
}
 801153a:	bf00      	nop
 801153c:	bf00      	nop
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	20008cdc 	.word	0x20008cdc

08011548 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b08a      	sub	sp, #40	; 0x28
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	460b      	mov	r3, r1
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011556:	230a      	movs	r3, #10
 8011558:	84fb      	strh	r3, [r7, #38]	; 0x26
 801155a:	230a      	movs	r3, #10
 801155c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801155e:	230a      	movs	r3, #10
 8011560:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011562:	2300      	movs	r3, #0
 8011564:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011566:	230a      	movs	r3, #10
 8011568:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801156a:	2300      	movs	r3, #0
 801156c:	83bb      	strh	r3, [r7, #28]
 801156e:	2300      	movs	r3, #0
 8011570:	837b      	strh	r3, [r7, #26]
 8011572:	2300      	movs	r3, #0
 8011574:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011576:	2300      	movs	r3, #0
 8011578:	843b      	strh	r3, [r7, #32]
 801157a:	e0ae      	b.n	80116da <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801157c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011580:	49a6      	ldr	r1, [pc, #664]	; (801181c <etharp_find_entry+0x2d4>)
 8011582:	4613      	mov	r3, r2
 8011584:	005b      	lsls	r3, r3, #1
 8011586:	4413      	add	r3, r2
 8011588:	00db      	lsls	r3, r3, #3
 801158a:	440b      	add	r3, r1
 801158c:	3314      	adds	r3, #20
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011592:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011596:	2b0a      	cmp	r3, #10
 8011598:	d105      	bne.n	80115a6 <etharp_find_entry+0x5e>
 801159a:	7dfb      	ldrb	r3, [r7, #23]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d102      	bne.n	80115a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80115a0:	8c3b      	ldrh	r3, [r7, #32]
 80115a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80115a4:	e095      	b.n	80116d2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80115a6:	7dfb      	ldrb	r3, [r7, #23]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 8092 	beq.w	80116d2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80115ae:	7dfb      	ldrb	r3, [r7, #23]
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d009      	beq.n	80115c8 <etharp_find_entry+0x80>
 80115b4:	7dfb      	ldrb	r3, [r7, #23]
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d806      	bhi.n	80115c8 <etharp_find_entry+0x80>
 80115ba:	4b99      	ldr	r3, [pc, #612]	; (8011820 <etharp_find_entry+0x2d8>)
 80115bc:	f240 1223 	movw	r2, #291	; 0x123
 80115c0:	4998      	ldr	r1, [pc, #608]	; (8011824 <etharp_find_entry+0x2dc>)
 80115c2:	4899      	ldr	r0, [pc, #612]	; (8011828 <etharp_find_entry+0x2e0>)
 80115c4:	f002 fba0 	bl	8013d08 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d020      	beq.n	8011610 <etharp_find_entry+0xc8>
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6819      	ldr	r1, [r3, #0]
 80115d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115d6:	4891      	ldr	r0, [pc, #580]	; (801181c <etharp_find_entry+0x2d4>)
 80115d8:	4613      	mov	r3, r2
 80115da:	005b      	lsls	r3, r3, #1
 80115dc:	4413      	add	r3, r2
 80115de:	00db      	lsls	r3, r3, #3
 80115e0:	4403      	add	r3, r0
 80115e2:	3304      	adds	r3, #4
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4299      	cmp	r1, r3
 80115e8:	d112      	bne.n	8011610 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00c      	beq.n	801160a <etharp_find_entry+0xc2>
 80115f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115f4:	4989      	ldr	r1, [pc, #548]	; (801181c <etharp_find_entry+0x2d4>)
 80115f6:	4613      	mov	r3, r2
 80115f8:	005b      	lsls	r3, r3, #1
 80115fa:	4413      	add	r3, r2
 80115fc:	00db      	lsls	r3, r3, #3
 80115fe:	440b      	add	r3, r1
 8011600:	3308      	adds	r3, #8
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	429a      	cmp	r2, r3
 8011608:	d102      	bne.n	8011610 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801160a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801160e:	e100      	b.n	8011812 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011610:	7dfb      	ldrb	r3, [r7, #23]
 8011612:	2b01      	cmp	r3, #1
 8011614:	d140      	bne.n	8011698 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801161a:	4980      	ldr	r1, [pc, #512]	; (801181c <etharp_find_entry+0x2d4>)
 801161c:	4613      	mov	r3, r2
 801161e:	005b      	lsls	r3, r3, #1
 8011620:	4413      	add	r3, r2
 8011622:	00db      	lsls	r3, r3, #3
 8011624:	440b      	add	r3, r1
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d01a      	beq.n	8011662 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801162c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011630:	497a      	ldr	r1, [pc, #488]	; (801181c <etharp_find_entry+0x2d4>)
 8011632:	4613      	mov	r3, r2
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	4413      	add	r3, r2
 8011638:	00db      	lsls	r3, r3, #3
 801163a:	440b      	add	r3, r1
 801163c:	3312      	adds	r3, #18
 801163e:	881b      	ldrh	r3, [r3, #0]
 8011640:	8bba      	ldrh	r2, [r7, #28]
 8011642:	429a      	cmp	r2, r3
 8011644:	d845      	bhi.n	80116d2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011646:	8c3b      	ldrh	r3, [r7, #32]
 8011648:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801164a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801164e:	4973      	ldr	r1, [pc, #460]	; (801181c <etharp_find_entry+0x2d4>)
 8011650:	4613      	mov	r3, r2
 8011652:	005b      	lsls	r3, r3, #1
 8011654:	4413      	add	r3, r2
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	440b      	add	r3, r1
 801165a:	3312      	adds	r3, #18
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	83bb      	strh	r3, [r7, #28]
 8011660:	e037      	b.n	80116d2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011666:	496d      	ldr	r1, [pc, #436]	; (801181c <etharp_find_entry+0x2d4>)
 8011668:	4613      	mov	r3, r2
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	4413      	add	r3, r2
 801166e:	00db      	lsls	r3, r3, #3
 8011670:	440b      	add	r3, r1
 8011672:	3312      	adds	r3, #18
 8011674:	881b      	ldrh	r3, [r3, #0]
 8011676:	8b7a      	ldrh	r2, [r7, #26]
 8011678:	429a      	cmp	r2, r3
 801167a:	d82a      	bhi.n	80116d2 <etharp_find_entry+0x18a>
            old_pending = i;
 801167c:	8c3b      	ldrh	r3, [r7, #32]
 801167e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011684:	4965      	ldr	r1, [pc, #404]	; (801181c <etharp_find_entry+0x2d4>)
 8011686:	4613      	mov	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	4413      	add	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	440b      	add	r3, r1
 8011690:	3312      	adds	r3, #18
 8011692:	881b      	ldrh	r3, [r3, #0]
 8011694:	837b      	strh	r3, [r7, #26]
 8011696:	e01c      	b.n	80116d2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011698:	7dfb      	ldrb	r3, [r7, #23]
 801169a:	2b01      	cmp	r3, #1
 801169c:	d919      	bls.n	80116d2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801169e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116a2:	495e      	ldr	r1, [pc, #376]	; (801181c <etharp_find_entry+0x2d4>)
 80116a4:	4613      	mov	r3, r2
 80116a6:	005b      	lsls	r3, r3, #1
 80116a8:	4413      	add	r3, r2
 80116aa:	00db      	lsls	r3, r3, #3
 80116ac:	440b      	add	r3, r1
 80116ae:	3312      	adds	r3, #18
 80116b0:	881b      	ldrh	r3, [r3, #0]
 80116b2:	8b3a      	ldrh	r2, [r7, #24]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d80c      	bhi.n	80116d2 <etharp_find_entry+0x18a>
            old_stable = i;
 80116b8:	8c3b      	ldrh	r3, [r7, #32]
 80116ba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80116bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116c0:	4956      	ldr	r1, [pc, #344]	; (801181c <etharp_find_entry+0x2d4>)
 80116c2:	4613      	mov	r3, r2
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	4413      	add	r3, r2
 80116c8:	00db      	lsls	r3, r3, #3
 80116ca:	440b      	add	r3, r1
 80116cc:	3312      	adds	r3, #18
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116d2:	8c3b      	ldrh	r3, [r7, #32]
 80116d4:	3301      	adds	r3, #1
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	843b      	strh	r3, [r7, #32]
 80116da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80116de:	2b09      	cmp	r3, #9
 80116e0:	f77f af4c 	ble.w	801157c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80116e4:	7afb      	ldrb	r3, [r7, #11]
 80116e6:	f003 0302 	and.w	r3, r3, #2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d108      	bne.n	8011700 <etharp_find_entry+0x1b8>
 80116ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80116f2:	2b0a      	cmp	r3, #10
 80116f4:	d107      	bne.n	8011706 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80116f6:	7afb      	ldrb	r3, [r7, #11]
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d102      	bne.n	8011706 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011700:	f04f 33ff 	mov.w	r3, #4294967295
 8011704:	e085      	b.n	8011812 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011706:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801170a:	2b09      	cmp	r3, #9
 801170c:	dc02      	bgt.n	8011714 <etharp_find_entry+0x1cc>
    i = empty;
 801170e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011710:	843b      	strh	r3, [r7, #32]
 8011712:	e039      	b.n	8011788 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011714:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011718:	2b09      	cmp	r3, #9
 801171a:	dc14      	bgt.n	8011746 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801171c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801171e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011724:	493d      	ldr	r1, [pc, #244]	; (801181c <etharp_find_entry+0x2d4>)
 8011726:	4613      	mov	r3, r2
 8011728:	005b      	lsls	r3, r3, #1
 801172a:	4413      	add	r3, r2
 801172c:	00db      	lsls	r3, r3, #3
 801172e:	440b      	add	r3, r1
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d018      	beq.n	8011768 <etharp_find_entry+0x220>
 8011736:	4b3a      	ldr	r3, [pc, #232]	; (8011820 <etharp_find_entry+0x2d8>)
 8011738:	f240 126d 	movw	r2, #365	; 0x16d
 801173c:	493b      	ldr	r1, [pc, #236]	; (801182c <etharp_find_entry+0x2e4>)
 801173e:	483a      	ldr	r0, [pc, #232]	; (8011828 <etharp_find_entry+0x2e0>)
 8011740:	f002 fae2 	bl	8013d08 <iprintf>
 8011744:	e010      	b.n	8011768 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011746:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801174a:	2b09      	cmp	r3, #9
 801174c:	dc02      	bgt.n	8011754 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801174e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011750:	843b      	strh	r3, [r7, #32]
 8011752:	e009      	b.n	8011768 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011754:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011758:	2b09      	cmp	r3, #9
 801175a:	dc02      	bgt.n	8011762 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801175c:	8bfb      	ldrh	r3, [r7, #30]
 801175e:	843b      	strh	r3, [r7, #32]
 8011760:	e002      	b.n	8011768 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011762:	f04f 33ff 	mov.w	r3, #4294967295
 8011766:	e054      	b.n	8011812 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011768:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801176c:	2b09      	cmp	r3, #9
 801176e:	dd06      	ble.n	801177e <etharp_find_entry+0x236>
 8011770:	4b2b      	ldr	r3, [pc, #172]	; (8011820 <etharp_find_entry+0x2d8>)
 8011772:	f240 127f 	movw	r2, #383	; 0x17f
 8011776:	492e      	ldr	r1, [pc, #184]	; (8011830 <etharp_find_entry+0x2e8>)
 8011778:	482b      	ldr	r0, [pc, #172]	; (8011828 <etharp_find_entry+0x2e0>)
 801177a:	f002 fac5 	bl	8013d08 <iprintf>
    etharp_free_entry(i);
 801177e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011782:	4618      	mov	r0, r3
 8011784:	f7ff fe06 	bl	8011394 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011788:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801178c:	2b09      	cmp	r3, #9
 801178e:	dd06      	ble.n	801179e <etharp_find_entry+0x256>
 8011790:	4b23      	ldr	r3, [pc, #140]	; (8011820 <etharp_find_entry+0x2d8>)
 8011792:	f240 1283 	movw	r2, #387	; 0x183
 8011796:	4926      	ldr	r1, [pc, #152]	; (8011830 <etharp_find_entry+0x2e8>)
 8011798:	4823      	ldr	r0, [pc, #140]	; (8011828 <etharp_find_entry+0x2e0>)
 801179a:	f002 fab5 	bl	8013d08 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801179e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117a2:	491e      	ldr	r1, [pc, #120]	; (801181c <etharp_find_entry+0x2d4>)
 80117a4:	4613      	mov	r3, r2
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	4413      	add	r3, r2
 80117aa:	00db      	lsls	r3, r3, #3
 80117ac:	440b      	add	r3, r1
 80117ae:	3314      	adds	r3, #20
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d006      	beq.n	80117c4 <etharp_find_entry+0x27c>
 80117b6:	4b1a      	ldr	r3, [pc, #104]	; (8011820 <etharp_find_entry+0x2d8>)
 80117b8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80117bc:	491d      	ldr	r1, [pc, #116]	; (8011834 <etharp_find_entry+0x2ec>)
 80117be:	481a      	ldr	r0, [pc, #104]	; (8011828 <etharp_find_entry+0x2e0>)
 80117c0:	f002 faa2 	bl	8013d08 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00b      	beq.n	80117e2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80117ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6819      	ldr	r1, [r3, #0]
 80117d2:	4812      	ldr	r0, [pc, #72]	; (801181c <etharp_find_entry+0x2d4>)
 80117d4:	4613      	mov	r3, r2
 80117d6:	005b      	lsls	r3, r3, #1
 80117d8:	4413      	add	r3, r2
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	4403      	add	r3, r0
 80117de:	3304      	adds	r3, #4
 80117e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80117e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117e6:	490d      	ldr	r1, [pc, #52]	; (801181c <etharp_find_entry+0x2d4>)
 80117e8:	4613      	mov	r3, r2
 80117ea:	005b      	lsls	r3, r3, #1
 80117ec:	4413      	add	r3, r2
 80117ee:	00db      	lsls	r3, r3, #3
 80117f0:	440b      	add	r3, r1
 80117f2:	3312      	adds	r3, #18
 80117f4:	2200      	movs	r2, #0
 80117f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80117f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117fc:	4907      	ldr	r1, [pc, #28]	; (801181c <etharp_find_entry+0x2d4>)
 80117fe:	4613      	mov	r3, r2
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	4413      	add	r3, r2
 8011804:	00db      	lsls	r3, r3, #3
 8011806:	440b      	add	r3, r1
 8011808:	3308      	adds	r3, #8
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801180e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011812:	4618      	mov	r0, r3
 8011814:	3728      	adds	r7, #40	; 0x28
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	20008cdc 	.word	0x20008cdc
 8011820:	08017444 	.word	0x08017444
 8011824:	0801747c 	.word	0x0801747c
 8011828:	080174bc 	.word	0x080174bc
 801182c:	080174e4 	.word	0x080174e4
 8011830:	080174fc 	.word	0x080174fc
 8011834:	08017510 	.word	0x08017510

08011838 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b088      	sub	sp, #32
 801183c:	af02      	add	r7, sp, #8
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
 8011844:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801184c:	2b06      	cmp	r3, #6
 801184e:	d006      	beq.n	801185e <etharp_update_arp_entry+0x26>
 8011850:	4b48      	ldr	r3, [pc, #288]	; (8011974 <etharp_update_arp_entry+0x13c>)
 8011852:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011856:	4948      	ldr	r1, [pc, #288]	; (8011978 <etharp_update_arp_entry+0x140>)
 8011858:	4848      	ldr	r0, [pc, #288]	; (801197c <etharp_update_arp_entry+0x144>)
 801185a:	f002 fa55 	bl	8013d08 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d012      	beq.n	801188a <etharp_update_arp_entry+0x52>
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00e      	beq.n	801188a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	68f9      	ldr	r1, [r7, #12]
 8011872:	4618      	mov	r0, r3
 8011874:	f001 f8fe 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 8011878:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801187a:	2b00      	cmp	r3, #0
 801187c:	d105      	bne.n	801188a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011886:	2be0      	cmp	r3, #224	; 0xe0
 8011888:	d102      	bne.n	8011890 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801188a:	f06f 030f 	mvn.w	r3, #15
 801188e:	e06c      	b.n	801196a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011890:	78fb      	ldrb	r3, [r7, #3]
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	4619      	mov	r1, r3
 8011896:	68b8      	ldr	r0, [r7, #8]
 8011898:	f7ff fe56 	bl	8011548 <etharp_find_entry>
 801189c:	4603      	mov	r3, r0
 801189e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80118a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	da02      	bge.n	80118ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80118a8:	8afb      	ldrh	r3, [r7, #22]
 80118aa:	b25b      	sxtb	r3, r3
 80118ac:	e05d      	b.n	801196a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80118ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80118b2:	4933      	ldr	r1, [pc, #204]	; (8011980 <etharp_update_arp_entry+0x148>)
 80118b4:	4613      	mov	r3, r2
 80118b6:	005b      	lsls	r3, r3, #1
 80118b8:	4413      	add	r3, r2
 80118ba:	00db      	lsls	r3, r3, #3
 80118bc:	440b      	add	r3, r1
 80118be:	3314      	adds	r3, #20
 80118c0:	2202      	movs	r2, #2
 80118c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80118c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80118c8:	492d      	ldr	r1, [pc, #180]	; (8011980 <etharp_update_arp_entry+0x148>)
 80118ca:	4613      	mov	r3, r2
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	4413      	add	r3, r2
 80118d0:	00db      	lsls	r3, r3, #3
 80118d2:	440b      	add	r3, r1
 80118d4:	3308      	adds	r3, #8
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80118da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80118de:	4613      	mov	r3, r2
 80118e0:	005b      	lsls	r3, r3, #1
 80118e2:	4413      	add	r3, r2
 80118e4:	00db      	lsls	r3, r3, #3
 80118e6:	3308      	adds	r3, #8
 80118e8:	4a25      	ldr	r2, [pc, #148]	; (8011980 <etharp_update_arp_entry+0x148>)
 80118ea:	4413      	add	r3, r2
 80118ec:	3304      	adds	r3, #4
 80118ee:	2206      	movs	r2, #6
 80118f0:	6879      	ldr	r1, [r7, #4]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f002 f9d8 	bl	8013ca8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80118f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80118fc:	4920      	ldr	r1, [pc, #128]	; (8011980 <etharp_update_arp_entry+0x148>)
 80118fe:	4613      	mov	r3, r2
 8011900:	005b      	lsls	r3, r3, #1
 8011902:	4413      	add	r3, r2
 8011904:	00db      	lsls	r3, r3, #3
 8011906:	440b      	add	r3, r1
 8011908:	3312      	adds	r3, #18
 801190a:	2200      	movs	r2, #0
 801190c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011912:	491b      	ldr	r1, [pc, #108]	; (8011980 <etharp_update_arp_entry+0x148>)
 8011914:	4613      	mov	r3, r2
 8011916:	005b      	lsls	r3, r3, #1
 8011918:	4413      	add	r3, r2
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	440b      	add	r3, r1
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d021      	beq.n	8011968 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011924:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011928:	4915      	ldr	r1, [pc, #84]	; (8011980 <etharp_update_arp_entry+0x148>)
 801192a:	4613      	mov	r3, r2
 801192c:	005b      	lsls	r3, r3, #1
 801192e:	4413      	add	r3, r2
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	440b      	add	r3, r1
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011938:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801193c:	4910      	ldr	r1, [pc, #64]	; (8011980 <etharp_update_arp_entry+0x148>)
 801193e:	4613      	mov	r3, r2
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	4413      	add	r3, r2
 8011944:	00db      	lsls	r3, r3, #3
 8011946:	440b      	add	r3, r1
 8011948:	2200      	movs	r2, #0
 801194a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6939      	ldr	r1, [r7, #16]
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f002 f827 	bl	80139b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011962:	6938      	ldr	r0, [r7, #16]
 8011964:	f7f9 f9cc 	bl	800ad00 <pbuf_free>
  }
  return ERR_OK;
 8011968:	2300      	movs	r3, #0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3718      	adds	r7, #24
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	08017444 	.word	0x08017444
 8011978:	0801753c 	.word	0x0801753c
 801197c:	080174bc 	.word	0x080174bc
 8011980:	20008cdc 	.word	0x20008cdc

08011984 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801198c:	2300      	movs	r3, #0
 801198e:	60fb      	str	r3, [r7, #12]
 8011990:	e01e      	b.n	80119d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011992:	4913      	ldr	r1, [pc, #76]	; (80119e0 <etharp_cleanup_netif+0x5c>)
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	4613      	mov	r3, r2
 8011998:	005b      	lsls	r3, r3, #1
 801199a:	4413      	add	r3, r2
 801199c:	00db      	lsls	r3, r3, #3
 801199e:	440b      	add	r3, r1
 80119a0:	3314      	adds	r3, #20
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80119a6:	7afb      	ldrb	r3, [r7, #11]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00e      	beq.n	80119ca <etharp_cleanup_netif+0x46>
 80119ac:	490c      	ldr	r1, [pc, #48]	; (80119e0 <etharp_cleanup_netif+0x5c>)
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	4613      	mov	r3, r2
 80119b2:	005b      	lsls	r3, r3, #1
 80119b4:	4413      	add	r3, r2
 80119b6:	00db      	lsls	r3, r3, #3
 80119b8:	440b      	add	r3, r1
 80119ba:	3308      	adds	r3, #8
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d102      	bne.n	80119ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f7ff fce5 	bl	8011394 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3301      	adds	r3, #1
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b09      	cmp	r3, #9
 80119d4:	dddd      	ble.n	8011992 <etharp_cleanup_netif+0xe>
    }
  }
}
 80119d6:	bf00      	nop
 80119d8:	bf00      	nop
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	20008cdc 	.word	0x20008cdc

080119e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80119e4:	b5b0      	push	{r4, r5, r7, lr}
 80119e6:	b08a      	sub	sp, #40	; 0x28
 80119e8:	af04      	add	r7, sp, #16
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d107      	bne.n	8011a04 <etharp_input+0x20>
 80119f4:	4b3d      	ldr	r3, [pc, #244]	; (8011aec <etharp_input+0x108>)
 80119f6:	f240 228a 	movw	r2, #650	; 0x28a
 80119fa:	493d      	ldr	r1, [pc, #244]	; (8011af0 <etharp_input+0x10c>)
 80119fc:	483d      	ldr	r0, [pc, #244]	; (8011af4 <etharp_input+0x110>)
 80119fe:	f002 f983 	bl	8013d08 <iprintf>
 8011a02:	e06f      	b.n	8011ae4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	881b      	ldrh	r3, [r3, #0]
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a14:	d10c      	bne.n	8011a30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011a1a:	2b06      	cmp	r3, #6
 8011a1c:	d108      	bne.n	8011a30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011a22:	2b04      	cmp	r3, #4
 8011a24:	d104      	bne.n	8011a30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	885b      	ldrh	r3, [r3, #2]
 8011a2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011a2c:	2b08      	cmp	r3, #8
 8011a2e:	d003      	beq.n	8011a38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7f9 f965 	bl	800ad00 <pbuf_free>
    return;
 8011a36:	e055      	b.n	8011ae4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	330e      	adds	r3, #14
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	3318      	adds	r3, #24
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d102      	bne.n	8011a58 <etharp_input+0x74>
    for_us = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	75fb      	strb	r3, [r7, #23]
 8011a56:	e009      	b.n	8011a6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011a58:	68ba      	ldr	r2, [r7, #8]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	3304      	adds	r3, #4
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	bf0c      	ite	eq
 8011a64:	2301      	moveq	r3, #1
 8011a66:	2300      	movne	r3, #0
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	f103 0208 	add.w	r2, r3, #8
 8011a72:	7dfb      	ldrb	r3, [r7, #23]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <etharp_input+0x98>
 8011a78:	2301      	movs	r3, #1
 8011a7a:	e000      	b.n	8011a7e <etharp_input+0x9a>
 8011a7c:	2302      	movs	r3, #2
 8011a7e:	f107 010c 	add.w	r1, r7, #12
 8011a82:	6838      	ldr	r0, [r7, #0]
 8011a84:	f7ff fed8 	bl	8011838 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	88db      	ldrh	r3, [r3, #6]
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a92:	d003      	beq.n	8011a9c <etharp_input+0xb8>
 8011a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a98:	d01e      	beq.n	8011ad8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011a9a:	e020      	b.n	8011ade <etharp_input+0xfa>
      if (for_us) {
 8011a9c:	7dfb      	ldrb	r3, [r7, #23]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d01c      	beq.n	8011adc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011ab8:	693a      	ldr	r2, [r7, #16]
 8011aba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011abc:	2102      	movs	r1, #2
 8011abe:	9103      	str	r1, [sp, #12]
 8011ac0:	f107 010c 	add.w	r1, r7, #12
 8011ac4:	9102      	str	r1, [sp, #8]
 8011ac6:	9201      	str	r2, [sp, #4]
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	462b      	mov	r3, r5
 8011acc:	4622      	mov	r2, r4
 8011ace:	4601      	mov	r1, r0
 8011ad0:	6838      	ldr	r0, [r7, #0]
 8011ad2:	f000 faeb 	bl	80120ac <etharp_raw>
      break;
 8011ad6:	e001      	b.n	8011adc <etharp_input+0xf8>
      break;
 8011ad8:	bf00      	nop
 8011ada:	e000      	b.n	8011ade <etharp_input+0xfa>
      break;
 8011adc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f7f9 f90e 	bl	800ad00 <pbuf_free>
}
 8011ae4:	3718      	adds	r7, #24
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8011aea:	bf00      	nop
 8011aec:	08017444 	.word	0x08017444
 8011af0:	08017594 	.word	0x08017594
 8011af4:	080174bc 	.word	0x080174bc

08011af8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b086      	sub	sp, #24
 8011afc:	af02      	add	r7, sp, #8
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	4613      	mov	r3, r2
 8011b04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011b06:	79fa      	ldrb	r2, [r7, #7]
 8011b08:	4944      	ldr	r1, [pc, #272]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011b0a:	4613      	mov	r3, r2
 8011b0c:	005b      	lsls	r3, r3, #1
 8011b0e:	4413      	add	r3, r2
 8011b10:	00db      	lsls	r3, r3, #3
 8011b12:	440b      	add	r3, r1
 8011b14:	3314      	adds	r3, #20
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d806      	bhi.n	8011b2a <etharp_output_to_arp_index+0x32>
 8011b1c:	4b40      	ldr	r3, [pc, #256]	; (8011c20 <etharp_output_to_arp_index+0x128>)
 8011b1e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011b22:	4940      	ldr	r1, [pc, #256]	; (8011c24 <etharp_output_to_arp_index+0x12c>)
 8011b24:	4840      	ldr	r0, [pc, #256]	; (8011c28 <etharp_output_to_arp_index+0x130>)
 8011b26:	f002 f8ef 	bl	8013d08 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011b2a:	79fa      	ldrb	r2, [r7, #7]
 8011b2c:	493b      	ldr	r1, [pc, #236]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011b2e:	4613      	mov	r3, r2
 8011b30:	005b      	lsls	r3, r3, #1
 8011b32:	4413      	add	r3, r2
 8011b34:	00db      	lsls	r3, r3, #3
 8011b36:	440b      	add	r3, r1
 8011b38:	3314      	adds	r3, #20
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d153      	bne.n	8011be8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011b40:	79fa      	ldrb	r2, [r7, #7]
 8011b42:	4936      	ldr	r1, [pc, #216]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011b44:	4613      	mov	r3, r2
 8011b46:	005b      	lsls	r3, r3, #1
 8011b48:	4413      	add	r3, r2
 8011b4a:	00db      	lsls	r3, r3, #3
 8011b4c:	440b      	add	r3, r1
 8011b4e:	3312      	adds	r3, #18
 8011b50:	881b      	ldrh	r3, [r3, #0]
 8011b52:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011b56:	d919      	bls.n	8011b8c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011b58:	79fa      	ldrb	r2, [r7, #7]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	005b      	lsls	r3, r3, #1
 8011b5e:	4413      	add	r3, r2
 8011b60:	00db      	lsls	r3, r3, #3
 8011b62:	4a2e      	ldr	r2, [pc, #184]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011b64:	4413      	add	r3, r2
 8011b66:	3304      	adds	r3, #4
 8011b68:	4619      	mov	r1, r3
 8011b6a:	68f8      	ldr	r0, [r7, #12]
 8011b6c:	f000 fb4c 	bl	8012208 <etharp_request>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d138      	bne.n	8011be8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011b76:	79fa      	ldrb	r2, [r7, #7]
 8011b78:	4928      	ldr	r1, [pc, #160]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	005b      	lsls	r3, r3, #1
 8011b7e:	4413      	add	r3, r2
 8011b80:	00db      	lsls	r3, r3, #3
 8011b82:	440b      	add	r3, r1
 8011b84:	3314      	adds	r3, #20
 8011b86:	2203      	movs	r2, #3
 8011b88:	701a      	strb	r2, [r3, #0]
 8011b8a:	e02d      	b.n	8011be8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011b8c:	79fa      	ldrb	r2, [r7, #7]
 8011b8e:	4923      	ldr	r1, [pc, #140]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011b90:	4613      	mov	r3, r2
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	4413      	add	r3, r2
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	440b      	add	r3, r1
 8011b9a:	3312      	adds	r3, #18
 8011b9c:	881b      	ldrh	r3, [r3, #0]
 8011b9e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011ba2:	d321      	bcc.n	8011be8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011ba4:	79fa      	ldrb	r2, [r7, #7]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	005b      	lsls	r3, r3, #1
 8011baa:	4413      	add	r3, r2
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	4a1b      	ldr	r2, [pc, #108]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011bb0:	4413      	add	r3, r2
 8011bb2:	1d19      	adds	r1, r3, #4
 8011bb4:	79fa      	ldrb	r2, [r7, #7]
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	005b      	lsls	r3, r3, #1
 8011bba:	4413      	add	r3, r2
 8011bbc:	00db      	lsls	r3, r3, #3
 8011bbe:	3308      	adds	r3, #8
 8011bc0:	4a16      	ldr	r2, [pc, #88]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011bc2:	4413      	add	r3, r2
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f000 fafb 	bl	80121c4 <etharp_request_dst>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d109      	bne.n	8011be8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011bd4:	79fa      	ldrb	r2, [r7, #7]
 8011bd6:	4911      	ldr	r1, [pc, #68]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011bd8:	4613      	mov	r3, r2
 8011bda:	005b      	lsls	r3, r3, #1
 8011bdc:	4413      	add	r3, r2
 8011bde:	00db      	lsls	r3, r3, #3
 8011be0:	440b      	add	r3, r1
 8011be2:	3314      	adds	r3, #20
 8011be4:	2203      	movs	r2, #3
 8011be6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011bee:	79fa      	ldrb	r2, [r7, #7]
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	005b      	lsls	r3, r3, #1
 8011bf4:	4413      	add	r3, r2
 8011bf6:	00db      	lsls	r3, r3, #3
 8011bf8:	3308      	adds	r3, #8
 8011bfa:	4a08      	ldr	r2, [pc, #32]	; (8011c1c <etharp_output_to_arp_index+0x124>)
 8011bfc:	4413      	add	r3, r2
 8011bfe:	3304      	adds	r3, #4
 8011c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c04:	9200      	str	r2, [sp, #0]
 8011c06:	460a      	mov	r2, r1
 8011c08:	68b9      	ldr	r1, [r7, #8]
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	f001 fed0 	bl	80139b0 <ethernet_output>
 8011c10:	4603      	mov	r3, r0
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	20008cdc 	.word	0x20008cdc
 8011c20:	08017444 	.word	0x08017444
 8011c24:	080175b4 	.word	0x080175b4
 8011c28:	080174bc 	.word	0x080174bc

08011c2c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b08a      	sub	sp, #40	; 0x28
 8011c30:	af02      	add	r7, sp, #8
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <etharp_output+0x24>
 8011c42:	4b73      	ldr	r3, [pc, #460]	; (8011e10 <etharp_output+0x1e4>)
 8011c44:	f240 321e 	movw	r2, #798	; 0x31e
 8011c48:	4972      	ldr	r1, [pc, #456]	; (8011e14 <etharp_output+0x1e8>)
 8011c4a:	4873      	ldr	r0, [pc, #460]	; (8011e18 <etharp_output+0x1ec>)
 8011c4c:	f002 f85c 	bl	8013d08 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d106      	bne.n	8011c64 <etharp_output+0x38>
 8011c56:	4b6e      	ldr	r3, [pc, #440]	; (8011e10 <etharp_output+0x1e4>)
 8011c58:	f240 321f 	movw	r2, #799	; 0x31f
 8011c5c:	496f      	ldr	r1, [pc, #444]	; (8011e1c <etharp_output+0x1f0>)
 8011c5e:	486e      	ldr	r0, [pc, #440]	; (8011e18 <etharp_output+0x1ec>)
 8011c60:	f002 f852 	bl	8013d08 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d106      	bne.n	8011c78 <etharp_output+0x4c>
 8011c6a:	4b69      	ldr	r3, [pc, #420]	; (8011e10 <etharp_output+0x1e4>)
 8011c6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011c70:	496b      	ldr	r1, [pc, #428]	; (8011e20 <etharp_output+0x1f4>)
 8011c72:	4869      	ldr	r0, [pc, #420]	; (8011e18 <etharp_output+0x1ec>)
 8011c74:	f002 f848 	bl	8013d08 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	68f9      	ldr	r1, [r7, #12]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f000 fef8 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d002      	beq.n	8011c90 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011c8a:	4b66      	ldr	r3, [pc, #408]	; (8011e24 <etharp_output+0x1f8>)
 8011c8c:	61fb      	str	r3, [r7, #28]
 8011c8e:	e0af      	b.n	8011df0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c98:	2be0      	cmp	r3, #224	; 0xe0
 8011c9a:	d118      	bne.n	8011cce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011ca4:	235e      	movs	r3, #94	; 0x5e
 8011ca6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	3301      	adds	r3, #1
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	3302      	adds	r3, #2
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3303      	adds	r3, #3
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011cc6:	f107 0310 	add.w	r3, r7, #16
 8011cca:	61fb      	str	r3, [r7, #28]
 8011ccc:	e090      	b.n	8011df0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	405a      	eors	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3308      	adds	r3, #8
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4013      	ands	r3, r2
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d012      	beq.n	8011d0c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011cec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d00b      	beq.n	8011d0c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	330c      	adds	r3, #12
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d003      	beq.n	8011d06 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	330c      	adds	r3, #12
 8011d02:	61bb      	str	r3, [r7, #24]
 8011d04:	e002      	b.n	8011d0c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011d06:	f06f 0303 	mvn.w	r3, #3
 8011d0a:	e07d      	b.n	8011e08 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011d0c:	4b46      	ldr	r3, [pc, #280]	; (8011e28 <etharp_output+0x1fc>)
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	4619      	mov	r1, r3
 8011d12:	4a46      	ldr	r2, [pc, #280]	; (8011e2c <etharp_output+0x200>)
 8011d14:	460b      	mov	r3, r1
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	440b      	add	r3, r1
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	4413      	add	r3, r2
 8011d1e:	3314      	adds	r3, #20
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d925      	bls.n	8011d72 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011d26:	4b40      	ldr	r3, [pc, #256]	; (8011e28 <etharp_output+0x1fc>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	4a3f      	ldr	r2, [pc, #252]	; (8011e2c <etharp_output+0x200>)
 8011d2e:	460b      	mov	r3, r1
 8011d30:	005b      	lsls	r3, r3, #1
 8011d32:	440b      	add	r3, r1
 8011d34:	00db      	lsls	r3, r3, #3
 8011d36:	4413      	add	r3, r2
 8011d38:	3308      	adds	r3, #8
 8011d3a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d117      	bne.n	8011d72 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	4b38      	ldr	r3, [pc, #224]	; (8011e28 <etharp_output+0x1fc>)
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	4937      	ldr	r1, [pc, #220]	; (8011e2c <etharp_output+0x200>)
 8011d4e:	4603      	mov	r3, r0
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	4403      	add	r3, r0
 8011d54:	00db      	lsls	r3, r3, #3
 8011d56:	440b      	add	r3, r1
 8011d58:	3304      	adds	r3, #4
 8011d5a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d108      	bne.n	8011d72 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011d60:	4b31      	ldr	r3, [pc, #196]	; (8011e28 <etharp_output+0x1fc>)
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	461a      	mov	r2, r3
 8011d66:	68b9      	ldr	r1, [r7, #8]
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f7ff fec5 	bl	8011af8 <etharp_output_to_arp_index>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	e04a      	b.n	8011e08 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011d72:	2300      	movs	r3, #0
 8011d74:	75fb      	strb	r3, [r7, #23]
 8011d76:	e031      	b.n	8011ddc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011d78:	7dfa      	ldrb	r2, [r7, #23]
 8011d7a:	492c      	ldr	r1, [pc, #176]	; (8011e2c <etharp_output+0x200>)
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	005b      	lsls	r3, r3, #1
 8011d80:	4413      	add	r3, r2
 8011d82:	00db      	lsls	r3, r3, #3
 8011d84:	440b      	add	r3, r1
 8011d86:	3314      	adds	r3, #20
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d923      	bls.n	8011dd6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011d8e:	7dfa      	ldrb	r2, [r7, #23]
 8011d90:	4926      	ldr	r1, [pc, #152]	; (8011e2c <etharp_output+0x200>)
 8011d92:	4613      	mov	r3, r2
 8011d94:	005b      	lsls	r3, r3, #1
 8011d96:	4413      	add	r3, r2
 8011d98:	00db      	lsls	r3, r3, #3
 8011d9a:	440b      	add	r3, r1
 8011d9c:	3308      	adds	r3, #8
 8011d9e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d117      	bne.n	8011dd6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	6819      	ldr	r1, [r3, #0]
 8011daa:	7dfa      	ldrb	r2, [r7, #23]
 8011dac:	481f      	ldr	r0, [pc, #124]	; (8011e2c <etharp_output+0x200>)
 8011dae:	4613      	mov	r3, r2
 8011db0:	005b      	lsls	r3, r3, #1
 8011db2:	4413      	add	r3, r2
 8011db4:	00db      	lsls	r3, r3, #3
 8011db6:	4403      	add	r3, r0
 8011db8:	3304      	adds	r3, #4
 8011dba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011dbc:	4299      	cmp	r1, r3
 8011dbe:	d10a      	bne.n	8011dd6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011dc0:	4a19      	ldr	r2, [pc, #100]	; (8011e28 <etharp_output+0x1fc>)
 8011dc2:	7dfb      	ldrb	r3, [r7, #23]
 8011dc4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011dc6:	7dfb      	ldrb	r3, [r7, #23]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	68b9      	ldr	r1, [r7, #8]
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff fe93 	bl	8011af8 <etharp_output_to_arp_index>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	e018      	b.n	8011e08 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011dd6:	7dfb      	ldrb	r3, [r7, #23]
 8011dd8:	3301      	adds	r3, #1
 8011dda:	75fb      	strb	r3, [r7, #23]
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
 8011dde:	2b09      	cmp	r3, #9
 8011de0:	d9ca      	bls.n	8011d78 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	69b9      	ldr	r1, [r7, #24]
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f000 f822 	bl	8011e30 <etharp_query>
 8011dec:	4603      	mov	r3, r0
 8011dee:	e00b      	b.n	8011e08 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011dfa:	9300      	str	r3, [sp, #0]
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	68b9      	ldr	r1, [r7, #8]
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f001 fdd5 	bl	80139b0 <ethernet_output>
 8011e06:	4603      	mov	r3, r0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3720      	adds	r7, #32
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	08017444 	.word	0x08017444
 8011e14:	08017594 	.word	0x08017594
 8011e18:	080174bc 	.word	0x080174bc
 8011e1c:	080175e4 	.word	0x080175e4
 8011e20:	08017584 	.word	0x08017584
 8011e24:	08017c44 	.word	0x08017c44
 8011e28:	20008dcc 	.word	0x20008dcc
 8011e2c:	20008cdc 	.word	0x20008cdc

08011e30 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b08c      	sub	sp, #48	; 0x30
 8011e34:	af02      	add	r7, sp, #8
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	3326      	adds	r3, #38	; 0x26
 8011e40:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011e42:	23ff      	movs	r3, #255	; 0xff
 8011e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68f9      	ldr	r1, [r7, #12]
 8011e52:	4618      	mov	r0, r3
 8011e54:	f000 fe0e 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d10c      	bne.n	8011e78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011e66:	2be0      	cmp	r3, #224	; 0xe0
 8011e68:	d006      	beq.n	8011e78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d003      	beq.n	8011e78 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d102      	bne.n	8011e7e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011e78:	f06f 030f 	mvn.w	r3, #15
 8011e7c:	e101      	b.n	8012082 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	2101      	movs	r1, #1
 8011e82:	68b8      	ldr	r0, [r7, #8]
 8011e84:	f7ff fb60 	bl	8011548 <etharp_find_entry>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011e8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	da02      	bge.n	8011e9a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011e94:	8a7b      	ldrh	r3, [r7, #18]
 8011e96:	b25b      	sxtb	r3, r3
 8011e98:	e0f3      	b.n	8012082 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011e9a:	8a7b      	ldrh	r3, [r7, #18]
 8011e9c:	2b7e      	cmp	r3, #126	; 0x7e
 8011e9e:	d906      	bls.n	8011eae <etharp_query+0x7e>
 8011ea0:	4b7a      	ldr	r3, [pc, #488]	; (801208c <etharp_query+0x25c>)
 8011ea2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011ea6:	497a      	ldr	r1, [pc, #488]	; (8012090 <etharp_query+0x260>)
 8011ea8:	487a      	ldr	r0, [pc, #488]	; (8012094 <etharp_query+0x264>)
 8011eaa:	f001 ff2d 	bl	8013d08 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011eae:	8a7b      	ldrh	r3, [r7, #18]
 8011eb0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011eb2:	7c7a      	ldrb	r2, [r7, #17]
 8011eb4:	4978      	ldr	r1, [pc, #480]	; (8012098 <etharp_query+0x268>)
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	005b      	lsls	r3, r3, #1
 8011eba:	4413      	add	r3, r2
 8011ebc:	00db      	lsls	r3, r3, #3
 8011ebe:	440b      	add	r3, r1
 8011ec0:	3314      	adds	r3, #20
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d115      	bne.n	8011ef4 <etharp_query+0xc4>
    is_new_entry = 1;
 8011ec8:	2301      	movs	r3, #1
 8011eca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011ecc:	7c7a      	ldrb	r2, [r7, #17]
 8011ece:	4972      	ldr	r1, [pc, #456]	; (8012098 <etharp_query+0x268>)
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	005b      	lsls	r3, r3, #1
 8011ed4:	4413      	add	r3, r2
 8011ed6:	00db      	lsls	r3, r3, #3
 8011ed8:	440b      	add	r3, r1
 8011eda:	3314      	adds	r3, #20
 8011edc:	2201      	movs	r2, #1
 8011ede:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011ee0:	7c7a      	ldrb	r2, [r7, #17]
 8011ee2:	496d      	ldr	r1, [pc, #436]	; (8012098 <etharp_query+0x268>)
 8011ee4:	4613      	mov	r3, r2
 8011ee6:	005b      	lsls	r3, r3, #1
 8011ee8:	4413      	add	r3, r2
 8011eea:	00db      	lsls	r3, r3, #3
 8011eec:	440b      	add	r3, r1
 8011eee:	3308      	adds	r3, #8
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011ef4:	7c7a      	ldrb	r2, [r7, #17]
 8011ef6:	4968      	ldr	r1, [pc, #416]	; (8012098 <etharp_query+0x268>)
 8011ef8:	4613      	mov	r3, r2
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	4413      	add	r3, r2
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	440b      	add	r3, r1
 8011f02:	3314      	adds	r3, #20
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d011      	beq.n	8011f2e <etharp_query+0xfe>
 8011f0a:	7c7a      	ldrb	r2, [r7, #17]
 8011f0c:	4962      	ldr	r1, [pc, #392]	; (8012098 <etharp_query+0x268>)
 8011f0e:	4613      	mov	r3, r2
 8011f10:	005b      	lsls	r3, r3, #1
 8011f12:	4413      	add	r3, r2
 8011f14:	00db      	lsls	r3, r3, #3
 8011f16:	440b      	add	r3, r1
 8011f18:	3314      	adds	r3, #20
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	d806      	bhi.n	8011f2e <etharp_query+0xfe>
 8011f20:	4b5a      	ldr	r3, [pc, #360]	; (801208c <etharp_query+0x25c>)
 8011f22:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011f26:	495d      	ldr	r1, [pc, #372]	; (801209c <etharp_query+0x26c>)
 8011f28:	485a      	ldr	r0, [pc, #360]	; (8012094 <etharp_query+0x264>)
 8011f2a:	f001 feed 	bl	8013d08 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011f2e:	6a3b      	ldr	r3, [r7, #32]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d102      	bne.n	8011f3a <etharp_query+0x10a>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d10c      	bne.n	8011f54 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011f3a:	68b9      	ldr	r1, [r7, #8]
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f000 f963 	bl	8012208 <etharp_request>
 8011f42:	4603      	mov	r3, r0
 8011f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d102      	bne.n	8011f54 <etharp_query+0x124>
      return result;
 8011f4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011f52:	e096      	b.n	8012082 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <etharp_query+0x138>
 8011f5a:	4b4c      	ldr	r3, [pc, #304]	; (801208c <etharp_query+0x25c>)
 8011f5c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011f60:	494f      	ldr	r1, [pc, #316]	; (80120a0 <etharp_query+0x270>)
 8011f62:	484c      	ldr	r0, [pc, #304]	; (8012094 <etharp_query+0x264>)
 8011f64:	f001 fed0 	bl	8013d08 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011f68:	7c7a      	ldrb	r2, [r7, #17]
 8011f6a:	494b      	ldr	r1, [pc, #300]	; (8012098 <etharp_query+0x268>)
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	4413      	add	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	440b      	add	r3, r1
 8011f76:	3314      	adds	r3, #20
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d917      	bls.n	8011fae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011f7e:	4a49      	ldr	r2, [pc, #292]	; (80120a4 <etharp_query+0x274>)
 8011f80:	7c7b      	ldrb	r3, [r7, #17]
 8011f82:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011f84:	7c7a      	ldrb	r2, [r7, #17]
 8011f86:	4613      	mov	r3, r2
 8011f88:	005b      	lsls	r3, r3, #1
 8011f8a:	4413      	add	r3, r2
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	3308      	adds	r3, #8
 8011f90:	4a41      	ldr	r2, [pc, #260]	; (8012098 <etharp_query+0x268>)
 8011f92:	4413      	add	r3, r2
 8011f94:	3304      	adds	r3, #4
 8011f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f9a:	9200      	str	r2, [sp, #0]
 8011f9c:	697a      	ldr	r2, [r7, #20]
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f001 fd05 	bl	80139b0 <ethernet_output>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fac:	e067      	b.n	801207e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011fae:	7c7a      	ldrb	r2, [r7, #17]
 8011fb0:	4939      	ldr	r1, [pc, #228]	; (8012098 <etharp_query+0x268>)
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	4413      	add	r3, r2
 8011fb8:	00db      	lsls	r3, r3, #3
 8011fba:	440b      	add	r3, r1
 8011fbc:	3314      	adds	r3, #20
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d15c      	bne.n	801207e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011fcc:	e01c      	b.n	8012008 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	895a      	ldrh	r2, [r3, #10]
 8011fd2:	69fb      	ldr	r3, [r7, #28]
 8011fd4:	891b      	ldrh	r3, [r3, #8]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d10a      	bne.n	8011ff0 <etharp_query+0x1c0>
 8011fda:	69fb      	ldr	r3, [r7, #28]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d006      	beq.n	8011ff0 <etharp_query+0x1c0>
 8011fe2:	4b2a      	ldr	r3, [pc, #168]	; (801208c <etharp_query+0x25c>)
 8011fe4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011fe8:	492f      	ldr	r1, [pc, #188]	; (80120a8 <etharp_query+0x278>)
 8011fea:	482a      	ldr	r0, [pc, #168]	; (8012094 <etharp_query+0x264>)
 8011fec:	f001 fe8c 	bl	8013d08 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	7b1b      	ldrb	r3, [r3, #12]
 8011ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d002      	beq.n	8012002 <etharp_query+0x1d2>
        copy_needed = 1;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	61bb      	str	r3, [r7, #24]
        break;
 8012000:	e005      	b.n	801200e <etharp_query+0x1de>
      }
      p = p->next;
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d1df      	bne.n	8011fce <etharp_query+0x19e>
    }
    if (copy_needed) {
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d007      	beq.n	8012024 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	f44f 7120 	mov.w	r1, #640	; 0x280
 801201a:	200e      	movs	r0, #14
 801201c:	f7f9 f96e 	bl	800b2fc <pbuf_clone>
 8012020:	61f8      	str	r0, [r7, #28]
 8012022:	e004      	b.n	801202e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012028:	69f8      	ldr	r0, [r7, #28]
 801202a:	f7f8 ff09 	bl	800ae40 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d021      	beq.n	8012078 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012034:	7c7a      	ldrb	r2, [r7, #17]
 8012036:	4918      	ldr	r1, [pc, #96]	; (8012098 <etharp_query+0x268>)
 8012038:	4613      	mov	r3, r2
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	4413      	add	r3, r2
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	440b      	add	r3, r1
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00a      	beq.n	801205e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012048:	7c7a      	ldrb	r2, [r7, #17]
 801204a:	4913      	ldr	r1, [pc, #76]	; (8012098 <etharp_query+0x268>)
 801204c:	4613      	mov	r3, r2
 801204e:	005b      	lsls	r3, r3, #1
 8012050:	4413      	add	r3, r2
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	440b      	add	r3, r1
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4618      	mov	r0, r3
 801205a:	f7f8 fe51 	bl	800ad00 <pbuf_free>
      }
      arp_table[i].q = p;
 801205e:	7c7a      	ldrb	r2, [r7, #17]
 8012060:	490d      	ldr	r1, [pc, #52]	; (8012098 <etharp_query+0x268>)
 8012062:	4613      	mov	r3, r2
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	4413      	add	r3, r2
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	440b      	add	r3, r1
 801206c:	69fa      	ldr	r2, [r7, #28]
 801206e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012070:	2300      	movs	r3, #0
 8012072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012076:	e002      	b.n	801207e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012078:	23ff      	movs	r3, #255	; 0xff
 801207a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801207e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012082:	4618      	mov	r0, r3
 8012084:	3728      	adds	r7, #40	; 0x28
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	08017444 	.word	0x08017444
 8012090:	080175f0 	.word	0x080175f0
 8012094:	080174bc 	.word	0x080174bc
 8012098:	20008cdc 	.word	0x20008cdc
 801209c:	08017600 	.word	0x08017600
 80120a0:	080175e4 	.word	0x080175e4
 80120a4:	20008dcc 	.word	0x20008dcc
 80120a8:	08017628 	.word	0x08017628

080120ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08a      	sub	sp, #40	; 0x28
 80120b0:	af02      	add	r7, sp, #8
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80120ba:	2300      	movs	r3, #0
 80120bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d106      	bne.n	80120d2 <etharp_raw+0x26>
 80120c4:	4b3a      	ldr	r3, [pc, #232]	; (80121b0 <etharp_raw+0x104>)
 80120c6:	f240 4257 	movw	r2, #1111	; 0x457
 80120ca:	493a      	ldr	r1, [pc, #232]	; (80121b4 <etharp_raw+0x108>)
 80120cc:	483a      	ldr	r0, [pc, #232]	; (80121b8 <etharp_raw+0x10c>)
 80120ce:	f001 fe1b 	bl	8013d08 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80120d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120d6:	211c      	movs	r1, #28
 80120d8:	200e      	movs	r0, #14
 80120da:	f7f8 fb2d 	bl	800a738 <pbuf_alloc>
 80120de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d102      	bne.n	80120ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80120e6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ea:	e05d      	b.n	80121a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	895b      	ldrh	r3, [r3, #10]
 80120f0:	2b1b      	cmp	r3, #27
 80120f2:	d806      	bhi.n	8012102 <etharp_raw+0x56>
 80120f4:	4b2e      	ldr	r3, [pc, #184]	; (80121b0 <etharp_raw+0x104>)
 80120f6:	f240 4262 	movw	r2, #1122	; 0x462
 80120fa:	4930      	ldr	r1, [pc, #192]	; (80121bc <etharp_raw+0x110>)
 80120fc:	482e      	ldr	r0, [pc, #184]	; (80121b8 <etharp_raw+0x10c>)
 80120fe:	f001 fe03 	bl	8013d08 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012108:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801210a:	4618      	mov	r0, r3
 801210c:	f7f7 fa9a 	bl	8009644 <lwip_htons>
 8012110:	4603      	mov	r3, r0
 8012112:	461a      	mov	r2, r3
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801211e:	2b06      	cmp	r3, #6
 8012120:	d006      	beq.n	8012130 <etharp_raw+0x84>
 8012122:	4b23      	ldr	r3, [pc, #140]	; (80121b0 <etharp_raw+0x104>)
 8012124:	f240 4269 	movw	r2, #1129	; 0x469
 8012128:	4925      	ldr	r1, [pc, #148]	; (80121c0 <etharp_raw+0x114>)
 801212a:	4823      	ldr	r0, [pc, #140]	; (80121b8 <etharp_raw+0x10c>)
 801212c:	f001 fdec 	bl	8013d08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	3308      	adds	r3, #8
 8012134:	2206      	movs	r2, #6
 8012136:	6839      	ldr	r1, [r7, #0]
 8012138:	4618      	mov	r0, r3
 801213a:	f001 fdb5 	bl	8013ca8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	3312      	adds	r3, #18
 8012142:	2206      	movs	r2, #6
 8012144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012146:	4618      	mov	r0, r3
 8012148:	f001 fdae 	bl	8013ca8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	330e      	adds	r3, #14
 8012150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012152:	6812      	ldr	r2, [r2, #0]
 8012154:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	3318      	adds	r3, #24
 801215a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801215c:	6812      	ldr	r2, [r2, #0]
 801215e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	2200      	movs	r2, #0
 8012164:	701a      	strb	r2, [r3, #0]
 8012166:	2200      	movs	r2, #0
 8012168:	f042 0201 	orr.w	r2, r2, #1
 801216c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	2200      	movs	r2, #0
 8012172:	f042 0208 	orr.w	r2, r2, #8
 8012176:	709a      	strb	r2, [r3, #2]
 8012178:	2200      	movs	r2, #0
 801217a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2206      	movs	r2, #6
 8012180:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	2204      	movs	r2, #4
 8012186:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012188:	f640 0306 	movw	r3, #2054	; 0x806
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	69b9      	ldr	r1, [r7, #24]
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f001 fc0b 	bl	80139b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801219a:	69b8      	ldr	r0, [r7, #24]
 801219c:	f7f8 fdb0 	bl	800ad00 <pbuf_free>
  p = NULL;
 80121a0:	2300      	movs	r3, #0
 80121a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80121a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3720      	adds	r7, #32
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	08017444 	.word	0x08017444
 80121b4:	08017594 	.word	0x08017594
 80121b8:	080174bc 	.word	0x080174bc
 80121bc:	08017644 	.word	0x08017644
 80121c0:	08017678 	.word	0x08017678

080121c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b088      	sub	sp, #32
 80121c8:	af04      	add	r7, sp, #16
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80121e0:	2201      	movs	r2, #1
 80121e2:	9203      	str	r2, [sp, #12]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	9202      	str	r2, [sp, #8]
 80121e8:	4a06      	ldr	r2, [pc, #24]	; (8012204 <etharp_request_dst+0x40>)
 80121ea:	9201      	str	r2, [sp, #4]
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	4603      	mov	r3, r0
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f7ff ff5a 	bl	80120ac <etharp_raw>
 80121f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	08017c4c 	.word	0x08017c4c

08012208 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012212:	4a05      	ldr	r2, [pc, #20]	; (8012228 <etharp_request+0x20>)
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7ff ffd4 	bl	80121c4 <etharp_request_dst>
 801221c:	4603      	mov	r3, r0
}
 801221e:	4618      	mov	r0, r3
 8012220:	3708      	adds	r7, #8
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	08017c44 	.word	0x08017c44

0801222c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b08e      	sub	sp, #56	; 0x38
 8012230:	af04      	add	r7, sp, #16
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012236:	4b79      	ldr	r3, [pc, #484]	; (801241c <icmp_input+0x1f0>)
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	f003 030f 	and.w	r3, r3, #15
 8012244:	b2db      	uxtb	r3, r3
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	b2db      	uxtb	r3, r3
 801224a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801224c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801224e:	2b13      	cmp	r3, #19
 8012250:	f240 80cd 	bls.w	80123ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	895b      	ldrh	r3, [r3, #10]
 8012258:	2b03      	cmp	r3, #3
 801225a:	f240 80ca 	bls.w	80123f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012268:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801226c:	2b00      	cmp	r3, #0
 801226e:	f000 80b7 	beq.w	80123e0 <icmp_input+0x1b4>
 8012272:	2b08      	cmp	r3, #8
 8012274:	f040 80b7 	bne.w	80123e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012278:	4b69      	ldr	r3, [pc, #420]	; (8012420 <icmp_input+0x1f4>)
 801227a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801227c:	4b67      	ldr	r3, [pc, #412]	; (801241c <icmp_input+0x1f0>)
 801227e:	695b      	ldr	r3, [r3, #20]
 8012280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012284:	2be0      	cmp	r3, #224	; 0xe0
 8012286:	f000 80bb 	beq.w	8012400 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801228a:	4b64      	ldr	r3, [pc, #400]	; (801241c <icmp_input+0x1f0>)
 801228c:	695b      	ldr	r3, [r3, #20]
 801228e:	4a63      	ldr	r2, [pc, #396]	; (801241c <icmp_input+0x1f0>)
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	4611      	mov	r1, r2
 8012294:	4618      	mov	r0, r3
 8012296:	f000 fbed 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	f040 80b1 	bne.w	8012404 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	891b      	ldrh	r3, [r3, #8]
 80122a6:	2b07      	cmp	r3, #7
 80122a8:	f240 80a5 	bls.w	80123f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80122ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122ae:	330e      	adds	r3, #14
 80122b0:	4619      	mov	r1, r3
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f7f8 fc8e 	bl	800abd4 <pbuf_add_header>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d04b      	beq.n	8012356 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	891a      	ldrh	r2, [r3, #8]
 80122c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122c4:	4413      	add	r3, r2
 80122c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	891b      	ldrh	r3, [r3, #8]
 80122cc:	8b7a      	ldrh	r2, [r7, #26]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	f0c0 809a 	bcc.w	8012408 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80122d4:	8b7b      	ldrh	r3, [r7, #26]
 80122d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122da:	4619      	mov	r1, r3
 80122dc:	200e      	movs	r0, #14
 80122de:	f7f8 fa2b 	bl	800a738 <pbuf_alloc>
 80122e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	f000 8090 	beq.w	801240c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	895b      	ldrh	r3, [r3, #10]
 80122f0:	461a      	mov	r2, r3
 80122f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122f4:	3308      	adds	r3, #8
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d203      	bcs.n	8012302 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80122fa:	6978      	ldr	r0, [r7, #20]
 80122fc:	f7f8 fd00 	bl	800ad00 <pbuf_free>
          goto icmperr;
 8012300:	e085      	b.n	801240e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801230a:	4618      	mov	r0, r3
 801230c:	f001 fccc 	bl	8013ca8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012312:	4619      	mov	r1, r3
 8012314:	6978      	ldr	r0, [r7, #20]
 8012316:	f7f8 fc6d 	bl	800abf4 <pbuf_remove_header>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d009      	beq.n	8012334 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012320:	4b40      	ldr	r3, [pc, #256]	; (8012424 <icmp_input+0x1f8>)
 8012322:	22b6      	movs	r2, #182	; 0xb6
 8012324:	4940      	ldr	r1, [pc, #256]	; (8012428 <icmp_input+0x1fc>)
 8012326:	4841      	ldr	r0, [pc, #260]	; (801242c <icmp_input+0x200>)
 8012328:	f001 fcee 	bl	8013d08 <iprintf>
          pbuf_free(r);
 801232c:	6978      	ldr	r0, [r7, #20]
 801232e:	f7f8 fce7 	bl	800ad00 <pbuf_free>
          goto icmperr;
 8012332:	e06c      	b.n	801240e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012334:	6879      	ldr	r1, [r7, #4]
 8012336:	6978      	ldr	r0, [r7, #20]
 8012338:	f7f8 fe0a 	bl	800af50 <pbuf_copy>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d003      	beq.n	801234a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012342:	6978      	ldr	r0, [r7, #20]
 8012344:	f7f8 fcdc 	bl	800ad00 <pbuf_free>
          goto icmperr;
 8012348:	e061      	b.n	801240e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7f8 fcd8 	bl	800ad00 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	607b      	str	r3, [r7, #4]
 8012354:	e00f      	b.n	8012376 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012356:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012358:	330e      	adds	r3, #14
 801235a:	4619      	mov	r1, r3
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7f8 fc49 	bl	800abf4 <pbuf_remove_header>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d006      	beq.n	8012376 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012368:	4b2e      	ldr	r3, [pc, #184]	; (8012424 <icmp_input+0x1f8>)
 801236a:	22c7      	movs	r2, #199	; 0xc7
 801236c:	4930      	ldr	r1, [pc, #192]	; (8012430 <icmp_input+0x204>)
 801236e:	482f      	ldr	r0, [pc, #188]	; (801242c <icmp_input+0x200>)
 8012370:	f001 fcca 	bl	8013d08 <iprintf>
          goto icmperr;
 8012374:	e04b      	b.n	801240e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801237c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801237e:	4619      	mov	r1, r3
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7f8 fc27 	bl	800abd4 <pbuf_add_header>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d12b      	bne.n	80123e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801239a:	4b20      	ldr	r3, [pc, #128]	; (801241c <icmp_input+0x1f0>)
 801239c:	691a      	ldr	r2, [r3, #16]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	2200      	movs	r2, #0
 80123a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	2200      	movs	r2, #0
 80123ac:	709a      	strb	r2, [r3, #2]
 80123ae:	2200      	movs	r2, #0
 80123b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	22ff      	movs	r2, #255	; 0xff
 80123b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2200      	movs	r2, #0
 80123bc:	729a      	strb	r2, [r3, #10]
 80123be:	2200      	movs	r2, #0
 80123c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	9302      	str	r3, [sp, #8]
 80123c6:	2301      	movs	r3, #1
 80123c8:	9301      	str	r3, [sp, #4]
 80123ca:	2300      	movs	r3, #0
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	23ff      	movs	r3, #255	; 0xff
 80123d0:	2200      	movs	r2, #0
 80123d2:	69f9      	ldr	r1, [r7, #28]
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 fa75 	bl	80128c4 <ip4_output_if>
 80123da:	4603      	mov	r3, r0
 80123dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80123de:	e001      	b.n	80123e4 <icmp_input+0x1b8>
      break;
 80123e0:	bf00      	nop
 80123e2:	e000      	b.n	80123e6 <icmp_input+0x1ba>
      break;
 80123e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7f8 fc8a 	bl	800ad00 <pbuf_free>
  return;
 80123ec:	e013      	b.n	8012416 <icmp_input+0x1ea>
    goto lenerr;
 80123ee:	bf00      	nop
 80123f0:	e002      	b.n	80123f8 <icmp_input+0x1cc>
    goto lenerr;
 80123f2:	bf00      	nop
 80123f4:	e000      	b.n	80123f8 <icmp_input+0x1cc>
        goto lenerr;
 80123f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7f8 fc81 	bl	800ad00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80123fe:	e00a      	b.n	8012416 <icmp_input+0x1ea>
        goto icmperr;
 8012400:	bf00      	nop
 8012402:	e004      	b.n	801240e <icmp_input+0x1e2>
        goto icmperr;
 8012404:	bf00      	nop
 8012406:	e002      	b.n	801240e <icmp_input+0x1e2>
          goto icmperr;
 8012408:	bf00      	nop
 801240a:	e000      	b.n	801240e <icmp_input+0x1e2>
          goto icmperr;
 801240c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7f8 fc76 	bl	800ad00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012414:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012416:	3728      	adds	r7, #40	; 0x28
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	2000570c 	.word	0x2000570c
 8012420:	20005720 	.word	0x20005720
 8012424:	080176bc 	.word	0x080176bc
 8012428:	080176f4 	.word	0x080176f4
 801242c:	0801772c 	.word	0x0801772c
 8012430:	08017754 	.word	0x08017754

08012434 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	460b      	mov	r3, r1
 801243e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012440:	78fb      	ldrb	r3, [r7, #3]
 8012442:	461a      	mov	r2, r3
 8012444:	2103      	movs	r1, #3
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 f814 	bl	8012474 <icmp_send_response>
}
 801244c:	bf00      	nop
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	460b      	mov	r3, r1
 801245e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012460:	78fb      	ldrb	r3, [r7, #3]
 8012462:	461a      	mov	r2, r3
 8012464:	210b      	movs	r1, #11
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f000 f804 	bl	8012474 <icmp_send_response>
}
 801246c:	bf00      	nop
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b08c      	sub	sp, #48	; 0x30
 8012478:	af04      	add	r7, sp, #16
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	460b      	mov	r3, r1
 801247e:	70fb      	strb	r3, [r7, #3]
 8012480:	4613      	mov	r3, r2
 8012482:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012484:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012488:	2124      	movs	r1, #36	; 0x24
 801248a:	2022      	movs	r0, #34	; 0x22
 801248c:	f7f8 f954 	bl	800a738 <pbuf_alloc>
 8012490:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d04c      	beq.n	8012532 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012498:	69fb      	ldr	r3, [r7, #28]
 801249a:	895b      	ldrh	r3, [r3, #10]
 801249c:	2b23      	cmp	r3, #35	; 0x23
 801249e:	d806      	bhi.n	80124ae <icmp_send_response+0x3a>
 80124a0:	4b26      	ldr	r3, [pc, #152]	; (801253c <icmp_send_response+0xc8>)
 80124a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80124a6:	4926      	ldr	r1, [pc, #152]	; (8012540 <icmp_send_response+0xcc>)
 80124a8:	4826      	ldr	r0, [pc, #152]	; (8012544 <icmp_send_response+0xd0>)
 80124aa:	f001 fc2d 	bl	8013d08 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	78fa      	ldrb	r2, [r7, #3]
 80124be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	78ba      	ldrb	r2, [r7, #2]
 80124c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	2200      	movs	r2, #0
 80124ca:	711a      	strb	r2, [r3, #4]
 80124cc:	2200      	movs	r2, #0
 80124ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	2200      	movs	r2, #0
 80124d4:	719a      	strb	r2, [r3, #6]
 80124d6:	2200      	movs	r2, #0
 80124d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	f103 0008 	add.w	r0, r3, #8
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	221c      	movs	r2, #28
 80124e8:	4619      	mov	r1, r3
 80124ea:	f001 fbdd 	bl	8013ca8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80124f4:	f107 030c 	add.w	r3, r7, #12
 80124f8:	4618      	mov	r0, r3
 80124fa:	f000 f825 	bl	8012548 <ip4_route>
 80124fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d011      	beq.n	801252a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	2200      	movs	r2, #0
 801250a:	709a      	strb	r2, [r3, #2]
 801250c:	2200      	movs	r2, #0
 801250e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012510:	f107 020c 	add.w	r2, r7, #12
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	9302      	str	r3, [sp, #8]
 8012518:	2301      	movs	r3, #1
 801251a:	9301      	str	r3, [sp, #4]
 801251c:	2300      	movs	r3, #0
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	23ff      	movs	r3, #255	; 0xff
 8012522:	2100      	movs	r1, #0
 8012524:	69f8      	ldr	r0, [r7, #28]
 8012526:	f000 f9cd 	bl	80128c4 <ip4_output_if>
  }
  pbuf_free(q);
 801252a:	69f8      	ldr	r0, [r7, #28]
 801252c:	f7f8 fbe8 	bl	800ad00 <pbuf_free>
 8012530:	e000      	b.n	8012534 <icmp_send_response+0xc0>
    return;
 8012532:	bf00      	nop
}
 8012534:	3720      	adds	r7, #32
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop
 801253c:	080176bc 	.word	0x080176bc
 8012540:	08017788 	.word	0x08017788
 8012544:	0801772c 	.word	0x0801772c

08012548 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012550:	4b33      	ldr	r3, [pc, #204]	; (8012620 <ip4_route+0xd8>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	60fb      	str	r3, [r7, #12]
 8012556:	e036      	b.n	80125c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801255e:	f003 0301 	and.w	r3, r3, #1
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b00      	cmp	r3, #0
 8012566:	d02b      	beq.n	80125c0 <ip4_route+0x78>
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801256e:	089b      	lsrs	r3, r3, #2
 8012570:	f003 0301 	and.w	r3, r3, #1
 8012574:	b2db      	uxtb	r3, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d022      	beq.n	80125c0 <ip4_route+0x78>
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	3304      	adds	r3, #4
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d01d      	beq.n	80125c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	3304      	adds	r3, #4
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	405a      	eors	r2, r3
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	3308      	adds	r3, #8
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4013      	ands	r3, r2
 8012598:	2b00      	cmp	r3, #0
 801259a:	d101      	bne.n	80125a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	e038      	b.n	8012612 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125a6:	f003 0302 	and.w	r3, r3, #2
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d108      	bne.n	80125c0 <ip4_route+0x78>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	330c      	adds	r3, #12
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d101      	bne.n	80125c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	e028      	b.n	8012612 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	60fb      	str	r3, [r7, #12]
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d1c5      	bne.n	8012558 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80125cc:	4b15      	ldr	r3, [pc, #84]	; (8012624 <ip4_route+0xdc>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d01a      	beq.n	801260a <ip4_route+0xc2>
 80125d4:	4b13      	ldr	r3, [pc, #76]	; (8012624 <ip4_route+0xdc>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125dc:	f003 0301 	and.w	r3, r3, #1
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d012      	beq.n	801260a <ip4_route+0xc2>
 80125e4:	4b0f      	ldr	r3, [pc, #60]	; (8012624 <ip4_route+0xdc>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125ec:	f003 0304 	and.w	r3, r3, #4
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00a      	beq.n	801260a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80125f4:	4b0b      	ldr	r3, [pc, #44]	; (8012624 <ip4_route+0xdc>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	3304      	adds	r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d004      	beq.n	801260a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	2b7f      	cmp	r3, #127	; 0x7f
 8012608:	d101      	bne.n	801260e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801260a:	2300      	movs	r3, #0
 801260c:	e001      	b.n	8012612 <ip4_route+0xca>
  }

  return netif_default;
 801260e:	4b05      	ldr	r3, [pc, #20]	; (8012624 <ip4_route+0xdc>)
 8012610:	681b      	ldr	r3, [r3, #0]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3714      	adds	r7, #20
 8012616:	46bd      	mov	sp, r7
 8012618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop
 8012620:	20008c70 	.word	0x20008c70
 8012624:	20008c74 	.word	0x20008c74

08012628 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012636:	f003 0301 	and.w	r3, r3, #1
 801263a:	b2db      	uxtb	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	d016      	beq.n	801266e <ip4_input_accept+0x46>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	3304      	adds	r3, #4
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d011      	beq.n	801266e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801264a:	4b0b      	ldr	r3, [pc, #44]	; (8012678 <ip4_input_accept+0x50>)
 801264c:	695a      	ldr	r2, [r3, #20]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	3304      	adds	r3, #4
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	429a      	cmp	r2, r3
 8012656:	d008      	beq.n	801266a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012658:	4b07      	ldr	r3, [pc, #28]	; (8012678 <ip4_input_accept+0x50>)
 801265a:	695b      	ldr	r3, [r3, #20]
 801265c:	6879      	ldr	r1, [r7, #4]
 801265e:	4618      	mov	r0, r3
 8012660:	f000 fa08 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 8012664:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012666:	2b00      	cmp	r3, #0
 8012668:	d001      	beq.n	801266e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801266a:	2301      	movs	r3, #1
 801266c:	e000      	b.n	8012670 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801266e:	2300      	movs	r3, #0
}
 8012670:	4618      	mov	r0, r3
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	2000570c 	.word	0x2000570c

0801267c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b086      	sub	sp, #24
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	091b      	lsrs	r3, r3, #4
 8012692:	b2db      	uxtb	r3, r3
 8012694:	2b04      	cmp	r3, #4
 8012696:	d004      	beq.n	80126a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7f8 fb31 	bl	800ad00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	e107      	b.n	80128b2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	f003 030f 	and.w	r3, r3, #15
 80126aa:	b2db      	uxtb	r3, r3
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	885b      	ldrh	r3, [r3, #2]
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7f6 ffc3 	bl	8009644 <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	891b      	ldrh	r3, [r3, #8]
 80126c6:	89ba      	ldrh	r2, [r7, #12]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d204      	bcs.n	80126d6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80126cc:	89bb      	ldrh	r3, [r7, #12]
 80126ce:	4619      	mov	r1, r3
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7f8 f98f 	bl	800a9f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	895b      	ldrh	r3, [r3, #10]
 80126da:	89fa      	ldrh	r2, [r7, #14]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d807      	bhi.n	80126f0 <ip4_input+0x74>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	891b      	ldrh	r3, [r3, #8]
 80126e4:	89ba      	ldrh	r2, [r7, #12]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d802      	bhi.n	80126f0 <ip4_input+0x74>
 80126ea:	89fb      	ldrh	r3, [r7, #14]
 80126ec:	2b13      	cmp	r3, #19
 80126ee:	d804      	bhi.n	80126fa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7f8 fb05 	bl	800ad00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80126f6:	2300      	movs	r3, #0
 80126f8:	e0db      	b.n	80128b2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	4a6f      	ldr	r2, [pc, #444]	; (80128bc <ip4_input+0x240>)
 8012700:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	4a6d      	ldr	r2, [pc, #436]	; (80128bc <ip4_input+0x240>)
 8012708:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801270a:	4b6c      	ldr	r3, [pc, #432]	; (80128bc <ip4_input+0x240>)
 801270c:	695b      	ldr	r3, [r3, #20]
 801270e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012712:	2be0      	cmp	r3, #224	; 0xe0
 8012714:	d112      	bne.n	801273c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801271c:	f003 0301 	and.w	r3, r3, #1
 8012720:	b2db      	uxtb	r3, r3
 8012722:	2b00      	cmp	r3, #0
 8012724:	d007      	beq.n	8012736 <ip4_input+0xba>
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	3304      	adds	r3, #4
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <ip4_input+0xba>
      netif = inp;
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	613b      	str	r3, [r7, #16]
 8012734:	e02a      	b.n	801278c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012736:	2300      	movs	r3, #0
 8012738:	613b      	str	r3, [r7, #16]
 801273a:	e027      	b.n	801278c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801273c:	6838      	ldr	r0, [r7, #0]
 801273e:	f7ff ff73 	bl	8012628 <ip4_input_accept>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <ip4_input+0xd2>
      netif = inp;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	613b      	str	r3, [r7, #16]
 801274c:	e01e      	b.n	801278c <ip4_input+0x110>
    } else {
      netif = NULL;
 801274e:	2300      	movs	r3, #0
 8012750:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012752:	4b5a      	ldr	r3, [pc, #360]	; (80128bc <ip4_input+0x240>)
 8012754:	695b      	ldr	r3, [r3, #20]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	2b7f      	cmp	r3, #127	; 0x7f
 801275a:	d017      	beq.n	801278c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801275c:	4b58      	ldr	r3, [pc, #352]	; (80128c0 <ip4_input+0x244>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	613b      	str	r3, [r7, #16]
 8012762:	e00e      	b.n	8012782 <ip4_input+0x106>
          if (netif == inp) {
 8012764:	693a      	ldr	r2, [r7, #16]
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	429a      	cmp	r2, r3
 801276a:	d006      	beq.n	801277a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801276c:	6938      	ldr	r0, [r7, #16]
 801276e:	f7ff ff5b 	bl	8012628 <ip4_input_accept>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d108      	bne.n	801278a <ip4_input+0x10e>
 8012778:	e000      	b.n	801277c <ip4_input+0x100>
            continue;
 801277a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	613b      	str	r3, [r7, #16]
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1ed      	bne.n	8012764 <ip4_input+0xe8>
 8012788:	e000      	b.n	801278c <ip4_input+0x110>
            break;
 801278a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801278c:	4b4b      	ldr	r3, [pc, #300]	; (80128bc <ip4_input+0x240>)
 801278e:	691b      	ldr	r3, [r3, #16]
 8012790:	6839      	ldr	r1, [r7, #0]
 8012792:	4618      	mov	r0, r3
 8012794:	f000 f96e 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d105      	bne.n	80127aa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801279e:	4b47      	ldr	r3, [pc, #284]	; (80128bc <ip4_input+0x240>)
 80127a0:	691b      	ldr	r3, [r3, #16]
 80127a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80127a6:	2be0      	cmp	r3, #224	; 0xe0
 80127a8:	d104      	bne.n	80127b4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7f8 faa8 	bl	800ad00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80127b0:	2300      	movs	r3, #0
 80127b2:	e07e      	b.n	80128b2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d104      	bne.n	80127c4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7f8 faa0 	bl	800ad00 <pbuf_free>
    return ERR_OK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	e076      	b.n	80128b2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	88db      	ldrh	r3, [r3, #6]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	461a      	mov	r2, r3
 80127cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80127d0:	4013      	ands	r3, r2
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00b      	beq.n	80127ee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 fd22 	bl	8013220 <ip4_reass>
 80127dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d101      	bne.n	80127e8 <ip4_input+0x16c>
      return ERR_OK;
 80127e4:	2300      	movs	r3, #0
 80127e6:	e064      	b.n	80128b2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80127ee:	4a33      	ldr	r2, [pc, #204]	; (80128bc <ip4_input+0x240>)
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80127f4:	4a31      	ldr	r2, [pc, #196]	; (80128bc <ip4_input+0x240>)
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80127fa:	4a30      	ldr	r2, [pc, #192]	; (80128bc <ip4_input+0x240>)
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	f003 030f 	and.w	r3, r3, #15
 8012808:	b2db      	uxtb	r3, r3
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	b2db      	uxtb	r3, r3
 801280e:	b29a      	uxth	r2, r3
 8012810:	4b2a      	ldr	r3, [pc, #168]	; (80128bc <ip4_input+0x240>)
 8012812:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012814:	89fb      	ldrh	r3, [r7, #14]
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7f8 f9eb 	bl	800abf4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	7a5b      	ldrb	r3, [r3, #9]
 8012822:	2b11      	cmp	r3, #17
 8012824:	d006      	beq.n	8012834 <ip4_input+0x1b8>
 8012826:	2b11      	cmp	r3, #17
 8012828:	dc13      	bgt.n	8012852 <ip4_input+0x1d6>
 801282a:	2b01      	cmp	r3, #1
 801282c:	d00c      	beq.n	8012848 <ip4_input+0x1cc>
 801282e:	2b06      	cmp	r3, #6
 8012830:	d005      	beq.n	801283e <ip4_input+0x1c2>
 8012832:	e00e      	b.n	8012852 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012834:	6839      	ldr	r1, [r7, #0]
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7fe f8e6 	bl	8010a08 <udp_input>
        break;
 801283c:	e026      	b.n	801288c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801283e:	6839      	ldr	r1, [r7, #0]
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7fa f927 	bl	800ca94 <tcp_input>
        break;
 8012846:	e021      	b.n	801288c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012848:	6839      	ldr	r1, [r7, #0]
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ff fcee 	bl	801222c <icmp_input>
        break;
 8012850:	e01c      	b.n	801288c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012852:	4b1a      	ldr	r3, [pc, #104]	; (80128bc <ip4_input+0x240>)
 8012854:	695b      	ldr	r3, [r3, #20]
 8012856:	6939      	ldr	r1, [r7, #16]
 8012858:	4618      	mov	r0, r3
 801285a:	f000 f90b 	bl	8012a74 <ip4_addr_isbroadcast_u32>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d10f      	bne.n	8012884 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012864:	4b15      	ldr	r3, [pc, #84]	; (80128bc <ip4_input+0x240>)
 8012866:	695b      	ldr	r3, [r3, #20]
 8012868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801286c:	2be0      	cmp	r3, #224	; 0xe0
 801286e:	d009      	beq.n	8012884 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012870:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012874:	4619      	mov	r1, r3
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7f8 fa2f 	bl	800acda <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801287c:	2102      	movs	r1, #2
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff fdd8 	bl	8012434 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7f8 fa3b 	bl	800ad00 <pbuf_free>
        break;
 801288a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801288c:	4b0b      	ldr	r3, [pc, #44]	; (80128bc <ip4_input+0x240>)
 801288e:	2200      	movs	r2, #0
 8012890:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012892:	4b0a      	ldr	r3, [pc, #40]	; (80128bc <ip4_input+0x240>)
 8012894:	2200      	movs	r2, #0
 8012896:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012898:	4b08      	ldr	r3, [pc, #32]	; (80128bc <ip4_input+0x240>)
 801289a:	2200      	movs	r2, #0
 801289c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801289e:	4b07      	ldr	r3, [pc, #28]	; (80128bc <ip4_input+0x240>)
 80128a0:	2200      	movs	r2, #0
 80128a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80128a4:	4b05      	ldr	r3, [pc, #20]	; (80128bc <ip4_input+0x240>)
 80128a6:	2200      	movs	r2, #0
 80128a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80128aa:	4b04      	ldr	r3, [pc, #16]	; (80128bc <ip4_input+0x240>)
 80128ac:	2200      	movs	r2, #0
 80128ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3718      	adds	r7, #24
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	2000570c 	.word	0x2000570c
 80128c0:	20008c70 	.word	0x20008c70

080128c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b08a      	sub	sp, #40	; 0x28
 80128c8:	af04      	add	r7, sp, #16
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d009      	beq.n	80128f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d003      	beq.n	80128ea <ip4_output_if+0x26>
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d102      	bne.n	80128f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80128ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ec:	3304      	adds	r3, #4
 80128ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80128f0:	78fa      	ldrb	r2, [r7, #3]
 80128f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f4:	9302      	str	r3, [sp, #8]
 80128f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80128fa:	9301      	str	r3, [sp, #4]
 80128fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	4613      	mov	r3, r2
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	6979      	ldr	r1, [r7, #20]
 8012908:	68f8      	ldr	r0, [r7, #12]
 801290a:	f000 f805 	bl	8012918 <ip4_output_if_src>
 801290e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012910:	4618      	mov	r0, r3
 8012912:	3718      	adds	r7, #24
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b088      	sub	sp, #32
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
 8012924:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	7b9b      	ldrb	r3, [r3, #14]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d006      	beq.n	801293c <ip4_output_if_src+0x24>
 801292e:	4b4b      	ldr	r3, [pc, #300]	; (8012a5c <ip4_output_if_src+0x144>)
 8012930:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012934:	494a      	ldr	r1, [pc, #296]	; (8012a60 <ip4_output_if_src+0x148>)
 8012936:	484b      	ldr	r0, [pc, #300]	; (8012a64 <ip4_output_if_src+0x14c>)
 8012938:	f001 f9e6 	bl	8013d08 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d060      	beq.n	8012a04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012942:	2314      	movs	r3, #20
 8012944:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012946:	2114      	movs	r1, #20
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f7f8 f943 	bl	800abd4 <pbuf_add_header>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012954:	f06f 0301 	mvn.w	r3, #1
 8012958:	e07c      	b.n	8012a54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	895b      	ldrh	r3, [r3, #10]
 8012964:	2b13      	cmp	r3, #19
 8012966:	d806      	bhi.n	8012976 <ip4_output_if_src+0x5e>
 8012968:	4b3c      	ldr	r3, [pc, #240]	; (8012a5c <ip4_output_if_src+0x144>)
 801296a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801296e:	493e      	ldr	r1, [pc, #248]	; (8012a68 <ip4_output_if_src+0x150>)
 8012970:	483c      	ldr	r0, [pc, #240]	; (8012a64 <ip4_output_if_src+0x14c>)
 8012972:	f001 f9c9 	bl	8013d08 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	78fa      	ldrb	r2, [r7, #3]
 801297a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801297c:	69fb      	ldr	r3, [r7, #28]
 801297e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012982:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681a      	ldr	r2, [r3, #0]
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801298c:	8b7b      	ldrh	r3, [r7, #26]
 801298e:	089b      	lsrs	r3, r3, #2
 8012990:	b29b      	uxth	r3, r3
 8012992:	b2db      	uxtb	r3, r3
 8012994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012998:	b2da      	uxtb	r2, r3
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80129a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	891b      	ldrh	r3, [r3, #8]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7f6 fe4a 	bl	8009644 <lwip_htons>
 80129b0:	4603      	mov	r3, r0
 80129b2:	461a      	mov	r2, r3
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	2200      	movs	r2, #0
 80129bc:	719a      	strb	r2, [r3, #6]
 80129be:	2200      	movs	r2, #0
 80129c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80129c2:	4b2a      	ldr	r3, [pc, #168]	; (8012a6c <ip4_output_if_src+0x154>)
 80129c4:	881b      	ldrh	r3, [r3, #0]
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7f6 fe3c 	bl	8009644 <lwip_htons>
 80129cc:	4603      	mov	r3, r0
 80129ce:	461a      	mov	r2, r3
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80129d4:	4b25      	ldr	r3, [pc, #148]	; (8012a6c <ip4_output_if_src+0x154>)
 80129d6:	881b      	ldrh	r3, [r3, #0]
 80129d8:	3301      	adds	r3, #1
 80129da:	b29a      	uxth	r2, r3
 80129dc:	4b23      	ldr	r3, [pc, #140]	; (8012a6c <ip4_output_if_src+0x154>)
 80129de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d104      	bne.n	80129f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80129e6:	4b22      	ldr	r3, [pc, #136]	; (8012a70 <ip4_output_if_src+0x158>)
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	60da      	str	r2, [r3, #12]
 80129ee:	e003      	b.n	80129f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	2200      	movs	r2, #0
 80129fc:	729a      	strb	r2, [r3, #10]
 80129fe:	2200      	movs	r2, #0
 8012a00:	72da      	strb	r2, [r3, #11]
 8012a02:	e00f      	b.n	8012a24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	895b      	ldrh	r3, [r3, #10]
 8012a08:	2b13      	cmp	r3, #19
 8012a0a:	d802      	bhi.n	8012a12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012a0c:	f06f 0301 	mvn.w	r3, #1
 8012a10:	e020      	b.n	8012a54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	691b      	ldr	r3, [r3, #16]
 8012a1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012a1e:	f107 0314 	add.w	r3, r7, #20
 8012a22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00c      	beq.n	8012a46 <ip4_output_if_src+0x12e>
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	891a      	ldrh	r2, [r3, #8]
 8012a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d906      	bls.n	8012a46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f000 fde3 	bl	8013608 <ip4_frag>
 8012a42:	4603      	mov	r3, r0
 8012a44:	e006      	b.n	8012a54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a48:	695b      	ldr	r3, [r3, #20]
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	68f9      	ldr	r1, [r7, #12]
 8012a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a50:	4798      	blx	r3
 8012a52:	4603      	mov	r3, r0
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3720      	adds	r7, #32
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	080177b4 	.word	0x080177b4
 8012a60:	080177e8 	.word	0x080177e8
 8012a64:	080177f4 	.word	0x080177f4
 8012a68:	0801781c 	.word	0x0801781c
 8012a6c:	20008dce 	.word	0x20008dce
 8012a70:	08017c40 	.word	0x08017c40

08012a74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b085      	sub	sp, #20
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a88:	d002      	beq.n	8012a90 <ip4_addr_isbroadcast_u32+0x1c>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d101      	bne.n	8012a94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012a90:	2301      	movs	r3, #1
 8012a92:	e02a      	b.n	8012aea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a9a:	f003 0302 	and.w	r3, r3, #2
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d101      	bne.n	8012aa6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	e021      	b.n	8012aea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d101      	bne.n	8012ab6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	e019      	b.n	8012aea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	3304      	adds	r3, #4
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	405a      	eors	r2, r3
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	3308      	adds	r3, #8
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4013      	ands	r3, r2
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10d      	bne.n	8012ae8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	3308      	adds	r3, #8
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	43da      	mvns	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	3308      	adds	r3, #8
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d101      	bne.n	8012ae8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e000      	b.n	8012aea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012ae8:	2300      	movs	r3, #0
  }
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3714      	adds	r7, #20
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr
	...

08012af8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8012b00:	2210      	movs	r2, #16
 8012b02:	4904      	ldr	r1, [pc, #16]	; (8012b14 <ip4addr_ntoa+0x1c>)
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f000 f807 	bl	8012b18 <ip4addr_ntoa_r>
 8012b0a:	4603      	mov	r3, r0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	20008dd0 	.word	0x20008dd0

08012b18 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b08d      	sub	sp, #52	; 0x34
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8012b24:	2300      	movs	r3, #0
 8012b26:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8012b32:	f107 0318 	add.w	r3, r7, #24
 8012b36:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b3e:	e058      	b.n	8012bf2 <ip4addr_ntoa_r+0xda>
    i = 0;
 8012b40:	2300      	movs	r3, #0
 8012b42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8012b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b48:	781a      	ldrb	r2, [r3, #0]
 8012b4a:	4b32      	ldr	r3, [pc, #200]	; (8012c14 <ip4addr_ntoa_r+0xfc>)
 8012b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8012b50:	08d9      	lsrs	r1, r3, #3
 8012b52:	460b      	mov	r3, r1
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	440b      	add	r3, r1
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8012b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	4a2c      	ldr	r2, [pc, #176]	; (8012c14 <ip4addr_ntoa_r+0xfc>)
 8012b64:	fba2 2303 	umull	r2, r3, r2, r3
 8012b68:	08db      	lsrs	r3, r3, #3
 8012b6a:	b2da      	uxtb	r2, r3
 8012b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8012b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b74:	1c5a      	adds	r2, r3, #1
 8012b76:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	7ffb      	ldrb	r3, [r7, #31]
 8012b7e:	3330      	adds	r3, #48	; 0x30
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8012b86:	443b      	add	r3, r7
 8012b88:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8012b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1d8      	bne.n	8012b46 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012b94:	e011      	b.n	8012bba <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8012b96:	6a3b      	ldr	r3, [r7, #32]
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	623a      	str	r2, [r7, #32]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	dc01      	bgt.n	8012ba6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	e030      	b.n	8012c08 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8012ba6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bac:	1c59      	adds	r1, r3, #1
 8012bae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012bb0:	3230      	adds	r2, #48	; 0x30
 8012bb2:	443a      	add	r2, r7
 8012bb4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8012bb8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8012bba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012bbe:	1e5a      	subs	r2, r3, #1
 8012bc0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d1e6      	bne.n	8012b96 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	1c5a      	adds	r2, r3, #1
 8012bcc:	623a      	str	r2, [r7, #32]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	dc01      	bgt.n	8012bd8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e017      	b.n	8012c08 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8012bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bda:	1c5a      	adds	r2, r3, #1
 8012bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012bde:	222e      	movs	r2, #46	; 0x2e
 8012be0:	701a      	strb	r2, [r3, #0]
    ap++;
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	3301      	adds	r3, #1
 8012be6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bec:	3301      	adds	r3, #1
 8012bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bf6:	2b03      	cmp	r3, #3
 8012bf8:	d9a2      	bls.n	8012b40 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8012bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c02:	2200      	movs	r2, #0
 8012c04:	701a      	strb	r2, [r3, #0]
  return buf;
 8012c06:	68bb      	ldr	r3, [r7, #8]
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3734      	adds	r7, #52	; 0x34
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c12:	4770      	bx	lr
 8012c14:	cccccccd 	.word	0xcccccccd

08012c18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b084      	sub	sp, #16
 8012c1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012c22:	4b12      	ldr	r3, [pc, #72]	; (8012c6c <ip_reass_tmr+0x54>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012c28:	e018      	b.n	8012c5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	7fdb      	ldrb	r3, [r3, #31]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d00b      	beq.n	8012c4a <ip_reass_tmr+0x32>
      r->timer--;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	7fdb      	ldrb	r3, [r3, #31]
 8012c36:	3b01      	subs	r3, #1
 8012c38:	b2da      	uxtb	r2, r3
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	60fb      	str	r3, [r7, #12]
 8012c48:	e008      	b.n	8012c5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012c54:	68b9      	ldr	r1, [r7, #8]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 f80a 	bl	8012c70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1e3      	bne.n	8012c2a <ip_reass_tmr+0x12>
    }
  }
}
 8012c62:	bf00      	nop
 8012c64:	bf00      	nop
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	20008de0 	.word	0x20008de0

08012c70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b088      	sub	sp, #32
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012c7e:	683a      	ldr	r2, [r7, #0]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d105      	bne.n	8012c92 <ip_reass_free_complete_datagram+0x22>
 8012c86:	4b45      	ldr	r3, [pc, #276]	; (8012d9c <ip_reass_free_complete_datagram+0x12c>)
 8012c88:	22ab      	movs	r2, #171	; 0xab
 8012c8a:	4945      	ldr	r1, [pc, #276]	; (8012da0 <ip_reass_free_complete_datagram+0x130>)
 8012c8c:	4845      	ldr	r0, [pc, #276]	; (8012da4 <ip_reass_free_complete_datagram+0x134>)
 8012c8e:	f001 f83b 	bl	8013d08 <iprintf>
  if (prev != NULL) {
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d00a      	beq.n	8012cae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d005      	beq.n	8012cae <ip_reass_free_complete_datagram+0x3e>
 8012ca2:	4b3e      	ldr	r3, [pc, #248]	; (8012d9c <ip_reass_free_complete_datagram+0x12c>)
 8012ca4:	22ad      	movs	r2, #173	; 0xad
 8012ca6:	4940      	ldr	r1, [pc, #256]	; (8012da8 <ip_reass_free_complete_datagram+0x138>)
 8012ca8:	483e      	ldr	r0, [pc, #248]	; (8012da4 <ip_reass_free_complete_datagram+0x134>)
 8012caa:	f001 f82d 	bl	8013d08 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	889b      	ldrh	r3, [r3, #4]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d12a      	bne.n	8012d16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	6858      	ldr	r0, [r3, #4]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	3308      	adds	r3, #8
 8012cd6:	2214      	movs	r2, #20
 8012cd8:	4619      	mov	r1, r3
 8012cda:	f000 ffe5 	bl	8013ca8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012cde:	2101      	movs	r1, #1
 8012ce0:	69b8      	ldr	r0, [r7, #24]
 8012ce2:	f7ff fbb7 	bl	8012454 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012ce6:	69b8      	ldr	r0, [r7, #24]
 8012ce8:	f7f8 f892 	bl	800ae10 <pbuf_clen>
 8012cec:	4603      	mov	r3, r0
 8012cee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012cf0:	8bfa      	ldrh	r2, [r7, #30]
 8012cf2:	8a7b      	ldrh	r3, [r7, #18]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cfa:	db05      	blt.n	8012d08 <ip_reass_free_complete_datagram+0x98>
 8012cfc:	4b27      	ldr	r3, [pc, #156]	; (8012d9c <ip_reass_free_complete_datagram+0x12c>)
 8012cfe:	22bc      	movs	r2, #188	; 0xbc
 8012d00:	492a      	ldr	r1, [pc, #168]	; (8012dac <ip_reass_free_complete_datagram+0x13c>)
 8012d02:	4828      	ldr	r0, [pc, #160]	; (8012da4 <ip_reass_free_complete_datagram+0x134>)
 8012d04:	f001 f800 	bl	8013d08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012d08:	8bfa      	ldrh	r2, [r7, #30]
 8012d0a:	8a7b      	ldrh	r3, [r7, #18]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012d10:	69b8      	ldr	r0, [r7, #24]
 8012d12:	f7f7 fff5 	bl	800ad00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012d1c:	e01f      	b.n	8012d5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012d2e:	68f8      	ldr	r0, [r7, #12]
 8012d30:	f7f8 f86e 	bl	800ae10 <pbuf_clen>
 8012d34:	4603      	mov	r3, r0
 8012d36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012d38:	8bfa      	ldrh	r2, [r7, #30]
 8012d3a:	8a7b      	ldrh	r3, [r7, #18]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d42:	db05      	blt.n	8012d50 <ip_reass_free_complete_datagram+0xe0>
 8012d44:	4b15      	ldr	r3, [pc, #84]	; (8012d9c <ip_reass_free_complete_datagram+0x12c>)
 8012d46:	22cc      	movs	r2, #204	; 0xcc
 8012d48:	4918      	ldr	r1, [pc, #96]	; (8012dac <ip_reass_free_complete_datagram+0x13c>)
 8012d4a:	4816      	ldr	r0, [pc, #88]	; (8012da4 <ip_reass_free_complete_datagram+0x134>)
 8012d4c:	f000 ffdc 	bl	8013d08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012d50:	8bfa      	ldrh	r2, [r7, #30]
 8012d52:	8a7b      	ldrh	r3, [r7, #18]
 8012d54:	4413      	add	r3, r2
 8012d56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7f7 ffd1 	bl	800ad00 <pbuf_free>
  while (p != NULL) {
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d1dc      	bne.n	8012d1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012d64:	6839      	ldr	r1, [r7, #0]
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f000 f8c2 	bl	8012ef0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012d6c:	4b10      	ldr	r3, [pc, #64]	; (8012db0 <ip_reass_free_complete_datagram+0x140>)
 8012d6e:	881b      	ldrh	r3, [r3, #0]
 8012d70:	8bfa      	ldrh	r2, [r7, #30]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d905      	bls.n	8012d82 <ip_reass_free_complete_datagram+0x112>
 8012d76:	4b09      	ldr	r3, [pc, #36]	; (8012d9c <ip_reass_free_complete_datagram+0x12c>)
 8012d78:	22d2      	movs	r2, #210	; 0xd2
 8012d7a:	490e      	ldr	r1, [pc, #56]	; (8012db4 <ip_reass_free_complete_datagram+0x144>)
 8012d7c:	4809      	ldr	r0, [pc, #36]	; (8012da4 <ip_reass_free_complete_datagram+0x134>)
 8012d7e:	f000 ffc3 	bl	8013d08 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012d82:	4b0b      	ldr	r3, [pc, #44]	; (8012db0 <ip_reass_free_complete_datagram+0x140>)
 8012d84:	881a      	ldrh	r2, [r3, #0]
 8012d86:	8bfb      	ldrh	r3, [r7, #30]
 8012d88:	1ad3      	subs	r3, r2, r3
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	4b08      	ldr	r3, [pc, #32]	; (8012db0 <ip_reass_free_complete_datagram+0x140>)
 8012d8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012d90:	8bfb      	ldrh	r3, [r7, #30]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3720      	adds	r7, #32
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	0801784c 	.word	0x0801784c
 8012da0:	08017888 	.word	0x08017888
 8012da4:	08017894 	.word	0x08017894
 8012da8:	080178bc 	.word	0x080178bc
 8012dac:	080178d0 	.word	0x080178d0
 8012db0:	20008de4 	.word	0x20008de4
 8012db4:	080178f0 	.word	0x080178f0

08012db8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b08a      	sub	sp, #40	; 0x28
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012dd6:	4b28      	ldr	r3, [pc, #160]	; (8012e78 <ip_reass_remove_oldest_datagram+0xc0>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012ddc:	e030      	b.n	8012e40 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de0:	695a      	ldr	r2, [r3, #20]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d10c      	bne.n	8012e04 <ip_reass_remove_oldest_datagram+0x4c>
 8012dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dec:	699a      	ldr	r2, [r3, #24]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	691b      	ldr	r3, [r3, #16]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d106      	bne.n	8012e04 <ip_reass_remove_oldest_datagram+0x4c>
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	899a      	ldrh	r2, [r3, #12]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	889b      	ldrh	r3, [r3, #4]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d014      	beq.n	8012e2e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	3301      	adds	r3, #1
 8012e08:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012e0a:	6a3b      	ldr	r3, [r7, #32]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d104      	bne.n	8012e1a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	61bb      	str	r3, [r7, #24]
 8012e18:	e009      	b.n	8012e2e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1c:	7fda      	ldrb	r2, [r3, #31]
 8012e1e:	6a3b      	ldr	r3, [r7, #32]
 8012e20:	7fdb      	ldrb	r3, [r3, #31]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d803      	bhi.n	8012e2e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e28:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d001      	beq.n	8012e3a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e38:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1cb      	bne.n	8012dde <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d008      	beq.n	8012e5e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012e4c:	69b9      	ldr	r1, [r7, #24]
 8012e4e:	6a38      	ldr	r0, [r7, #32]
 8012e50:	f7ff ff0e 	bl	8012c70 <ip_reass_free_complete_datagram>
 8012e54:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012e56:	697a      	ldr	r2, [r7, #20]
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012e5e:	697a      	ldr	r2, [r7, #20]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	da02      	bge.n	8012e6c <ip_reass_remove_oldest_datagram+0xb4>
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	dcac      	bgt.n	8012dc6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012e6c:	697b      	ldr	r3, [r7, #20]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3728      	adds	r7, #40	; 0x28
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	20008de0 	.word	0x20008de0

08012e7c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012e86:	2004      	movs	r0, #4
 8012e88:	f7f7 f854 	bl	8009f34 <memp_malloc>
 8012e8c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d110      	bne.n	8012eb6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012e94:	6839      	ldr	r1, [r7, #0]
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7ff ff8e 	bl	8012db8 <ip_reass_remove_oldest_datagram>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	dc03      	bgt.n	8012eac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012ea4:	2004      	movs	r0, #4
 8012ea6:	f7f7 f845 	bl	8009f34 <memp_malloc>
 8012eaa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d101      	bne.n	8012eb6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	e016      	b.n	8012ee4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012eb6:	2220      	movs	r2, #32
 8012eb8:	2100      	movs	r1, #0
 8012eba:	68f8      	ldr	r0, [r7, #12]
 8012ebc:	f000 ff1c 	bl	8013cf8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	220f      	movs	r2, #15
 8012ec4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012ec6:	4b09      	ldr	r3, [pc, #36]	; (8012eec <ip_reass_enqueue_new_datagram+0x70>)
 8012ec8:	681a      	ldr	r2, [r3, #0]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012ece:	4a07      	ldr	r2, [pc, #28]	; (8012eec <ip_reass_enqueue_new_datagram+0x70>)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	3308      	adds	r3, #8
 8012ed8:	2214      	movs	r2, #20
 8012eda:	6879      	ldr	r1, [r7, #4]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 fee3 	bl	8013ca8 <memcpy>
  return ipr;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3710      	adds	r7, #16
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	20008de0 	.word	0x20008de0

08012ef0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012efa:	4b10      	ldr	r3, [pc, #64]	; (8012f3c <ip_reass_dequeue_datagram+0x4c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d104      	bne.n	8012f0e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4a0c      	ldr	r2, [pc, #48]	; (8012f3c <ip_reass_dequeue_datagram+0x4c>)
 8012f0a:	6013      	str	r3, [r2, #0]
 8012f0c:	e00d      	b.n	8012f2a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d106      	bne.n	8012f22 <ip_reass_dequeue_datagram+0x32>
 8012f14:	4b0a      	ldr	r3, [pc, #40]	; (8012f40 <ip_reass_dequeue_datagram+0x50>)
 8012f16:	f240 1245 	movw	r2, #325	; 0x145
 8012f1a:	490a      	ldr	r1, [pc, #40]	; (8012f44 <ip_reass_dequeue_datagram+0x54>)
 8012f1c:	480a      	ldr	r0, [pc, #40]	; (8012f48 <ip_reass_dequeue_datagram+0x58>)
 8012f1e:	f000 fef3 	bl	8013d08 <iprintf>
    prev->next = ipr->next;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012f2a:	6879      	ldr	r1, [r7, #4]
 8012f2c:	2004      	movs	r0, #4
 8012f2e:	f7f7 f871 	bl	800a014 <memp_free>
}
 8012f32:	bf00      	nop
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	20008de0 	.word	0x20008de0
 8012f40:	0801784c 	.word	0x0801784c
 8012f44:	08017914 	.word	0x08017914
 8012f48:	08017894 	.word	0x08017894

08012f4c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b08c      	sub	sp, #48	; 0x30
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	885b      	ldrh	r3, [r3, #2]
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f6 fb69 	bl	8009644 <lwip_htons>
 8012f72:	4603      	mov	r3, r0
 8012f74:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	f003 030f 	and.w	r3, r3, #15
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012f84:	7e7b      	ldrb	r3, [r7, #25]
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	8b7a      	ldrh	r2, [r7, #26]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d202      	bcs.n	8012f94 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f92:	e135      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012f94:	7e7b      	ldrb	r3, [r7, #25]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	8b7a      	ldrh	r2, [r7, #26]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012f9e:	69fb      	ldr	r3, [r7, #28]
 8012fa0:	88db      	ldrh	r3, [r3, #6]
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f6 fb4d 	bl	8009644 <lwip_htons>
 8012faa:	4603      	mov	r3, r0
 8012fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	00db      	lsls	r3, r3, #3
 8012fb4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	701a      	strb	r2, [r3, #0]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	705a      	strb	r2, [r3, #1]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	709a      	strb	r2, [r3, #2]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd0:	8afa      	ldrh	r2, [r7, #22]
 8012fd2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012fd4:	8afa      	ldrh	r2, [r7, #22]
 8012fd6:	8b7b      	ldrh	r3, [r7, #26]
 8012fd8:	4413      	add	r3, r2
 8012fda:	b29a      	uxth	r2, r3
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe2:	88db      	ldrh	r3, [r3, #6]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	8afa      	ldrh	r2, [r7, #22]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d902      	bls.n	8012ff2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012fec:	f04f 33ff 	mov.w	r3, #4294967295
 8012ff0:	e106      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8012ff8:	e068      	b.n	80130cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013002:	889b      	ldrh	r3, [r3, #4]
 8013004:	b29a      	uxth	r2, r3
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	889b      	ldrh	r3, [r3, #4]
 801300a:	b29b      	uxth	r3, r3
 801300c:	429a      	cmp	r2, r3
 801300e:	d235      	bcs.n	801307c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013014:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013018:	2b00      	cmp	r3, #0
 801301a:	d020      	beq.n	801305e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301e:	889b      	ldrh	r3, [r3, #4]
 8013020:	b29a      	uxth	r2, r3
 8013022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013024:	88db      	ldrh	r3, [r3, #6]
 8013026:	b29b      	uxth	r3, r3
 8013028:	429a      	cmp	r2, r3
 801302a:	d307      	bcc.n	801303c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302e:	88db      	ldrh	r3, [r3, #6]
 8013030:	b29a      	uxth	r2, r3
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	889b      	ldrh	r3, [r3, #4]
 8013036:	b29b      	uxth	r3, r3
 8013038:	429a      	cmp	r2, r3
 801303a:	d902      	bls.n	8013042 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801303c:	f04f 33ff 	mov.w	r3, #4294967295
 8013040:	e0de      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013044:	68ba      	ldr	r2, [r7, #8]
 8013046:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304a:	88db      	ldrh	r3, [r3, #6]
 801304c:	b29a      	uxth	r2, r3
 801304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013050:	889b      	ldrh	r3, [r3, #4]
 8013052:	b29b      	uxth	r3, r3
 8013054:	429a      	cmp	r2, r3
 8013056:	d03d      	beq.n	80130d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013058:	2300      	movs	r3, #0
 801305a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801305c:	e03a      	b.n	80130d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013060:	88db      	ldrh	r3, [r3, #6]
 8013062:	b29a      	uxth	r2, r3
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	889b      	ldrh	r3, [r3, #4]
 8013068:	b29b      	uxth	r3, r3
 801306a:	429a      	cmp	r2, r3
 801306c:	d902      	bls.n	8013074 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801306e:	f04f 33ff 	mov.w	r3, #4294967295
 8013072:	e0c5      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	68ba      	ldr	r2, [r7, #8]
 8013078:	605a      	str	r2, [r3, #4]
      break;
 801307a:	e02b      	b.n	80130d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307e:	889b      	ldrh	r3, [r3, #4]
 8013080:	b29a      	uxth	r2, r3
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	889b      	ldrh	r3, [r3, #4]
 8013086:	b29b      	uxth	r3, r3
 8013088:	429a      	cmp	r2, r3
 801308a:	d102      	bne.n	8013092 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801308c:	f04f 33ff 	mov.w	r3, #4294967295
 8013090:	e0b6      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013094:	889b      	ldrh	r3, [r3, #4]
 8013096:	b29a      	uxth	r2, r3
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	88db      	ldrh	r3, [r3, #6]
 801309c:	b29b      	uxth	r3, r3
 801309e:	429a      	cmp	r2, r3
 80130a0:	d202      	bcs.n	80130a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80130a2:	f04f 33ff 	mov.w	r3, #4294967295
 80130a6:	e0ab      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80130a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d009      	beq.n	80130c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80130ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b0:	88db      	ldrh	r3, [r3, #6]
 80130b2:	b29a      	uxth	r2, r3
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	889b      	ldrh	r3, [r3, #4]
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d001      	beq.n	80130c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80130be:	2300      	movs	r3, #0
 80130c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d193      	bne.n	8012ffa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80130d2:	e000      	b.n	80130d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80130d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d12d      	bne.n	8013138 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80130dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d01c      	beq.n	801311c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80130e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e4:	88db      	ldrh	r3, [r3, #6]
 80130e6:	b29a      	uxth	r2, r3
 80130e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ea:	889b      	ldrh	r3, [r3, #4]
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d906      	bls.n	8013100 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80130f2:	4b45      	ldr	r3, [pc, #276]	; (8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80130f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80130f8:	4944      	ldr	r1, [pc, #272]	; (801320c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80130fa:	4845      	ldr	r0, [pc, #276]	; (8013210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80130fc:	f000 fe04 	bl	8013d08 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013102:	68ba      	ldr	r2, [r7, #8]
 8013104:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013108:	88db      	ldrh	r3, [r3, #6]
 801310a:	b29a      	uxth	r2, r3
 801310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310e:	889b      	ldrh	r3, [r3, #4]
 8013110:	b29b      	uxth	r3, r3
 8013112:	429a      	cmp	r2, r3
 8013114:	d010      	beq.n	8013138 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	623b      	str	r3, [r7, #32]
 801311a:	e00d      	b.n	8013138 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d006      	beq.n	8013132 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013124:	4b38      	ldr	r3, [pc, #224]	; (8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013126:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801312a:	493a      	ldr	r1, [pc, #232]	; (8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801312c:	4838      	ldr	r0, [pc, #224]	; (8013210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801312e:	f000 fdeb 	bl	8013d08 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	68ba      	ldr	r2, [r7, #8]
 8013136:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d105      	bne.n	801314a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	7f9b      	ldrb	r3, [r3, #30]
 8013142:	f003 0301 	and.w	r3, r3, #1
 8013146:	2b00      	cmp	r3, #0
 8013148:	d059      	beq.n	80131fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801314a:	6a3b      	ldr	r3, [r7, #32]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d04f      	beq.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d006      	beq.n	8013166 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	889b      	ldrh	r3, [r3, #4]
 8013160:	b29b      	uxth	r3, r3
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013166:	2300      	movs	r3, #0
 8013168:	623b      	str	r3, [r7, #32]
 801316a:	e041      	b.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013176:	e012      	b.n	801319e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013180:	88db      	ldrh	r3, [r3, #6]
 8013182:	b29a      	uxth	r2, r3
 8013184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013186:	889b      	ldrh	r3, [r3, #4]
 8013188:	b29b      	uxth	r3, r3
 801318a:	429a      	cmp	r2, r3
 801318c:	d002      	beq.n	8013194 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	623b      	str	r3, [r7, #32]
            break;
 8013192:	e007      	b.n	80131a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d1e9      	bne.n	8013178 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80131a4:	6a3b      	ldr	r3, [r7, #32]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d022      	beq.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80131b2:	4b15      	ldr	r3, [pc, #84]	; (8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131b4:	f240 12df 	movw	r2, #479	; 0x1df
 80131b8:	4917      	ldr	r1, [pc, #92]	; (8013218 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80131ba:	4815      	ldr	r0, [pc, #84]	; (8013210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131bc:	f000 fda4 	bl	8013d08 <iprintf>
          LWIP_ASSERT("sanity check",
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d106      	bne.n	80131da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80131cc:	4b0e      	ldr	r3, [pc, #56]	; (8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80131d2:	4911      	ldr	r1, [pc, #68]	; (8013218 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80131d4:	480e      	ldr	r0, [pc, #56]	; (8013210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131d6:	f000 fd97 	bl	8013d08 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80131da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d006      	beq.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80131e2:	4b09      	ldr	r3, [pc, #36]	; (8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80131e8:	490c      	ldr	r1, [pc, #48]	; (801321c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80131ea:	4809      	ldr	r0, [pc, #36]	; (8013210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131ec:	f000 fd8c 	bl	8013d08 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	bf14      	ite	ne
 80131f6:	2301      	movne	r3, #1
 80131f8:	2300      	moveq	r3, #0
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	e000      	b.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80131fe:	2300      	movs	r3, #0
}
 8013200:	4618      	mov	r0, r3
 8013202:	3730      	adds	r7, #48	; 0x30
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}
 8013208:	0801784c 	.word	0x0801784c
 801320c:	08017930 	.word	0x08017930
 8013210:	08017894 	.word	0x08017894
 8013214:	08017950 	.word	0x08017950
 8013218:	08017988 	.word	0x08017988
 801321c:	08017998 	.word	0x08017998

08013220 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b08e      	sub	sp, #56	; 0x38
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	f003 030f 	and.w	r3, r3, #15
 8013236:	b2db      	uxtb	r3, r3
 8013238:	009b      	lsls	r3, r3, #2
 801323a:	b2db      	uxtb	r3, r3
 801323c:	2b14      	cmp	r3, #20
 801323e:	f040 8171 	bne.w	8013524 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013244:	88db      	ldrh	r3, [r3, #6]
 8013246:	b29b      	uxth	r3, r3
 8013248:	4618      	mov	r0, r3
 801324a:	f7f6 f9fb 	bl	8009644 <lwip_htons>
 801324e:	4603      	mov	r3, r0
 8013250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013254:	b29b      	uxth	r3, r3
 8013256:	00db      	lsls	r3, r3, #3
 8013258:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325c:	885b      	ldrh	r3, [r3, #2]
 801325e:	b29b      	uxth	r3, r3
 8013260:	4618      	mov	r0, r3
 8013262:	f7f6 f9ef 	bl	8009644 <lwip_htons>
 8013266:	4603      	mov	r3, r0
 8013268:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	f003 030f 	and.w	r3, r3, #15
 8013272:	b2db      	uxtb	r3, r3
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801327a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801327e:	b29b      	uxth	r3, r3
 8013280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013282:	429a      	cmp	r2, r3
 8013284:	f0c0 8150 	bcc.w	8013528 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801328c:	b29b      	uxth	r3, r3
 801328e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013290:	1ad3      	subs	r3, r2, r3
 8013292:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7f7 fdbb 	bl	800ae10 <pbuf_clen>
 801329a:	4603      	mov	r3, r0
 801329c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801329e:	4b8c      	ldr	r3, [pc, #560]	; (80134d0 <ip4_reass+0x2b0>)
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	461a      	mov	r2, r3
 80132a4:	8c3b      	ldrh	r3, [r7, #32]
 80132a6:	4413      	add	r3, r2
 80132a8:	2b0a      	cmp	r3, #10
 80132aa:	dd10      	ble.n	80132ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80132ac:	8c3b      	ldrh	r3, [r7, #32]
 80132ae:	4619      	mov	r1, r3
 80132b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132b2:	f7ff fd81 	bl	8012db8 <ip_reass_remove_oldest_datagram>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	f000 8137 	beq.w	801352c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80132be:	4b84      	ldr	r3, [pc, #528]	; (80134d0 <ip4_reass+0x2b0>)
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	461a      	mov	r2, r3
 80132c4:	8c3b      	ldrh	r3, [r7, #32]
 80132c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80132c8:	2b0a      	cmp	r3, #10
 80132ca:	f300 812f 	bgt.w	801352c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80132ce:	4b81      	ldr	r3, [pc, #516]	; (80134d4 <ip4_reass+0x2b4>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	633b      	str	r3, [r7, #48]	; 0x30
 80132d4:	e015      	b.n	8013302 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80132d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d8:	695a      	ldr	r2, [r3, #20]
 80132da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132dc:	68db      	ldr	r3, [r3, #12]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d10c      	bne.n	80132fc <ip4_reass+0xdc>
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	699a      	ldr	r2, [r3, #24]
 80132e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e8:	691b      	ldr	r3, [r3, #16]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d106      	bne.n	80132fc <ip4_reass+0xdc>
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	899a      	ldrh	r2, [r3, #12]
 80132f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f4:	889b      	ldrh	r3, [r3, #4]
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d006      	beq.n	801330a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80132fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	633b      	str	r3, [r7, #48]	; 0x30
 8013302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1e6      	bne.n	80132d6 <ip4_reass+0xb6>
 8013308:	e000      	b.n	801330c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801330a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	2b00      	cmp	r3, #0
 8013310:	d109      	bne.n	8013326 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013312:	8c3b      	ldrh	r3, [r7, #32]
 8013314:	4619      	mov	r1, r3
 8013316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013318:	f7ff fdb0 	bl	8012e7c <ip_reass_enqueue_new_datagram>
 801331c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013320:	2b00      	cmp	r3, #0
 8013322:	d11c      	bne.n	801335e <ip4_reass+0x13e>
      goto nullreturn;
 8013324:	e105      	b.n	8013532 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	88db      	ldrh	r3, [r3, #6]
 801332a:	b29b      	uxth	r3, r3
 801332c:	4618      	mov	r0, r3
 801332e:	f7f6 f989 	bl	8009644 <lwip_htons>
 8013332:	4603      	mov	r3, r0
 8013334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013338:	2b00      	cmp	r3, #0
 801333a:	d110      	bne.n	801335e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333e:	89db      	ldrh	r3, [r3, #14]
 8013340:	4618      	mov	r0, r3
 8013342:	f7f6 f97f 	bl	8009644 <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801334c:	2b00      	cmp	r3, #0
 801334e:	d006      	beq.n	801335e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	3308      	adds	r3, #8
 8013354:	2214      	movs	r2, #20
 8013356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013358:	4618      	mov	r0, r3
 801335a:	f000 fca5 	bl	8013ca8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013360:	88db      	ldrh	r3, [r3, #6]
 8013362:	b29b      	uxth	r3, r3
 8013364:	f003 0320 	and.w	r3, r3, #32
 8013368:	2b00      	cmp	r3, #0
 801336a:	bf0c      	ite	eq
 801336c:	2301      	moveq	r3, #1
 801336e:	2300      	movne	r3, #0
 8013370:	b2db      	uxtb	r3, r3
 8013372:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d00e      	beq.n	8013398 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801337a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801337c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801337e:	4413      	add	r3, r2
 8013380:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013382:	8b7a      	ldrh	r2, [r7, #26]
 8013384:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013386:	429a      	cmp	r2, r3
 8013388:	f0c0 80a0 	bcc.w	80134cc <ip4_reass+0x2ac>
 801338c:	8b7b      	ldrh	r3, [r7, #26]
 801338e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013392:	4293      	cmp	r3, r2
 8013394:	f200 809a 	bhi.w	80134cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013398:	69fa      	ldr	r2, [r7, #28]
 801339a:	6879      	ldr	r1, [r7, #4]
 801339c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801339e:	f7ff fdd5 	bl	8012f4c <ip_reass_chain_frag_into_datagram_and_validate>
 80133a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133aa:	f000 809b 	beq.w	80134e4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80133ae:	4b48      	ldr	r3, [pc, #288]	; (80134d0 <ip4_reass+0x2b0>)
 80133b0:	881a      	ldrh	r2, [r3, #0]
 80133b2:	8c3b      	ldrh	r3, [r7, #32]
 80133b4:	4413      	add	r3, r2
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	4b45      	ldr	r3, [pc, #276]	; (80134d0 <ip4_reass+0x2b0>)
 80133ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d00d      	beq.n	80133de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80133c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80133c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133c6:	4413      	add	r3, r2
 80133c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80133ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133cc:	8a7a      	ldrh	r2, [r7, #18]
 80133ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80133d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d2:	7f9b      	ldrb	r3, [r3, #30]
 80133d4:	f043 0301 	orr.w	r3, r3, #1
 80133d8:	b2da      	uxtb	r2, r3
 80133da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d171      	bne.n	80134c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80133e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e6:	8b9b      	ldrh	r3, [r3, #28]
 80133e8:	3314      	adds	r3, #20
 80133ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80133ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80133f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80133fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013400:	3308      	adds	r3, #8
 8013402:	2214      	movs	r2, #20
 8013404:	4619      	mov	r1, r3
 8013406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013408:	f000 fc4e 	bl	8013ca8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801340c:	8a3b      	ldrh	r3, [r7, #16]
 801340e:	4618      	mov	r0, r3
 8013410:	f7f6 f918 	bl	8009644 <lwip_htons>
 8013414:	4603      	mov	r3, r0
 8013416:	461a      	mov	r2, r3
 8013418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341e:	2200      	movs	r2, #0
 8013420:	719a      	strb	r2, [r3, #6]
 8013422:	2200      	movs	r2, #0
 8013424:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013428:	2200      	movs	r2, #0
 801342a:	729a      	strb	r2, [r3, #10]
 801342c:	2200      	movs	r2, #0
 801342e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013436:	e00d      	b.n	8013454 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801343e:	2114      	movs	r1, #20
 8013440:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013442:	f7f7 fbd7 	bl	800abf4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013446:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7f7 fd1b 	bl	800ae84 <pbuf_cat>
      r = iprh->next_pbuf;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1ee      	bne.n	8013438 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801345a:	4b1e      	ldr	r3, [pc, #120]	; (80134d4 <ip4_reass+0x2b4>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013460:	429a      	cmp	r2, r3
 8013462:	d102      	bne.n	801346a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013464:	2300      	movs	r3, #0
 8013466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013468:	e010      	b.n	801348c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801346a:	4b1a      	ldr	r3, [pc, #104]	; (80134d4 <ip4_reass+0x2b4>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013470:	e007      	b.n	8013482 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013478:	429a      	cmp	r2, r3
 801347a:	d006      	beq.n	801348a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013484:	2b00      	cmp	r3, #0
 8013486:	d1f4      	bne.n	8013472 <ip4_reass+0x252>
 8013488:	e000      	b.n	801348c <ip4_reass+0x26c>
          break;
 801348a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801348c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801348e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013490:	f7ff fd2e 	bl	8012ef0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7f7 fcbb 	bl	800ae10 <pbuf_clen>
 801349a:	4603      	mov	r3, r0
 801349c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801349e:	4b0c      	ldr	r3, [pc, #48]	; (80134d0 <ip4_reass+0x2b0>)
 80134a0:	881b      	ldrh	r3, [r3, #0]
 80134a2:	8c3a      	ldrh	r2, [r7, #32]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d906      	bls.n	80134b6 <ip4_reass+0x296>
 80134a8:	4b0b      	ldr	r3, [pc, #44]	; (80134d8 <ip4_reass+0x2b8>)
 80134aa:	f240 229b 	movw	r2, #667	; 0x29b
 80134ae:	490b      	ldr	r1, [pc, #44]	; (80134dc <ip4_reass+0x2bc>)
 80134b0:	480b      	ldr	r0, [pc, #44]	; (80134e0 <ip4_reass+0x2c0>)
 80134b2:	f000 fc29 	bl	8013d08 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80134b6:	4b06      	ldr	r3, [pc, #24]	; (80134d0 <ip4_reass+0x2b0>)
 80134b8:	881a      	ldrh	r2, [r3, #0]
 80134ba:	8c3b      	ldrh	r3, [r7, #32]
 80134bc:	1ad3      	subs	r3, r2, r3
 80134be:	b29a      	uxth	r2, r3
 80134c0:	4b03      	ldr	r3, [pc, #12]	; (80134d0 <ip4_reass+0x2b0>)
 80134c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	e038      	b.n	801353a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80134c8:	2300      	movs	r3, #0
 80134ca:	e036      	b.n	801353a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80134cc:	bf00      	nop
 80134ce:	e00a      	b.n	80134e6 <ip4_reass+0x2c6>
 80134d0:	20008de4 	.word	0x20008de4
 80134d4:	20008de0 	.word	0x20008de0
 80134d8:	0801784c 	.word	0x0801784c
 80134dc:	080179bc 	.word	0x080179bc
 80134e0:	08017894 	.word	0x08017894
    goto nullreturn_ipr;
 80134e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80134e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d106      	bne.n	80134fa <ip4_reass+0x2da>
 80134ec:	4b15      	ldr	r3, [pc, #84]	; (8013544 <ip4_reass+0x324>)
 80134ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80134f2:	4915      	ldr	r1, [pc, #84]	; (8013548 <ip4_reass+0x328>)
 80134f4:	4815      	ldr	r0, [pc, #84]	; (801354c <ip4_reass+0x32c>)
 80134f6:	f000 fc07 	bl	8013d08 <iprintf>
  if (ipr->p == NULL) {
 80134fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d116      	bne.n	8013530 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013502:	4b13      	ldr	r3, [pc, #76]	; (8013550 <ip4_reass+0x330>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013508:	429a      	cmp	r2, r3
 801350a:	d006      	beq.n	801351a <ip4_reass+0x2fa>
 801350c:	4b0d      	ldr	r3, [pc, #52]	; (8013544 <ip4_reass+0x324>)
 801350e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013512:	4910      	ldr	r1, [pc, #64]	; (8013554 <ip4_reass+0x334>)
 8013514:	480d      	ldr	r0, [pc, #52]	; (801354c <ip4_reass+0x32c>)
 8013516:	f000 fbf7 	bl	8013d08 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801351a:	2100      	movs	r1, #0
 801351c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801351e:	f7ff fce7 	bl	8012ef0 <ip_reass_dequeue_datagram>
 8013522:	e006      	b.n	8013532 <ip4_reass+0x312>
    goto nullreturn;
 8013524:	bf00      	nop
 8013526:	e004      	b.n	8013532 <ip4_reass+0x312>
    goto nullreturn;
 8013528:	bf00      	nop
 801352a:	e002      	b.n	8013532 <ip4_reass+0x312>
      goto nullreturn;
 801352c:	bf00      	nop
 801352e:	e000      	b.n	8013532 <ip4_reass+0x312>
  }

nullreturn:
 8013530:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7f7 fbe4 	bl	800ad00 <pbuf_free>
  return NULL;
 8013538:	2300      	movs	r3, #0
}
 801353a:	4618      	mov	r0, r3
 801353c:	3738      	adds	r7, #56	; 0x38
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	0801784c 	.word	0x0801784c
 8013548:	080179d8 	.word	0x080179d8
 801354c:	08017894 	.word	0x08017894
 8013550:	20008de0 	.word	0x20008de0
 8013554:	080179e4 	.word	0x080179e4

08013558 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801355c:	2005      	movs	r0, #5
 801355e:	f7f6 fce9 	bl	8009f34 <memp_malloc>
 8013562:	4603      	mov	r3, r0
}
 8013564:	4618      	mov	r0, r3
 8013566:	bd80      	pop	{r7, pc}

08013568 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d106      	bne.n	8013584 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013576:	4b07      	ldr	r3, [pc, #28]	; (8013594 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013578:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801357c:	4906      	ldr	r1, [pc, #24]	; (8013598 <ip_frag_free_pbuf_custom_ref+0x30>)
 801357e:	4807      	ldr	r0, [pc, #28]	; (801359c <ip_frag_free_pbuf_custom_ref+0x34>)
 8013580:	f000 fbc2 	bl	8013d08 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	2005      	movs	r0, #5
 8013588:	f7f6 fd44 	bl	800a014 <memp_free>
}
 801358c:	bf00      	nop
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	0801784c 	.word	0x0801784c
 8013598:	08017a04 	.word	0x08017a04
 801359c:	08017894 	.word	0x08017894

080135a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d106      	bne.n	80135c0 <ipfrag_free_pbuf_custom+0x20>
 80135b2:	4b11      	ldr	r3, [pc, #68]	; (80135f8 <ipfrag_free_pbuf_custom+0x58>)
 80135b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80135b8:	4910      	ldr	r1, [pc, #64]	; (80135fc <ipfrag_free_pbuf_custom+0x5c>)
 80135ba:	4811      	ldr	r0, [pc, #68]	; (8013600 <ipfrag_free_pbuf_custom+0x60>)
 80135bc:	f000 fba4 	bl	8013d08 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80135c0:	68fa      	ldr	r2, [r7, #12]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d006      	beq.n	80135d6 <ipfrag_free_pbuf_custom+0x36>
 80135c8:	4b0b      	ldr	r3, [pc, #44]	; (80135f8 <ipfrag_free_pbuf_custom+0x58>)
 80135ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80135ce:	490d      	ldr	r1, [pc, #52]	; (8013604 <ipfrag_free_pbuf_custom+0x64>)
 80135d0:	480b      	ldr	r0, [pc, #44]	; (8013600 <ipfrag_free_pbuf_custom+0x60>)
 80135d2:	f000 fb99 	bl	8013d08 <iprintf>
  if (pcr->original != NULL) {
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	695b      	ldr	r3, [r3, #20]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d004      	beq.n	80135e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	695b      	ldr	r3, [r3, #20]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7f7 fb8c 	bl	800ad00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f7ff ffbd 	bl	8013568 <ip_frag_free_pbuf_custom_ref>
}
 80135ee:	bf00      	nop
 80135f0:	3710      	adds	r7, #16
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	0801784c 	.word	0x0801784c
 80135fc:	08017a10 	.word	0x08017a10
 8013600:	08017894 	.word	0x08017894
 8013604:	08017a1c 	.word	0x08017a1c

08013608 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b094      	sub	sp, #80	; 0x50
 801360c:	af02      	add	r7, sp, #8
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	60b9      	str	r1, [r7, #8]
 8013612:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013614:	2300      	movs	r3, #0
 8013616:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801361e:	3b14      	subs	r3, #20
 8013620:	2b00      	cmp	r3, #0
 8013622:	da00      	bge.n	8013626 <ip4_frag+0x1e>
 8013624:	3307      	adds	r3, #7
 8013626:	10db      	asrs	r3, r3, #3
 8013628:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801362a:	2314      	movs	r3, #20
 801362c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013636:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	f003 030f 	and.w	r3, r3, #15
 8013640:	b2db      	uxtb	r3, r3
 8013642:	009b      	lsls	r3, r3, #2
 8013644:	b2db      	uxtb	r3, r3
 8013646:	2b14      	cmp	r3, #20
 8013648:	d002      	beq.n	8013650 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801364a:	f06f 0305 	mvn.w	r3, #5
 801364e:	e110      	b.n	8013872 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	895b      	ldrh	r3, [r3, #10]
 8013654:	2b13      	cmp	r3, #19
 8013656:	d809      	bhi.n	801366c <ip4_frag+0x64>
 8013658:	4b88      	ldr	r3, [pc, #544]	; (801387c <ip4_frag+0x274>)
 801365a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801365e:	4988      	ldr	r1, [pc, #544]	; (8013880 <ip4_frag+0x278>)
 8013660:	4888      	ldr	r0, [pc, #544]	; (8013884 <ip4_frag+0x27c>)
 8013662:	f000 fb51 	bl	8013d08 <iprintf>
 8013666:	f06f 0305 	mvn.w	r3, #5
 801366a:	e102      	b.n	8013872 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366e:	88db      	ldrh	r3, [r3, #6]
 8013670:	b29b      	uxth	r3, r3
 8013672:	4618      	mov	r0, r3
 8013674:	f7f5 ffe6 	bl	8009644 <lwip_htons>
 8013678:	4603      	mov	r3, r0
 801367a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801367c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801367e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013682:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013686:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801368c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	891b      	ldrh	r3, [r3, #8]
 8013692:	3b14      	subs	r3, #20
 8013694:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013698:	e0e1      	b.n	801385e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801369a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801369c:	00db      	lsls	r3, r3, #3
 801369e:	b29b      	uxth	r3, r3
 80136a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136a4:	4293      	cmp	r3, r2
 80136a6:	bf28      	it	cs
 80136a8:	4613      	movcs	r3, r2
 80136aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80136ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b0:	2114      	movs	r1, #20
 80136b2:	200e      	movs	r0, #14
 80136b4:	f7f7 f840 	bl	800a738 <pbuf_alloc>
 80136b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f000 80d5 	beq.w	801386c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80136c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c4:	895b      	ldrh	r3, [r3, #10]
 80136c6:	2b13      	cmp	r3, #19
 80136c8:	d806      	bhi.n	80136d8 <ip4_frag+0xd0>
 80136ca:	4b6c      	ldr	r3, [pc, #432]	; (801387c <ip4_frag+0x274>)
 80136cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80136d0:	496d      	ldr	r1, [pc, #436]	; (8013888 <ip4_frag+0x280>)
 80136d2:	486c      	ldr	r0, [pc, #432]	; (8013884 <ip4_frag+0x27c>)
 80136d4:	f000 fb18 	bl	8013d08 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80136d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	2214      	movs	r2, #20
 80136de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80136e0:	4618      	mov	r0, r3
 80136e2:	f000 fae1 	bl	8013ca8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80136ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80136f2:	e064      	b.n	80137be <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	895a      	ldrh	r2, [r3, #10]
 80136f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	895b      	ldrh	r3, [r3, #10]
 8013702:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013704:	429a      	cmp	r2, r3
 8013706:	d906      	bls.n	8013716 <ip4_frag+0x10e>
 8013708:	4b5c      	ldr	r3, [pc, #368]	; (801387c <ip4_frag+0x274>)
 801370a:	f240 322d 	movw	r2, #813	; 0x32d
 801370e:	495f      	ldr	r1, [pc, #380]	; (801388c <ip4_frag+0x284>)
 8013710:	485c      	ldr	r0, [pc, #368]	; (8013884 <ip4_frag+0x27c>)
 8013712:	f000 faf9 	bl	8013d08 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013716:	8bfa      	ldrh	r2, [r7, #30]
 8013718:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801371c:	4293      	cmp	r3, r2
 801371e:	bf28      	it	cs
 8013720:	4613      	movcs	r3, r2
 8013722:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801372a:	2b00      	cmp	r3, #0
 801372c:	d105      	bne.n	801373a <ip4_frag+0x132>
        poff = 0;
 801372e:	2300      	movs	r3, #0
 8013730:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	60fb      	str	r3, [r7, #12]
        continue;
 8013738:	e041      	b.n	80137be <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801373a:	f7ff ff0d 	bl	8013558 <ip_frag_alloc_pbuf_custom_ref>
 801373e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d103      	bne.n	801374e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013748:	f7f7 fada 	bl	800ad00 <pbuf_free>
        goto memerr;
 801374c:	e08f      	b.n	801386e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801374e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013754:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013756:	4413      	add	r3, r2
 8013758:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801375c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013760:	9201      	str	r2, [sp, #4]
 8013762:	9300      	str	r3, [sp, #0]
 8013764:	4603      	mov	r3, r0
 8013766:	2241      	movs	r2, #65	; 0x41
 8013768:	2000      	movs	r0, #0
 801376a:	f7f7 f90f 	bl	800a98c <pbuf_alloced_custom>
 801376e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d106      	bne.n	8013784 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013776:	69b8      	ldr	r0, [r7, #24]
 8013778:	f7ff fef6 	bl	8013568 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801377c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801377e:	f7f7 fabf 	bl	800ad00 <pbuf_free>
        goto memerr;
 8013782:	e074      	b.n	801386e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7f7 fb5b 	bl	800ae40 <pbuf_ref>
      pcr->original = p;
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013790:	69bb      	ldr	r3, [r7, #24]
 8013792:	4a3f      	ldr	r2, [pc, #252]	; (8013890 <ip4_frag+0x288>)
 8013794:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013796:	6979      	ldr	r1, [r7, #20]
 8013798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801379a:	f7f7 fb73 	bl	800ae84 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801379e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80137a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80137ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d004      	beq.n	80137be <ip4_frag+0x1b6>
        poff = 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80137be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d196      	bne.n	80136f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80137c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80137c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137cc:	4413      	add	r3, r2
 80137ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80137d4:	f1a3 0213 	sub.w	r2, r3, #19
 80137d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137dc:	429a      	cmp	r2, r3
 80137de:	bfcc      	ite	gt
 80137e0:	2301      	movgt	r3, #1
 80137e2:	2300      	movle	r3, #0
 80137e4:	b2db      	uxtb	r3, r3
 80137e6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80137e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80137ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80137f2:	6a3b      	ldr	r3, [r7, #32]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d002      	beq.n	80137fe <ip4_frag+0x1f6>
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d003      	beq.n	8013806 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80137fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013804:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013806:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013808:	4618      	mov	r0, r3
 801380a:	f7f5 ff1b 	bl	8009644 <lwip_htons>
 801380e:	4603      	mov	r3, r0
 8013810:	461a      	mov	r2, r3
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013818:	3314      	adds	r3, #20
 801381a:	b29b      	uxth	r3, r3
 801381c:	4618      	mov	r0, r3
 801381e:	f7f5 ff11 	bl	8009644 <lwip_htons>
 8013822:	4603      	mov	r3, r0
 8013824:	461a      	mov	r2, r3
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	2200      	movs	r2, #0
 801382e:	729a      	strb	r2, [r3, #10]
 8013830:	2200      	movs	r2, #0
 8013832:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	695b      	ldr	r3, [r3, #20]
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801383c:	68b8      	ldr	r0, [r7, #8]
 801383e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013842:	f7f7 fa5d 	bl	800ad00 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013846:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801384a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013852:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013856:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013858:	4413      	add	r3, r2
 801385a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801385e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013862:	2b00      	cmp	r3, #0
 8013864:	f47f af19 	bne.w	801369a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013868:	2300      	movs	r3, #0
 801386a:	e002      	b.n	8013872 <ip4_frag+0x26a>
      goto memerr;
 801386c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801386e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013872:	4618      	mov	r0, r3
 8013874:	3748      	adds	r7, #72	; 0x48
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	0801784c 	.word	0x0801784c
 8013880:	08017a28 	.word	0x08017a28
 8013884:	08017894 	.word	0x08017894
 8013888:	08017a44 	.word	0x08017a44
 801388c:	08017a64 	.word	0x08017a64
 8013890:	080135a1 	.word	0x080135a1

08013894 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b086      	sub	sp, #24
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801389e:	230e      	movs	r3, #14
 80138a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	895b      	ldrh	r3, [r3, #10]
 80138a6:	2b0e      	cmp	r3, #14
 80138a8:	d96e      	bls.n	8013988 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	7bdb      	ldrb	r3, [r3, #15]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d106      	bne.n	80138c0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138b8:	3301      	adds	r3, #1
 80138ba:	b2da      	uxtb	r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	7b1a      	ldrb	r2, [r3, #12]
 80138ca:	7b5b      	ldrb	r3, [r3, #13]
 80138cc:	021b      	lsls	r3, r3, #8
 80138ce:	4313      	orrs	r3, r2
 80138d0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	f003 0301 	and.w	r3, r3, #1
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d023      	beq.n	8013926 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d10f      	bne.n	8013906 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	785b      	ldrb	r3, [r3, #1]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d11b      	bne.n	8013926 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80138f2:	2b5e      	cmp	r3, #94	; 0x5e
 80138f4:	d117      	bne.n	8013926 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	7b5b      	ldrb	r3, [r3, #13]
 80138fa:	f043 0310 	orr.w	r3, r3, #16
 80138fe:	b2da      	uxtb	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	735a      	strb	r2, [r3, #13]
 8013904:	e00f      	b.n	8013926 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	2206      	movs	r2, #6
 801390a:	4928      	ldr	r1, [pc, #160]	; (80139ac <ethernet_input+0x118>)
 801390c:	4618      	mov	r0, r3
 801390e:	f000 f9bb 	bl	8013c88 <memcmp>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d106      	bne.n	8013926 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	7b5b      	ldrb	r3, [r3, #13]
 801391c:	f043 0308 	orr.w	r3, r3, #8
 8013920:	b2da      	uxtb	r2, r3
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013926:	89fb      	ldrh	r3, [r7, #14]
 8013928:	2b08      	cmp	r3, #8
 801392a:	d003      	beq.n	8013934 <ethernet_input+0xa0>
 801392c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013930:	d014      	beq.n	801395c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013932:	e032      	b.n	801399a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801393a:	f003 0308 	and.w	r3, r3, #8
 801393e:	2b00      	cmp	r3, #0
 8013940:	d024      	beq.n	801398c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013942:	8afb      	ldrh	r3, [r7, #22]
 8013944:	4619      	mov	r1, r3
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f7f7 f954 	bl	800abf4 <pbuf_remove_header>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d11e      	bne.n	8013990 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013952:	6839      	ldr	r1, [r7, #0]
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7fe fe91 	bl	801267c <ip4_input>
      break;
 801395a:	e013      	b.n	8013984 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013962:	f003 0308 	and.w	r3, r3, #8
 8013966:	2b00      	cmp	r3, #0
 8013968:	d014      	beq.n	8013994 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801396a:	8afb      	ldrh	r3, [r7, #22]
 801396c:	4619      	mov	r1, r3
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7f7 f940 	bl	800abf4 <pbuf_remove_header>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d10e      	bne.n	8013998 <ethernet_input+0x104>
        etharp_input(p, netif);
 801397a:	6839      	ldr	r1, [r7, #0]
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7fe f831 	bl	80119e4 <etharp_input>
      break;
 8013982:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013984:	2300      	movs	r3, #0
 8013986:	e00c      	b.n	80139a2 <ethernet_input+0x10e>
    goto free_and_return;
 8013988:	bf00      	nop
 801398a:	e006      	b.n	801399a <ethernet_input+0x106>
        goto free_and_return;
 801398c:	bf00      	nop
 801398e:	e004      	b.n	801399a <ethernet_input+0x106>
        goto free_and_return;
 8013990:	bf00      	nop
 8013992:	e002      	b.n	801399a <ethernet_input+0x106>
        goto free_and_return;
 8013994:	bf00      	nop
 8013996:	e000      	b.n	801399a <ethernet_input+0x106>
        goto free_and_return;
 8013998:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7f7 f9b0 	bl	800ad00 <pbuf_free>
  return ERR_OK;
 80139a0:	2300      	movs	r3, #0
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3718      	adds	r7, #24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	08017c44 	.word	0x08017c44

080139b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
 80139bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80139be:	8c3b      	ldrh	r3, [r7, #32]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7f5 fe3f 	bl	8009644 <lwip_htons>
 80139c6:	4603      	mov	r3, r0
 80139c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80139ca:	210e      	movs	r1, #14
 80139cc:	68b8      	ldr	r0, [r7, #8]
 80139ce:	f7f7 f901 	bl	800abd4 <pbuf_add_header>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d125      	bne.n	8013a24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	8afa      	ldrh	r2, [r7, #22]
 80139e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	2206      	movs	r2, #6
 80139e8:	6839      	ldr	r1, [r7, #0]
 80139ea:	4618      	mov	r0, r3
 80139ec:	f000 f95c 	bl	8013ca8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	3306      	adds	r3, #6
 80139f4:	2206      	movs	r2, #6
 80139f6:	6879      	ldr	r1, [r7, #4]
 80139f8:	4618      	mov	r0, r3
 80139fa:	f000 f955 	bl	8013ca8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a04:	2b06      	cmp	r3, #6
 8013a06:	d006      	beq.n	8013a16 <ethernet_output+0x66>
 8013a08:	4b0a      	ldr	r3, [pc, #40]	; (8013a34 <ethernet_output+0x84>)
 8013a0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013a0e:	490a      	ldr	r1, [pc, #40]	; (8013a38 <ethernet_output+0x88>)
 8013a10:	480a      	ldr	r0, [pc, #40]	; (8013a3c <ethernet_output+0x8c>)
 8013a12:	f000 f979 	bl	8013d08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	699b      	ldr	r3, [r3, #24]
 8013a1a:	68b9      	ldr	r1, [r7, #8]
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	4798      	blx	r3
 8013a20:	4603      	mov	r3, r0
 8013a22:	e002      	b.n	8013a2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013a24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013a26:	f06f 0301 	mvn.w	r3, #1
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3718      	adds	r7, #24
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	08017a74 	.word	0x08017a74
 8013a38:	08017aac 	.word	0x08017aac
 8013a3c:	08017ae0 	.word	0x08017ae0

08013a40 <rtg_main>:
 *	NETMASK: 	255.255.255.0 (or 0.0.0.0/24)
 *	GATEWAY: 	192.168.1.100 (not in use but required by IDE)
 *	Port:		7 (recommended 50,000+)
 */

void rtg_main() {
 8013a40:	b580      	push	{r7, lr}
 8013a42:	af00      	add	r7, sp, #0
	printf("Start of program\n\r");
 8013a44:	4803      	ldr	r0, [pc, #12]	; (8013a54 <rtg_main+0x14>)
 8013a46:	f000 f95f 	bl	8013d08 <iprintf>
	udpServer_init();					//UDP server initialization
 8013a4a:	f000 f8b9 	bl	8013bc0 <udpServer_init>
	while (1) {
		handle_reception_network();
 8013a4e:	f000 f8db 	bl	8013c08 <handle_reception_network>
	while (1) {
 8013a52:	e7fc      	b.n	8013a4e <rtg_main+0xe>
 8013a54:	08017b08 	.word	0x08017b08

08013a58 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b084      	sub	sp, #16
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	60b9      	str	r1, [r7, #8]
 8013a62:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a6c:	68b9      	ldr	r1, [r7, #8]
 8013a6e:	4804      	ldr	r0, [pc, #16]	; (8013a80 <_write+0x28>)
 8013a70:	f7f3 fcfa 	bl	8007468 <HAL_UART_Transmit>
	return len;
 8013a74:	687b      	ldr	r3, [r7, #4]
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3710      	adds	r7, #16
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	20000694 	.word	0x20000694

08013a84 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8013a8e:	1df9      	adds	r1, r7, #7
 8013a90:	f04f 33ff 	mov.w	r3, #4294967295
 8013a94:	2201      	movs	r2, #1
 8013a96:	4807      	ldr	r0, [pc, #28]	; (8013ab4 <__io_getchar+0x30>)
 8013a98:	f7f3 fd69 	bl	800756e <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8013a9c:	1df9      	adds	r1, r7, #7
 8013a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	4803      	ldr	r0, [pc, #12]	; (8013ab4 <__io_getchar+0x30>)
 8013aa6:	f7f3 fcdf 	bl	8007468 <HAL_UART_Transmit>
	return ch;
 8013aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3708      	adds	r7, #8
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	20000694 	.word	0x20000694

08013ab8 <_read>:

int _read(int file, char *ptr, int len) {
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b088      	sub	sp, #32
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = 0;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 8013acc:	e016      	b.n	8013afc <_read+0x44>
		ch = __io_getchar();
 8013ace:	f7ff ffd9 	bl	8013a84 <__io_getchar>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	7dfa      	ldrb	r2, [r7, #23]
 8013ada:	701a      	strb	r2, [r3, #0]
		ptr++;
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	3301      	adds	r3, #1
 8013ae0:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8013ae2:	7dfb      	ldrb	r3, [r7, #23]
 8013ae4:	2b0d      	cmp	r3, #13
 8013ae6:	d002      	beq.n	8013aee <_read+0x36>
 8013ae8:	7dfb      	ldrb	r3, [r7, #23]
 8013aea:	2b0a      	cmp	r3, #10
 8013aec:	d103      	bne.n	8013af6 <_read+0x3e>
			*(ptr) = 0;
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	2200      	movs	r2, #0
 8013af2:	701a      	strb	r2, [r3, #0]
			break;
 8013af4:	e006      	b.n	8013b04 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	3301      	adds	r3, #1
 8013afa:	61fb      	str	r3, [r7, #28]
 8013afc:	69fa      	ldr	r2, [r7, #28]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	dbe4      	blt.n	8013ace <_read+0x16>
		}
	}
	return DataIdx + 1;
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	3301      	adds	r3, #1
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3720      	adds	r7, #32
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <udp_receive_callback>:
resv_t resv;             // Holds
resv_t * p_resv;

void udp_receive_callback(
		void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b0a0      	sub	sp, #128	; 0x80
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
 8013b1c:	603b      	str	r3, [r7, #0]
	flag_message_From_client=1;
 8013b1e:	4b25      	ldr	r3, [pc, #148]	; (8013bb4 <udp_receive_callback+0xa4>)
 8013b20:	2201      	movs	r2, #1
 8013b22:	601a      	str	r2, [r3, #0]
	/* Get the IP of the Client */
	const char* remoteIP = ipaddr_ntoa(addr);
 8013b24:	6838      	ldr	r0, [r7, #0]
 8013b26:	f7fe ffe7 	bl	8012af8 <ip4addr_ntoa>
 8013b2a:	67f8      	str	r0, [r7, #124]	; 0x7c
	char buf[100];



    resv.id = *(uint8_t *)(p->payload + 0);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	781a      	ldrb	r2, [r3, #0]
 8013b32:	4b21      	ldr	r3, [pc, #132]	; (8013bb8 <udp_receive_callback+0xa8>)
 8013b34:	701a      	strb	r2, [r3, #0]
    resv.size = *(uint8_t *)(p->payload + 1);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	785a      	ldrb	r2, [r3, #1]
 8013b3c:	4b1e      	ldr	r3, [pc, #120]	; (8013bb8 <udp_receive_callback+0xa8>)
 8013b3e:	705a      	strb	r2, [r3, #1]
    resv.msg = *(uint8_t *)(p->payload + 2);
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	3302      	adds	r3, #2
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	461a      	mov	r2, r3
 8013b4a:	4b1b      	ldr	r3, [pc, #108]	; (8013bb8 <udp_receive_callback+0xa8>)
 8013b4c:	605a      	str	r2, [r3, #4]


	const int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	685a      	ldr	r2, [r3, #4]
 8013b52:	f107 0310 	add.w	r3, r7, #16
 8013b56:	4919      	ldr	r1, [pc, #100]	; (8013bbc <udp_receive_callback+0xac>)
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f000 f92b 	bl	8013db4 <siprintf>
 8013b5e:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8013b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b68:	4619      	mov	r1, r3
 8013b6a:	2036      	movs	r0, #54	; 0x36
 8013b6c:	f7f6 fde4 	bl	800a738 <pbuf_alloc>
 8013b70:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 8013b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	f107 0310 	add.w	r3, r7, #16
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013b7e:	f7f7 fb2b 	bl	800b1d8 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8013b82:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013b86:	461a      	mov	r2, r3
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	68b8      	ldr	r0, [r7, #8]
 8013b8c:	f7fd fac2 	bl	8011114 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8013b90:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013b92:	68b8      	ldr	r0, [r7, #8]
 8013b94:	f7fd f84c 	bl	8010c30 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8013b98:	68b8      	ldr	r0, [r7, #8]
 8013b9a:	f7fd fb29 	bl	80111f0 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8013b9e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013ba0:	f7f7 f8ae 	bl	800ad00 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f7f7 f8ab 	bl	800ad00 <pbuf_free>
}
 8013baa:	bf00      	nop
 8013bac:	3780      	adds	r7, #128	; 0x80
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	20008de8 	.word	0x20008de8
 8013bb8:	20008dec 	.word	0x20008dec
 8013bbc:	08017b1c 	.word	0x08017b1c

08013bc0 <udpServer_init>:

void udpServer_init(void) {
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb* upcb = udp_new();
 8013bc6:	f7fd fb9d 	bl	8011304 <udp_new>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	607b      	str	r3, [r7, #4]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 7 is the server UDP port
 8013bce:	2207      	movs	r2, #7
 8013bd0:	490b      	ldr	r1, [pc, #44]	; (8013c00 <udpServer_init+0x40>)
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7fd fa16 	bl	8011004 <udp_bind>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	70fb      	strb	r3, [r7, #3]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 8013bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d105      	bne.n	8013bf0 <udpServer_init+0x30>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8013be4:	2200      	movs	r2, #0
 8013be6:	4907      	ldr	r1, [pc, #28]	; (8013c04 <udpServer_init+0x44>)
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7fd fb29 	bl	8011240 <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 8013bee:	e002      	b.n	8013bf6 <udpServer_init+0x36>
	   udp_remove(upcb);
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7fd fb45 	bl	8011280 <udp_remove>
}
 8013bf6:	bf00      	nop
 8013bf8:	3708      	adds	r7, #8
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	08017c40 	.word	0x08017c40
 8013c04:	08013b11 	.word	0x08013b11

08013c08 <handle_reception_network>:

void handle_reception_network()
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	af00      	add	r7, sp, #0
	ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
 8013c0c:	4808      	ldr	r0, [pc, #32]	; (8013c30 <handle_reception_network+0x28>)
 8013c0e:	f7f5 fa9d 	bl	800914c <ethernetif_input>
	sys_check_timeouts();			//Handle which checks timeout expiration
 8013c12:	f7fc fe09 	bl	8010828 <sys_check_timeouts>

	if(flag_message_From_client==TRUE)
 8013c16:	4b07      	ldr	r3, [pc, #28]	; (8013c34 <handle_reception_network+0x2c>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d105      	bne.n	8013c2a <handle_reception_network+0x22>
	{
		printf("res : %c",resv.msg);
 8013c1e:	4b06      	ldr	r3, [pc, #24]	; (8013c38 <handle_reception_network+0x30>)
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	4619      	mov	r1, r3
 8013c24:	4805      	ldr	r0, [pc, #20]	; (8013c3c <handle_reception_network+0x34>)
 8013c26:	f000 f86f 	bl	8013d08 <iprintf>
		flag_message_From_client==FALSE;
	}
}
 8013c2a:	bf00      	nop
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	20000c2c 	.word	0x20000c2c
 8013c34:	20008de8 	.word	0x20008de8
 8013c38:	20008dec 	.word	0x20008dec
 8013c3c:	08017b38 	.word	0x08017b38

08013c40 <__libc_init_array>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	4d0d      	ldr	r5, [pc, #52]	; (8013c78 <__libc_init_array+0x38>)
 8013c44:	4c0d      	ldr	r4, [pc, #52]	; (8013c7c <__libc_init_array+0x3c>)
 8013c46:	1b64      	subs	r4, r4, r5
 8013c48:	10a4      	asrs	r4, r4, #2
 8013c4a:	2600      	movs	r6, #0
 8013c4c:	42a6      	cmp	r6, r4
 8013c4e:	d109      	bne.n	8013c64 <__libc_init_array+0x24>
 8013c50:	4d0b      	ldr	r5, [pc, #44]	; (8013c80 <__libc_init_array+0x40>)
 8013c52:	4c0c      	ldr	r4, [pc, #48]	; (8013c84 <__libc_init_array+0x44>)
 8013c54:	f001 fa5c 	bl	8015110 <_init>
 8013c58:	1b64      	subs	r4, r4, r5
 8013c5a:	10a4      	asrs	r4, r4, #2
 8013c5c:	2600      	movs	r6, #0
 8013c5e:	42a6      	cmp	r6, r4
 8013c60:	d105      	bne.n	8013c6e <__libc_init_array+0x2e>
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c68:	4798      	blx	r3
 8013c6a:	3601      	adds	r6, #1
 8013c6c:	e7ee      	b.n	8013c4c <__libc_init_array+0xc>
 8013c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c72:	4798      	blx	r3
 8013c74:	3601      	adds	r6, #1
 8013c76:	e7f2      	b.n	8013c5e <__libc_init_array+0x1e>
 8013c78:	08017da4 	.word	0x08017da4
 8013c7c:	08017da4 	.word	0x08017da4
 8013c80:	08017da4 	.word	0x08017da4
 8013c84:	08017da8 	.word	0x08017da8

08013c88 <memcmp>:
 8013c88:	b510      	push	{r4, lr}
 8013c8a:	3901      	subs	r1, #1
 8013c8c:	4402      	add	r2, r0
 8013c8e:	4290      	cmp	r0, r2
 8013c90:	d101      	bne.n	8013c96 <memcmp+0xe>
 8013c92:	2000      	movs	r0, #0
 8013c94:	e005      	b.n	8013ca2 <memcmp+0x1a>
 8013c96:	7803      	ldrb	r3, [r0, #0]
 8013c98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013c9c:	42a3      	cmp	r3, r4
 8013c9e:	d001      	beq.n	8013ca4 <memcmp+0x1c>
 8013ca0:	1b18      	subs	r0, r3, r4
 8013ca2:	bd10      	pop	{r4, pc}
 8013ca4:	3001      	adds	r0, #1
 8013ca6:	e7f2      	b.n	8013c8e <memcmp+0x6>

08013ca8 <memcpy>:
 8013ca8:	440a      	add	r2, r1
 8013caa:	4291      	cmp	r1, r2
 8013cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8013cb0:	d100      	bne.n	8013cb4 <memcpy+0xc>
 8013cb2:	4770      	bx	lr
 8013cb4:	b510      	push	{r4, lr}
 8013cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cbe:	4291      	cmp	r1, r2
 8013cc0:	d1f9      	bne.n	8013cb6 <memcpy+0xe>
 8013cc2:	bd10      	pop	{r4, pc}

08013cc4 <memmove>:
 8013cc4:	4288      	cmp	r0, r1
 8013cc6:	b510      	push	{r4, lr}
 8013cc8:	eb01 0402 	add.w	r4, r1, r2
 8013ccc:	d902      	bls.n	8013cd4 <memmove+0x10>
 8013cce:	4284      	cmp	r4, r0
 8013cd0:	4623      	mov	r3, r4
 8013cd2:	d807      	bhi.n	8013ce4 <memmove+0x20>
 8013cd4:	1e43      	subs	r3, r0, #1
 8013cd6:	42a1      	cmp	r1, r4
 8013cd8:	d008      	beq.n	8013cec <memmove+0x28>
 8013cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ce2:	e7f8      	b.n	8013cd6 <memmove+0x12>
 8013ce4:	4402      	add	r2, r0
 8013ce6:	4601      	mov	r1, r0
 8013ce8:	428a      	cmp	r2, r1
 8013cea:	d100      	bne.n	8013cee <memmove+0x2a>
 8013cec:	bd10      	pop	{r4, pc}
 8013cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013cf6:	e7f7      	b.n	8013ce8 <memmove+0x24>

08013cf8 <memset>:
 8013cf8:	4402      	add	r2, r0
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d100      	bne.n	8013d02 <memset+0xa>
 8013d00:	4770      	bx	lr
 8013d02:	f803 1b01 	strb.w	r1, [r3], #1
 8013d06:	e7f9      	b.n	8013cfc <memset+0x4>

08013d08 <iprintf>:
 8013d08:	b40f      	push	{r0, r1, r2, r3}
 8013d0a:	4b0a      	ldr	r3, [pc, #40]	; (8013d34 <iprintf+0x2c>)
 8013d0c:	b513      	push	{r0, r1, r4, lr}
 8013d0e:	681c      	ldr	r4, [r3, #0]
 8013d10:	b124      	cbz	r4, 8013d1c <iprintf+0x14>
 8013d12:	69a3      	ldr	r3, [r4, #24]
 8013d14:	b913      	cbnz	r3, 8013d1c <iprintf+0x14>
 8013d16:	4620      	mov	r0, r4
 8013d18:	f000 fa64 	bl	80141e4 <__sinit>
 8013d1c:	ab05      	add	r3, sp, #20
 8013d1e:	9a04      	ldr	r2, [sp, #16]
 8013d20:	68a1      	ldr	r1, [r4, #8]
 8013d22:	9301      	str	r3, [sp, #4]
 8013d24:	4620      	mov	r0, r4
 8013d26:	f000 fde3 	bl	80148f0 <_vfiprintf_r>
 8013d2a:	b002      	add	sp, #8
 8013d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d30:	b004      	add	sp, #16
 8013d32:	4770      	bx	lr
 8013d34:	2000002c 	.word	0x2000002c

08013d38 <rand>:
 8013d38:	4b16      	ldr	r3, [pc, #88]	; (8013d94 <rand+0x5c>)
 8013d3a:	b510      	push	{r4, lr}
 8013d3c:	681c      	ldr	r4, [r3, #0]
 8013d3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013d40:	b9b3      	cbnz	r3, 8013d70 <rand+0x38>
 8013d42:	2018      	movs	r0, #24
 8013d44:	f000 fb66 	bl	8014414 <malloc>
 8013d48:	63a0      	str	r0, [r4, #56]	; 0x38
 8013d4a:	b928      	cbnz	r0, 8013d58 <rand+0x20>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	4b12      	ldr	r3, [pc, #72]	; (8013d98 <rand+0x60>)
 8013d50:	4812      	ldr	r0, [pc, #72]	; (8013d9c <rand+0x64>)
 8013d52:	214e      	movs	r1, #78	; 0x4e
 8013d54:	f000 f90e 	bl	8013f74 <__assert_func>
 8013d58:	4a11      	ldr	r2, [pc, #68]	; (8013da0 <rand+0x68>)
 8013d5a:	4b12      	ldr	r3, [pc, #72]	; (8013da4 <rand+0x6c>)
 8013d5c:	e9c0 2300 	strd	r2, r3, [r0]
 8013d60:	4b11      	ldr	r3, [pc, #68]	; (8013da8 <rand+0x70>)
 8013d62:	6083      	str	r3, [r0, #8]
 8013d64:	230b      	movs	r3, #11
 8013d66:	8183      	strh	r3, [r0, #12]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013d70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013d72:	4a0e      	ldr	r2, [pc, #56]	; (8013dac <rand+0x74>)
 8013d74:	6920      	ldr	r0, [r4, #16]
 8013d76:	6963      	ldr	r3, [r4, #20]
 8013d78:	490d      	ldr	r1, [pc, #52]	; (8013db0 <rand+0x78>)
 8013d7a:	4342      	muls	r2, r0
 8013d7c:	fb01 2203 	mla	r2, r1, r3, r2
 8013d80:	fba0 0101 	umull	r0, r1, r0, r1
 8013d84:	1c43      	adds	r3, r0, #1
 8013d86:	eb42 0001 	adc.w	r0, r2, r1
 8013d8a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013d8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013d92:	bd10      	pop	{r4, pc}
 8013d94:	2000002c 	.word	0x2000002c
 8013d98:	08017c58 	.word	0x08017c58
 8013d9c:	08017c6f 	.word	0x08017c6f
 8013da0:	abcd330e 	.word	0xabcd330e
 8013da4:	e66d1234 	.word	0xe66d1234
 8013da8:	0005deec 	.word	0x0005deec
 8013dac:	5851f42d 	.word	0x5851f42d
 8013db0:	4c957f2d 	.word	0x4c957f2d

08013db4 <siprintf>:
 8013db4:	b40e      	push	{r1, r2, r3}
 8013db6:	b500      	push	{lr}
 8013db8:	b09c      	sub	sp, #112	; 0x70
 8013dba:	ab1d      	add	r3, sp, #116	; 0x74
 8013dbc:	9002      	str	r0, [sp, #8]
 8013dbe:	9006      	str	r0, [sp, #24]
 8013dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013dc4:	4809      	ldr	r0, [pc, #36]	; (8013dec <siprintf+0x38>)
 8013dc6:	9107      	str	r1, [sp, #28]
 8013dc8:	9104      	str	r1, [sp, #16]
 8013dca:	4909      	ldr	r1, [pc, #36]	; (8013df0 <siprintf+0x3c>)
 8013dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dd0:	9105      	str	r1, [sp, #20]
 8013dd2:	6800      	ldr	r0, [r0, #0]
 8013dd4:	9301      	str	r3, [sp, #4]
 8013dd6:	a902      	add	r1, sp, #8
 8013dd8:	f000 fc60 	bl	801469c <_svfiprintf_r>
 8013ddc:	9b02      	ldr	r3, [sp, #8]
 8013dde:	2200      	movs	r2, #0
 8013de0:	701a      	strb	r2, [r3, #0]
 8013de2:	b01c      	add	sp, #112	; 0x70
 8013de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013de8:	b003      	add	sp, #12
 8013dea:	4770      	bx	lr
 8013dec:	2000002c 	.word	0x2000002c
 8013df0:	ffff0208 	.word	0xffff0208

08013df4 <__swbuf_r>:
 8013df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013df6:	460e      	mov	r6, r1
 8013df8:	4614      	mov	r4, r2
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	b118      	cbz	r0, 8013e06 <__swbuf_r+0x12>
 8013dfe:	6983      	ldr	r3, [r0, #24]
 8013e00:	b90b      	cbnz	r3, 8013e06 <__swbuf_r+0x12>
 8013e02:	f000 f9ef 	bl	80141e4 <__sinit>
 8013e06:	4b21      	ldr	r3, [pc, #132]	; (8013e8c <__swbuf_r+0x98>)
 8013e08:	429c      	cmp	r4, r3
 8013e0a:	d12b      	bne.n	8013e64 <__swbuf_r+0x70>
 8013e0c:	686c      	ldr	r4, [r5, #4]
 8013e0e:	69a3      	ldr	r3, [r4, #24]
 8013e10:	60a3      	str	r3, [r4, #8]
 8013e12:	89a3      	ldrh	r3, [r4, #12]
 8013e14:	071a      	lsls	r2, r3, #28
 8013e16:	d52f      	bpl.n	8013e78 <__swbuf_r+0x84>
 8013e18:	6923      	ldr	r3, [r4, #16]
 8013e1a:	b36b      	cbz	r3, 8013e78 <__swbuf_r+0x84>
 8013e1c:	6923      	ldr	r3, [r4, #16]
 8013e1e:	6820      	ldr	r0, [r4, #0]
 8013e20:	1ac0      	subs	r0, r0, r3
 8013e22:	6963      	ldr	r3, [r4, #20]
 8013e24:	b2f6      	uxtb	r6, r6
 8013e26:	4283      	cmp	r3, r0
 8013e28:	4637      	mov	r7, r6
 8013e2a:	dc04      	bgt.n	8013e36 <__swbuf_r+0x42>
 8013e2c:	4621      	mov	r1, r4
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f000 f944 	bl	80140bc <_fflush_r>
 8013e34:	bb30      	cbnz	r0, 8013e84 <__swbuf_r+0x90>
 8013e36:	68a3      	ldr	r3, [r4, #8]
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	60a3      	str	r3, [r4, #8]
 8013e3c:	6823      	ldr	r3, [r4, #0]
 8013e3e:	1c5a      	adds	r2, r3, #1
 8013e40:	6022      	str	r2, [r4, #0]
 8013e42:	701e      	strb	r6, [r3, #0]
 8013e44:	6963      	ldr	r3, [r4, #20]
 8013e46:	3001      	adds	r0, #1
 8013e48:	4283      	cmp	r3, r0
 8013e4a:	d004      	beq.n	8013e56 <__swbuf_r+0x62>
 8013e4c:	89a3      	ldrh	r3, [r4, #12]
 8013e4e:	07db      	lsls	r3, r3, #31
 8013e50:	d506      	bpl.n	8013e60 <__swbuf_r+0x6c>
 8013e52:	2e0a      	cmp	r6, #10
 8013e54:	d104      	bne.n	8013e60 <__swbuf_r+0x6c>
 8013e56:	4621      	mov	r1, r4
 8013e58:	4628      	mov	r0, r5
 8013e5a:	f000 f92f 	bl	80140bc <_fflush_r>
 8013e5e:	b988      	cbnz	r0, 8013e84 <__swbuf_r+0x90>
 8013e60:	4638      	mov	r0, r7
 8013e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e64:	4b0a      	ldr	r3, [pc, #40]	; (8013e90 <__swbuf_r+0x9c>)
 8013e66:	429c      	cmp	r4, r3
 8013e68:	d101      	bne.n	8013e6e <__swbuf_r+0x7a>
 8013e6a:	68ac      	ldr	r4, [r5, #8]
 8013e6c:	e7cf      	b.n	8013e0e <__swbuf_r+0x1a>
 8013e6e:	4b09      	ldr	r3, [pc, #36]	; (8013e94 <__swbuf_r+0xa0>)
 8013e70:	429c      	cmp	r4, r3
 8013e72:	bf08      	it	eq
 8013e74:	68ec      	ldreq	r4, [r5, #12]
 8013e76:	e7ca      	b.n	8013e0e <__swbuf_r+0x1a>
 8013e78:	4621      	mov	r1, r4
 8013e7a:	4628      	mov	r0, r5
 8013e7c:	f000 f80c 	bl	8013e98 <__swsetup_r>
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d0cb      	beq.n	8013e1c <__swbuf_r+0x28>
 8013e84:	f04f 37ff 	mov.w	r7, #4294967295
 8013e88:	e7ea      	b.n	8013e60 <__swbuf_r+0x6c>
 8013e8a:	bf00      	nop
 8013e8c:	08017d28 	.word	0x08017d28
 8013e90:	08017d48 	.word	0x08017d48
 8013e94:	08017d08 	.word	0x08017d08

08013e98 <__swsetup_r>:
 8013e98:	4b32      	ldr	r3, [pc, #200]	; (8013f64 <__swsetup_r+0xcc>)
 8013e9a:	b570      	push	{r4, r5, r6, lr}
 8013e9c:	681d      	ldr	r5, [r3, #0]
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	b125      	cbz	r5, 8013eae <__swsetup_r+0x16>
 8013ea4:	69ab      	ldr	r3, [r5, #24]
 8013ea6:	b913      	cbnz	r3, 8013eae <__swsetup_r+0x16>
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	f000 f99b 	bl	80141e4 <__sinit>
 8013eae:	4b2e      	ldr	r3, [pc, #184]	; (8013f68 <__swsetup_r+0xd0>)
 8013eb0:	429c      	cmp	r4, r3
 8013eb2:	d10f      	bne.n	8013ed4 <__swsetup_r+0x3c>
 8013eb4:	686c      	ldr	r4, [r5, #4]
 8013eb6:	89a3      	ldrh	r3, [r4, #12]
 8013eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ebc:	0719      	lsls	r1, r3, #28
 8013ebe:	d42c      	bmi.n	8013f1a <__swsetup_r+0x82>
 8013ec0:	06dd      	lsls	r5, r3, #27
 8013ec2:	d411      	bmi.n	8013ee8 <__swsetup_r+0x50>
 8013ec4:	2309      	movs	r3, #9
 8013ec6:	6033      	str	r3, [r6, #0]
 8013ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ecc:	81a3      	strh	r3, [r4, #12]
 8013ece:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed2:	e03e      	b.n	8013f52 <__swsetup_r+0xba>
 8013ed4:	4b25      	ldr	r3, [pc, #148]	; (8013f6c <__swsetup_r+0xd4>)
 8013ed6:	429c      	cmp	r4, r3
 8013ed8:	d101      	bne.n	8013ede <__swsetup_r+0x46>
 8013eda:	68ac      	ldr	r4, [r5, #8]
 8013edc:	e7eb      	b.n	8013eb6 <__swsetup_r+0x1e>
 8013ede:	4b24      	ldr	r3, [pc, #144]	; (8013f70 <__swsetup_r+0xd8>)
 8013ee0:	429c      	cmp	r4, r3
 8013ee2:	bf08      	it	eq
 8013ee4:	68ec      	ldreq	r4, [r5, #12]
 8013ee6:	e7e6      	b.n	8013eb6 <__swsetup_r+0x1e>
 8013ee8:	0758      	lsls	r0, r3, #29
 8013eea:	d512      	bpl.n	8013f12 <__swsetup_r+0x7a>
 8013eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013eee:	b141      	cbz	r1, 8013f02 <__swsetup_r+0x6a>
 8013ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ef4:	4299      	cmp	r1, r3
 8013ef6:	d002      	beq.n	8013efe <__swsetup_r+0x66>
 8013ef8:	4630      	mov	r0, r6
 8013efa:	f000 fa93 	bl	8014424 <_free_r>
 8013efe:	2300      	movs	r3, #0
 8013f00:	6363      	str	r3, [r4, #52]	; 0x34
 8013f02:	89a3      	ldrh	r3, [r4, #12]
 8013f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f08:	81a3      	strh	r3, [r4, #12]
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	6063      	str	r3, [r4, #4]
 8013f0e:	6923      	ldr	r3, [r4, #16]
 8013f10:	6023      	str	r3, [r4, #0]
 8013f12:	89a3      	ldrh	r3, [r4, #12]
 8013f14:	f043 0308 	orr.w	r3, r3, #8
 8013f18:	81a3      	strh	r3, [r4, #12]
 8013f1a:	6923      	ldr	r3, [r4, #16]
 8013f1c:	b94b      	cbnz	r3, 8013f32 <__swsetup_r+0x9a>
 8013f1e:	89a3      	ldrh	r3, [r4, #12]
 8013f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f28:	d003      	beq.n	8013f32 <__swsetup_r+0x9a>
 8013f2a:	4621      	mov	r1, r4
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f000 fa31 	bl	8014394 <__smakebuf_r>
 8013f32:	89a0      	ldrh	r0, [r4, #12]
 8013f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f38:	f010 0301 	ands.w	r3, r0, #1
 8013f3c:	d00a      	beq.n	8013f54 <__swsetup_r+0xbc>
 8013f3e:	2300      	movs	r3, #0
 8013f40:	60a3      	str	r3, [r4, #8]
 8013f42:	6963      	ldr	r3, [r4, #20]
 8013f44:	425b      	negs	r3, r3
 8013f46:	61a3      	str	r3, [r4, #24]
 8013f48:	6923      	ldr	r3, [r4, #16]
 8013f4a:	b943      	cbnz	r3, 8013f5e <__swsetup_r+0xc6>
 8013f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f50:	d1ba      	bne.n	8013ec8 <__swsetup_r+0x30>
 8013f52:	bd70      	pop	{r4, r5, r6, pc}
 8013f54:	0781      	lsls	r1, r0, #30
 8013f56:	bf58      	it	pl
 8013f58:	6963      	ldrpl	r3, [r4, #20]
 8013f5a:	60a3      	str	r3, [r4, #8]
 8013f5c:	e7f4      	b.n	8013f48 <__swsetup_r+0xb0>
 8013f5e:	2000      	movs	r0, #0
 8013f60:	e7f7      	b.n	8013f52 <__swsetup_r+0xba>
 8013f62:	bf00      	nop
 8013f64:	2000002c 	.word	0x2000002c
 8013f68:	08017d28 	.word	0x08017d28
 8013f6c:	08017d48 	.word	0x08017d48
 8013f70:	08017d08 	.word	0x08017d08

08013f74 <__assert_func>:
 8013f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f76:	4614      	mov	r4, r2
 8013f78:	461a      	mov	r2, r3
 8013f7a:	4b09      	ldr	r3, [pc, #36]	; (8013fa0 <__assert_func+0x2c>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	4605      	mov	r5, r0
 8013f80:	68d8      	ldr	r0, [r3, #12]
 8013f82:	b14c      	cbz	r4, 8013f98 <__assert_func+0x24>
 8013f84:	4b07      	ldr	r3, [pc, #28]	; (8013fa4 <__assert_func+0x30>)
 8013f86:	9100      	str	r1, [sp, #0]
 8013f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f8c:	4906      	ldr	r1, [pc, #24]	; (8013fa8 <__assert_func+0x34>)
 8013f8e:	462b      	mov	r3, r5
 8013f90:	f000 f9a6 	bl	80142e0 <fiprintf>
 8013f94:	f000 ffd6 	bl	8014f44 <abort>
 8013f98:	4b04      	ldr	r3, [pc, #16]	; (8013fac <__assert_func+0x38>)
 8013f9a:	461c      	mov	r4, r3
 8013f9c:	e7f3      	b.n	8013f86 <__assert_func+0x12>
 8013f9e:	bf00      	nop
 8013fa0:	2000002c 	.word	0x2000002c
 8013fa4:	08017cca 	.word	0x08017cca
 8013fa8:	08017cd7 	.word	0x08017cd7
 8013fac:	08017d05 	.word	0x08017d05

08013fb0 <__sflush_r>:
 8013fb0:	898a      	ldrh	r2, [r1, #12]
 8013fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb6:	4605      	mov	r5, r0
 8013fb8:	0710      	lsls	r0, r2, #28
 8013fba:	460c      	mov	r4, r1
 8013fbc:	d458      	bmi.n	8014070 <__sflush_r+0xc0>
 8013fbe:	684b      	ldr	r3, [r1, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	dc05      	bgt.n	8013fd0 <__sflush_r+0x20>
 8013fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	dc02      	bgt.n	8013fd0 <__sflush_r+0x20>
 8013fca:	2000      	movs	r0, #0
 8013fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fd2:	2e00      	cmp	r6, #0
 8013fd4:	d0f9      	beq.n	8013fca <__sflush_r+0x1a>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013fdc:	682f      	ldr	r7, [r5, #0]
 8013fde:	602b      	str	r3, [r5, #0]
 8013fe0:	d032      	beq.n	8014048 <__sflush_r+0x98>
 8013fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013fe4:	89a3      	ldrh	r3, [r4, #12]
 8013fe6:	075a      	lsls	r2, r3, #29
 8013fe8:	d505      	bpl.n	8013ff6 <__sflush_r+0x46>
 8013fea:	6863      	ldr	r3, [r4, #4]
 8013fec:	1ac0      	subs	r0, r0, r3
 8013fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013ff0:	b10b      	cbz	r3, 8013ff6 <__sflush_r+0x46>
 8013ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013ff4:	1ac0      	subs	r0, r0, r3
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ffc:	6a21      	ldr	r1, [r4, #32]
 8013ffe:	4628      	mov	r0, r5
 8014000:	47b0      	blx	r6
 8014002:	1c43      	adds	r3, r0, #1
 8014004:	89a3      	ldrh	r3, [r4, #12]
 8014006:	d106      	bne.n	8014016 <__sflush_r+0x66>
 8014008:	6829      	ldr	r1, [r5, #0]
 801400a:	291d      	cmp	r1, #29
 801400c:	d82c      	bhi.n	8014068 <__sflush_r+0xb8>
 801400e:	4a2a      	ldr	r2, [pc, #168]	; (80140b8 <__sflush_r+0x108>)
 8014010:	40ca      	lsrs	r2, r1
 8014012:	07d6      	lsls	r6, r2, #31
 8014014:	d528      	bpl.n	8014068 <__sflush_r+0xb8>
 8014016:	2200      	movs	r2, #0
 8014018:	6062      	str	r2, [r4, #4]
 801401a:	04d9      	lsls	r1, r3, #19
 801401c:	6922      	ldr	r2, [r4, #16]
 801401e:	6022      	str	r2, [r4, #0]
 8014020:	d504      	bpl.n	801402c <__sflush_r+0x7c>
 8014022:	1c42      	adds	r2, r0, #1
 8014024:	d101      	bne.n	801402a <__sflush_r+0x7a>
 8014026:	682b      	ldr	r3, [r5, #0]
 8014028:	b903      	cbnz	r3, 801402c <__sflush_r+0x7c>
 801402a:	6560      	str	r0, [r4, #84]	; 0x54
 801402c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801402e:	602f      	str	r7, [r5, #0]
 8014030:	2900      	cmp	r1, #0
 8014032:	d0ca      	beq.n	8013fca <__sflush_r+0x1a>
 8014034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014038:	4299      	cmp	r1, r3
 801403a:	d002      	beq.n	8014042 <__sflush_r+0x92>
 801403c:	4628      	mov	r0, r5
 801403e:	f000 f9f1 	bl	8014424 <_free_r>
 8014042:	2000      	movs	r0, #0
 8014044:	6360      	str	r0, [r4, #52]	; 0x34
 8014046:	e7c1      	b.n	8013fcc <__sflush_r+0x1c>
 8014048:	6a21      	ldr	r1, [r4, #32]
 801404a:	2301      	movs	r3, #1
 801404c:	4628      	mov	r0, r5
 801404e:	47b0      	blx	r6
 8014050:	1c41      	adds	r1, r0, #1
 8014052:	d1c7      	bne.n	8013fe4 <__sflush_r+0x34>
 8014054:	682b      	ldr	r3, [r5, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d0c4      	beq.n	8013fe4 <__sflush_r+0x34>
 801405a:	2b1d      	cmp	r3, #29
 801405c:	d001      	beq.n	8014062 <__sflush_r+0xb2>
 801405e:	2b16      	cmp	r3, #22
 8014060:	d101      	bne.n	8014066 <__sflush_r+0xb6>
 8014062:	602f      	str	r7, [r5, #0]
 8014064:	e7b1      	b.n	8013fca <__sflush_r+0x1a>
 8014066:	89a3      	ldrh	r3, [r4, #12]
 8014068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801406c:	81a3      	strh	r3, [r4, #12]
 801406e:	e7ad      	b.n	8013fcc <__sflush_r+0x1c>
 8014070:	690f      	ldr	r7, [r1, #16]
 8014072:	2f00      	cmp	r7, #0
 8014074:	d0a9      	beq.n	8013fca <__sflush_r+0x1a>
 8014076:	0793      	lsls	r3, r2, #30
 8014078:	680e      	ldr	r6, [r1, #0]
 801407a:	bf08      	it	eq
 801407c:	694b      	ldreq	r3, [r1, #20]
 801407e:	600f      	str	r7, [r1, #0]
 8014080:	bf18      	it	ne
 8014082:	2300      	movne	r3, #0
 8014084:	eba6 0807 	sub.w	r8, r6, r7
 8014088:	608b      	str	r3, [r1, #8]
 801408a:	f1b8 0f00 	cmp.w	r8, #0
 801408e:	dd9c      	ble.n	8013fca <__sflush_r+0x1a>
 8014090:	6a21      	ldr	r1, [r4, #32]
 8014092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014094:	4643      	mov	r3, r8
 8014096:	463a      	mov	r2, r7
 8014098:	4628      	mov	r0, r5
 801409a:	47b0      	blx	r6
 801409c:	2800      	cmp	r0, #0
 801409e:	dc06      	bgt.n	80140ae <__sflush_r+0xfe>
 80140a0:	89a3      	ldrh	r3, [r4, #12]
 80140a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140a6:	81a3      	strh	r3, [r4, #12]
 80140a8:	f04f 30ff 	mov.w	r0, #4294967295
 80140ac:	e78e      	b.n	8013fcc <__sflush_r+0x1c>
 80140ae:	4407      	add	r7, r0
 80140b0:	eba8 0800 	sub.w	r8, r8, r0
 80140b4:	e7e9      	b.n	801408a <__sflush_r+0xda>
 80140b6:	bf00      	nop
 80140b8:	20400001 	.word	0x20400001

080140bc <_fflush_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	690b      	ldr	r3, [r1, #16]
 80140c0:	4605      	mov	r5, r0
 80140c2:	460c      	mov	r4, r1
 80140c4:	b913      	cbnz	r3, 80140cc <_fflush_r+0x10>
 80140c6:	2500      	movs	r5, #0
 80140c8:	4628      	mov	r0, r5
 80140ca:	bd38      	pop	{r3, r4, r5, pc}
 80140cc:	b118      	cbz	r0, 80140d6 <_fflush_r+0x1a>
 80140ce:	6983      	ldr	r3, [r0, #24]
 80140d0:	b90b      	cbnz	r3, 80140d6 <_fflush_r+0x1a>
 80140d2:	f000 f887 	bl	80141e4 <__sinit>
 80140d6:	4b14      	ldr	r3, [pc, #80]	; (8014128 <_fflush_r+0x6c>)
 80140d8:	429c      	cmp	r4, r3
 80140da:	d11b      	bne.n	8014114 <_fflush_r+0x58>
 80140dc:	686c      	ldr	r4, [r5, #4]
 80140de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d0ef      	beq.n	80140c6 <_fflush_r+0xa>
 80140e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140e8:	07d0      	lsls	r0, r2, #31
 80140ea:	d404      	bmi.n	80140f6 <_fflush_r+0x3a>
 80140ec:	0599      	lsls	r1, r3, #22
 80140ee:	d402      	bmi.n	80140f6 <_fflush_r+0x3a>
 80140f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140f2:	f000 f927 	bl	8014344 <__retarget_lock_acquire_recursive>
 80140f6:	4628      	mov	r0, r5
 80140f8:	4621      	mov	r1, r4
 80140fa:	f7ff ff59 	bl	8013fb0 <__sflush_r>
 80140fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014100:	07da      	lsls	r2, r3, #31
 8014102:	4605      	mov	r5, r0
 8014104:	d4e0      	bmi.n	80140c8 <_fflush_r+0xc>
 8014106:	89a3      	ldrh	r3, [r4, #12]
 8014108:	059b      	lsls	r3, r3, #22
 801410a:	d4dd      	bmi.n	80140c8 <_fflush_r+0xc>
 801410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801410e:	f000 f91a 	bl	8014346 <__retarget_lock_release_recursive>
 8014112:	e7d9      	b.n	80140c8 <_fflush_r+0xc>
 8014114:	4b05      	ldr	r3, [pc, #20]	; (801412c <_fflush_r+0x70>)
 8014116:	429c      	cmp	r4, r3
 8014118:	d101      	bne.n	801411e <_fflush_r+0x62>
 801411a:	68ac      	ldr	r4, [r5, #8]
 801411c:	e7df      	b.n	80140de <_fflush_r+0x22>
 801411e:	4b04      	ldr	r3, [pc, #16]	; (8014130 <_fflush_r+0x74>)
 8014120:	429c      	cmp	r4, r3
 8014122:	bf08      	it	eq
 8014124:	68ec      	ldreq	r4, [r5, #12]
 8014126:	e7da      	b.n	80140de <_fflush_r+0x22>
 8014128:	08017d28 	.word	0x08017d28
 801412c:	08017d48 	.word	0x08017d48
 8014130:	08017d08 	.word	0x08017d08

08014134 <std>:
 8014134:	2300      	movs	r3, #0
 8014136:	b510      	push	{r4, lr}
 8014138:	4604      	mov	r4, r0
 801413a:	e9c0 3300 	strd	r3, r3, [r0]
 801413e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014142:	6083      	str	r3, [r0, #8]
 8014144:	8181      	strh	r1, [r0, #12]
 8014146:	6643      	str	r3, [r0, #100]	; 0x64
 8014148:	81c2      	strh	r2, [r0, #14]
 801414a:	6183      	str	r3, [r0, #24]
 801414c:	4619      	mov	r1, r3
 801414e:	2208      	movs	r2, #8
 8014150:	305c      	adds	r0, #92	; 0x5c
 8014152:	f7ff fdd1 	bl	8013cf8 <memset>
 8014156:	4b05      	ldr	r3, [pc, #20]	; (801416c <std+0x38>)
 8014158:	6263      	str	r3, [r4, #36]	; 0x24
 801415a:	4b05      	ldr	r3, [pc, #20]	; (8014170 <std+0x3c>)
 801415c:	62a3      	str	r3, [r4, #40]	; 0x28
 801415e:	4b05      	ldr	r3, [pc, #20]	; (8014174 <std+0x40>)
 8014160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014162:	4b05      	ldr	r3, [pc, #20]	; (8014178 <std+0x44>)
 8014164:	6224      	str	r4, [r4, #32]
 8014166:	6323      	str	r3, [r4, #48]	; 0x30
 8014168:	bd10      	pop	{r4, pc}
 801416a:	bf00      	nop
 801416c:	08014e99 	.word	0x08014e99
 8014170:	08014ebb 	.word	0x08014ebb
 8014174:	08014ef3 	.word	0x08014ef3
 8014178:	08014f17 	.word	0x08014f17

0801417c <_cleanup_r>:
 801417c:	4901      	ldr	r1, [pc, #4]	; (8014184 <_cleanup_r+0x8>)
 801417e:	f000 b8c1 	b.w	8014304 <_fwalk_reent>
 8014182:	bf00      	nop
 8014184:	080140bd 	.word	0x080140bd

08014188 <__sfmoreglue>:
 8014188:	b570      	push	{r4, r5, r6, lr}
 801418a:	2268      	movs	r2, #104	; 0x68
 801418c:	1e4d      	subs	r5, r1, #1
 801418e:	4355      	muls	r5, r2
 8014190:	460e      	mov	r6, r1
 8014192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014196:	f000 f9b1 	bl	80144fc <_malloc_r>
 801419a:	4604      	mov	r4, r0
 801419c:	b140      	cbz	r0, 80141b0 <__sfmoreglue+0x28>
 801419e:	2100      	movs	r1, #0
 80141a0:	e9c0 1600 	strd	r1, r6, [r0]
 80141a4:	300c      	adds	r0, #12
 80141a6:	60a0      	str	r0, [r4, #8]
 80141a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80141ac:	f7ff fda4 	bl	8013cf8 <memset>
 80141b0:	4620      	mov	r0, r4
 80141b2:	bd70      	pop	{r4, r5, r6, pc}

080141b4 <__sfp_lock_acquire>:
 80141b4:	4801      	ldr	r0, [pc, #4]	; (80141bc <__sfp_lock_acquire+0x8>)
 80141b6:	f000 b8c5 	b.w	8014344 <__retarget_lock_acquire_recursive>
 80141ba:	bf00      	nop
 80141bc:	20008df9 	.word	0x20008df9

080141c0 <__sfp_lock_release>:
 80141c0:	4801      	ldr	r0, [pc, #4]	; (80141c8 <__sfp_lock_release+0x8>)
 80141c2:	f000 b8c0 	b.w	8014346 <__retarget_lock_release_recursive>
 80141c6:	bf00      	nop
 80141c8:	20008df9 	.word	0x20008df9

080141cc <__sinit_lock_acquire>:
 80141cc:	4801      	ldr	r0, [pc, #4]	; (80141d4 <__sinit_lock_acquire+0x8>)
 80141ce:	f000 b8b9 	b.w	8014344 <__retarget_lock_acquire_recursive>
 80141d2:	bf00      	nop
 80141d4:	20008dfa 	.word	0x20008dfa

080141d8 <__sinit_lock_release>:
 80141d8:	4801      	ldr	r0, [pc, #4]	; (80141e0 <__sinit_lock_release+0x8>)
 80141da:	f000 b8b4 	b.w	8014346 <__retarget_lock_release_recursive>
 80141de:	bf00      	nop
 80141e0:	20008dfa 	.word	0x20008dfa

080141e4 <__sinit>:
 80141e4:	b510      	push	{r4, lr}
 80141e6:	4604      	mov	r4, r0
 80141e8:	f7ff fff0 	bl	80141cc <__sinit_lock_acquire>
 80141ec:	69a3      	ldr	r3, [r4, #24]
 80141ee:	b11b      	cbz	r3, 80141f8 <__sinit+0x14>
 80141f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141f4:	f7ff bff0 	b.w	80141d8 <__sinit_lock_release>
 80141f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80141fc:	6523      	str	r3, [r4, #80]	; 0x50
 80141fe:	4b13      	ldr	r3, [pc, #76]	; (801424c <__sinit+0x68>)
 8014200:	4a13      	ldr	r2, [pc, #76]	; (8014250 <__sinit+0x6c>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	62a2      	str	r2, [r4, #40]	; 0x28
 8014206:	42a3      	cmp	r3, r4
 8014208:	bf04      	itt	eq
 801420a:	2301      	moveq	r3, #1
 801420c:	61a3      	streq	r3, [r4, #24]
 801420e:	4620      	mov	r0, r4
 8014210:	f000 f820 	bl	8014254 <__sfp>
 8014214:	6060      	str	r0, [r4, #4]
 8014216:	4620      	mov	r0, r4
 8014218:	f000 f81c 	bl	8014254 <__sfp>
 801421c:	60a0      	str	r0, [r4, #8]
 801421e:	4620      	mov	r0, r4
 8014220:	f000 f818 	bl	8014254 <__sfp>
 8014224:	2200      	movs	r2, #0
 8014226:	60e0      	str	r0, [r4, #12]
 8014228:	2104      	movs	r1, #4
 801422a:	6860      	ldr	r0, [r4, #4]
 801422c:	f7ff ff82 	bl	8014134 <std>
 8014230:	68a0      	ldr	r0, [r4, #8]
 8014232:	2201      	movs	r2, #1
 8014234:	2109      	movs	r1, #9
 8014236:	f7ff ff7d 	bl	8014134 <std>
 801423a:	68e0      	ldr	r0, [r4, #12]
 801423c:	2202      	movs	r2, #2
 801423e:	2112      	movs	r1, #18
 8014240:	f7ff ff78 	bl	8014134 <std>
 8014244:	2301      	movs	r3, #1
 8014246:	61a3      	str	r3, [r4, #24]
 8014248:	e7d2      	b.n	80141f0 <__sinit+0xc>
 801424a:	bf00      	nop
 801424c:	08017c54 	.word	0x08017c54
 8014250:	0801417d 	.word	0x0801417d

08014254 <__sfp>:
 8014254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014256:	4607      	mov	r7, r0
 8014258:	f7ff ffac 	bl	80141b4 <__sfp_lock_acquire>
 801425c:	4b1e      	ldr	r3, [pc, #120]	; (80142d8 <__sfp+0x84>)
 801425e:	681e      	ldr	r6, [r3, #0]
 8014260:	69b3      	ldr	r3, [r6, #24]
 8014262:	b913      	cbnz	r3, 801426a <__sfp+0x16>
 8014264:	4630      	mov	r0, r6
 8014266:	f7ff ffbd 	bl	80141e4 <__sinit>
 801426a:	3648      	adds	r6, #72	; 0x48
 801426c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014270:	3b01      	subs	r3, #1
 8014272:	d503      	bpl.n	801427c <__sfp+0x28>
 8014274:	6833      	ldr	r3, [r6, #0]
 8014276:	b30b      	cbz	r3, 80142bc <__sfp+0x68>
 8014278:	6836      	ldr	r6, [r6, #0]
 801427a:	e7f7      	b.n	801426c <__sfp+0x18>
 801427c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014280:	b9d5      	cbnz	r5, 80142b8 <__sfp+0x64>
 8014282:	4b16      	ldr	r3, [pc, #88]	; (80142dc <__sfp+0x88>)
 8014284:	60e3      	str	r3, [r4, #12]
 8014286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801428a:	6665      	str	r5, [r4, #100]	; 0x64
 801428c:	f000 f859 	bl	8014342 <__retarget_lock_init_recursive>
 8014290:	f7ff ff96 	bl	80141c0 <__sfp_lock_release>
 8014294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801429c:	6025      	str	r5, [r4, #0]
 801429e:	61a5      	str	r5, [r4, #24]
 80142a0:	2208      	movs	r2, #8
 80142a2:	4629      	mov	r1, r5
 80142a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80142a8:	f7ff fd26 	bl	8013cf8 <memset>
 80142ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80142b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80142b4:	4620      	mov	r0, r4
 80142b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142b8:	3468      	adds	r4, #104	; 0x68
 80142ba:	e7d9      	b.n	8014270 <__sfp+0x1c>
 80142bc:	2104      	movs	r1, #4
 80142be:	4638      	mov	r0, r7
 80142c0:	f7ff ff62 	bl	8014188 <__sfmoreglue>
 80142c4:	4604      	mov	r4, r0
 80142c6:	6030      	str	r0, [r6, #0]
 80142c8:	2800      	cmp	r0, #0
 80142ca:	d1d5      	bne.n	8014278 <__sfp+0x24>
 80142cc:	f7ff ff78 	bl	80141c0 <__sfp_lock_release>
 80142d0:	230c      	movs	r3, #12
 80142d2:	603b      	str	r3, [r7, #0]
 80142d4:	e7ee      	b.n	80142b4 <__sfp+0x60>
 80142d6:	bf00      	nop
 80142d8:	08017c54 	.word	0x08017c54
 80142dc:	ffff0001 	.word	0xffff0001

080142e0 <fiprintf>:
 80142e0:	b40e      	push	{r1, r2, r3}
 80142e2:	b503      	push	{r0, r1, lr}
 80142e4:	4601      	mov	r1, r0
 80142e6:	ab03      	add	r3, sp, #12
 80142e8:	4805      	ldr	r0, [pc, #20]	; (8014300 <fiprintf+0x20>)
 80142ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ee:	6800      	ldr	r0, [r0, #0]
 80142f0:	9301      	str	r3, [sp, #4]
 80142f2:	f000 fafd 	bl	80148f0 <_vfiprintf_r>
 80142f6:	b002      	add	sp, #8
 80142f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142fc:	b003      	add	sp, #12
 80142fe:	4770      	bx	lr
 8014300:	2000002c 	.word	0x2000002c

08014304 <_fwalk_reent>:
 8014304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014308:	4606      	mov	r6, r0
 801430a:	4688      	mov	r8, r1
 801430c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014310:	2700      	movs	r7, #0
 8014312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014316:	f1b9 0901 	subs.w	r9, r9, #1
 801431a:	d505      	bpl.n	8014328 <_fwalk_reent+0x24>
 801431c:	6824      	ldr	r4, [r4, #0]
 801431e:	2c00      	cmp	r4, #0
 8014320:	d1f7      	bne.n	8014312 <_fwalk_reent+0xe>
 8014322:	4638      	mov	r0, r7
 8014324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014328:	89ab      	ldrh	r3, [r5, #12]
 801432a:	2b01      	cmp	r3, #1
 801432c:	d907      	bls.n	801433e <_fwalk_reent+0x3a>
 801432e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014332:	3301      	adds	r3, #1
 8014334:	d003      	beq.n	801433e <_fwalk_reent+0x3a>
 8014336:	4629      	mov	r1, r5
 8014338:	4630      	mov	r0, r6
 801433a:	47c0      	blx	r8
 801433c:	4307      	orrs	r7, r0
 801433e:	3568      	adds	r5, #104	; 0x68
 8014340:	e7e9      	b.n	8014316 <_fwalk_reent+0x12>

08014342 <__retarget_lock_init_recursive>:
 8014342:	4770      	bx	lr

08014344 <__retarget_lock_acquire_recursive>:
 8014344:	4770      	bx	lr

08014346 <__retarget_lock_release_recursive>:
 8014346:	4770      	bx	lr

08014348 <__swhatbuf_r>:
 8014348:	b570      	push	{r4, r5, r6, lr}
 801434a:	460e      	mov	r6, r1
 801434c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014350:	2900      	cmp	r1, #0
 8014352:	b096      	sub	sp, #88	; 0x58
 8014354:	4614      	mov	r4, r2
 8014356:	461d      	mov	r5, r3
 8014358:	da08      	bge.n	801436c <__swhatbuf_r+0x24>
 801435a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801435e:	2200      	movs	r2, #0
 8014360:	602a      	str	r2, [r5, #0]
 8014362:	061a      	lsls	r2, r3, #24
 8014364:	d410      	bmi.n	8014388 <__swhatbuf_r+0x40>
 8014366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801436a:	e00e      	b.n	801438a <__swhatbuf_r+0x42>
 801436c:	466a      	mov	r2, sp
 801436e:	f000 fe01 	bl	8014f74 <_fstat_r>
 8014372:	2800      	cmp	r0, #0
 8014374:	dbf1      	blt.n	801435a <__swhatbuf_r+0x12>
 8014376:	9a01      	ldr	r2, [sp, #4]
 8014378:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801437c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014380:	425a      	negs	r2, r3
 8014382:	415a      	adcs	r2, r3
 8014384:	602a      	str	r2, [r5, #0]
 8014386:	e7ee      	b.n	8014366 <__swhatbuf_r+0x1e>
 8014388:	2340      	movs	r3, #64	; 0x40
 801438a:	2000      	movs	r0, #0
 801438c:	6023      	str	r3, [r4, #0]
 801438e:	b016      	add	sp, #88	; 0x58
 8014390:	bd70      	pop	{r4, r5, r6, pc}
	...

08014394 <__smakebuf_r>:
 8014394:	898b      	ldrh	r3, [r1, #12]
 8014396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014398:	079d      	lsls	r5, r3, #30
 801439a:	4606      	mov	r6, r0
 801439c:	460c      	mov	r4, r1
 801439e:	d507      	bpl.n	80143b0 <__smakebuf_r+0x1c>
 80143a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143a4:	6023      	str	r3, [r4, #0]
 80143a6:	6123      	str	r3, [r4, #16]
 80143a8:	2301      	movs	r3, #1
 80143aa:	6163      	str	r3, [r4, #20]
 80143ac:	b002      	add	sp, #8
 80143ae:	bd70      	pop	{r4, r5, r6, pc}
 80143b0:	ab01      	add	r3, sp, #4
 80143b2:	466a      	mov	r2, sp
 80143b4:	f7ff ffc8 	bl	8014348 <__swhatbuf_r>
 80143b8:	9900      	ldr	r1, [sp, #0]
 80143ba:	4605      	mov	r5, r0
 80143bc:	4630      	mov	r0, r6
 80143be:	f000 f89d 	bl	80144fc <_malloc_r>
 80143c2:	b948      	cbnz	r0, 80143d8 <__smakebuf_r+0x44>
 80143c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143c8:	059a      	lsls	r2, r3, #22
 80143ca:	d4ef      	bmi.n	80143ac <__smakebuf_r+0x18>
 80143cc:	f023 0303 	bic.w	r3, r3, #3
 80143d0:	f043 0302 	orr.w	r3, r3, #2
 80143d4:	81a3      	strh	r3, [r4, #12]
 80143d6:	e7e3      	b.n	80143a0 <__smakebuf_r+0xc>
 80143d8:	4b0d      	ldr	r3, [pc, #52]	; (8014410 <__smakebuf_r+0x7c>)
 80143da:	62b3      	str	r3, [r6, #40]	; 0x28
 80143dc:	89a3      	ldrh	r3, [r4, #12]
 80143de:	6020      	str	r0, [r4, #0]
 80143e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143e4:	81a3      	strh	r3, [r4, #12]
 80143e6:	9b00      	ldr	r3, [sp, #0]
 80143e8:	6163      	str	r3, [r4, #20]
 80143ea:	9b01      	ldr	r3, [sp, #4]
 80143ec:	6120      	str	r0, [r4, #16]
 80143ee:	b15b      	cbz	r3, 8014408 <__smakebuf_r+0x74>
 80143f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143f4:	4630      	mov	r0, r6
 80143f6:	f000 fdcf 	bl	8014f98 <_isatty_r>
 80143fa:	b128      	cbz	r0, 8014408 <__smakebuf_r+0x74>
 80143fc:	89a3      	ldrh	r3, [r4, #12]
 80143fe:	f023 0303 	bic.w	r3, r3, #3
 8014402:	f043 0301 	orr.w	r3, r3, #1
 8014406:	81a3      	strh	r3, [r4, #12]
 8014408:	89a0      	ldrh	r0, [r4, #12]
 801440a:	4305      	orrs	r5, r0
 801440c:	81a5      	strh	r5, [r4, #12]
 801440e:	e7cd      	b.n	80143ac <__smakebuf_r+0x18>
 8014410:	0801417d 	.word	0x0801417d

08014414 <malloc>:
 8014414:	4b02      	ldr	r3, [pc, #8]	; (8014420 <malloc+0xc>)
 8014416:	4601      	mov	r1, r0
 8014418:	6818      	ldr	r0, [r3, #0]
 801441a:	f000 b86f 	b.w	80144fc <_malloc_r>
 801441e:	bf00      	nop
 8014420:	2000002c 	.word	0x2000002c

08014424 <_free_r>:
 8014424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014426:	2900      	cmp	r1, #0
 8014428:	d044      	beq.n	80144b4 <_free_r+0x90>
 801442a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801442e:	9001      	str	r0, [sp, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	f1a1 0404 	sub.w	r4, r1, #4
 8014436:	bfb8      	it	lt
 8014438:	18e4      	addlt	r4, r4, r3
 801443a:	f000 fdcf 	bl	8014fdc <__malloc_lock>
 801443e:	4a1e      	ldr	r2, [pc, #120]	; (80144b8 <_free_r+0x94>)
 8014440:	9801      	ldr	r0, [sp, #4]
 8014442:	6813      	ldr	r3, [r2, #0]
 8014444:	b933      	cbnz	r3, 8014454 <_free_r+0x30>
 8014446:	6063      	str	r3, [r4, #4]
 8014448:	6014      	str	r4, [r2, #0]
 801444a:	b003      	add	sp, #12
 801444c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014450:	f000 bdca 	b.w	8014fe8 <__malloc_unlock>
 8014454:	42a3      	cmp	r3, r4
 8014456:	d908      	bls.n	801446a <_free_r+0x46>
 8014458:	6825      	ldr	r5, [r4, #0]
 801445a:	1961      	adds	r1, r4, r5
 801445c:	428b      	cmp	r3, r1
 801445e:	bf01      	itttt	eq
 8014460:	6819      	ldreq	r1, [r3, #0]
 8014462:	685b      	ldreq	r3, [r3, #4]
 8014464:	1949      	addeq	r1, r1, r5
 8014466:	6021      	streq	r1, [r4, #0]
 8014468:	e7ed      	b.n	8014446 <_free_r+0x22>
 801446a:	461a      	mov	r2, r3
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	b10b      	cbz	r3, 8014474 <_free_r+0x50>
 8014470:	42a3      	cmp	r3, r4
 8014472:	d9fa      	bls.n	801446a <_free_r+0x46>
 8014474:	6811      	ldr	r1, [r2, #0]
 8014476:	1855      	adds	r5, r2, r1
 8014478:	42a5      	cmp	r5, r4
 801447a:	d10b      	bne.n	8014494 <_free_r+0x70>
 801447c:	6824      	ldr	r4, [r4, #0]
 801447e:	4421      	add	r1, r4
 8014480:	1854      	adds	r4, r2, r1
 8014482:	42a3      	cmp	r3, r4
 8014484:	6011      	str	r1, [r2, #0]
 8014486:	d1e0      	bne.n	801444a <_free_r+0x26>
 8014488:	681c      	ldr	r4, [r3, #0]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	6053      	str	r3, [r2, #4]
 801448e:	4421      	add	r1, r4
 8014490:	6011      	str	r1, [r2, #0]
 8014492:	e7da      	b.n	801444a <_free_r+0x26>
 8014494:	d902      	bls.n	801449c <_free_r+0x78>
 8014496:	230c      	movs	r3, #12
 8014498:	6003      	str	r3, [r0, #0]
 801449a:	e7d6      	b.n	801444a <_free_r+0x26>
 801449c:	6825      	ldr	r5, [r4, #0]
 801449e:	1961      	adds	r1, r4, r5
 80144a0:	428b      	cmp	r3, r1
 80144a2:	bf04      	itt	eq
 80144a4:	6819      	ldreq	r1, [r3, #0]
 80144a6:	685b      	ldreq	r3, [r3, #4]
 80144a8:	6063      	str	r3, [r4, #4]
 80144aa:	bf04      	itt	eq
 80144ac:	1949      	addeq	r1, r1, r5
 80144ae:	6021      	streq	r1, [r4, #0]
 80144b0:	6054      	str	r4, [r2, #4]
 80144b2:	e7ca      	b.n	801444a <_free_r+0x26>
 80144b4:	b003      	add	sp, #12
 80144b6:	bd30      	pop	{r4, r5, pc}
 80144b8:	20008dfc 	.word	0x20008dfc

080144bc <sbrk_aligned>:
 80144bc:	b570      	push	{r4, r5, r6, lr}
 80144be:	4e0e      	ldr	r6, [pc, #56]	; (80144f8 <sbrk_aligned+0x3c>)
 80144c0:	460c      	mov	r4, r1
 80144c2:	6831      	ldr	r1, [r6, #0]
 80144c4:	4605      	mov	r5, r0
 80144c6:	b911      	cbnz	r1, 80144ce <sbrk_aligned+0x12>
 80144c8:	f000 fcd6 	bl	8014e78 <_sbrk_r>
 80144cc:	6030      	str	r0, [r6, #0]
 80144ce:	4621      	mov	r1, r4
 80144d0:	4628      	mov	r0, r5
 80144d2:	f000 fcd1 	bl	8014e78 <_sbrk_r>
 80144d6:	1c43      	adds	r3, r0, #1
 80144d8:	d00a      	beq.n	80144f0 <sbrk_aligned+0x34>
 80144da:	1cc4      	adds	r4, r0, #3
 80144dc:	f024 0403 	bic.w	r4, r4, #3
 80144e0:	42a0      	cmp	r0, r4
 80144e2:	d007      	beq.n	80144f4 <sbrk_aligned+0x38>
 80144e4:	1a21      	subs	r1, r4, r0
 80144e6:	4628      	mov	r0, r5
 80144e8:	f000 fcc6 	bl	8014e78 <_sbrk_r>
 80144ec:	3001      	adds	r0, #1
 80144ee:	d101      	bne.n	80144f4 <sbrk_aligned+0x38>
 80144f0:	f04f 34ff 	mov.w	r4, #4294967295
 80144f4:	4620      	mov	r0, r4
 80144f6:	bd70      	pop	{r4, r5, r6, pc}
 80144f8:	20008e00 	.word	0x20008e00

080144fc <_malloc_r>:
 80144fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014500:	1ccd      	adds	r5, r1, #3
 8014502:	f025 0503 	bic.w	r5, r5, #3
 8014506:	3508      	adds	r5, #8
 8014508:	2d0c      	cmp	r5, #12
 801450a:	bf38      	it	cc
 801450c:	250c      	movcc	r5, #12
 801450e:	2d00      	cmp	r5, #0
 8014510:	4607      	mov	r7, r0
 8014512:	db01      	blt.n	8014518 <_malloc_r+0x1c>
 8014514:	42a9      	cmp	r1, r5
 8014516:	d905      	bls.n	8014524 <_malloc_r+0x28>
 8014518:	230c      	movs	r3, #12
 801451a:	603b      	str	r3, [r7, #0]
 801451c:	2600      	movs	r6, #0
 801451e:	4630      	mov	r0, r6
 8014520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014524:	4e2e      	ldr	r6, [pc, #184]	; (80145e0 <_malloc_r+0xe4>)
 8014526:	f000 fd59 	bl	8014fdc <__malloc_lock>
 801452a:	6833      	ldr	r3, [r6, #0]
 801452c:	461c      	mov	r4, r3
 801452e:	bb34      	cbnz	r4, 801457e <_malloc_r+0x82>
 8014530:	4629      	mov	r1, r5
 8014532:	4638      	mov	r0, r7
 8014534:	f7ff ffc2 	bl	80144bc <sbrk_aligned>
 8014538:	1c43      	adds	r3, r0, #1
 801453a:	4604      	mov	r4, r0
 801453c:	d14d      	bne.n	80145da <_malloc_r+0xde>
 801453e:	6834      	ldr	r4, [r6, #0]
 8014540:	4626      	mov	r6, r4
 8014542:	2e00      	cmp	r6, #0
 8014544:	d140      	bne.n	80145c8 <_malloc_r+0xcc>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	4631      	mov	r1, r6
 801454a:	4638      	mov	r0, r7
 801454c:	eb04 0803 	add.w	r8, r4, r3
 8014550:	f000 fc92 	bl	8014e78 <_sbrk_r>
 8014554:	4580      	cmp	r8, r0
 8014556:	d13a      	bne.n	80145ce <_malloc_r+0xd2>
 8014558:	6821      	ldr	r1, [r4, #0]
 801455a:	3503      	adds	r5, #3
 801455c:	1a6d      	subs	r5, r5, r1
 801455e:	f025 0503 	bic.w	r5, r5, #3
 8014562:	3508      	adds	r5, #8
 8014564:	2d0c      	cmp	r5, #12
 8014566:	bf38      	it	cc
 8014568:	250c      	movcc	r5, #12
 801456a:	4629      	mov	r1, r5
 801456c:	4638      	mov	r0, r7
 801456e:	f7ff ffa5 	bl	80144bc <sbrk_aligned>
 8014572:	3001      	adds	r0, #1
 8014574:	d02b      	beq.n	80145ce <_malloc_r+0xd2>
 8014576:	6823      	ldr	r3, [r4, #0]
 8014578:	442b      	add	r3, r5
 801457a:	6023      	str	r3, [r4, #0]
 801457c:	e00e      	b.n	801459c <_malloc_r+0xa0>
 801457e:	6822      	ldr	r2, [r4, #0]
 8014580:	1b52      	subs	r2, r2, r5
 8014582:	d41e      	bmi.n	80145c2 <_malloc_r+0xc6>
 8014584:	2a0b      	cmp	r2, #11
 8014586:	d916      	bls.n	80145b6 <_malloc_r+0xba>
 8014588:	1961      	adds	r1, r4, r5
 801458a:	42a3      	cmp	r3, r4
 801458c:	6025      	str	r5, [r4, #0]
 801458e:	bf18      	it	ne
 8014590:	6059      	strne	r1, [r3, #4]
 8014592:	6863      	ldr	r3, [r4, #4]
 8014594:	bf08      	it	eq
 8014596:	6031      	streq	r1, [r6, #0]
 8014598:	5162      	str	r2, [r4, r5]
 801459a:	604b      	str	r3, [r1, #4]
 801459c:	4638      	mov	r0, r7
 801459e:	f104 060b 	add.w	r6, r4, #11
 80145a2:	f000 fd21 	bl	8014fe8 <__malloc_unlock>
 80145a6:	f026 0607 	bic.w	r6, r6, #7
 80145aa:	1d23      	adds	r3, r4, #4
 80145ac:	1af2      	subs	r2, r6, r3
 80145ae:	d0b6      	beq.n	801451e <_malloc_r+0x22>
 80145b0:	1b9b      	subs	r3, r3, r6
 80145b2:	50a3      	str	r3, [r4, r2]
 80145b4:	e7b3      	b.n	801451e <_malloc_r+0x22>
 80145b6:	6862      	ldr	r2, [r4, #4]
 80145b8:	42a3      	cmp	r3, r4
 80145ba:	bf0c      	ite	eq
 80145bc:	6032      	streq	r2, [r6, #0]
 80145be:	605a      	strne	r2, [r3, #4]
 80145c0:	e7ec      	b.n	801459c <_malloc_r+0xa0>
 80145c2:	4623      	mov	r3, r4
 80145c4:	6864      	ldr	r4, [r4, #4]
 80145c6:	e7b2      	b.n	801452e <_malloc_r+0x32>
 80145c8:	4634      	mov	r4, r6
 80145ca:	6876      	ldr	r6, [r6, #4]
 80145cc:	e7b9      	b.n	8014542 <_malloc_r+0x46>
 80145ce:	230c      	movs	r3, #12
 80145d0:	603b      	str	r3, [r7, #0]
 80145d2:	4638      	mov	r0, r7
 80145d4:	f000 fd08 	bl	8014fe8 <__malloc_unlock>
 80145d8:	e7a1      	b.n	801451e <_malloc_r+0x22>
 80145da:	6025      	str	r5, [r4, #0]
 80145dc:	e7de      	b.n	801459c <_malloc_r+0xa0>
 80145de:	bf00      	nop
 80145e0:	20008dfc 	.word	0x20008dfc

080145e4 <__ssputs_r>:
 80145e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145e8:	688e      	ldr	r6, [r1, #8]
 80145ea:	429e      	cmp	r6, r3
 80145ec:	4682      	mov	sl, r0
 80145ee:	460c      	mov	r4, r1
 80145f0:	4690      	mov	r8, r2
 80145f2:	461f      	mov	r7, r3
 80145f4:	d838      	bhi.n	8014668 <__ssputs_r+0x84>
 80145f6:	898a      	ldrh	r2, [r1, #12]
 80145f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80145fc:	d032      	beq.n	8014664 <__ssputs_r+0x80>
 80145fe:	6825      	ldr	r5, [r4, #0]
 8014600:	6909      	ldr	r1, [r1, #16]
 8014602:	eba5 0901 	sub.w	r9, r5, r1
 8014606:	6965      	ldr	r5, [r4, #20]
 8014608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801460c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014610:	3301      	adds	r3, #1
 8014612:	444b      	add	r3, r9
 8014614:	106d      	asrs	r5, r5, #1
 8014616:	429d      	cmp	r5, r3
 8014618:	bf38      	it	cc
 801461a:	461d      	movcc	r5, r3
 801461c:	0553      	lsls	r3, r2, #21
 801461e:	d531      	bpl.n	8014684 <__ssputs_r+0xa0>
 8014620:	4629      	mov	r1, r5
 8014622:	f7ff ff6b 	bl	80144fc <_malloc_r>
 8014626:	4606      	mov	r6, r0
 8014628:	b950      	cbnz	r0, 8014640 <__ssputs_r+0x5c>
 801462a:	230c      	movs	r3, #12
 801462c:	f8ca 3000 	str.w	r3, [sl]
 8014630:	89a3      	ldrh	r3, [r4, #12]
 8014632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014636:	81a3      	strh	r3, [r4, #12]
 8014638:	f04f 30ff 	mov.w	r0, #4294967295
 801463c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014640:	6921      	ldr	r1, [r4, #16]
 8014642:	464a      	mov	r2, r9
 8014644:	f7ff fb30 	bl	8013ca8 <memcpy>
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014652:	81a3      	strh	r3, [r4, #12]
 8014654:	6126      	str	r6, [r4, #16]
 8014656:	6165      	str	r5, [r4, #20]
 8014658:	444e      	add	r6, r9
 801465a:	eba5 0509 	sub.w	r5, r5, r9
 801465e:	6026      	str	r6, [r4, #0]
 8014660:	60a5      	str	r5, [r4, #8]
 8014662:	463e      	mov	r6, r7
 8014664:	42be      	cmp	r6, r7
 8014666:	d900      	bls.n	801466a <__ssputs_r+0x86>
 8014668:	463e      	mov	r6, r7
 801466a:	6820      	ldr	r0, [r4, #0]
 801466c:	4632      	mov	r2, r6
 801466e:	4641      	mov	r1, r8
 8014670:	f7ff fb28 	bl	8013cc4 <memmove>
 8014674:	68a3      	ldr	r3, [r4, #8]
 8014676:	1b9b      	subs	r3, r3, r6
 8014678:	60a3      	str	r3, [r4, #8]
 801467a:	6823      	ldr	r3, [r4, #0]
 801467c:	4433      	add	r3, r6
 801467e:	6023      	str	r3, [r4, #0]
 8014680:	2000      	movs	r0, #0
 8014682:	e7db      	b.n	801463c <__ssputs_r+0x58>
 8014684:	462a      	mov	r2, r5
 8014686:	f000 fcb5 	bl	8014ff4 <_realloc_r>
 801468a:	4606      	mov	r6, r0
 801468c:	2800      	cmp	r0, #0
 801468e:	d1e1      	bne.n	8014654 <__ssputs_r+0x70>
 8014690:	6921      	ldr	r1, [r4, #16]
 8014692:	4650      	mov	r0, sl
 8014694:	f7ff fec6 	bl	8014424 <_free_r>
 8014698:	e7c7      	b.n	801462a <__ssputs_r+0x46>
	...

0801469c <_svfiprintf_r>:
 801469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a0:	4698      	mov	r8, r3
 80146a2:	898b      	ldrh	r3, [r1, #12]
 80146a4:	061b      	lsls	r3, r3, #24
 80146a6:	b09d      	sub	sp, #116	; 0x74
 80146a8:	4607      	mov	r7, r0
 80146aa:	460d      	mov	r5, r1
 80146ac:	4614      	mov	r4, r2
 80146ae:	d50e      	bpl.n	80146ce <_svfiprintf_r+0x32>
 80146b0:	690b      	ldr	r3, [r1, #16]
 80146b2:	b963      	cbnz	r3, 80146ce <_svfiprintf_r+0x32>
 80146b4:	2140      	movs	r1, #64	; 0x40
 80146b6:	f7ff ff21 	bl	80144fc <_malloc_r>
 80146ba:	6028      	str	r0, [r5, #0]
 80146bc:	6128      	str	r0, [r5, #16]
 80146be:	b920      	cbnz	r0, 80146ca <_svfiprintf_r+0x2e>
 80146c0:	230c      	movs	r3, #12
 80146c2:	603b      	str	r3, [r7, #0]
 80146c4:	f04f 30ff 	mov.w	r0, #4294967295
 80146c8:	e0d1      	b.n	801486e <_svfiprintf_r+0x1d2>
 80146ca:	2340      	movs	r3, #64	; 0x40
 80146cc:	616b      	str	r3, [r5, #20]
 80146ce:	2300      	movs	r3, #0
 80146d0:	9309      	str	r3, [sp, #36]	; 0x24
 80146d2:	2320      	movs	r3, #32
 80146d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80146dc:	2330      	movs	r3, #48	; 0x30
 80146de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014888 <_svfiprintf_r+0x1ec>
 80146e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146e6:	f04f 0901 	mov.w	r9, #1
 80146ea:	4623      	mov	r3, r4
 80146ec:	469a      	mov	sl, r3
 80146ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146f2:	b10a      	cbz	r2, 80146f8 <_svfiprintf_r+0x5c>
 80146f4:	2a25      	cmp	r2, #37	; 0x25
 80146f6:	d1f9      	bne.n	80146ec <_svfiprintf_r+0x50>
 80146f8:	ebba 0b04 	subs.w	fp, sl, r4
 80146fc:	d00b      	beq.n	8014716 <_svfiprintf_r+0x7a>
 80146fe:	465b      	mov	r3, fp
 8014700:	4622      	mov	r2, r4
 8014702:	4629      	mov	r1, r5
 8014704:	4638      	mov	r0, r7
 8014706:	f7ff ff6d 	bl	80145e4 <__ssputs_r>
 801470a:	3001      	adds	r0, #1
 801470c:	f000 80aa 	beq.w	8014864 <_svfiprintf_r+0x1c8>
 8014710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014712:	445a      	add	r2, fp
 8014714:	9209      	str	r2, [sp, #36]	; 0x24
 8014716:	f89a 3000 	ldrb.w	r3, [sl]
 801471a:	2b00      	cmp	r3, #0
 801471c:	f000 80a2 	beq.w	8014864 <_svfiprintf_r+0x1c8>
 8014720:	2300      	movs	r3, #0
 8014722:	f04f 32ff 	mov.w	r2, #4294967295
 8014726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801472a:	f10a 0a01 	add.w	sl, sl, #1
 801472e:	9304      	str	r3, [sp, #16]
 8014730:	9307      	str	r3, [sp, #28]
 8014732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014736:	931a      	str	r3, [sp, #104]	; 0x68
 8014738:	4654      	mov	r4, sl
 801473a:	2205      	movs	r2, #5
 801473c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014740:	4851      	ldr	r0, [pc, #324]	; (8014888 <_svfiprintf_r+0x1ec>)
 8014742:	f7eb fd65 	bl	8000210 <memchr>
 8014746:	9a04      	ldr	r2, [sp, #16]
 8014748:	b9d8      	cbnz	r0, 8014782 <_svfiprintf_r+0xe6>
 801474a:	06d0      	lsls	r0, r2, #27
 801474c:	bf44      	itt	mi
 801474e:	2320      	movmi	r3, #32
 8014750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014754:	0711      	lsls	r1, r2, #28
 8014756:	bf44      	itt	mi
 8014758:	232b      	movmi	r3, #43	; 0x2b
 801475a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801475e:	f89a 3000 	ldrb.w	r3, [sl]
 8014762:	2b2a      	cmp	r3, #42	; 0x2a
 8014764:	d015      	beq.n	8014792 <_svfiprintf_r+0xf6>
 8014766:	9a07      	ldr	r2, [sp, #28]
 8014768:	4654      	mov	r4, sl
 801476a:	2000      	movs	r0, #0
 801476c:	f04f 0c0a 	mov.w	ip, #10
 8014770:	4621      	mov	r1, r4
 8014772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014776:	3b30      	subs	r3, #48	; 0x30
 8014778:	2b09      	cmp	r3, #9
 801477a:	d94e      	bls.n	801481a <_svfiprintf_r+0x17e>
 801477c:	b1b0      	cbz	r0, 80147ac <_svfiprintf_r+0x110>
 801477e:	9207      	str	r2, [sp, #28]
 8014780:	e014      	b.n	80147ac <_svfiprintf_r+0x110>
 8014782:	eba0 0308 	sub.w	r3, r0, r8
 8014786:	fa09 f303 	lsl.w	r3, r9, r3
 801478a:	4313      	orrs	r3, r2
 801478c:	9304      	str	r3, [sp, #16]
 801478e:	46a2      	mov	sl, r4
 8014790:	e7d2      	b.n	8014738 <_svfiprintf_r+0x9c>
 8014792:	9b03      	ldr	r3, [sp, #12]
 8014794:	1d19      	adds	r1, r3, #4
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	9103      	str	r1, [sp, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	bfbb      	ittet	lt
 801479e:	425b      	neglt	r3, r3
 80147a0:	f042 0202 	orrlt.w	r2, r2, #2
 80147a4:	9307      	strge	r3, [sp, #28]
 80147a6:	9307      	strlt	r3, [sp, #28]
 80147a8:	bfb8      	it	lt
 80147aa:	9204      	strlt	r2, [sp, #16]
 80147ac:	7823      	ldrb	r3, [r4, #0]
 80147ae:	2b2e      	cmp	r3, #46	; 0x2e
 80147b0:	d10c      	bne.n	80147cc <_svfiprintf_r+0x130>
 80147b2:	7863      	ldrb	r3, [r4, #1]
 80147b4:	2b2a      	cmp	r3, #42	; 0x2a
 80147b6:	d135      	bne.n	8014824 <_svfiprintf_r+0x188>
 80147b8:	9b03      	ldr	r3, [sp, #12]
 80147ba:	1d1a      	adds	r2, r3, #4
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	9203      	str	r2, [sp, #12]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	bfb8      	it	lt
 80147c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80147c8:	3402      	adds	r4, #2
 80147ca:	9305      	str	r3, [sp, #20]
 80147cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014898 <_svfiprintf_r+0x1fc>
 80147d0:	7821      	ldrb	r1, [r4, #0]
 80147d2:	2203      	movs	r2, #3
 80147d4:	4650      	mov	r0, sl
 80147d6:	f7eb fd1b 	bl	8000210 <memchr>
 80147da:	b140      	cbz	r0, 80147ee <_svfiprintf_r+0x152>
 80147dc:	2340      	movs	r3, #64	; 0x40
 80147de:	eba0 000a 	sub.w	r0, r0, sl
 80147e2:	fa03 f000 	lsl.w	r0, r3, r0
 80147e6:	9b04      	ldr	r3, [sp, #16]
 80147e8:	4303      	orrs	r3, r0
 80147ea:	3401      	adds	r4, #1
 80147ec:	9304      	str	r3, [sp, #16]
 80147ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147f2:	4826      	ldr	r0, [pc, #152]	; (801488c <_svfiprintf_r+0x1f0>)
 80147f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147f8:	2206      	movs	r2, #6
 80147fa:	f7eb fd09 	bl	8000210 <memchr>
 80147fe:	2800      	cmp	r0, #0
 8014800:	d038      	beq.n	8014874 <_svfiprintf_r+0x1d8>
 8014802:	4b23      	ldr	r3, [pc, #140]	; (8014890 <_svfiprintf_r+0x1f4>)
 8014804:	bb1b      	cbnz	r3, 801484e <_svfiprintf_r+0x1b2>
 8014806:	9b03      	ldr	r3, [sp, #12]
 8014808:	3307      	adds	r3, #7
 801480a:	f023 0307 	bic.w	r3, r3, #7
 801480e:	3308      	adds	r3, #8
 8014810:	9303      	str	r3, [sp, #12]
 8014812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014814:	4433      	add	r3, r6
 8014816:	9309      	str	r3, [sp, #36]	; 0x24
 8014818:	e767      	b.n	80146ea <_svfiprintf_r+0x4e>
 801481a:	fb0c 3202 	mla	r2, ip, r2, r3
 801481e:	460c      	mov	r4, r1
 8014820:	2001      	movs	r0, #1
 8014822:	e7a5      	b.n	8014770 <_svfiprintf_r+0xd4>
 8014824:	2300      	movs	r3, #0
 8014826:	3401      	adds	r4, #1
 8014828:	9305      	str	r3, [sp, #20]
 801482a:	4619      	mov	r1, r3
 801482c:	f04f 0c0a 	mov.w	ip, #10
 8014830:	4620      	mov	r0, r4
 8014832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014836:	3a30      	subs	r2, #48	; 0x30
 8014838:	2a09      	cmp	r2, #9
 801483a:	d903      	bls.n	8014844 <_svfiprintf_r+0x1a8>
 801483c:	2b00      	cmp	r3, #0
 801483e:	d0c5      	beq.n	80147cc <_svfiprintf_r+0x130>
 8014840:	9105      	str	r1, [sp, #20]
 8014842:	e7c3      	b.n	80147cc <_svfiprintf_r+0x130>
 8014844:	fb0c 2101 	mla	r1, ip, r1, r2
 8014848:	4604      	mov	r4, r0
 801484a:	2301      	movs	r3, #1
 801484c:	e7f0      	b.n	8014830 <_svfiprintf_r+0x194>
 801484e:	ab03      	add	r3, sp, #12
 8014850:	9300      	str	r3, [sp, #0]
 8014852:	462a      	mov	r2, r5
 8014854:	4b0f      	ldr	r3, [pc, #60]	; (8014894 <_svfiprintf_r+0x1f8>)
 8014856:	a904      	add	r1, sp, #16
 8014858:	4638      	mov	r0, r7
 801485a:	f3af 8000 	nop.w
 801485e:	1c42      	adds	r2, r0, #1
 8014860:	4606      	mov	r6, r0
 8014862:	d1d6      	bne.n	8014812 <_svfiprintf_r+0x176>
 8014864:	89ab      	ldrh	r3, [r5, #12]
 8014866:	065b      	lsls	r3, r3, #25
 8014868:	f53f af2c 	bmi.w	80146c4 <_svfiprintf_r+0x28>
 801486c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801486e:	b01d      	add	sp, #116	; 0x74
 8014870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014874:	ab03      	add	r3, sp, #12
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	462a      	mov	r2, r5
 801487a:	4b06      	ldr	r3, [pc, #24]	; (8014894 <_svfiprintf_r+0x1f8>)
 801487c:	a904      	add	r1, sp, #16
 801487e:	4638      	mov	r0, r7
 8014880:	f000 f9d4 	bl	8014c2c <_printf_i>
 8014884:	e7eb      	b.n	801485e <_svfiprintf_r+0x1c2>
 8014886:	bf00      	nop
 8014888:	08017d68 	.word	0x08017d68
 801488c:	08017d72 	.word	0x08017d72
 8014890:	00000000 	.word	0x00000000
 8014894:	080145e5 	.word	0x080145e5
 8014898:	08017d6e 	.word	0x08017d6e

0801489c <__sfputc_r>:
 801489c:	6893      	ldr	r3, [r2, #8]
 801489e:	3b01      	subs	r3, #1
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	b410      	push	{r4}
 80148a4:	6093      	str	r3, [r2, #8]
 80148a6:	da08      	bge.n	80148ba <__sfputc_r+0x1e>
 80148a8:	6994      	ldr	r4, [r2, #24]
 80148aa:	42a3      	cmp	r3, r4
 80148ac:	db01      	blt.n	80148b2 <__sfputc_r+0x16>
 80148ae:	290a      	cmp	r1, #10
 80148b0:	d103      	bne.n	80148ba <__sfputc_r+0x1e>
 80148b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148b6:	f7ff ba9d 	b.w	8013df4 <__swbuf_r>
 80148ba:	6813      	ldr	r3, [r2, #0]
 80148bc:	1c58      	adds	r0, r3, #1
 80148be:	6010      	str	r0, [r2, #0]
 80148c0:	7019      	strb	r1, [r3, #0]
 80148c2:	4608      	mov	r0, r1
 80148c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148c8:	4770      	bx	lr

080148ca <__sfputs_r>:
 80148ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148cc:	4606      	mov	r6, r0
 80148ce:	460f      	mov	r7, r1
 80148d0:	4614      	mov	r4, r2
 80148d2:	18d5      	adds	r5, r2, r3
 80148d4:	42ac      	cmp	r4, r5
 80148d6:	d101      	bne.n	80148dc <__sfputs_r+0x12>
 80148d8:	2000      	movs	r0, #0
 80148da:	e007      	b.n	80148ec <__sfputs_r+0x22>
 80148dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148e0:	463a      	mov	r2, r7
 80148e2:	4630      	mov	r0, r6
 80148e4:	f7ff ffda 	bl	801489c <__sfputc_r>
 80148e8:	1c43      	adds	r3, r0, #1
 80148ea:	d1f3      	bne.n	80148d4 <__sfputs_r+0xa>
 80148ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148f0 <_vfiprintf_r>:
 80148f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148f4:	460d      	mov	r5, r1
 80148f6:	b09d      	sub	sp, #116	; 0x74
 80148f8:	4614      	mov	r4, r2
 80148fa:	4698      	mov	r8, r3
 80148fc:	4606      	mov	r6, r0
 80148fe:	b118      	cbz	r0, 8014908 <_vfiprintf_r+0x18>
 8014900:	6983      	ldr	r3, [r0, #24]
 8014902:	b90b      	cbnz	r3, 8014908 <_vfiprintf_r+0x18>
 8014904:	f7ff fc6e 	bl	80141e4 <__sinit>
 8014908:	4b89      	ldr	r3, [pc, #548]	; (8014b30 <_vfiprintf_r+0x240>)
 801490a:	429d      	cmp	r5, r3
 801490c:	d11b      	bne.n	8014946 <_vfiprintf_r+0x56>
 801490e:	6875      	ldr	r5, [r6, #4]
 8014910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014912:	07d9      	lsls	r1, r3, #31
 8014914:	d405      	bmi.n	8014922 <_vfiprintf_r+0x32>
 8014916:	89ab      	ldrh	r3, [r5, #12]
 8014918:	059a      	lsls	r2, r3, #22
 801491a:	d402      	bmi.n	8014922 <_vfiprintf_r+0x32>
 801491c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801491e:	f7ff fd11 	bl	8014344 <__retarget_lock_acquire_recursive>
 8014922:	89ab      	ldrh	r3, [r5, #12]
 8014924:	071b      	lsls	r3, r3, #28
 8014926:	d501      	bpl.n	801492c <_vfiprintf_r+0x3c>
 8014928:	692b      	ldr	r3, [r5, #16]
 801492a:	b9eb      	cbnz	r3, 8014968 <_vfiprintf_r+0x78>
 801492c:	4629      	mov	r1, r5
 801492e:	4630      	mov	r0, r6
 8014930:	f7ff fab2 	bl	8013e98 <__swsetup_r>
 8014934:	b1c0      	cbz	r0, 8014968 <_vfiprintf_r+0x78>
 8014936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014938:	07dc      	lsls	r4, r3, #31
 801493a:	d50e      	bpl.n	801495a <_vfiprintf_r+0x6a>
 801493c:	f04f 30ff 	mov.w	r0, #4294967295
 8014940:	b01d      	add	sp, #116	; 0x74
 8014942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014946:	4b7b      	ldr	r3, [pc, #492]	; (8014b34 <_vfiprintf_r+0x244>)
 8014948:	429d      	cmp	r5, r3
 801494a:	d101      	bne.n	8014950 <_vfiprintf_r+0x60>
 801494c:	68b5      	ldr	r5, [r6, #8]
 801494e:	e7df      	b.n	8014910 <_vfiprintf_r+0x20>
 8014950:	4b79      	ldr	r3, [pc, #484]	; (8014b38 <_vfiprintf_r+0x248>)
 8014952:	429d      	cmp	r5, r3
 8014954:	bf08      	it	eq
 8014956:	68f5      	ldreq	r5, [r6, #12]
 8014958:	e7da      	b.n	8014910 <_vfiprintf_r+0x20>
 801495a:	89ab      	ldrh	r3, [r5, #12]
 801495c:	0598      	lsls	r0, r3, #22
 801495e:	d4ed      	bmi.n	801493c <_vfiprintf_r+0x4c>
 8014960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014962:	f7ff fcf0 	bl	8014346 <__retarget_lock_release_recursive>
 8014966:	e7e9      	b.n	801493c <_vfiprintf_r+0x4c>
 8014968:	2300      	movs	r3, #0
 801496a:	9309      	str	r3, [sp, #36]	; 0x24
 801496c:	2320      	movs	r3, #32
 801496e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014972:	f8cd 800c 	str.w	r8, [sp, #12]
 8014976:	2330      	movs	r3, #48	; 0x30
 8014978:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014b3c <_vfiprintf_r+0x24c>
 801497c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014980:	f04f 0901 	mov.w	r9, #1
 8014984:	4623      	mov	r3, r4
 8014986:	469a      	mov	sl, r3
 8014988:	f813 2b01 	ldrb.w	r2, [r3], #1
 801498c:	b10a      	cbz	r2, 8014992 <_vfiprintf_r+0xa2>
 801498e:	2a25      	cmp	r2, #37	; 0x25
 8014990:	d1f9      	bne.n	8014986 <_vfiprintf_r+0x96>
 8014992:	ebba 0b04 	subs.w	fp, sl, r4
 8014996:	d00b      	beq.n	80149b0 <_vfiprintf_r+0xc0>
 8014998:	465b      	mov	r3, fp
 801499a:	4622      	mov	r2, r4
 801499c:	4629      	mov	r1, r5
 801499e:	4630      	mov	r0, r6
 80149a0:	f7ff ff93 	bl	80148ca <__sfputs_r>
 80149a4:	3001      	adds	r0, #1
 80149a6:	f000 80aa 	beq.w	8014afe <_vfiprintf_r+0x20e>
 80149aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149ac:	445a      	add	r2, fp
 80149ae:	9209      	str	r2, [sp, #36]	; 0x24
 80149b0:	f89a 3000 	ldrb.w	r3, [sl]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	f000 80a2 	beq.w	8014afe <_vfiprintf_r+0x20e>
 80149ba:	2300      	movs	r3, #0
 80149bc:	f04f 32ff 	mov.w	r2, #4294967295
 80149c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149c4:	f10a 0a01 	add.w	sl, sl, #1
 80149c8:	9304      	str	r3, [sp, #16]
 80149ca:	9307      	str	r3, [sp, #28]
 80149cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149d0:	931a      	str	r3, [sp, #104]	; 0x68
 80149d2:	4654      	mov	r4, sl
 80149d4:	2205      	movs	r2, #5
 80149d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149da:	4858      	ldr	r0, [pc, #352]	; (8014b3c <_vfiprintf_r+0x24c>)
 80149dc:	f7eb fc18 	bl	8000210 <memchr>
 80149e0:	9a04      	ldr	r2, [sp, #16]
 80149e2:	b9d8      	cbnz	r0, 8014a1c <_vfiprintf_r+0x12c>
 80149e4:	06d1      	lsls	r1, r2, #27
 80149e6:	bf44      	itt	mi
 80149e8:	2320      	movmi	r3, #32
 80149ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149ee:	0713      	lsls	r3, r2, #28
 80149f0:	bf44      	itt	mi
 80149f2:	232b      	movmi	r3, #43	; 0x2b
 80149f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149f8:	f89a 3000 	ldrb.w	r3, [sl]
 80149fc:	2b2a      	cmp	r3, #42	; 0x2a
 80149fe:	d015      	beq.n	8014a2c <_vfiprintf_r+0x13c>
 8014a00:	9a07      	ldr	r2, [sp, #28]
 8014a02:	4654      	mov	r4, sl
 8014a04:	2000      	movs	r0, #0
 8014a06:	f04f 0c0a 	mov.w	ip, #10
 8014a0a:	4621      	mov	r1, r4
 8014a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a10:	3b30      	subs	r3, #48	; 0x30
 8014a12:	2b09      	cmp	r3, #9
 8014a14:	d94e      	bls.n	8014ab4 <_vfiprintf_r+0x1c4>
 8014a16:	b1b0      	cbz	r0, 8014a46 <_vfiprintf_r+0x156>
 8014a18:	9207      	str	r2, [sp, #28]
 8014a1a:	e014      	b.n	8014a46 <_vfiprintf_r+0x156>
 8014a1c:	eba0 0308 	sub.w	r3, r0, r8
 8014a20:	fa09 f303 	lsl.w	r3, r9, r3
 8014a24:	4313      	orrs	r3, r2
 8014a26:	9304      	str	r3, [sp, #16]
 8014a28:	46a2      	mov	sl, r4
 8014a2a:	e7d2      	b.n	80149d2 <_vfiprintf_r+0xe2>
 8014a2c:	9b03      	ldr	r3, [sp, #12]
 8014a2e:	1d19      	adds	r1, r3, #4
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	9103      	str	r1, [sp, #12]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	bfbb      	ittet	lt
 8014a38:	425b      	neglt	r3, r3
 8014a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8014a3e:	9307      	strge	r3, [sp, #28]
 8014a40:	9307      	strlt	r3, [sp, #28]
 8014a42:	bfb8      	it	lt
 8014a44:	9204      	strlt	r2, [sp, #16]
 8014a46:	7823      	ldrb	r3, [r4, #0]
 8014a48:	2b2e      	cmp	r3, #46	; 0x2e
 8014a4a:	d10c      	bne.n	8014a66 <_vfiprintf_r+0x176>
 8014a4c:	7863      	ldrb	r3, [r4, #1]
 8014a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8014a50:	d135      	bne.n	8014abe <_vfiprintf_r+0x1ce>
 8014a52:	9b03      	ldr	r3, [sp, #12]
 8014a54:	1d1a      	adds	r2, r3, #4
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	9203      	str	r2, [sp, #12]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	bfb8      	it	lt
 8014a5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a62:	3402      	adds	r4, #2
 8014a64:	9305      	str	r3, [sp, #20]
 8014a66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014b4c <_vfiprintf_r+0x25c>
 8014a6a:	7821      	ldrb	r1, [r4, #0]
 8014a6c:	2203      	movs	r2, #3
 8014a6e:	4650      	mov	r0, sl
 8014a70:	f7eb fbce 	bl	8000210 <memchr>
 8014a74:	b140      	cbz	r0, 8014a88 <_vfiprintf_r+0x198>
 8014a76:	2340      	movs	r3, #64	; 0x40
 8014a78:	eba0 000a 	sub.w	r0, r0, sl
 8014a7c:	fa03 f000 	lsl.w	r0, r3, r0
 8014a80:	9b04      	ldr	r3, [sp, #16]
 8014a82:	4303      	orrs	r3, r0
 8014a84:	3401      	adds	r4, #1
 8014a86:	9304      	str	r3, [sp, #16]
 8014a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8c:	482c      	ldr	r0, [pc, #176]	; (8014b40 <_vfiprintf_r+0x250>)
 8014a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a92:	2206      	movs	r2, #6
 8014a94:	f7eb fbbc 	bl	8000210 <memchr>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d03f      	beq.n	8014b1c <_vfiprintf_r+0x22c>
 8014a9c:	4b29      	ldr	r3, [pc, #164]	; (8014b44 <_vfiprintf_r+0x254>)
 8014a9e:	bb1b      	cbnz	r3, 8014ae8 <_vfiprintf_r+0x1f8>
 8014aa0:	9b03      	ldr	r3, [sp, #12]
 8014aa2:	3307      	adds	r3, #7
 8014aa4:	f023 0307 	bic.w	r3, r3, #7
 8014aa8:	3308      	adds	r3, #8
 8014aaa:	9303      	str	r3, [sp, #12]
 8014aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aae:	443b      	add	r3, r7
 8014ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab2:	e767      	b.n	8014984 <_vfiprintf_r+0x94>
 8014ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ab8:	460c      	mov	r4, r1
 8014aba:	2001      	movs	r0, #1
 8014abc:	e7a5      	b.n	8014a0a <_vfiprintf_r+0x11a>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	3401      	adds	r4, #1
 8014ac2:	9305      	str	r3, [sp, #20]
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	f04f 0c0a 	mov.w	ip, #10
 8014aca:	4620      	mov	r0, r4
 8014acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ad0:	3a30      	subs	r2, #48	; 0x30
 8014ad2:	2a09      	cmp	r2, #9
 8014ad4:	d903      	bls.n	8014ade <_vfiprintf_r+0x1ee>
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d0c5      	beq.n	8014a66 <_vfiprintf_r+0x176>
 8014ada:	9105      	str	r1, [sp, #20]
 8014adc:	e7c3      	b.n	8014a66 <_vfiprintf_r+0x176>
 8014ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	e7f0      	b.n	8014aca <_vfiprintf_r+0x1da>
 8014ae8:	ab03      	add	r3, sp, #12
 8014aea:	9300      	str	r3, [sp, #0]
 8014aec:	462a      	mov	r2, r5
 8014aee:	4b16      	ldr	r3, [pc, #88]	; (8014b48 <_vfiprintf_r+0x258>)
 8014af0:	a904      	add	r1, sp, #16
 8014af2:	4630      	mov	r0, r6
 8014af4:	f3af 8000 	nop.w
 8014af8:	4607      	mov	r7, r0
 8014afa:	1c78      	adds	r0, r7, #1
 8014afc:	d1d6      	bne.n	8014aac <_vfiprintf_r+0x1bc>
 8014afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b00:	07d9      	lsls	r1, r3, #31
 8014b02:	d405      	bmi.n	8014b10 <_vfiprintf_r+0x220>
 8014b04:	89ab      	ldrh	r3, [r5, #12]
 8014b06:	059a      	lsls	r2, r3, #22
 8014b08:	d402      	bmi.n	8014b10 <_vfiprintf_r+0x220>
 8014b0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b0c:	f7ff fc1b 	bl	8014346 <__retarget_lock_release_recursive>
 8014b10:	89ab      	ldrh	r3, [r5, #12]
 8014b12:	065b      	lsls	r3, r3, #25
 8014b14:	f53f af12 	bmi.w	801493c <_vfiprintf_r+0x4c>
 8014b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b1a:	e711      	b.n	8014940 <_vfiprintf_r+0x50>
 8014b1c:	ab03      	add	r3, sp, #12
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	462a      	mov	r2, r5
 8014b22:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <_vfiprintf_r+0x258>)
 8014b24:	a904      	add	r1, sp, #16
 8014b26:	4630      	mov	r0, r6
 8014b28:	f000 f880 	bl	8014c2c <_printf_i>
 8014b2c:	e7e4      	b.n	8014af8 <_vfiprintf_r+0x208>
 8014b2e:	bf00      	nop
 8014b30:	08017d28 	.word	0x08017d28
 8014b34:	08017d48 	.word	0x08017d48
 8014b38:	08017d08 	.word	0x08017d08
 8014b3c:	08017d68 	.word	0x08017d68
 8014b40:	08017d72 	.word	0x08017d72
 8014b44:	00000000 	.word	0x00000000
 8014b48:	080148cb 	.word	0x080148cb
 8014b4c:	08017d6e 	.word	0x08017d6e

08014b50 <_printf_common>:
 8014b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b54:	4616      	mov	r6, r2
 8014b56:	4699      	mov	r9, r3
 8014b58:	688a      	ldr	r2, [r1, #8]
 8014b5a:	690b      	ldr	r3, [r1, #16]
 8014b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b60:	4293      	cmp	r3, r2
 8014b62:	bfb8      	it	lt
 8014b64:	4613      	movlt	r3, r2
 8014b66:	6033      	str	r3, [r6, #0]
 8014b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b6c:	4607      	mov	r7, r0
 8014b6e:	460c      	mov	r4, r1
 8014b70:	b10a      	cbz	r2, 8014b76 <_printf_common+0x26>
 8014b72:	3301      	adds	r3, #1
 8014b74:	6033      	str	r3, [r6, #0]
 8014b76:	6823      	ldr	r3, [r4, #0]
 8014b78:	0699      	lsls	r1, r3, #26
 8014b7a:	bf42      	ittt	mi
 8014b7c:	6833      	ldrmi	r3, [r6, #0]
 8014b7e:	3302      	addmi	r3, #2
 8014b80:	6033      	strmi	r3, [r6, #0]
 8014b82:	6825      	ldr	r5, [r4, #0]
 8014b84:	f015 0506 	ands.w	r5, r5, #6
 8014b88:	d106      	bne.n	8014b98 <_printf_common+0x48>
 8014b8a:	f104 0a19 	add.w	sl, r4, #25
 8014b8e:	68e3      	ldr	r3, [r4, #12]
 8014b90:	6832      	ldr	r2, [r6, #0]
 8014b92:	1a9b      	subs	r3, r3, r2
 8014b94:	42ab      	cmp	r3, r5
 8014b96:	dc26      	bgt.n	8014be6 <_printf_common+0x96>
 8014b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014b9c:	1e13      	subs	r3, r2, #0
 8014b9e:	6822      	ldr	r2, [r4, #0]
 8014ba0:	bf18      	it	ne
 8014ba2:	2301      	movne	r3, #1
 8014ba4:	0692      	lsls	r2, r2, #26
 8014ba6:	d42b      	bmi.n	8014c00 <_printf_common+0xb0>
 8014ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014bac:	4649      	mov	r1, r9
 8014bae:	4638      	mov	r0, r7
 8014bb0:	47c0      	blx	r8
 8014bb2:	3001      	adds	r0, #1
 8014bb4:	d01e      	beq.n	8014bf4 <_printf_common+0xa4>
 8014bb6:	6823      	ldr	r3, [r4, #0]
 8014bb8:	68e5      	ldr	r5, [r4, #12]
 8014bba:	6832      	ldr	r2, [r6, #0]
 8014bbc:	f003 0306 	and.w	r3, r3, #6
 8014bc0:	2b04      	cmp	r3, #4
 8014bc2:	bf08      	it	eq
 8014bc4:	1aad      	subeq	r5, r5, r2
 8014bc6:	68a3      	ldr	r3, [r4, #8]
 8014bc8:	6922      	ldr	r2, [r4, #16]
 8014bca:	bf0c      	ite	eq
 8014bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bd0:	2500      	movne	r5, #0
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	bfc4      	itt	gt
 8014bd6:	1a9b      	subgt	r3, r3, r2
 8014bd8:	18ed      	addgt	r5, r5, r3
 8014bda:	2600      	movs	r6, #0
 8014bdc:	341a      	adds	r4, #26
 8014bde:	42b5      	cmp	r5, r6
 8014be0:	d11a      	bne.n	8014c18 <_printf_common+0xc8>
 8014be2:	2000      	movs	r0, #0
 8014be4:	e008      	b.n	8014bf8 <_printf_common+0xa8>
 8014be6:	2301      	movs	r3, #1
 8014be8:	4652      	mov	r2, sl
 8014bea:	4649      	mov	r1, r9
 8014bec:	4638      	mov	r0, r7
 8014bee:	47c0      	blx	r8
 8014bf0:	3001      	adds	r0, #1
 8014bf2:	d103      	bne.n	8014bfc <_printf_common+0xac>
 8014bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bfc:	3501      	adds	r5, #1
 8014bfe:	e7c6      	b.n	8014b8e <_printf_common+0x3e>
 8014c00:	18e1      	adds	r1, r4, r3
 8014c02:	1c5a      	adds	r2, r3, #1
 8014c04:	2030      	movs	r0, #48	; 0x30
 8014c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c0a:	4422      	add	r2, r4
 8014c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c14:	3302      	adds	r3, #2
 8014c16:	e7c7      	b.n	8014ba8 <_printf_common+0x58>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	4622      	mov	r2, r4
 8014c1c:	4649      	mov	r1, r9
 8014c1e:	4638      	mov	r0, r7
 8014c20:	47c0      	blx	r8
 8014c22:	3001      	adds	r0, #1
 8014c24:	d0e6      	beq.n	8014bf4 <_printf_common+0xa4>
 8014c26:	3601      	adds	r6, #1
 8014c28:	e7d9      	b.n	8014bde <_printf_common+0x8e>
	...

08014c2c <_printf_i>:
 8014c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c30:	7e0f      	ldrb	r7, [r1, #24]
 8014c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014c34:	2f78      	cmp	r7, #120	; 0x78
 8014c36:	4691      	mov	r9, r2
 8014c38:	4680      	mov	r8, r0
 8014c3a:	460c      	mov	r4, r1
 8014c3c:	469a      	mov	sl, r3
 8014c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014c42:	d807      	bhi.n	8014c54 <_printf_i+0x28>
 8014c44:	2f62      	cmp	r7, #98	; 0x62
 8014c46:	d80a      	bhi.n	8014c5e <_printf_i+0x32>
 8014c48:	2f00      	cmp	r7, #0
 8014c4a:	f000 80d8 	beq.w	8014dfe <_printf_i+0x1d2>
 8014c4e:	2f58      	cmp	r7, #88	; 0x58
 8014c50:	f000 80a3 	beq.w	8014d9a <_printf_i+0x16e>
 8014c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014c5c:	e03a      	b.n	8014cd4 <_printf_i+0xa8>
 8014c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014c62:	2b15      	cmp	r3, #21
 8014c64:	d8f6      	bhi.n	8014c54 <_printf_i+0x28>
 8014c66:	a101      	add	r1, pc, #4	; (adr r1, 8014c6c <_printf_i+0x40>)
 8014c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c6c:	08014cc5 	.word	0x08014cc5
 8014c70:	08014cd9 	.word	0x08014cd9
 8014c74:	08014c55 	.word	0x08014c55
 8014c78:	08014c55 	.word	0x08014c55
 8014c7c:	08014c55 	.word	0x08014c55
 8014c80:	08014c55 	.word	0x08014c55
 8014c84:	08014cd9 	.word	0x08014cd9
 8014c88:	08014c55 	.word	0x08014c55
 8014c8c:	08014c55 	.word	0x08014c55
 8014c90:	08014c55 	.word	0x08014c55
 8014c94:	08014c55 	.word	0x08014c55
 8014c98:	08014de5 	.word	0x08014de5
 8014c9c:	08014d09 	.word	0x08014d09
 8014ca0:	08014dc7 	.word	0x08014dc7
 8014ca4:	08014c55 	.word	0x08014c55
 8014ca8:	08014c55 	.word	0x08014c55
 8014cac:	08014e07 	.word	0x08014e07
 8014cb0:	08014c55 	.word	0x08014c55
 8014cb4:	08014d09 	.word	0x08014d09
 8014cb8:	08014c55 	.word	0x08014c55
 8014cbc:	08014c55 	.word	0x08014c55
 8014cc0:	08014dcf 	.word	0x08014dcf
 8014cc4:	682b      	ldr	r3, [r5, #0]
 8014cc6:	1d1a      	adds	r2, r3, #4
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	602a      	str	r2, [r5, #0]
 8014ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	e0a3      	b.n	8014e20 <_printf_i+0x1f4>
 8014cd8:	6820      	ldr	r0, [r4, #0]
 8014cda:	6829      	ldr	r1, [r5, #0]
 8014cdc:	0606      	lsls	r6, r0, #24
 8014cde:	f101 0304 	add.w	r3, r1, #4
 8014ce2:	d50a      	bpl.n	8014cfa <_printf_i+0xce>
 8014ce4:	680e      	ldr	r6, [r1, #0]
 8014ce6:	602b      	str	r3, [r5, #0]
 8014ce8:	2e00      	cmp	r6, #0
 8014cea:	da03      	bge.n	8014cf4 <_printf_i+0xc8>
 8014cec:	232d      	movs	r3, #45	; 0x2d
 8014cee:	4276      	negs	r6, r6
 8014cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cf4:	485e      	ldr	r0, [pc, #376]	; (8014e70 <_printf_i+0x244>)
 8014cf6:	230a      	movs	r3, #10
 8014cf8:	e019      	b.n	8014d2e <_printf_i+0x102>
 8014cfa:	680e      	ldr	r6, [r1, #0]
 8014cfc:	602b      	str	r3, [r5, #0]
 8014cfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d02:	bf18      	it	ne
 8014d04:	b236      	sxthne	r6, r6
 8014d06:	e7ef      	b.n	8014ce8 <_printf_i+0xbc>
 8014d08:	682b      	ldr	r3, [r5, #0]
 8014d0a:	6820      	ldr	r0, [r4, #0]
 8014d0c:	1d19      	adds	r1, r3, #4
 8014d0e:	6029      	str	r1, [r5, #0]
 8014d10:	0601      	lsls	r1, r0, #24
 8014d12:	d501      	bpl.n	8014d18 <_printf_i+0xec>
 8014d14:	681e      	ldr	r6, [r3, #0]
 8014d16:	e002      	b.n	8014d1e <_printf_i+0xf2>
 8014d18:	0646      	lsls	r6, r0, #25
 8014d1a:	d5fb      	bpl.n	8014d14 <_printf_i+0xe8>
 8014d1c:	881e      	ldrh	r6, [r3, #0]
 8014d1e:	4854      	ldr	r0, [pc, #336]	; (8014e70 <_printf_i+0x244>)
 8014d20:	2f6f      	cmp	r7, #111	; 0x6f
 8014d22:	bf0c      	ite	eq
 8014d24:	2308      	moveq	r3, #8
 8014d26:	230a      	movne	r3, #10
 8014d28:	2100      	movs	r1, #0
 8014d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d2e:	6865      	ldr	r5, [r4, #4]
 8014d30:	60a5      	str	r5, [r4, #8]
 8014d32:	2d00      	cmp	r5, #0
 8014d34:	bfa2      	ittt	ge
 8014d36:	6821      	ldrge	r1, [r4, #0]
 8014d38:	f021 0104 	bicge.w	r1, r1, #4
 8014d3c:	6021      	strge	r1, [r4, #0]
 8014d3e:	b90e      	cbnz	r6, 8014d44 <_printf_i+0x118>
 8014d40:	2d00      	cmp	r5, #0
 8014d42:	d04d      	beq.n	8014de0 <_printf_i+0x1b4>
 8014d44:	4615      	mov	r5, r2
 8014d46:	fbb6 f1f3 	udiv	r1, r6, r3
 8014d4a:	fb03 6711 	mls	r7, r3, r1, r6
 8014d4e:	5dc7      	ldrb	r7, [r0, r7]
 8014d50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014d54:	4637      	mov	r7, r6
 8014d56:	42bb      	cmp	r3, r7
 8014d58:	460e      	mov	r6, r1
 8014d5a:	d9f4      	bls.n	8014d46 <_printf_i+0x11a>
 8014d5c:	2b08      	cmp	r3, #8
 8014d5e:	d10b      	bne.n	8014d78 <_printf_i+0x14c>
 8014d60:	6823      	ldr	r3, [r4, #0]
 8014d62:	07de      	lsls	r6, r3, #31
 8014d64:	d508      	bpl.n	8014d78 <_printf_i+0x14c>
 8014d66:	6923      	ldr	r3, [r4, #16]
 8014d68:	6861      	ldr	r1, [r4, #4]
 8014d6a:	4299      	cmp	r1, r3
 8014d6c:	bfde      	ittt	le
 8014d6e:	2330      	movle	r3, #48	; 0x30
 8014d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d78:	1b52      	subs	r2, r2, r5
 8014d7a:	6122      	str	r2, [r4, #16]
 8014d7c:	f8cd a000 	str.w	sl, [sp]
 8014d80:	464b      	mov	r3, r9
 8014d82:	aa03      	add	r2, sp, #12
 8014d84:	4621      	mov	r1, r4
 8014d86:	4640      	mov	r0, r8
 8014d88:	f7ff fee2 	bl	8014b50 <_printf_common>
 8014d8c:	3001      	adds	r0, #1
 8014d8e:	d14c      	bne.n	8014e2a <_printf_i+0x1fe>
 8014d90:	f04f 30ff 	mov.w	r0, #4294967295
 8014d94:	b004      	add	sp, #16
 8014d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d9a:	4835      	ldr	r0, [pc, #212]	; (8014e70 <_printf_i+0x244>)
 8014d9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014da0:	6829      	ldr	r1, [r5, #0]
 8014da2:	6823      	ldr	r3, [r4, #0]
 8014da4:	f851 6b04 	ldr.w	r6, [r1], #4
 8014da8:	6029      	str	r1, [r5, #0]
 8014daa:	061d      	lsls	r5, r3, #24
 8014dac:	d514      	bpl.n	8014dd8 <_printf_i+0x1ac>
 8014dae:	07df      	lsls	r7, r3, #31
 8014db0:	bf44      	itt	mi
 8014db2:	f043 0320 	orrmi.w	r3, r3, #32
 8014db6:	6023      	strmi	r3, [r4, #0]
 8014db8:	b91e      	cbnz	r6, 8014dc2 <_printf_i+0x196>
 8014dba:	6823      	ldr	r3, [r4, #0]
 8014dbc:	f023 0320 	bic.w	r3, r3, #32
 8014dc0:	6023      	str	r3, [r4, #0]
 8014dc2:	2310      	movs	r3, #16
 8014dc4:	e7b0      	b.n	8014d28 <_printf_i+0xfc>
 8014dc6:	6823      	ldr	r3, [r4, #0]
 8014dc8:	f043 0320 	orr.w	r3, r3, #32
 8014dcc:	6023      	str	r3, [r4, #0]
 8014dce:	2378      	movs	r3, #120	; 0x78
 8014dd0:	4828      	ldr	r0, [pc, #160]	; (8014e74 <_printf_i+0x248>)
 8014dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014dd6:	e7e3      	b.n	8014da0 <_printf_i+0x174>
 8014dd8:	0659      	lsls	r1, r3, #25
 8014dda:	bf48      	it	mi
 8014ddc:	b2b6      	uxthmi	r6, r6
 8014dde:	e7e6      	b.n	8014dae <_printf_i+0x182>
 8014de0:	4615      	mov	r5, r2
 8014de2:	e7bb      	b.n	8014d5c <_printf_i+0x130>
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	6826      	ldr	r6, [r4, #0]
 8014de8:	6961      	ldr	r1, [r4, #20]
 8014dea:	1d18      	adds	r0, r3, #4
 8014dec:	6028      	str	r0, [r5, #0]
 8014dee:	0635      	lsls	r5, r6, #24
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	d501      	bpl.n	8014df8 <_printf_i+0x1cc>
 8014df4:	6019      	str	r1, [r3, #0]
 8014df6:	e002      	b.n	8014dfe <_printf_i+0x1d2>
 8014df8:	0670      	lsls	r0, r6, #25
 8014dfa:	d5fb      	bpl.n	8014df4 <_printf_i+0x1c8>
 8014dfc:	8019      	strh	r1, [r3, #0]
 8014dfe:	2300      	movs	r3, #0
 8014e00:	6123      	str	r3, [r4, #16]
 8014e02:	4615      	mov	r5, r2
 8014e04:	e7ba      	b.n	8014d7c <_printf_i+0x150>
 8014e06:	682b      	ldr	r3, [r5, #0]
 8014e08:	1d1a      	adds	r2, r3, #4
 8014e0a:	602a      	str	r2, [r5, #0]
 8014e0c:	681d      	ldr	r5, [r3, #0]
 8014e0e:	6862      	ldr	r2, [r4, #4]
 8014e10:	2100      	movs	r1, #0
 8014e12:	4628      	mov	r0, r5
 8014e14:	f7eb f9fc 	bl	8000210 <memchr>
 8014e18:	b108      	cbz	r0, 8014e1e <_printf_i+0x1f2>
 8014e1a:	1b40      	subs	r0, r0, r5
 8014e1c:	6060      	str	r0, [r4, #4]
 8014e1e:	6863      	ldr	r3, [r4, #4]
 8014e20:	6123      	str	r3, [r4, #16]
 8014e22:	2300      	movs	r3, #0
 8014e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e28:	e7a8      	b.n	8014d7c <_printf_i+0x150>
 8014e2a:	6923      	ldr	r3, [r4, #16]
 8014e2c:	462a      	mov	r2, r5
 8014e2e:	4649      	mov	r1, r9
 8014e30:	4640      	mov	r0, r8
 8014e32:	47d0      	blx	sl
 8014e34:	3001      	adds	r0, #1
 8014e36:	d0ab      	beq.n	8014d90 <_printf_i+0x164>
 8014e38:	6823      	ldr	r3, [r4, #0]
 8014e3a:	079b      	lsls	r3, r3, #30
 8014e3c:	d413      	bmi.n	8014e66 <_printf_i+0x23a>
 8014e3e:	68e0      	ldr	r0, [r4, #12]
 8014e40:	9b03      	ldr	r3, [sp, #12]
 8014e42:	4298      	cmp	r0, r3
 8014e44:	bfb8      	it	lt
 8014e46:	4618      	movlt	r0, r3
 8014e48:	e7a4      	b.n	8014d94 <_printf_i+0x168>
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	4632      	mov	r2, r6
 8014e4e:	4649      	mov	r1, r9
 8014e50:	4640      	mov	r0, r8
 8014e52:	47d0      	blx	sl
 8014e54:	3001      	adds	r0, #1
 8014e56:	d09b      	beq.n	8014d90 <_printf_i+0x164>
 8014e58:	3501      	adds	r5, #1
 8014e5a:	68e3      	ldr	r3, [r4, #12]
 8014e5c:	9903      	ldr	r1, [sp, #12]
 8014e5e:	1a5b      	subs	r3, r3, r1
 8014e60:	42ab      	cmp	r3, r5
 8014e62:	dcf2      	bgt.n	8014e4a <_printf_i+0x21e>
 8014e64:	e7eb      	b.n	8014e3e <_printf_i+0x212>
 8014e66:	2500      	movs	r5, #0
 8014e68:	f104 0619 	add.w	r6, r4, #25
 8014e6c:	e7f5      	b.n	8014e5a <_printf_i+0x22e>
 8014e6e:	bf00      	nop
 8014e70:	08017d79 	.word	0x08017d79
 8014e74:	08017d8a 	.word	0x08017d8a

08014e78 <_sbrk_r>:
 8014e78:	b538      	push	{r3, r4, r5, lr}
 8014e7a:	4d06      	ldr	r5, [pc, #24]	; (8014e94 <_sbrk_r+0x1c>)
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	4604      	mov	r4, r0
 8014e80:	4608      	mov	r0, r1
 8014e82:	602b      	str	r3, [r5, #0]
 8014e84:	f7ec fd7a 	bl	800197c <_sbrk>
 8014e88:	1c43      	adds	r3, r0, #1
 8014e8a:	d102      	bne.n	8014e92 <_sbrk_r+0x1a>
 8014e8c:	682b      	ldr	r3, [r5, #0]
 8014e8e:	b103      	cbz	r3, 8014e92 <_sbrk_r+0x1a>
 8014e90:	6023      	str	r3, [r4, #0]
 8014e92:	bd38      	pop	{r3, r4, r5, pc}
 8014e94:	20008df4 	.word	0x20008df4

08014e98 <__sread>:
 8014e98:	b510      	push	{r4, lr}
 8014e9a:	460c      	mov	r4, r1
 8014e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ea0:	f000 f8d8 	bl	8015054 <_read_r>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	bfab      	itete	ge
 8014ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8014eac:	181b      	addge	r3, r3, r0
 8014eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014eb2:	bfac      	ite	ge
 8014eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014eb6:	81a3      	strhlt	r3, [r4, #12]
 8014eb8:	bd10      	pop	{r4, pc}

08014eba <__swrite>:
 8014eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ebe:	461f      	mov	r7, r3
 8014ec0:	898b      	ldrh	r3, [r1, #12]
 8014ec2:	05db      	lsls	r3, r3, #23
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	460c      	mov	r4, r1
 8014ec8:	4616      	mov	r6, r2
 8014eca:	d505      	bpl.n	8014ed8 <__swrite+0x1e>
 8014ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ed0:	2302      	movs	r3, #2
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f000 f870 	bl	8014fb8 <_lseek_r>
 8014ed8:	89a3      	ldrh	r3, [r4, #12]
 8014eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ee2:	81a3      	strh	r3, [r4, #12]
 8014ee4:	4632      	mov	r2, r6
 8014ee6:	463b      	mov	r3, r7
 8014ee8:	4628      	mov	r0, r5
 8014eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eee:	f000 b817 	b.w	8014f20 <_write_r>

08014ef2 <__sseek>:
 8014ef2:	b510      	push	{r4, lr}
 8014ef4:	460c      	mov	r4, r1
 8014ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014efa:	f000 f85d 	bl	8014fb8 <_lseek_r>
 8014efe:	1c43      	adds	r3, r0, #1
 8014f00:	89a3      	ldrh	r3, [r4, #12]
 8014f02:	bf15      	itete	ne
 8014f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f0e:	81a3      	strheq	r3, [r4, #12]
 8014f10:	bf18      	it	ne
 8014f12:	81a3      	strhne	r3, [r4, #12]
 8014f14:	bd10      	pop	{r4, pc}

08014f16 <__sclose>:
 8014f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f1a:	f000 b81b 	b.w	8014f54 <_close_r>
	...

08014f20 <_write_r>:
 8014f20:	b538      	push	{r3, r4, r5, lr}
 8014f22:	4d07      	ldr	r5, [pc, #28]	; (8014f40 <_write_r+0x20>)
 8014f24:	4604      	mov	r4, r0
 8014f26:	4608      	mov	r0, r1
 8014f28:	4611      	mov	r1, r2
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	602a      	str	r2, [r5, #0]
 8014f2e:	461a      	mov	r2, r3
 8014f30:	f7fe fd92 	bl	8013a58 <_write>
 8014f34:	1c43      	adds	r3, r0, #1
 8014f36:	d102      	bne.n	8014f3e <_write_r+0x1e>
 8014f38:	682b      	ldr	r3, [r5, #0]
 8014f3a:	b103      	cbz	r3, 8014f3e <_write_r+0x1e>
 8014f3c:	6023      	str	r3, [r4, #0]
 8014f3e:	bd38      	pop	{r3, r4, r5, pc}
 8014f40:	20008df4 	.word	0x20008df4

08014f44 <abort>:
 8014f44:	b508      	push	{r3, lr}
 8014f46:	2006      	movs	r0, #6
 8014f48:	f000 f8be 	bl	80150c8 <raise>
 8014f4c:	2001      	movs	r0, #1
 8014f4e:	f7ec fcd7 	bl	8001900 <_exit>
	...

08014f54 <_close_r>:
 8014f54:	b538      	push	{r3, r4, r5, lr}
 8014f56:	4d06      	ldr	r5, [pc, #24]	; (8014f70 <_close_r+0x1c>)
 8014f58:	2300      	movs	r3, #0
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	4608      	mov	r0, r1
 8014f5e:	602b      	str	r3, [r5, #0]
 8014f60:	f7ec fcd8 	bl	8001914 <_close>
 8014f64:	1c43      	adds	r3, r0, #1
 8014f66:	d102      	bne.n	8014f6e <_close_r+0x1a>
 8014f68:	682b      	ldr	r3, [r5, #0]
 8014f6a:	b103      	cbz	r3, 8014f6e <_close_r+0x1a>
 8014f6c:	6023      	str	r3, [r4, #0]
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	20008df4 	.word	0x20008df4

08014f74 <_fstat_r>:
 8014f74:	b538      	push	{r3, r4, r5, lr}
 8014f76:	4d07      	ldr	r5, [pc, #28]	; (8014f94 <_fstat_r+0x20>)
 8014f78:	2300      	movs	r3, #0
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	4608      	mov	r0, r1
 8014f7e:	4611      	mov	r1, r2
 8014f80:	602b      	str	r3, [r5, #0]
 8014f82:	f7ec fcd3 	bl	800192c <_fstat>
 8014f86:	1c43      	adds	r3, r0, #1
 8014f88:	d102      	bne.n	8014f90 <_fstat_r+0x1c>
 8014f8a:	682b      	ldr	r3, [r5, #0]
 8014f8c:	b103      	cbz	r3, 8014f90 <_fstat_r+0x1c>
 8014f8e:	6023      	str	r3, [r4, #0]
 8014f90:	bd38      	pop	{r3, r4, r5, pc}
 8014f92:	bf00      	nop
 8014f94:	20008df4 	.word	0x20008df4

08014f98 <_isatty_r>:
 8014f98:	b538      	push	{r3, r4, r5, lr}
 8014f9a:	4d06      	ldr	r5, [pc, #24]	; (8014fb4 <_isatty_r+0x1c>)
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	4608      	mov	r0, r1
 8014fa2:	602b      	str	r3, [r5, #0]
 8014fa4:	f7ec fcd2 	bl	800194c <_isatty>
 8014fa8:	1c43      	adds	r3, r0, #1
 8014faa:	d102      	bne.n	8014fb2 <_isatty_r+0x1a>
 8014fac:	682b      	ldr	r3, [r5, #0]
 8014fae:	b103      	cbz	r3, 8014fb2 <_isatty_r+0x1a>
 8014fb0:	6023      	str	r3, [r4, #0]
 8014fb2:	bd38      	pop	{r3, r4, r5, pc}
 8014fb4:	20008df4 	.word	0x20008df4

08014fb8 <_lseek_r>:
 8014fb8:	b538      	push	{r3, r4, r5, lr}
 8014fba:	4d07      	ldr	r5, [pc, #28]	; (8014fd8 <_lseek_r+0x20>)
 8014fbc:	4604      	mov	r4, r0
 8014fbe:	4608      	mov	r0, r1
 8014fc0:	4611      	mov	r1, r2
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	602a      	str	r2, [r5, #0]
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	f7ec fccb 	bl	8001962 <_lseek>
 8014fcc:	1c43      	adds	r3, r0, #1
 8014fce:	d102      	bne.n	8014fd6 <_lseek_r+0x1e>
 8014fd0:	682b      	ldr	r3, [r5, #0]
 8014fd2:	b103      	cbz	r3, 8014fd6 <_lseek_r+0x1e>
 8014fd4:	6023      	str	r3, [r4, #0]
 8014fd6:	bd38      	pop	{r3, r4, r5, pc}
 8014fd8:	20008df4 	.word	0x20008df4

08014fdc <__malloc_lock>:
 8014fdc:	4801      	ldr	r0, [pc, #4]	; (8014fe4 <__malloc_lock+0x8>)
 8014fde:	f7ff b9b1 	b.w	8014344 <__retarget_lock_acquire_recursive>
 8014fe2:	bf00      	nop
 8014fe4:	20008df8 	.word	0x20008df8

08014fe8 <__malloc_unlock>:
 8014fe8:	4801      	ldr	r0, [pc, #4]	; (8014ff0 <__malloc_unlock+0x8>)
 8014fea:	f7ff b9ac 	b.w	8014346 <__retarget_lock_release_recursive>
 8014fee:	bf00      	nop
 8014ff0:	20008df8 	.word	0x20008df8

08014ff4 <_realloc_r>:
 8014ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ff8:	4680      	mov	r8, r0
 8014ffa:	4614      	mov	r4, r2
 8014ffc:	460e      	mov	r6, r1
 8014ffe:	b921      	cbnz	r1, 801500a <_realloc_r+0x16>
 8015000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015004:	4611      	mov	r1, r2
 8015006:	f7ff ba79 	b.w	80144fc <_malloc_r>
 801500a:	b92a      	cbnz	r2, 8015018 <_realloc_r+0x24>
 801500c:	f7ff fa0a 	bl	8014424 <_free_r>
 8015010:	4625      	mov	r5, r4
 8015012:	4628      	mov	r0, r5
 8015014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015018:	f000 f872 	bl	8015100 <_malloc_usable_size_r>
 801501c:	4284      	cmp	r4, r0
 801501e:	4607      	mov	r7, r0
 8015020:	d802      	bhi.n	8015028 <_realloc_r+0x34>
 8015022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015026:	d812      	bhi.n	801504e <_realloc_r+0x5a>
 8015028:	4621      	mov	r1, r4
 801502a:	4640      	mov	r0, r8
 801502c:	f7ff fa66 	bl	80144fc <_malloc_r>
 8015030:	4605      	mov	r5, r0
 8015032:	2800      	cmp	r0, #0
 8015034:	d0ed      	beq.n	8015012 <_realloc_r+0x1e>
 8015036:	42bc      	cmp	r4, r7
 8015038:	4622      	mov	r2, r4
 801503a:	4631      	mov	r1, r6
 801503c:	bf28      	it	cs
 801503e:	463a      	movcs	r2, r7
 8015040:	f7fe fe32 	bl	8013ca8 <memcpy>
 8015044:	4631      	mov	r1, r6
 8015046:	4640      	mov	r0, r8
 8015048:	f7ff f9ec 	bl	8014424 <_free_r>
 801504c:	e7e1      	b.n	8015012 <_realloc_r+0x1e>
 801504e:	4635      	mov	r5, r6
 8015050:	e7df      	b.n	8015012 <_realloc_r+0x1e>
	...

08015054 <_read_r>:
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	4d07      	ldr	r5, [pc, #28]	; (8015074 <_read_r+0x20>)
 8015058:	4604      	mov	r4, r0
 801505a:	4608      	mov	r0, r1
 801505c:	4611      	mov	r1, r2
 801505e:	2200      	movs	r2, #0
 8015060:	602a      	str	r2, [r5, #0]
 8015062:	461a      	mov	r2, r3
 8015064:	f7fe fd28 	bl	8013ab8 <_read>
 8015068:	1c43      	adds	r3, r0, #1
 801506a:	d102      	bne.n	8015072 <_read_r+0x1e>
 801506c:	682b      	ldr	r3, [r5, #0]
 801506e:	b103      	cbz	r3, 8015072 <_read_r+0x1e>
 8015070:	6023      	str	r3, [r4, #0]
 8015072:	bd38      	pop	{r3, r4, r5, pc}
 8015074:	20008df4 	.word	0x20008df4

08015078 <_raise_r>:
 8015078:	291f      	cmp	r1, #31
 801507a:	b538      	push	{r3, r4, r5, lr}
 801507c:	4604      	mov	r4, r0
 801507e:	460d      	mov	r5, r1
 8015080:	d904      	bls.n	801508c <_raise_r+0x14>
 8015082:	2316      	movs	r3, #22
 8015084:	6003      	str	r3, [r0, #0]
 8015086:	f04f 30ff 	mov.w	r0, #4294967295
 801508a:	bd38      	pop	{r3, r4, r5, pc}
 801508c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801508e:	b112      	cbz	r2, 8015096 <_raise_r+0x1e>
 8015090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015094:	b94b      	cbnz	r3, 80150aa <_raise_r+0x32>
 8015096:	4620      	mov	r0, r4
 8015098:	f000 f830 	bl	80150fc <_getpid_r>
 801509c:	462a      	mov	r2, r5
 801509e:	4601      	mov	r1, r0
 80150a0:	4620      	mov	r0, r4
 80150a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150a6:	f000 b817 	b.w	80150d8 <_kill_r>
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d00a      	beq.n	80150c4 <_raise_r+0x4c>
 80150ae:	1c59      	adds	r1, r3, #1
 80150b0:	d103      	bne.n	80150ba <_raise_r+0x42>
 80150b2:	2316      	movs	r3, #22
 80150b4:	6003      	str	r3, [r0, #0]
 80150b6:	2001      	movs	r0, #1
 80150b8:	e7e7      	b.n	801508a <_raise_r+0x12>
 80150ba:	2400      	movs	r4, #0
 80150bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80150c0:	4628      	mov	r0, r5
 80150c2:	4798      	blx	r3
 80150c4:	2000      	movs	r0, #0
 80150c6:	e7e0      	b.n	801508a <_raise_r+0x12>

080150c8 <raise>:
 80150c8:	4b02      	ldr	r3, [pc, #8]	; (80150d4 <raise+0xc>)
 80150ca:	4601      	mov	r1, r0
 80150cc:	6818      	ldr	r0, [r3, #0]
 80150ce:	f7ff bfd3 	b.w	8015078 <_raise_r>
 80150d2:	bf00      	nop
 80150d4:	2000002c 	.word	0x2000002c

080150d8 <_kill_r>:
 80150d8:	b538      	push	{r3, r4, r5, lr}
 80150da:	4d07      	ldr	r5, [pc, #28]	; (80150f8 <_kill_r+0x20>)
 80150dc:	2300      	movs	r3, #0
 80150de:	4604      	mov	r4, r0
 80150e0:	4608      	mov	r0, r1
 80150e2:	4611      	mov	r1, r2
 80150e4:	602b      	str	r3, [r5, #0]
 80150e6:	f7ec fbf9 	bl	80018dc <_kill>
 80150ea:	1c43      	adds	r3, r0, #1
 80150ec:	d102      	bne.n	80150f4 <_kill_r+0x1c>
 80150ee:	682b      	ldr	r3, [r5, #0]
 80150f0:	b103      	cbz	r3, 80150f4 <_kill_r+0x1c>
 80150f2:	6023      	str	r3, [r4, #0]
 80150f4:	bd38      	pop	{r3, r4, r5, pc}
 80150f6:	bf00      	nop
 80150f8:	20008df4 	.word	0x20008df4

080150fc <_getpid_r>:
 80150fc:	f7ec bbe6 	b.w	80018cc <_getpid>

08015100 <_malloc_usable_size_r>:
 8015100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015104:	1f18      	subs	r0, r3, #4
 8015106:	2b00      	cmp	r3, #0
 8015108:	bfbc      	itt	lt
 801510a:	580b      	ldrlt	r3, [r1, r0]
 801510c:	18c0      	addlt	r0, r0, r3
 801510e:	4770      	bx	lr

08015110 <_init>:
 8015110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015112:	bf00      	nop
 8015114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015116:	bc08      	pop	{r3}
 8015118:	469e      	mov	lr, r3
 801511a:	4770      	bx	lr

0801511c <_fini>:
 801511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801511e:	bf00      	nop
 8015120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015122:	bc08      	pop	{r3}
 8015124:	469e      	mov	lr, r3
 8015126:	4770      	bx	lr
