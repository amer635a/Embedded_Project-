
F7_ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018798  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002de0  08018968  08018968  00028968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b748  0801b748  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b748  0801b748  0002b748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b750  0801b750  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b750  0801b750  0002b750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b754  0801b754  0002b754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801b758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801b7e8  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801b888  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008f10  200001d0  0801b928  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200090e0  0801b928  000390e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000377b6  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007ebb  00000000  00000000  000679b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002838  00000000  00000000  0006f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002648  00000000  00000000  000720b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039d5f  00000000  00000000  000746f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042b90  00000000  00000000  000ae457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116967  00000000  00000000  000f0fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020794e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b0a4  00000000  00000000  002079a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018950 	.word	0x08018950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08018950 	.word	0x08018950

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 fd3a 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f822 	bl	8000614 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005d0:	f000 fb08 	bl	8000be4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 fb70 	bl	8000cb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d8:	f000 faa6 	bl	8000b28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005dc:	f000 fad4 	bl	8000b88 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005e0:	f000 f880 	bl	80006e4 <MX_ADC1_Init>
  MX_DAC_Init();
 80005e4:	f000 f8d0 	bl	8000788 <MX_DAC_Init>
  MX_TIM2_Init();
 80005e8:	f000 f9f0 	bl	80009cc <MX_TIM2_Init>
  MX_UART4_Init();
 80005ec:	f000 fa3c 	bl	8000a68 <MX_UART4_Init>
  MX_UART5_Init();
 80005f0:	f000 fa6a 	bl	8000ac8 <MX_UART5_Init>
  MX_I2C1_Init();
 80005f4:	f000 f8f2 	bl	80007dc <MX_I2C1_Init>
  MX_DMA_Init();
 80005f8:	f000 faf4 	bl	8000be4 <MX_DMA_Init>
  MX_I2C2_Init();
 80005fc:	f000 f92e 	bl	800085c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000600:	f000 f96c 	bl	80008dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000604:	f000 f9a8 	bl	8000958 <MX_SPI2_Init>
  MX_LWIP_Init();
 8000608:	f00b f8fe 	bl	800b808 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 800060c:	f016 f8d4 	bl	80167b8 <rtg_main>
 8000610:	e7fc      	b.n	800060c <main+0x48>
	...

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f017 f8c6 	bl	80177b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000638:	f006 fdc2 	bl	80071c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a26      	ldr	r2, [pc, #152]	; (80006dc <SystemClock_Config+0xc8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemClock_Config+0xcc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f006 fda1 	bl	80071e0 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 fbb2 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 f82f 	bl	8007728 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d0:	f000 fb9c 	bl	8000e0c <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0x98>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_ADC1_Init+0x9c>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_ADC1_Init+0x98>)
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_ADC1_Init+0xa0>)
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_ADC1_Init+0x98>)
 8000730:	2201      	movs	r2, #1
 8000732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0x98>)
 800073e:	2201      	movs	r2, #1
 8000740:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_ADC1_Init+0x98>)
 8000744:	f001 fcfe 	bl	8002144 <HAL_ADC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 fb5d 	bl	8000e0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0x98>)
 8000764:	f001 ffbc 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 fb4d 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001ec 	.word	0x200001ec
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_DAC_Init+0x4c>)
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_DAC_Init+0x50>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_DAC_Init+0x4c>)
 800079e:	f002 fb0a 	bl	8002db6 <HAL_DAC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007a8:	f000 fb30 	bl	8000e0c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_DAC_Init+0x4c>)
 80007bc:	f002 fb81 	bl	8002ec2 <HAL_DAC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007c6:	f000 fb21 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000234 	.word	0x20000234
 80007d8:	40007400 	.word	0x40007400

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	f004 fbba 	bl	8004f90 <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 faf3 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C1_Init+0x74>)
 800082a:	f006 fae9 	bl	8006e00 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 faea 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083c:	f006 fb2b 	bl	8006e96 <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 fae1 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000248 	.word	0x20000248
 8000854:	40005400 	.word	0x40005400
 8000858:	00808cd2 	.word	0x00808cd2

0800085c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C2_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 44;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C2_Init+0x74>)
 800086e:	222c      	movs	r2, #44	; 0x2c
 8000870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000898:	f004 fb7a 	bl	8004f90 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 fab3 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008aa:	f006 faa9 	bl	8006e00 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 faaa 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008bc:	f006 faeb 	bl	8006e96 <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 faa1 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000029c 	.word	0x2000029c
 80008d4:	40005800 	.word	0x40005800
 80008d8:	00808cd2 	.word	0x00808cd2

080008dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x74>)
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_SPI1_Init+0x74>)
 800093c:	f007 fd0a 	bl	8008354 <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 fa61 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000470 	.word	0x20000470
 8000954:	40013000 	.word	0x40013000

08000958 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <MX_SPI2_Init+0x70>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000970:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000974:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000988:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_SPI2_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI2_Init+0x6c>)
 800099e:	2207      	movs	r2, #7
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_SPI2_Init+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI2_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_SPI2_Init+0x6c>)
 80009b0:	f007 fcd0 	bl	8008354 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009ba:	f000 fa27 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200004d4 	.word	0x200004d4
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_TIM2_Init+0x98>)
 80009ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_TIM2_Init+0x98>)
 80009f4:	f640 620f 	movw	r2, #3599	; 0xe0f
 80009f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM2_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a16:	f008 fafb 	bl	8009010 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a20:	f000 f9f4 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a32:	f008 fc63 	bl	80092fc <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a3c:	f000 f9e6 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_TIM2_Init+0x98>)
 8000a4e:	f008 fe81 	bl	8009754 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a58:	f000 f9d8 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200006b8 	.word	0x200006b8

08000a68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <MX_UART4_Init+0x5c>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_UART4_Init+0x58>)
 8000aac:	f008 fefe 	bl	80098ac <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ab6:	f000 f9a9 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000764 	.word	0x20000764
 8000ac4:	40004c00 	.word	0x40004c00

08000ac8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_UART5_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_UART5_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_UART5_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_UART5_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_UART5_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_UART5_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_UART5_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_UART5_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_UART5_Init+0x58>)
 8000b0c:	f008 fece 	bl	80098ac <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 f979 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200007ec 	.word	0x200007ec
 8000b24:	40005000 	.word	0x40005000

08000b28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <MX_USART3_UART_Init+0x5c>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART3_UART_Init+0x58>)
 8000b6c:	f008 fe9e 	bl	80098ac <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b76:	f000 f949 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000874 	.word	0x20000874
 8000b84:	40004800 	.word	0x40004800

08000b88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2206      	movs	r2, #6
 8000b98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bcc:	f006 f9af 	bl	8006f2e <HAL_PCD_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f919 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200008fc 	.word	0x200008fc

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <MX_DMA_Init+0xd0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <MX_DMA_Init+0xd0>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <MX_DMA_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_DMA_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <MX_DMA_Init+0xd0>)
 8000c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <MX_DMA_Init+0xd0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f002 f893 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c24:	200b      	movs	r0, #11
 8000c26:	f002 f8ac 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f002 f88b 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c34:	200c      	movs	r0, #12
 8000c36:	f002 f8a4 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200d      	movs	r0, #13
 8000c40:	f002 f883 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c44:	200d      	movs	r0, #13
 8000c46:	f002 f89c 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200e      	movs	r0, #14
 8000c50:	f002 f87b 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c54:	200e      	movs	r0, #14
 8000c56:	f002 f894 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f002 f873 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f002 f88c 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2011      	movs	r0, #17
 8000c70:	f002 f86b 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c74:	2011      	movs	r0, #17
 8000c76:	f002 f884 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	202f      	movs	r0, #47	; 0x2f
 8000c80:	f002 f863 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c84:	202f      	movs	r0, #47	; 0x2f
 8000c86:	f002 f87c 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f002 f85b 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f002 f874 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	203b      	movs	r0, #59	; 0x3b
 8000ca0:	f002 f853 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ca4:	203b      	movs	r0, #59	; 0x3b
 8000ca6:	f002 f86c 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a4a      	ldr	r2, [pc, #296]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	4b45      	ldr	r3, [pc, #276]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a38      	ldr	r2, [pc, #224]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_GPIO_Init+0x144>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d64:	4826      	ldr	r0, [pc, #152]	; (8000e00 <MX_GPIO_Init+0x148>)
 8000d66:	f004 f8bb 	bl	8004ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	4825      	ldr	r0, [pc, #148]	; (8000e04 <MX_GPIO_Init+0x14c>)
 8000d70:	f004 f8b6 	bl	8004ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481f      	ldr	r0, [pc, #124]	; (8000e08 <MX_GPIO_Init+0x150>)
 8000d8c:	f003 fefc 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d90:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4815      	ldr	r0, [pc, #84]	; (8000e00 <MX_GPIO_Init+0x148>)
 8000daa:	f003 feed 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <MX_GPIO_Init+0x14c>)
 8000dc6:	f003 fedf 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x14c>)
 8000dde:	f003 fed3 	bl	8004b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2028      	movs	r0, #40	; 0x28
 8000de8:	f001 ffaf 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dec:	2028      	movs	r0, #40	; 0x28
 8000dee:	f001 ffc8 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40020800 	.word	0x40020800

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_ADC_MspInit+0x84>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12b      	bne.n	8000eda <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_ADC_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0x88>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_ADC_MspInit+0x88>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_ADC_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_ADC_MspInit+0x88>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_ADC_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <HAL_ADC_MspInit+0x8c>)
 8000ec6:	f003 fe5f 	bl	8004b88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2012      	movs	r0, #18
 8000ed0:	f001 ff3b 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ed4:	2012      	movs	r0, #18
 8000ed6:	f001 ff54 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40012000 	.word	0x40012000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_DAC_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12b      	bne.n	8000f6a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_DAC_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_DAC_MspInit+0x88>)
 8000f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_DAC_MspInit+0x88>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_DAC_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_DAC_MspInit+0x88>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_DAC_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f42:	2310      	movs	r3, #16
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_DAC_MspInit+0x8c>)
 8000f56:	f003 fe17 	bl	8004b88 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2036      	movs	r0, #54	; 0x36
 8000f60:	f001 fef3 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f64:	2036      	movs	r0, #54	; 0x36
 8000f66:	f001 ff0c 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40007400 	.word	0x40007400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0ac      	sub	sp, #176	; 0xb0
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	2284      	movs	r2, #132	; 0x84
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f016 fc07 	bl	80177b4 <memset>
  if(hi2c->Instance==I2C1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a57      	ldr	r2, [pc, #348]	; (8001108 <HAL_I2C_MspInit+0x188>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	f040 80b9 	bne.w	8001124 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 fdd7 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000fcc:	f7ff ff1e 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_I2C_MspInit+0x18c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_I2C_MspInit+0x18c>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <HAL_I2C_MspInit+0x18c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000fe8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001002:	2304      	movs	r3, #4
 8001004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800100c:	4619      	mov	r1, r3
 800100e:	4840      	ldr	r0, [pc, #256]	; (8001110 <HAL_I2C_MspInit+0x190>)
 8001010:	f003 fdba 	bl	8004b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_I2C_MspInit+0x18c>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a3c      	ldr	r2, [pc, #240]	; (800110c <HAL_I2C_MspInit+0x18c>)
 800101a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b3a      	ldr	r3, [pc, #232]	; (800110c <HAL_I2C_MspInit+0x18c>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_I2C_MspInit+0x194>)
 800102e:	4a3a      	ldr	r2, [pc, #232]	; (8001118 <HAL_I2C_MspInit+0x198>)
 8001030:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001038:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_I2C_MspInit+0x194>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_I2C_MspInit+0x194>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800106c:	4829      	ldr	r0, [pc, #164]	; (8001114 <HAL_I2C_MspInit+0x194>)
 800106e:	f001 ff81 	bl	8002f74 <HAL_DMA_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001078:	f7ff fec8 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
 8001082:	4a24      	ldr	r2, [pc, #144]	; (8001114 <HAL_I2C_MspInit+0x194>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_I2C_MspInit+0x19c>)
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <HAL_I2C_MspInit+0x1a0>)
 800108c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_I2C_MspInit+0x19c>)
 8001090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001094:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_I2C_MspInit+0x19c>)
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_I2C_MspInit+0x19c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010ca:	f001 ff53 	bl	8002f74 <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80010d4:	f7ff fe9a 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_I2C_MspInit+0x19c>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	201f      	movs	r0, #31
 80010ea:	f001 fe2e 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ee:	201f      	movs	r0, #31
 80010f0:	f001 fe47 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2020      	movs	r0, #32
 80010fa:	f001 fe26 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010fe:	2020      	movs	r0, #32
 8001100:	f001 fe3f 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001104:	e0be      	b.n	8001284 <HAL_I2C_MspInit+0x304>
 8001106:	bf00      	nop
 8001108:	40005400 	.word	0x40005400
 800110c:	40023800 	.word	0x40023800
 8001110:	40020400 	.word	0x40020400
 8001114:	200002f0 	.word	0x200002f0
 8001118:	40026010 	.word	0x40026010
 800111c:	20000350 	.word	0x20000350
 8001120:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_I2C_MspInit+0x30c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	f040 80aa 	bne.w	8001284 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001134:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fd17 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 800114c:	f7ff fe5e 	bl	8000e0c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <HAL_I2C_MspInit+0x310>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_I2C_MspInit+0x310>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <HAL_I2C_MspInit+0x310>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001182:	2304      	movs	r3, #4
 8001184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	4619      	mov	r1, r3
 800118e:	4841      	ldr	r0, [pc, #260]	; (8001294 <HAL_I2C_MspInit+0x314>)
 8001190:	f003 fcfa 	bl	8004b88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <HAL_I2C_MspInit+0x310>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <HAL_I2C_MspInit+0x310>)
 800119a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_I2C_MspInit+0x310>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011ae:	4a3b      	ldr	r2, [pc, #236]	; (800129c <HAL_I2C_MspInit+0x31c>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011b4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ce:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011ec:	482a      	ldr	r0, [pc, #168]	; (8001298 <HAL_I2C_MspInit+0x318>)
 80011ee:	f001 fec1 	bl	8002f74 <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80011f8:	f7ff fe08 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a26      	ldr	r2, [pc, #152]	; (8001298 <HAL_I2C_MspInit+0x318>)
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_I2C_MspInit+0x318>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 800120a:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <HAL_I2C_MspInit+0x324>)
 800120c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001210:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001214:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 800124a:	f001 fe93 	bl	8002f74 <HAL_DMA_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001254:	f7ff fdda 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 800125c:	639a      	str	r2, [r3, #56]	; 0x38
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_I2C_MspInit+0x320>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2021      	movs	r0, #33	; 0x21
 800126a:	f001 fd6e 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800126e:	2021      	movs	r0, #33	; 0x21
 8001270:	f001 fd87 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2022      	movs	r0, #34	; 0x22
 800127a:	f001 fd66 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800127e:	2022      	movs	r0, #34	; 0x22
 8001280:	f001 fd7f 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 8001284:	bf00      	nop
 8001286:	37b0      	adds	r7, #176	; 0xb0
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40005800 	.word	0x40005800
 8001290:	40023800 	.word	0x40023800
 8001294:	40020400 	.word	0x40020400
 8001298:	200003b0 	.word	0x200003b0
 800129c:	40026040 	.word	0x40026040
 80012a0:	20000410 	.word	0x20000410
 80012a4:	400260b8 	.word	0x400260b8

080012a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a56      	ldr	r2, [pc, #344]	; (8001420 <HAL_SPI_MspInit+0x178>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	f040 80ba 	bne.w	8001440 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012cc:	4b55      	ldr	r3, [pc, #340]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d6:	6453      	str	r3, [r2, #68]	; 0x44
 80012d8:	4b52      	ldr	r3, [pc, #328]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b49      	ldr	r3, [pc, #292]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a48      	ldr	r2, [pc, #288]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <HAL_SPI_MspInit+0x17c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001314:	2360      	movs	r3, #96	; 0x60
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001324:	2305      	movs	r3, #5
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	483e      	ldr	r0, [pc, #248]	; (8001428 <HAL_SPI_MspInit+0x180>)
 8001330:	f003 fc2a 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001334:	2320      	movs	r3, #32
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001344:	2305      	movs	r3, #5
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4837      	ldr	r0, [pc, #220]	; (800142c <HAL_SPI_MspInit+0x184>)
 8001350:	f003 fc1a 	bl	8004b88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001356:	4a37      	ldr	r2, [pc, #220]	; (8001434 <HAL_SPI_MspInit+0x18c>)
 8001358:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_SPI_MspInit+0x188>)
 800135c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001360:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_SPI_MspInit+0x188>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001374:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_SPI_MspInit+0x188>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_SPI_MspInit+0x188>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001394:	4826      	ldr	r0, [pc, #152]	; (8001430 <HAL_SPI_MspInit+0x188>)
 8001396:	f001 fded 	bl	8002f74 <HAL_DMA_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80013a0:	f7ff fd34 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_SPI_MspInit+0x188>)
 80013a8:	659a      	str	r2, [r3, #88]	; 0x58
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_SPI_MspInit+0x188>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013b2:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_SPI_MspInit+0x194>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <HAL_SPI_MspInit+0x190>)
 80013f2:	f001 fdbf 	bl	8002f74 <HAL_DMA_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80013fc:	f7ff fd06 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_SPI_MspInit+0x190>)
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_SPI_MspInit+0x190>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2023      	movs	r0, #35	; 0x23
 8001412:	f001 fc9a 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001416:	2023      	movs	r0, #35	; 0x23
 8001418:	f001 fcb3 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800141c:	e0bc      	b.n	8001598 <HAL_SPI_MspInit+0x2f0>
 800141e:	bf00      	nop
 8001420:	40013000 	.word	0x40013000
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	20000538 	.word	0x20000538
 8001434:	40026410 	.word	0x40026410
 8001438:	20000598 	.word	0x20000598
 800143c:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a56      	ldr	r2, [pc, #344]	; (80015a0 <HAL_SPI_MspInit+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	f040 80a6 	bne.w	8001598 <HAL_SPI_MspInit+0x2f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800144c:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a54      	ldr	r2, [pc, #336]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6313      	str	r3, [r2, #48]	; 0x30
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a48      	ldr	r2, [pc, #288]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_SPI_MspInit+0x2fc>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001494:	230c      	movs	r3, #12
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a4:	2305      	movs	r3, #5
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	483e      	ldr	r0, [pc, #248]	; (80015a8 <HAL_SPI_MspInit+0x300>)
 80014b0:	f003 fb6a 	bl	8004b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b4:	2308      	movs	r3, #8
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c4:	2305      	movs	r3, #5
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4837      	ldr	r0, [pc, #220]	; (80015ac <HAL_SPI_MspInit+0x304>)
 80014d0:	f003 fb5a 	bl	8004b88 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <HAL_SPI_MspInit+0x30c>)
 80014d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001512:	4827      	ldr	r0, [pc, #156]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 8001514:	f001 fd2e 	bl	8002f74 <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_SPI_MspInit+0x27a>
      Error_Handler();
 800151e:	f7ff fc75 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 8001526:	659a      	str	r2, [r3, #88]	; 0x58
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <HAL_SPI_MspInit+0x308>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001530:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_SPI_MspInit+0x314>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 800156e:	f001 fd01 	bl	8002f74 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_SPI_MspInit+0x2d4>
      Error_Handler();
 8001578:	f7ff fc48 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_SPI_MspInit+0x310>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2024      	movs	r0, #36	; 0x24
 800158e:	f001 fbdc 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001592:	2024      	movs	r0, #36	; 0x24
 8001594:	f001 fbf5 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	200005f8 	.word	0x200005f8
 80015b4:	40026058 	.word	0x40026058
 80015b8:	20000658 	.word	0x20000658
 80015bc:	40026070 	.word	0x40026070

080015c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d149      	bne.n	8001666 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_TIM_Base_MspInit+0xb0>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_TIM_Base_MspInit+0xb0>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_TIM_Base_MspInit+0xb0>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_TIM_Base_MspInit+0xb8>)
 80015ee:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 80015f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 800160e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001612:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800162e:	4811      	ldr	r0, [pc, #68]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001630:	f001 fca0 	bl	8002f74 <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800163a:	f7ff fbe7 	bl	8000e0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001642:	621a      	str	r2, [r3, #32]
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_TIM_Base_MspInit+0xb4>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	201c      	movs	r0, #28
 800165c:	f001 fb75 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001660:	201c      	movs	r0, #28
 8001662:	f001 fb8e 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	20000704 	.word	0x20000704
 8001678:	40026028 	.word	0x40026028

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0b0      	sub	sp, #192	; 0xc0
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001698:	2284      	movs	r2, #132	; 0x84
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f016 f889 	bl	80177b4 <memset>
  if(huart->Instance==UART4)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <HAL_UART_MspInit+0x230>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d145      	bne.n	8001738 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f006 fa5a 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016c6:	f7ff fba1 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016ca:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <HAL_UART_MspInit+0x234>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a78      	ldr	r2, [pc, #480]	; (80018b0 <HAL_UART_MspInit+0x234>)
 80016d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_UART_MspInit+0x234>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_UART_MspInit+0x234>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_UART_MspInit+0x234>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_UART_MspInit+0x234>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001714:	2308      	movs	r3, #8
 8001716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800171e:	4619      	mov	r1, r3
 8001720:	4864      	ldr	r0, [pc, #400]	; (80018b4 <HAL_UART_MspInit+0x238>)
 8001722:	f003 fa31 	bl	8004b88 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2034      	movs	r0, #52	; 0x34
 800172c:	f001 fb0d 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001730:	2034      	movs	r0, #52	; 0x34
 8001732:	f001 fb26 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001736:	e0b5      	b.n	80018a4 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==UART5)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a5e      	ldr	r2, [pc, #376]	; (80018b8 <HAL_UART_MspInit+0x23c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d166      	bne.n	8001810 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001750:	4618      	mov	r0, r3
 8001752:	f006 fa0f 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 800175c:	f7ff fb56 	bl	8000e0c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a4c      	ldr	r2, [pc, #304]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001790:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a46      	ldr	r2, [pc, #280]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017c2:	2308      	movs	r3, #8
 80017c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017cc:	4619      	mov	r1, r3
 80017ce:	4839      	ldr	r0, [pc, #228]	; (80018b4 <HAL_UART_MspInit+0x238>)
 80017d0:	f003 f9da 	bl	8004b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d4:	2304      	movs	r3, #4
 80017d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017ec:	2308      	movs	r3, #8
 80017ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017f6:	4619      	mov	r1, r3
 80017f8:	4830      	ldr	r0, [pc, #192]	; (80018bc <HAL_UART_MspInit+0x240>)
 80017fa:	f003 f9c5 	bl	8004b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2035      	movs	r0, #53	; 0x35
 8001804:	f001 faa1 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001808:	2035      	movs	r0, #53	; 0x35
 800180a:	f001 faba 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 800180e:	e049      	b.n	80018a4 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <HAL_UART_MspInit+0x244>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d144      	bne.n	80018a4 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800181a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001820:	2300      	movs	r3, #0
 8001822:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001828:	4618      	mov	r0, r3
 800182a:	f006 f9a3 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001834:	f7ff faea 	bl	8000e0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_UART_MspInit+0x234>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_UART_MspInit+0x234>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001882:	2307      	movs	r3, #7
 8001884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800188c:	4619      	mov	r1, r3
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <HAL_UART_MspInit+0x240>)
 8001890:	f003 f97a 	bl	8004b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2027      	movs	r0, #39	; 0x27
 800189a:	f001 fa56 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800189e:	2027      	movs	r0, #39	; 0x27
 80018a0:	f001 fa6f 	bl	8002d82 <HAL_NVIC_EnableIRQ>
}
 80018a4:	bf00      	nop
 80018a6:	37c0      	adds	r7, #192	; 0xc0
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40004c00 	.word	0x40004c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40005000 	.word	0x40005000
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40004800 	.word	0x40004800

080018c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0ac      	sub	sp, #176	; 0xb0
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	2284      	movs	r2, #132	; 0x84
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f015 ff65 	bl	80177b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f2:	d159      	bne.n	80019a8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f006 f935 	bl	8007b74 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001910:	f7ff fa7c 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800192c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001946:	230a      	movs	r3, #10
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001950:	4619      	mov	r1, r3
 8001952:	4818      	ldr	r0, [pc, #96]	; (80019b4 <HAL_PCD_MspInit+0xf0>)
 8001954:	f003 f918 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001970:	4619      	mov	r1, r3
 8001972:	4810      	ldr	r0, [pc, #64]	; (80019b4 <HAL_PCD_MspInit+0xf0>)
 8001974:	f003 f908 	bl	8004b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 800197a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 800197e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001982:	6353      	str	r3, [r2, #52]	; 0x34
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6453      	str	r3, [r2, #68]	; 0x44
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_PCD_MspInit+0xec>)
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	37b0      	adds	r7, #176	; 0xb0
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 fb5a 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Stream0_IRQHandler+0x10>)
 8001a12:	f001 fc4f 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002f0 	.word	0x200002f0

08001a20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <DMA1_Stream1_IRQHandler+0x10>)
 8001a26:	f001 fc45 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000704 	.word	0x20000704

08001a34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <DMA1_Stream2_IRQHandler+0x10>)
 8001a3a:	f001 fc3b 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200003b0 	.word	0x200003b0

08001a48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <DMA1_Stream3_IRQHandler+0x10>)
 8001a4e:	f001 fc31 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200005f8 	.word	0x200005f8

08001a5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <DMA1_Stream4_IRQHandler+0x10>)
 8001a62:	f001 fc27 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000658 	.word	0x20000658

08001a70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA1_Stream6_IRQHandler+0x10>)
 8001a76:	f001 fc1d 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000350 	.word	0x20000350

08001a84 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <ADC_IRQHandler+0x10>)
 8001a8a:	f000 fcf8 	bl	800247e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001ec 	.word	0x200001ec

08001a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <TIM2_IRQHandler+0x10>)
 8001a9e:	f007 fb0e 	bl	80090be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200006b8 	.word	0x200006b8

08001aac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <I2C1_EV_IRQHandler+0x10>)
 8001ab2:	f003 fe49 	bl	8005748 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000248 	.word	0x20000248

08001ac0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <I2C1_ER_IRQHandler+0x10>)
 8001ac6:	f003 fe59 	bl	800577c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000248 	.word	0x20000248

08001ad4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <I2C2_EV_IRQHandler+0x10>)
 8001ada:	f003 fe35 	bl	8005748 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000029c 	.word	0x2000029c

08001ae8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <I2C2_ER_IRQHandler+0x10>)
 8001aee:	f003 fe45 	bl	800577c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000029c 	.word	0x2000029c

08001afc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <SPI1_IRQHandler+0x10>)
 8001b02:	f006 fe5f 	bl	80087c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000470 	.word	0x20000470

08001b10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <SPI2_IRQHandler+0x10>)
 8001b16:	f006 fe55 	bl	80087c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200004d4 	.word	0x200004d4

08001b24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <USART3_IRQHandler+0x10>)
 8001b2a:	f008 f8f7 	bl	8009d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000874 	.word	0x20000874

08001b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001b3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b40:	f003 fa02 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <DMA1_Stream7_IRQHandler+0x10>)
 8001b4e:	f001 fbb1 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000410 	.word	0x20000410

08001b5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <UART4_IRQHandler+0x10>)
 8001b62:	f008 f8db 	bl	8009d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000764 	.word	0x20000764

08001b70 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <UART5_IRQHandler+0x10>)
 8001b76:	f008 f8d1 	bl	8009d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200007ec 	.word	0x200007ec

08001b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM6_DAC_IRQHandler+0x10>)
 8001b8a:	f001 f936 	bl	8002dfa <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000234 	.word	0x20000234

08001b98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <DMA2_Stream0_IRQHandler+0x10>)
 8001b9e:	f001 fb89 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000538 	.word	0x20000538

08001bac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA2_Stream3_IRQHandler+0x10>)
 8001bb2:	f001 fb7f 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000598 	.word	0x20000598

08001bc0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <ETH_IRQHandler+0x10>)
 8001bc6:	f002 f8f9 	bl	8003dbc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200057e4 	.word	0x200057e4

08001bd4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <ETH_WKUP_IRQHandler+0x10>)
 8001bda:	f002 f8ef 	bl	8003dbc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200057e4 	.word	0x200057e4

08001be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
	return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_kill>:

int _kill(int pid, int sig)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <_kill+0x20>)
 8001c04:	2216      	movs	r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
	return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	200090d0 	.word	0x200090d0

08001c1c <_exit>:

void _exit (int status)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe5 	bl	8001bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c2e:	e7fe      	b.n	8001c2e <_exit+0x12>

08001c30 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c58:	605a      	str	r2, [r3, #4]
	return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_isatty>:

int _isatty(int file)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
	return 0;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d205      	bcs.n	8001cd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <_sbrk+0x6c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20050000 	.word	0x20050000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	20000e04 	.word	0x20000e04
 8001d00:	200090e0 	.word	0x200090e0
 8001d04:	200090d0 	.word	0x200090d0

08001d08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd7 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f015 fce9 	bl	8017730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7fe fc31 	bl	80005c4 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d70:	0801b758 	.word	0x0801b758
  ldr r2, =_sbss
 8001d74:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001d78:	200090e0 	.word	0x200090e0

08001d7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <CAN1_RX0_IRQHandler>

08001d7e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <LAN8742_RegisterBusIO+0x28>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <LAN8742_RegisterBusIO+0x28>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <LAN8742_RegisterBusIO+0x28>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e014      	b.n	8001dd6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d17c      	bne.n	8001efc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e01c      	b.n	8001e56 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f107 0208 	add.w	r2, r7, #8
 8001e24:	2112      	movs	r1, #18
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	4798      	blx	r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da03      	bge.n	8001e38 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001e30:	f06f 0304 	mvn.w	r3, #4
 8001e34:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001e36:	e00b      	b.n	8001e50 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d105      	bne.n	8001e50 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
         break;
 8001e4e:	e005      	b.n	8001e5c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	d9df      	bls.n	8001e1c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b1f      	cmp	r3, #31
 8001e62:	d902      	bls.n	8001e6a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e64:	f06f 0302 	mvn.w	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d145      	bne.n	8001efc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6810      	ldr	r0, [r2, #0]
 8001e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4798      	blx	r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db37      	blt.n	8001ef6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6810      	ldr	r0, [r2, #0]
 8001e8e:	f107 0208 	add.w	r2, r7, #8
 8001e92:	2100      	movs	r1, #0
 8001e94:	4798      	blx	r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db28      	blt.n	8001eee <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4798      	blx	r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ea6:	e01c      	b.n	8001ee2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4798      	blx	r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eba:	d80e      	bhi.n	8001eda <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6810      	ldr	r0, [r2, #0]
 8001ec4:	f107 0208 	add.w	r2, r7, #8
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4798      	blx	r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da07      	bge.n	8001ee2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001ed2:	f06f 0304 	mvn.w	r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
                 break;
 8001ed8:	e010      	b.n	8001efc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001eda:	f06f 0301 	mvn.w	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
               break;
 8001ee0:	e00c      	b.n	8001efc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1dd      	bne.n	8001ea8 <LAN8742_Init+0xc6>
 8001eec:	e006      	b.n	8001efc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001eee:	f06f 0304 	mvn.w	r3, #4
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e002      	b.n	8001efc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001ef6:	f06f 0303 	mvn.w	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d112      	bne.n	8001f28 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4798      	blx	r3
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f0c:	bf00      	nop
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4798      	blx	r3
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f20:	d9f5      	bls.n	8001f0e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001f28:	693b      	ldr	r3, [r7, #16]
 }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6810      	ldr	r0, [r2, #0]
 8001f46:	f107 020c 	add.w	r2, r7, #12
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4798      	blx	r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	da02      	bge.n	8001f5a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f54:	f06f 0304 	mvn.w	r3, #4
 8001f58:	e06e      	b.n	8002038 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6810      	ldr	r0, [r2, #0]
 8001f62:	f107 020c 	add.w	r2, r7, #12
 8001f66:	2101      	movs	r1, #1
 8001f68:	4798      	blx	r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da02      	bge.n	8001f76 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f70:	f06f 0304 	mvn.w	r3, #4
 8001f74:	e060      	b.n	8002038 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001f80:	2301      	movs	r3, #1
 8001f82:	e059      	b.n	8002038 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6810      	ldr	r0, [r2, #0]
 8001f8c:	f107 020c 	add.w	r2, r7, #12
 8001f90:	2100      	movs	r1, #0
 8001f92:	4798      	blx	r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da02      	bge.n	8001fa0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f9a:	f06f 0304 	mvn.w	r3, #4
 8001f9e:	e04b      	b.n	8002038 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11b      	bne.n	8001fe2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <LAN8742_GetLinkState+0x90>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e03a      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e033      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e02c      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e02a      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6810      	ldr	r0, [r2, #0]
 8001fea:	f107 020c 	add.w	r2, r7, #12
 8001fee:	211f      	movs	r1, #31
 8001ff0:	4798      	blx	r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da02      	bge.n	8001ffe <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001ff8:	f06f 0304 	mvn.w	r3, #4
 8001ffc:	e01c      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002008:	2306      	movs	r3, #6
 800200a:	e015      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 031c 	and.w	r3, r3, #28
 8002012:	2b18      	cmp	r3, #24
 8002014:	d101      	bne.n	800201a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002016:	2302      	movs	r3, #2
 8002018:	e00e      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 031c 	and.w	r3, r3, #28
 8002020:	2b08      	cmp	r3, #8
 8002022:	d101      	bne.n	8002028 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002024:	2303      	movs	r3, #3
 8002026:	e007      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 031c 	and.w	r3, r3, #28
 800202e:	2b14      	cmp	r3, #20
 8002030:	d101      	bne.n	8002036 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002032:	2304      	movs	r3, #4
 8002034:	e000      	b.n	8002038 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002036:	2305      	movs	r3, #5
    }				
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 fe75 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f806 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7fe fee2 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fe8f 	bl	8002d9e <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 fe57 	bl	8002d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20000e08 	.word	0x20000e08

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000e08 	.word	0x20000e08

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e031      	b.n	80021be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fe7c 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_ADC_Init+0x84>)
 8002188:	4013      	ands	r3, r2
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fbfa 	bl	800298c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
 80021ae:	e001      	b.n	80021b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	ffffeefd 	.word	0xffffeefd

080021cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_Start+0x1a>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e0ad      	b.n	8002342 <HAL_ADC_Start+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d018      	beq.n	800222e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_ADC_Start+0x184>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_ADC_Start+0x188>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9a      	lsrs	r2, r3, #18
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002220:	e002      	b.n	8002228 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3b01      	subs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f9      	bne.n	8002222 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d175      	bne.n	8002328 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	4b45      	ldr	r3, [pc, #276]	; (8002358 <HAL_ADC_Start+0x18c>)
 8002242:	4013      	ands	r3, r2
 8002244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002276:	d106      	bne.n	8002286 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f023 0206 	bic.w	r2, r3, #6
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
 8002284:	e002      	b.n	800228c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800229c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_ADC_Start+0x190>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d143      	bne.n	8002340 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e03a      	b.n	8002340 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_ADC_Start+0x194>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d10e      	bne.n	80022f2 <HAL_ADC_Start+0x126>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022f0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_ADC_Start+0x190>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d120      	bne.n	8002340 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <HAL_ADC_Start+0x198>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d11b      	bne.n	8002340 <HAL_ADC_Start+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	e00b      	b.n	8002340 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000
 8002354:	431bde83 	.word	0x431bde83
 8002358:	fffff8fe 	.word	0xfffff8fe
 800235c:	40012300 	.word	0x40012300
 8002360:	40012000 	.word	0x40012000
 8002364:	40012200 	.word	0x40012200

08002368 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d113      	bne.n	80023ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	d10b      	bne.n	80023ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e063      	b.n	8002476 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023ae:	f7ff fe99 	bl	80020e4 <HAL_GetTick>
 80023b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023b4:	e021      	b.n	80023fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d01d      	beq.n	80023fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_ADC_PollForConversion+0x6c>
 80023c4:	f7ff fe8e 	bl	80020e4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d212      	bcs.n	80023fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d00b      	beq.n	80023fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e03d      	b.n	8002476 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b02      	cmp	r3, #2
 8002406:	d1d6      	bne.n	80023b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0212 	mvn.w	r2, #18
 8002410:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d123      	bne.n	8002474 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11f      	bne.n	8002474 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d049      	beq.n	8002548 <HAL_ADC_IRQHandler+0xca>
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d046      	beq.n	8002548 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d12b      	bne.n	8002538 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d127      	bne.n	8002538 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002500:	2b00      	cmp	r3, #0
 8002502:	d119      	bne.n	8002538 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0220 	bic.w	r2, r2, #32
 8002512:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f014 f8c3 	bl	80166c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0212 	mvn.w	r2, #18
 8002546:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d057      	beq.n	800260e <HAL_ADC_IRQHandler+0x190>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d054      	beq.n	800260e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d139      	bne.n	80025fe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d12b      	bne.n	80025fe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d124      	bne.n	80025fe <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11d      	bne.n	80025fe <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d119      	bne.n	80025fe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fabe 	bl	8002b80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 020c 	mvn.w	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d017      	beq.n	8002654 <HAL_ADC_IRQHandler+0x1d6>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d014      	beq.n	8002654 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10d      	bne.n	8002654 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f837 	bl	80026b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f06f 0201 	mvn.w	r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002662:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_ADC_IRQHandler+0x218>
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d012      	beq.n	8002696 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	f043 0202 	orr.w	r2, r3, #2
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0220 	mvn.w	r2, #32
 8002684:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f820 	bl	80026cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0220 	mvn.w	r2, #32
 8002694:	601a      	str	r2, [r3, #0]
  }
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e136      	b.n	800296a <HAL_ADC_ConfigChannel+0x28a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d93a      	bls.n	8002782 <HAL_ADC_ConfigChannel+0xa2>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002714:	d035      	beq.n	8002782 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68d9      	ldr	r1, [r3, #12]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	3b1e      	subs	r3, #30
 800272c:	2207      	movs	r2, #7
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a8d      	ldr	r2, [pc, #564]	; (8002978 <HAL_ADC_ConfigChannel+0x298>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10a      	bne.n	800275c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	061a      	lsls	r2, r3, #24
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275a:	e035      	b.n	80027c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68d9      	ldr	r1, [r3, #12]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	4603      	mov	r3, r0
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4403      	add	r3, r0
 8002774:	3b1e      	subs	r3, #30
 8002776:	409a      	lsls	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002780:	e022      	b.n	80027c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6919      	ldr	r1, [r3, #16]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	2207      	movs	r2, #7
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43da      	mvns	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	400a      	ands	r2, r1
 80027a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	4603      	mov	r3, r0
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4403      	add	r3, r0
 80027be:	409a      	lsls	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d824      	bhi.n	800281a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	221f      	movs	r2, #31
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43da      	mvns	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	400a      	ands	r2, r1
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	3b05      	subs	r3, #5
 800280c:	fa00 f203 	lsl.w	r2, r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	; 0x34
 8002818:	e04c      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d824      	bhi.n	800286c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b23      	subs	r3, #35	; 0x23
 8002834:	221f      	movs	r2, #31
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b23      	subs	r3, #35	; 0x23
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
 800286a:	e023      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b41      	subs	r3, #65	; 0x41
 800287e:	221f      	movs	r2, #31
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43da      	mvns	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	400a      	ands	r2, r1
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b41      	subs	r3, #65	; 0x41
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_ADC_ConfigChannel+0x29c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10a      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1f4>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028c6:	d105      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a28      	ldr	r2, [pc, #160]	; (800297c <HAL_ADC_ConfigChannel+0x29c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10f      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d10b      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 80028f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_ADC_ConfigChannel+0x29c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d12b      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x280>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <HAL_ADC_ConfigChannel+0x298>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <HAL_ADC_ConfigChannel+0x23a>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b11      	cmp	r3, #17
 8002918:	d122      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a18      	ldr	r2, [pc, #96]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 8002920:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002924:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_ADC_ConfigChannel+0x2a0>)
 800292c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002930:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_ADC_ConfigChannel+0x298>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_ADC_ConfigChannel+0x2a4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_ADC_ConfigChannel+0x2a8>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9a      	lsrs	r2, r3, #18
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002952:	e002      	b.n	800295a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3b01      	subs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	10000012 	.word	0x10000012
 800297c:	40012000 	.word	0x40012000
 8002980:	40012300 	.word	0x40012300
 8002984:	20000000 	.word	0x20000000
 8002988:	431bde83 	.word	0x431bde83

0800298c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002994:	4b78      	ldr	r3, [pc, #480]	; (8002b78 <ADC_Init+0x1ec>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a77      	ldr	r2, [pc, #476]	; (8002b78 <ADC_Init+0x1ec>)
 800299a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800299e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029a0:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <ADC_Init+0x1ec>)
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4973      	ldr	r1, [pc, #460]	; (8002b78 <ADC_Init+0x1ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <ADC_Init+0x1f0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e00f      	b.n	8002a86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0202 	bic.w	r2, r2, #2
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	005a      	lsls	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ad2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	035a      	lsls	r2, r3, #13
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e007      	b.n	8002afc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	051a      	lsls	r2, r3, #20
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3e:	025a      	lsls	r2, r3, #9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	029a      	lsls	r2, r3, #10
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40012300 	.word	0x40012300
 8002b7c:	0f000001 	.word	0x0f000001

08002b80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00
 8002bd8:	05fa0000 	.word	0x05fa0000

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff29 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5c:	f7ff ff3e 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff ff8e 	bl	8002c88 <NVIC_EncodePriority>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff31 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffa2 	bl	8002cf0 <SysTick_Config>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e014      	b.n	8002df2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	791b      	ldrb	r3, [r3, #4]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe f889 	bl	8000ef0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e10:	d120      	bne.n	8002e54 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e20:	d118      	bne.n	8002e54 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2204      	movs	r2, #4
 8002e26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f82d 	bl	8002eae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e62:	d120      	bne.n	8002ea6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e72:	d118      	bne.n	8002ea6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2204      	movs	r2, #4
 8002e78:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f85d 	bl	8002f60 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	795b      	ldrb	r3, [r3, #5]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_DAC_ConfigChannel+0x18>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e03c      	b.n	8002f54 <HAL_DAC_ConfigChannel+0x92>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4013      	ands	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	22c0      	movs	r2, #192	; 0xc0
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	400a      	ands	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff f8b0 	bl	80020e4 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e099      	b.n	80030c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb0:	e00f      	b.n	8002fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb2:	f7ff f897 	bl	80020e4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d908      	bls.n	8002fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e078      	b.n	80030c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e8      	bne.n	8002fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_DMA_Init+0x158>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b04      	cmp	r3, #4
 800302a:	d107      	bne.n	800303c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4313      	orrs	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2b04      	cmp	r3, #4
 8003064:	d117      	bne.n	8003096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fb23 	bl	80036c4 <DMA_CheckFifoParam>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003092:	2301      	movs	r3, #1
 8003094:	e016      	b.n	80030c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fada 	bl	8003658 <DMA_CalcBaseAndBitshift>
 80030a4:	4603      	mov	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	223f      	movs	r2, #63	; 0x3f
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	f010803f 	.word	0xf010803f

080030d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Start_IT+0x26>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e048      	b.n	8003188 <HAL_DMA_Start_IT+0xb8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d137      	bne.n	800317a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fa6c 	bl	80035fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	223f      	movs	r2, #63	; 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0216 	orr.w	r2, r2, #22
 800313e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800314e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e005      	b.n	8003186 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7fe ffa1 	bl	80020e4 <HAL_GetTick>
 80031a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d008      	beq.n	80031c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e052      	b.n	8003268 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0216 	bic.w	r2, r2, #22
 80031d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_DMA_Abort+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003212:	e013      	b.n	800323c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003214:	f7fe ff66 	bl	80020e4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b05      	cmp	r3, #5
 8003220:	d90c      	bls.n	800323c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e015      	b.n	8003268 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e4      	bne.n	8003214 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	223f      	movs	r2, #63	; 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00c      	b.n	80032a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2205      	movs	r2, #5
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80032c0:	4b8e      	ldr	r3, [pc, #568]	; (80034fc <HAL_DMA_IRQHandler+0x248>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a8e      	ldr	r2, [pc, #568]	; (8003500 <HAL_DMA_IRQHandler+0x24c>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	2208      	movs	r2, #8
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01a      	beq.n	8003320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2208      	movs	r2, #8
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2201      	movs	r2, #1
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	2201      	movs	r2, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2204      	movs	r2, #4
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	2204      	movs	r2, #4
 800337a:	409a      	lsls	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2210      	movs	r2, #16
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d043      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03c      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	2210      	movs	r2, #16
 80033b0:	409a      	lsls	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d024      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e01f      	b.n	8003424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e016      	b.n	8003424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0208 	bic.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2220      	movs	r2, #32
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 808f 	beq.w	8003554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8087 	beq.w	8003554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	2220      	movs	r2, #32
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b05      	cmp	r3, #5
 800345c:	d136      	bne.n	80034cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0216 	bic.w	r2, r2, #22
 800346c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800347c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_DMA_IRQHandler+0x1da>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0208 	bic.w	r2, r2, #8
 800349c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	223f      	movs	r2, #63	; 0x3f
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d07e      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
        }
        return;
 80034ca:	e079      	b.n	80035c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e02c      	b.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000
 8003500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e01e      	b.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0210 	bic.w	r2, r2, #16
 8003532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2b00      	cmp	r3, #0
 800355a:	d032      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	429a      	cmp	r2, r3
 800358a:	d307      	bcc.n	800359c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f2      	bne.n	8003580 <HAL_DMA_IRQHandler+0x2cc>
 800359a:	e000      	b.n	800359e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800359c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
 80035be:	e000      	b.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c0:	bf00      	nop
    }
  }
}
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d6:	b2db      	uxtb	r3, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d108      	bne.n	800363c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800363a:	e007      	b.n	800364c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3b10      	subs	r3, #16
 8003668:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <DMA_CalcBaseAndBitshift+0x60>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <DMA_CalcBaseAndBitshift+0x64>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d908      	bls.n	8003698 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <DMA_CalcBaseAndBitshift+0x68>)
 800368e:	4013      	ands	r3, r2
 8003690:	1d1a      	adds	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	; 0x58
 8003696:	e006      	b.n	80036a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <DMA_CalcBaseAndBitshift+0x68>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
 80036bc:	0801b508 	.word	0x0801b508
 80036c0:	fffffc00 	.word	0xfffffc00

080036c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d856      	bhi.n	8003792 <DMA_CheckFifoParam+0xce>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <DMA_CheckFifoParam+0x28>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	0800370f 	.word	0x0800370f
 80036f4:	080036fd 	.word	0x080036fd
 80036f8:	08003793 	.word	0x08003793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d046      	beq.n	8003796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370c:	e043      	b.n	8003796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003716:	d140      	bne.n	800379a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e03d      	b.n	800379a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003726:	d121      	bne.n	800376c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d837      	bhi.n	800379e <DMA_CheckFifoParam+0xda>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <DMA_CheckFifoParam+0x70>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003745 	.word	0x08003745
 8003738:	0800374b 	.word	0x0800374b
 800373c:	08003745 	.word	0x08003745
 8003740:	0800375d 	.word	0x0800375d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e030      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d025      	beq.n	80037a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375a:	e022      	b.n	80037a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003764:	d11f      	bne.n	80037a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800376a:	e01c      	b.n	80037a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d903      	bls.n	800377a <DMA_CheckFifoParam+0xb6>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d003      	beq.n	8003780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003778:	e018      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      break;
 800377e:	e015      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e00b      	b.n	80037aa <DMA_CheckFifoParam+0xe6>
      break;
 8003792:	bf00      	nop
 8003794:	e00a      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e008      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e006      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e004      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;   
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
    }
  } 
  
  return status; 
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e06a      	b.n	80038a4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2223      	movs	r2, #35	; 0x23
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f008 fb1d 	bl	800be20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_ETH_Init+0xf0>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a30      	ldr	r2, [pc, #192]	; (80038ac <HAL_ETH_Init+0xf0>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <HAL_ETH_Init+0xf0>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037fe:	4b2c      	ldr	r3, [pc, #176]	; (80038b0 <HAL_ETH_Init+0xf4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <HAL_ETH_Init+0xf4>)
 8003804:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003808:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_ETH_Init+0xf4>)
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4927      	ldr	r1, [pc, #156]	; (80038b0 <HAL_ETH_Init+0xf4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_ETH_Init+0xf4>)
 800381a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7fe fc56 	bl	80020e4 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800383a:	e011      	b.n	8003860 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800383c:	f7fe fc52 	bl	80020e4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800384a:	d909      	bls.n	8003860 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2204      	movs	r2, #4
 8003850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	22e0      	movs	r2, #224	; 0xe0
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e021      	b.n	80038a4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e4      	bne.n	800383c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fee4 	bl	8004640 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 ff8b 	bl	8004794 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 ffe1 	bl	8004846 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	461a      	mov	r2, r3
 800388a:	2100      	movs	r1, #0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 ff49 	bl	8004724 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2210      	movs	r2, #16
 800389e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40013800 	.word	0x40013800

080038b4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d150      	bne.n	8003968 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2223      	movs	r2, #35	; 0x23
 80038ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2204      	movs	r2, #4
 80038d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f9fd 	bl	8003cd4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0208 	orr.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7fe fc02 	bl	80020fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0204 	orr.w	r2, r2, #4
 800390e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003918:	2001      	movs	r0, #1
 800391a:	f7fe fbef 	bl	80020fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fd2a 	bl	8004380 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800393e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003942:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800395a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2223      	movs	r2, #35	; 0x23
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003980:	2b23      	cmp	r3, #35	; 0x23
 8003982:	d14a      	bne.n	8003a1a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2223      	movs	r2, #35	; 0x23
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039a2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	f023 0302 	bic.w	r3, r3, #2
 80039b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039ba:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0204 	bic.w	r2, r2, #4
 80039ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f7fe fb91 	bl	80020fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fccc 	bl	8004380 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0208 	bic.w	r2, r2, #8
 80039f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a00:	2001      	movs	r0, #1
 8003a02:	f7fe fb7b 	bl	80020fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2210      	movs	r2, #16
 8003a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07c      	b.n	8003b44 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	2b23      	cmp	r3, #35	; 0x23
 8003a52:	d176      	bne.n	8003b42 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003a54:	2200      	movs	r2, #0
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 ff61 	bl	8004920 <ETH_Prepare_Tx_Descriptors>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e065      	b.n	8003b44 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a78:	f3bf 8f4f 	dsb	sy
}
 8003a7c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3206      	adds	r2, #6
 8003a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d904      	bls.n	8003aa8 <HAL_ETH_Transmit+0x84>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	1f1a      	subs	r2, r3, #4
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3106      	adds	r1, #6
 8003ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003abc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003abe:	f7fe fb11 	bl	80020e4 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ac4:	e037      	b.n	8003b36 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d011      	beq.n	8003afc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f043 0208 	orr.w	r2, r3, #8
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e023      	b.n	8003b44 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d018      	beq.n	8003b36 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fe faee 	bl	80020e4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <HAL_ETH_Transmit+0xf6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003b30:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e006      	b.n	8003b44 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	dbc3      	blt.n	8003ac6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0a8      	b.n	8003cca <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	2b23      	cmp	r3, #35	; 0x23
 8003b80:	d001      	beq.n	8003b86 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0a1      	b.n	8003cca <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	3212      	adds	r2, #18
 8003b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9c:	f1c3 0304 	rsb	r3, r3, #4
 8003ba0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003ba2:	e06a      	b.n	8003c7a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <HAL_ETH_ReadData+0x88>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d040      	beq.n	8003c56 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c08:	3b04      	subs	r3, #4
 8003c0a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c30:	461a      	mov	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f008 fac5 	bl	800c1c4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2200      	movs	r2, #0
 8003c54:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d902      	bls.n	8003c68 <HAL_ETH_ReadData+0x11c>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3b04      	subs	r3, #4
 8003c66:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	3212      	adds	r2, #18
 8003c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db06      	blt.n	8003c90 <HAL_ETH_ReadData+0x144>
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d202      	bcs.n	8003c90 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d089      	beq.n	8003ba4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	441a      	add	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f815 	bl	8003cd4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	3212      	adds	r2, #18
 8003cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003cfc:	e040      	b.n	8003d80 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d112      	bne.n	8003d2c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003d06:	f107 030c 	add.w	r3, r7, #12
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f008 fa2a 	bl	800c164 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	74fb      	strb	r3, [r7, #19]
 8003d1a:	e007      	b.n	8003d2c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	461a      	mov	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d026      	beq.n	8003d80 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <ETH_UpdateDescriptor+0xe4>)
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	e003      	b.n	8003d4a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003d48:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003d4a:	f3bf 8f5f 	dmb	sy
}
 8003d4e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d902      	bls.n	8003d6e <ETH_UpdateDescriptor+0x9a>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	3212      	adds	r2, #18
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	617b      	str	r3, [r7, #20]
      desccount--;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <ETH_UpdateDescriptor+0xb8>
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1b8      	bne.n	8003cfe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d00c      	beq.n	8003db0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003db0:	bf00      	nop
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	800045f8 	.word	0x800045f8

08003dbc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d112      	bne.n	8003dfc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d109      	bne.n	8003dfc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_ETH_IRQHandler+0x178>)
 8003df4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8ac 	bl	8003f54 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d113      	bne.n	8003e36 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10a      	bne.n	8003e36 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003e2e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f885 	bl	8003f40 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	d14c      	bne.n	8003ee4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	d142      	bne.n	8003ee4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f043 0208 	orr.w	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e80:	d11a      	bne.n	8003eb8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_ETH_IRQHandler+0x17c>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003ea8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eac:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	22e0      	movs	r2, #224	; 0xe0
 8003eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003eb6:	e012      	b.n	8003ede <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	f248 6380 	movw	r3, #34432	; 0x8680
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f248 6380 	movw	r3, #34432	; 0x8680
 8003edc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f842 	bl	8003f68 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d10e      	bne.n	8003f10 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f83a 	bl	8003f7c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_ETH_IRQHandler+0x180>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d006      	beq.n	8003f2a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_ETH_IRQHandler+0x180>)
 8003f1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f22:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f833 	bl	8003f90 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	00010040 	.word	0x00010040
 8003f38:	007e2000 	.word	0x007e2000
 8003f3c:	40013c00 	.word	0x40013c00

08003f40 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 031c 	and.w	r3, r3, #28
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	02db      	lsls	r3, r3, #11
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0302 	bic.w	r3, r3, #2
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003ff4:	f7fe f876 	bl	80020e4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ffa:	e00d      	b.n	8004018 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003ffc:	f7fe f872 	bl	80020e4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400a:	d301      	bcc.n	8004010 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e010      	b.n	8004032 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ec      	bne.n	8003ffc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 031c 	and.w	r3, r3, #28
 8004056:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	02db      	lsls	r3, r3, #11
 800405c:	b29b      	uxth	r3, r3
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	019b      	lsls	r3, r3, #6
 8004068:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f043 0302 	orr.w	r3, r3, #2
 8004078:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004094:	f7fe f826 	bl	80020e4 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800409a:	e00d      	b.n	80040b8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800409c:	f7fe f822 	bl	80020e4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040aa:	d301      	bcc.n	80040b0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e009      	b.n	80040c4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ec      	bne.n	800409c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0d9      	b.n	8004294 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b29a      	uxth	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e00b      	b.n	80042cc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d105      	bne.n	80042ca <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80042be:	6839      	ldr	r1, [r7, #0]
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f883 	bl	80043cc <ETH_SetMACConfig>

    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 031c 	bic.w	r3, r3, #28
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042ec:	f003 fc0e 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 80042f0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_ETH_SetMDIOClockRange+0x98>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d908      	bls.n	800430c <HAL_ETH_SetMDIOClockRange+0x38>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d804      	bhi.n	800430c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f043 0308 	orr.w	r3, r3, #8
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e027      	b.n	800435c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d908      	bls.n	8004326 <HAL_ETH_SetMDIOClockRange+0x52>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a17      	ldr	r2, [pc, #92]	; (8004374 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d204      	bcs.n	8004326 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f043 030c 	orr.w	r3, r3, #12
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e01a      	b.n	800435c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d303      	bcc.n	8004336 <HAL_ETH_SetMDIOClockRange+0x62>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d911      	bls.n	800435a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4a0f      	ldr	r2, [pc, #60]	; (8004378 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d908      	bls.n	8004350 <HAL_ETH_SetMDIOClockRange+0x7c>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a0e      	ldr	r2, [pc, #56]	; (800437c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d804      	bhi.n	8004350 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e005      	b.n	800435c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f043 0310 	orr.w	r3, r3, #16
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e000      	b.n	800435c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800435a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	611a      	str	r2, [r3, #16]
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	01312cff 	.word	0x01312cff
 8004370:	02160ebf 	.word	0x02160ebf
 8004374:	03938700 	.word	0x03938700
 8004378:	05f5e0ff 	.word	0x05f5e0ff
 800437c:	08f0d17f 	.word	0x08f0d17f

08004380 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043a2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043b0:	2001      	movs	r0, #1
 80043b2:	f7fd fea3 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043c0:	6193      	str	r3, [r2, #24]
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4b51      	ldr	r3, [pc, #324]	; (8004528 <ETH_SetMACConfig+0x15c>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	7c1b      	ldrb	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <ETH_SetMACConfig+0x28>
 80043ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043f2:	e000      	b.n	80043f6 <ETH_SetMACConfig+0x2a>
 80043f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	7c5b      	ldrb	r3, [r3, #17]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <ETH_SetMACConfig+0x38>
 80043fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004402:	e000      	b.n	8004406 <ETH_SetMACConfig+0x3a>
 8004404:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004406:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800440c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	7fdb      	ldrb	r3, [r3, #31]
 8004412:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004414:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800441a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	7f92      	ldrb	r2, [r2, #30]
 8004420:	2a00      	cmp	r2, #0
 8004422:	d102      	bne.n	800442a <ETH_SetMACConfig+0x5e>
 8004424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004428:	e000      	b.n	800442c <ETH_SetMACConfig+0x60>
 800442a:	2200      	movs	r2, #0
                        macconf->Speed |
 800442c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	7f1b      	ldrb	r3, [r3, #28]
 8004432:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004434:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800443a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	791b      	ldrb	r3, [r3, #4]
 8004440:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004442:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	f892 2020 	ldrb.w	r2, [r2, #32]
 800444a:	2a00      	cmp	r2, #0
 800444c:	d102      	bne.n	8004454 <ETH_SetMACConfig+0x88>
 800444e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004452:	e000      	b.n	8004456 <ETH_SetMACConfig+0x8a>
 8004454:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004456:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	7bdb      	ldrb	r3, [r3, #15]
 800445c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800445e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004464:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800446e:	4313      	orrs	r3, r2
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004486:	2001      	movs	r0, #1
 8004488:	f7fd fe38 	bl	80020fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d101      	bne.n	80044ba <ETH_SetMACConfig+0xee>
 80044b6:	2280      	movs	r2, #128	; 0x80
 80044b8:	e000      	b.n	80044bc <ETH_SetMACConfig+0xf0>
 80044ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80044bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80044c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80044ca:	2a01      	cmp	r2, #1
 80044cc:	d101      	bne.n	80044d2 <ETH_SetMACConfig+0x106>
 80044ce:	2208      	movs	r2, #8
 80044d0:	e000      	b.n	80044d4 <ETH_SetMACConfig+0x108>
 80044d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80044d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80044dc:	2a01      	cmp	r2, #1
 80044de:	d101      	bne.n	80044e4 <ETH_SetMACConfig+0x118>
 80044e0:	2204      	movs	r2, #4
 80044e2:	e000      	b.n	80044e6 <ETH_SetMACConfig+0x11a>
 80044e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80044e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80044ee:	2a01      	cmp	r2, #1
 80044f0:	d101      	bne.n	80044f6 <ETH_SetMACConfig+0x12a>
 80044f2:	2202      	movs	r2, #2
 80044f4:	e000      	b.n	80044f8 <ETH_SetMACConfig+0x12c>
 80044f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80044f8:	4313      	orrs	r3, r2
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004510:	2001      	movs	r0, #1
 8004512:	f7fd fdf3 	bl	80020fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	619a      	str	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	ff20810f 	.word	0xff20810f

0800452c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4b3d      	ldr	r3, [pc, #244]	; (800463c <ETH_SetDMAConfig+0x110>)
 8004546:	4013      	ands	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	7b1b      	ldrb	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <ETH_SetDMAConfig+0x2c>
 8004552:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004556:	e000      	b.n	800455a <ETH_SetDMAConfig+0x2e>
 8004558:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	7b5b      	ldrb	r3, [r3, #13]
 800455e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004560:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	7f52      	ldrb	r2, [r2, #29]
 8004566:	2a00      	cmp	r2, #0
 8004568:	d102      	bne.n	8004570 <ETH_SetDMAConfig+0x44>
 800456a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800456e:	e000      	b.n	8004572 <ETH_SetDMAConfig+0x46>
 8004570:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004572:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	7b9b      	ldrb	r3, [r3, #14]
 8004578:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800457a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004580:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	7f1b      	ldrb	r3, [r3, #28]
 8004586:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004588:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	7f9b      	ldrb	r3, [r3, #30]
 800458e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004590:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004596:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800459e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80045a0:	4313      	orrs	r3, r2
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7fd fd9a 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d0:	461a      	mov	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	791b      	ldrb	r3, [r3, #4]
 80045da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80045e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80045e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80045ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80045f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80045fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004604:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800460e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004612:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004620:	2001      	movs	r0, #1
 8004622:	f7fd fd6b 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	f8de3f23 	.word	0xf8de3f23

08004640 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b0a6      	sub	sp, #152	; 0x98
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004654:	2300      	movs	r3, #0
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800467c:	2300      	movs	r3, #0
 800467e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004686:	2300      	movs	r3, #0
 8004688:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004696:	2300      	movs	r3, #0
 8004698:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800469c:	2300      	movs	r3, #0
 800469e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80046a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fe86 	bl	80043cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004700:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004708:	2300      	movs	r3, #0
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800470c:	2300      	movs	r3, #0
 800470e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ff08 	bl	800452c <ETH_SetDMAConfig>
}
 800471c:	bf00      	nop
 800471e:	3798      	adds	r7, #152	; 0x98
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3305      	adds	r3, #5
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	3204      	adds	r2, #4
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <ETH_MACAddressConfig+0x68>)
 8004746:	4413      	add	r3, r2
 8004748:	461a      	mov	r2, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3303      	adds	r3, #3
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	061a      	lsls	r2, r3, #24
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3302      	adds	r3, #2
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3301      	adds	r3, #1
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	4313      	orrs	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <ETH_MACAddressConfig+0x6c>)
 8004776:	4413      	add	r3, r2
 8004778:	461a      	mov	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6013      	str	r3, [r2, #0]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40028040 	.word	0x40028040
 8004790:	40028044 	.word	0x40028044

08004794 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e03e      	b.n	8004820 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2200      	movs	r2, #0
 80047ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	3206      	adds	r2, #6
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d80c      	bhi.n	8004804 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68d9      	ldr	r1, [r3, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	440b      	add	r3, r1
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e004      	b.n	800480e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d9bd      	bls.n	80047a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004838:	611a      	str	r2, [r3, #16]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e046      	b.n	80048e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6919      	ldr	r1, [r3, #16]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2200      	movs	r2, #0
 8004882:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2200      	movs	r2, #0
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004890:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004898:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	3212      	adds	r2, #18
 80048ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d80c      	bhi.n	80048d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6919      	ldr	r1, [r3, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	461a      	mov	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e004      	b.n	80048dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d9b5      	bls.n	8004854 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	60da      	str	r2, [r3, #12]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004920:	b480      	push	{r7}
 8004922:	b08d      	sub	sp, #52	; 0x34
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3318      	adds	r3, #24
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800495e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004962:	d007      	beq.n	8004974 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	3304      	adds	r3, #4
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004974:	2302      	movs	r3, #2
 8004976:	e0ff      	b.n	8004b78 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	3301      	adds	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	4b7d      	ldr	r3, [pc, #500]	; (8004b84 <ETH_Prepare_Tx_Descriptors+0x264>)
 800498e:	4013      	ands	r3, r2
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	6852      	ldr	r2, [r2, #4]
 8004994:	431a      	orrs	r2, r3
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80049fa:	f3bf 8f5f 	dmb	sy
}
 80049fe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004a0c:	e082      	b.n	8004b14 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d006      	beq.n	8004a2e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e005      	b.n	8004a3a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d902      	bls.n	8004a4c <ETH_Prepare_Tx_Descriptors+0x12c>
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	3b04      	subs	r3, #4
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a6e:	d007      	beq.n	8004a80 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	3304      	adds	r3, #4
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d029      	beq.n	8004ad4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a92:	e019      	b.n	8004ac8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004a94:	f3bf 8f5f 	dmb	sy
}
 8004a98:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d902      	bls.n	8004ab8 <ETH_Prepare_Tx_Descriptors+0x198>
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3e1      	bcc.n	8004a94 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e051      	b.n	8004b78 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	6852      	ldr	r2, [r2, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004b02:	f3bf 8f5f 	dmb	sy
}
 8004b06:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f af78 	bne.w	8004a0e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e005      	b.n	8004b3e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	3304      	adds	r3, #4
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b60:	b672      	cpsid	i
}
 8004b62:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004b72:	b662      	cpsie	i
}
 8004b74:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3734      	adds	r7, #52	; 0x34
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	ffffe000 	.word	0xffffe000

08004b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e175      	b.n	8004e94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ba8:	2201      	movs	r2, #1
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	f040 8164 	bne.w	8004e8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d005      	beq.n	8004bde <HAL_GPIO_Init+0x56>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d130      	bne.n	8004c40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c14:	2201      	movs	r2, #1
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 0201 	and.w	r2, r3, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d017      	beq.n	8004c7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d123      	bne.n	8004cd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	08da      	lsrs	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3208      	adds	r2, #8
 8004c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	220f      	movs	r2, #15
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	2203      	movs	r2, #3
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0203 	and.w	r2, r3, #3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80be 	beq.w	8004e8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d12:	4b66      	ldr	r3, [pc, #408]	; (8004eac <HAL_GPIO_Init+0x324>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	4a65      	ldr	r2, [pc, #404]	; (8004eac <HAL_GPIO_Init+0x324>)
 8004d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d1e:	4b63      	ldr	r3, [pc, #396]	; (8004eac <HAL_GPIO_Init+0x324>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d2a:	4a61      	ldr	r2, [pc, #388]	; (8004eb0 <HAL_GPIO_Init+0x328>)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	220f      	movs	r2, #15
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_GPIO_Init+0x32c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d037      	beq.n	8004dc6 <HAL_GPIO_Init+0x23e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_GPIO_Init+0x330>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d031      	beq.n	8004dc2 <HAL_GPIO_Init+0x23a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a56      	ldr	r2, [pc, #344]	; (8004ebc <HAL_GPIO_Init+0x334>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <HAL_GPIO_Init+0x236>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a55      	ldr	r2, [pc, #340]	; (8004ec0 <HAL_GPIO_Init+0x338>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d025      	beq.n	8004dba <HAL_GPIO_Init+0x232>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a54      	ldr	r2, [pc, #336]	; (8004ec4 <HAL_GPIO_Init+0x33c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01f      	beq.n	8004db6 <HAL_GPIO_Init+0x22e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a53      	ldr	r2, [pc, #332]	; (8004ec8 <HAL_GPIO_Init+0x340>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d019      	beq.n	8004db2 <HAL_GPIO_Init+0x22a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a52      	ldr	r2, [pc, #328]	; (8004ecc <HAL_GPIO_Init+0x344>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_GPIO_Init+0x226>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <HAL_GPIO_Init+0x348>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00d      	beq.n	8004daa <HAL_GPIO_Init+0x222>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a50      	ldr	r2, [pc, #320]	; (8004ed4 <HAL_GPIO_Init+0x34c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <HAL_GPIO_Init+0x21e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a4f      	ldr	r2, [pc, #316]	; (8004ed8 <HAL_GPIO_Init+0x350>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <HAL_GPIO_Init+0x21a>
 8004d9e:	2309      	movs	r3, #9
 8004da0:	e012      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004da2:	230a      	movs	r3, #10
 8004da4:	e010      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004da6:	2308      	movs	r3, #8
 8004da8:	e00e      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004daa:	2307      	movs	r3, #7
 8004dac:	e00c      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004dae:	2306      	movs	r3, #6
 8004db0:	e00a      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004db2:	2305      	movs	r3, #5
 8004db4:	e008      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004db6:	2304      	movs	r3, #4
 8004db8:	e006      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e004      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e002      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_GPIO_Init+0x240>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	f002 0203 	and.w	r2, r2, #3
 8004dce:	0092      	lsls	r2, r2, #2
 8004dd0:	4093      	lsls	r3, r2
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004dd8:	4935      	ldr	r1, [pc, #212]	; (8004eb0 <HAL_GPIO_Init+0x328>)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	3302      	adds	r3, #2
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004de6:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e0a:	4a34      	ldr	r2, [pc, #208]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e10:	4b32      	ldr	r3, [pc, #200]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e34:	4a29      	ldr	r2, [pc, #164]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e3a:	4b28      	ldr	r3, [pc, #160]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e5e:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e64:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e88:	4a14      	ldr	r2, [pc, #80]	; (8004edc <HAL_GPIO_Init+0x354>)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3301      	adds	r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	f67f ae86 	bls.w	8004ba8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40013800 	.word	0x40013800
 8004eb4:	40020000 	.word	0x40020000
 8004eb8:	40020400 	.word	0x40020400
 8004ebc:	40020800 	.word	0x40020800
 8004ec0:	40020c00 	.word	0x40020c00
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40021400 	.word	0x40021400
 8004ecc:	40021800 	.word	0x40021800
 8004ed0:	40021c00 	.word	0x40021c00
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	40022400 	.word	0x40022400
 8004edc:	40013c00 	.word	0x40013c00

08004ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
 8004eec:	4613      	mov	r3, r2
 8004eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef0:	787b      	ldrb	r3, [r7, #1]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004efc:	e003      	b.n	8004f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004efe:	887b      	ldrh	r3, [r7, #2]
 8004f00:	041a      	lsls	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	619a      	str	r2, [r3, #24]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f24:	887a      	ldrh	r2, [r7, #2]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	041a      	lsls	r2, r3, #16
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	43d9      	mvns	r1, r3
 8004f30:	887b      	ldrh	r3, [r7, #2]
 8004f32:	400b      	ands	r3, r1
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	619a      	str	r2, [r3, #24]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f806 	bl	8004f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40013c00 	.word	0x40013c00

08004f78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07f      	b.n	80050a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb ffe2 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	; 0x24
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fe0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ff0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d107      	bne.n	800500a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	e006      	b.n	8005018 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005016:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d104      	bne.n	800502a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_I2C_Init+0x11c>)
 8005036:	430b      	orrs	r3, r1
 8005038:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005048:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	02008000 	.word	0x02008000

080050b0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	461a      	mov	r2, r3
 80050bc:	460b      	mov	r3, r1
 80050be:	817b      	strh	r3, [r7, #10]
 80050c0:	4613      	mov	r3, r2
 80050c2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	f040 80cd 	bne.w	800526c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	e0c3      	b.n	800526e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2C_Master_Transmit_DMA+0x44>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0bc      	b.n	800526e <HAL_I2C_Master_Transmit_DMA+0x1be>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2221      	movs	r2, #33	; 0x21
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2210      	movs	r2, #16
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	893a      	ldrh	r2, [r7, #8]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a55      	ldr	r2, [pc, #340]	; (8005278 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a55      	ldr	r2, [pc, #340]	; (800527c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8005128:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	2bff      	cmp	r3, #255	; 0xff
 8005132:	d906      	bls.n	8005142 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800513a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e007      	b.n	8005152 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800514c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005150:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d070      	beq.n	800523c <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	4a46      	ldr	r2, [pc, #280]	; (8005280 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	4a45      	ldr	r2, [pc, #276]	; (8005284 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	2200      	movs	r2, #0
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	2200      	movs	r2, #0
 8005180:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3328      	adds	r3, #40	; 0x28
 800518e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005194:	f7fd ff9c 	bl	80030d0 <HAL_DMA_Start_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d138      	bne.n	8005214 <HAL_I2C_Master_Transmit_DMA+0x164>
 80051a2:	e013      	b.n	80051cc <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e050      	b.n	800526e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	8979      	ldrh	r1, [r7, #10]
 80051d4:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f001 fd16 	bl	8006c0c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80051fa:	2110      	movs	r1, #16
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 fd37 	bl	8006c70 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	e029      	b.n	8005268 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f043 0210 	orr.w	r2, r3, #16
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e018      	b.n	800526e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a13      	ldr	r2, [pc, #76]	; (800528c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	b2da      	uxtb	r2, r3
 8005248:	8979      	ldrh	r1, [r7, #10]
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 fcda 	bl	8006c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005260:	2101      	movs	r1, #1
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f001 fd04 	bl	8006c70 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	ffff0000 	.word	0xffff0000
 800527c:	08005d3d 	.word	0x08005d3d
 8005280:	080069ab 	.word	0x080069ab
 8005284:	08006b5d 	.word	0x08006b5d
 8005288:	80002000 	.word	0x80002000
 800528c:	080058e7 	.word	0x080058e7

08005290 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	461a      	mov	r2, r3
 800529c:	460b      	mov	r3, r1
 800529e:	817b      	strh	r3, [r7, #10]
 80052a0:	4613      	mov	r3, r2
 80052a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	f040 80cd 	bne.w	800544c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c0:	d101      	bne.n	80052c6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0c3      	b.n	800544e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_I2C_Master_Receive_DMA+0x44>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0bc      	b.n	800544e <HAL_I2C_Master_Receive_DMA+0x1be>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2222      	movs	r2, #34	; 0x22
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2210      	movs	r2, #16
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	893a      	ldrh	r2, [r7, #8]
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a55      	ldr	r2, [pc, #340]	; (8005458 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a55      	ldr	r2, [pc, #340]	; (800545c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005308:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2bff      	cmp	r3, #255	; 0xff
 8005312:	d906      	bls.n	8005322 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	22ff      	movs	r2, #255	; 0xff
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800531a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e007      	b.n	8005332 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800532c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005330:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d070      	beq.n	800541c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	4a46      	ldr	r2, [pc, #280]	; (8005460 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005348:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	4a45      	ldr	r2, [pc, #276]	; (8005464 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005350:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	2200      	movs	r2, #0
 8005360:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3324      	adds	r3, #36	; 0x24
 800536c:	4619      	mov	r1, r3
 800536e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005374:	f7fd feac 	bl	80030d0 <HAL_DMA_Start_IT>
 8005378:	4603      	mov	r3, r0
 800537a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d138      	bne.n	80053f4 <HAL_I2C_Master_Receive_DMA+0x164>
 8005382:	e013      	b.n	80053ac <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e050      	b.n	800544e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	8979      	ldrh	r1, [r7, #10]
 80053b4:	4b2c      	ldr	r3, [pc, #176]	; (8005468 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f001 fc26 	bl	8006c0c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80053da:	2110      	movs	r1, #16
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f001 fc47 	bl	8006c70 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e029      	b.n	8005448 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f043 0210 	orr.w	r2, r3, #16
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e018      	b.n	800544e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005420:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	b2da      	uxtb	r2, r3
 8005428:	8979      	ldrh	r1, [r7, #10]
 800542a:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f001 fbea 	bl	8006c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005440:	2101      	movs	r1, #1
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f001 fc14 	bl	8006c70 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e000      	b.n	800544e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	ffff0000 	.word	0xffff0000
 800545c:	08005d3d 	.word	0x08005d3d
 8005460:	08006a81 	.word	0x08006a81
 8005464:	08006b5d 	.word	0x08006b5d
 8005468:	80002400 	.word	0x80002400
 800546c:	080058e7 	.word	0x080058e7

08005470 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b20      	cmp	r3, #32
 8005488:	f040 809b 	bne.w	80055c2 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e08f      	b.n	80055c4 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_I2C_Slave_Transmit_DMA+0x42>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e088      	b.n	80055c4 <HAL_I2C_Slave_Transmit_DMA+0x154>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2221      	movs	r2, #33	; 0x21
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a38      	ldr	r2, [pc, #224]	; (80055cc <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 80054f0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d020      	beq.n	800553c <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8005500:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8005508:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	2200      	movs	r2, #0
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	2200      	movs	r2, #0
 8005518:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3328      	adds	r3, #40	; 0x28
 8005526:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800552c:	f7fd fdd0 	bl	80030d0 <HAL_DMA_Start_IT>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d12f      	bne.n	800559a <HAL_I2C_Slave_Transmit_DMA+0x12a>
 800553a:	e013      	b.n	8005564 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2228      	movs	r2, #40	; 0x28
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e02f      	b.n	80055c4 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005572:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800557c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f001 fb75 	bl	8006c70 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005594:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e014      	b.n	80055c4 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2228      	movs	r2, #40	; 0x28
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	f043 0210 	orr.w	r2, r3, #16
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	ffff0000 	.word	0xffff0000
 80055d0:	08005f23 	.word	0x08005f23
 80055d4:	08006a41 	.word	0x08006a41
 80055d8:	08006b5d 	.word	0x08006b5d

080055dc <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	f040 809b 	bne.w	800572e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_I2C_Slave_Receive_DMA+0x28>
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e08f      	b.n	8005730 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_I2C_Slave_Receive_DMA+0x42>
 800561a:	2302      	movs	r3, #2
 800561c:	e088      	b.n	8005730 <HAL_I2C_Slave_Receive_DMA+0x154>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2222      	movs	r2, #34	; 0x22
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a38      	ldr	r2, [pc, #224]	; (8005738 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a38      	ldr	r2, [pc, #224]	; (800573c <HAL_I2C_Slave_Receive_DMA+0x160>)
 800565c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d020      	beq.n	80056a8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	4a35      	ldr	r2, [pc, #212]	; (8005740 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	4a34      	ldr	r2, [pc, #208]	; (8005744 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005674:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	2200      	movs	r2, #0
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	2200      	movs	r2, #0
 8005684:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3324      	adds	r3, #36	; 0x24
 8005690:	4619      	mov	r1, r3
 8005692:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005698:	f7fd fd1a 	bl	80030d0 <HAL_DMA_Start_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d12f      	bne.n	8005706 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80056a6:	e013      	b.n	80056d0 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2228      	movs	r2, #40	; 0x28
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e02f      	b.n	8005730 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056de:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f001 fabf 	bl	8006c70 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005700:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e014      	b.n	8005730 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2228      	movs	r2, #40	; 0x28
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571a:	f043 0210 	orr.w	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
  }
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	ffff0000 	.word	0xffff0000
 800573c:	08005f23 	.word	0x08005f23
 8005740:	08006b17 	.word	0x08006b17
 8005744:	08006b5d 	.word	0x08006b5d

08005748 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
  }
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	09db      	lsrs	r3, r3, #7
 80057a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	0a9b      	lsrs	r3, r3, #10
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d010      	beq.n	80057f0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	09db      	lsrs	r3, r3, #7
 80057d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f043 0208 	orr.w	r2, r3, #8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	0a5b      	lsrs	r3, r3, #9
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d010      	beq.n	800581e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580c:	f043 0202 	orr.w	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 030b 	and.w	r3, r3, #11
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 ff9f 	bl	8006774 <I2C_ITError>
  }
}
 8005836:	bf00      	nop
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	460b      	mov	r3, r1
 8005870:	70fb      	strb	r3, [r7, #3]
 8005872:	4613      	mov	r3, r2
 8005874:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b088      	sub	sp, #32
 80058ea:	af02      	add	r7, sp, #8
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <I2C_Master_ISR_IT+0x1e>
 8005900:	2302      	movs	r3, #2
 8005902:	e114      	b.n	8005b2e <I2C_Master_ISR_IT+0x248>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00d      	beq.n	8005940 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2210      	movs	r2, #16
 800592a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f001 f812 	bl	8006962 <I2C_Flush_TXDR>
 800593e:	e0e1      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d023      	beq.n	8005994 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01d      	beq.n	8005994 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005992:	e0b7      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01e      	beq.n	80059de <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d018      	beq.n	80059de <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059dc:	e092      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	09db      	lsrs	r3, r3, #7
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d05d      	beq.n	8005aa6 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	099b      	lsrs	r3, r3, #6
 80059ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d057      	beq.n	8005aa6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d040      	beq.n	8005a82 <I2C_Master_ISR_IT+0x19c>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d13c      	bne.n	8005a82 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a14:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2bff      	cmp	r3, #255	; 0xff
 8005a1e:	d90e      	bls.n	8005a3e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	8a79      	ldrh	r1, [r7, #18]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f001 f8e8 	bl	8006c0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3c:	e032      	b.n	8005aa4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a50:	d00b      	beq.n	8005a6a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	8a79      	ldrh	r1, [r7, #18]
 8005a5e:	2000      	movs	r0, #0
 8005a60:	9000      	str	r0, [sp, #0]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 f8d2 	bl	8006c0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a68:	e01c      	b.n	8005aa4 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	8a79      	ldrh	r1, [r7, #18]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f001 f8c6 	bl	8006c0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a80:	e010      	b.n	8005aa4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a90:	d003      	beq.n	8005a9a <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fba9 	bl	80061ea <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a98:	e034      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a9a:	2140      	movs	r1, #64	; 0x40
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fe69 	bl	8006774 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aa2:	e02f      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
 8005aa4:	e02e      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d028      	beq.n	8005b04 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	099b      	lsrs	r3, r3, #6
 8005ab6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d022      	beq.n	8005b04 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d119      	bne.n	8005afc <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad6:	d015      	beq.n	8005b04 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae0:	d108      	bne.n	8005af4 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e007      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fb78 	bl	80061ea <I2C_ITMasterSeqCplt>
 8005afa:	e003      	b.n	8005b04 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005afc:	2140      	movs	r1, #64	; 0x40
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fe38 	bl	8006774 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fbfe 	bl	8006320 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <I2C_Slave_ISR_IT+0x24>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0ec      	b.n	8005d34 <I2C_Slave_ISR_IT+0x1fe>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005b7a:	6939      	ldr	r1, [r7, #16]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fc99 	bl	80064b4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d04d      	beq.n	8005c2a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d047      	beq.n	8005c2a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d128      	bne.n	8005bf6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b28      	cmp	r3, #40	; 0x28
 8005bae:	d108      	bne.n	8005bc2 <I2C_Slave_ISR_IT+0x8c>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb6:	d104      	bne.n	8005bc2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005bb8:	6939      	ldr	r1, [r7, #16]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fd84 	bl	80066c8 <I2C_ITListenCplt>
 8005bc0:	e032      	b.n	8005c28 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b29      	cmp	r3, #41	; 0x29
 8005bcc:	d10e      	bne.n	8005bec <I2C_Slave_ISR_IT+0xb6>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bd4:	d00a      	beq.n	8005bec <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2210      	movs	r2, #16
 8005bdc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 febf 	bl	8006962 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fb3d 	bl	8006264 <I2C_ITSlaveSeqCplt>
 8005bea:	e01d      	b.n	8005c28 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005bf4:	e096      	b.n	8005d24 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <I2C_Slave_ISR_IT+0xe4>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c16:	f040 8085 	bne.w	8005d24 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fda7 	bl	8006774 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c26:	e07d      	b.n	8005d24 <I2C_Slave_ISR_IT+0x1ee>
 8005c28:	e07c      	b.n	8005d24 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d030      	beq.n	8005c98 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	089b      	lsrs	r3, r3, #2
 8005c3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02a      	beq.n	8005c98 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d018      	beq.n	8005c7e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d14f      	bne.n	8005d28 <I2C_Slave_ISR_IT+0x1f2>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c8e:	d04b      	beq.n	8005d28 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fae7 	bl	8006264 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005c96:	e047      	b.n	8005d28 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	08db      	lsrs	r3, r3, #3
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005cb0:	6939      	ldr	r1, [r7, #16]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fa15 	bl	80060e2 <I2C_ITAddrCplt>
 8005cb8:	e037      	b.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d031      	beq.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02b      	beq.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d018      	beq.n	8005d0e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8005d0c:	e00d      	b.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d14:	d002      	beq.n	8005d1c <I2C_Slave_ISR_IT+0x1e6>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 faa1 	bl	8006264 <I2C_ITSlaveSeqCplt>
 8005d22:	e002      	b.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005d24:	bf00      	nop
 8005d26:	e000      	b.n	8005d2a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005d28:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <I2C_Master_ISR_DMA+0x1a>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e0e1      	b.n	8005f1a <I2C_Master_ISR_DMA+0x1de>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d017      	beq.n	8005d9a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d011      	beq.n	8005d9a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d8a:	2120      	movs	r1, #32
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 ff6f 	bl	8006c70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fde5 	bl	8006962 <I2C_Flush_TXDR>
 8005d98:	e0ba      	b.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	09db      	lsrs	r3, r3, #7
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d072      	beq.n	8005e8c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	099b      	lsrs	r3, r3, #6
 8005daa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d06c      	beq.n	8005e8c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d04e      	beq.n	8005e6a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2bff      	cmp	r3, #255	; 0xff
 8005de2:	d906      	bls.n	8005df2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	22ff      	movs	r2, #255	; 0xff
 8005de8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e010      	b.n	8005e14 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e04:	d003      	beq.n	8005e0e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e002      	b.n	8005e14 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e12:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	8a79      	ldrh	r1, [r7, #18]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fef2 	bl	8006c0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	d108      	bne.n	8005e58 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e56:	e05b      	b.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e68:	e052      	b.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e78:	d003      	beq.n	8005e82 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f9b5 	bl	80061ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005e80:	e046      	b.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e82:	2140      	movs	r1, #64	; 0x40
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fc75 	bl	8006774 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005e8a:	e041      	b.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d029      	beq.n	8005eec <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d023      	beq.n	8005eec <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ebc:	d027      	beq.n	8005f0e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ec6:	d108      	bne.n	8005eda <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005ed8:	e019      	b.n	8005f0e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f985 	bl	80061ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005ee0:	e015      	b.n	8005f0e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ee2:	2140      	movs	r1, #64	; 0x40
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fc45 	bl	8006774 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005eea:	e010      	b.n	8005f0e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa0a 	bl	8006320 <I2C_ITMasterCplt>
 8005f0c:	e000      	b.n	8005f10 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005f0e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b088      	sub	sp, #32
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <I2C_Slave_ISR_DMA+0x24>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0c9      	b.n	80060da <I2C_Slave_ISR_DMA+0x1b8>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 faa3 	bl	80064b4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 809a 	beq.w	80060b0 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	091b      	lsrs	r3, r3, #4
 8005f80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8093 	beq.w	80060b0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0b9b      	lsrs	r3, r3, #14
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d105      	bne.n	8005fa2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	0bdb      	lsrs	r3, r3, #15
 8005f9a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d07f      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0bdb      	lsrs	r3, r3, #15
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	0b9b      	lsrs	r3, r3, #14
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d128      	bne.n	8006042 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b28      	cmp	r3, #40	; 0x28
 8005ffa:	d108      	bne.n	800600e <I2C_Slave_ISR_DMA+0xec>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006002:	d104      	bne.n	800600e <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fb5e 	bl	80066c8 <I2C_ITListenCplt>
 800600c:	e048      	b.n	80060a0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b29      	cmp	r3, #41	; 0x29
 8006018:	d10e      	bne.n	8006038 <I2C_Slave_ISR_DMA+0x116>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006020:	d00a      	beq.n	8006038 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2210      	movs	r2, #16
 8006028:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fc99 	bl	8006962 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f917 	bl	8006264 <I2C_ITSlaveSeqCplt>
 8006036:	e033      	b.n	80060a0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2210      	movs	r2, #16
 800603e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006040:	e034      	b.n	80060ac <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2210      	movs	r2, #16
 8006048:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f043 0204 	orr.w	r2, r3, #4
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <I2C_Slave_ISR_DMA+0x14a>
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800606a:	d11f      	bne.n	80060ac <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b21      	cmp	r3, #33	; 0x21
 8006070:	d002      	beq.n	8006078 <I2C_Slave_ISR_DMA+0x156>
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b29      	cmp	r3, #41	; 0x29
 8006076:	d103      	bne.n	8006080 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2221      	movs	r2, #33	; 0x21
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
 800607e:	e008      	b.n	8006092 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	2b22      	cmp	r3, #34	; 0x22
 8006084:	d002      	beq.n	800608c <I2C_Slave_ISR_DMA+0x16a>
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	2b2a      	cmp	r3, #42	; 0x2a
 800608a:	d102      	bne.n	8006092 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2222      	movs	r2, #34	; 0x22
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	4619      	mov	r1, r3
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fb6b 	bl	8006774 <I2C_ITError>
      if (treatdmanack == 1U)
 800609e:	e005      	b.n	80060ac <I2C_Slave_ISR_DMA+0x18a>
 80060a0:	e004      	b.n	80060ac <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060aa:	e011      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80060ac:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060ae:	e00f      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	08db      	lsrs	r3, r3, #3
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f809 	bl	80060e2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060f8:	2b28      	cmp	r3, #40	; 0x28
 80060fa:	d16a      	bne.n	80061d2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	b29b      	uxth	r3, r3
 8006116:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800611a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006128:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006136:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d138      	bne.n	80061b2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006140:	897b      	ldrh	r3, [r7, #10]
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	b29a      	uxth	r2, r3
 8006146:	89bb      	ldrh	r3, [r7, #12]
 8006148:	4053      	eors	r3, r2
 800614a:	b29b      	uxth	r3, r3
 800614c:	f003 0306 	and.w	r3, r3, #6
 8006150:	2b00      	cmp	r3, #0
 8006152:	d11c      	bne.n	800618e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006154:	897b      	ldrh	r3, [r7, #10]
 8006156:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	2b02      	cmp	r3, #2
 8006168:	d13b      	bne.n	80061e2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2208      	movs	r2, #8
 8006176:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006180:	89ba      	ldrh	r2, [r7, #12]
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fb6d 	bl	8005866 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800618c:	e029      	b.n	80061e2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800618e:	893b      	ldrh	r3, [r7, #8]
 8006190:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fdd4 	bl	8006d44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061a4:	89ba      	ldrh	r2, [r7, #12]
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fb5b 	bl	8005866 <HAL_I2C_AddrCallback>
}
 80061b0:	e017      	b.n	80061e2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80061b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fdc4 	bl	8006d44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061c4:	89ba      	ldrh	r2, [r7, #12]
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fb4b 	bl	8005866 <HAL_I2C_AddrCallback>
}
 80061d0:	e007      	b.n	80061e2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2208      	movs	r2, #8
 80061d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b21      	cmp	r3, #33	; 0x21
 8006204:	d115      	bne.n	8006232 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2211      	movs	r2, #17
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800621a:	2101      	movs	r1, #1
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fd91 	bl	8006d44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fb07 	bl	800583e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006230:	e014      	b.n	800625c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2212      	movs	r2, #18
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006246:	2102      	movs	r1, #2
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fd7b 	bl	8006d44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f010 fa24 	bl	80166a4 <HAL_I2C_MasterRxCpltCallback>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	0b9b      	lsrs	r3, r3, #14
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e00d      	b.n	80062b6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	0bdb      	lsrs	r3, r3, #15
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b29      	cmp	r3, #41	; 0x29
 80062c0:	d112      	bne.n	80062e8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2228      	movs	r2, #40	; 0x28
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2221      	movs	r2, #33	; 0x21
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062d0:	2101      	movs	r1, #1
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fd36 	bl	8006d44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fab6 	bl	8005852 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062e6:	e017      	b.n	8006318 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b2a      	cmp	r3, #42	; 0x2a
 80062f2:	d111      	bne.n	8006318 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2228      	movs	r2, #40	; 0x28
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2222      	movs	r2, #34	; 0x22
 8006300:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006302:	2102      	movs	r1, #2
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fd1d 	bl	8006d44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f010 f9b6 	bl	8016684 <HAL_I2C_SlaveRxCpltCallback>
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2220      	movs	r2, #32
 8006334:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b21      	cmp	r3, #33	; 0x21
 8006340:	d107      	bne.n	8006352 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006342:	2101      	movs	r1, #1
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fcfd 	bl	8006d44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2211      	movs	r2, #17
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
 8006350:	e00c      	b.n	800636c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b22      	cmp	r3, #34	; 0x22
 800635c:	d106      	bne.n	800636c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800635e:	2102      	movs	r1, #2
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fcef 	bl	8006d44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2212      	movs	r2, #18
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b4d      	ldr	r3, [pc, #308]	; (80064ac <I2C_ITMasterCplt+0x18c>)
 8006378:	400b      	ands	r3, r1
 800637a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a4a      	ldr	r2, [pc, #296]	; (80064b0 <I2C_ITMasterCplt+0x190>)
 8006386:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2210      	movs	r2, #16
 800639a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a0:	f043 0204 	orr.w	r2, r3, #4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b60      	cmp	r3, #96	; 0x60
 80063b2:	d10b      	bne.n	80063cc <I2C_ITMasterCplt+0xac>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80063ca:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fac8 	bl	8006962 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b60      	cmp	r3, #96	; 0x60
 80063e2:	d002      	beq.n	80063ea <I2C_ITMasterCplt+0xca>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d006      	beq.n	80063f8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f9bf 	bl	8006774 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063f6:	e054      	b.n	80064a2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b21      	cmp	r3, #33	; 0x21
 8006402:	d124      	bne.n	800644e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d10b      	bne.n	8006436 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fa31 	bl	8005896 <HAL_I2C_MemTxCpltCallback>
}
 8006434:	e035      	b.n	80064a2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff f9f9 	bl	800583e <HAL_I2C_MasterTxCpltCallback>
}
 800644c:	e029      	b.n	80064a2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b22      	cmp	r3, #34	; 0x22
 8006458:	d123      	bne.n	80064a2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d10b      	bne.n	800648c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fa10 	bl	80058aa <HAL_I2C_MemRxCpltCallback>
}
 800648a:	e00a      	b.n	80064a2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f010 f901 	bl	80166a4 <HAL_I2C_MasterRxCpltCallback>
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	fe00e800 	.word	0xfe00e800
 80064b0:	ffff0000 	.word	0xffff0000

080064b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2220      	movs	r2, #32
 80064d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b21      	cmp	r3, #33	; 0x21
 80064de:	d002      	beq.n	80064e6 <I2C_ITSlaveCplt+0x32>
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b29      	cmp	r3, #41	; 0x29
 80064e4:	d108      	bne.n	80064f8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80064e6:	f248 0101 	movw	r1, #32769	; 0x8001
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc2a 	bl	8006d44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2221      	movs	r2, #33	; 0x21
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
 80064f6:	e00d      	b.n	8006514 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b22      	cmp	r3, #34	; 0x22
 80064fc:	d002      	beq.n	8006504 <I2C_ITSlaveCplt+0x50>
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b2a      	cmp	r3, #42	; 0x2a
 8006502:	d107      	bne.n	8006514 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006504:	f248 0102 	movw	r1, #32770	; 0x8002
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fc1b 	bl	8006d44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2222      	movs	r2, #34	; 0x22
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006522:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b64      	ldr	r3, [pc, #400]	; (80066c0 <I2C_ITSlaveCplt+0x20c>)
 8006530:	400b      	ands	r3, r1
 8006532:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa14 	bl	8006962 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	0b9b      	lsrs	r3, r3, #14
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006554:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d020      	beq.n	80065a0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800656c:	e018      	b.n	80065a0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	0bdb      	lsrs	r3, r3, #15
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d012      	beq.n	80065a0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006588:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d006      	beq.n	80065a0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	089b      	lsrs	r3, r3, #2
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0304 	bic.w	r3, r3, #4
 80065b2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	f043 0204 	orr.w	r2, r3, #4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006616:	2b00      	cmp	r3, #0
 8006618:	d010      	beq.n	800663c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8a7 	bl	8006774 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b28      	cmp	r3, #40	; 0x28
 8006630:	d141      	bne.n	80066b6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006632:	6979      	ldr	r1, [r7, #20]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f847 	bl	80066c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800663a:	e03c      	b.n	80066b6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006644:	d014      	beq.n	8006670 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fe0c 	bl	8006264 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <I2C_ITSlaveCplt+0x210>)
 8006650:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff f90a 	bl	8005882 <HAL_I2C_ListenCpltCallback>
}
 800666e:	e022      	b.n	80066b6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b22      	cmp	r3, #34	; 0x22
 800667a:	d10e      	bne.n	800669a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f00f fff6 	bl	8016684 <HAL_I2C_SlaveRxCpltCallback>
}
 8006698:	e00d      	b.n	80066b6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff f8ce 	bl	8005852 <HAL_I2C_SlaveTxCpltCallback>
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	fe00e800 	.word	0xfe00e800
 80066c4:	ffff0000 	.word	0xffff0000

080066c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <I2C_ITListenCplt+0xa8>)
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d022      	beq.n	8006746 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	f043 0204 	orr.w	r2, r3, #4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006746:	f248 0103 	movw	r1, #32771	; 0x8003
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fafa 	bl	8006d44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2210      	movs	r2, #16
 8006756:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff f88e 	bl	8005882 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	ffff0000 	.word	0xffff0000

08006774 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a5d      	ldr	r2, [pc, #372]	; (8006908 <I2C_ITError+0x194>)
 8006792:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b28      	cmp	r3, #40	; 0x28
 80067aa:	d005      	beq.n	80067b8 <I2C_ITError+0x44>
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b29      	cmp	r3, #41	; 0x29
 80067b0:	d002      	beq.n	80067b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b2a      	cmp	r3, #42	; 0x2a
 80067b6:	d10b      	bne.n	80067d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067b8:	2103      	movs	r1, #3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fac2 	bl	8006d44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2228      	movs	r2, #40	; 0x28
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a50      	ldr	r2, [pc, #320]	; (800690c <I2C_ITError+0x198>)
 80067cc:	635a      	str	r2, [r3, #52]	; 0x34
 80067ce:	e011      	b.n	80067f4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fab5 	bl	8006d44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b60      	cmp	r3, #96	; 0x60
 80067e4:	d003      	beq.n	80067ee <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d039      	beq.n	8006876 <I2C_ITError+0x102>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b11      	cmp	r3, #17
 8006806:	d002      	beq.n	800680e <I2C_ITError+0x9a>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b21      	cmp	r3, #33	; 0x21
 800680c:	d133      	bne.n	8006876 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800681c:	d107      	bne.n	800682e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800682c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	4618      	mov	r0, r3
 8006834:	f7fc fec8 	bl	80035c8 <HAL_DMA_GetState>
 8006838:	4603      	mov	r3, r0
 800683a:	2b01      	cmp	r3, #1
 800683c:	d017      	beq.n	800686e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	4a33      	ldr	r2, [pc, #204]	; (8006910 <I2C_ITError+0x19c>)
 8006844:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	4618      	mov	r0, r3
 8006854:	f7fc fd0c 	bl	8003270 <HAL_DMA_Abort_IT>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d04d      	beq.n	80068fa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800686c:	e045      	b.n	80068fa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f850 	bl	8006914 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006874:	e041      	b.n	80068fa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d039      	beq.n	80068f2 <I2C_ITError+0x17e>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b12      	cmp	r3, #18
 8006882:	d002      	beq.n	800688a <I2C_ITError+0x116>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b22      	cmp	r3, #34	; 0x22
 8006888:	d133      	bne.n	80068f2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006898:	d107      	bne.n	80068aa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068a8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc fe8a 	bl	80035c8 <HAL_DMA_GetState>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d017      	beq.n	80068ea <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	4a14      	ldr	r2, [pc, #80]	; (8006910 <I2C_ITError+0x19c>)
 80068c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fc fcce 	bl	8003270 <HAL_DMA_Abort_IT>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068e8:	e009      	b.n	80068fe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f812 	bl	8006914 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068f0:	e005      	b.n	80068fe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f80e 	bl	8006914 <I2C_TreatErrorCallback>
  }
}
 80068f8:	e002      	b.n	8006900 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068fe:	bf00      	nop
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	ffff0000 	.word	0xffff0000
 800690c:	08005b37 	.word	0x08005b37
 8006910:	08006bd1 	.word	0x08006bd1

08006914 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b60      	cmp	r3, #96	; 0x60
 8006926:	d10e      	bne.n	8006946 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fe ffc7 	bl	80058d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006944:	e009      	b.n	800695a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7fe ffb2 	bl	80058be <HAL_I2C_ErrorCallback>
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b02      	cmp	r3, #2
 8006976:	d103      	bne.n	8006980 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b01      	cmp	r3, #1
 800698c:	d007      	beq.n	800699e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	619a      	str	r2, [r3, #24]
  }
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069c6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069d2:	2120      	movs	r1, #32
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f94b 	bl	8006c70 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80069da:	e02d      	b.n	8006a38 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2bff      	cmp	r3, #255	; 0xff
 80069f2:	d903      	bls.n	80069fc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80069fa:	e004      	b.n	8006a06 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	4619      	mov	r1, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3328      	adds	r3, #40	; 0x28
 8006a16:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006a1c:	f7fc fb58 	bl	80030d0 <HAL_DMA_Start_IT>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006a26:	2110      	movs	r1, #16
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f7ff fea3 	bl	8006774 <I2C_ITError>
}
 8006a2e:	e003      	b.n	8006a38 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006a30:	2140      	movs	r1, #64	; 0x40
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f91c 	bl	8006c70 <I2C_Enable_IRQ>
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a5a:	d002      	beq.n	8006a62 <I2C_DMASlaveTransmitCplt+0x22>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a70:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fbf6 	bl	8006264 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a9c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006aa8:	2120      	movs	r1, #32
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f8e0 	bl	8006c70 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ab0:	e02d      	b.n	8006b0e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006aba:	441a      	add	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2bff      	cmp	r3, #255	; 0xff
 8006ac8:	d903      	bls.n	8006ad2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	22ff      	movs	r2, #255	; 0xff
 8006ace:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ad0:	e004      	b.n	8006adc <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3324      	adds	r3, #36	; 0x24
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006af2:	f7fc faed 	bl	80030d0 <HAL_DMA_Start_IT>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006afc:	2110      	movs	r1, #16
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fe38 	bl	8006774 <I2C_ITError>
}
 8006b04:	e003      	b.n	8006b0e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006b06:	2140      	movs	r1, #64	; 0x40
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f8b1 	bl	8006c70 <I2C_Enable_IRQ>
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10e      	bne.n	8006b54 <I2C_DMASlaveReceiveCplt+0x3e>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b3c:	d00a      	beq.n	8006b54 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b4c:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff fb88 	bl	8006264 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006b82:	2301      	movs	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fc fd20 	bl	80035e4 <HAL_DMA_GetError>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d00e      	beq.n	8006bc8 <I2C_DMAError+0x6c>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bbe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006bc0:	2110      	movs	r1, #16
 8006bc2:	68b8      	ldr	r0, [r7, #8]
 8006bc4:	f7ff fdd6 	bl	8006774 <I2C_ITError>
  }
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	2200      	movs	r2, #0
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe88 	bl	8006914 <I2C_TreatErrorCallback>
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c24:	7a7b      	ldrb	r3, [r7, #9]
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	0d5b      	lsrs	r3, r3, #21
 8006c46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c4a:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <I2C_TransferConfig+0x60>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	ea02 0103 	and.w	r1, r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	03ff63ff 	.word	0x03ff63ff

08006c70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c84:	4a2d      	ldr	r2, [pc, #180]	; (8006d3c <I2C_Enable_IRQ+0xcc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <I2C_Enable_IRQ+0xd0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d11d      	bne.n	8006cd0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da03      	bge.n	8006ca4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006ca2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ca4:	887b      	ldrh	r3, [r7, #2]
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d103      	bne.n	8006cb2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006cb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cb2:	887b      	ldrh	r3, [r7, #2]
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d103      	bne.n	8006cc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006cbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cc0:	887b      	ldrh	r3, [r7, #2]
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d12c      	bne.n	8006d20 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cce:	e027      	b.n	8006d20 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006cd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da03      	bge.n	8006ce0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006cde:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ce0:	887b      	ldrh	r3, [r7, #2]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006cf0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006cf2:	887b      	ldrh	r3, [r7, #2]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006d02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d04:	887b      	ldrh	r3, [r7, #2]
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d103      	bne.n	8006d12 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006d10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d103      	bne.n	8006d20 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f043 0320 	orr.w	r3, r3, #32
 8006d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6819      	ldr	r1, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	601a      	str	r2, [r3, #0]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	08005d3d 	.word	0x08005d3d
 8006d40:	08005f23 	.word	0x08005f23

08006d44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d54:	887b      	ldrh	r3, [r7, #2]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00f      	beq.n	8006d7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006d64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d72:	2b28      	cmp	r3, #40	; 0x28
 8006d74:	d003      	beq.n	8006d7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006d7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d7e:	887b      	ldrh	r3, [r7, #2]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00f      	beq.n	8006da8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006d8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d9c:	2b28      	cmp	r3, #40	; 0x28
 8006d9e:	d003      	beq.n	8006da8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006da6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006da8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	da03      	bge.n	8006db8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006db6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d103      	bne.n	8006dc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006dc6:	887b      	ldrh	r3, [r7, #2]
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d103      	bne.n	8006dd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f043 0320 	orr.w	r3, r3, #32
 8006dd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006dd4:	887b      	ldrh	r3, [r7, #2]
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d103      	bne.n	8006de2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6819      	ldr	r1, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	43da      	mvns	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	400a      	ands	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d138      	bne.n	8006e88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e032      	b.n	8006e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2224      	movs	r2, #36	; 0x24
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0201 	bic.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6819      	ldr	r1, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e000      	b.n	8006e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e88:	2302      	movs	r3, #2
  }
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d139      	bne.n	8006f20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e033      	b.n	8006f22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2224      	movs	r2, #36	; 0x24
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0201 	bic.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ee8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f30:	b08f      	sub	sp, #60	; 0x3c
 8006f32:	af0a      	add	r7, sp, #40	; 0x28
 8006f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e116      	b.n	800716e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa fcb2 	bl	80018c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2203      	movs	r2, #3
 8006f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f004 f9a6 	bl	800b2d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	687e      	ldr	r6, [r7, #4]
 8006f8c:	466d      	mov	r5, sp
 8006f8e:	f106 0410 	add.w	r4, r6, #16
 8006f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fa2:	1d33      	adds	r3, r6, #4
 8006fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fa6:	6838      	ldr	r0, [r7, #0]
 8006fa8:	f004 f93a 	bl	800b220 <USB_CoreInit>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0d7      	b.n	800716e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f004 f994 	bl	800b2f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]
 8006fce:	e04a      	b.n	8007066 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fd0:	7bfa      	ldrb	r2, [r7, #15]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	333d      	adds	r3, #61	; 0x3d
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006fe4:	7bfa      	ldrb	r2, [r7, #15]
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	333c      	adds	r3, #60	; 0x3c
 8006ff4:	7bfa      	ldrb	r2, [r7, #15]
 8006ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ff8:	7bfa      	ldrb	r2, [r7, #15]
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	b298      	uxth	r0, r3
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	3344      	adds	r3, #68	; 0x44
 800700c:	4602      	mov	r2, r0
 800700e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	3340      	adds	r3, #64	; 0x40
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007024:	7bfa      	ldrb	r2, [r7, #15]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	3348      	adds	r3, #72	; 0x48
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007038:	7bfa      	ldrb	r2, [r7, #15]
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	334c      	adds	r3, #76	; 0x4c
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3354      	adds	r3, #84	; 0x54
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	3301      	adds	r3, #1
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	7bfa      	ldrb	r2, [r7, #15]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d3af      	bcc.n	8006fd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]
 8007074:	e044      	b.n	8007100 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007076:	7bfa      	ldrb	r2, [r7, #15]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800709e:	7bfa      	ldrb	r2, [r7, #15]
 80070a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070b8:	7bfa      	ldrb	r2, [r7, #15]
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070ce:	7bfa      	ldrb	r2, [r7, #15]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070e4:	7bfa      	ldrb	r2, [r7, #15]
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	3301      	adds	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	7bfa      	ldrb	r2, [r7, #15]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d3b5      	bcc.n	8007076 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	687e      	ldr	r6, [r7, #4]
 8007112:	466d      	mov	r5, sp
 8007114:	f106 0410 	add.w	r4, r6, #16
 8007118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800711c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007124:	e885 0003 	stmia.w	r5, {r0, r1}
 8007128:	1d33      	adds	r3, r6, #4
 800712a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800712c:	6838      	ldr	r0, [r7, #0]
 800712e:	f004 f92d 	bl	800b38c <USB_DevInit>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e014      	b.n	800716e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b01      	cmp	r3, #1
 800715a:	d102      	bne.n	8007162 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f80b 	bl	8007178 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f004 faeb 	bl	800b742 <USB_DevDisconnect>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007178 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_PCDEx_ActivateLPM+0x44>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	10000003 	.word	0x10000003

080071c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a04      	ldr	r2, [pc, #16]	; (80071dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80071ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ce:	6013      	str	r3, [r2, #0]
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40007000 	.word	0x40007000

080071e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80071e8:	2300      	movs	r3, #0
 80071ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e291      	b.n	800771a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8087 	beq.w	8007312 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007204:	4b96      	ldr	r3, [pc, #600]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 030c 	and.w	r3, r3, #12
 800720c:	2b04      	cmp	r3, #4
 800720e:	d00c      	beq.n	800722a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007210:	4b93      	ldr	r3, [pc, #588]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 030c 	and.w	r3, r3, #12
 8007218:	2b08      	cmp	r3, #8
 800721a:	d112      	bne.n	8007242 <HAL_RCC_OscConfig+0x62>
 800721c:	4b90      	ldr	r3, [pc, #576]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007228:	d10b      	bne.n	8007242 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800722a:	4b8d      	ldr	r3, [pc, #564]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d06c      	beq.n	8007310 <HAL_RCC_OscConfig+0x130>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d168      	bne.n	8007310 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e26b      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724a:	d106      	bne.n	800725a <HAL_RCC_OscConfig+0x7a>
 800724c:	4b84      	ldr	r3, [pc, #528]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a83      	ldr	r2, [pc, #524]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	e02e      	b.n	80072b8 <HAL_RCC_OscConfig+0xd8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10c      	bne.n	800727c <HAL_RCC_OscConfig+0x9c>
 8007262:	4b7f      	ldr	r3, [pc, #508]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a7e      	ldr	r2, [pc, #504]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	4b7c      	ldr	r3, [pc, #496]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a7b      	ldr	r2, [pc, #492]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e01d      	b.n	80072b8 <HAL_RCC_OscConfig+0xd8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007284:	d10c      	bne.n	80072a0 <HAL_RCC_OscConfig+0xc0>
 8007286:	4b76      	ldr	r3, [pc, #472]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a75      	ldr	r2, [pc, #468]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800728c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	4b73      	ldr	r3, [pc, #460]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a72      	ldr	r2, [pc, #456]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e00b      	b.n	80072b8 <HAL_RCC_OscConfig+0xd8>
 80072a0:	4b6f      	ldr	r3, [pc, #444]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6e      	ldr	r2, [pc, #440]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80072a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4b6c      	ldr	r3, [pc, #432]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a6b      	ldr	r2, [pc, #428]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80072b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d013      	beq.n	80072e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7fa ff10 	bl	80020e4 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072c8:	f7fa ff0c 	bl	80020e4 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b64      	cmp	r3, #100	; 0x64
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e21f      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072da:	4b61      	ldr	r3, [pc, #388]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f0      	beq.n	80072c8 <HAL_RCC_OscConfig+0xe8>
 80072e6:	e014      	b.n	8007312 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7fa fefc 	bl	80020e4 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072f0:	f7fa fef8 	bl	80020e4 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b64      	cmp	r3, #100	; 0x64
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e20b      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007302:	4b57      	ldr	r3, [pc, #348]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0x110>
 800730e:	e000      	b.n	8007312 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d069      	beq.n	80073f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800731e:	4b50      	ldr	r3, [pc, #320]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 030c 	and.w	r3, r3, #12
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800732a:	4b4d      	ldr	r3, [pc, #308]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	2b08      	cmp	r3, #8
 8007334:	d11c      	bne.n	8007370 <HAL_RCC_OscConfig+0x190>
 8007336:	4b4a      	ldr	r3, [pc, #296]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d116      	bne.n	8007370 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007342:	4b47      	ldr	r3, [pc, #284]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_RCC_OscConfig+0x17a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d001      	beq.n	800735a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e1df      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	4b41      	ldr	r3, [pc, #260]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	493d      	ldr	r1, [pc, #244]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800736e:	e040      	b.n	80073f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d023      	beq.n	80073c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007378:	4b39      	ldr	r3, [pc, #228]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a38      	ldr	r2, [pc, #224]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fa feae 	bl	80020e4 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738c:	f7fa feaa 	bl	80020e4 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1bd      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800739e:	4b30      	ldr	r3, [pc, #192]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f0      	beq.n	800738c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073aa:	4b2d      	ldr	r3, [pc, #180]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4929      	ldr	r1, [pc, #164]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	600b      	str	r3, [r1, #0]
 80073be:	e018      	b.n	80073f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073c0:	4b27      	ldr	r3, [pc, #156]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a26      	ldr	r2, [pc, #152]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073cc:	f7fa fe8a 	bl	80020e4 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d4:	f7fa fe86 	bl	80020e4 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e199      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073e6:	4b1e      	ldr	r3, [pc, #120]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d038      	beq.n	8007470 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d019      	beq.n	800743a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007406:	4b16      	ldr	r3, [pc, #88]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800740c:	f043 0301 	orr.w	r3, r3, #1
 8007410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007412:	f7fa fe67 	bl	80020e4 <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800741a:	f7fa fe63 	bl	80020e4 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e176      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800742c:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800742e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x23a>
 8007438:	e01a      	b.n	8007470 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 800743c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800743e:	4a08      	ldr	r2, [pc, #32]	; (8007460 <HAL_RCC_OscConfig+0x280>)
 8007440:	f023 0301 	bic.w	r3, r3, #1
 8007444:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007446:	f7fa fe4d 	bl	80020e4 <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800744c:	e00a      	b.n	8007464 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800744e:	f7fa fe49 	bl	80020e4 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d903      	bls.n	8007464 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e15c      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
 8007460:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007464:	4b91      	ldr	r3, [pc, #580]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ee      	bne.n	800744e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80a4 	beq.w	80075c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800747e:	4b8b      	ldr	r3, [pc, #556]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b88      	ldr	r3, [pc, #544]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	4a87      	ldr	r2, [pc, #540]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007494:	6413      	str	r3, [r2, #64]	; 0x40
 8007496:	4b85      	ldr	r3, [pc, #532]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800749e:	60bb      	str	r3, [r7, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074a2:	2301      	movs	r3, #1
 80074a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074a6:	4b82      	ldr	r3, [pc, #520]	; (80076b0 <HAL_RCC_OscConfig+0x4d0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d118      	bne.n	80074e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80074b2:	4b7f      	ldr	r3, [pc, #508]	; (80076b0 <HAL_RCC_OscConfig+0x4d0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7e      	ldr	r2, [pc, #504]	; (80076b0 <HAL_RCC_OscConfig+0x4d0>)
 80074b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074be:	f7fa fe11 	bl	80020e4 <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c6:	f7fa fe0d 	bl	80020e4 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b64      	cmp	r3, #100	; 0x64
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e120      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d8:	4b75      	ldr	r3, [pc, #468]	; (80076b0 <HAL_RCC_OscConfig+0x4d0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0f0      	beq.n	80074c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d106      	bne.n	80074fa <HAL_RCC_OscConfig+0x31a>
 80074ec:	4b6f      	ldr	r3, [pc, #444]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	4a6e      	ldr	r2, [pc, #440]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	6713      	str	r3, [r2, #112]	; 0x70
 80074f8:	e02d      	b.n	8007556 <HAL_RCC_OscConfig+0x376>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10c      	bne.n	800751c <HAL_RCC_OscConfig+0x33c>
 8007502:	4b6a      	ldr	r3, [pc, #424]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	4a69      	ldr	r2, [pc, #420]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007508:	f023 0301 	bic.w	r3, r3, #1
 800750c:	6713      	str	r3, [r2, #112]	; 0x70
 800750e:	4b67      	ldr	r3, [pc, #412]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	4a66      	ldr	r2, [pc, #408]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007514:	f023 0304 	bic.w	r3, r3, #4
 8007518:	6713      	str	r3, [r2, #112]	; 0x70
 800751a:	e01c      	b.n	8007556 <HAL_RCC_OscConfig+0x376>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b05      	cmp	r3, #5
 8007522:	d10c      	bne.n	800753e <HAL_RCC_OscConfig+0x35e>
 8007524:	4b61      	ldr	r3, [pc, #388]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007528:	4a60      	ldr	r2, [pc, #384]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800752a:	f043 0304 	orr.w	r3, r3, #4
 800752e:	6713      	str	r3, [r2, #112]	; 0x70
 8007530:	4b5e      	ldr	r3, [pc, #376]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	4a5d      	ldr	r2, [pc, #372]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	6713      	str	r3, [r2, #112]	; 0x70
 800753c:	e00b      	b.n	8007556 <HAL_RCC_OscConfig+0x376>
 800753e:	4b5b      	ldr	r3, [pc, #364]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	4a5a      	ldr	r2, [pc, #360]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	6713      	str	r3, [r2, #112]	; 0x70
 800754a:	4b58      	ldr	r3, [pc, #352]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754e:	4a57      	ldr	r2, [pc, #348]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007550:	f023 0304 	bic.w	r3, r3, #4
 8007554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755e:	f7fa fdc1 	bl	80020e4 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007564:	e00a      	b.n	800757c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fa fdbd 	bl	80020e4 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	; 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e0ce      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800757c:	4b4b      	ldr	r3, [pc, #300]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0ee      	beq.n	8007566 <HAL_RCC_OscConfig+0x386>
 8007588:	e014      	b.n	80075b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758a:	f7fa fdab 	bl	80020e4 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007590:	e00a      	b.n	80075a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007592:	f7fa fda7 	bl	80020e4 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e0b8      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075a8:	4b40      	ldr	r3, [pc, #256]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80075aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ee      	bne.n	8007592 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d105      	bne.n	80075c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ba:	4b3c      	ldr	r3, [pc, #240]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	4a3b      	ldr	r2, [pc, #236]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80075c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80a4 	beq.w	8007718 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075d0:	4b36      	ldr	r3, [pc, #216]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 030c 	and.w	r3, r3, #12
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d06b      	beq.n	80076b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d149      	bne.n	8007678 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e4:	4b31      	ldr	r3, [pc, #196]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a30      	ldr	r2, [pc, #192]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80075ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fa fd78 	bl	80020e4 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fa fd74 	bl	80020e4 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e087      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760a:	4b28      	ldr	r3, [pc, #160]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f0      	bne.n	80075f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	019b      	lsls	r3, r3, #6
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	3b01      	subs	r3, #1
 8007630:	041b      	lsls	r3, r3, #16
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	061b      	lsls	r3, r3, #24
 800763a:	4313      	orrs	r3, r2
 800763c:	4a1b      	ldr	r2, [pc, #108]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800763e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007642:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a18      	ldr	r2, [pc, #96]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800764a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800764e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fa fd48 	bl	80020e4 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007658:	f7fa fd44 	bl	80020e4 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e057      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766a:	4b10      	ldr	r3, [pc, #64]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x478>
 8007676:	e04f      	b.n	8007718 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0b      	ldr	r2, [pc, #44]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 800767e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fa fd2e 	bl	80020e4 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768c:	f7fa fd2a 	bl	80020e4 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e03d      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <HAL_RCC_OscConfig+0x4cc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x4ac>
 80076aa:	e035      	b.n	8007718 <HAL_RCC_OscConfig+0x538>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80076b4:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <HAL_RCC_OscConfig+0x544>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d028      	beq.n	8007714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d121      	bne.n	8007714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076da:	429a      	cmp	r2, r3
 80076dc:	d11a      	bne.n	8007714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076e4:	4013      	ands	r3, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d111      	bne.n	8007714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	3b01      	subs	r3, #1
 80076fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d107      	bne.n	8007714 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007710:	429a      	cmp	r2, r3
 8007712:	d001      	beq.n	8007718 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40023800 	.word	0x40023800

08007728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e0d0      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007740:	4b6a      	ldr	r3, [pc, #424]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d910      	bls.n	8007770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800774e:	4b67      	ldr	r3, [pc, #412]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f023 020f 	bic.w	r2, r3, #15
 8007756:	4965      	ldr	r1, [pc, #404]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	4313      	orrs	r3, r2
 800775c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775e:	4b63      	ldr	r3, [pc, #396]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0b8      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d020      	beq.n	80077be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007788:	4b59      	ldr	r3, [pc, #356]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	4a58      	ldr	r2, [pc, #352]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 800778e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077a0:	4b53      	ldr	r3, [pc, #332]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	4a52      	ldr	r2, [pc, #328]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ac:	4b50      	ldr	r3, [pc, #320]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	494d      	ldr	r1, [pc, #308]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d040      	beq.n	800784c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d2:	4b47      	ldr	r3, [pc, #284]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d115      	bne.n	800780a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e07f      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d107      	bne.n	80077fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ea:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e073      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077fa:	4b3d      	ldr	r3, [pc, #244]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e06b      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800780a:	4b39      	ldr	r3, [pc, #228]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f023 0203 	bic.w	r2, r3, #3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	4936      	ldr	r1, [pc, #216]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781c:	f7fa fc62 	bl	80020e4 <HAL_GetTick>
 8007820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007822:	e00a      	b.n	800783a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007824:	f7fa fc5e 	bl	80020e4 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e053      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783a:	4b2d      	ldr	r3, [pc, #180]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 020c 	and.w	r2, r3, #12
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	429a      	cmp	r2, r3
 800784a:	d1eb      	bne.n	8007824 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800784c:	4b27      	ldr	r3, [pc, #156]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d210      	bcs.n	800787c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785a:	4b24      	ldr	r3, [pc, #144]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f023 020f 	bic.w	r2, r3, #15
 8007862:	4922      	ldr	r1, [pc, #136]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800786a:	4b20      	ldr	r3, [pc, #128]	; (80078ec <HAL_RCC_ClockConfig+0x1c4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d001      	beq.n	800787c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e032      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007888:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	4916      	ldr	r1, [pc, #88]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 8007896:	4313      	orrs	r3, r2
 8007898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80078a6:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	490e      	ldr	r1, [pc, #56]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078ba:	f000 f821 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 80078be:	4602      	mov	r2, r0
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <HAL_RCC_ClockConfig+0x1c8>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	490a      	ldr	r1, [pc, #40]	; (80078f4 <HAL_RCC_ClockConfig+0x1cc>)
 80078cc:	5ccb      	ldrb	r3, [r1, r3]
 80078ce:	fa22 f303 	lsr.w	r3, r2, r3
 80078d2:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <HAL_RCC_ClockConfig+0x1d0>)
 80078d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <HAL_RCC_ClockConfig+0x1d4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fa fbbe 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40023c00 	.word	0x40023c00
 80078f0:	40023800 	.word	0x40023800
 80078f4:	0801b4f0 	.word	0x0801b4f0
 80078f8:	20000000 	.word	0x20000000
 80078fc:	20000004 	.word	0x20000004

08007900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007904:	b094      	sub	sp, #80	; 0x50
 8007906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
 800790c:	2300      	movs	r3, #0
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	2300      	movs	r3, #0
 8007912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007918:	4b79      	ldr	r3, [pc, #484]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 030c 	and.w	r3, r3, #12
 8007920:	2b08      	cmp	r3, #8
 8007922:	d00d      	beq.n	8007940 <HAL_RCC_GetSysClockFreq+0x40>
 8007924:	2b08      	cmp	r3, #8
 8007926:	f200 80e1 	bhi.w	8007aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x34>
 800792e:	2b04      	cmp	r3, #4
 8007930:	d003      	beq.n	800793a <HAL_RCC_GetSysClockFreq+0x3a>
 8007932:	e0db      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007934:	4b73      	ldr	r3, [pc, #460]	; (8007b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8007936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007938:	e0db      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800793a:	4b73      	ldr	r3, [pc, #460]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800793c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800793e:	e0d8      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007940:	4b6f      	ldr	r3, [pc, #444]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800794a:	4b6d      	ldr	r3, [pc, #436]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d063      	beq.n	8007a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007956:	4b6a      	ldr	r3, [pc, #424]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	099b      	lsrs	r3, r3, #6
 800795c:	2200      	movs	r2, #0
 800795e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
 800796e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007972:	4622      	mov	r2, r4
 8007974:	462b      	mov	r3, r5
 8007976:	f04f 0000 	mov.w	r0, #0
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	0159      	lsls	r1, r3, #5
 8007980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007984:	0150      	lsls	r0, r2, #5
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4621      	mov	r1, r4
 800798c:	1a51      	subs	r1, r2, r1
 800798e:	6139      	str	r1, [r7, #16]
 8007990:	4629      	mov	r1, r5
 8007992:	eb63 0301 	sbc.w	r3, r3, r1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079a4:	4659      	mov	r1, fp
 80079a6:	018b      	lsls	r3, r1, #6
 80079a8:	4651      	mov	r1, sl
 80079aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ae:	4651      	mov	r1, sl
 80079b0:	018a      	lsls	r2, r1, #6
 80079b2:	4651      	mov	r1, sl
 80079b4:	ebb2 0801 	subs.w	r8, r2, r1
 80079b8:	4659      	mov	r1, fp
 80079ba:	eb63 0901 	sbc.w	r9, r3, r1
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079d2:	4690      	mov	r8, r2
 80079d4:	4699      	mov	r9, r3
 80079d6:	4623      	mov	r3, r4
 80079d8:	eb18 0303 	adds.w	r3, r8, r3
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	462b      	mov	r3, r5
 80079e0:	eb49 0303 	adc.w	r3, r9, r3
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079f2:	4629      	mov	r1, r5
 80079f4:	024b      	lsls	r3, r1, #9
 80079f6:	4621      	mov	r1, r4
 80079f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079fc:	4621      	mov	r1, r4
 80079fe:	024a      	lsls	r2, r1, #9
 8007a00:	4610      	mov	r0, r2
 8007a02:	4619      	mov	r1, r3
 8007a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a06:	2200      	movs	r2, #0
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a10:	f7f8 fc56 	bl	80002c0 <__aeabi_uldivmod>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4613      	mov	r3, r2
 8007a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a1c:	e058      	b.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a1e:	4b38      	ldr	r3, [pc, #224]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	099b      	lsrs	r3, r3, #6
 8007a24:	2200      	movs	r2, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	4611      	mov	r1, r2
 8007a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a2e:	623b      	str	r3, [r7, #32]
 8007a30:	2300      	movs	r3, #0
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	f04f 0000 	mov.w	r0, #0
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	0159      	lsls	r1, r3, #5
 8007a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a4a:	0150      	lsls	r0, r2, #5
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4641      	mov	r1, r8
 8007a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a56:	4649      	mov	r1, r9
 8007a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	f04f 0300 	mov.w	r3, #0
 8007a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a70:	ebb2 040a 	subs.w	r4, r2, sl
 8007a74:	eb63 050b 	sbc.w	r5, r3, fp
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	00eb      	lsls	r3, r5, #3
 8007a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a86:	00e2      	lsls	r2, r4, #3
 8007a88:	4614      	mov	r4, r2
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	4643      	mov	r3, r8
 8007a8e:	18e3      	adds	r3, r4, r3
 8007a90:	603b      	str	r3, [r7, #0]
 8007a92:	464b      	mov	r3, r9
 8007a94:	eb45 0303 	adc.w	r3, r5, r3
 8007a98:	607b      	str	r3, [r7, #4]
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	028b      	lsls	r3, r1, #10
 8007aaa:	4621      	mov	r1, r4
 8007aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	028a      	lsls	r2, r1, #10
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aba:	2200      	movs	r2, #0
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	61fa      	str	r2, [r7, #28]
 8007ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ac4:	f7f8 fbfc 	bl	80002c0 <__aeabi_uldivmod>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4613      	mov	r3, r2
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	3301      	adds	r3, #1
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007aea:	e002      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8007aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3750      	adds	r7, #80	; 0x50
 8007af8:	46bd      	mov	sp, r7
 8007afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afe:	bf00      	nop
 8007b00:	40023800 	.word	0x40023800
 8007b04:	00f42400 	.word	0x00f42400
 8007b08:	007a1200 	.word	0x007a1200

08007b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b10:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b12:	681b      	ldr	r3, [r3, #0]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	20000000 	.word	0x20000000

08007b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b28:	f7ff fff0 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	0a9b      	lsrs	r3, r3, #10
 8007b34:	f003 0307 	and.w	r3, r3, #7
 8007b38:	4903      	ldr	r1, [pc, #12]	; (8007b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b3a:	5ccb      	ldrb	r3, [r1, r3]
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40023800 	.word	0x40023800
 8007b48:	0801b500 	.word	0x0801b500

08007b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b50:	f7ff ffdc 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 8007b54:	4602      	mov	r2, r0
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	0b5b      	lsrs	r3, r3, #13
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	4903      	ldr	r1, [pc, #12]	; (8007b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b62:	5ccb      	ldrb	r3, [r1, r3]
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	0801b500 	.word	0x0801b500

08007b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d012      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b9c:	4b69      	ldr	r3, [pc, #420]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	4a68      	ldr	r2, [pc, #416]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ba6:	6093      	str	r3, [r2, #8]
 8007ba8:	4b66      	ldr	r3, [pc, #408]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	4964      	ldr	r1, [pc, #400]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d017      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bce:	4b5d      	ldr	r3, [pc, #372]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bdc:	4959      	ldr	r1, [pc, #356]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bec:	d101      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d017      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c0a:	4b4e      	ldr	r3, [pc, #312]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	494a      	ldr	r1, [pc, #296]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c28:	d101      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007c36:	2301      	movs	r3, #1
 8007c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 808b 	beq.w	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c58:	4b3a      	ldr	r3, [pc, #232]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	4a39      	ldr	r2, [pc, #228]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c62:	6413      	str	r3, [r2, #64]	; 0x40
 8007c64:	4b37      	ldr	r3, [pc, #220]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6c:	60bb      	str	r3, [r7, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c70:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a34      	ldr	r2, [pc, #208]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7c:	f7fa fa32 	bl	80020e4 <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c82:	e008      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c84:	f7fa fa2e 	bl	80020e4 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b64      	cmp	r3, #100	; 0x64
 8007c90:	d901      	bls.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e357      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c96:	4b2c      	ldr	r3, [pc, #176]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f0      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ca2:	4b28      	ldr	r3, [pc, #160]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d035      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d02e      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cc0:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cca:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cda:	4a1a      	ldr	r2, [pc, #104]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007ce2:	4a18      	ldr	r2, [pc, #96]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ce8:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d114      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf4:	f7fa f9f6 	bl	80020e4 <HAL_GetTick>
 8007cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cfa:	e00a      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cfc:	f7fa f9f2 	bl	80020e4 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e319      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ee      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d2a:	d111      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d3a:	400b      	ands	r3, r1
 8007d3c:	4901      	ldr	r1, [pc, #4]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	608b      	str	r3, [r1, #8]
 8007d42:	e00b      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007d44:	40023800 	.word	0x40023800
 8007d48:	40007000 	.word	0x40007000
 8007d4c:	0ffffcff 	.word	0x0ffffcff
 8007d50:	4baa      	ldr	r3, [pc, #680]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	4aa9      	ldr	r2, [pc, #676]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d5a:	6093      	str	r3, [r2, #8]
 8007d5c:	4ba7      	ldr	r3, [pc, #668]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d68:	49a4      	ldr	r1, [pc, #656]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d7a:	4ba0      	ldr	r3, [pc, #640]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d80:	4a9e      	ldr	r2, [pc, #632]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007d8a:	4b9c      	ldr	r3, [pc, #624]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	4999      	ldr	r1, [pc, #612]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007da8:	4b94      	ldr	r3, [pc, #592]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db6:	4991      	ldr	r1, [pc, #580]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dca:	4b8c      	ldr	r3, [pc, #560]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd8:	4988      	ldr	r1, [pc, #544]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dec:	4b83      	ldr	r3, [pc, #524]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfa:	4980      	ldr	r1, [pc, #512]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e0e:	4b7b      	ldr	r3, [pc, #492]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1c:	4977      	ldr	r1, [pc, #476]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e30:	4b72      	ldr	r3, [pc, #456]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	f023 0203 	bic.w	r2, r3, #3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	496f      	ldr	r1, [pc, #444]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e52:	4b6a      	ldr	r3, [pc, #424]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e58:	f023 020c 	bic.w	r2, r3, #12
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e60:	4966      	ldr	r1, [pc, #408]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e74:	4b61      	ldr	r3, [pc, #388]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	495e      	ldr	r1, [pc, #376]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e96:	4b59      	ldr	r3, [pc, #356]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea4:	4955      	ldr	r1, [pc, #340]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007eb8:	4b50      	ldr	r3, [pc, #320]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	494d      	ldr	r1, [pc, #308]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007eda:	4b48      	ldr	r3, [pc, #288]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee8:	4944      	ldr	r1, [pc, #272]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007efc:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f0a:	493c      	ldr	r1, [pc, #240]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f1e:	4b37      	ldr	r3, [pc, #220]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2c:	4933      	ldr	r1, [pc, #204]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f40:	4b2e      	ldr	r3, [pc, #184]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f4e:	492b      	ldr	r1, [pc, #172]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d011      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f62:	4b26      	ldr	r3, [pc, #152]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f70:	4922      	ldr	r1, [pc, #136]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f80:	d101      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007f82:	2301      	movs	r3, #1
 8007f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007f92:	2301      	movs	r3, #1
 8007f94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fa2:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb0:	4912      	ldr	r1, [pc, #72]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007fc4:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd4:	4909      	ldr	r1, [pc, #36]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d006      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 80d9 	beq.w	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a01      	ldr	r2, [pc, #4]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ffa:	e001      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007ffc:	40023800 	.word	0x40023800
 8008000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008002:	f7fa f86f 	bl	80020e4 <HAL_GetTick>
 8008006:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008008:	e008      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800800a:	f7fa f86b 	bl	80020e4 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b64      	cmp	r3, #100	; 0x64
 8008016:	d901      	bls.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e194      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800801c:	4b6c      	ldr	r3, [pc, #432]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f0      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d021      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008038:	2b00      	cmp	r3, #0
 800803a:	d11d      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800803c:	4b64      	ldr	r3, [pc, #400]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800803e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800804a:	4b61      	ldr	r3, [pc, #388]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800804c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008050:	0e1b      	lsrs	r3, r3, #24
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	019a      	lsls	r2, r3, #6
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	041b      	lsls	r3, r3, #16
 8008062:	431a      	orrs	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	061b      	lsls	r3, r3, #24
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	071b      	lsls	r3, r3, #28
 8008070:	4957      	ldr	r1, [pc, #348]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800808c:	d00a      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008096:	2b00      	cmp	r3, #0
 8008098:	d02e      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a2:	d129      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080a4:	4b4a      	ldr	r3, [pc, #296]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080aa:	0c1b      	lsrs	r3, r3, #16
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080b2:	4b47      	ldr	r3, [pc, #284]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b8:	0f1b      	lsrs	r3, r3, #28
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	019a      	lsls	r2, r3, #6
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	061b      	lsls	r3, r3, #24
 80080d2:	431a      	orrs	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	071b      	lsls	r3, r3, #28
 80080d8:	493d      	ldr	r1, [pc, #244]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80080e0:	4b3b      	ldr	r3, [pc, #236]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e6:	f023 021f 	bic.w	r2, r3, #31
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	3b01      	subs	r3, #1
 80080f0:	4937      	ldr	r1, [pc, #220]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01d      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008104:	4b32      	ldr	r3, [pc, #200]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800810a:	0e1b      	lsrs	r3, r3, #24
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008112:	4b2f      	ldr	r3, [pc, #188]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008118:	0f1b      	lsrs	r3, r3, #28
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	019a      	lsls	r2, r3, #6
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	431a      	orrs	r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	061b      	lsls	r3, r3, #24
 8008132:	431a      	orrs	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	071b      	lsls	r3, r3, #28
 8008138:	4925      	ldr	r1, [pc, #148]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d011      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	019a      	lsls	r2, r3, #6
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	061b      	lsls	r3, r3, #24
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	071b      	lsls	r3, r3, #28
 8008168:	4919      	ldr	r1, [pc, #100]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800816a:	4313      	orrs	r3, r2
 800816c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008170:	4b17      	ldr	r3, [pc, #92]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a16      	ldr	r2, [pc, #88]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800817a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800817c:	f7f9 ffb2 	bl	80020e4 <HAL_GetTick>
 8008180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008182:	e008      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008184:	f7f9 ffae 	bl	80020e4 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b64      	cmp	r3, #100	; 0x64
 8008190:	d901      	bls.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e0d7      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008196:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0f0      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	f040 80cd 	bne.w	8008344 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b6:	f7f9 ff95 	bl	80020e4 <HAL_GetTick>
 80081ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081bc:	e00a      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081be:	f7f9 ff91 	bl	80020e4 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b64      	cmp	r3, #100	; 0x64
 80081ca:	d903      	bls.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e0ba      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80081d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081d4:	4b5e      	ldr	r3, [pc, #376]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e0:	d0ed      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d02e      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d12a      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800820a:	4b51      	ldr	r3, [pc, #324]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800820c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008218:	4b4d      	ldr	r3, [pc, #308]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821e:	0f1b      	lsrs	r3, r3, #28
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	019a      	lsls	r2, r3, #6
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	041b      	lsls	r3, r3, #16
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	061b      	lsls	r3, r3, #24
 8008238:	431a      	orrs	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	071b      	lsls	r3, r3, #28
 800823e:	4944      	ldr	r1, [pc, #272]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008240:	4313      	orrs	r3, r2
 8008242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008246:	4b42      	ldr	r3, [pc, #264]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008254:	3b01      	subs	r3, #1
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	493d      	ldr	r1, [pc, #244]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800825a:	4313      	orrs	r3, r2
 800825c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d022      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008274:	d11d      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008276:	4b36      	ldr	r3, [pc, #216]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	0e1b      	lsrs	r3, r3, #24
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008284:	4b32      	ldr	r3, [pc, #200]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828a:	0f1b      	lsrs	r3, r3, #28
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	019a      	lsls	r2, r3, #6
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	041b      	lsls	r3, r3, #16
 800829e:	431a      	orrs	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	061b      	lsls	r3, r3, #24
 80082a4:	431a      	orrs	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	071b      	lsls	r3, r3, #28
 80082aa:	4929      	ldr	r1, [pc, #164]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0308 	and.w	r3, r3, #8
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d028      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082be:	4b24      	ldr	r3, [pc, #144]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c4:	0e1b      	lsrs	r3, r3, #24
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80082cc:	4b20      	ldr	r3, [pc, #128]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d2:	0c1b      	lsrs	r3, r3, #16
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	019a      	lsls	r2, r3, #6
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	431a      	orrs	r2, r3
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	061b      	lsls	r3, r3, #24
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	071b      	lsls	r3, r3, #28
 80082f2:	4917      	ldr	r1, [pc, #92]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4911      	ldr	r1, [pc, #68]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a0e      	ldr	r2, [pc, #56]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831c:	f7f9 fee2 	bl	80020e4 <HAL_GetTick>
 8008320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008322:	e008      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008324:	f7f9 fede 	bl	80020e4 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b64      	cmp	r3, #100	; 0x64
 8008330:	d901      	bls.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e007      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008336:	4b06      	ldr	r3, [pc, #24]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800833e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008342:	d1ef      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40023800 	.word	0x40023800

08008354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e09d      	b.n	80084a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b00      	cmp	r3, #0
 800836c:	d108      	bne.n	8008380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008376:	d009      	beq.n	800838c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	61da      	str	r2, [r3, #28]
 800837e:	e005      	b.n	800838c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7f8 ff7e 	bl	80012a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083cc:	d902      	bls.n	80083d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	e002      	b.n	80083da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80083d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80083e2:	d007      	beq.n	80083f4 <HAL_SPI_Init+0xa0>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083ec:	d002      	beq.n	80083f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008404:	431a      	orrs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008436:	ea42 0103 	orr.w	r1, r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	0c1b      	lsrs	r3, r3, #16
 8008450:	f003 0204 	and.w	r2, r3, #4
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008470:	ea42 0103 	orr.w	r1, r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008490:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_SPI_TransmitReceive_DMA+0x20>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e16c      	b.n	80087a6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80084e2:	7dbb      	ldrb	r3, [r7, #22]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d00d      	beq.n	8008504 <HAL_SPI_TransmitReceive_DMA+0x58>
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084ee:	d106      	bne.n	80084fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <HAL_SPI_TransmitReceive_DMA+0x52>
 80084f8:	7dbb      	ldrb	r3, [r7, #22]
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d002      	beq.n	8008504 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80084fe:	2302      	movs	r3, #2
 8008500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008502:	e14b      	b.n	800879c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008510:	887b      	ldrh	r3, [r7, #2]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800851a:	e13f      	b.n	800879c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b04      	cmp	r3, #4
 8008526:	d003      	beq.n	8008530 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2205      	movs	r2, #5
 800852c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	887a      	ldrh	r2, [r7, #2]
 8008546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	887a      	ldrh	r2, [r7, #2]
 8008552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	887a      	ldrh	r2, [r7, #2]
 800855a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008578:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008582:	d908      	bls.n	8008596 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	e06f      	b.n	8008676 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085a4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b0:	d126      	bne.n	8008600 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10f      	bne.n	80085de <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085cc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085dc:	e010      	b.n	8008600 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3301      	adds	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860a:	d134      	bne.n	8008676 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800861a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008622:	b29b      	uxth	r3, r3
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d111      	bne.n	8008650 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800863a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008642:	b29b      	uxth	r3, r3
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800864e:	e012      	b.n	8008676 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800865e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008666:	b29b      	uxth	r3, r3
 8008668:	085b      	lsrs	r3, r3, #1
 800866a:	b29b      	uxth	r3, r3
 800866c:	3301      	adds	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b04      	cmp	r3, #4
 8008680:	d108      	bne.n	8008694 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008686:	4a4a      	ldr	r2, [pc, #296]	; (80087b0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008688:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868e:	4a49      	ldr	r2, [pc, #292]	; (80087b4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008690:	63da      	str	r2, [r3, #60]	; 0x3c
 8008692:	e007      	b.n	80086a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008698:	4a47      	ldr	r2, [pc, #284]	; (80087b8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800869a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a0:	4a46      	ldr	r2, [pc, #280]	; (80087bc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80086a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	4a45      	ldr	r2, [pc, #276]	; (80087c0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80086aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b0:	2200      	movs	r2, #0
 80086b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	4619      	mov	r1, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80086ce:	f7fa fcff 	bl	80030d0 <HAL_DMA_Start_IT>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086dc:	f043 0210 	orr.w	r2, r3, #16
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80086f0:	e054      	b.n	800879c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0201 	orr.w	r2, r2, #1
 8008700:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008706:	2200      	movs	r2, #0
 8008708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	2200      	movs	r2, #0
 8008710:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008716:	2200      	movs	r2, #0
 8008718:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871e:	2200      	movs	r2, #0
 8008720:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	4619      	mov	r1, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008738:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800873a:	f7fa fcc9 	bl	80030d0 <HAL_DMA_Start_IT>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00c      	beq.n	800875e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008748:	f043 0210 	orr.w	r2, r3, #16
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800875c:	e01e      	b.n	800879c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b40      	cmp	r3, #64	; 0x40
 800876a:	d007      	beq.n	800877c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800877a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0220 	orr.w	r2, r2, #32
 800878a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0202 	orr.w	r2, r2, #2
 800879a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	08008b65 	.word	0x08008b65
 80087b4:	08008a29 	.word	0x08008a29
 80087b8:	08008b81 	.word	0x08008b81
 80087bc:	08008ad3 	.word	0x08008ad3
 80087c0:	08008b9d 	.word	0x08008b9d

080087c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	099b      	lsrs	r3, r3, #6
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10f      	bne.n	8008808 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00a      	beq.n	8008808 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	099b      	lsrs	r3, r3, #6
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d004      	beq.n	8008808 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
    return;
 8008806:	e0d7      	b.n	80089b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <HAL_SPI_IRQHandler+0x66>
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	09db      	lsrs	r3, r3, #7
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
    return;
 8008828:	e0c6      	b.n	80089b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10c      	bne.n	8008850 <HAL_SPI_IRQHandler+0x8c>
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	099b      	lsrs	r3, r3, #6
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	0a1b      	lsrs	r3, r3, #8
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80b4 	beq.w	80089b8 <HAL_SPI_IRQHandler+0x1f4>
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80ad 	beq.w	80089b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	099b      	lsrs	r3, r3, #6
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d023      	beq.n	80088b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b03      	cmp	r3, #3
 8008874:	d011      	beq.n	800889a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887a:	f043 0204 	orr.w	r2, r3, #4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	617b      	str	r3, [r7, #20]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	e00b      	b.n	80088b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	613b      	str	r3, [r7, #16]
 80088ae:	693b      	ldr	r3, [r7, #16]
        return;
 80088b0:	e082      	b.n	80089b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d014      	beq.n	80088e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c2:	f043 0201 	orr.w	r2, r3, #1
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	0a1b      	lsrs	r3, r3, #8
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00c      	beq.n	800890e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	f043 0208 	orr.w	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008900:	2300      	movs	r3, #0
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	60bb      	str	r3, [r7, #8]
 800890c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	2b00      	cmp	r3, #0
 8008914:	d04f      	beq.n	80089b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008924:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <HAL_SPI_IRQHandler+0x17e>
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d034      	beq.n	80089ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0203 	bic.w	r2, r2, #3
 8008950:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008956:	2b00      	cmp	r3, #0
 8008958:	d011      	beq.n	800897e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895e:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <HAL_SPI_IRQHandler+0x1fc>)
 8008960:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008966:	4618      	mov	r0, r3
 8008968:	f7fa fc82 	bl	8003270 <HAL_DMA_Abort_IT>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	2b00      	cmp	r3, #0
 8008984:	d016      	beq.n	80089b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898a:	4a0d      	ldr	r2, [pc, #52]	; (80089c0 <HAL_SPI_IRQHandler+0x1fc>)
 800898c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	4618      	mov	r0, r3
 8008994:	f7fa fc6c 	bl	8003270 <HAL_DMA_Abort_IT>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80089aa:	e003      	b.n	80089b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f831 	bl	8008a14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80089b2:	e000      	b.n	80089b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80089b4:	bf00      	nop
    return;
 80089b6:	bf00      	nop
  }
}
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	08008bdd 	.word	0x08008bdd

080089c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a36:	f7f9 fb55 	bl	80020e4 <HAL_GetTick>
 8008a3a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a4a:	d03c      	beq.n	8008ac6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0220 	bic.w	r2, r2, #32
 8008a5a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10d      	bne.n	8008a80 <SPI_DMAReceiveCplt+0x58>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a6c:	d108      	bne.n	8008a80 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0203 	bic.w	r2, r2, #3
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e007      	b.n	8008a90 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	2164      	movs	r1, #100	; 0x64
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f9d5 	bl	8008e44 <SPI_EndRxTransaction>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7ff ffa8 	bl	8008a14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008ac4:	e002      	b.n	8008acc <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff ff7c 	bl	80089c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ae0:	f7f9 fb00 	bl	80020e4 <HAL_GetTick>
 8008ae4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af4:	d030      	beq.n	8008b58 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0220 	bic.w	r2, r2, #32
 8008b04:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	2164      	movs	r1, #100	; 0x64
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fa16 	bl	8008f3c <SPI_EndRxTxTransaction>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b1a:	f043 0220 	orr.w	r2, r3, #32
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0203 	bic.w	r2, r2, #3
 8008b30:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff ff5f 	bl	8008a14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b56:	e002      	b.n	8008b5e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff ff3d 	bl	80089d8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7ff ff3a 	bl	80089ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff ff36 	bl	8008a00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b94:	bf00      	nop
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0203 	bic.w	r2, r2, #3
 8008bb8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bbe:	f043 0210 	orr.w	r2, r3, #16
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff ff20 	bl	8008a14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff ff0b 	bl	8008a14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c18:	f7f9 fa64 	bl	80020e4 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4413      	add	r3, r2
 8008c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c28:	f7f9 fa5c 	bl	80020e4 <HAL_GetTick>
 8008c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c2e:	4b39      	ldr	r3, [pc, #228]	; (8008d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	015b      	lsls	r3, r3, #5
 8008c34:	0d1b      	lsrs	r3, r3, #20
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	fb02 f303 	mul.w	r3, r2, r3
 8008c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c3e:	e054      	b.n	8008cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c46:	d050      	beq.n	8008cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c48:	f7f9 fa4c 	bl	80020e4 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d902      	bls.n	8008c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d13d      	bne.n	8008cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c76:	d111      	bne.n	8008c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c80:	d004      	beq.n	8008c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c8a:	d107      	bne.n	8008c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca4:	d10f      	bne.n	8008cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e017      	b.n	8008d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d19b      	bne.n	8008c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000000 	.word	0x20000000

08008d18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08a      	sub	sp, #40	; 0x28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d2a:	f7f9 f9db 	bl	80020e4 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	4413      	add	r3, r2
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008d3a:	f7f9 f9d3 	bl	80020e4 <HAL_GetTick>
 8008d3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d48:	4b3d      	ldr	r3, [pc, #244]	; (8008e40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	00da      	lsls	r2, r3, #3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	0d1b      	lsrs	r3, r3, #20
 8008d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5a:	fb02 f303 	mul.w	r3, r2, r3
 8008d5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008d60:	e060      	b.n	8008e24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008d68:	d107      	bne.n	8008d7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d050      	beq.n	8008e24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d82:	f7f9 f9af 	bl	80020e4 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d902      	bls.n	8008d98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d13d      	bne.n	8008e14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008da6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008db0:	d111      	bne.n	8008dd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dba:	d004      	beq.n	8008dc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc4:	d107      	bne.n	8008dd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dde:	d10f      	bne.n	8008e00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e010      	b.n	8008e36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d196      	bne.n	8008d62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3728      	adds	r7, #40	; 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000000 	.word	0x20000000

08008e44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e58:	d111      	bne.n	8008e7e <SPI_EndRxTransaction+0x3a>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e62:	d004      	beq.n	8008e6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e6c:	d107      	bne.n	8008e7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e86:	d112      	bne.n	8008eae <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2180      	movs	r1, #128	; 0x80
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff feb8 	bl	8008c08 <SPI_WaitFlagStateUntilTimeout>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d021      	beq.n	8008ee2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea2:	f043 0220 	orr.w	r2, r3, #32
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e03d      	b.n	8008f2a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008eae:	4b21      	ldr	r3, [pc, #132]	; (8008f34 <SPI_EndRxTransaction+0xf0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a21      	ldr	r2, [pc, #132]	; (8008f38 <SPI_EndRxTransaction+0xf4>)
 8008eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb8:	0d5b      	lsrs	r3, r3, #21
 8008eba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ebe:	fb02 f303 	mul.w	r3, r2, r3
 8008ec2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eda:	2b80      	cmp	r3, #128	; 0x80
 8008edc:	d0f2      	beq.n	8008ec4 <SPI_EndRxTransaction+0x80>
 8008ede:	e000      	b.n	8008ee2 <SPI_EndRxTransaction+0x9e>
        break;
 8008ee0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eea:	d11d      	bne.n	8008f28 <SPI_EndRxTransaction+0xe4>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef4:	d004      	beq.n	8008f00 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008efe:	d113      	bne.n	8008f28 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff ff03 	bl	8008d18 <SPI_WaitFifoStateUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1c:	f043 0220 	orr.w	r2, r3, #32
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e000      	b.n	8008f2a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000000 	.word	0x20000000
 8008f38:	165e9f81 	.word	0x165e9f81

08008f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fedf 	bl	8008d18 <SPI_WaitFifoStateUntilTimeout>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f64:	f043 0220 	orr.w	r2, r3, #32
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e046      	b.n	8008ffe <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f70:	4b25      	ldr	r3, [pc, #148]	; (8009008 <SPI_EndRxTxTransaction+0xcc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a25      	ldr	r2, [pc, #148]	; (800900c <SPI_EndRxTxTransaction+0xd0>)
 8008f76:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7a:	0d5b      	lsrs	r3, r3, #21
 8008f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f80:	fb02 f303 	mul.w	r3, r2, r3
 8008f84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f8e:	d112      	bne.n	8008fb6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	2180      	movs	r1, #128	; 0x80
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fe34 	bl	8008c08 <SPI_WaitFlagStateUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e023      	b.n	8008ffe <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00a      	beq.n	8008fd2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fcc:	2b80      	cmp	r3, #128	; 0x80
 8008fce:	d0f2      	beq.n	8008fb6 <SPI_EndRxTxTransaction+0x7a>
 8008fd0:	e000      	b.n	8008fd4 <SPI_EndRxTxTransaction+0x98>
        break;
 8008fd2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7ff fe99 	bl	8008d18 <SPI_WaitFifoStateUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff0:	f043 0220 	orr.w	r2, r3, #32
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e000      	b.n	8008ffe <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20000000 	.word	0x20000000
 800900c:	165e9f81 	.word	0x165e9f81

08009010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e049      	b.n	80090b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7f8 fac2 	bl	80015c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3304      	adds	r3, #4
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f000 fa46 	bl	80094e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d122      	bne.n	800911a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d11b      	bne.n	800911a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f06f 0202 	mvn.w	r2, #2
 80090ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f9cf 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 8009106:	e005      	b.n	8009114 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9c1 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9d2 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b04      	cmp	r3, #4
 8009126:	d122      	bne.n	800916e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b04      	cmp	r3, #4
 8009134:	d11b      	bne.n	800916e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f06f 0204 	mvn.w	r2, #4
 800913e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9a5 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 800915a:	e005      	b.n	8009168 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f997 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9a8 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b08      	cmp	r3, #8
 800917a:	d122      	bne.n	80091c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b08      	cmp	r3, #8
 8009188:	d11b      	bne.n	80091c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f06f 0208 	mvn.w	r2, #8
 8009192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2204      	movs	r2, #4
 8009198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f97b 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 80091ae:	e005      	b.n	80091bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f96d 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f97e 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	2b10      	cmp	r3, #16
 80091ce:	d122      	bne.n	8009216 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b10      	cmp	r3, #16
 80091dc:	d11b      	bne.n	8009216 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f06f 0210 	mvn.w	r2, #16
 80091e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2208      	movs	r2, #8
 80091ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f951 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 8009202:	e005      	b.n	8009210 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f943 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f954 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b01      	cmp	r3, #1
 8009222:	d10e      	bne.n	8009242 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b01      	cmp	r3, #1
 8009230:	d107      	bne.n	8009242 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f06f 0201 	mvn.w	r2, #1
 800923a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f00d fa51 	bl	80166e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924c:	2b80      	cmp	r3, #128	; 0x80
 800924e:	d10e      	bne.n	800926e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d107      	bne.n	800926e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb0b 	bl	8009884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927c:	d10e      	bne.n	800929c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009288:	2b80      	cmp	r3, #128	; 0x80
 800928a:	d107      	bne.n	800929c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fafe 	bl	8009898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d10e      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b40      	cmp	r3, #64	; 0x40
 80092b6:	d107      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f902 	bl	80094cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d10e      	bne.n	80092f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d107      	bne.n	80092f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0220 	mvn.w	r2, #32
 80092ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fabe 	bl	8009870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_TIM_ConfigClockSource+0x1c>
 8009314:	2302      	movs	r3, #2
 8009316:	e0b4      	b.n	8009482 <HAL_TIM_ConfigClockSource+0x186>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	4b56      	ldr	r3, [pc, #344]	; (800948c <HAL_TIM_ConfigClockSource+0x190>)
 8009334:	4013      	ands	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800933e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009350:	d03e      	beq.n	80093d0 <HAL_TIM_ConfigClockSource+0xd4>
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009356:	f200 8087 	bhi.w	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 800935a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935e:	f000 8086 	beq.w	800946e <HAL_TIM_ConfigClockSource+0x172>
 8009362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009366:	d87f      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009368:	2b70      	cmp	r3, #112	; 0x70
 800936a:	d01a      	beq.n	80093a2 <HAL_TIM_ConfigClockSource+0xa6>
 800936c:	2b70      	cmp	r3, #112	; 0x70
 800936e:	d87b      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009370:	2b60      	cmp	r3, #96	; 0x60
 8009372:	d050      	beq.n	8009416 <HAL_TIM_ConfigClockSource+0x11a>
 8009374:	2b60      	cmp	r3, #96	; 0x60
 8009376:	d877      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009378:	2b50      	cmp	r3, #80	; 0x50
 800937a:	d03c      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0xfa>
 800937c:	2b50      	cmp	r3, #80	; 0x50
 800937e:	d873      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009380:	2b40      	cmp	r3, #64	; 0x40
 8009382:	d058      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x13a>
 8009384:	2b40      	cmp	r3, #64	; 0x40
 8009386:	d86f      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009388:	2b30      	cmp	r3, #48	; 0x30
 800938a:	d064      	beq.n	8009456 <HAL_TIM_ConfigClockSource+0x15a>
 800938c:	2b30      	cmp	r3, #48	; 0x30
 800938e:	d86b      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009390:	2b20      	cmp	r3, #32
 8009392:	d060      	beq.n	8009456 <HAL_TIM_ConfigClockSource+0x15a>
 8009394:	2b20      	cmp	r3, #32
 8009396:	d867      	bhi.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d05c      	beq.n	8009456 <HAL_TIM_ConfigClockSource+0x15a>
 800939c:	2b10      	cmp	r3, #16
 800939e:	d05a      	beq.n	8009456 <HAL_TIM_ConfigClockSource+0x15a>
 80093a0:	e062      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	6899      	ldr	r1, [r3, #8]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f000 f9af 	bl	8009714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	609a      	str	r2, [r3, #8]
      break;
 80093ce:	e04f      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	6899      	ldr	r1, [r3, #8]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f000 f998 	bl	8009714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093f2:	609a      	str	r2, [r3, #8]
      break;
 80093f4:	e03c      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6859      	ldr	r1, [r3, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	461a      	mov	r2, r3
 8009404:	f000 f90c 	bl	8009620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2150      	movs	r1, #80	; 0x50
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f965 	bl	80096de <TIM_ITRx_SetConfig>
      break;
 8009414:	e02c      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	6859      	ldr	r1, [r3, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	461a      	mov	r2, r3
 8009424:	f000 f92b 	bl	800967e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2160      	movs	r1, #96	; 0x60
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f955 	bl	80096de <TIM_ITRx_SetConfig>
      break;
 8009434:	e01c      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6859      	ldr	r1, [r3, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	461a      	mov	r2, r3
 8009444:	f000 f8ec 	bl	8009620 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2140      	movs	r1, #64	; 0x40
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f945 	bl	80096de <TIM_ITRx_SetConfig>
      break;
 8009454:	e00c      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4619      	mov	r1, r3
 8009460:	4610      	mov	r0, r2
 8009462:	f000 f93c 	bl	80096de <TIM_ITRx_SetConfig>
      break;
 8009466:	e003      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	73fb      	strb	r3, [r7, #15]
      break;
 800946c:	e000      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800946e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	fffeff88 	.word	0xfffeff88

08009490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a40      	ldr	r2, [pc, #256]	; (80095f4 <TIM_Base_SetConfig+0x114>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d013      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fe:	d00f      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a3d      	ldr	r2, [pc, #244]	; (80095f8 <TIM_Base_SetConfig+0x118>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00b      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a3c      	ldr	r2, [pc, #240]	; (80095fc <TIM_Base_SetConfig+0x11c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d007      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a3b      	ldr	r2, [pc, #236]	; (8009600 <TIM_Base_SetConfig+0x120>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d003      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a3a      	ldr	r2, [pc, #232]	; (8009604 <TIM_Base_SetConfig+0x124>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d108      	bne.n	8009532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a2f      	ldr	r2, [pc, #188]	; (80095f4 <TIM_Base_SetConfig+0x114>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d02b      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009540:	d027      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2c      	ldr	r2, [pc, #176]	; (80095f8 <TIM_Base_SetConfig+0x118>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d023      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2b      	ldr	r2, [pc, #172]	; (80095fc <TIM_Base_SetConfig+0x11c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d01f      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a2a      	ldr	r2, [pc, #168]	; (8009600 <TIM_Base_SetConfig+0x120>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01b      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a29      	ldr	r2, [pc, #164]	; (8009604 <TIM_Base_SetConfig+0x124>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d017      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a28      	ldr	r2, [pc, #160]	; (8009608 <TIM_Base_SetConfig+0x128>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a27      	ldr	r2, [pc, #156]	; (800960c <TIM_Base_SetConfig+0x12c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00f      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a26      	ldr	r2, [pc, #152]	; (8009610 <TIM_Base_SetConfig+0x130>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00b      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a25      	ldr	r2, [pc, #148]	; (8009614 <TIM_Base_SetConfig+0x134>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a24      	ldr	r2, [pc, #144]	; (8009618 <TIM_Base_SetConfig+0x138>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d003      	beq.n	8009592 <TIM_Base_SetConfig+0xb2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a23      	ldr	r2, [pc, #140]	; (800961c <TIM_Base_SetConfig+0x13c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d108      	bne.n	80095a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a0a      	ldr	r2, [pc, #40]	; (80095f4 <TIM_Base_SetConfig+0x114>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_Base_SetConfig+0xf8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a0c      	ldr	r2, [pc, #48]	; (8009604 <TIM_Base_SetConfig+0x124>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d103      	bne.n	80095e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	615a      	str	r2, [r3, #20]
}
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40010000 	.word	0x40010000
 80095f8:	40000400 	.word	0x40000400
 80095fc:	40000800 	.word	0x40000800
 8009600:	40000c00 	.word	0x40000c00
 8009604:	40010400 	.word	0x40010400
 8009608:	40014000 	.word	0x40014000
 800960c:	40014400 	.word	0x40014400
 8009610:	40014800 	.word	0x40014800
 8009614:	40001800 	.word	0x40001800
 8009618:	40001c00 	.word	0x40001c00
 800961c:	40002000 	.word	0x40002000

08009620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f023 0201 	bic.w	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800964a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	011b      	lsls	r3, r3, #4
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f023 030a 	bic.w	r3, r3, #10
 800965c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	621a      	str	r2, [r3, #32]
}
 8009672:	bf00      	nop
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800967e:	b480      	push	{r7}
 8009680:	b087      	sub	sp, #28
 8009682:	af00      	add	r7, sp, #0
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f023 0210 	bic.w	r2, r3, #16
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	031b      	lsls	r3, r3, #12
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	621a      	str	r2, [r3, #32]
}
 80096d2:	bf00      	nop
 80096d4:	371c      	adds	r7, #28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f043 0307 	orr.w	r3, r3, #7
 8009700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	609a      	str	r2, [r3, #8]
}
 8009708:	bf00      	nop
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800972e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	021a      	lsls	r2, r3, #8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	431a      	orrs	r2, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	4313      	orrs	r3, r2
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	609a      	str	r2, [r3, #8]
}
 8009748:	bf00      	nop
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009768:	2302      	movs	r3, #2
 800976a:	e06d      	b.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a30      	ldr	r2, [pc, #192]	; (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a2f      	ldr	r2, [pc, #188]	; (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d108      	bne.n	80097b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a20      	ldr	r2, [pc, #128]	; (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d022      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d01d      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a1d      	ldr	r2, [pc, #116]	; (800985c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d018      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d013      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a1a      	ldr	r2, [pc, #104]	; (8009864 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00e      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a15      	ldr	r2, [pc, #84]	; (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d009      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a16      	ldr	r2, [pc, #88]	; (8009868 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d004      	beq.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a15      	ldr	r2, [pc, #84]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d10c      	bne.n	8009836 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009822:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	4313      	orrs	r3, r2
 800982c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	40010000 	.word	0x40010000
 8009858:	40010400 	.word	0x40010400
 800985c:	40000400 	.word	0x40000400
 8009860:	40000800 	.word	0x40000800
 8009864:	40000c00 	.word	0x40000c00
 8009868:	40014000 	.word	0x40014000
 800986c:	40001800 	.word	0x40001800

08009870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e040      	b.n	8009940 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7f7 fed4 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2224      	movs	r2, #36	; 0x24
 80098d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0201 	bic.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fd08 	bl	800a300 <UART_SetConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e022      	b.n	8009940 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 ff60 	bl	800a7c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 ffe7 	bl	800a90c <UART_CheckIdleState>
 800993e:	4603      	mov	r3, r0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	4613      	mov	r3, r2
 8009956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995c:	2b20      	cmp	r3, #32
 800995e:	d171      	bne.n	8009a44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <HAL_UART_Transmit+0x24>
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e06a      	b.n	8009a46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2221      	movs	r2, #33	; 0x21
 800997c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800997e:	f7f8 fbb1 	bl	80020e4 <HAL_GetTick>
 8009982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	88fa      	ldrh	r2, [r7, #6]
 8009988:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999c:	d108      	bne.n	80099b0 <HAL_UART_Transmit+0x68>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	e003      	b.n	80099b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099b8:	e02c      	b.n	8009a14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2200      	movs	r2, #0
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 ffd8 	bl	800a97a <UART_WaitOnFlagUntilTimeout>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e038      	b.n	8009a46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	3302      	adds	r3, #2
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	e007      	b.n	8009a02 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	3301      	adds	r3, #1
 8009a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1cc      	bne.n	80099ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2200      	movs	r2, #0
 8009a28:	2140      	movs	r1, #64	; 0x40
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 ffa5 	bl	800a97a <UART_WaitOnFlagUntilTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e005      	b.n	8009a46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e000      	b.n	8009a46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
  }
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b08a      	sub	sp, #40	; 0x28
 8009a52:	af02      	add	r7, sp, #8
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	603b      	str	r3, [r7, #0]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	f040 80b1 	bne.w	8009bcc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <HAL_UART_Receive+0x28>
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e0a9      	b.n	8009bce <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2222      	movs	r2, #34	; 0x22
 8009a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a90:	f7f8 fb28 	bl	80020e4 <HAL_GetTick>
 8009a94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	88fa      	ldrh	r2, [r7, #6]
 8009a9a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	88fa      	ldrh	r2, [r7, #6]
 8009aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aae:	d10e      	bne.n	8009ace <HAL_UART_Receive+0x80>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d105      	bne.n	8009ac4 <HAL_UART_Receive+0x76>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ac2:	e02d      	b.n	8009b20 <HAL_UART_Receive+0xd2>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	22ff      	movs	r2, #255	; 0xff
 8009ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009acc:	e028      	b.n	8009b20 <HAL_UART_Receive+0xd2>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10d      	bne.n	8009af2 <HAL_UART_Receive+0xa4>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <HAL_UART_Receive+0x9a>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	22ff      	movs	r2, #255	; 0xff
 8009ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ae6:	e01b      	b.n	8009b20 <HAL_UART_Receive+0xd2>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	227f      	movs	r2, #127	; 0x7f
 8009aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009af0:	e016      	b.n	8009b20 <HAL_UART_Receive+0xd2>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009afa:	d10d      	bne.n	8009b18 <HAL_UART_Receive+0xca>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d104      	bne.n	8009b0e <HAL_UART_Receive+0xc0>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	227f      	movs	r2, #127	; 0x7f
 8009b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b0c:	e008      	b.n	8009b20 <HAL_UART_Receive+0xd2>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	223f      	movs	r2, #63	; 0x3f
 8009b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b16:	e003      	b.n	8009b20 <HAL_UART_Receive+0xd2>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b30:	d108      	bne.n	8009b44 <HAL_UART_Receive+0xf6>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	e003      	b.n	8009b4c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009b4c:	e032      	b.n	8009bb4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2200      	movs	r2, #0
 8009b56:	2120      	movs	r1, #32
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 ff0e 	bl	800a97a <UART_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e032      	b.n	8009bce <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10c      	bne.n	8009b88 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	8a7b      	ldrh	r3, [r7, #18]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	3302      	adds	r3, #2
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	e00c      	b.n	8009ba2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	8a7b      	ldrh	r3, [r7, #18]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	4013      	ands	r3, r2
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1c6      	bne.n	8009b4e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e000      	b.n	8009bce <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009bcc:	2302      	movs	r3, #2
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b08b      	sub	sp, #44	; 0x2c
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	4613      	mov	r3, r2
 8009be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	d147      	bne.n	8009c7e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <HAL_UART_Transmit_IT+0x22>
 8009bf4:	88fb      	ldrh	r3, [r7, #6]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e040      	b.n	8009c80 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	88fa      	ldrh	r2, [r7, #6]
 8009c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2221      	movs	r2, #33	; 0x21
 8009c26:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d107      	bne.n	8009c42 <HAL_UART_Transmit_IT+0x6a>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a13      	ldr	r2, [pc, #76]	; (8009c8c <HAL_UART_Transmit_IT+0xb4>)
 8009c3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c40:	e002      	b.n	8009c48 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4a12      	ldr	r2, [pc, #72]	; (8009c90 <HAL_UART_Transmit_IT+0xb8>)
 8009c46:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	613b      	str	r3, [r7, #16]
   return(result);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	623b      	str	r3, [r7, #32]
 8009c68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	69f9      	ldr	r1, [r7, #28]
 8009c6c:	6a3a      	ldr	r2, [r7, #32]
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e6      	bne.n	8009c48 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e000      	b.n	8009c80 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009c7e:	2302      	movs	r3, #2
  }
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	372c      	adds	r7, #44	; 0x2c
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	0800ae3f 	.word	0x0800ae3f
 8009c90:	0800ad89 	.word	0x0800ad89

08009c94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08a      	sub	sp, #40	; 0x28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d132      	bne.n	8009d12 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_UART_Receive_IT+0x24>
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e02b      	b.n	8009d14 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d018      	beq.n	8009d02 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	623b      	str	r3, [r7, #32]
 8009cf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	69f9      	ldr	r1, [r7, #28]
 8009cf4:	6a3a      	ldr	r2, [r7, #32]
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e6      	bne.n	8009cd0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d02:	88fb      	ldrh	r3, [r7, #6]
 8009d04:	461a      	mov	r2, r3
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 fefd 	bl	800ab08 <UART_Start_Receive_IT>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	e000      	b.n	8009d14 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009d12:	2302      	movs	r3, #2
  }
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3728      	adds	r7, #40	; 0x28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b0ba      	sub	sp, #232	; 0xe8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d46:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d115      	bne.n	8009d84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00f      	beq.n	8009d84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8297 	beq.w	800a2a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	4798      	blx	r3
      }
      return;
 8009d82:	e291      	b.n	800a2a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 8117 	beq.w	8009fbc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009d9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d9e:	4b85      	ldr	r3, [pc, #532]	; (8009fb4 <HAL_UART_IRQHandler+0x298>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 810a 	beq.w	8009fbc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d011      	beq.n	8009dd8 <HAL_UART_IRQHandler+0xbc>
 8009db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dce:	f043 0201 	orr.w	r2, r3, #1
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d011      	beq.n	8009e08 <HAL_UART_IRQHandler+0xec>
 8009de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2202      	movs	r2, #2
 8009df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dfe:	f043 0204 	orr.w	r2, r3, #4
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d011      	beq.n	8009e38 <HAL_UART_IRQHandler+0x11c>
 8009e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2204      	movs	r2, #4
 8009e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2e:	f043 0202 	orr.w	r2, r3, #2
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d017      	beq.n	8009e74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d105      	bne.n	8009e5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2208      	movs	r2, #8
 8009e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e6a:	f043 0208 	orr.w	r2, r3, #8
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d012      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x18a>
 8009e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00c      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9c:	f043 0220 	orr.w	r2, r3, #32
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 81fd 	beq.w	800a2ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00d      	beq.n	8009eda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec2:	f003 0320 	and.w	r3, r3, #32
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d007      	beq.n	8009eda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eee:	2b40      	cmp	r3, #64	; 0x40
 8009ef0:	d005      	beq.n	8009efe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ef6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d04f      	beq.n	8009f9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fec8 	bl	800ac94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d141      	bne.n	8009f96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3308      	adds	r3, #8
 8009f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1d9      	bne.n	8009f12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d013      	beq.n	8009f8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f6a:	4a13      	ldr	r2, [pc, #76]	; (8009fb8 <HAL_UART_IRQHandler+0x29c>)
 8009f6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 f97c 	bl	8003270 <HAL_DMA_Abort_IT>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d017      	beq.n	8009fae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f8c:	e00f      	b.n	8009fae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f9a0 	bl	800a2d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f94:	e00b      	b.n	8009fae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f99c 	bl	800a2d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9c:	e007      	b.n	8009fae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f998 	bl	800a2d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009fac:	e17e      	b.n	800a2ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fae:	bf00      	nop
    return;
 8009fb0:	e17c      	b.n	800a2ac <HAL_UART_IRQHandler+0x590>
 8009fb2:	bf00      	nop
 8009fb4:	04000120 	.word	0x04000120
 8009fb8:	0800ad5d 	.word	0x0800ad5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	f040 814c 	bne.w	800a25e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 8145 	beq.w	800a25e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f000 813e 	beq.w	800a25e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2210      	movs	r2, #16
 8009fe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff4:	2b40      	cmp	r3, #64	; 0x40
 8009ff6:	f040 80b6 	bne.w	800a166 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a006:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 8150 	beq.w	800a2b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a01a:	429a      	cmp	r2, r3
 800a01c:	f080 8148 	bcs.w	800a2b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a026:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a034:	f000 8086 	beq.w	800a144 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a04c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a066:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a06e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a07a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1da      	bne.n	800a038 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e1      	bne.n	800a082 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e3      	bne.n	800a0be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a114:	f023 0310 	bic.w	r3, r3, #16
 800a118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a126:	65bb      	str	r3, [r7, #88]	; 0x58
 800a128:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a12c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e4      	bne.n	800a104 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f9 f826 	bl	8003190 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a156:	b29b      	uxth	r3, r3
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f8c2 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a164:	e0a4      	b.n	800a2b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a172:	b29b      	uxth	r3, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a180:	b29b      	uxth	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 8096 	beq.w	800a2b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 8091 	beq.w	800a2b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e4      	bne.n	800a192 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1ec:	633a      	str	r2, [r7, #48]	; 0x30
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e3      	bne.n	800a1c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2220      	movs	r2, #32
 800a204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	60fb      	str	r3, [r7, #12]
   return(result);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f023 0310 	bic.w	r3, r3, #16
 800a228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a236:	61fb      	str	r3, [r7, #28]
 800a238:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	69b9      	ldr	r1, [r7, #24]
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	617b      	str	r3, [r7, #20]
   return(result);
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e4      	bne.n	800a214 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2202      	movs	r2, #2
 800a24e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f846 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a25c:	e02a      	b.n	800a2b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00e      	beq.n	800a288 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	d008      	beq.n	800a288 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d01c      	beq.n	800a2b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	4798      	blx	r3
    }
    return;
 800a286:	e017      	b.n	800a2b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a290:	2b00      	cmp	r3, #0
 800a292:	d012      	beq.n	800a2ba <HAL_UART_IRQHandler+0x59e>
 800a294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00c      	beq.n	800a2ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fe2c 	bl	800aefe <UART_EndTransmit_IT>
    return;
 800a2a6:	e008      	b.n	800a2ba <HAL_UART_IRQHandler+0x59e>
      return;
 800a2a8:	bf00      	nop
 800a2aa:	e006      	b.n	800a2ba <HAL_UART_IRQHandler+0x59e>
    return;
 800a2ac:	bf00      	nop
 800a2ae:	e004      	b.n	800a2ba <HAL_UART_IRQHandler+0x59e>
      return;
 800a2b0:	bf00      	nop
 800a2b2:	e002      	b.n	800a2ba <HAL_UART_IRQHandler+0x59e>
      return;
 800a2b4:	bf00      	nop
 800a2b6:	e000      	b.n	800a2ba <HAL_UART_IRQHandler+0x59e>
    return;
 800a2b8:	bf00      	nop
  }

}
 800a2ba:	37e8      	adds	r7, #232	; 0xe8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	431a      	orrs	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	4313      	orrs	r3, r2
 800a322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4ba6      	ldr	r3, [pc, #664]	; (800a5c4 <UART_SetConfig+0x2c4>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6812      	ldr	r2, [r2, #0]
 800a332:	6979      	ldr	r1, [r7, #20]
 800a334:	430b      	orrs	r3, r1
 800a336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	430a      	orrs	r2, r1
 800a370:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a94      	ldr	r2, [pc, #592]	; (800a5c8 <UART_SetConfig+0x2c8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d120      	bne.n	800a3be <UART_SetConfig+0xbe>
 800a37c:	4b93      	ldr	r3, [pc, #588]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	2b03      	cmp	r3, #3
 800a388:	d816      	bhi.n	800a3b8 <UART_SetConfig+0xb8>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <UART_SetConfig+0x90>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3a1 	.word	0x0800a3a1
 800a394:	0800a3ad 	.word	0x0800a3ad
 800a398:	0800a3a7 	.word	0x0800a3a7
 800a39c:	0800a3b3 	.word	0x0800a3b3
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	77fb      	strb	r3, [r7, #31]
 800a3a4:	e150      	b.n	800a648 <UART_SetConfig+0x348>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	77fb      	strb	r3, [r7, #31]
 800a3aa:	e14d      	b.n	800a648 <UART_SetConfig+0x348>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	77fb      	strb	r3, [r7, #31]
 800a3b0:	e14a      	b.n	800a648 <UART_SetConfig+0x348>
 800a3b2:	2308      	movs	r3, #8
 800a3b4:	77fb      	strb	r3, [r7, #31]
 800a3b6:	e147      	b.n	800a648 <UART_SetConfig+0x348>
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	77fb      	strb	r3, [r7, #31]
 800a3bc:	e144      	b.n	800a648 <UART_SetConfig+0x348>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a83      	ldr	r2, [pc, #524]	; (800a5d0 <UART_SetConfig+0x2d0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d132      	bne.n	800a42e <UART_SetConfig+0x12e>
 800a3c8:	4b80      	ldr	r3, [pc, #512]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ce:	f003 030c 	and.w	r3, r3, #12
 800a3d2:	2b0c      	cmp	r3, #12
 800a3d4:	d828      	bhi.n	800a428 <UART_SetConfig+0x128>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <UART_SetConfig+0xdc>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a429 	.word	0x0800a429
 800a3e4:	0800a429 	.word	0x0800a429
 800a3e8:	0800a429 	.word	0x0800a429
 800a3ec:	0800a41d 	.word	0x0800a41d
 800a3f0:	0800a429 	.word	0x0800a429
 800a3f4:	0800a429 	.word	0x0800a429
 800a3f8:	0800a429 	.word	0x0800a429
 800a3fc:	0800a417 	.word	0x0800a417
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a429 	.word	0x0800a429
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a423 	.word	0x0800a423
 800a410:	2300      	movs	r3, #0
 800a412:	77fb      	strb	r3, [r7, #31]
 800a414:	e118      	b.n	800a648 <UART_SetConfig+0x348>
 800a416:	2302      	movs	r3, #2
 800a418:	77fb      	strb	r3, [r7, #31]
 800a41a:	e115      	b.n	800a648 <UART_SetConfig+0x348>
 800a41c:	2304      	movs	r3, #4
 800a41e:	77fb      	strb	r3, [r7, #31]
 800a420:	e112      	b.n	800a648 <UART_SetConfig+0x348>
 800a422:	2308      	movs	r3, #8
 800a424:	77fb      	strb	r3, [r7, #31]
 800a426:	e10f      	b.n	800a648 <UART_SetConfig+0x348>
 800a428:	2310      	movs	r3, #16
 800a42a:	77fb      	strb	r3, [r7, #31]
 800a42c:	e10c      	b.n	800a648 <UART_SetConfig+0x348>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a68      	ldr	r2, [pc, #416]	; (800a5d4 <UART_SetConfig+0x2d4>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d120      	bne.n	800a47a <UART_SetConfig+0x17a>
 800a438:	4b64      	ldr	r3, [pc, #400]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a43e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a442:	2b30      	cmp	r3, #48	; 0x30
 800a444:	d013      	beq.n	800a46e <UART_SetConfig+0x16e>
 800a446:	2b30      	cmp	r3, #48	; 0x30
 800a448:	d814      	bhi.n	800a474 <UART_SetConfig+0x174>
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d009      	beq.n	800a462 <UART_SetConfig+0x162>
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d810      	bhi.n	800a474 <UART_SetConfig+0x174>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d002      	beq.n	800a45c <UART_SetConfig+0x15c>
 800a456:	2b10      	cmp	r3, #16
 800a458:	d006      	beq.n	800a468 <UART_SetConfig+0x168>
 800a45a:	e00b      	b.n	800a474 <UART_SetConfig+0x174>
 800a45c:	2300      	movs	r3, #0
 800a45e:	77fb      	strb	r3, [r7, #31]
 800a460:	e0f2      	b.n	800a648 <UART_SetConfig+0x348>
 800a462:	2302      	movs	r3, #2
 800a464:	77fb      	strb	r3, [r7, #31]
 800a466:	e0ef      	b.n	800a648 <UART_SetConfig+0x348>
 800a468:	2304      	movs	r3, #4
 800a46a:	77fb      	strb	r3, [r7, #31]
 800a46c:	e0ec      	b.n	800a648 <UART_SetConfig+0x348>
 800a46e:	2308      	movs	r3, #8
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e0e9      	b.n	800a648 <UART_SetConfig+0x348>
 800a474:	2310      	movs	r3, #16
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e0e6      	b.n	800a648 <UART_SetConfig+0x348>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a56      	ldr	r2, [pc, #344]	; (800a5d8 <UART_SetConfig+0x2d8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d120      	bne.n	800a4c6 <UART_SetConfig+0x1c6>
 800a484:	4b51      	ldr	r3, [pc, #324]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a48e:	2bc0      	cmp	r3, #192	; 0xc0
 800a490:	d013      	beq.n	800a4ba <UART_SetConfig+0x1ba>
 800a492:	2bc0      	cmp	r3, #192	; 0xc0
 800a494:	d814      	bhi.n	800a4c0 <UART_SetConfig+0x1c0>
 800a496:	2b80      	cmp	r3, #128	; 0x80
 800a498:	d009      	beq.n	800a4ae <UART_SetConfig+0x1ae>
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	d810      	bhi.n	800a4c0 <UART_SetConfig+0x1c0>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <UART_SetConfig+0x1a8>
 800a4a2:	2b40      	cmp	r3, #64	; 0x40
 800a4a4:	d006      	beq.n	800a4b4 <UART_SetConfig+0x1b4>
 800a4a6:	e00b      	b.n	800a4c0 <UART_SetConfig+0x1c0>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	77fb      	strb	r3, [r7, #31]
 800a4ac:	e0cc      	b.n	800a648 <UART_SetConfig+0x348>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	77fb      	strb	r3, [r7, #31]
 800a4b2:	e0c9      	b.n	800a648 <UART_SetConfig+0x348>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	77fb      	strb	r3, [r7, #31]
 800a4b8:	e0c6      	b.n	800a648 <UART_SetConfig+0x348>
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	77fb      	strb	r3, [r7, #31]
 800a4be:	e0c3      	b.n	800a648 <UART_SetConfig+0x348>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	77fb      	strb	r3, [r7, #31]
 800a4c4:	e0c0      	b.n	800a648 <UART_SetConfig+0x348>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a44      	ldr	r2, [pc, #272]	; (800a5dc <UART_SetConfig+0x2dc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d125      	bne.n	800a51c <UART_SetConfig+0x21c>
 800a4d0:	4b3e      	ldr	r3, [pc, #248]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4de:	d017      	beq.n	800a510 <UART_SetConfig+0x210>
 800a4e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4e4:	d817      	bhi.n	800a516 <UART_SetConfig+0x216>
 800a4e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ea:	d00b      	beq.n	800a504 <UART_SetConfig+0x204>
 800a4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4f0:	d811      	bhi.n	800a516 <UART_SetConfig+0x216>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <UART_SetConfig+0x1fe>
 800a4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4fa:	d006      	beq.n	800a50a <UART_SetConfig+0x20a>
 800a4fc:	e00b      	b.n	800a516 <UART_SetConfig+0x216>
 800a4fe:	2300      	movs	r3, #0
 800a500:	77fb      	strb	r3, [r7, #31]
 800a502:	e0a1      	b.n	800a648 <UART_SetConfig+0x348>
 800a504:	2302      	movs	r3, #2
 800a506:	77fb      	strb	r3, [r7, #31]
 800a508:	e09e      	b.n	800a648 <UART_SetConfig+0x348>
 800a50a:	2304      	movs	r3, #4
 800a50c:	77fb      	strb	r3, [r7, #31]
 800a50e:	e09b      	b.n	800a648 <UART_SetConfig+0x348>
 800a510:	2308      	movs	r3, #8
 800a512:	77fb      	strb	r3, [r7, #31]
 800a514:	e098      	b.n	800a648 <UART_SetConfig+0x348>
 800a516:	2310      	movs	r3, #16
 800a518:	77fb      	strb	r3, [r7, #31]
 800a51a:	e095      	b.n	800a648 <UART_SetConfig+0x348>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a2f      	ldr	r2, [pc, #188]	; (800a5e0 <UART_SetConfig+0x2e0>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d125      	bne.n	800a572 <UART_SetConfig+0x272>
 800a526:	4b29      	ldr	r3, [pc, #164]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a534:	d017      	beq.n	800a566 <UART_SetConfig+0x266>
 800a536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a53a:	d817      	bhi.n	800a56c <UART_SetConfig+0x26c>
 800a53c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a540:	d00b      	beq.n	800a55a <UART_SetConfig+0x25a>
 800a542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a546:	d811      	bhi.n	800a56c <UART_SetConfig+0x26c>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <UART_SetConfig+0x254>
 800a54c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a550:	d006      	beq.n	800a560 <UART_SetConfig+0x260>
 800a552:	e00b      	b.n	800a56c <UART_SetConfig+0x26c>
 800a554:	2301      	movs	r3, #1
 800a556:	77fb      	strb	r3, [r7, #31]
 800a558:	e076      	b.n	800a648 <UART_SetConfig+0x348>
 800a55a:	2302      	movs	r3, #2
 800a55c:	77fb      	strb	r3, [r7, #31]
 800a55e:	e073      	b.n	800a648 <UART_SetConfig+0x348>
 800a560:	2304      	movs	r3, #4
 800a562:	77fb      	strb	r3, [r7, #31]
 800a564:	e070      	b.n	800a648 <UART_SetConfig+0x348>
 800a566:	2308      	movs	r3, #8
 800a568:	77fb      	strb	r3, [r7, #31]
 800a56a:	e06d      	b.n	800a648 <UART_SetConfig+0x348>
 800a56c:	2310      	movs	r3, #16
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e06a      	b.n	800a648 <UART_SetConfig+0x348>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a1b      	ldr	r2, [pc, #108]	; (800a5e4 <UART_SetConfig+0x2e4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d138      	bne.n	800a5ee <UART_SetConfig+0x2ee>
 800a57c:	4b13      	ldr	r3, [pc, #76]	; (800a5cc <UART_SetConfig+0x2cc>)
 800a57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a582:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a586:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a58a:	d017      	beq.n	800a5bc <UART_SetConfig+0x2bc>
 800a58c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a590:	d82a      	bhi.n	800a5e8 <UART_SetConfig+0x2e8>
 800a592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a596:	d00b      	beq.n	800a5b0 <UART_SetConfig+0x2b0>
 800a598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a59c:	d824      	bhi.n	800a5e8 <UART_SetConfig+0x2e8>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <UART_SetConfig+0x2aa>
 800a5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a6:	d006      	beq.n	800a5b6 <UART_SetConfig+0x2b6>
 800a5a8:	e01e      	b.n	800a5e8 <UART_SetConfig+0x2e8>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e04b      	b.n	800a648 <UART_SetConfig+0x348>
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e048      	b.n	800a648 <UART_SetConfig+0x348>
 800a5b6:	2304      	movs	r3, #4
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e045      	b.n	800a648 <UART_SetConfig+0x348>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	e042      	b.n	800a648 <UART_SetConfig+0x348>
 800a5c2:	bf00      	nop
 800a5c4:	efff69f3 	.word	0xefff69f3
 800a5c8:	40011000 	.word	0x40011000
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	40004400 	.word	0x40004400
 800a5d4:	40004800 	.word	0x40004800
 800a5d8:	40004c00 	.word	0x40004c00
 800a5dc:	40005000 	.word	0x40005000
 800a5e0:	40011400 	.word	0x40011400
 800a5e4:	40007800 	.word	0x40007800
 800a5e8:	2310      	movs	r3, #16
 800a5ea:	77fb      	strb	r3, [r7, #31]
 800a5ec:	e02c      	b.n	800a648 <UART_SetConfig+0x348>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a72      	ldr	r2, [pc, #456]	; (800a7bc <UART_SetConfig+0x4bc>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d125      	bne.n	800a644 <UART_SetConfig+0x344>
 800a5f8:	4b71      	ldr	r3, [pc, #452]	; (800a7c0 <UART_SetConfig+0x4c0>)
 800a5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a606:	d017      	beq.n	800a638 <UART_SetConfig+0x338>
 800a608:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a60c:	d817      	bhi.n	800a63e <UART_SetConfig+0x33e>
 800a60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a612:	d00b      	beq.n	800a62c <UART_SetConfig+0x32c>
 800a614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a618:	d811      	bhi.n	800a63e <UART_SetConfig+0x33e>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <UART_SetConfig+0x326>
 800a61e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a622:	d006      	beq.n	800a632 <UART_SetConfig+0x332>
 800a624:	e00b      	b.n	800a63e <UART_SetConfig+0x33e>
 800a626:	2300      	movs	r3, #0
 800a628:	77fb      	strb	r3, [r7, #31]
 800a62a:	e00d      	b.n	800a648 <UART_SetConfig+0x348>
 800a62c:	2302      	movs	r3, #2
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	e00a      	b.n	800a648 <UART_SetConfig+0x348>
 800a632:	2304      	movs	r3, #4
 800a634:	77fb      	strb	r3, [r7, #31]
 800a636:	e007      	b.n	800a648 <UART_SetConfig+0x348>
 800a638:	2308      	movs	r3, #8
 800a63a:	77fb      	strb	r3, [r7, #31]
 800a63c:	e004      	b.n	800a648 <UART_SetConfig+0x348>
 800a63e:	2310      	movs	r3, #16
 800a640:	77fb      	strb	r3, [r7, #31]
 800a642:	e001      	b.n	800a648 <UART_SetConfig+0x348>
 800a644:	2310      	movs	r3, #16
 800a646:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a650:	d15b      	bne.n	800a70a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a652:	7ffb      	ldrb	r3, [r7, #31]
 800a654:	2b08      	cmp	r3, #8
 800a656:	d828      	bhi.n	800a6aa <UART_SetConfig+0x3aa>
 800a658:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <UART_SetConfig+0x360>)
 800a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65e:	bf00      	nop
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a695 	.word	0x0800a695
 800a66c:	0800a6ab 	.word	0x0800a6ab
 800a670:	0800a69b 	.word	0x0800a69b
 800a674:	0800a6ab 	.word	0x0800a6ab
 800a678:	0800a6ab 	.word	0x0800a6ab
 800a67c:	0800a6ab 	.word	0x0800a6ab
 800a680:	0800a6a3 	.word	0x0800a6a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a684:	f7fd fa4e 	bl	8007b24 <HAL_RCC_GetPCLK1Freq>
 800a688:	61b8      	str	r0, [r7, #24]
        break;
 800a68a:	e013      	b.n	800a6b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a68c:	f7fd fa5e 	bl	8007b4c <HAL_RCC_GetPCLK2Freq>
 800a690:	61b8      	str	r0, [r7, #24]
        break;
 800a692:	e00f      	b.n	800a6b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a694:	4b4b      	ldr	r3, [pc, #300]	; (800a7c4 <UART_SetConfig+0x4c4>)
 800a696:	61bb      	str	r3, [r7, #24]
        break;
 800a698:	e00c      	b.n	800a6b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a69a:	f7fd f931 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 800a69e:	61b8      	str	r0, [r7, #24]
        break;
 800a6a0:	e008      	b.n	800a6b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a6:	61bb      	str	r3, [r7, #24]
        break;
 800a6a8:	e004      	b.n	800a6b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a6b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d074      	beq.n	800a7a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	005a      	lsls	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	441a      	add	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b0f      	cmp	r3, #15
 800a6d4:	d916      	bls.n	800a704 <UART_SetConfig+0x404>
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6dc:	d212      	bcs.n	800a704 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	f023 030f 	bic.w	r3, r3, #15
 800a6e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	085b      	lsrs	r3, r3, #1
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	89fb      	ldrh	r3, [r7, #14]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	89fa      	ldrh	r2, [r7, #14]
 800a700:	60da      	str	r2, [r3, #12]
 800a702:	e04f      	b.n	800a7a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	77bb      	strb	r3, [r7, #30]
 800a708:	e04c      	b.n	800a7a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a70a:	7ffb      	ldrb	r3, [r7, #31]
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d828      	bhi.n	800a762 <UART_SetConfig+0x462>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <UART_SetConfig+0x418>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a73d 	.word	0x0800a73d
 800a71c:	0800a745 	.word	0x0800a745
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	0800a763 	.word	0x0800a763
 800a728:	0800a753 	.word	0x0800a753
 800a72c:	0800a763 	.word	0x0800a763
 800a730:	0800a763 	.word	0x0800a763
 800a734:	0800a763 	.word	0x0800a763
 800a738:	0800a75b 	.word	0x0800a75b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a73c:	f7fd f9f2 	bl	8007b24 <HAL_RCC_GetPCLK1Freq>
 800a740:	61b8      	str	r0, [r7, #24]
        break;
 800a742:	e013      	b.n	800a76c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a744:	f7fd fa02 	bl	8007b4c <HAL_RCC_GetPCLK2Freq>
 800a748:	61b8      	str	r0, [r7, #24]
        break;
 800a74a:	e00f      	b.n	800a76c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a74c:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <UART_SetConfig+0x4c4>)
 800a74e:	61bb      	str	r3, [r7, #24]
        break;
 800a750:	e00c      	b.n	800a76c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a752:	f7fd f8d5 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 800a756:	61b8      	str	r0, [r7, #24]
        break;
 800a758:	e008      	b.n	800a76c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a75e:	61bb      	str	r3, [r7, #24]
        break;
 800a760:	e004      	b.n	800a76c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	77bb      	strb	r3, [r7, #30]
        break;
 800a76a:	bf00      	nop
    }

    if (pclk != 0U)
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d018      	beq.n	800a7a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	085a      	lsrs	r2, r3, #1
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	441a      	add	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	fbb2 f3f3 	udiv	r3, r2, r3
 800a784:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b0f      	cmp	r3, #15
 800a78a:	d909      	bls.n	800a7a0 <UART_SetConfig+0x4a0>
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a792:	d205      	bcs.n	800a7a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	b29a      	uxth	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60da      	str	r2, [r3, #12]
 800a79e:	e001      	b.n	800a7a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a7b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3720      	adds	r7, #32
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	40007c00 	.word	0x40007c00
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	00f42400 	.word	0x00f42400

0800a7c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	f003 0308 	and.w	r3, r3, #8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	f003 0310 	and.w	r3, r3, #16
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00a      	beq.n	800a87a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	f003 0320 	and.w	r3, r3, #32
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01a      	beq.n	800a8de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8c6:	d10a      	bne.n	800a8de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00a      	beq.n	800a900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	605a      	str	r2, [r3, #4]
  }
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af02      	add	r7, sp, #8
 800a912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a91c:	f7f7 fbe2 	bl	80020e4 <HAL_GetTick>
 800a920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d10e      	bne.n	800a94e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f81b 	bl	800a97a <UART_WaitOnFlagUntilTimeout>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e011      	b.n	800a972 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2220      	movs	r2, #32
 800a958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b09c      	sub	sp, #112	; 0x70
 800a97e:	af00      	add	r7, sp, #0
 800a980:	60f8      	str	r0, [r7, #12]
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	603b      	str	r3, [r7, #0]
 800a986:	4613      	mov	r3, r2
 800a988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a98a:	e0a7      	b.n	800aadc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a98c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a992:	f000 80a3 	beq.w	800aadc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a996:	f7f7 fba5 	bl	80020e4 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d302      	bcc.n	800a9ac <UART_WaitOnFlagUntilTimeout+0x32>
 800a9a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d13f      	bne.n	800aa2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9c0:	667b      	str	r3, [r7, #100]	; 0x64
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e6      	bne.n	800a9ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	f023 0301 	bic.w	r3, r3, #1
 800a9f4:	663b      	str	r3, [r7, #96]	; 0x60
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e5      	bne.n	800a9de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2220      	movs	r2, #32
 800aa16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e068      	b.n	800aafe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0304 	and.w	r3, r3, #4
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d050      	beq.n	800aadc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa48:	d148      	bne.n	800aadc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa68:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa72:	637b      	str	r3, [r7, #52]	; 0x34
 800aa74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e6      	bne.n	800aa54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3308      	adds	r3, #8
 800aa8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	613b      	str	r3, [r7, #16]
   return(result);
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f023 0301 	bic.w	r3, r3, #1
 800aa9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaa6:	623a      	str	r2, [r7, #32]
 800aaa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	69f9      	ldr	r1, [r7, #28]
 800aaac:	6a3a      	ldr	r2, [r7, #32]
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e5      	bne.n	800aa86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2220      	movs	r2, #32
 800aabe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2220      	movs	r2, #32
 800aac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e010      	b.n	800aafe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69da      	ldr	r2, [r3, #28]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	4013      	ands	r3, r2
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	bf0c      	ite	eq
 800aaec:	2301      	moveq	r3, #1
 800aaee:	2300      	movne	r3, #0
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	f43f af48 	beq.w	800a98c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3770      	adds	r7, #112	; 0x70
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b097      	sub	sp, #92	; 0x5c
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4613      	mov	r3, r2
 800ab14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	88fa      	ldrh	r2, [r7, #6]
 800ab20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	88fa      	ldrh	r2, [r7, #6]
 800ab28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab3a:	d10e      	bne.n	800ab5a <UART_Start_Receive_IT+0x52>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <UART_Start_Receive_IT+0x48>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ab4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab4e:	e02d      	b.n	800abac <UART_Start_Receive_IT+0xa4>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	22ff      	movs	r2, #255	; 0xff
 800ab54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab58:	e028      	b.n	800abac <UART_Start_Receive_IT+0xa4>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10d      	bne.n	800ab7e <UART_Start_Receive_IT+0x76>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <UART_Start_Receive_IT+0x6c>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	22ff      	movs	r2, #255	; 0xff
 800ab6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab72:	e01b      	b.n	800abac <UART_Start_Receive_IT+0xa4>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	227f      	movs	r2, #127	; 0x7f
 800ab78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab7c:	e016      	b.n	800abac <UART_Start_Receive_IT+0xa4>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab86:	d10d      	bne.n	800aba4 <UART_Start_Receive_IT+0x9c>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d104      	bne.n	800ab9a <UART_Start_Receive_IT+0x92>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	227f      	movs	r2, #127	; 0x7f
 800ab94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab98:	e008      	b.n	800abac <UART_Start_Receive_IT+0xa4>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	223f      	movs	r2, #63	; 0x3f
 800ab9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aba2:	e003      	b.n	800abac <UART_Start_Receive_IT+0xa4>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2222      	movs	r2, #34	; 0x22
 800abb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3308      	adds	r3, #8
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc6:	e853 3f00 	ldrex	r3, [r3]
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abce:	f043 0301 	orr.w	r3, r3, #1
 800abd2:	657b      	str	r3, [r7, #84]	; 0x54
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3308      	adds	r3, #8
 800abda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abdc:	64ba      	str	r2, [r7, #72]	; 0x48
 800abde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abe4:	e841 2300 	strex	r3, r2, [r1]
 800abe8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800abea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e5      	bne.n	800abbc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf8:	d107      	bne.n	800ac0a <UART_Start_Receive_IT+0x102>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d103      	bne.n	800ac0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a21      	ldr	r2, [pc, #132]	; (800ac8c <UART_Start_Receive_IT+0x184>)
 800ac06:	669a      	str	r2, [r3, #104]	; 0x68
 800ac08:	e002      	b.n	800ac10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4a20      	ldr	r2, [pc, #128]	; (800ac90 <UART_Start_Receive_IT+0x188>)
 800ac0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d019      	beq.n	800ac4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	e853 3f00 	ldrex	r3, [r3]
 800ac24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ac2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
 800ac38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac3e:	e841 2300 	strex	r3, r2, [r1]
 800ac42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1e6      	bne.n	800ac18 <UART_Start_Receive_IT+0x110>
 800ac4a:	e018      	b.n	800ac7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	e853 3f00 	ldrex	r3, [r3]
 800ac58:	613b      	str	r3, [r7, #16]
   return(result);
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f043 0320 	orr.w	r3, r3, #32
 800ac60:	653b      	str	r3, [r7, #80]	; 0x50
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac6a:	623b      	str	r3, [r7, #32]
 800ac6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6e:	69f9      	ldr	r1, [r7, #28]
 800ac70:	6a3a      	ldr	r2, [r7, #32]
 800ac72:	e841 2300 	strex	r3, r2, [r1]
 800ac76:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1e6      	bne.n	800ac4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	375c      	adds	r7, #92	; 0x5c
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	0800b0b9 	.word	0x0800b0b9
 800ac90:	0800af53 	.word	0x0800af53

0800ac94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b095      	sub	sp, #84	; 0x54
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acba:	643b      	str	r3, [r7, #64]	; 0x40
 800acbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e6      	bne.n	800ac9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3308      	adds	r3, #8
 800acd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	f023 0301 	bic.w	r3, r3, #1
 800ace4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3308      	adds	r3, #8
 800acec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e5      	bne.n	800acce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d118      	bne.n	800ad3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	e853 3f00 	ldrex	r3, [r3]
 800ad16:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f023 0310 	bic.w	r3, r3, #16
 800ad1e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	461a      	mov	r2, r3
 800ad26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad28:	61bb      	str	r3, [r7, #24]
 800ad2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6979      	ldr	r1, [r7, #20]
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	613b      	str	r3, [r7, #16]
   return(result);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e6      	bne.n	800ad0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad50:	bf00      	nop
 800ad52:	3754      	adds	r7, #84	; 0x54
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff faaa 	bl	800a2d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b08f      	sub	sp, #60	; 0x3c
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad94:	2b21      	cmp	r3, #33	; 0x21
 800ad96:	d14c      	bne.n	800ae32 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d132      	bne.n	800ae0a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adb8:	637b      	str	r3, [r7, #52]	; 0x34
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adc4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e6      	bne.n	800ada4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	e853 3f00 	ldrex	r3, [r3]
 800ade2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adea:	633b      	str	r3, [r7, #48]	; 0x30
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	61bb      	str	r3, [r7, #24]
 800adf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	6979      	ldr	r1, [r7, #20]
 800adfa:	69ba      	ldr	r2, [r7, #24]
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	613b      	str	r3, [r7, #16]
   return(result);
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e6      	bne.n	800add6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ae08:	e013      	b.n	800ae32 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ae32:	bf00      	nop
 800ae34:	373c      	adds	r7, #60	; 0x3c
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b091      	sub	sp, #68	; 0x44
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4a:	2b21      	cmp	r3, #33	; 0x21
 800ae4c:	d151      	bne.n	800aef2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d132      	bne.n	800aec0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	623b      	str	r3, [r7, #32]
   return(result);
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	633b      	str	r3, [r7, #48]	; 0x30
 800ae7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e6      	bne.n	800ae5a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	69b9      	ldr	r1, [r7, #24]
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	617b      	str	r3, [r7, #20]
   return(result);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800aebe:	e018      	b.n	800aef2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aed4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeda:	1c9a      	adds	r2, r3, #2
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800aef2:	bf00      	nop
 800aef4:	3744      	adds	r7, #68	; 0x44
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b088      	sub	sp, #32
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	e853 3f00 	ldrex	r3, [r3]
 800af12:	60bb      	str	r3, [r7, #8]
   return(result);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af1a:	61fb      	str	r3, [r7, #28]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	61bb      	str	r3, [r7, #24]
 800af26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af28:	6979      	ldr	r1, [r7, #20]
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	e841 2300 	strex	r3, r2, [r1]
 800af30:	613b      	str	r3, [r7, #16]
   return(result);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1e6      	bne.n	800af06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2220      	movs	r2, #32
 800af3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff f9bb 	bl	800a2c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af4a:	bf00      	nop
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b096      	sub	sp, #88	; 0x58
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6a:	2b22      	cmp	r3, #34	; 0x22
 800af6c:	f040 8098 	bne.w	800b0a0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800af7e:	b2d9      	uxtb	r1, r3
 800af80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af84:	b2da      	uxtb	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8a:	400a      	ands	r2, r1
 800af8c:	b2d2      	uxtb	r2, r2
 800af8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d17b      	bne.n	800b0b0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afcc:	653b      	str	r3, [r7, #80]	; 0x50
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd6:	647b      	str	r3, [r7, #68]	; 0x44
 800afd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e6      	bne.n	800afb8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	623b      	str	r3, [r7, #32]
   return(result);
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b00a:	633a      	str	r2, [r7, #48]	; 0x30
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e5      	bne.n	800afea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2220      	movs	r2, #32
 800b022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b036:	2b01      	cmp	r3, #1
 800b038:	d12e      	bne.n	800b098 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 0310 	bic.w	r3, r3, #16
 800b054:	64bb      	str	r3, [r7, #72]	; 0x48
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b05e:	61fb      	str	r3, [r7, #28]
 800b060:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	69b9      	ldr	r1, [r7, #24]
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	617b      	str	r3, [r7, #20]
   return(result);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e6      	bne.n	800b040 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	f003 0310 	and.w	r3, r3, #16
 800b07c:	2b10      	cmp	r3, #16
 800b07e:	d103      	bne.n	800b088 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2210      	movs	r2, #16
 800b086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7ff f929 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b096:	e00b      	b.n	800b0b0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f00b fad3 	bl	8016644 <HAL_UART_RxCpltCallback>
}
 800b09e:	e007      	b.n	800b0b0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699a      	ldr	r2, [r3, #24]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0208 	orr.w	r2, r2, #8
 800b0ae:	619a      	str	r2, [r3, #24]
}
 800b0b0:	bf00      	nop
 800b0b2:	3758      	adds	r7, #88	; 0x58
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b096      	sub	sp, #88	; 0x58
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0d0:	2b22      	cmp	r3, #34	; 0x22
 800b0d2:	f040 8098 	bne.w	800b206 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b0e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b0ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0fa:	1c9a      	adds	r2, r3, #2
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b106:	b29b      	uxth	r3, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b118:	b29b      	uxth	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d17b      	bne.n	800b216 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	461a      	mov	r2, r3
 800b13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b13c:	643b      	str	r3, [r7, #64]	; 0x40
 800b13e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e6      	bne.n	800b11e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3308      	adds	r3, #8
 800b156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	64bb      	str	r3, [r7, #72]	; 0x48
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3308      	adds	r3, #8
 800b16e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b170:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b178:	e841 2300 	strex	r3, r2, [r1]
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1e5      	bne.n	800b150 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2220      	movs	r2, #32
 800b188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d12e      	bne.n	800b1fe <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	e853 3f00 	ldrex	r3, [r3]
 800b1b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f023 0310 	bic.w	r3, r3, #16
 800b1ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c8:	6979      	ldr	r1, [r7, #20]
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	e841 2300 	strex	r3, r2, [r1]
 800b1d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e6      	bne.n	800b1a6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f003 0310 	and.w	r3, r3, #16
 800b1e2:	2b10      	cmp	r3, #16
 800b1e4:	d103      	bne.n	800b1ee <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2210      	movs	r2, #16
 800b1ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff f876 	bl	800a2e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1fc:	e00b      	b.n	800b216 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f00b fa20 	bl	8016644 <HAL_UART_RxCpltCallback>
}
 800b204:	e007      	b.n	800b216 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f042 0208 	orr.w	r2, r2, #8
 800b214:	619a      	str	r2, [r3, #24]
}
 800b216:	bf00      	nop
 800b218:	3758      	adds	r7, #88	; 0x58
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b220:	b084      	sub	sp, #16
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	f107 001c 	add.w	r0, r7, #28
 800b22e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	2b01      	cmp	r3, #1
 800b236:	d120      	bne.n	800b27a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	4b20      	ldr	r3, [pc, #128]	; (800b2cc <USB_CoreInit+0xac>)
 800b24a:	4013      	ands	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d105      	bne.n	800b26e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fa96 	bl	800b7a0 <USB_CoreReset>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
 800b278:	e010      	b.n	800b29c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa8a 	bl	800b7a0 <USB_CoreReset>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d10b      	bne.n	800b2ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	f043 0206 	orr.w	r2, r3, #6
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f043 0220 	orr.w	r2, r3, #32
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2c6:	b004      	add	sp, #16
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	ffbdffbf 	.word	0xffbdffbf

0800b2d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f023 0201 	bic.w	r2, r3, #1
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d115      	bne.n	800b340 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b320:	2001      	movs	r0, #1
 800b322:	f7f6 feeb 	bl	80020fc <HAL_Delay>
      ms++;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3301      	adds	r3, #1
 800b32a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fa29 	bl	800b784 <USB_GetMode>
 800b332:	4603      	mov	r3, r0
 800b334:	2b01      	cmp	r3, #1
 800b336:	d01e      	beq.n	800b376 <USB_SetCurrentMode+0x84>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b31      	cmp	r3, #49	; 0x31
 800b33c:	d9f0      	bls.n	800b320 <USB_SetCurrentMode+0x2e>
 800b33e:	e01a      	b.n	800b376 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d115      	bne.n	800b372 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b352:	2001      	movs	r0, #1
 800b354:	f7f6 fed2 	bl	80020fc <HAL_Delay>
      ms++;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3301      	adds	r3, #1
 800b35c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa10 	bl	800b784 <USB_GetMode>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <USB_SetCurrentMode+0x84>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b31      	cmp	r3, #49	; 0x31
 800b36e:	d9f0      	bls.n	800b352 <USB_SetCurrentMode+0x60>
 800b370:	e001      	b.n	800b376 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e005      	b.n	800b382 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b32      	cmp	r3, #50	; 0x32
 800b37a:	d101      	bne.n	800b380 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e000      	b.n	800b382 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b38c:	b084      	sub	sp, #16
 800b38e:	b580      	push	{r7, lr}
 800b390:	b086      	sub	sp, #24
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b39a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	613b      	str	r3, [r7, #16]
 800b3aa:	e009      	b.n	800b3c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	3340      	adds	r3, #64	; 0x40
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	613b      	str	r3, [r7, #16]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2b0e      	cmp	r3, #14
 800b3c4:	d9f2      	bls.n	800b3ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d11c      	bne.n	800b406 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3da:	f043 0302 	orr.w	r3, r3, #2
 800b3de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e005      	b.n	800b412 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b418:	461a      	mov	r2, r3
 800b41a:	2300      	movs	r3, #0
 800b41c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b424:	4619      	mov	r1, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42c:	461a      	mov	r2, r3
 800b42e:	680b      	ldr	r3, [r1, #0]
 800b430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	2b01      	cmp	r3, #1
 800b436:	d10c      	bne.n	800b452 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b43e:	2100      	movs	r1, #0
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f965 	bl	800b710 <USB_SetDevSpeed>
 800b446:	e008      	b.n	800b45a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b448:	2101      	movs	r1, #1
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f960 	bl	800b710 <USB_SetDevSpeed>
 800b450:	e003      	b.n	800b45a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b452:	2103      	movs	r1, #3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f95b 	bl	800b710 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b45a:	2110      	movs	r1, #16
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f8f3 	bl	800b648 <USB_FlushTxFifo>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f91f 	bl	800b6b0 <USB_FlushRxFifo>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b482:	461a      	mov	r2, r3
 800b484:	2300      	movs	r3, #0
 800b486:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48e:	461a      	mov	r2, r3
 800b490:	2300      	movs	r3, #0
 800b492:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49a:	461a      	mov	r2, r3
 800b49c:	2300      	movs	r3, #0
 800b49e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	e043      	b.n	800b52e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	015a      	lsls	r2, r3, #5
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4bc:	d118      	bne.n	800b4f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	e013      	b.n	800b502 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	015a      	lsls	r2, r3, #5
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	e008      	b.n	800b502 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	2300      	movs	r3, #0
 800b500:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50e:	461a      	mov	r2, r3
 800b510:	2300      	movs	r3, #0
 800b512:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b520:	461a      	mov	r2, r3
 800b522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	3301      	adds	r3, #1
 800b52c:	613b      	str	r3, [r7, #16]
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	429a      	cmp	r2, r3
 800b534:	d3b7      	bcc.n	800b4a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b536:	2300      	movs	r3, #0
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	e043      	b.n	800b5c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b54e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b552:	d118      	bne.n	800b586 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4413      	add	r3, r2
 800b562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b566:	461a      	mov	r2, r3
 800b568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e013      	b.n	800b598 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b57c:	461a      	mov	r2, r3
 800b57e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	e008      	b.n	800b598 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	015a      	lsls	r2, r3, #5
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b592:	461a      	mov	r2, r3
 800b594:	2300      	movs	r3, #0
 800b596:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d3b7      	bcc.n	800b53c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b5ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	f043 0210 	orr.w	r2, r3, #16
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699a      	ldr	r2, [r3, #24]
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <USB_DevInit+0x2b4>)
 800b606:	4313      	orrs	r3, r2
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	f043 0208 	orr.w	r2, r3, #8
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b620:	2b01      	cmp	r3, #1
 800b622:	d105      	bne.n	800b630 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	699a      	ldr	r2, [r3, #24]
 800b628:	4b06      	ldr	r3, [pc, #24]	; (800b644 <USB_DevInit+0x2b8>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b630:	7dfb      	ldrb	r3, [r7, #23]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b63c:	b004      	add	sp, #16
 800b63e:	4770      	bx	lr
 800b640:	803c3800 	.word	0x803c3800
 800b644:	40000004 	.word	0x40000004

0800b648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3301      	adds	r3, #1
 800b65a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4a13      	ldr	r2, [pc, #76]	; (800b6ac <USB_FlushTxFifo+0x64>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d901      	bls.n	800b668 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e01b      	b.n	800b6a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	daf2      	bge.n	800b656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	019b      	lsls	r3, r3, #6
 800b678:	f043 0220 	orr.w	r2, r3, #32
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3301      	adds	r3, #1
 800b684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <USB_FlushTxFifo+0x64>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d901      	bls.n	800b692 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e006      	b.n	800b6a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d0f0      	beq.n	800b680 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	00030d40 	.word	0x00030d40

0800b6b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	4a11      	ldr	r2, [pc, #68]	; (800b70c <USB_FlushRxFifo+0x5c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d901      	bls.n	800b6ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e018      	b.n	800b700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	daf2      	bge.n	800b6bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2210      	movs	r2, #16
 800b6de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4a08      	ldr	r2, [pc, #32]	; (800b70c <USB_FlushRxFifo+0x5c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d901      	bls.n	800b6f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e006      	b.n	800b700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0310 	and.w	r3, r3, #16
 800b6fa:	2b10      	cmp	r3, #16
 800b6fc:	d0f0      	beq.n	800b6e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	00030d40 	.word	0x00030d40

0800b710 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	78fb      	ldrb	r3, [r7, #3]
 800b72a:	68f9      	ldr	r1, [r7, #12]
 800b72c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b730:	4313      	orrs	r3, r2
 800b732:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b742:	b480      	push	{r7}
 800b744:	b085      	sub	sp, #20
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b75c:	f023 0303 	bic.w	r3, r3, #3
 800b760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b770:	f043 0302 	orr.w	r3, r3, #2
 800b774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	f003 0301 	and.w	r3, r3, #1
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	4a13      	ldr	r2, [pc, #76]	; (800b804 <USB_CoreReset+0x64>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d901      	bls.n	800b7be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	e01b      	b.n	800b7f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	daf2      	bge.n	800b7ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	f043 0201 	orr.w	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4a09      	ldr	r2, [pc, #36]	; (800b804 <USB_CoreReset+0x64>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d901      	bls.n	800b7e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e006      	b.n	800b7f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f003 0301 	and.w	r3, r3, #1
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d0f0      	beq.n	800b7d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	00030d40 	.word	0x00030d40

0800b808 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b80e:	4b8d      	ldr	r3, [pc, #564]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b810:	22c0      	movs	r2, #192	; 0xc0
 800b812:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b814:	4b8b      	ldr	r3, [pc, #556]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b816:	22a8      	movs	r2, #168	; 0xa8
 800b818:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b81a:	4b8a      	ldr	r3, [pc, #552]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b81c:	2201      	movs	r2, #1
 800b81e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 800b820:	4b88      	ldr	r3, [pc, #544]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b822:	224d      	movs	r2, #77	; 0x4d
 800b824:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b826:	4b88      	ldr	r3, [pc, #544]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b828:	22ff      	movs	r2, #255	; 0xff
 800b82a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b82c:	4b86      	ldr	r3, [pc, #536]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b82e:	22ff      	movs	r2, #255	; 0xff
 800b830:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b832:	4b85      	ldr	r3, [pc, #532]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b838:	4b83      	ldr	r3, [pc, #524]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b83e:	4b83      	ldr	r3, [pc, #524]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b840:	22c0      	movs	r2, #192	; 0xc0
 800b842:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b844:	4b81      	ldr	r3, [pc, #516]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b846:	22a8      	movs	r2, #168	; 0xa8
 800b848:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b84a:	4b80      	ldr	r3, [pc, #512]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b84c:	2201      	movs	r2, #1
 800b84e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800b850:	4b7e      	ldr	r3, [pc, #504]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b852:	2264      	movs	r2, #100	; 0x64
 800b854:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800b856:	f000 fd25 	bl	800c2a4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b85a:	4b7a      	ldr	r3, [pc, #488]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	061a      	lsls	r2, r3, #24
 800b860:	4b78      	ldr	r3, [pc, #480]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b862:	785b      	ldrb	r3, [r3, #1]
 800b864:	041b      	lsls	r3, r3, #16
 800b866:	431a      	orrs	r2, r3
 800b868:	4b76      	ldr	r3, [pc, #472]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b86a:	789b      	ldrb	r3, [r3, #2]
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	4313      	orrs	r3, r2
 800b870:	4a74      	ldr	r2, [pc, #464]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b872:	78d2      	ldrb	r2, [r2, #3]
 800b874:	4313      	orrs	r3, r2
 800b876:	061a      	lsls	r2, r3, #24
 800b878:	4b72      	ldr	r3, [pc, #456]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	0619      	lsls	r1, r3, #24
 800b87e:	4b71      	ldr	r3, [pc, #452]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b880:	785b      	ldrb	r3, [r3, #1]
 800b882:	041b      	lsls	r3, r3, #16
 800b884:	4319      	orrs	r1, r3
 800b886:	4b6f      	ldr	r3, [pc, #444]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b888:	789b      	ldrb	r3, [r3, #2]
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	430b      	orrs	r3, r1
 800b88e:	496d      	ldr	r1, [pc, #436]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b890:	78c9      	ldrb	r1, [r1, #3]
 800b892:	430b      	orrs	r3, r1
 800b894:	021b      	lsls	r3, r3, #8
 800b896:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b89a:	431a      	orrs	r2, r3
 800b89c:	4b69      	ldr	r3, [pc, #420]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	0619      	lsls	r1, r3, #24
 800b8a2:	4b68      	ldr	r3, [pc, #416]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	041b      	lsls	r3, r3, #16
 800b8a8:	4319      	orrs	r1, r3
 800b8aa:	4b66      	ldr	r3, [pc, #408]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8ac:	789b      	ldrb	r3, [r3, #2]
 800b8ae:	021b      	lsls	r3, r3, #8
 800b8b0:	430b      	orrs	r3, r1
 800b8b2:	4964      	ldr	r1, [pc, #400]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8b4:	78c9      	ldrb	r1, [r1, #3]
 800b8b6:	430b      	orrs	r3, r1
 800b8b8:	0a1b      	lsrs	r3, r3, #8
 800b8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	4b60      	ldr	r3, [pc, #384]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	0619      	lsls	r1, r3, #24
 800b8c6:	4b5f      	ldr	r3, [pc, #380]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	041b      	lsls	r3, r3, #16
 800b8cc:	4319      	orrs	r1, r3
 800b8ce:	4b5d      	ldr	r3, [pc, #372]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8d0:	789b      	ldrb	r3, [r3, #2]
 800b8d2:	021b      	lsls	r3, r3, #8
 800b8d4:	430b      	orrs	r3, r1
 800b8d6:	495b      	ldr	r1, [pc, #364]	; (800ba44 <MX_LWIP_Init+0x23c>)
 800b8d8:	78c9      	ldrb	r1, [r1, #3]
 800b8da:	430b      	orrs	r3, r1
 800b8dc:	0e1b      	lsrs	r3, r3, #24
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	4a5b      	ldr	r2, [pc, #364]	; (800ba50 <MX_LWIP_Init+0x248>)
 800b8e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b8e4:	4b58      	ldr	r3, [pc, #352]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	061a      	lsls	r2, r3, #24
 800b8ea:	4b57      	ldr	r3, [pc, #348]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b8ec:	785b      	ldrb	r3, [r3, #1]
 800b8ee:	041b      	lsls	r3, r3, #16
 800b8f0:	431a      	orrs	r2, r3
 800b8f2:	4b55      	ldr	r3, [pc, #340]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b8f4:	789b      	ldrb	r3, [r3, #2]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	4a53      	ldr	r2, [pc, #332]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b8fc:	78d2      	ldrb	r2, [r2, #3]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	061a      	lsls	r2, r3, #24
 800b902:	4b51      	ldr	r3, [pc, #324]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	0619      	lsls	r1, r3, #24
 800b908:	4b4f      	ldr	r3, [pc, #316]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b90a:	785b      	ldrb	r3, [r3, #1]
 800b90c:	041b      	lsls	r3, r3, #16
 800b90e:	4319      	orrs	r1, r3
 800b910:	4b4d      	ldr	r3, [pc, #308]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b912:	789b      	ldrb	r3, [r3, #2]
 800b914:	021b      	lsls	r3, r3, #8
 800b916:	430b      	orrs	r3, r1
 800b918:	494b      	ldr	r1, [pc, #300]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b91a:	78c9      	ldrb	r1, [r1, #3]
 800b91c:	430b      	orrs	r3, r1
 800b91e:	021b      	lsls	r3, r3, #8
 800b920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b924:	431a      	orrs	r2, r3
 800b926:	4b48      	ldr	r3, [pc, #288]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	0619      	lsls	r1, r3, #24
 800b92c:	4b46      	ldr	r3, [pc, #280]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	041b      	lsls	r3, r3, #16
 800b932:	4319      	orrs	r1, r3
 800b934:	4b44      	ldr	r3, [pc, #272]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b936:	789b      	ldrb	r3, [r3, #2]
 800b938:	021b      	lsls	r3, r3, #8
 800b93a:	430b      	orrs	r3, r1
 800b93c:	4942      	ldr	r1, [pc, #264]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b93e:	78c9      	ldrb	r1, [r1, #3]
 800b940:	430b      	orrs	r3, r1
 800b942:	0a1b      	lsrs	r3, r3, #8
 800b944:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b948:	431a      	orrs	r2, r3
 800b94a:	4b3f      	ldr	r3, [pc, #252]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	0619      	lsls	r1, r3, #24
 800b950:	4b3d      	ldr	r3, [pc, #244]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b952:	785b      	ldrb	r3, [r3, #1]
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	4319      	orrs	r1, r3
 800b958:	4b3b      	ldr	r3, [pc, #236]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b95a:	789b      	ldrb	r3, [r3, #2]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	430b      	orrs	r3, r1
 800b960:	4939      	ldr	r1, [pc, #228]	; (800ba48 <MX_LWIP_Init+0x240>)
 800b962:	78c9      	ldrb	r1, [r1, #3]
 800b964:	430b      	orrs	r3, r1
 800b966:	0e1b      	lsrs	r3, r3, #24
 800b968:	4313      	orrs	r3, r2
 800b96a:	4a3a      	ldr	r2, [pc, #232]	; (800ba54 <MX_LWIP_Init+0x24c>)
 800b96c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b96e:	4b37      	ldr	r3, [pc, #220]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	061a      	lsls	r2, r3, #24
 800b974:	4b35      	ldr	r3, [pc, #212]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b976:	785b      	ldrb	r3, [r3, #1]
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	431a      	orrs	r2, r3
 800b97c:	4b33      	ldr	r3, [pc, #204]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b97e:	789b      	ldrb	r3, [r3, #2]
 800b980:	021b      	lsls	r3, r3, #8
 800b982:	4313      	orrs	r3, r2
 800b984:	4a31      	ldr	r2, [pc, #196]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b986:	78d2      	ldrb	r2, [r2, #3]
 800b988:	4313      	orrs	r3, r2
 800b98a:	061a      	lsls	r2, r3, #24
 800b98c:	4b2f      	ldr	r3, [pc, #188]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	0619      	lsls	r1, r3, #24
 800b992:	4b2e      	ldr	r3, [pc, #184]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	041b      	lsls	r3, r3, #16
 800b998:	4319      	orrs	r1, r3
 800b99a:	4b2c      	ldr	r3, [pc, #176]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b99c:	789b      	ldrb	r3, [r3, #2]
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	492a      	ldr	r1, [pc, #168]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9a4:	78c9      	ldrb	r1, [r1, #3]
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	021b      	lsls	r3, r3, #8
 800b9aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	4b26      	ldr	r3, [pc, #152]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	0619      	lsls	r1, r3, #24
 800b9b6:	4b25      	ldr	r3, [pc, #148]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	041b      	lsls	r3, r3, #16
 800b9bc:	4319      	orrs	r1, r3
 800b9be:	4b23      	ldr	r3, [pc, #140]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9c0:	789b      	ldrb	r3, [r3, #2]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	430b      	orrs	r3, r1
 800b9c6:	4921      	ldr	r1, [pc, #132]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9c8:	78c9      	ldrb	r1, [r1, #3]
 800b9ca:	430b      	orrs	r3, r1
 800b9cc:	0a1b      	lsrs	r3, r3, #8
 800b9ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	0619      	lsls	r1, r3, #24
 800b9da:	4b1c      	ldr	r3, [pc, #112]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	041b      	lsls	r3, r3, #16
 800b9e0:	4319      	orrs	r1, r3
 800b9e2:	4b1a      	ldr	r3, [pc, #104]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9e4:	789b      	ldrb	r3, [r3, #2]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	4918      	ldr	r1, [pc, #96]	; (800ba4c <MX_LWIP_Init+0x244>)
 800b9ec:	78c9      	ldrb	r1, [r1, #3]
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	0e1b      	lsrs	r3, r3, #24
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	4a18      	ldr	r2, [pc, #96]	; (800ba58 <MX_LWIP_Init+0x250>)
 800b9f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b9f8:	4b18      	ldr	r3, [pc, #96]	; (800ba5c <MX_LWIP_Init+0x254>)
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	4b18      	ldr	r3, [pc, #96]	; (800ba60 <MX_LWIP_Init+0x258>)
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	2300      	movs	r3, #0
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <MX_LWIP_Init+0x250>)
 800ba06:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <MX_LWIP_Init+0x24c>)
 800ba08:	4911      	ldr	r1, [pc, #68]	; (800ba50 <MX_LWIP_Init+0x248>)
 800ba0a:	4816      	ldr	r0, [pc, #88]	; (800ba64 <MX_LWIP_Init+0x25c>)
 800ba0c:	f001 f936 	bl	800cc7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ba10:	4814      	ldr	r0, [pc, #80]	; (800ba64 <MX_LWIP_Init+0x25c>)
 800ba12:	f001 fae5 	bl	800cfe0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ba16:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <MX_LWIP_Init+0x25c>)
 800ba18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba1c:	089b      	lsrs	r3, r3, #2
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ba28:	480e      	ldr	r0, [pc, #56]	; (800ba64 <MX_LWIP_Init+0x25c>)
 800ba2a:	f001 fae9 	bl	800d000 <netif_set_up>
 800ba2e:	e002      	b.n	800ba36 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ba30:	480c      	ldr	r0, [pc, #48]	; (800ba64 <MX_LWIP_Init+0x25c>)
 800ba32:	f001 fb51 	bl	800d0d8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ba36:	490c      	ldr	r1, [pc, #48]	; (800ba68 <MX_LWIP_Init+0x260>)
 800ba38:	480a      	ldr	r0, [pc, #40]	; (800ba64 <MX_LWIP_Init+0x25c>)
 800ba3a:	f001 fbe3 	bl	800d204 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ba3e:	bf00      	nop
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20000e4c 	.word	0x20000e4c
 800ba48:	20000e50 	.word	0x20000e50
 800ba4c:	20000e54 	.word	0x20000e54
 800ba50:	20000e40 	.word	0x20000e40
 800ba54:	20000e44 	.word	0x20000e44
 800ba58:	20000e48 	.word	0x20000e48
 800ba5c:	08016499 	.word	0x08016499
 800ba60:	0800bd81 	.word	0x0800bd81
 800ba64:	20000e0c 	.word	0x20000e0c
 800ba68:	0800ba6d 	.word	0x0800ba6d

0800ba6c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <SCB_InvalidateDCache_by_Addr>:
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800ba92:	2320      	movs	r3, #32
 800ba94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba96:	f3bf 8f4f 	dsb	sy
}
 800ba9a:	bf00      	nop
    while (op_size > 0) {
 800ba9c:	e00b      	b.n	800bab6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800ba9e:	4a0d      	ldr	r2, [pc, #52]	; (800bad4 <SCB_InvalidateDCache_by_Addr+0x54>)
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	4413      	add	r3, r2
 800baac:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	dcf0      	bgt.n	800ba9e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800babc:	f3bf 8f4f 	dsb	sy
}
 800bac0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bac2:	f3bf 8f6f 	isb	sy
}
 800bac6:	bf00      	nop
}
 800bac8:	bf00      	nop
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	e000ed00 	.word	0xe000ed00

0800bad8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bae4:	4b40      	ldr	r3, [pc, #256]	; (800bbe8 <low_level_init+0x110>)
 800bae6:	4a41      	ldr	r2, [pc, #260]	; (800bbec <low_level_init+0x114>)
 800bae8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800baea:	2300      	movs	r3, #0
 800baec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800baee:	2380      	movs	r3, #128	; 0x80
 800baf0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800baf2:	23e1      	movs	r3, #225	; 0xe1
 800baf4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800baf6:	2300      	movs	r3, #0
 800baf8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bafa:	2300      	movs	r3, #0
 800bafc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bafe:	2300      	movs	r3, #0
 800bb00:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bb02:	4a39      	ldr	r2, [pc, #228]	; (800bbe8 <low_level_init+0x110>)
 800bb04:	f107 0308 	add.w	r3, r7, #8
 800bb08:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bb0a:	4b37      	ldr	r3, [pc, #220]	; (800bbe8 <low_level_init+0x110>)
 800bb0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bb10:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bb12:	4b35      	ldr	r3, [pc, #212]	; (800bbe8 <low_level_init+0x110>)
 800bb14:	4a36      	ldr	r2, [pc, #216]	; (800bbf0 <low_level_init+0x118>)
 800bb16:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bb18:	4b33      	ldr	r3, [pc, #204]	; (800bbe8 <low_level_init+0x110>)
 800bb1a:	4a36      	ldr	r2, [pc, #216]	; (800bbf4 <low_level_init+0x11c>)
 800bb1c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bb1e:	4b32      	ldr	r3, [pc, #200]	; (800bbe8 <low_level_init+0x110>)
 800bb20:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bb24:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bb26:	4830      	ldr	r0, [pc, #192]	; (800bbe8 <low_level_init+0x110>)
 800bb28:	f7f7 fe48 	bl	80037bc <HAL_ETH_Init>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bb30:	2238      	movs	r2, #56	; 0x38
 800bb32:	2100      	movs	r1, #0
 800bb34:	4830      	ldr	r0, [pc, #192]	; (800bbf8 <low_level_init+0x120>)
 800bb36:	f00b fe3d 	bl	80177b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bb3a:	4b2f      	ldr	r3, [pc, #188]	; (800bbf8 <low_level_init+0x120>)
 800bb3c:	2221      	movs	r2, #33	; 0x21
 800bb3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bb40:	4b2d      	ldr	r3, [pc, #180]	; (800bbf8 <low_level_init+0x120>)
 800bb42:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800bb46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bb48:	4b2b      	ldr	r3, [pc, #172]	; (800bbf8 <low_level_init+0x120>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bb4e:	482b      	ldr	r0, [pc, #172]	; (800bbfc <low_level_init+0x124>)
 800bb50:	f000 ff5c 	bl	800ca0c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2206      	movs	r2, #6
 800bb58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bb5c:	4b22      	ldr	r3, [pc, #136]	; (800bbe8 <low_level_init+0x110>)
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bb68:	4b1f      	ldr	r3, [pc, #124]	; (800bbe8 <low_level_init+0x110>)
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	785a      	ldrb	r2, [r3, #1]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bb74:	4b1c      	ldr	r3, [pc, #112]	; (800bbe8 <low_level_init+0x110>)
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	789a      	ldrb	r2, [r3, #2]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bb80:	4b19      	ldr	r3, [pc, #100]	; (800bbe8 <low_level_init+0x110>)
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	78da      	ldrb	r2, [r3, #3]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bb8c:	4b16      	ldr	r3, [pc, #88]	; (800bbe8 <low_level_init+0x110>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	791a      	ldrb	r2, [r3, #4]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bb98:	4b13      	ldr	r3, [pc, #76]	; (800bbe8 <low_level_init+0x110>)
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	795a      	ldrb	r2, [r3, #5]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bbaa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbb2:	f043 030a 	orr.w	r3, r3, #10
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bbbe:	4910      	ldr	r1, [pc, #64]	; (800bc00 <low_level_init+0x128>)
 800bbc0:	4810      	ldr	r0, [pc, #64]	; (800bc04 <low_level_init+0x12c>)
 800bbc2:	f7f6 f8dc 	bl	8001d7e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800bbc6:	480f      	ldr	r0, [pc, #60]	; (800bc04 <low_level_init+0x12c>)
 800bbc8:	f7f6 f90b 	bl	8001de2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d103      	bne.n	800bbda <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa3a 	bl	800c04c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bbd8:	e001      	b.n	800bbde <low_level_init+0x106>
    Error_Handler();
 800bbda:	f7f5 f917 	bl	8000e0c <Error_Handler>
}
 800bbde:	bf00      	nop
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200057e4 	.word	0x200057e4
 800bbec:	40028000 	.word	0x40028000
 800bbf0:	20000130 	.word	0x20000130
 800bbf4:	20000090 	.word	0x20000090
 800bbf8:	20005894 	.word	0x20005894
 800bbfc:	0801b510 	.word	0x0801b510
 800bc00:	2000000c 	.word	0x2000000c
 800bc04:	200058cc 	.word	0x200058cc

0800bc08 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b092      	sub	sp, #72	; 0x48
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	2230      	movs	r2, #48	; 0x30
 800bc26:	2100      	movs	r1, #0
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f00b fdc3 	bl	80177b4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bc2e:	f107 030c 	add.w	r3, r7, #12
 800bc32:	2230      	movs	r2, #48	; 0x30
 800bc34:	2100      	movs	r1, #0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f00b fdbc 	bl	80177b4 <memset>

  for(q = p; q != NULL; q = q->next)
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	643b      	str	r3, [r7, #64]	; 0x40
 800bc40:	e045      	b.n	800bcce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d902      	bls.n	800bc4e <low_level_output+0x46>
      return ERR_IF;
 800bc48:	f06f 030b 	mvn.w	r3, #11
 800bc4c:	e055      	b.n	800bcfa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800bc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc50:	6859      	ldr	r1, [r3, #4]
 800bc52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc54:	4613      	mov	r3, r2
 800bc56:	005b      	lsls	r3, r3, #1
 800bc58:	4413      	add	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	3348      	adds	r3, #72	; 0x48
 800bc5e:	443b      	add	r3, r7
 800bc60:	3b3c      	subs	r3, #60	; 0x3c
 800bc62:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc66:	895b      	ldrh	r3, [r3, #10]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	005b      	lsls	r3, r3, #1
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	3348      	adds	r3, #72	; 0x48
 800bc76:	443b      	add	r3, r7
 800bc78:	3b38      	subs	r3, #56	; 0x38
 800bc7a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bc7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d011      	beq.n	800bca6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bc82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	f107 000c 	add.w	r0, r7, #12
 800bc8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	440b      	add	r3, r1
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	18c1      	adds	r1, r0, r3
 800bc96:	4613      	mov	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	3348      	adds	r3, #72	; 0x48
 800bca0:	443b      	add	r3, r7
 800bca2:	3b34      	subs	r3, #52	; 0x34
 800bca4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d109      	bne.n	800bcc2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bcae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	3348      	adds	r3, #72	; 0x48
 800bcba:	443b      	add	r3, r7
 800bcbc:	3b34      	subs	r3, #52	; 0x34
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bcc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	643b      	str	r3, [r7, #64]	; 0x40
 800bcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1b6      	bne.n	800bc42 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	891b      	ldrh	r3, [r3, #8]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <low_level_output+0xfc>)
 800bcdc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bcde:	4a09      	ldr	r2, [pc, #36]	; (800bd04 <low_level_output+0xfc>)
 800bce0:	f107 030c 	add.w	r3, r7, #12
 800bce4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bce6:	4a07      	ldr	r2, [pc, #28]	; (800bd04 <low_level_output+0xfc>)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800bcec:	2214      	movs	r2, #20
 800bcee:	4905      	ldr	r1, [pc, #20]	; (800bd04 <low_level_output+0xfc>)
 800bcf0:	4805      	ldr	r0, [pc, #20]	; (800bd08 <low_level_output+0x100>)
 800bcf2:	f7f7 fe97 	bl	8003a24 <HAL_ETH_Transmit>

  return errval;
 800bcf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3748      	adds	r7, #72	; 0x48
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20005894 	.word	0x20005894
 800bd08:	200057e4 	.word	0x200057e4

0800bd0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bd18:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <low_level_input+0x2c>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d105      	bne.n	800bd2c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bd20:	f107 030c 	add.w	r3, r7, #12
 800bd24:	4619      	mov	r1, r3
 800bd26:	4805      	ldr	r0, [pc, #20]	; (800bd3c <low_level_input+0x30>)
 800bd28:	f7f7 ff10 	bl	8003b4c <HAL_ETH_ReadData>
  }

  return p;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	200057e0 	.word	0x200057e0
 800bd3c:	200057e4 	.word	0x200057e4

0800bd40 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff ffdd 	bl	800bd0c <low_level_input>
 800bd52:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00a      	beq.n	800bd70 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	4798      	blx	r3
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f001 fdca 	bl	800d904 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1ea      	bne.n	800bd4c <ethernetif_input+0xc>
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <ethernetif_init+0x1c>
 800bd8e:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <ethernetif_init+0x48>)
 800bd90:	f240 127b 	movw	r2, #379	; 0x17b
 800bd94:	490d      	ldr	r1, [pc, #52]	; (800bdcc <ethernetif_init+0x4c>)
 800bd96:	480e      	ldr	r0, [pc, #56]	; (800bdd0 <ethernetif_init+0x50>)
 800bd98:	f00b fd14 	bl	80177c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2273      	movs	r2, #115	; 0x73
 800bda0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2274      	movs	r2, #116	; 0x74
 800bda8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <ethernetif_init+0x54>)
 800bdb0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a08      	ldr	r2, [pc, #32]	; (800bdd8 <ethernetif_init+0x58>)
 800bdb6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff fe8d 	bl	800bad8 <low_level_init>

  return ERR_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	08018968 	.word	0x08018968
 800bdcc:	08018984 	.word	0x08018984
 800bdd0:	08018994 	.word	0x08018994
 800bdd4:	08014831 	.word	0x08014831
 800bdd8:	0800bc09 	.word	0x0800bc09

0800bddc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bde8:	68f9      	ldr	r1, [r7, #12]
 800bdea:	4807      	ldr	r0, [pc, #28]	; (800be08 <pbuf_free_custom+0x2c>)
 800bdec:	f000 fef0 	bl	800cbd0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bdf0:	4b06      	ldr	r3, [pc, #24]	; (800be0c <pbuf_free_custom+0x30>)
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d102      	bne.n	800bdfe <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bdf8:	4b04      	ldr	r3, [pc, #16]	; (800be0c <pbuf_free_custom+0x30>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]
  }
}
 800bdfe:	bf00      	nop
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	0801b510 	.word	0x0801b510
 800be0c:	200057e0 	.word	0x200057e0

0800be10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be14:	f7f6 f966 	bl	80020e4 <HAL_GetTick>
 800be18:	4603      	mov	r3, r0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	605a      	str	r2, [r3, #4]
 800be32:	609a      	str	r2, [r3, #8]
 800be34:	60da      	str	r2, [r3, #12]
 800be36:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a56      	ldr	r2, [pc, #344]	; (800bf98 <HAL_ETH_MspInit+0x178>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	f040 80a6 	bne.w	800bf90 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800be44:	4b55      	ldr	r3, [pc, #340]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be48:	4a54      	ldr	r2, [pc, #336]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800be4e:	6313      	str	r3, [r2, #48]	; 0x30
 800be50:	4b52      	ldr	r3, [pc, #328]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be58:	623b      	str	r3, [r7, #32]
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	4b4f      	ldr	r3, [pc, #316]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	4a4e      	ldr	r2, [pc, #312]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be66:	6313      	str	r3, [r2, #48]	; 0x30
 800be68:	4b4c      	ldr	r3, [pc, #304]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be70:	61fb      	str	r3, [r7, #28]
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	4b49      	ldr	r3, [pc, #292]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be78:	4a48      	ldr	r2, [pc, #288]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be7e:	6313      	str	r3, [r2, #48]	; 0x30
 800be80:	4b46      	ldr	r3, [pc, #280]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be88:	61bb      	str	r3, [r7, #24]
 800be8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be8c:	4b43      	ldr	r3, [pc, #268]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be90:	4a42      	ldr	r2, [pc, #264]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be92:	f043 0304 	orr.w	r3, r3, #4
 800be96:	6313      	str	r3, [r2, #48]	; 0x30
 800be98:	4b40      	ldr	r3, [pc, #256]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800be9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	617b      	str	r3, [r7, #20]
 800bea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bea4:	4b3d      	ldr	r3, [pc, #244]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800bea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea8:	4a3c      	ldr	r2, [pc, #240]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800beaa:	f043 0301 	orr.w	r3, r3, #1
 800beae:	6313      	str	r3, [r2, #48]	; 0x30
 800beb0:	4b3a      	ldr	r3, [pc, #232]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800beb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	613b      	str	r3, [r7, #16]
 800beba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bebc:	4b37      	ldr	r3, [pc, #220]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800bebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec0:	4a36      	ldr	r2, [pc, #216]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800bec2:	f043 0302 	orr.w	r3, r3, #2
 800bec6:	6313      	str	r3, [r2, #48]	; 0x30
 800bec8:	4b34      	ldr	r3, [pc, #208]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800beca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bed4:	4b31      	ldr	r3, [pc, #196]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800bed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed8:	4a30      	ldr	r2, [pc, #192]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800beda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bede:	6313      	str	r3, [r2, #48]	; 0x30
 800bee0:	4b2e      	ldr	r3, [pc, #184]	; (800bf9c <HAL_ETH_MspInit+0x17c>)
 800bee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee8:	60bb      	str	r3, [r7, #8]
 800beea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800beec:	2332      	movs	r3, #50	; 0x32
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef0:	2302      	movs	r3, #2
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bef8:	2303      	movs	r3, #3
 800befa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800befc:	230b      	movs	r3, #11
 800befe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf04:	4619      	mov	r1, r3
 800bf06:	4826      	ldr	r0, [pc, #152]	; (800bfa0 <HAL_ETH_MspInit+0x180>)
 800bf08:	f7f8 fe3e 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bf0c:	2386      	movs	r3, #134	; 0x86
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf10:	2302      	movs	r3, #2
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf1c:	230b      	movs	r3, #11
 800bf1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf24:	4619      	mov	r1, r3
 800bf26:	481f      	ldr	r0, [pc, #124]	; (800bfa4 <HAL_ETH_MspInit+0x184>)
 800bf28:	f7f8 fe2e 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bf2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf32:	2302      	movs	r3, #2
 800bf34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf3e:	230b      	movs	r3, #11
 800bf40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800bf42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf46:	4619      	mov	r1, r3
 800bf48:	4817      	ldr	r0, [pc, #92]	; (800bfa8 <HAL_ETH_MspInit+0x188>)
 800bf4a:	f7f8 fe1d 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bf4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf54:	2302      	movs	r3, #2
 800bf56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf60:	230b      	movs	r3, #11
 800bf62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4810      	ldr	r0, [pc, #64]	; (800bfac <HAL_ETH_MspInit+0x18c>)
 800bf6c:	f7f8 fe0c 	bl	8004b88 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800bf70:	2200      	movs	r2, #0
 800bf72:	2100      	movs	r1, #0
 800bf74:	203d      	movs	r0, #61	; 0x3d
 800bf76:	f7f6 fee8 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bf7a:	203d      	movs	r0, #61	; 0x3d
 800bf7c:	f7f6 ff01 	bl	8002d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800bf80:	2200      	movs	r2, #0
 800bf82:	2100      	movs	r1, #0
 800bf84:	203e      	movs	r0, #62	; 0x3e
 800bf86:	f7f6 fee0 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800bf8a:	203e      	movs	r0, #62	; 0x3e
 800bf8c:	f7f6 fef9 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bf90:	bf00      	nop
 800bf92:	3738      	adds	r7, #56	; 0x38
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	40028000 	.word	0x40028000
 800bf9c:	40023800 	.word	0x40023800
 800bfa0:	40020800 	.word	0x40020800
 800bfa4:	40020000 	.word	0x40020000
 800bfa8:	40020400 	.word	0x40020400
 800bfac:	40021800 	.word	0x40021800

0800bfb0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bfb4:	4802      	ldr	r0, [pc, #8]	; (800bfc0 <ETH_PHY_IO_Init+0x10>)
 800bfb6:	f7f8 f98d 	bl	80042d4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	200057e4 	.word	0x200057e4

0800bfc4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
  return 0;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	68f9      	ldr	r1, [r7, #12]
 800bfe6:	4807      	ldr	r0, [pc, #28]	; (800c004 <ETH_PHY_IO_ReadReg+0x30>)
 800bfe8:	f7f7 ffdc 	bl	8003fa4 <HAL_ETH_ReadPHYRegister>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800bff2:	f04f 33ff 	mov.w	r3, #4294967295
 800bff6:	e000      	b.n	800bffa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	200057e4 	.word	0x200057e4

0800c008 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	68f9      	ldr	r1, [r7, #12]
 800c01a:	4807      	ldr	r0, [pc, #28]	; (800c038 <ETH_PHY_IO_WriteReg+0x30>)
 800c01c:	f7f8 f80d 	bl	800403a <HAL_ETH_WritePHYRegister>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c026:	f04f 33ff 	mov.w	r3, #4294967295
 800c02a:	e000      	b.n	800c02e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	200057e4 	.word	0x200057e4

0800c03c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c040:	f7f6 f850 	bl	80020e4 <HAL_GetTick>
 800c044:	4603      	mov	r3, r0
}
 800c046:	4618      	mov	r0, r3
 800c048:	bd80      	pop	{r7, pc}
	...

0800c04c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b0a0      	sub	sp, #128	; 0x80
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c054:	f107 030c 	add.w	r3, r7, #12
 800c058:	2264      	movs	r2, #100	; 0x64
 800c05a:	2100      	movs	r1, #0
 800c05c:	4618      	mov	r0, r3
 800c05e:	f00b fba9 	bl	80177b4 <memset>
  int32_t PHYLinkState = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c066:	2300      	movs	r3, #0
 800c068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c06a:	2300      	movs	r3, #0
 800c06c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c06e:	2300      	movs	r3, #0
 800c070:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c072:	483a      	ldr	r0, [pc, #232]	; (800c15c <ethernet_link_check_state+0x110>)
 800c074:	f7f5 ff5d 	bl	8001f32 <LAN8742_GetLinkState>
 800c078:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c080:	089b      	lsrs	r3, r3, #2
 800c082:	f003 0301 	and.w	r3, r3, #1
 800c086:	b2db      	uxtb	r3, r3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <ethernet_link_check_state+0x5a>
 800c08c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c08e:	2b01      	cmp	r3, #1
 800c090:	dc09      	bgt.n	800c0a6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c092:	4833      	ldr	r0, [pc, #204]	; (800c160 <ethernet_link_check_state+0x114>)
 800c094:	f7f7 fc6d 	bl	8003972 <HAL_ETH_Stop>
    netif_set_down(netif);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f81d 	bl	800d0d8 <netif_set_down>
    netif_set_link_down(netif);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 f880 	bl	800d1a4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c0a4:	e055      	b.n	800c152 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d14e      	bne.n	800c152 <ethernet_link_check_state+0x106>
 800c0b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	dd4b      	ble.n	800c152 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c0ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0bc:	3b02      	subs	r3, #2
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d82a      	bhi.n	800c118 <ethernet_link_check_state+0xcc>
 800c0c2:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <ethernet_link_check_state+0x7c>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0d9 	.word	0x0800c0d9
 800c0cc:	0800c0eb 	.word	0x0800c0eb
 800c0d0:	0800c0fb 	.word	0x0800c0fb
 800c0d4:	0800c10b 	.word	0x0800c10b
      duplex = ETH_FULLDUPLEX_MODE;
 800c0d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c0de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c0e8:	e017      	b.n	800c11a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c0ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c0f8:	e00f      	b.n	800c11a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c0fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0fe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c100:	2300      	movs	r3, #0
 800c102:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c104:	2301      	movs	r3, #1
 800c106:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c108:	e007      	b.n	800c11a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c10a:	2300      	movs	r3, #0
 800c10c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c10e:	2300      	movs	r3, #0
 800c110:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c112:	2301      	movs	r3, #1
 800c114:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c116:	e000      	b.n	800c11a <ethernet_link_check_state+0xce>
      break;
 800c118:	bf00      	nop
    if(linkchanged)
 800c11a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d018      	beq.n	800c152 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c120:	f107 030c 	add.w	r3, r7, #12
 800c124:	4619      	mov	r1, r3
 800c126:	480e      	ldr	r0, [pc, #56]	; (800c160 <ethernet_link_check_state+0x114>)
 800c128:	f7f7 ffd0 	bl	80040cc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c12c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800c130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c132:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c134:	f107 030c 	add.w	r3, r7, #12
 800c138:	4619      	mov	r1, r3
 800c13a:	4809      	ldr	r0, [pc, #36]	; (800c160 <ethernet_link_check_state+0x114>)
 800c13c:	f7f8 f8b0 	bl	80042a0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c140:	4807      	ldr	r0, [pc, #28]	; (800c160 <ethernet_link_check_state+0x114>)
 800c142:	f7f7 fbb7 	bl	80038b4 <HAL_ETH_Start>
      netif_set_up(netif);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 ff5a 	bl	800d000 <netif_set_up>
      netif_set_link_up(netif);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fff5 	bl	800d13c <netif_set_link_up>
}
 800c152:	bf00      	nop
 800c154:	3780      	adds	r7, #128	; 0x80
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	200058cc 	.word	0x200058cc
 800c160:	200057e4 	.word	0x200057e4

0800c164 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af02      	add	r7, sp, #8
 800c16a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c16c:	4812      	ldr	r0, [pc, #72]	; (800c1b8 <HAL_ETH_RxAllocateCallback+0x54>)
 800c16e:	f000 fcc1 	bl	800caf4 <memp_malloc_pool>
 800c172:	60f8      	str	r0, [r7, #12]
  if (p)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d014      	beq.n	800c1a4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f103 0220 	add.w	r2, r3, #32
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4a0d      	ldr	r2, [pc, #52]	; (800c1bc <HAL_ETH_RxAllocateCallback+0x58>)
 800c188:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c192:	9201      	str	r2, [sp, #4]
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2241      	movs	r2, #65	; 0x41
 800c19a:	2100      	movs	r1, #0
 800c19c:	2000      	movs	r0, #0
 800c19e:	f001 f9f7 	bl	800d590 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c1a2:	e005      	b.n	800c1b0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c1a4:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	601a      	str	r2, [r3, #0]
}
 800c1b0:	bf00      	nop
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	0801b510 	.word	0x0801b510
 800c1bc:	0800bddd 	.word	0x0800bddd
 800c1c0:	200057e0 	.word	0x200057e0

0800c1c4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3b20      	subs	r3, #32
 800c1e2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	887a      	ldrh	r2, [r7, #2]
 800c1f4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d103      	bne.n	800c206 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	69fa      	ldr	r2, [r7, #28]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e003      	b.n	800c20e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	69fa      	ldr	r2, [r7, #28]
 800c20c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	69fa      	ldr	r2, [r7, #28]
 800c212:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	61fb      	str	r3, [r7, #28]
 800c21a:	e009      	b.n	800c230 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	891a      	ldrh	r2, [r3, #8]
 800c220:	887b      	ldrh	r3, [r7, #2]
 800c222:	4413      	add	r3, r2
 800c224:	b29a      	uxth	r2, r3
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1f2      	bne.n	800c21c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c236:	887b      	ldrh	r3, [r7, #2]
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fc20 	bl	800ba80 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c240:	bf00      	nop
 800c242:	3720      	adds	r7, #32
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c252:	88fb      	ldrh	r3, [r7, #6]
 800c254:	021b      	lsls	r3, r3, #8
 800c256:	b21a      	sxth	r2, r3
 800c258:	88fb      	ldrh	r3, [r7, #6]
 800c25a:	0a1b      	lsrs	r3, r3, #8
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	b21b      	sxth	r3, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	b21b      	sxth	r3, r3
 800c264:	b29b      	uxth	r3, r3
}
 800c266:	4618      	mov	r0, r3
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	061a      	lsls	r2, r3, #24
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	021b      	lsls	r3, r3, #8
 800c282:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c286:	431a      	orrs	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	0a1b      	lsrs	r3, r3, #8
 800c28c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c290:	431a      	orrs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	0e1b      	lsrs	r3, r3, #24
 800c296:	4313      	orrs	r3, r2
}
 800c298:	4618      	mov	r0, r3
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c2ae:	f000 f8d5 	bl	800c45c <mem_init>
  memp_init();
 800c2b2:	f000 fbdb 	bl	800ca6c <memp_init>
  pbuf_init();
  netif_init();
 800c2b6:	f000 fcd9 	bl	800cc6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c2ba:	f007 f8f9 	bl	80134b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c2be:	f001 fe51 	bl	800df64 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c2c2:	f007 f86b 	bl	801339c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c2da:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <ptr_to_mem+0x20>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	4413      	add	r3, r2
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	20005f58 	.word	0x20005f58

0800c2f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c2fc:	4b05      	ldr	r3, [pc, #20]	; (800c314 <mem_to_ptr+0x20>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	b29b      	uxth	r3, r3
}
 800c306:	4618      	mov	r0, r3
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20005f58 	.word	0x20005f58

0800c318 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c318:	b590      	push	{r4, r7, lr}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c320:	4b45      	ldr	r3, [pc, #276]	; (800c438 <plug_holes+0x120>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d206      	bcs.n	800c338 <plug_holes+0x20>
 800c32a:	4b44      	ldr	r3, [pc, #272]	; (800c43c <plug_holes+0x124>)
 800c32c:	f240 12df 	movw	r2, #479	; 0x1df
 800c330:	4943      	ldr	r1, [pc, #268]	; (800c440 <plug_holes+0x128>)
 800c332:	4844      	ldr	r0, [pc, #272]	; (800c444 <plug_holes+0x12c>)
 800c334:	f00b fa46 	bl	80177c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c338:	4b43      	ldr	r3, [pc, #268]	; (800c448 <plug_holes+0x130>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d306      	bcc.n	800c350 <plug_holes+0x38>
 800c342:	4b3e      	ldr	r3, [pc, #248]	; (800c43c <plug_holes+0x124>)
 800c344:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c348:	4940      	ldr	r1, [pc, #256]	; (800c44c <plug_holes+0x134>)
 800c34a:	483e      	ldr	r0, [pc, #248]	; (800c444 <plug_holes+0x12c>)
 800c34c:	f00b fa3a 	bl	80177c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	791b      	ldrb	r3, [r3, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <plug_holes+0x4e>
 800c358:	4b38      	ldr	r3, [pc, #224]	; (800c43c <plug_holes+0x124>)
 800c35a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c35e:	493c      	ldr	r1, [pc, #240]	; (800c450 <plug_holes+0x138>)
 800c360:	4838      	ldr	r0, [pc, #224]	; (800c444 <plug_holes+0x12c>)
 800c362:	f00b fa2f 	bl	80177c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c36e:	d906      	bls.n	800c37e <plug_holes+0x66>
 800c370:	4b32      	ldr	r3, [pc, #200]	; (800c43c <plug_holes+0x124>)
 800c372:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c376:	4937      	ldr	r1, [pc, #220]	; (800c454 <plug_holes+0x13c>)
 800c378:	4832      	ldr	r0, [pc, #200]	; (800c444 <plug_holes+0x12c>)
 800c37a:	f00b fa23 	bl	80177c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff ffa4 	bl	800c2d0 <ptr_to_mem>
 800c388:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d024      	beq.n	800c3dc <plug_holes+0xc4>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	791b      	ldrb	r3, [r3, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d120      	bne.n	800c3dc <plug_holes+0xc4>
 800c39a:	4b2b      	ldr	r3, [pc, #172]	; (800c448 <plug_holes+0x130>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d01b      	beq.n	800c3dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c3a4:	4b2c      	ldr	r3, [pc, #176]	; (800c458 <plug_holes+0x140>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d102      	bne.n	800c3b4 <plug_holes+0x9c>
      lfree = mem;
 800c3ae:	4a2a      	ldr	r2, [pc, #168]	; (800c458 <plug_holes+0x140>)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	881a      	ldrh	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3c4:	d00a      	beq.n	800c3dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff ff80 	bl	800c2d0 <ptr_to_mem>
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff ff8e 	bl	800c2f4 <mem_to_ptr>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	885b      	ldrh	r3, [r3, #2]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff ff75 	bl	800c2d0 <ptr_to_mem>
 800c3e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d01f      	beq.n	800c430 <plug_holes+0x118>
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	791b      	ldrb	r3, [r3, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d11b      	bne.n	800c430 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c3f8:	4b17      	ldr	r3, [pc, #92]	; (800c458 <plug_holes+0x140>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d102      	bne.n	800c408 <plug_holes+0xf0>
      lfree = pmem;
 800c402:	4a15      	ldr	r2, [pc, #84]	; (800c458 <plug_holes+0x140>)
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	881a      	ldrh	r2, [r3, #0]
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c418:	d00a      	beq.n	800c430 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff ff56 	bl	800c2d0 <ptr_to_mem>
 800c424:	4604      	mov	r4, r0
 800c426:	68b8      	ldr	r0, [r7, #8]
 800c428:	f7ff ff64 	bl	800c2f4 <mem_to_ptr>
 800c42c:	4603      	mov	r3, r0
 800c42e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c430:	bf00      	nop
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	bd90      	pop	{r4, r7, pc}
 800c438:	20005f58 	.word	0x20005f58
 800c43c:	080189bc 	.word	0x080189bc
 800c440:	080189ec 	.word	0x080189ec
 800c444:	08018a04 	.word	0x08018a04
 800c448:	20005f5c 	.word	0x20005f5c
 800c44c:	08018a2c 	.word	0x08018a2c
 800c450:	08018a48 	.word	0x08018a48
 800c454:	08018a64 	.word	0x08018a64
 800c458:	20005f60 	.word	0x20005f60

0800c45c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c462:	4b18      	ldr	r3, [pc, #96]	; (800c4c4 <mem_init+0x68>)
 800c464:	3303      	adds	r3, #3
 800c466:	f023 0303 	bic.w	r3, r3, #3
 800c46a:	461a      	mov	r2, r3
 800c46c:	4b16      	ldr	r3, [pc, #88]	; (800c4c8 <mem_init+0x6c>)
 800c46e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c470:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <mem_init+0x6c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c47c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c48a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c48e:	f7ff ff1f 	bl	800c2d0 <ptr_to_mem>
 800c492:	4603      	mov	r3, r0
 800c494:	4a0d      	ldr	r2, [pc, #52]	; (800c4cc <mem_init+0x70>)
 800c496:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c498:	4b0c      	ldr	r3, [pc, #48]	; (800c4cc <mem_init+0x70>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2201      	movs	r2, #1
 800c49e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <mem_init+0x70>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c4aa:	4b08      	ldr	r3, [pc, #32]	; (800c4cc <mem_init+0x70>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c4b4:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <mem_init+0x6c>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a05      	ldr	r2, [pc, #20]	; (800c4d0 <mem_init+0x74>)
 800c4ba:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20005904 	.word	0x20005904
 800c4c8:	20005f58 	.word	0x20005f58
 800c4cc:	20005f5c 	.word	0x20005f5c
 800c4d0:	20005f60 	.word	0x20005f60

0800c4d4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ff09 	bl	800c2f4 <mem_to_ptr>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff fef0 	bl	800c2d0 <ptr_to_mem>
 800c4f0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	885b      	ldrh	r3, [r3, #2]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff feea 	bl	800c2d0 <ptr_to_mem>
 800c4fc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c506:	d818      	bhi.n	800c53a <mem_link_valid+0x66>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	885b      	ldrh	r3, [r3, #2]
 800c50c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c510:	d813      	bhi.n	800c53a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c516:	8afa      	ldrh	r2, [r7, #22]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d004      	beq.n	800c526 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	8afa      	ldrh	r2, [r7, #22]
 800c522:	429a      	cmp	r2, r3
 800c524:	d109      	bne.n	800c53a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c526:	4b08      	ldr	r3, [pc, #32]	; (800c548 <mem_link_valid+0x74>)
 800c528:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d006      	beq.n	800c53e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	885b      	ldrh	r3, [r3, #2]
 800c534:	8afa      	ldrh	r2, [r7, #22]
 800c536:	429a      	cmp	r2, r3
 800c538:	d001      	beq.n	800c53e <mem_link_valid+0x6a>
    return 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	e000      	b.n	800c540 <mem_link_valid+0x6c>
  }
  return 1;
 800c53e:	2301      	movs	r3, #1
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	20005f5c 	.word	0x20005f5c

0800c54c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d04c      	beq.n	800c5f4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f003 0303 	and.w	r3, r3, #3
 800c560:	2b00      	cmp	r3, #0
 800c562:	d007      	beq.n	800c574 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c564:	4b25      	ldr	r3, [pc, #148]	; (800c5fc <mem_free+0xb0>)
 800c566:	f240 2273 	movw	r2, #627	; 0x273
 800c56a:	4925      	ldr	r1, [pc, #148]	; (800c600 <mem_free+0xb4>)
 800c56c:	4825      	ldr	r0, [pc, #148]	; (800c604 <mem_free+0xb8>)
 800c56e:	f00b f929 	bl	80177c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c572:	e040      	b.n	800c5f6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3b08      	subs	r3, #8
 800c578:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c57a:	4b23      	ldr	r3, [pc, #140]	; (800c608 <mem_free+0xbc>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d306      	bcc.n	800c592 <mem_free+0x46>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f103 020c 	add.w	r2, r3, #12
 800c58a:	4b20      	ldr	r3, [pc, #128]	; (800c60c <mem_free+0xc0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d907      	bls.n	800c5a2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c592:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <mem_free+0xb0>)
 800c594:	f240 227f 	movw	r2, #639	; 0x27f
 800c598:	491d      	ldr	r1, [pc, #116]	; (800c610 <mem_free+0xc4>)
 800c59a:	481a      	ldr	r0, [pc, #104]	; (800c604 <mem_free+0xb8>)
 800c59c:	f00b f912 	bl	80177c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5a0:	e029      	b.n	800c5f6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	791b      	ldrb	r3, [r3, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d107      	bne.n	800c5ba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c5aa:	4b14      	ldr	r3, [pc, #80]	; (800c5fc <mem_free+0xb0>)
 800c5ac:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c5b0:	4918      	ldr	r1, [pc, #96]	; (800c614 <mem_free+0xc8>)
 800c5b2:	4814      	ldr	r0, [pc, #80]	; (800c604 <mem_free+0xb8>)
 800c5b4:	f00b f906 	bl	80177c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5b8:	e01d      	b.n	800c5f6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7ff ff8a 	bl	800c4d4 <mem_link_valid>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d107      	bne.n	800c5d6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	; (800c5fc <mem_free+0xb0>)
 800c5c8:	f240 2295 	movw	r2, #661	; 0x295
 800c5cc:	4912      	ldr	r1, [pc, #72]	; (800c618 <mem_free+0xcc>)
 800c5ce:	480d      	ldr	r0, [pc, #52]	; (800c604 <mem_free+0xb8>)
 800c5d0:	f00b f8f8 	bl	80177c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5d4:	e00f      	b.n	800c5f6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <mem_free+0xd0>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d202      	bcs.n	800c5ec <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c5e6:	4a0d      	ldr	r2, [pc, #52]	; (800c61c <mem_free+0xd0>)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff fe93 	bl	800c318 <plug_holes>
 800c5f2:	e000      	b.n	800c5f6 <mem_free+0xaa>
    return;
 800c5f4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	080189bc 	.word	0x080189bc
 800c600:	08018a90 	.word	0x08018a90
 800c604:	08018a04 	.word	0x08018a04
 800c608:	20005f58 	.word	0x20005f58
 800c60c:	20005f5c 	.word	0x20005f5c
 800c610:	08018ab4 	.word	0x08018ab4
 800c614:	08018ad0 	.word	0x08018ad0
 800c618:	08018af8 	.word	0x08018af8
 800c61c:	20005f60 	.word	0x20005f60

0800c620 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b088      	sub	sp, #32
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c62c:	887b      	ldrh	r3, [r7, #2]
 800c62e:	3303      	adds	r3, #3
 800c630:	b29b      	uxth	r3, r3
 800c632:	f023 0303 	bic.w	r3, r3, #3
 800c636:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c638:	8bfb      	ldrh	r3, [r7, #30]
 800c63a:	2b0b      	cmp	r3, #11
 800c63c:	d801      	bhi.n	800c642 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c63e:	230c      	movs	r3, #12
 800c640:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c642:	8bfb      	ldrh	r3, [r7, #30]
 800c644:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c648:	d803      	bhi.n	800c652 <mem_trim+0x32>
 800c64a:	8bfa      	ldrh	r2, [r7, #30]
 800c64c:	887b      	ldrh	r3, [r7, #2]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d201      	bcs.n	800c656 <mem_trim+0x36>
    return NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	e0cc      	b.n	800c7f0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c656:	4b68      	ldr	r3, [pc, #416]	; (800c7f8 <mem_trim+0x1d8>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d304      	bcc.n	800c66a <mem_trim+0x4a>
 800c660:	4b66      	ldr	r3, [pc, #408]	; (800c7fc <mem_trim+0x1dc>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d306      	bcc.n	800c678 <mem_trim+0x58>
 800c66a:	4b65      	ldr	r3, [pc, #404]	; (800c800 <mem_trim+0x1e0>)
 800c66c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c670:	4964      	ldr	r1, [pc, #400]	; (800c804 <mem_trim+0x1e4>)
 800c672:	4865      	ldr	r0, [pc, #404]	; (800c808 <mem_trim+0x1e8>)
 800c674:	f00b f8a6 	bl	80177c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c678:	4b5f      	ldr	r3, [pc, #380]	; (800c7f8 <mem_trim+0x1d8>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d304      	bcc.n	800c68c <mem_trim+0x6c>
 800c682:	4b5e      	ldr	r3, [pc, #376]	; (800c7fc <mem_trim+0x1dc>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d301      	bcc.n	800c690 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	e0af      	b.n	800c7f0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3b08      	subs	r3, #8
 800c694:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c696:	69b8      	ldr	r0, [r7, #24]
 800c698:	f7ff fe2c 	bl	800c2f4 <mem_to_ptr>
 800c69c:	4603      	mov	r3, r0
 800c69e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	881a      	ldrh	r2, [r3, #0]
 800c6a4:	8afb      	ldrh	r3, [r7, #22]
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	3b08      	subs	r3, #8
 800c6ac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c6ae:	8bfa      	ldrh	r2, [r7, #30]
 800c6b0:	8abb      	ldrh	r3, [r7, #20]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d906      	bls.n	800c6c4 <mem_trim+0xa4>
 800c6b6:	4b52      	ldr	r3, [pc, #328]	; (800c800 <mem_trim+0x1e0>)
 800c6b8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c6bc:	4953      	ldr	r1, [pc, #332]	; (800c80c <mem_trim+0x1ec>)
 800c6be:	4852      	ldr	r0, [pc, #328]	; (800c808 <mem_trim+0x1e8>)
 800c6c0:	f00b f880 	bl	80177c4 <iprintf>
  if (newsize > size) {
 800c6c4:	8bfa      	ldrh	r2, [r7, #30]
 800c6c6:	8abb      	ldrh	r3, [r7, #20]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d901      	bls.n	800c6d0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e08f      	b.n	800c7f0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c6d0:	8bfa      	ldrh	r2, [r7, #30]
 800c6d2:	8abb      	ldrh	r3, [r7, #20]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d101      	bne.n	800c6dc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	e089      	b.n	800c7f0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	881b      	ldrh	r3, [r3, #0]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff fdf5 	bl	800c2d0 <ptr_to_mem>
 800c6e6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	791b      	ldrb	r3, [r3, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d13f      	bne.n	800c770 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	881b      	ldrh	r3, [r3, #0]
 800c6f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6f8:	d106      	bne.n	800c708 <mem_trim+0xe8>
 800c6fa:	4b41      	ldr	r3, [pc, #260]	; (800c800 <mem_trim+0x1e0>)
 800c6fc:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c700:	4943      	ldr	r1, [pc, #268]	; (800c810 <mem_trim+0x1f0>)
 800c702:	4841      	ldr	r0, [pc, #260]	; (800c808 <mem_trim+0x1e8>)
 800c704:	f00b f85e 	bl	80177c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c70e:	8afa      	ldrh	r2, [r7, #22]
 800c710:	8bfb      	ldrh	r3, [r7, #30]
 800c712:	4413      	add	r3, r2
 800c714:	b29b      	uxth	r3, r3
 800c716:	3308      	adds	r3, #8
 800c718:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c71a:	4b3e      	ldr	r3, [pc, #248]	; (800c814 <mem_trim+0x1f4>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	429a      	cmp	r2, r3
 800c722:	d106      	bne.n	800c732 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c724:	89fb      	ldrh	r3, [r7, #14]
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff fdd2 	bl	800c2d0 <ptr_to_mem>
 800c72c:	4603      	mov	r3, r0
 800c72e:	4a39      	ldr	r2, [pc, #228]	; (800c814 <mem_trim+0x1f4>)
 800c730:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c732:	89fb      	ldrh	r3, [r7, #14]
 800c734:	4618      	mov	r0, r3
 800c736:	f7ff fdcb 	bl	800c2d0 <ptr_to_mem>
 800c73a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	2200      	movs	r2, #0
 800c740:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	89ba      	ldrh	r2, [r7, #12]
 800c746:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	8afa      	ldrh	r2, [r7, #22]
 800c74c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	89fa      	ldrh	r2, [r7, #14]
 800c752:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c75c:	d047      	beq.n	800c7ee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fdb4 	bl	800c2d0 <ptr_to_mem>
 800c768:	4602      	mov	r2, r0
 800c76a:	89fb      	ldrh	r3, [r7, #14]
 800c76c:	8053      	strh	r3, [r2, #2]
 800c76e:	e03e      	b.n	800c7ee <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c770:	8bfb      	ldrh	r3, [r7, #30]
 800c772:	f103 0214 	add.w	r2, r3, #20
 800c776:	8abb      	ldrh	r3, [r7, #20]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d838      	bhi.n	800c7ee <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c77c:	8afa      	ldrh	r2, [r7, #22]
 800c77e:	8bfb      	ldrh	r3, [r7, #30]
 800c780:	4413      	add	r3, r2
 800c782:	b29b      	uxth	r3, r3
 800c784:	3308      	adds	r3, #8
 800c786:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c790:	d106      	bne.n	800c7a0 <mem_trim+0x180>
 800c792:	4b1b      	ldr	r3, [pc, #108]	; (800c800 <mem_trim+0x1e0>)
 800c794:	f240 3216 	movw	r2, #790	; 0x316
 800c798:	491d      	ldr	r1, [pc, #116]	; (800c810 <mem_trim+0x1f0>)
 800c79a:	481b      	ldr	r0, [pc, #108]	; (800c808 <mem_trim+0x1e8>)
 800c79c:	f00b f812 	bl	80177c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c7a0:	89fb      	ldrh	r3, [r7, #14]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7ff fd94 	bl	800c2d0 <ptr_to_mem>
 800c7a8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c7aa:	4b1a      	ldr	r3, [pc, #104]	; (800c814 <mem_trim+0x1f4>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	693a      	ldr	r2, [r7, #16]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d202      	bcs.n	800c7ba <mem_trim+0x19a>
      lfree = mem2;
 800c7b4:	4a17      	ldr	r2, [pc, #92]	; (800c814 <mem_trim+0x1f4>)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	881a      	ldrh	r2, [r3, #0]
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	8afa      	ldrh	r2, [r7, #22]
 800c7cc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	89fa      	ldrh	r2, [r7, #14]
 800c7d2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7dc:	d007      	beq.n	800c7ee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fd74 	bl	800c2d0 <ptr_to_mem>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	89fb      	ldrh	r3, [r7, #14]
 800c7ec:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c7ee:	687b      	ldr	r3, [r7, #4]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3720      	adds	r7, #32
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20005f58 	.word	0x20005f58
 800c7fc:	20005f5c 	.word	0x20005f5c
 800c800:	080189bc 	.word	0x080189bc
 800c804:	08018b2c 	.word	0x08018b2c
 800c808:	08018a04 	.word	0x08018a04
 800c80c:	08018b44 	.word	0x08018b44
 800c810:	08018b64 	.word	0x08018b64
 800c814:	20005f60 	.word	0x20005f60

0800c818 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c822:	88fb      	ldrh	r3, [r7, #6]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d101      	bne.n	800c82c <mem_malloc+0x14>
    return NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	e0d9      	b.n	800c9e0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c82c:	88fb      	ldrh	r3, [r7, #6]
 800c82e:	3303      	adds	r3, #3
 800c830:	b29b      	uxth	r3, r3
 800c832:	f023 0303 	bic.w	r3, r3, #3
 800c836:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c838:	8bbb      	ldrh	r3, [r7, #28]
 800c83a:	2b0b      	cmp	r3, #11
 800c83c:	d801      	bhi.n	800c842 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c83e:	230c      	movs	r3, #12
 800c840:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c842:	8bbb      	ldrh	r3, [r7, #28]
 800c844:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c848:	d803      	bhi.n	800c852 <mem_malloc+0x3a>
 800c84a:	8bba      	ldrh	r2, [r7, #28]
 800c84c:	88fb      	ldrh	r3, [r7, #6]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d201      	bcs.n	800c856 <mem_malloc+0x3e>
    return NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	e0c4      	b.n	800c9e0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c856:	4b64      	ldr	r3, [pc, #400]	; (800c9e8 <mem_malloc+0x1d0>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff fd4a 	bl	800c2f4 <mem_to_ptr>
 800c860:	4603      	mov	r3, r0
 800c862:	83fb      	strh	r3, [r7, #30]
 800c864:	e0b4      	b.n	800c9d0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c866:	8bfb      	ldrh	r3, [r7, #30]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff fd31 	bl	800c2d0 <ptr_to_mem>
 800c86e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	791b      	ldrb	r3, [r3, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 80a4 	bne.w	800c9c2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	8bfb      	ldrh	r3, [r7, #30]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	f1a3 0208 	sub.w	r2, r3, #8
 800c888:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c88a:	429a      	cmp	r2, r3
 800c88c:	f0c0 8099 	bcc.w	800c9c2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	461a      	mov	r2, r3
 800c896:	8bfb      	ldrh	r3, [r7, #30]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	f1a3 0208 	sub.w	r2, r3, #8
 800c89e:	8bbb      	ldrh	r3, [r7, #28]
 800c8a0:	3314      	adds	r3, #20
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d333      	bcc.n	800c90e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c8a6:	8bfa      	ldrh	r2, [r7, #30]
 800c8a8:	8bbb      	ldrh	r3, [r7, #28]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c8b2:	8a7b      	ldrh	r3, [r7, #18]
 800c8b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8b8:	d106      	bne.n	800c8c8 <mem_malloc+0xb0>
 800c8ba:	4b4c      	ldr	r3, [pc, #304]	; (800c9ec <mem_malloc+0x1d4>)
 800c8bc:	f240 3287 	movw	r2, #903	; 0x387
 800c8c0:	494b      	ldr	r1, [pc, #300]	; (800c9f0 <mem_malloc+0x1d8>)
 800c8c2:	484c      	ldr	r0, [pc, #304]	; (800c9f4 <mem_malloc+0x1dc>)
 800c8c4:	f00a ff7e 	bl	80177c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c8c8:	8a7b      	ldrh	r3, [r7, #18]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7ff fd00 	bl	800c2d0 <ptr_to_mem>
 800c8d0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	881a      	ldrh	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	8bfa      	ldrh	r2, [r7, #30]
 800c8e4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	8a7a      	ldrh	r2, [r7, #18]
 800c8ea:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8fa:	d00b      	beq.n	800c914 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff fce5 	bl	800c2d0 <ptr_to_mem>
 800c906:	4602      	mov	r2, r0
 800c908:	8a7b      	ldrh	r3, [r7, #18]
 800c90a:	8053      	strh	r3, [r2, #2]
 800c90c:	e002      	b.n	800c914 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2201      	movs	r2, #1
 800c912:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c914:	4b34      	ldr	r3, [pc, #208]	; (800c9e8 <mem_malloc+0x1d0>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d127      	bne.n	800c96e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c91e:	4b32      	ldr	r3, [pc, #200]	; (800c9e8 <mem_malloc+0x1d0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c924:	e005      	b.n	800c932 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7ff fcd0 	bl	800c2d0 <ptr_to_mem>
 800c930:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	791b      	ldrb	r3, [r3, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d004      	beq.n	800c944 <mem_malloc+0x12c>
 800c93a:	4b2f      	ldr	r3, [pc, #188]	; (800c9f8 <mem_malloc+0x1e0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69ba      	ldr	r2, [r7, #24]
 800c940:	429a      	cmp	r2, r3
 800c942:	d1f0      	bne.n	800c926 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c944:	4a28      	ldr	r2, [pc, #160]	; (800c9e8 <mem_malloc+0x1d0>)
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c94a:	4b27      	ldr	r3, [pc, #156]	; (800c9e8 <mem_malloc+0x1d0>)
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	4b2a      	ldr	r3, [pc, #168]	; (800c9f8 <mem_malloc+0x1e0>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d00b      	beq.n	800c96e <mem_malloc+0x156>
 800c956:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <mem_malloc+0x1d0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	791b      	ldrb	r3, [r3, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d006      	beq.n	800c96e <mem_malloc+0x156>
 800c960:	4b22      	ldr	r3, [pc, #136]	; (800c9ec <mem_malloc+0x1d4>)
 800c962:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c966:	4925      	ldr	r1, [pc, #148]	; (800c9fc <mem_malloc+0x1e4>)
 800c968:	4822      	ldr	r0, [pc, #136]	; (800c9f4 <mem_malloc+0x1dc>)
 800c96a:	f00a ff2b 	bl	80177c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c96e:	8bba      	ldrh	r2, [r7, #28]
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4413      	add	r3, r2
 800c974:	3308      	adds	r3, #8
 800c976:	4a20      	ldr	r2, [pc, #128]	; (800c9f8 <mem_malloc+0x1e0>)
 800c978:	6812      	ldr	r2, [r2, #0]
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d906      	bls.n	800c98c <mem_malloc+0x174>
 800c97e:	4b1b      	ldr	r3, [pc, #108]	; (800c9ec <mem_malloc+0x1d4>)
 800c980:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c984:	491e      	ldr	r1, [pc, #120]	; (800ca00 <mem_malloc+0x1e8>)
 800c986:	481b      	ldr	r0, [pc, #108]	; (800c9f4 <mem_malloc+0x1dc>)
 800c988:	f00a ff1c 	bl	80177c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	2b00      	cmp	r3, #0
 800c994:	d006      	beq.n	800c9a4 <mem_malloc+0x18c>
 800c996:	4b15      	ldr	r3, [pc, #84]	; (800c9ec <mem_malloc+0x1d4>)
 800c998:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c99c:	4919      	ldr	r1, [pc, #100]	; (800ca04 <mem_malloc+0x1ec>)
 800c99e:	4815      	ldr	r0, [pc, #84]	; (800c9f4 <mem_malloc+0x1dc>)
 800c9a0:	f00a ff10 	bl	80177c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f003 0303 	and.w	r3, r3, #3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d006      	beq.n	800c9bc <mem_malloc+0x1a4>
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <mem_malloc+0x1d4>)
 800c9b0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c9b4:	4914      	ldr	r1, [pc, #80]	; (800ca08 <mem_malloc+0x1f0>)
 800c9b6:	480f      	ldr	r0, [pc, #60]	; (800c9f4 <mem_malloc+0x1dc>)
 800c9b8:	f00a ff04 	bl	80177c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	3308      	adds	r3, #8
 800c9c0:	e00e      	b.n	800c9e0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c9c2:	8bfb      	ldrh	r3, [r7, #30]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fc83 	bl	800c2d0 <ptr_to_mem>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	881b      	ldrh	r3, [r3, #0]
 800c9ce:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c9d0:	8bfa      	ldrh	r2, [r7, #30]
 800c9d2:	8bbb      	ldrh	r3, [r7, #28]
 800c9d4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	f4ff af44 	bcc.w	800c866 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3720      	adds	r7, #32
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	20005f60 	.word	0x20005f60
 800c9ec:	080189bc 	.word	0x080189bc
 800c9f0:	08018b64 	.word	0x08018b64
 800c9f4:	08018a04 	.word	0x08018a04
 800c9f8:	20005f5c 	.word	0x20005f5c
 800c9fc:	08018b78 	.word	0x08018b78
 800ca00:	08018b94 	.word	0x08018b94
 800ca04:	08018bc4 	.word	0x08018bc4
 800ca08:	08018bf4 	.word	0x08018bf4

0800ca0c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	3303      	adds	r3, #3
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	e011      	b.n	800ca52 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	4413      	add	r3, r2
 800ca4a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	885b      	ldrh	r3, [r3, #2]
 800ca56:	461a      	mov	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	dbe7      	blt.n	800ca2e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ca5e:	bf00      	nop
 800ca60:	bf00      	nop
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ca72:	2300      	movs	r3, #0
 800ca74:	80fb      	strh	r3, [r7, #6]
 800ca76:	e009      	b.n	800ca8c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ca78:	88fb      	ldrh	r3, [r7, #6]
 800ca7a:	4a08      	ldr	r2, [pc, #32]	; (800ca9c <memp_init+0x30>)
 800ca7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff ffc3 	bl	800ca0c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ca86:	88fb      	ldrh	r3, [r7, #6]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	80fb      	strh	r3, [r7, #6]
 800ca8c:	88fb      	ldrh	r3, [r7, #6]
 800ca8e:	2b08      	cmp	r3, #8
 800ca90:	d9f2      	bls.n	800ca78 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	0801b588 	.word	0x0801b588

0800caa0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d012      	beq.n	800cadc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	6812      	ldr	r2, [r2, #0]
 800cabe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f003 0303 	and.w	r3, r3, #3
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d006      	beq.n	800cad8 <do_memp_malloc_pool+0x38>
 800caca:	4b07      	ldr	r3, [pc, #28]	; (800cae8 <do_memp_malloc_pool+0x48>)
 800cacc:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cad0:	4906      	ldr	r1, [pc, #24]	; (800caec <do_memp_malloc_pool+0x4c>)
 800cad2:	4807      	ldr	r0, [pc, #28]	; (800caf0 <do_memp_malloc_pool+0x50>)
 800cad4:	f00a fe76 	bl	80177c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	e000      	b.n	800cade <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	08018c18 	.word	0x08018c18
 800caec:	08018c48 	.word	0x08018c48
 800caf0:	08018c6c 	.word	0x08018c6c

0800caf4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d106      	bne.n	800cb10 <memp_malloc_pool+0x1c>
 800cb02:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <memp_malloc_pool+0x38>)
 800cb04:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cb08:	4909      	ldr	r1, [pc, #36]	; (800cb30 <memp_malloc_pool+0x3c>)
 800cb0a:	480a      	ldr	r0, [pc, #40]	; (800cb34 <memp_malloc_pool+0x40>)
 800cb0c:	f00a fe5a 	bl	80177c4 <iprintf>
  if (desc == NULL) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <memp_malloc_pool+0x26>
    return NULL;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e003      	b.n	800cb22 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff ffc0 	bl	800caa0 <do_memp_malloc_pool>
 800cb20:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	08018c18 	.word	0x08018c18
 800cb30:	08018c94 	.word	0x08018c94
 800cb34:	08018c6c 	.word	0x08018c6c

0800cb38 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	2b08      	cmp	r3, #8
 800cb46:	d908      	bls.n	800cb5a <memp_malloc+0x22>
 800cb48:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <memp_malloc+0x3c>)
 800cb4a:	f240 1257 	movw	r2, #343	; 0x157
 800cb4e:	490a      	ldr	r1, [pc, #40]	; (800cb78 <memp_malloc+0x40>)
 800cb50:	480a      	ldr	r0, [pc, #40]	; (800cb7c <memp_malloc+0x44>)
 800cb52:	f00a fe37 	bl	80177c4 <iprintf>
 800cb56:	2300      	movs	r3, #0
 800cb58:	e008      	b.n	800cb6c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	4a08      	ldr	r2, [pc, #32]	; (800cb80 <memp_malloc+0x48>)
 800cb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7ff ff9c 	bl	800caa0 <do_memp_malloc_pool>
 800cb68:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	08018c18 	.word	0x08018c18
 800cb78:	08018ca8 	.word	0x08018ca8
 800cb7c:	08018c6c 	.word	0x08018c6c
 800cb80:	0801b588 	.word	0x0801b588

0800cb84 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	f003 0303 	and.w	r3, r3, #3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d006      	beq.n	800cba6 <do_memp_free_pool+0x22>
 800cb98:	4b0a      	ldr	r3, [pc, #40]	; (800cbc4 <do_memp_free_pool+0x40>)
 800cb9a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cb9e:	490a      	ldr	r1, [pc, #40]	; (800cbc8 <do_memp_free_pool+0x44>)
 800cba0:	480a      	ldr	r0, [pc, #40]	; (800cbcc <do_memp_free_pool+0x48>)
 800cba2:	f00a fe0f 	bl	80177c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cbbc:	bf00      	nop
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08018c18 	.word	0x08018c18
 800cbc8:	08018cc8 	.word	0x08018cc8
 800cbcc:	08018c6c 	.word	0x08018c6c

0800cbd0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <memp_free_pool+0x1e>
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <memp_free_pool+0x3c>)
 800cbe2:	f240 1295 	movw	r2, #405	; 0x195
 800cbe6:	490a      	ldr	r1, [pc, #40]	; (800cc10 <memp_free_pool+0x40>)
 800cbe8:	480a      	ldr	r0, [pc, #40]	; (800cc14 <memp_free_pool+0x44>)
 800cbea:	f00a fdeb 	bl	80177c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d007      	beq.n	800cc04 <memp_free_pool+0x34>
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d004      	beq.n	800cc04 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff ffc1 	bl	800cb84 <do_memp_free_pool>
 800cc02:	e000      	b.n	800cc06 <memp_free_pool+0x36>
    return;
 800cc04:	bf00      	nop
}
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	08018c18 	.word	0x08018c18
 800cc10:	08018c94 	.word	0x08018c94
 800cc14:	08018c6c 	.word	0x08018c6c

0800cc18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	d907      	bls.n	800cc3a <memp_free+0x22>
 800cc2a:	4b0c      	ldr	r3, [pc, #48]	; (800cc5c <memp_free+0x44>)
 800cc2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cc30:	490b      	ldr	r1, [pc, #44]	; (800cc60 <memp_free+0x48>)
 800cc32:	480c      	ldr	r0, [pc, #48]	; (800cc64 <memp_free+0x4c>)
 800cc34:	f00a fdc6 	bl	80177c4 <iprintf>
 800cc38:	e00c      	b.n	800cc54 <memp_free+0x3c>

  if (mem == NULL) {
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d008      	beq.n	800cc52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	4a09      	ldr	r2, [pc, #36]	; (800cc68 <memp_free+0x50>)
 800cc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff ff9a 	bl	800cb84 <do_memp_free_pool>
 800cc50:	e000      	b.n	800cc54 <memp_free+0x3c>
    return;
 800cc52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	08018c18 	.word	0x08018c18
 800cc60:	08018ce8 	.word	0x08018ce8
 800cc64:	08018c6c 	.word	0x08018c6c
 800cc68:	0801b588 	.word	0x0801b588

0800cc6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cc70:	bf00      	nop
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d108      	bne.n	800cca2 <netif_add+0x26>
 800cc90:	4b57      	ldr	r3, [pc, #348]	; (800cdf0 <netif_add+0x174>)
 800cc92:	f240 1227 	movw	r2, #295	; 0x127
 800cc96:	4957      	ldr	r1, [pc, #348]	; (800cdf4 <netif_add+0x178>)
 800cc98:	4857      	ldr	r0, [pc, #348]	; (800cdf8 <netif_add+0x17c>)
 800cc9a:	f00a fd93 	bl	80177c4 <iprintf>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e0a2      	b.n	800cde8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d108      	bne.n	800ccba <netif_add+0x3e>
 800cca8:	4b51      	ldr	r3, [pc, #324]	; (800cdf0 <netif_add+0x174>)
 800ccaa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ccae:	4953      	ldr	r1, [pc, #332]	; (800cdfc <netif_add+0x180>)
 800ccb0:	4851      	ldr	r0, [pc, #324]	; (800cdf8 <netif_add+0x17c>)
 800ccb2:	f00a fd87 	bl	80177c4 <iprintf>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e096      	b.n	800cde8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ccc0:	4b4f      	ldr	r3, [pc, #316]	; (800ce00 <netif_add+0x184>)
 800ccc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ccca:	4b4d      	ldr	r3, [pc, #308]	; (800ce00 <netif_add+0x184>)
 800cccc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ccd4:	4b4a      	ldr	r3, [pc, #296]	; (800ce00 <netif_add+0x184>)
 800ccd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	4a45      	ldr	r2, [pc, #276]	; (800ce04 <netif_add+0x188>)
 800ccee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6a3a      	ldr	r2, [r7, #32]
 800cd08:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cd0a:	4b3f      	ldr	r3, [pc, #252]	; (800ce08 <netif_add+0x18c>)
 800cd0c:	781a      	ldrb	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd18:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	68b9      	ldr	r1, [r7, #8]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f000 f913 	bl	800cf4c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	4798      	blx	r3
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <netif_add+0xba>
    return NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e058      	b.n	800cde8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd3c:	2bff      	cmp	r3, #255	; 0xff
 800cd3e:	d103      	bne.n	800cd48 <netif_add+0xcc>
        netif->num = 0;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cd4c:	4b2f      	ldr	r3, [pc, #188]	; (800ce0c <netif_add+0x190>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	617b      	str	r3, [r7, #20]
 800cd52:	e02b      	b.n	800cdac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d106      	bne.n	800cd6a <netif_add+0xee>
 800cd5c:	4b24      	ldr	r3, [pc, #144]	; (800cdf0 <netif_add+0x174>)
 800cd5e:	f240 128b 	movw	r2, #395	; 0x18b
 800cd62:	492b      	ldr	r1, [pc, #172]	; (800ce10 <netif_add+0x194>)
 800cd64:	4824      	ldr	r0, [pc, #144]	; (800cdf8 <netif_add+0x17c>)
 800cd66:	f00a fd2d 	bl	80177c4 <iprintf>
        num_netifs++;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	2bff      	cmp	r3, #255	; 0xff
 800cd74:	dd06      	ble.n	800cd84 <netif_add+0x108>
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <netif_add+0x174>)
 800cd78:	f240 128d 	movw	r2, #397	; 0x18d
 800cd7c:	4925      	ldr	r1, [pc, #148]	; (800ce14 <netif_add+0x198>)
 800cd7e:	481e      	ldr	r0, [pc, #120]	; (800cdf8 <netif_add+0x17c>)
 800cd80:	f00a fd20 	bl	80177c4 <iprintf>
        if (netif2->num == netif->num) {
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d108      	bne.n	800cda6 <netif_add+0x12a>
          netif->num++;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cda4:	e005      	b.n	800cdb2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	617b      	str	r3, [r7, #20]
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1d0      	bne.n	800cd54 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1be      	bne.n	800cd36 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdbe:	2bfe      	cmp	r3, #254	; 0xfe
 800cdc0:	d103      	bne.n	800cdca <netif_add+0x14e>
    netif_num = 0;
 800cdc2:	4b11      	ldr	r3, [pc, #68]	; (800ce08 <netif_add+0x18c>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	e006      	b.n	800cdd8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <netif_add+0x18c>)
 800cdd6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cdd8:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <netif_add+0x190>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cde0:	4a0a      	ldr	r2, [pc, #40]	; (800ce0c <netif_add+0x190>)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cde6:	68fb      	ldr	r3, [r7, #12]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	08018d04 	.word	0x08018d04
 800cdf4:	08018d98 	.word	0x08018d98
 800cdf8:	08018d54 	.word	0x08018d54
 800cdfc:	08018db4 	.word	0x08018db4
 800ce00:	0801b5ec 	.word	0x0801b5ec
 800ce04:	0800d227 	.word	0x0800d227
 800ce08:	20008e58 	.word	0x20008e58
 800ce0c:	20008e50 	.word	0x20008e50
 800ce10:	08018dd8 	.word	0x08018dd8
 800ce14:	08018dec 	.word	0x08018dec

0800ce18 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f002 fbe5 	bl	800f5f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f007 f883 	bl	8013f38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce32:	bf00      	nop
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <netif_do_set_ipaddr+0x20>
 800ce4e:	4b1d      	ldr	r3, [pc, #116]	; (800cec4 <netif_do_set_ipaddr+0x88>)
 800ce50:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ce54:	491c      	ldr	r1, [pc, #112]	; (800cec8 <netif_do_set_ipaddr+0x8c>)
 800ce56:	481d      	ldr	r0, [pc, #116]	; (800cecc <netif_do_set_ipaddr+0x90>)
 800ce58:	f00a fcb4 	bl	80177c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <netif_do_set_ipaddr+0x34>
 800ce62:	4b18      	ldr	r3, [pc, #96]	; (800cec4 <netif_do_set_ipaddr+0x88>)
 800ce64:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ce68:	4917      	ldr	r1, [pc, #92]	; (800cec8 <netif_do_set_ipaddr+0x8c>)
 800ce6a:	4818      	ldr	r0, [pc, #96]	; (800cecc <netif_do_set_ipaddr+0x90>)
 800ce6c:	f00a fcaa 	bl	80177c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	3304      	adds	r3, #4
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d01c      	beq.n	800ceb8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3304      	adds	r3, #4
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ce8e:	f107 0314 	add.w	r3, r7, #20
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff ffbf 	bl	800ce18 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <netif_do_set_ipaddr+0x6a>
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	e000      	b.n	800cea8 <netif_do_set_ipaddr+0x6c>
 800cea6:	2300      	movs	r3, #0
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ceac:	2101      	movs	r1, #1
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 f8d2 	bl	800d058 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e000      	b.n	800ceba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	08018d04 	.word	0x08018d04
 800cec8:	08018e1c 	.word	0x08018e1c
 800cecc:	08018d54 	.word	0x08018d54

0800ced0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3308      	adds	r3, #8
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d00a      	beq.n	800cf00 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <netif_do_set_netmask+0x26>
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	e000      	b.n	800cef8 <netif_do_set_netmask+0x28>
 800cef6:	2300      	movs	r3, #0
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b085      	sub	sp, #20
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	330c      	adds	r3, #12
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d00a      	beq.n	800cf3e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <netif_do_set_gw+0x26>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	e000      	b.n	800cf36 <netif_do_set_gw+0x28>
 800cf34:	2300      	movs	r3, #0
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e000      	b.n	800cf40 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cf68:	4b1c      	ldr	r3, [pc, #112]	; (800cfdc <netif_set_addr+0x90>)
 800cf6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cf72:	4b1a      	ldr	r3, [pc, #104]	; (800cfdc <netif_set_addr+0x90>)
 800cf74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cf7c:	4b17      	ldr	r3, [pc, #92]	; (800cfdc <netif_set_addr+0x90>)
 800cf7e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <netif_set_addr+0x42>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <netif_set_addr+0x46>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e000      	b.n	800cf94 <netif_set_addr+0x48>
 800cf92:	2300      	movs	r3, #0
 800cf94:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d006      	beq.n	800cfaa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cf9c:	f107 0310 	add.w	r3, r7, #16
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	68b9      	ldr	r1, [r7, #8]
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f7ff ff49 	bl	800ce3c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f7ff ff8e 	bl	800ced0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cfb4:	69ba      	ldr	r2, [r7, #24]
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7ff ffa8 	bl	800cf0e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d106      	bne.n	800cfd2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cfc4:	f107 0310 	add.w	r3, r7, #16
 800cfc8:	461a      	mov	r2, r3
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f7ff ff35 	bl	800ce3c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cfd2:	bf00      	nop
 800cfd4:	3720      	adds	r7, #32
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	0801b5ec 	.word	0x0801b5ec

0800cfe0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cfe8:	4a04      	ldr	r2, [pc, #16]	; (800cffc <netif_set_default+0x1c>)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cfee:	bf00      	nop
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	20008e54 	.word	0x20008e54

0800d000 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d107      	bne.n	800d01e <netif_set_up+0x1e>
 800d00e:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <netif_set_up+0x4c>)
 800d010:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d014:	490e      	ldr	r1, [pc, #56]	; (800d050 <netif_set_up+0x50>)
 800d016:	480f      	ldr	r0, [pc, #60]	; (800d054 <netif_set_up+0x54>)
 800d018:	f00a fbd4 	bl	80177c4 <iprintf>
 800d01c:	e013      	b.n	800d046 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10c      	bne.n	800d046 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d032:	f043 0301 	orr.w	r3, r3, #1
 800d036:	b2da      	uxtb	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d03e:	2103      	movs	r1, #3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f809 	bl	800d058 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	08018d04 	.word	0x08018d04
 800d050:	08018e8c 	.word	0x08018e8c
 800d054:	08018d54 	.word	0x08018d54

0800d058 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <netif_issue_reports+0x20>
 800d06a:	4b18      	ldr	r3, [pc, #96]	; (800d0cc <netif_issue_reports+0x74>)
 800d06c:	f240 326d 	movw	r2, #877	; 0x36d
 800d070:	4917      	ldr	r1, [pc, #92]	; (800d0d0 <netif_issue_reports+0x78>)
 800d072:	4818      	ldr	r0, [pc, #96]	; (800d0d4 <netif_issue_reports+0x7c>)
 800d074:	f00a fba6 	bl	80177c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	2b00      	cmp	r3, #0
 800d084:	d01e      	beq.n	800d0c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d08c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d090:	2b00      	cmp	r3, #0
 800d092:	d017      	beq.n	800d0c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d094:	78fb      	ldrb	r3, [r7, #3]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d013      	beq.n	800d0c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00e      	beq.n	800d0c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0ae:	f003 0308 	and.w	r3, r3, #8
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d007      	beq.n	800d0c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f007 fea5 	bl	8014e0c <etharp_request>
 800d0c2:	e000      	b.n	800d0c6 <netif_issue_reports+0x6e>
    return;
 800d0c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	08018d04 	.word	0x08018d04
 800d0d0:	08018ea8 	.word	0x08018ea8
 800d0d4:	08018d54 	.word	0x08018d54

0800d0d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d107      	bne.n	800d0f6 <netif_set_down+0x1e>
 800d0e6:	4b12      	ldr	r3, [pc, #72]	; (800d130 <netif_set_down+0x58>)
 800d0e8:	f240 329b 	movw	r2, #923	; 0x39b
 800d0ec:	4911      	ldr	r1, [pc, #68]	; (800d134 <netif_set_down+0x5c>)
 800d0ee:	4812      	ldr	r0, [pc, #72]	; (800d138 <netif_set_down+0x60>)
 800d0f0:	f00a fb68 	bl	80177c4 <iprintf>
 800d0f4:	e019      	b.n	800d12a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	d012      	beq.n	800d12a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d11c:	f003 0308 	and.w	r3, r3, #8
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f007 fa2f 	bl	8014588 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	08018d04 	.word	0x08018d04
 800d134:	08018ecc 	.word	0x08018ecc
 800d138:	08018d54 	.word	0x08018d54

0800d13c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d107      	bne.n	800d15a <netif_set_link_up+0x1e>
 800d14a:	4b13      	ldr	r3, [pc, #76]	; (800d198 <netif_set_link_up+0x5c>)
 800d14c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d150:	4912      	ldr	r1, [pc, #72]	; (800d19c <netif_set_link_up+0x60>)
 800d152:	4813      	ldr	r0, [pc, #76]	; (800d1a0 <netif_set_link_up+0x64>)
 800d154:	f00a fb36 	bl	80177c4 <iprintf>
 800d158:	e01b      	b.n	800d192 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d160:	f003 0304 	and.w	r3, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	d114      	bne.n	800d192 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d16e:	f043 0304 	orr.w	r3, r3, #4
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d17a:	2103      	movs	r1, #3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff ff6b 	bl	800d058 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	69db      	ldr	r3, [r3, #28]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <netif_set_link_up+0x56>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	08018d04 	.word	0x08018d04
 800d19c:	08018eec 	.word	0x08018eec
 800d1a0:	08018d54 	.word	0x08018d54

0800d1a4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d107      	bne.n	800d1c2 <netif_set_link_down+0x1e>
 800d1b2:	4b11      	ldr	r3, [pc, #68]	; (800d1f8 <netif_set_link_down+0x54>)
 800d1b4:	f240 4206 	movw	r2, #1030	; 0x406
 800d1b8:	4910      	ldr	r1, [pc, #64]	; (800d1fc <netif_set_link_down+0x58>)
 800d1ba:	4811      	ldr	r0, [pc, #68]	; (800d200 <netif_set_link_down+0x5c>)
 800d1bc:	f00a fb02 	bl	80177c4 <iprintf>
 800d1c0:	e017      	b.n	800d1f2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d010      	beq.n	800d1f2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1d6:	f023 0304 	bic.w	r3, r3, #4
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <netif_set_link_down+0x4e>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	08018d04 	.word	0x08018d04
 800d1fc:	08018f10 	.word	0x08018f10
 800d200:	08018d54 	.word	0x08018d54

0800d204 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d002      	beq.n	800d21a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	61da      	str	r2, [r3, #28]
  }
}
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d226:	b480      	push	{r7}
 800d228:	b085      	sub	sp, #20
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	60f8      	str	r0, [r7, #12]
 800d22e:	60b9      	str	r1, [r7, #8]
 800d230:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d232:	f06f 030b 	mvn.w	r3, #11
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
	...

0800d244 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d013      	beq.n	800d27c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d254:	4b0d      	ldr	r3, [pc, #52]	; (800d28c <netif_get_by_index+0x48>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	e00c      	b.n	800d276 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d262:	3301      	adds	r3, #1
 800d264:	b2db      	uxtb	r3, r3
 800d266:	79fa      	ldrb	r2, [r7, #7]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d101      	bne.n	800d270 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	e006      	b.n	800d27e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1ef      	bne.n	800d25c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	20008e50 	.word	0x20008e50

0800d290 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <pbuf_free_ooseq+0x38>)
 800d298:	2200      	movs	r2, #0
 800d29a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d29c:	4b0b      	ldr	r3, [pc, #44]	; (800d2cc <pbuf_free_ooseq+0x3c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	607b      	str	r3, [r7, #4]
 800d2a2:	e00a      	b.n	800d2ba <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d003      	beq.n	800d2b4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f002 f9df 	bl	800f670 <tcp_free_ooseq>
      return;
 800d2b2:	e005      	b.n	800d2c0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	607b      	str	r3, [r7, #4]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1f1      	bne.n	800d2a4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20008e59 	.word	0x20008e59
 800d2cc:	20008e68 	.word	0x20008e68

0800d2d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d2d4:	4b03      	ldr	r3, [pc, #12]	; (800d2e4 <pbuf_pool_is_empty+0x14>)
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d2da:	bf00      	nop
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	20008e59 	.word	0x20008e59

0800d2e8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	80fb      	strh	r3, [r7, #6]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	88fa      	ldrh	r2, [r7, #6]
 800d30e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	88ba      	ldrh	r2, [r7, #4]
 800d314:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d316:	8b3b      	ldrh	r3, [r7, #24]
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	7f3a      	ldrb	r2, [r7, #28]
 800d322:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2201      	movs	r2, #1
 800d328:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	73da      	strb	r2, [r3, #15]
}
 800d330:	bf00      	nop
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08c      	sub	sp, #48	; 0x30
 800d340:	af02      	add	r7, sp, #8
 800d342:	4603      	mov	r3, r0
 800d344:	71fb      	strb	r3, [r7, #7]
 800d346:	460b      	mov	r3, r1
 800d348:	80bb      	strh	r3, [r7, #4]
 800d34a:	4613      	mov	r3, r2
 800d34c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d34e:	79fb      	ldrb	r3, [r7, #7]
 800d350:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d352:	887b      	ldrh	r3, [r7, #2]
 800d354:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d358:	d07f      	beq.n	800d45a <pbuf_alloc+0x11e>
 800d35a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d35e:	f300 80c8 	bgt.w	800d4f2 <pbuf_alloc+0x1b6>
 800d362:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d366:	d010      	beq.n	800d38a <pbuf_alloc+0x4e>
 800d368:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d36c:	f300 80c1 	bgt.w	800d4f2 <pbuf_alloc+0x1b6>
 800d370:	2b01      	cmp	r3, #1
 800d372:	d002      	beq.n	800d37a <pbuf_alloc+0x3e>
 800d374:	2b41      	cmp	r3, #65	; 0x41
 800d376:	f040 80bc 	bne.w	800d4f2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d37a:	887a      	ldrh	r2, [r7, #2]
 800d37c:	88bb      	ldrh	r3, [r7, #4]
 800d37e:	4619      	mov	r1, r3
 800d380:	2000      	movs	r0, #0
 800d382:	f000 f8d1 	bl	800d528 <pbuf_alloc_reference>
 800d386:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d388:	e0bd      	b.n	800d506 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d392:	88bb      	ldrh	r3, [r7, #4]
 800d394:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d396:	2008      	movs	r0, #8
 800d398:	f7ff fbce 	bl	800cb38 <memp_malloc>
 800d39c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d109      	bne.n	800d3b8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d3a4:	f7ff ff94 	bl	800d2d0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d3ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3b0:	f000 faa8 	bl	800d904 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	e0a7      	b.n	800d508 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d3b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3ba:	3303      	adds	r3, #3
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	8b7a      	ldrh	r2, [r7, #26]
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	bf28      	it	cs
 800d3d0:	4613      	movcs	r3, r2
 800d3d2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3d6:	3310      	adds	r3, #16
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	4413      	add	r3, r2
 800d3dc:	3303      	adds	r3, #3
 800d3de:	f023 0303 	bic.w	r3, r3, #3
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	89f9      	ldrh	r1, [r7, #14]
 800d3e6:	8b7a      	ldrh	r2, [r7, #26]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	887b      	ldrh	r3, [r7, #2]
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	4601      	mov	r1, r0
 800d3f4:	6938      	ldr	r0, [r7, #16]
 800d3f6:	f7ff ff77 	bl	800d2e8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	f003 0303 	and.w	r3, r3, #3
 800d402:	2b00      	cmp	r3, #0
 800d404:	d006      	beq.n	800d414 <pbuf_alloc+0xd8>
 800d406:	4b42      	ldr	r3, [pc, #264]	; (800d510 <pbuf_alloc+0x1d4>)
 800d408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d40c:	4941      	ldr	r1, [pc, #260]	; (800d514 <pbuf_alloc+0x1d8>)
 800d40e:	4842      	ldr	r0, [pc, #264]	; (800d518 <pbuf_alloc+0x1dc>)
 800d410:	f00a f9d8 	bl	80177c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d416:	3303      	adds	r3, #3
 800d418:	f023 0303 	bic.w	r3, r3, #3
 800d41c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d420:	d106      	bne.n	800d430 <pbuf_alloc+0xf4>
 800d422:	4b3b      	ldr	r3, [pc, #236]	; (800d510 <pbuf_alloc+0x1d4>)
 800d424:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d428:	493c      	ldr	r1, [pc, #240]	; (800d51c <pbuf_alloc+0x1e0>)
 800d42a:	483b      	ldr	r0, [pc, #236]	; (800d518 <pbuf_alloc+0x1dc>)
 800d42c:	f00a f9ca 	bl	80177c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	2b00      	cmp	r3, #0
 800d434:	d102      	bne.n	800d43c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	627b      	str	r3, [r7, #36]	; 0x24
 800d43a:	e002      	b.n	800d442 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d446:	8b7a      	ldrh	r2, [r7, #26]
 800d448:	89fb      	ldrh	r3, [r7, #14]
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d452:	8b7b      	ldrh	r3, [r7, #26]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d19e      	bne.n	800d396 <pbuf_alloc+0x5a>
      break;
 800d458:	e055      	b.n	800d506 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d45a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d45c:	3303      	adds	r3, #3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	f023 0303 	bic.w	r3, r3, #3
 800d464:	b29a      	uxth	r2, r3
 800d466:	88bb      	ldrh	r3, [r7, #4]
 800d468:	3303      	adds	r3, #3
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	f023 0303 	bic.w	r3, r3, #3
 800d470:	b29b      	uxth	r3, r3
 800d472:	4413      	add	r3, r2
 800d474:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d476:	8b3b      	ldrh	r3, [r7, #24]
 800d478:	3310      	adds	r3, #16
 800d47a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d47c:	8b3a      	ldrh	r2, [r7, #24]
 800d47e:	88bb      	ldrh	r3, [r7, #4]
 800d480:	3303      	adds	r3, #3
 800d482:	f023 0303 	bic.w	r3, r3, #3
 800d486:	429a      	cmp	r2, r3
 800d488:	d306      	bcc.n	800d498 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d48a:	8afa      	ldrh	r2, [r7, #22]
 800d48c:	88bb      	ldrh	r3, [r7, #4]
 800d48e:	3303      	adds	r3, #3
 800d490:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d494:	429a      	cmp	r2, r3
 800d496:	d201      	bcs.n	800d49c <pbuf_alloc+0x160>
        return NULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	e035      	b.n	800d508 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d49c:	8afb      	ldrh	r3, [r7, #22]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff f9ba 	bl	800c818 <mem_malloc>
 800d4a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <pbuf_alloc+0x174>
        return NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e02b      	b.n	800d508 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d4b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b6:	4413      	add	r3, r2
 800d4b8:	3303      	adds	r3, #3
 800d4ba:	f023 0303 	bic.w	r3, r3, #3
 800d4be:	4618      	mov	r0, r3
 800d4c0:	88b9      	ldrh	r1, [r7, #4]
 800d4c2:	88ba      	ldrh	r2, [r7, #4]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	9301      	str	r3, [sp, #4]
 800d4c8:	887b      	ldrh	r3, [r7, #2]
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4601      	mov	r1, r0
 800d4d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4d2:	f7ff ff09 	bl	800d2e8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f003 0303 	and.w	r3, r3, #3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d010      	beq.n	800d504 <pbuf_alloc+0x1c8>
 800d4e2:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <pbuf_alloc+0x1d4>)
 800d4e4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d4e8:	490d      	ldr	r1, [pc, #52]	; (800d520 <pbuf_alloc+0x1e4>)
 800d4ea:	480b      	ldr	r0, [pc, #44]	; (800d518 <pbuf_alloc+0x1dc>)
 800d4ec:	f00a f96a 	bl	80177c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d4f0:	e008      	b.n	800d504 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d4f2:	4b07      	ldr	r3, [pc, #28]	; (800d510 <pbuf_alloc+0x1d4>)
 800d4f4:	f240 1227 	movw	r2, #295	; 0x127
 800d4f8:	490a      	ldr	r1, [pc, #40]	; (800d524 <pbuf_alloc+0x1e8>)
 800d4fa:	4807      	ldr	r0, [pc, #28]	; (800d518 <pbuf_alloc+0x1dc>)
 800d4fc:	f00a f962 	bl	80177c4 <iprintf>
      return NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	e001      	b.n	800d508 <pbuf_alloc+0x1cc>
      break;
 800d504:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3728      	adds	r7, #40	; 0x28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	08018f34 	.word	0x08018f34
 800d514:	08018f64 	.word	0x08018f64
 800d518:	08018f94 	.word	0x08018f94
 800d51c:	08018fbc 	.word	0x08018fbc
 800d520:	08018ff0 	.word	0x08018ff0
 800d524:	0801901c 	.word	0x0801901c

0800d528 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af02      	add	r7, sp, #8
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	807b      	strh	r3, [r7, #2]
 800d534:	4613      	mov	r3, r2
 800d536:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d538:	883b      	ldrh	r3, [r7, #0]
 800d53a:	2b41      	cmp	r3, #65	; 0x41
 800d53c:	d009      	beq.n	800d552 <pbuf_alloc_reference+0x2a>
 800d53e:	883b      	ldrh	r3, [r7, #0]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d006      	beq.n	800d552 <pbuf_alloc_reference+0x2a>
 800d544:	4b0f      	ldr	r3, [pc, #60]	; (800d584 <pbuf_alloc_reference+0x5c>)
 800d546:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d54a:	490f      	ldr	r1, [pc, #60]	; (800d588 <pbuf_alloc_reference+0x60>)
 800d54c:	480f      	ldr	r0, [pc, #60]	; (800d58c <pbuf_alloc_reference+0x64>)
 800d54e:	f00a f939 	bl	80177c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d552:	2007      	movs	r0, #7
 800d554:	f7ff faf0 	bl	800cb38 <memp_malloc>
 800d558:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d101      	bne.n	800d564 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d560:	2300      	movs	r3, #0
 800d562:	e00b      	b.n	800d57c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d564:	8879      	ldrh	r1, [r7, #2]
 800d566:	887a      	ldrh	r2, [r7, #2]
 800d568:	2300      	movs	r3, #0
 800d56a:	9301      	str	r3, [sp, #4]
 800d56c:	883b      	ldrh	r3, [r7, #0]
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	460b      	mov	r3, r1
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff feb7 	bl	800d2e8 <pbuf_init_alloced_pbuf>
  return p;
 800d57a:	68fb      	ldr	r3, [r7, #12]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	08018f34 	.word	0x08018f34
 800d588:	08019038 	.word	0x08019038
 800d58c:	08018f94 	.word	0x08018f94

0800d590 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af02      	add	r7, sp, #8
 800d596:	607b      	str	r3, [r7, #4]
 800d598:	4603      	mov	r3, r0
 800d59a:	73fb      	strb	r3, [r7, #15]
 800d59c:	460b      	mov	r3, r1
 800d59e:	81bb      	strh	r3, [r7, #12]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d5a8:	8a7b      	ldrh	r3, [r7, #18]
 800d5aa:	3303      	adds	r3, #3
 800d5ac:	f023 0203 	bic.w	r2, r3, #3
 800d5b0:	89bb      	ldrh	r3, [r7, #12]
 800d5b2:	441a      	add	r2, r3
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d901      	bls.n	800d5be <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e018      	b.n	800d5f0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d007      	beq.n	800d5d4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d5c4:	8a7b      	ldrh	r3, [r7, #18]
 800d5c6:	3303      	adds	r3, #3
 800d5c8:	f023 0303 	bic.w	r3, r3, #3
 800d5cc:	6a3a      	ldr	r2, [r7, #32]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	617b      	str	r3, [r7, #20]
 800d5d2:	e001      	b.n	800d5d8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	89b9      	ldrh	r1, [r7, #12]
 800d5dc:	89ba      	ldrh	r2, [r7, #12]
 800d5de:	2302      	movs	r3, #2
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	897b      	ldrh	r3, [r7, #10]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	6979      	ldr	r1, [r7, #20]
 800d5ea:	f7ff fe7d 	bl	800d2e8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d5ee:	687b      	ldr	r3, [r7, #4]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <pbuf_realloc+0x20>
 800d60a:	4b3a      	ldr	r3, [pc, #232]	; (800d6f4 <pbuf_realloc+0xfc>)
 800d60c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d610:	4939      	ldr	r1, [pc, #228]	; (800d6f8 <pbuf_realloc+0x100>)
 800d612:	483a      	ldr	r0, [pc, #232]	; (800d6fc <pbuf_realloc+0x104>)
 800d614:	f00a f8d6 	bl	80177c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	891b      	ldrh	r3, [r3, #8]
 800d61c:	887a      	ldrh	r2, [r7, #2]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d263      	bcs.n	800d6ea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	891a      	ldrh	r2, [r3, #8]
 800d626:	887b      	ldrh	r3, [r7, #2]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d62c:	887b      	ldrh	r3, [r7, #2]
 800d62e:	817b      	strh	r3, [r7, #10]
  q = p;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d634:	e018      	b.n	800d668 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	895b      	ldrh	r3, [r3, #10]
 800d63a:	897a      	ldrh	r2, [r7, #10]
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	891a      	ldrh	r2, [r3, #8]
 800d644:	893b      	ldrh	r3, [r7, #8]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	b29a      	uxth	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <pbuf_realloc+0x70>
 800d65a:	4b26      	ldr	r3, [pc, #152]	; (800d6f4 <pbuf_realloc+0xfc>)
 800d65c:	f240 12af 	movw	r2, #431	; 0x1af
 800d660:	4927      	ldr	r1, [pc, #156]	; (800d700 <pbuf_realloc+0x108>)
 800d662:	4826      	ldr	r0, [pc, #152]	; (800d6fc <pbuf_realloc+0x104>)
 800d664:	f00a f8ae 	bl	80177c4 <iprintf>
  while (rem_len > q->len) {
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	895b      	ldrh	r3, [r3, #10]
 800d66c:	897a      	ldrh	r2, [r7, #10]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d8e1      	bhi.n	800d636 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	7b1b      	ldrb	r3, [r3, #12]
 800d676:	f003 030f 	and.w	r3, r3, #15
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d121      	bne.n	800d6c2 <pbuf_realloc+0xca>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	895b      	ldrh	r3, [r3, #10]
 800d682:	897a      	ldrh	r2, [r7, #10]
 800d684:	429a      	cmp	r2, r3
 800d686:	d01c      	beq.n	800d6c2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	7b5b      	ldrb	r3, [r3, #13]
 800d68c:	f003 0302 	and.w	r3, r3, #2
 800d690:	2b00      	cmp	r3, #0
 800d692:	d116      	bne.n	800d6c2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	897b      	ldrh	r3, [r7, #10]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7fe ffba 	bl	800c620 <mem_trim>
 800d6ac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d106      	bne.n	800d6c2 <pbuf_realloc+0xca>
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <pbuf_realloc+0xfc>)
 800d6b6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d6ba:	4912      	ldr	r1, [pc, #72]	; (800d704 <pbuf_realloc+0x10c>)
 800d6bc:	480f      	ldr	r0, [pc, #60]	; (800d6fc <pbuf_realloc+0x104>)
 800d6be:	f00a f881 	bl	80177c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	897a      	ldrh	r2, [r7, #10]
 800d6c6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	895a      	ldrh	r2, [r3, #10]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 f911 	bl	800d904 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]
 800d6e8:	e000      	b.n	800d6ec <pbuf_realloc+0xf4>
    return;
 800d6ea:	bf00      	nop

}
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	08018f34 	.word	0x08018f34
 800d6f8:	0801904c 	.word	0x0801904c
 800d6fc:	08018f94 	.word	0x08018f94
 800d700:	08019064 	.word	0x08019064
 800d704:	0801907c 	.word	0x0801907c

0800d708 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	4613      	mov	r3, r2
 800d714:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <pbuf_add_header_impl+0x22>
 800d71c:	4b2b      	ldr	r3, [pc, #172]	; (800d7cc <pbuf_add_header_impl+0xc4>)
 800d71e:	f240 12df 	movw	r2, #479	; 0x1df
 800d722:	492b      	ldr	r1, [pc, #172]	; (800d7d0 <pbuf_add_header_impl+0xc8>)
 800d724:	482b      	ldr	r0, [pc, #172]	; (800d7d4 <pbuf_add_header_impl+0xcc>)
 800d726:	f00a f84d 	bl	80177c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <pbuf_add_header_impl+0x30>
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d736:	d301      	bcc.n	800d73c <pbuf_add_header_impl+0x34>
    return 1;
 800d738:	2301      	movs	r3, #1
 800d73a:	e043      	b.n	800d7c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <pbuf_add_header_impl+0x3e>
    return 0;
 800d742:	2300      	movs	r3, #0
 800d744:	e03e      	b.n	800d7c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	891a      	ldrh	r2, [r3, #8]
 800d74e:	8a7b      	ldrh	r3, [r7, #18]
 800d750:	4413      	add	r3, r2
 800d752:	b29b      	uxth	r3, r3
 800d754:	8a7a      	ldrh	r2, [r7, #18]
 800d756:	429a      	cmp	r2, r3
 800d758:	d901      	bls.n	800d75e <pbuf_add_header_impl+0x56>
    return 1;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e032      	b.n	800d7c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	7b1b      	ldrb	r3, [r3, #12]
 800d762:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d764:	8a3b      	ldrh	r3, [r7, #16]
 800d766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00c      	beq.n	800d788 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	685a      	ldr	r2, [r3, #4]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	425b      	negs	r3, r3
 800d776:	4413      	add	r3, r2
 800d778:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3310      	adds	r3, #16
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	429a      	cmp	r2, r3
 800d782:	d20d      	bcs.n	800d7a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d784:	2301      	movs	r3, #1
 800d786:	e01d      	b.n	800d7c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d006      	beq.n	800d79c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	425b      	negs	r3, r3
 800d796:	4413      	add	r3, r2
 800d798:	617b      	str	r3, [r7, #20]
 800d79a:	e001      	b.n	800d7a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e011      	b.n	800d7c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	895a      	ldrh	r2, [r3, #10]
 800d7aa:	8a7b      	ldrh	r3, [r7, #18]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	891a      	ldrh	r2, [r3, #8]
 800d7b8:	8a7b      	ldrh	r3, [r7, #18]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	811a      	strh	r2, [r3, #8]


  return 0;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3718      	adds	r7, #24
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	08018f34 	.word	0x08018f34
 800d7d0:	08019098 	.word	0x08019098
 800d7d4:	08018f94 	.word	0x08018f94

0800d7d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff ff8e 	bl	800d708 <pbuf_add_header_impl>
 800d7ec:	4603      	mov	r3, r0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
	...

0800d7f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d106      	bne.n	800d816 <pbuf_remove_header+0x1e>
 800d808:	4b20      	ldr	r3, [pc, #128]	; (800d88c <pbuf_remove_header+0x94>)
 800d80a:	f240 224b 	movw	r2, #587	; 0x24b
 800d80e:	4920      	ldr	r1, [pc, #128]	; (800d890 <pbuf_remove_header+0x98>)
 800d810:	4820      	ldr	r0, [pc, #128]	; (800d894 <pbuf_remove_header+0x9c>)
 800d812:	f009 ffd7 	bl	80177c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <pbuf_remove_header+0x2c>
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d822:	d301      	bcc.n	800d828 <pbuf_remove_header+0x30>
    return 1;
 800d824:	2301      	movs	r3, #1
 800d826:	e02c      	b.n	800d882 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d101      	bne.n	800d832 <pbuf_remove_header+0x3a>
    return 0;
 800d82e:	2300      	movs	r3, #0
 800d830:	e027      	b.n	800d882 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	895b      	ldrh	r3, [r3, #10]
 800d83a:	89fa      	ldrh	r2, [r7, #14]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d908      	bls.n	800d852 <pbuf_remove_header+0x5a>
 800d840:	4b12      	ldr	r3, [pc, #72]	; (800d88c <pbuf_remove_header+0x94>)
 800d842:	f240 2255 	movw	r2, #597	; 0x255
 800d846:	4914      	ldr	r1, [pc, #80]	; (800d898 <pbuf_remove_header+0xa0>)
 800d848:	4812      	ldr	r0, [pc, #72]	; (800d894 <pbuf_remove_header+0x9c>)
 800d84a:	f009 ffbb 	bl	80177c4 <iprintf>
 800d84e:	2301      	movs	r3, #1
 800d850:	e017      	b.n	800d882 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685a      	ldr	r2, [r3, #4]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	441a      	add	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	895a      	ldrh	r2, [r3, #10]
 800d868:	89fb      	ldrh	r3, [r7, #14]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	891a      	ldrh	r2, [r3, #8]
 800d876:	89fb      	ldrh	r3, [r7, #14]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08018f34 	.word	0x08018f34
 800d890:	08019098 	.word	0x08019098
 800d894:	08018f94 	.word	0x08018f94
 800d898:	080190a4 	.word	0x080190a4

0800d89c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	807b      	strh	r3, [r7, #2]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d8ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	da08      	bge.n	800d8c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d8b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8b8:	425b      	negs	r3, r3
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ff9b 	bl	800d7f8 <pbuf_remove_header>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	e007      	b.n	800d8d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d8c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8ca:	787a      	ldrb	r2, [r7, #1]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff ff1a 	bl	800d708 <pbuf_add_header_impl>
 800d8d4:	4603      	mov	r3, r0
  }
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b082      	sub	sp, #8
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d8ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff ffd2 	bl	800d89c <pbuf_header_impl>
 800d8f8:	4603      	mov	r3, r0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
	...

0800d904 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10b      	bne.n	800d92a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d106      	bne.n	800d926 <pbuf_free+0x22>
 800d918:	4b38      	ldr	r3, [pc, #224]	; (800d9fc <pbuf_free+0xf8>)
 800d91a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d91e:	4938      	ldr	r1, [pc, #224]	; (800da00 <pbuf_free+0xfc>)
 800d920:	4838      	ldr	r0, [pc, #224]	; (800da04 <pbuf_free+0x100>)
 800d922:	f009 ff4f 	bl	80177c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d926:	2300      	movs	r3, #0
 800d928:	e063      	b.n	800d9f2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d92e:	e05c      	b.n	800d9ea <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7b9b      	ldrb	r3, [r3, #14]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <pbuf_free+0x42>
 800d938:	4b30      	ldr	r3, [pc, #192]	; (800d9fc <pbuf_free+0xf8>)
 800d93a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d93e:	4932      	ldr	r1, [pc, #200]	; (800da08 <pbuf_free+0x104>)
 800d940:	4830      	ldr	r0, [pc, #192]	; (800da04 <pbuf_free+0x100>)
 800d942:	f009 ff3f 	bl	80177c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	7b9b      	ldrb	r3, [r3, #14]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	739a      	strb	r2, [r3, #14]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7b9b      	ldrb	r3, [r3, #14]
 800d956:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d958:	7dbb      	ldrb	r3, [r7, #22]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d143      	bne.n	800d9e6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	7b1b      	ldrb	r3, [r3, #12]
 800d968:	f003 030f 	and.w	r3, r3, #15
 800d96c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	7b5b      	ldrb	r3, [r3, #13]
 800d972:	f003 0302 	and.w	r3, r3, #2
 800d976:	2b00      	cmp	r3, #0
 800d978:	d011      	beq.n	800d99e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <pbuf_free+0x90>
 800d986:	4b1d      	ldr	r3, [pc, #116]	; (800d9fc <pbuf_free+0xf8>)
 800d988:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d98c:	491f      	ldr	r1, [pc, #124]	; (800da0c <pbuf_free+0x108>)
 800d98e:	481d      	ldr	r0, [pc, #116]	; (800da04 <pbuf_free+0x100>)
 800d990:	f009 ff18 	bl	80177c4 <iprintf>
        pc->custom_free_function(p);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	4798      	blx	r3
 800d99c:	e01d      	b.n	800d9da <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d104      	bne.n	800d9ae <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d9a4:	6879      	ldr	r1, [r7, #4]
 800d9a6:	2008      	movs	r0, #8
 800d9a8:	f7ff f936 	bl	800cc18 <memp_free>
 800d9ac:	e015      	b.n	800d9da <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d104      	bne.n	800d9be <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	2007      	movs	r0, #7
 800d9b8:	f7ff f92e 	bl	800cc18 <memp_free>
 800d9bc:	e00d      	b.n	800d9da <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d103      	bne.n	800d9cc <pbuf_free+0xc8>
          mem_free(p);
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7fe fdc1 	bl	800c54c <mem_free>
 800d9ca:	e006      	b.n	800d9da <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d9cc:	4b0b      	ldr	r3, [pc, #44]	; (800d9fc <pbuf_free+0xf8>)
 800d9ce:	f240 320f 	movw	r2, #783	; 0x30f
 800d9d2:	490f      	ldr	r1, [pc, #60]	; (800da10 <pbuf_free+0x10c>)
 800d9d4:	480b      	ldr	r0, [pc, #44]	; (800da04 <pbuf_free+0x100>)
 800d9d6:	f009 fef5 	bl	80177c4 <iprintf>
        }
      }
      count++;
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	607b      	str	r3, [r7, #4]
 800d9e4:	e001      	b.n	800d9ea <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d19f      	bne.n	800d930 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	08018f34 	.word	0x08018f34
 800da00:	08019098 	.word	0x08019098
 800da04:	08018f94 	.word	0x08018f94
 800da08:	080190c4 	.word	0x080190c4
 800da0c:	080190dc 	.word	0x080190dc
 800da10:	08019100 	.word	0x08019100

0800da14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800da1c:	2300      	movs	r3, #0
 800da1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800da20:	e005      	b.n	800da2e <pbuf_clen+0x1a>
    ++len;
 800da22:	89fb      	ldrh	r3, [r7, #14]
 800da24:	3301      	adds	r3, #1
 800da26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1f6      	bne.n	800da22 <pbuf_clen+0xe>
  }
  return len;
 800da34:	89fb      	ldrh	r3, [r7, #14]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
	...

0800da44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d010      	beq.n	800da74 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	7b9b      	ldrb	r3, [r3, #14]
 800da56:	3301      	adds	r3, #1
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	7b9b      	ldrb	r3, [r3, #14]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d106      	bne.n	800da74 <pbuf_ref+0x30>
 800da66:	4b05      	ldr	r3, [pc, #20]	; (800da7c <pbuf_ref+0x38>)
 800da68:	f240 3242 	movw	r2, #834	; 0x342
 800da6c:	4904      	ldr	r1, [pc, #16]	; (800da80 <pbuf_ref+0x3c>)
 800da6e:	4805      	ldr	r0, [pc, #20]	; (800da84 <pbuf_ref+0x40>)
 800da70:	f009 fea8 	bl	80177c4 <iprintf>
  }
}
 800da74:	bf00      	nop
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	08018f34 	.word	0x08018f34
 800da80:	08019114 	.word	0x08019114
 800da84:	08018f94 	.word	0x08018f94

0800da88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <pbuf_cat+0x16>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d107      	bne.n	800daae <pbuf_cat+0x26>
 800da9e:	4b20      	ldr	r3, [pc, #128]	; (800db20 <pbuf_cat+0x98>)
 800daa0:	f240 3259 	movw	r2, #857	; 0x359
 800daa4:	491f      	ldr	r1, [pc, #124]	; (800db24 <pbuf_cat+0x9c>)
 800daa6:	4820      	ldr	r0, [pc, #128]	; (800db28 <pbuf_cat+0xa0>)
 800daa8:	f009 fe8c 	bl	80177c4 <iprintf>
 800daac:	e034      	b.n	800db18 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	e00a      	b.n	800daca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	891a      	ldrh	r2, [r3, #8]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	891b      	ldrh	r3, [r3, #8]
 800dabc:	4413      	add	r3, r2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	60fb      	str	r3, [r7, #12]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1f0      	bne.n	800dab4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	891a      	ldrh	r2, [r3, #8]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	895b      	ldrh	r3, [r3, #10]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d006      	beq.n	800daec <pbuf_cat+0x64>
 800dade:	4b10      	ldr	r3, [pc, #64]	; (800db20 <pbuf_cat+0x98>)
 800dae0:	f240 3262 	movw	r2, #866	; 0x362
 800dae4:	4911      	ldr	r1, [pc, #68]	; (800db2c <pbuf_cat+0xa4>)
 800dae6:	4810      	ldr	r0, [pc, #64]	; (800db28 <pbuf_cat+0xa0>)
 800dae8:	f009 fe6c 	bl	80177c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d006      	beq.n	800db02 <pbuf_cat+0x7a>
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <pbuf_cat+0x98>)
 800daf6:	f240 3263 	movw	r2, #867	; 0x363
 800dafa:	490d      	ldr	r1, [pc, #52]	; (800db30 <pbuf_cat+0xa8>)
 800dafc:	480a      	ldr	r0, [pc, #40]	; (800db28 <pbuf_cat+0xa0>)
 800dafe:	f009 fe61 	bl	80177c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	891a      	ldrh	r2, [r3, #8]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	891b      	ldrh	r3, [r3, #8]
 800db0a:	4413      	add	r3, r2
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	08018f34 	.word	0x08018f34
 800db24:	08019128 	.word	0x08019128
 800db28:	08018f94 	.word	0x08018f94
 800db2c:	08019160 	.word	0x08019160
 800db30:	08019190 	.word	0x08019190

0800db34 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff ffa1 	bl	800da88 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800db46:	6838      	ldr	r0, [r7, #0]
 800db48:	f7ff ff7c 	bl	800da44 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b086      	sub	sp, #24
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
 800db62:	2300      	movs	r3, #0
 800db64:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <pbuf_copy+0x2a>
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d005      	beq.n	800db7e <pbuf_copy+0x2a>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	891a      	ldrh	r2, [r3, #8]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	891b      	ldrh	r3, [r3, #8]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d209      	bcs.n	800db92 <pbuf_copy+0x3e>
 800db7e:	4b57      	ldr	r3, [pc, #348]	; (800dcdc <pbuf_copy+0x188>)
 800db80:	f240 32c9 	movw	r2, #969	; 0x3c9
 800db84:	4956      	ldr	r1, [pc, #344]	; (800dce0 <pbuf_copy+0x18c>)
 800db86:	4857      	ldr	r0, [pc, #348]	; (800dce4 <pbuf_copy+0x190>)
 800db88:	f009 fe1c 	bl	80177c4 <iprintf>
 800db8c:	f06f 030f 	mvn.w	r3, #15
 800db90:	e09f      	b.n	800dcd2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	895b      	ldrh	r3, [r3, #10]
 800db96:	461a      	mov	r2, r3
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	1ad2      	subs	r2, r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	895b      	ldrh	r3, [r3, #10]
 800dba0:	4619      	mov	r1, r3
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	1acb      	subs	r3, r1, r3
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d306      	bcc.n	800dbb8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	895b      	ldrh	r3, [r3, #10]
 800dbae:	461a      	mov	r2, r3
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	e005      	b.n	800dbc4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	895b      	ldrh	r3, [r3, #10]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	18d0      	adds	r0, r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	f009 fdde 	bl	8017798 <memcpy>
    offset_to += len;
 800dbdc:	697a      	ldr	r2, [r7, #20]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4413      	add	r3, r2
 800dbea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	895b      	ldrh	r3, [r3, #10]
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d906      	bls.n	800dc06 <pbuf_copy+0xb2>
 800dbf8:	4b38      	ldr	r3, [pc, #224]	; (800dcdc <pbuf_copy+0x188>)
 800dbfa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dbfe:	493a      	ldr	r1, [pc, #232]	; (800dce8 <pbuf_copy+0x194>)
 800dc00:	4838      	ldr	r0, [pc, #224]	; (800dce4 <pbuf_copy+0x190>)
 800dc02:	f009 fddf 	bl	80177c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	895b      	ldrh	r3, [r3, #10]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d906      	bls.n	800dc20 <pbuf_copy+0xcc>
 800dc12:	4b32      	ldr	r3, [pc, #200]	; (800dcdc <pbuf_copy+0x188>)
 800dc14:	f240 32da 	movw	r2, #986	; 0x3da
 800dc18:	4934      	ldr	r1, [pc, #208]	; (800dcec <pbuf_copy+0x198>)
 800dc1a:	4832      	ldr	r0, [pc, #200]	; (800dce4 <pbuf_copy+0x190>)
 800dc1c:	f009 fdd2 	bl	80177c4 <iprintf>
    if (offset_from >= p_from->len) {
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	895b      	ldrh	r3, [r3, #10]
 800dc24:	461a      	mov	r2, r3
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d304      	bcc.n	800dc36 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	895b      	ldrh	r3, [r3, #10]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d114      	bne.n	800dc6c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d10c      	bne.n	800dc6c <pbuf_copy+0x118>
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <pbuf_copy+0x118>
 800dc58:	4b20      	ldr	r3, [pc, #128]	; (800dcdc <pbuf_copy+0x188>)
 800dc5a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dc5e:	4924      	ldr	r1, [pc, #144]	; (800dcf0 <pbuf_copy+0x19c>)
 800dc60:	4820      	ldr	r0, [pc, #128]	; (800dce4 <pbuf_copy+0x190>)
 800dc62:	f009 fdaf 	bl	80177c4 <iprintf>
 800dc66:	f06f 030f 	mvn.w	r3, #15
 800dc6a:	e032      	b.n	800dcd2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d013      	beq.n	800dc9a <pbuf_copy+0x146>
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	895a      	ldrh	r2, [r3, #10]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	891b      	ldrh	r3, [r3, #8]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d10d      	bne.n	800dc9a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d009      	beq.n	800dc9a <pbuf_copy+0x146>
 800dc86:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <pbuf_copy+0x188>)
 800dc88:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dc8c:	4919      	ldr	r1, [pc, #100]	; (800dcf4 <pbuf_copy+0x1a0>)
 800dc8e:	4815      	ldr	r0, [pc, #84]	; (800dce4 <pbuf_copy+0x190>)
 800dc90:	f009 fd98 	bl	80177c4 <iprintf>
 800dc94:	f06f 0305 	mvn.w	r3, #5
 800dc98:	e01b      	b.n	800dcd2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d013      	beq.n	800dcc8 <pbuf_copy+0x174>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	895a      	ldrh	r2, [r3, #10]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	891b      	ldrh	r3, [r3, #8]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d10d      	bne.n	800dcc8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d009      	beq.n	800dcc8 <pbuf_copy+0x174>
 800dcb4:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <pbuf_copy+0x188>)
 800dcb6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800dcba:	490e      	ldr	r1, [pc, #56]	; (800dcf4 <pbuf_copy+0x1a0>)
 800dcbc:	4809      	ldr	r0, [pc, #36]	; (800dce4 <pbuf_copy+0x190>)
 800dcbe:	f009 fd81 	bl	80177c4 <iprintf>
 800dcc2:	f06f 0305 	mvn.w	r3, #5
 800dcc6:	e004      	b.n	800dcd2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f47f af61 	bne.w	800db92 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	08018f34 	.word	0x08018f34
 800dce0:	080191dc 	.word	0x080191dc
 800dce4:	08018f94 	.word	0x08018f94
 800dce8:	0801920c 	.word	0x0801920c
 800dcec:	08019224 	.word	0x08019224
 800dcf0:	08019240 	.word	0x08019240
 800dcf4:	08019250 	.word	0x08019250

0800dcf8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b088      	sub	sp, #32
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4611      	mov	r1, r2
 800dd04:	461a      	mov	r2, r3
 800dd06:	460b      	mov	r3, r1
 800dd08:	80fb      	strh	r3, [r7, #6]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d108      	bne.n	800dd2e <pbuf_copy_partial+0x36>
 800dd1c:	4b2b      	ldr	r3, [pc, #172]	; (800ddcc <pbuf_copy_partial+0xd4>)
 800dd1e:	f240 420a 	movw	r2, #1034	; 0x40a
 800dd22:	492b      	ldr	r1, [pc, #172]	; (800ddd0 <pbuf_copy_partial+0xd8>)
 800dd24:	482b      	ldr	r0, [pc, #172]	; (800ddd4 <pbuf_copy_partial+0xdc>)
 800dd26:	f009 fd4d 	bl	80177c4 <iprintf>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e04a      	b.n	800ddc4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d108      	bne.n	800dd46 <pbuf_copy_partial+0x4e>
 800dd34:	4b25      	ldr	r3, [pc, #148]	; (800ddcc <pbuf_copy_partial+0xd4>)
 800dd36:	f240 420b 	movw	r2, #1035	; 0x40b
 800dd3a:	4927      	ldr	r1, [pc, #156]	; (800ddd8 <pbuf_copy_partial+0xe0>)
 800dd3c:	4825      	ldr	r0, [pc, #148]	; (800ddd4 <pbuf_copy_partial+0xdc>)
 800dd3e:	f009 fd41 	bl	80177c4 <iprintf>
 800dd42:	2300      	movs	r3, #0
 800dd44:	e03e      	b.n	800ddc4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	61fb      	str	r3, [r7, #28]
 800dd4a:	e034      	b.n	800ddb6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dd4c:	88bb      	ldrh	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00a      	beq.n	800dd68 <pbuf_copy_partial+0x70>
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	895b      	ldrh	r3, [r3, #10]
 800dd56:	88ba      	ldrh	r2, [r7, #4]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d305      	bcc.n	800dd68 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	895b      	ldrh	r3, [r3, #10]
 800dd60:	88ba      	ldrh	r2, [r7, #4]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	80bb      	strh	r3, [r7, #4]
 800dd66:	e023      	b.n	800ddb0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	895a      	ldrh	r2, [r3, #10]
 800dd6c:	88bb      	ldrh	r3, [r7, #4]
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dd72:	8b3a      	ldrh	r2, [r7, #24]
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d901      	bls.n	800dd7e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dd7a:	88fb      	ldrh	r3, [r7, #6]
 800dd7c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dd7e:	8b7b      	ldrh	r3, [r7, #26]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	18d0      	adds	r0, r2, r3
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	88bb      	ldrh	r3, [r7, #4]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	8b3a      	ldrh	r2, [r7, #24]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f009 fd02 	bl	8017798 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dd94:	8afa      	ldrh	r2, [r7, #22]
 800dd96:	8b3b      	ldrh	r3, [r7, #24]
 800dd98:	4413      	add	r3, r2
 800dd9a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dd9c:	8b7a      	ldrh	r2, [r7, #26]
 800dd9e:	8b3b      	ldrh	r3, [r7, #24]
 800dda0:	4413      	add	r3, r2
 800dda2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dda4:	88fa      	ldrh	r2, [r7, #6]
 800dda6:	8b3b      	ldrh	r3, [r7, #24]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	61fb      	str	r3, [r7, #28]
 800ddb6:	88fb      	ldrh	r3, [r7, #6]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <pbuf_copy_partial+0xca>
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1c4      	bne.n	800dd4c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ddc2:	8afb      	ldrh	r3, [r7, #22]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3720      	adds	r7, #32
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	08018f34 	.word	0x08018f34
 800ddd0:	0801927c 	.word	0x0801927c
 800ddd4:	08018f94 	.word	0x08018f94
 800ddd8:	0801929c 	.word	0x0801929c

0800dddc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	4613      	mov	r3, r2
 800dde8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ddea:	88fb      	ldrh	r3, [r7, #6]
 800ddec:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d109      	bne.n	800de0c <pbuf_take+0x30>
 800ddf8:	4b3a      	ldr	r3, [pc, #232]	; (800dee4 <pbuf_take+0x108>)
 800ddfa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ddfe:	493a      	ldr	r1, [pc, #232]	; (800dee8 <pbuf_take+0x10c>)
 800de00:	483a      	ldr	r0, [pc, #232]	; (800deec <pbuf_take+0x110>)
 800de02:	f009 fcdf 	bl	80177c4 <iprintf>
 800de06:	f06f 030f 	mvn.w	r3, #15
 800de0a:	e067      	b.n	800dedc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d109      	bne.n	800de26 <pbuf_take+0x4a>
 800de12:	4b34      	ldr	r3, [pc, #208]	; (800dee4 <pbuf_take+0x108>)
 800de14:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800de18:	4935      	ldr	r1, [pc, #212]	; (800def0 <pbuf_take+0x114>)
 800de1a:	4834      	ldr	r0, [pc, #208]	; (800deec <pbuf_take+0x110>)
 800de1c:	f009 fcd2 	bl	80177c4 <iprintf>
 800de20:	f06f 030f 	mvn.w	r3, #15
 800de24:	e05a      	b.n	800dedc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	891b      	ldrh	r3, [r3, #8]
 800de2a:	88fa      	ldrh	r2, [r7, #6]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d909      	bls.n	800de44 <pbuf_take+0x68>
 800de30:	4b2c      	ldr	r3, [pc, #176]	; (800dee4 <pbuf_take+0x108>)
 800de32:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800de36:	492f      	ldr	r1, [pc, #188]	; (800def4 <pbuf_take+0x118>)
 800de38:	482c      	ldr	r0, [pc, #176]	; (800deec <pbuf_take+0x110>)
 800de3a:	f009 fcc3 	bl	80177c4 <iprintf>
 800de3e:	f04f 33ff 	mov.w	r3, #4294967295
 800de42:	e04b      	b.n	800dedc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d007      	beq.n	800de5a <pbuf_take+0x7e>
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d004      	beq.n	800de5a <pbuf_take+0x7e>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	891b      	ldrh	r3, [r3, #8]
 800de54:	88fa      	ldrh	r2, [r7, #6]
 800de56:	429a      	cmp	r2, r3
 800de58:	d902      	bls.n	800de60 <pbuf_take+0x84>
    return ERR_ARG;
 800de5a:	f06f 030f 	mvn.w	r3, #15
 800de5e:	e03d      	b.n	800dedc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	61fb      	str	r3, [r7, #28]
 800de64:	e028      	b.n	800deb8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d106      	bne.n	800de7a <pbuf_take+0x9e>
 800de6c:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <pbuf_take+0x108>)
 800de6e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800de72:	4921      	ldr	r1, [pc, #132]	; (800def8 <pbuf_take+0x11c>)
 800de74:	481d      	ldr	r0, [pc, #116]	; (800deec <pbuf_take+0x110>)
 800de76:	f009 fca5 	bl	80177c4 <iprintf>
    buf_copy_len = total_copy_len;
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	895b      	ldrh	r3, [r3, #10]
 800de82:	461a      	mov	r2, r3
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	4293      	cmp	r3, r2
 800de88:	d902      	bls.n	800de90 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	895b      	ldrh	r3, [r3, #10]
 800de8e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	6858      	ldr	r0, [r3, #4]
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	4413      	add	r3, r2
 800de9a:	69ba      	ldr	r2, [r7, #24]
 800de9c:	4619      	mov	r1, r3
 800de9e:	f009 fc7b 	bl	8017798 <memcpy>
    total_copy_len -= buf_copy_len;
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	4413      	add	r3, r2
 800deb0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	61fb      	str	r3, [r7, #28]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1d3      	bne.n	800de66 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d103      	bne.n	800decc <pbuf_take+0xf0>
 800dec4:	88fb      	ldrh	r3, [r7, #6]
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d006      	beq.n	800deda <pbuf_take+0xfe>
 800decc:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <pbuf_take+0x108>)
 800dece:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800ded2:	490a      	ldr	r1, [pc, #40]	; (800defc <pbuf_take+0x120>)
 800ded4:	4805      	ldr	r0, [pc, #20]	; (800deec <pbuf_take+0x110>)
 800ded6:	f009 fc75 	bl	80177c4 <iprintf>
  return ERR_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3720      	adds	r7, #32
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	08018f34 	.word	0x08018f34
 800dee8:	0801930c 	.word	0x0801930c
 800deec:	08018f94 	.word	0x08018f94
 800def0:	08019324 	.word	0x08019324
 800def4:	08019340 	.word	0x08019340
 800def8:	08019360 	.word	0x08019360
 800defc:	08019378 	.word	0x08019378

0800df00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	603a      	str	r2, [r7, #0]
 800df0a:	71fb      	strb	r3, [r7, #7]
 800df0c:	460b      	mov	r3, r1
 800df0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	8919      	ldrh	r1, [r3, #8]
 800df14:	88ba      	ldrh	r2, [r7, #4]
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fa0f 	bl	800d33c <pbuf_alloc>
 800df1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <pbuf_clone+0x2a>
    return NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	e011      	b.n	800df4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff fe11 	bl	800db54 <pbuf_copy>
 800df32:	4603      	mov	r3, r0
 800df34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800df36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d006      	beq.n	800df4c <pbuf_clone+0x4c>
 800df3e:	4b06      	ldr	r3, [pc, #24]	; (800df58 <pbuf_clone+0x58>)
 800df40:	f240 5224 	movw	r2, #1316	; 0x524
 800df44:	4905      	ldr	r1, [pc, #20]	; (800df5c <pbuf_clone+0x5c>)
 800df46:	4806      	ldr	r0, [pc, #24]	; (800df60 <pbuf_clone+0x60>)
 800df48:	f009 fc3c 	bl	80177c4 <iprintf>
  return q;
 800df4c:	68fb      	ldr	r3, [r7, #12]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	08018f34 	.word	0x08018f34
 800df5c:	080193a8 	.word	0x080193a8
 800df60:	08018f94 	.word	0x08018f94

0800df64 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800df68:	f009 fcba 	bl	80178e0 <rand>
 800df6c:	4603      	mov	r3, r0
 800df6e:	b29b      	uxth	r3, r3
 800df70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800df74:	b29b      	uxth	r3, r3
 800df76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	4b01      	ldr	r3, [pc, #4]	; (800df84 <tcp_init+0x20>)
 800df7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800df80:	bf00      	nop
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20000020 	.word	0x20000020

0800df88 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d105      	bne.n	800dfa4 <tcp_free+0x1c>
 800df98:	4b06      	ldr	r3, [pc, #24]	; (800dfb4 <tcp_free+0x2c>)
 800df9a:	22d4      	movs	r2, #212	; 0xd4
 800df9c:	4906      	ldr	r1, [pc, #24]	; (800dfb8 <tcp_free+0x30>)
 800df9e:	4807      	ldr	r0, [pc, #28]	; (800dfbc <tcp_free+0x34>)
 800dfa0:	f009 fc10 	bl	80177c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	2001      	movs	r0, #1
 800dfa8:	f7fe fe36 	bl	800cc18 <memp_free>
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	08019434 	.word	0x08019434
 800dfb8:	08019464 	.word	0x08019464
 800dfbc:	08019478 	.word	0x08019478

0800dfc0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7d1b      	ldrb	r3, [r3, #20]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d105      	bne.n	800dfdc <tcp_free_listen+0x1c>
 800dfd0:	4b06      	ldr	r3, [pc, #24]	; (800dfec <tcp_free_listen+0x2c>)
 800dfd2:	22df      	movs	r2, #223	; 0xdf
 800dfd4:	4906      	ldr	r1, [pc, #24]	; (800dff0 <tcp_free_listen+0x30>)
 800dfd6:	4807      	ldr	r0, [pc, #28]	; (800dff4 <tcp_free_listen+0x34>)
 800dfd8:	f009 fbf4 	bl	80177c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	2002      	movs	r0, #2
 800dfe0:	f7fe fe1a 	bl	800cc18 <memp_free>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	08019434 	.word	0x08019434
 800dff0:	080194a0 	.word	0x080194a0
 800dff4:	08019478 	.word	0x08019478

0800dff8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dffc:	f000 fea2 	bl	800ed44 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e000:	4b07      	ldr	r3, [pc, #28]	; (800e020 <tcp_tmr+0x28>)
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	3301      	adds	r3, #1
 800e006:	b2da      	uxtb	r2, r3
 800e008:	4b05      	ldr	r3, [pc, #20]	; (800e020 <tcp_tmr+0x28>)
 800e00a:	701a      	strb	r2, [r3, #0]
 800e00c:	4b04      	ldr	r3, [pc, #16]	; (800e020 <tcp_tmr+0x28>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e018:	f000 fb54 	bl	800e6c4 <tcp_slowtmr>
  }
}
 800e01c:	bf00      	nop
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	20008e71 	.word	0x20008e71

0800e024 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d105      	bne.n	800e040 <tcp_remove_listener+0x1c>
 800e034:	4b0d      	ldr	r3, [pc, #52]	; (800e06c <tcp_remove_listener+0x48>)
 800e036:	22ff      	movs	r2, #255	; 0xff
 800e038:	490d      	ldr	r1, [pc, #52]	; (800e070 <tcp_remove_listener+0x4c>)
 800e03a:	480e      	ldr	r0, [pc, #56]	; (800e074 <tcp_remove_listener+0x50>)
 800e03c:	f009 fbc2 	bl	80177c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	e00a      	b.n	800e05c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d102      	bne.n	800e056 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1f1      	bne.n	800e046 <tcp_remove_listener+0x22>
    }
  }
}
 800e062:	bf00      	nop
 800e064:	bf00      	nop
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	08019434 	.word	0x08019434
 800e070:	080194bc 	.word	0x080194bc
 800e074:	08019478 	.word	0x08019478

0800e078 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d106      	bne.n	800e094 <tcp_listen_closed+0x1c>
 800e086:	4b14      	ldr	r3, [pc, #80]	; (800e0d8 <tcp_listen_closed+0x60>)
 800e088:	f240 1211 	movw	r2, #273	; 0x111
 800e08c:	4913      	ldr	r1, [pc, #76]	; (800e0dc <tcp_listen_closed+0x64>)
 800e08e:	4814      	ldr	r0, [pc, #80]	; (800e0e0 <tcp_listen_closed+0x68>)
 800e090:	f009 fb98 	bl	80177c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7d1b      	ldrb	r3, [r3, #20]
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d006      	beq.n	800e0aa <tcp_listen_closed+0x32>
 800e09c:	4b0e      	ldr	r3, [pc, #56]	; (800e0d8 <tcp_listen_closed+0x60>)
 800e09e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e0a2:	4910      	ldr	r1, [pc, #64]	; (800e0e4 <tcp_listen_closed+0x6c>)
 800e0a4:	480e      	ldr	r0, [pc, #56]	; (800e0e0 <tcp_listen_closed+0x68>)
 800e0a6:	f009 fb8d 	bl	80177c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e00b      	b.n	800e0c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e0b0:	4a0d      	ldr	r2, [pc, #52]	; (800e0e8 <tcp_listen_closed+0x70>)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6879      	ldr	r1, [r7, #4]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff ffb1 	bl	800e024 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d9f0      	bls.n	800e0b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e0ce:	bf00      	nop
 800e0d0:	bf00      	nop
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	08019434 	.word	0x08019434
 800e0dc:	080194e4 	.word	0x080194e4
 800e0e0:	08019478 	.word	0x08019478
 800e0e4:	080194f0 	.word	0x080194f0
 800e0e8:	0801b5c4 	.word	0x0801b5c4

0800e0ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e0ec:	b5b0      	push	{r4, r5, r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af04      	add	r7, sp, #16
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d106      	bne.n	800e10c <tcp_close_shutdown+0x20>
 800e0fe:	4b63      	ldr	r3, [pc, #396]	; (800e28c <tcp_close_shutdown+0x1a0>)
 800e100:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e104:	4962      	ldr	r1, [pc, #392]	; (800e290 <tcp_close_shutdown+0x1a4>)
 800e106:	4863      	ldr	r0, [pc, #396]	; (800e294 <tcp_close_shutdown+0x1a8>)
 800e108:	f009 fb5c 	bl	80177c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e10c:	78fb      	ldrb	r3, [r7, #3]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d066      	beq.n	800e1e0 <tcp_close_shutdown+0xf4>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	7d1b      	ldrb	r3, [r3, #20]
 800e116:	2b04      	cmp	r3, #4
 800e118:	d003      	beq.n	800e122 <tcp_close_shutdown+0x36>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	7d1b      	ldrb	r3, [r3, #20]
 800e11e:	2b07      	cmp	r3, #7
 800e120:	d15e      	bne.n	800e1e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e126:	2b00      	cmp	r3, #0
 800e128:	d104      	bne.n	800e134 <tcp_close_shutdown+0x48>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e12e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e132:	d055      	beq.n	800e1e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	8b5b      	ldrh	r3, [r3, #26]
 800e138:	f003 0310 	and.w	r3, r3, #16
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d106      	bne.n	800e14e <tcp_close_shutdown+0x62>
 800e140:	4b52      	ldr	r3, [pc, #328]	; (800e28c <tcp_close_shutdown+0x1a0>)
 800e142:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e146:	4954      	ldr	r1, [pc, #336]	; (800e298 <tcp_close_shutdown+0x1ac>)
 800e148:	4852      	ldr	r0, [pc, #328]	; (800e294 <tcp_close_shutdown+0x1a8>)
 800e14a:	f009 fb3b 	bl	80177c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e156:	687d      	ldr	r5, [r7, #4]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3304      	adds	r3, #4
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	8ad2      	ldrh	r2, [r2, #22]
 800e160:	6879      	ldr	r1, [r7, #4]
 800e162:	8b09      	ldrh	r1, [r1, #24]
 800e164:	9102      	str	r1, [sp, #8]
 800e166:	9201      	str	r2, [sp, #4]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	462b      	mov	r3, r5
 800e16c:	4622      	mov	r2, r4
 800e16e:	4601      	mov	r1, r0
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f004 fe91 	bl	8012e98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f001 f8c6 	bl	800f308 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e17c:	4b47      	ldr	r3, [pc, #284]	; (800e29c <tcp_close_shutdown+0x1b0>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	429a      	cmp	r2, r3
 800e184:	d105      	bne.n	800e192 <tcp_close_shutdown+0xa6>
 800e186:	4b45      	ldr	r3, [pc, #276]	; (800e29c <tcp_close_shutdown+0x1b0>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	4a43      	ldr	r2, [pc, #268]	; (800e29c <tcp_close_shutdown+0x1b0>)
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	e013      	b.n	800e1ba <tcp_close_shutdown+0xce>
 800e192:	4b42      	ldr	r3, [pc, #264]	; (800e29c <tcp_close_shutdown+0x1b0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	e00c      	b.n	800e1b4 <tcp_close_shutdown+0xc8>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d104      	bne.n	800e1ae <tcp_close_shutdown+0xc2>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	68da      	ldr	r2, [r3, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	60da      	str	r2, [r3, #12]
 800e1ac:	e005      	b.n	800e1ba <tcp_close_shutdown+0xce>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	60fb      	str	r3, [r7, #12]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1ef      	bne.n	800e19a <tcp_close_shutdown+0xae>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	60da      	str	r2, [r3, #12]
 800e1c0:	4b37      	ldr	r3, [pc, #220]	; (800e2a0 <tcp_close_shutdown+0x1b4>)
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e1c6:	4b37      	ldr	r3, [pc, #220]	; (800e2a4 <tcp_close_shutdown+0x1b8>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d102      	bne.n	800e1d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e1d0:	f003 fd5e 	bl	8011c90 <tcp_trigger_input_pcb_close>
 800e1d4:	e002      	b.n	800e1dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7ff fed6 	bl	800df88 <tcp_free>
      }
      return ERR_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	e050      	b.n	800e282 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	7d1b      	ldrb	r3, [r3, #20]
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d03b      	beq.n	800e260 <tcp_close_shutdown+0x174>
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	dc44      	bgt.n	800e276 <tcp_close_shutdown+0x18a>
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <tcp_close_shutdown+0x10a>
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d02a      	beq.n	800e24a <tcp_close_shutdown+0x15e>
 800e1f4:	e03f      	b.n	800e276 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	8adb      	ldrh	r3, [r3, #22]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d021      	beq.n	800e242 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1fe:	4b2a      	ldr	r3, [pc, #168]	; (800e2a8 <tcp_close_shutdown+0x1bc>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	429a      	cmp	r2, r3
 800e206:	d105      	bne.n	800e214 <tcp_close_shutdown+0x128>
 800e208:	4b27      	ldr	r3, [pc, #156]	; (800e2a8 <tcp_close_shutdown+0x1bc>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	4a26      	ldr	r2, [pc, #152]	; (800e2a8 <tcp_close_shutdown+0x1bc>)
 800e210:	6013      	str	r3, [r2, #0]
 800e212:	e013      	b.n	800e23c <tcp_close_shutdown+0x150>
 800e214:	4b24      	ldr	r3, [pc, #144]	; (800e2a8 <tcp_close_shutdown+0x1bc>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	60bb      	str	r3, [r7, #8]
 800e21a:	e00c      	b.n	800e236 <tcp_close_shutdown+0x14a>
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	429a      	cmp	r2, r3
 800e224:	d104      	bne.n	800e230 <tcp_close_shutdown+0x144>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68da      	ldr	r2, [r3, #12]
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	60da      	str	r2, [r3, #12]
 800e22e:	e005      	b.n	800e23c <tcp_close_shutdown+0x150>
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	60bb      	str	r3, [r7, #8]
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1ef      	bne.n	800e21c <tcp_close_shutdown+0x130>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fea0 	bl	800df88 <tcp_free>
      break;
 800e248:	e01a      	b.n	800e280 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff ff14 	bl	800e078 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e250:	6879      	ldr	r1, [r7, #4]
 800e252:	4816      	ldr	r0, [pc, #88]	; (800e2ac <tcp_close_shutdown+0x1c0>)
 800e254:	f001 f8a8 	bl	800f3a8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff feb1 	bl	800dfc0 <tcp_free_listen>
      break;
 800e25e:	e00f      	b.n	800e280 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e260:	6879      	ldr	r1, [r7, #4]
 800e262:	480e      	ldr	r0, [pc, #56]	; (800e29c <tcp_close_shutdown+0x1b0>)
 800e264:	f001 f8a0 	bl	800f3a8 <tcp_pcb_remove>
 800e268:	4b0d      	ldr	r3, [pc, #52]	; (800e2a0 <tcp_close_shutdown+0x1b4>)
 800e26a:	2201      	movs	r2, #1
 800e26c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff fe8a 	bl	800df88 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e274:	e004      	b.n	800e280 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f81a 	bl	800e2b0 <tcp_close_shutdown_fin>
 800e27c:	4603      	mov	r3, r0
 800e27e:	e000      	b.n	800e282 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e280:	2300      	movs	r3, #0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bdb0      	pop	{r4, r5, r7, pc}
 800e28a:	bf00      	nop
 800e28c:	08019434 	.word	0x08019434
 800e290:	08019508 	.word	0x08019508
 800e294:	08019478 	.word	0x08019478
 800e298:	08019528 	.word	0x08019528
 800e29c:	20008e68 	.word	0x20008e68
 800e2a0:	20008e70 	.word	0x20008e70
 800e2a4:	20008ea8 	.word	0x20008ea8
 800e2a8:	20008e60 	.word	0x20008e60
 800e2ac:	20008e64 	.word	0x20008e64

0800e2b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d106      	bne.n	800e2cc <tcp_close_shutdown_fin+0x1c>
 800e2be:	4b2e      	ldr	r3, [pc, #184]	; (800e378 <tcp_close_shutdown_fin+0xc8>)
 800e2c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e2c4:	492d      	ldr	r1, [pc, #180]	; (800e37c <tcp_close_shutdown_fin+0xcc>)
 800e2c6:	482e      	ldr	r0, [pc, #184]	; (800e380 <tcp_close_shutdown_fin+0xd0>)
 800e2c8:	f009 fa7c 	bl	80177c4 <iprintf>

  switch (pcb->state) {
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7d1b      	ldrb	r3, [r3, #20]
 800e2d0:	2b07      	cmp	r3, #7
 800e2d2:	d020      	beq.n	800e316 <tcp_close_shutdown_fin+0x66>
 800e2d4:	2b07      	cmp	r3, #7
 800e2d6:	dc2b      	bgt.n	800e330 <tcp_close_shutdown_fin+0x80>
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d002      	beq.n	800e2e2 <tcp_close_shutdown_fin+0x32>
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d00d      	beq.n	800e2fc <tcp_close_shutdown_fin+0x4c>
 800e2e0:	e026      	b.n	800e330 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f003 fee6 	bl	80120b4 <tcp_send_fin>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d11f      	bne.n	800e334 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2205      	movs	r2, #5
 800e2f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2fa:	e01b      	b.n	800e334 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f003 fed9 	bl	80120b4 <tcp_send_fin>
 800e302:	4603      	mov	r3, r0
 800e304:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d114      	bne.n	800e338 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2205      	movs	r2, #5
 800e312:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e314:	e010      	b.n	800e338 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f003 fecc 	bl	80120b4 <tcp_send_fin>
 800e31c:	4603      	mov	r3, r0
 800e31e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d109      	bne.n	800e33c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2209      	movs	r2, #9
 800e32c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e32e:	e005      	b.n	800e33c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	e01c      	b.n	800e36e <tcp_close_shutdown_fin+0xbe>
      break;
 800e334:	bf00      	nop
 800e336:	e002      	b.n	800e33e <tcp_close_shutdown_fin+0x8e>
      break;
 800e338:	bf00      	nop
 800e33a:	e000      	b.n	800e33e <tcp_close_shutdown_fin+0x8e>
      break;
 800e33c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d103      	bne.n	800e34e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f003 fff2 	bl	8012330 <tcp_output>
 800e34c:	e00d      	b.n	800e36a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d108      	bne.n	800e36a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	8b5b      	ldrh	r3, [r3, #26]
 800e35c:	f043 0308 	orr.w	r3, r3, #8
 800e360:	b29a      	uxth	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	e001      	b.n	800e36e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	08019434 	.word	0x08019434
 800e37c:	080194e4 	.word	0x080194e4
 800e380:	08019478 	.word	0x08019478

0800e384 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d109      	bne.n	800e3a6 <tcp_close+0x22>
 800e392:	4b0f      	ldr	r3, [pc, #60]	; (800e3d0 <tcp_close+0x4c>)
 800e394:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e398:	490e      	ldr	r1, [pc, #56]	; (800e3d4 <tcp_close+0x50>)
 800e39a:	480f      	ldr	r0, [pc, #60]	; (800e3d8 <tcp_close+0x54>)
 800e39c:	f009 fa12 	bl	80177c4 <iprintf>
 800e3a0:	f06f 030f 	mvn.w	r3, #15
 800e3a4:	e00f      	b.n	800e3c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	7d1b      	ldrb	r3, [r3, #20]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d006      	beq.n	800e3bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	8b5b      	ldrh	r3, [r3, #26]
 800e3b2:	f043 0310 	orr.w	r3, r3, #16
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e3bc:	2101      	movs	r1, #1
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff fe94 	bl	800e0ec <tcp_close_shutdown>
 800e3c4:	4603      	mov	r3, r0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	08019434 	.word	0x08019434
 800e3d4:	08019544 	.word	0x08019544
 800e3d8:	08019478 	.word	0x08019478

0800e3dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08e      	sub	sp, #56	; 0x38
 800e3e0:	af04      	add	r7, sp, #16
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d107      	bne.n	800e3fc <tcp_abandon+0x20>
 800e3ec:	4b52      	ldr	r3, [pc, #328]	; (800e538 <tcp_abandon+0x15c>)
 800e3ee:	f240 223d 	movw	r2, #573	; 0x23d
 800e3f2:	4952      	ldr	r1, [pc, #328]	; (800e53c <tcp_abandon+0x160>)
 800e3f4:	4852      	ldr	r0, [pc, #328]	; (800e540 <tcp_abandon+0x164>)
 800e3f6:	f009 f9e5 	bl	80177c4 <iprintf>
 800e3fa:	e099      	b.n	800e530 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7d1b      	ldrb	r3, [r3, #20]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d106      	bne.n	800e412 <tcp_abandon+0x36>
 800e404:	4b4c      	ldr	r3, [pc, #304]	; (800e538 <tcp_abandon+0x15c>)
 800e406:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e40a:	494e      	ldr	r1, [pc, #312]	; (800e544 <tcp_abandon+0x168>)
 800e40c:	484c      	ldr	r0, [pc, #304]	; (800e540 <tcp_abandon+0x164>)
 800e40e:	f009 f9d9 	bl	80177c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	7d1b      	ldrb	r3, [r3, #20]
 800e416:	2b0a      	cmp	r3, #10
 800e418:	d107      	bne.n	800e42a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e41a:	6879      	ldr	r1, [r7, #4]
 800e41c:	484a      	ldr	r0, [pc, #296]	; (800e548 <tcp_abandon+0x16c>)
 800e41e:	f000 ffc3 	bl	800f3a8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff fdb0 	bl	800df88 <tcp_free>
 800e428:	e082      	b.n	800e530 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e42a:	2300      	movs	r3, #0
 800e42c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e436:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e444:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	7d1b      	ldrb	r3, [r3, #20]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d126      	bne.n	800e4a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	8adb      	ldrh	r3, [r3, #22]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d02e      	beq.n	800e4ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e45c:	4b3b      	ldr	r3, [pc, #236]	; (800e54c <tcp_abandon+0x170>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	429a      	cmp	r2, r3
 800e464:	d105      	bne.n	800e472 <tcp_abandon+0x96>
 800e466:	4b39      	ldr	r3, [pc, #228]	; (800e54c <tcp_abandon+0x170>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	4a37      	ldr	r2, [pc, #220]	; (800e54c <tcp_abandon+0x170>)
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	e013      	b.n	800e49a <tcp_abandon+0xbe>
 800e472:	4b36      	ldr	r3, [pc, #216]	; (800e54c <tcp_abandon+0x170>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	61fb      	str	r3, [r7, #28]
 800e478:	e00c      	b.n	800e494 <tcp_abandon+0xb8>
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d104      	bne.n	800e48e <tcp_abandon+0xb2>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68da      	ldr	r2, [r3, #12]
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	60da      	str	r2, [r3, #12]
 800e48c:	e005      	b.n	800e49a <tcp_abandon+0xbe>
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	61fb      	str	r3, [r7, #28]
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1ef      	bne.n	800e47a <tcp_abandon+0x9e>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	60da      	str	r2, [r3, #12]
 800e4a0:	e00b      	b.n	800e4ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8adb      	ldrh	r3, [r3, #22]
 800e4aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	4828      	ldr	r0, [pc, #160]	; (800e550 <tcp_abandon+0x174>)
 800e4b0:	f000 ff7a 	bl	800f3a8 <tcp_pcb_remove>
 800e4b4:	4b27      	ldr	r3, [pc, #156]	; (800e554 <tcp_abandon+0x178>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d004      	beq.n	800e4cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 fd1c 	bl	800ef04 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d004      	beq.n	800e4de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 fd13 	bl	800ef04 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f000 fd0a 	bl	800ef04 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00e      	beq.n	800e514 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e4f6:	6879      	ldr	r1, [r7, #4]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	8b12      	ldrh	r2, [r2, #24]
 800e500:	9202      	str	r2, [sp, #8]
 800e502:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e504:	9201      	str	r2, [sp, #4]
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	460b      	mov	r3, r1
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	69b9      	ldr	r1, [r7, #24]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f004 fcc2 	bl	8012e98 <tcp_rst>
    }
    last_state = pcb->state;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7ff fd34 	bl	800df88 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d004      	beq.n	800e530 <tcp_abandon+0x154>
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	f06f 010c 	mvn.w	r1, #12
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	4798      	blx	r3
  }
}
 800e530:	3728      	adds	r7, #40	; 0x28
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	08019434 	.word	0x08019434
 800e53c:	08019578 	.word	0x08019578
 800e540:	08019478 	.word	0x08019478
 800e544:	08019594 	.word	0x08019594
 800e548:	20008e6c 	.word	0x20008e6c
 800e54c:	20008e60 	.word	0x20008e60
 800e550:	20008e68 	.word	0x20008e68
 800e554:	20008e70 	.word	0x20008e70

0800e558 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e560:	2101      	movs	r1, #1
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff ff3a 	bl	800e3dc <tcp_abandon>
}
 800e568:	bf00      	nop
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d106      	bne.n	800e58c <tcp_update_rcv_ann_wnd+0x1c>
 800e57e:	4b25      	ldr	r3, [pc, #148]	; (800e614 <tcp_update_rcv_ann_wnd+0xa4>)
 800e580:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e584:	4924      	ldr	r1, [pc, #144]	; (800e618 <tcp_update_rcv_ann_wnd+0xa8>)
 800e586:	4825      	ldr	r0, [pc, #148]	; (800e61c <tcp_update_rcv_ann_wnd+0xac>)
 800e588:	f009 f91c 	bl	80177c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e594:	4413      	add	r3, r2
 800e596:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e5a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e5a4:	bf28      	it	cs
 800e5a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e5aa:	b292      	uxth	r2, r2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	db08      	blt.n	800e5c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	e020      	b.n	800e60a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dd03      	ble.n	800e5de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e5dc:	e014      	b.n	800e608 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f0:	d306      	bcc.n	800e600 <tcp_update_rcv_ann_wnd+0x90>
 800e5f2:	4b08      	ldr	r3, [pc, #32]	; (800e614 <tcp_update_rcv_ann_wnd+0xa4>)
 800e5f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e5f8:	4909      	ldr	r1, [pc, #36]	; (800e620 <tcp_update_rcv_ann_wnd+0xb0>)
 800e5fa:	4808      	ldr	r0, [pc, #32]	; (800e61c <tcp_update_rcv_ann_wnd+0xac>)
 800e5fc:	f009 f8e2 	bl	80177c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	b29a      	uxth	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e608:	2300      	movs	r3, #0
  }
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	08019434 	.word	0x08019434
 800e618:	08019690 	.word	0x08019690
 800e61c:	08019478 	.word	0x08019478
 800e620:	080196b4 	.word	0x080196b4

0800e624 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	460b      	mov	r3, r1
 800e62e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d107      	bne.n	800e646 <tcp_recved+0x22>
 800e636:	4b1f      	ldr	r3, [pc, #124]	; (800e6b4 <tcp_recved+0x90>)
 800e638:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e63c:	491e      	ldr	r1, [pc, #120]	; (800e6b8 <tcp_recved+0x94>)
 800e63e:	481f      	ldr	r0, [pc, #124]	; (800e6bc <tcp_recved+0x98>)
 800e640:	f009 f8c0 	bl	80177c4 <iprintf>
 800e644:	e032      	b.n	800e6ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	7d1b      	ldrb	r3, [r3, #20]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d106      	bne.n	800e65c <tcp_recved+0x38>
 800e64e:	4b19      	ldr	r3, [pc, #100]	; (800e6b4 <tcp_recved+0x90>)
 800e650:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e654:	491a      	ldr	r1, [pc, #104]	; (800e6c0 <tcp_recved+0x9c>)
 800e656:	4819      	ldr	r0, [pc, #100]	; (800e6bc <tcp_recved+0x98>)
 800e658:	f009 f8b4 	bl	80177c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e660:	887b      	ldrh	r3, [r7, #2]
 800e662:	4413      	add	r3, r2
 800e664:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e666:	89fb      	ldrh	r3, [r7, #14]
 800e668:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e66c:	d804      	bhi.n	800e678 <tcp_recved+0x54>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e672:	89fa      	ldrh	r2, [r7, #14]
 800e674:	429a      	cmp	r2, r3
 800e676:	d204      	bcs.n	800e682 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e67e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e680:	e002      	b.n	800e688 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	89fa      	ldrh	r2, [r7, #14]
 800e686:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff ff71 	bl	800e570 <tcp_update_rcv_ann_wnd>
 800e68e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e696:	d309      	bcc.n	800e6ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	8b5b      	ldrh	r3, [r3, #26]
 800e69c:	f043 0302 	orr.w	r3, r3, #2
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f003 fe42 	bl	8012330 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08019434 	.word	0x08019434
 800e6b8:	080196d0 	.word	0x080196d0
 800e6bc:	08019478 	.word	0x08019478
 800e6c0:	080196e8 	.word	0x080196e8

0800e6c4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e6c4:	b5b0      	push	{r4, r5, r7, lr}
 800e6c6:	b090      	sub	sp, #64	; 0x40
 800e6c8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e6d0:	4b94      	ldr	r3, [pc, #592]	; (800e924 <tcp_slowtmr+0x260>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	4a93      	ldr	r2, [pc, #588]	; (800e924 <tcp_slowtmr+0x260>)
 800e6d8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e6da:	4b93      	ldr	r3, [pc, #588]	; (800e928 <tcp_slowtmr+0x264>)
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	4b91      	ldr	r3, [pc, #580]	; (800e928 <tcp_slowtmr+0x264>)
 800e6e4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e6ea:	4b90      	ldr	r3, [pc, #576]	; (800e92c <tcp_slowtmr+0x268>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e6f0:	e29d      	b.n	800ec2e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	7d1b      	ldrb	r3, [r3, #20]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d106      	bne.n	800e708 <tcp_slowtmr+0x44>
 800e6fa:	4b8d      	ldr	r3, [pc, #564]	; (800e930 <tcp_slowtmr+0x26c>)
 800e6fc:	f240 42be 	movw	r2, #1214	; 0x4be
 800e700:	498c      	ldr	r1, [pc, #560]	; (800e934 <tcp_slowtmr+0x270>)
 800e702:	488d      	ldr	r0, [pc, #564]	; (800e938 <tcp_slowtmr+0x274>)
 800e704:	f009 f85e 	bl	80177c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	7d1b      	ldrb	r3, [r3, #20]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d106      	bne.n	800e71e <tcp_slowtmr+0x5a>
 800e710:	4b87      	ldr	r3, [pc, #540]	; (800e930 <tcp_slowtmr+0x26c>)
 800e712:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e716:	4989      	ldr	r1, [pc, #548]	; (800e93c <tcp_slowtmr+0x278>)
 800e718:	4887      	ldr	r0, [pc, #540]	; (800e938 <tcp_slowtmr+0x274>)
 800e71a:	f009 f853 	bl	80177c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	7d1b      	ldrb	r3, [r3, #20]
 800e722:	2b0a      	cmp	r3, #10
 800e724:	d106      	bne.n	800e734 <tcp_slowtmr+0x70>
 800e726:	4b82      	ldr	r3, [pc, #520]	; (800e930 <tcp_slowtmr+0x26c>)
 800e728:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e72c:	4984      	ldr	r1, [pc, #528]	; (800e940 <tcp_slowtmr+0x27c>)
 800e72e:	4882      	ldr	r0, [pc, #520]	; (800e938 <tcp_slowtmr+0x274>)
 800e730:	f009 f848 	bl	80177c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	7f9a      	ldrb	r2, [r3, #30]
 800e738:	4b7b      	ldr	r3, [pc, #492]	; (800e928 <tcp_slowtmr+0x264>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d105      	bne.n	800e74c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e742:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e74a:	e270      	b.n	800ec2e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e74c:	4b76      	ldr	r3, [pc, #472]	; (800e928 <tcp_slowtmr+0x264>)
 800e74e:	781a      	ldrb	r2, [r3, #0]
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e754:	2300      	movs	r3, #0
 800e756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	2b02      	cmp	r3, #2
 800e766:	d10a      	bne.n	800e77e <tcp_slowtmr+0xba>
 800e768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e76e:	2b05      	cmp	r3, #5
 800e770:	d905      	bls.n	800e77e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e776:	3301      	adds	r3, #1
 800e778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e77c:	e11e      	b.n	800e9bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e784:	2b0b      	cmp	r3, #11
 800e786:	d905      	bls.n	800e794 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e78c:	3301      	adds	r3, #1
 800e78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e792:	e113      	b.n	800e9bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d075      	beq.n	800e88a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d006      	beq.n	800e7b4 <tcp_slowtmr+0xf0>
 800e7a6:	4b62      	ldr	r3, [pc, #392]	; (800e930 <tcp_slowtmr+0x26c>)
 800e7a8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e7ac:	4965      	ldr	r1, [pc, #404]	; (800e944 <tcp_slowtmr+0x280>)
 800e7ae:	4862      	ldr	r0, [pc, #392]	; (800e938 <tcp_slowtmr+0x274>)
 800e7b0:	f009 f808 	bl	80177c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d106      	bne.n	800e7ca <tcp_slowtmr+0x106>
 800e7bc:	4b5c      	ldr	r3, [pc, #368]	; (800e930 <tcp_slowtmr+0x26c>)
 800e7be:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e7c2:	4961      	ldr	r1, [pc, #388]	; (800e948 <tcp_slowtmr+0x284>)
 800e7c4:	485c      	ldr	r0, [pc, #368]	; (800e938 <tcp_slowtmr+0x274>)
 800e7c6:	f008 fffd 	bl	80177c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7d0:	2b0b      	cmp	r3, #11
 800e7d2:	d905      	bls.n	800e7e0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7d8:	3301      	adds	r3, #1
 800e7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7de:	e0ed      	b.n	800e9bc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	4a58      	ldr	r2, [pc, #352]	; (800e94c <tcp_slowtmr+0x288>)
 800e7ea:	5cd3      	ldrb	r3, [r2, r3]
 800e7ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e7f4:	7c7a      	ldrb	r2, [r7, #17]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d907      	bls.n	800e80a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e800:	3301      	adds	r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e810:	7c7a      	ldrb	r2, [r7, #17]
 800e812:	429a      	cmp	r2, r3
 800e814:	f200 80d2 	bhi.w	800e9bc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e818:	2301      	movs	r3, #1
 800e81a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e822:	2b00      	cmp	r3, #0
 800e824:	d108      	bne.n	800e838 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e828:	f004 fc2a 	bl	8013080 <tcp_zero_window_probe>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d014      	beq.n	800e85c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e832:	2300      	movs	r3, #0
 800e834:	623b      	str	r3, [r7, #32]
 800e836:	e011      	b.n	800e85c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e83e:	4619      	mov	r1, r3
 800e840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e842:	f003 faef 	bl	8011e24 <tcp_split_unsent_seg>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d107      	bne.n	800e85c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e84c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e84e:	f003 fd6f 	bl	8012330 <tcp_output>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d101      	bne.n	800e85c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 80ac 	beq.w	800e9bc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e872:	2b06      	cmp	r3, #6
 800e874:	f200 80a2 	bhi.w	800e9bc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e87e:	3301      	adds	r3, #1
 800e880:	b2da      	uxtb	r2, r3
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e888:	e098      	b.n	800e9bc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e890:	2b00      	cmp	r3, #0
 800e892:	db0f      	blt.n	800e8b4 <tcp_slowtmr+0x1f0>
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e89a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d008      	beq.n	800e8b4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	b21a      	sxth	r2, r3
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	db7b      	blt.n	800e9bc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8c6:	f004 f825 	bl	8012914 <tcp_rexmit_rto_prepare>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <tcp_slowtmr+0x21c>
 800e8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d171      	bne.n	800e9bc <tcp_slowtmr+0x2f8>
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d06d      	beq.n	800e9bc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	d03a      	beq.n	800e95e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ee:	2b0c      	cmp	r3, #12
 800e8f0:	bf28      	it	cs
 800e8f2:	230c      	movcs	r3, #12
 800e8f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e8fc:	10db      	asrs	r3, r3, #3
 800e8fe:	b21b      	sxth	r3, r3
 800e900:	461a      	mov	r2, r3
 800e902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e904:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e908:	4413      	add	r3, r2
 800e90a:	7efa      	ldrb	r2, [r7, #27]
 800e90c:	4910      	ldr	r1, [pc, #64]	; (800e950 <tcp_slowtmr+0x28c>)
 800e90e:	5c8a      	ldrb	r2, [r1, r2]
 800e910:	4093      	lsls	r3, r2
 800e912:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e91a:	4293      	cmp	r3, r2
 800e91c:	dc1a      	bgt.n	800e954 <tcp_slowtmr+0x290>
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	b21a      	sxth	r2, r3
 800e922:	e019      	b.n	800e958 <tcp_slowtmr+0x294>
 800e924:	20008e5c 	.word	0x20008e5c
 800e928:	20008e72 	.word	0x20008e72
 800e92c:	20008e68 	.word	0x20008e68
 800e930:	08019434 	.word	0x08019434
 800e934:	08019778 	.word	0x08019778
 800e938:	08019478 	.word	0x08019478
 800e93c:	080197a4 	.word	0x080197a4
 800e940:	080197d0 	.word	0x080197d0
 800e944:	08019800 	.word	0x08019800
 800e948:	08019834 	.word	0x08019834
 800e94c:	0801b5bc 	.word	0x0801b5bc
 800e950:	0801b5ac 	.word	0x0801b5ac
 800e954:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e960:	2200      	movs	r2, #0
 800e962:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e970:	4293      	cmp	r3, r2
 800e972:	bf28      	it	cs
 800e974:	4613      	movcs	r3, r2
 800e976:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e978:	8a7b      	ldrh	r3, [r7, #18]
 800e97a:	085b      	lsrs	r3, r3, #1
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	b29b      	uxth	r3, r3
 800e992:	429a      	cmp	r2, r3
 800e994:	d206      	bcs.n	800e9a4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e9b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9b8:	f004 f81c 	bl	80129f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	7d1b      	ldrb	r3, [r3, #20]
 800e9c0:	2b06      	cmp	r3, #6
 800e9c2:	d111      	bne.n	800e9e8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	8b5b      	ldrh	r3, [r3, #26]
 800e9c8:	f003 0310 	and.w	r3, r3, #16
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e9d0:	4b9c      	ldr	r3, [pc, #624]	; (800ec44 <tcp_slowtmr+0x580>)
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	6a1b      	ldr	r3, [r3, #32]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	2b28      	cmp	r3, #40	; 0x28
 800e9dc:	d904      	bls.n	800e9e8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e9de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ea:	7a5b      	ldrb	r3, [r3, #9]
 800e9ec:	f003 0308 	and.w	r3, r3, #8
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d04a      	beq.n	800ea8a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e9f8:	2b04      	cmp	r3, #4
 800e9fa:	d003      	beq.n	800ea04 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ea00:	2b07      	cmp	r3, #7
 800ea02:	d142      	bne.n	800ea8a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea04:	4b8f      	ldr	r3, [pc, #572]	; (800ec44 <tcp_slowtmr+0x580>)
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	6a1b      	ldr	r3, [r3, #32]
 800ea0c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ea0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea10:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea14:	4b8c      	ldr	r3, [pc, #560]	; (800ec48 <tcp_slowtmr+0x584>)
 800ea16:	440b      	add	r3, r1
 800ea18:	498c      	ldr	r1, [pc, #560]	; (800ec4c <tcp_slowtmr+0x588>)
 800ea1a:	fba1 1303 	umull	r1, r3, r1, r3
 800ea1e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d90a      	bls.n	800ea3a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ea24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea28:	3301      	adds	r3, #1
 800ea2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ea2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea32:	3301      	adds	r3, #1
 800ea34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea38:	e027      	b.n	800ea8a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea3a:	4b82      	ldr	r3, [pc, #520]	; (800ec44 <tcp_slowtmr+0x580>)
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ea50:	4618      	mov	r0, r3
 800ea52:	4b7f      	ldr	r3, [pc, #508]	; (800ec50 <tcp_slowtmr+0x58c>)
 800ea54:	fb00 f303 	mul.w	r3, r0, r3
 800ea58:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ea5a:	497c      	ldr	r1, [pc, #496]	; (800ec4c <tcp_slowtmr+0x588>)
 800ea5c:	fba1 1303 	umull	r1, r3, r1, r3
 800ea60:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d911      	bls.n	800ea8a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ea66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea68:	f004 faca 	bl	8013000 <tcp_keepalive>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ea72:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d107      	bne.n	800ea8a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ea80:	3301      	adds	r3, #1
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ea8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d011      	beq.n	800eab6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ea92:	4b6c      	ldr	r3, [pc, #432]	; (800ec44 <tcp_slowtmr+0x580>)
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	1ad2      	subs	r2, r2, r3
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	440b      	add	r3, r1
 800eaaa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d302      	bcc.n	800eab6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800eab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eab2:	f000 fddd 	bl	800f670 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800eab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab8:	7d1b      	ldrb	r3, [r3, #20]
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d10b      	bne.n	800ead6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eabe:	4b61      	ldr	r3, [pc, #388]	; (800ec44 <tcp_slowtmr+0x580>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	2b28      	cmp	r3, #40	; 0x28
 800eaca:	d904      	bls.n	800ead6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ead0:	3301      	adds	r3, #1
 800ead2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	7d1b      	ldrb	r3, [r3, #20]
 800eada:	2b09      	cmp	r3, #9
 800eadc:	d10b      	bne.n	800eaf6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eade:	4b59      	ldr	r3, [pc, #356]	; (800ec44 <tcp_slowtmr+0x580>)
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	6a1b      	ldr	r3, [r3, #32]
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	2bf0      	cmp	r3, #240	; 0xf0
 800eaea:	d904      	bls.n	800eaf6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800eaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eaf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d060      	beq.n	800ebc0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb04:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eb06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb08:	f000 fbfe 	bl	800f308 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d010      	beq.n	800eb34 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eb12:	4b50      	ldr	r3, [pc, #320]	; (800ec54 <tcp_slowtmr+0x590>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d106      	bne.n	800eb2a <tcp_slowtmr+0x466>
 800eb1c:	4b4e      	ldr	r3, [pc, #312]	; (800ec58 <tcp_slowtmr+0x594>)
 800eb1e:	f240 526d 	movw	r2, #1389	; 0x56d
 800eb22:	494e      	ldr	r1, [pc, #312]	; (800ec5c <tcp_slowtmr+0x598>)
 800eb24:	484e      	ldr	r0, [pc, #312]	; (800ec60 <tcp_slowtmr+0x59c>)
 800eb26:	f008 fe4d 	bl	80177c4 <iprintf>
        prev->next = pcb->next;
 800eb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2c:	68da      	ldr	r2, [r3, #12]
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	60da      	str	r2, [r3, #12]
 800eb32:	e00f      	b.n	800eb54 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eb34:	4b47      	ldr	r3, [pc, #284]	; (800ec54 <tcp_slowtmr+0x590>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d006      	beq.n	800eb4c <tcp_slowtmr+0x488>
 800eb3e:	4b46      	ldr	r3, [pc, #280]	; (800ec58 <tcp_slowtmr+0x594>)
 800eb40:	f240 5271 	movw	r2, #1393	; 0x571
 800eb44:	4947      	ldr	r1, [pc, #284]	; (800ec64 <tcp_slowtmr+0x5a0>)
 800eb46:	4846      	ldr	r0, [pc, #280]	; (800ec60 <tcp_slowtmr+0x59c>)
 800eb48:	f008 fe3c 	bl	80177c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	4a40      	ldr	r2, [pc, #256]	; (800ec54 <tcp_slowtmr+0x590>)
 800eb52:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eb54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d013      	beq.n	800eb84 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eb64:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	3304      	adds	r3, #4
 800eb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb6c:	8ad2      	ldrh	r2, [r2, #22]
 800eb6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb70:	8b09      	ldrh	r1, [r1, #24]
 800eb72:	9102      	str	r1, [sp, #8]
 800eb74:	9201      	str	r2, [sp, #4]
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	462b      	mov	r3, r5
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb80:	f004 f98a 	bl	8012e98 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	691b      	ldr	r3, [r3, #16]
 800eb88:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	7d1b      	ldrb	r3, [r3, #20]
 800eb8e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eb9a:	6838      	ldr	r0, [r7, #0]
 800eb9c:	f7ff f9f4 	bl	800df88 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800eba0:	4b31      	ldr	r3, [pc, #196]	; (800ec68 <tcp_slowtmr+0x5a4>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d004      	beq.n	800ebb6 <tcp_slowtmr+0x4f2>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f06f 010c 	mvn.w	r1, #12
 800ebb2:	68b8      	ldr	r0, [r7, #8]
 800ebb4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ebb6:	4b2c      	ldr	r3, [pc, #176]	; (800ec68 <tcp_slowtmr+0x5a4>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d037      	beq.n	800ec2e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ebbe:	e592      	b.n	800e6e6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ebc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ebc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	7f1b      	ldrb	r3, [r3, #28]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	7f1a      	ldrb	r2, [r3, #28]
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	7f5b      	ldrb	r3, [r3, #29]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d325      	bcc.n	800ec2e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ebe8:	4b1f      	ldr	r3, [pc, #124]	; (800ec68 <tcp_slowtmr+0x5a4>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ebee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00b      	beq.n	800ec10 <tcp_slowtmr+0x54c>
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec00:	6912      	ldr	r2, [r2, #16]
 800ec02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec04:	4610      	mov	r0, r2
 800ec06:	4798      	blx	r3
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ec0e:	e002      	b.n	800ec16 <tcp_slowtmr+0x552>
 800ec10:	2300      	movs	r3, #0
 800ec12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <tcp_slowtmr+0x5a4>)
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d000      	beq.n	800ec20 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ec1e:	e562      	b.n	800e6e6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ec20:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d102      	bne.n	800ec2e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ec28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec2a:	f003 fb81 	bl	8012330 <tcp_output>
  while (pcb != NULL) {
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f47f ad5e 	bne.w	800e6f2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ec36:	2300      	movs	r3, #0
 800ec38:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ec3a:	4b0c      	ldr	r3, [pc, #48]	; (800ec6c <tcp_slowtmr+0x5a8>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ec40:	e069      	b.n	800ed16 <tcp_slowtmr+0x652>
 800ec42:	bf00      	nop
 800ec44:	20008e5c 	.word	0x20008e5c
 800ec48:	000a4cb8 	.word	0x000a4cb8
 800ec4c:	10624dd3 	.word	0x10624dd3
 800ec50:	000124f8 	.word	0x000124f8
 800ec54:	20008e68 	.word	0x20008e68
 800ec58:	08019434 	.word	0x08019434
 800ec5c:	0801986c 	.word	0x0801986c
 800ec60:	08019478 	.word	0x08019478
 800ec64:	08019898 	.word	0x08019898
 800ec68:	20008e70 	.word	0x20008e70
 800ec6c:	20008e6c 	.word	0x20008e6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	7d1b      	ldrb	r3, [r3, #20]
 800ec74:	2b0a      	cmp	r3, #10
 800ec76:	d006      	beq.n	800ec86 <tcp_slowtmr+0x5c2>
 800ec78:	4b2b      	ldr	r3, [pc, #172]	; (800ed28 <tcp_slowtmr+0x664>)
 800ec7a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ec7e:	492b      	ldr	r1, [pc, #172]	; (800ed2c <tcp_slowtmr+0x668>)
 800ec80:	482b      	ldr	r0, [pc, #172]	; (800ed30 <tcp_slowtmr+0x66c>)
 800ec82:	f008 fd9f 	bl	80177c4 <iprintf>
    pcb_remove = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec8c:	4b29      	ldr	r3, [pc, #164]	; (800ed34 <tcp_slowtmr+0x670>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	2bf0      	cmp	r3, #240	; 0xf0
 800ec98:	d904      	bls.n	800eca4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ec9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec9e:	3301      	adds	r3, #1
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d02f      	beq.n	800ed0c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ecac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecae:	f000 fb2b 	bl	800f308 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d010      	beq.n	800ecda <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ecb8:	4b1f      	ldr	r3, [pc, #124]	; (800ed38 <tcp_slowtmr+0x674>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d106      	bne.n	800ecd0 <tcp_slowtmr+0x60c>
 800ecc2:	4b19      	ldr	r3, [pc, #100]	; (800ed28 <tcp_slowtmr+0x664>)
 800ecc4:	f240 52af 	movw	r2, #1455	; 0x5af
 800ecc8:	491c      	ldr	r1, [pc, #112]	; (800ed3c <tcp_slowtmr+0x678>)
 800ecca:	4819      	ldr	r0, [pc, #100]	; (800ed30 <tcp_slowtmr+0x66c>)
 800eccc:	f008 fd7a 	bl	80177c4 <iprintf>
        prev->next = pcb->next;
 800ecd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd2:	68da      	ldr	r2, [r3, #12]
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	60da      	str	r2, [r3, #12]
 800ecd8:	e00f      	b.n	800ecfa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ecda:	4b17      	ldr	r3, [pc, #92]	; (800ed38 <tcp_slowtmr+0x674>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d006      	beq.n	800ecf2 <tcp_slowtmr+0x62e>
 800ece4:	4b10      	ldr	r3, [pc, #64]	; (800ed28 <tcp_slowtmr+0x664>)
 800ece6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ecea:	4915      	ldr	r1, [pc, #84]	; (800ed40 <tcp_slowtmr+0x67c>)
 800ecec:	4810      	ldr	r0, [pc, #64]	; (800ed30 <tcp_slowtmr+0x66c>)
 800ecee:	f008 fd69 	bl	80177c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	4a10      	ldr	r2, [pc, #64]	; (800ed38 <tcp_slowtmr+0x674>)
 800ecf8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ecfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ed04:	69f8      	ldr	r0, [r7, #28]
 800ed06:	f7ff f93f 	bl	800df88 <tcp_free>
 800ed0a:	e004      	b.n	800ed16 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1a9      	bne.n	800ec70 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ed1c:	bf00      	nop
 800ed1e:	bf00      	nop
 800ed20:	3730      	adds	r7, #48	; 0x30
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bdb0      	pop	{r4, r5, r7, pc}
 800ed26:	bf00      	nop
 800ed28:	08019434 	.word	0x08019434
 800ed2c:	080198c4 	.word	0x080198c4
 800ed30:	08019478 	.word	0x08019478
 800ed34:	20008e5c 	.word	0x20008e5c
 800ed38:	20008e6c 	.word	0x20008e6c
 800ed3c:	080198f4 	.word	0x080198f4
 800ed40:	0801991c 	.word	0x0801991c

0800ed44 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ed4a:	4b2d      	ldr	r3, [pc, #180]	; (800ee00 <tcp_fasttmr+0xbc>)
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	4b2b      	ldr	r3, [pc, #172]	; (800ee00 <tcp_fasttmr+0xbc>)
 800ed54:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ed56:	4b2b      	ldr	r3, [pc, #172]	; (800ee04 <tcp_fasttmr+0xc0>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed5c:	e048      	b.n	800edf0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	7f9a      	ldrb	r2, [r3, #30]
 800ed62:	4b27      	ldr	r3, [pc, #156]	; (800ee00 <tcp_fasttmr+0xbc>)
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d03f      	beq.n	800edea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ed6a:	4b25      	ldr	r3, [pc, #148]	; (800ee00 <tcp_fasttmr+0xbc>)
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	8b5b      	ldrh	r3, [r3, #26]
 800ed76:	f003 0301 	and.w	r3, r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d010      	beq.n	800eda0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	8b5b      	ldrh	r3, [r3, #26]
 800ed82:	f043 0302 	orr.w	r3, r3, #2
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f003 facf 	bl	8012330 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	8b5b      	ldrh	r3, [r3, #26]
 800ed96:	f023 0303 	bic.w	r3, r3, #3
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	8b5b      	ldrh	r3, [r3, #26]
 800eda4:	f003 0308 	and.w	r3, r3, #8
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d009      	beq.n	800edc0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	8b5b      	ldrh	r3, [r3, #26]
 800edb0:	f023 0308 	bic.w	r3, r3, #8
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fa78 	bl	800e2b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d00a      	beq.n	800ede4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800edce:	4b0e      	ldr	r3, [pc, #56]	; (800ee08 <tcp_fasttmr+0xc4>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 f819 	bl	800ee0c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800edda:	4b0b      	ldr	r3, [pc, #44]	; (800ee08 <tcp_fasttmr+0xc4>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d000      	beq.n	800ede4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ede2:	e7b8      	b.n	800ed56 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	607b      	str	r3, [r7, #4]
 800ede8:	e002      	b.n	800edf0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1b3      	bne.n	800ed5e <tcp_fasttmr+0x1a>
    }
  }
}
 800edf6:	bf00      	nop
 800edf8:	bf00      	nop
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	20008e72 	.word	0x20008e72
 800ee04:	20008e68 	.word	0x20008e68
 800ee08:	20008e70 	.word	0x20008e70

0800ee0c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d109      	bne.n	800ee2e <tcp_process_refused_data+0x22>
 800ee1a:	4b37      	ldr	r3, [pc, #220]	; (800eef8 <tcp_process_refused_data+0xec>)
 800ee1c:	f240 6209 	movw	r2, #1545	; 0x609
 800ee20:	4936      	ldr	r1, [pc, #216]	; (800eefc <tcp_process_refused_data+0xf0>)
 800ee22:	4837      	ldr	r0, [pc, #220]	; (800ef00 <tcp_process_refused_data+0xf4>)
 800ee24:	f008 fcce 	bl	80177c4 <iprintf>
 800ee28:	f06f 030f 	mvn.w	r3, #15
 800ee2c:	e060      	b.n	800eef0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee32:	7b5b      	ldrb	r3, [r3, #13]
 800ee34:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee3a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00b      	beq.n	800ee64 <tcp_process_refused_data+0x58>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6918      	ldr	r0, [r3, #16]
 800ee56:	2300      	movs	r3, #0
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	6879      	ldr	r1, [r7, #4]
 800ee5c:	47a0      	blx	r4
 800ee5e:	4603      	mov	r3, r0
 800ee60:	73fb      	strb	r3, [r7, #15]
 800ee62:	e007      	b.n	800ee74 <tcp_process_refused_data+0x68>
 800ee64:	2300      	movs	r3, #0
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	6879      	ldr	r1, [r7, #4]
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	f000 f8a4 	bl	800efb8 <tcp_recv_null>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ee74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d12a      	bne.n	800eed2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
 800ee7e:	f003 0320 	and.w	r3, r3, #32
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d033      	beq.n	800eeee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ee8e:	d005      	beq.n	800ee9c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee94:	3301      	adds	r3, #1
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00b      	beq.n	800eebe <tcp_process_refused_data+0xb2>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6918      	ldr	r0, [r3, #16]
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	6879      	ldr	r1, [r7, #4]
 800eeb6:	47a0      	blx	r4
 800eeb8:	4603      	mov	r3, r0
 800eeba:	73fb      	strb	r3, [r7, #15]
 800eebc:	e001      	b.n	800eec2 <tcp_process_refused_data+0xb6>
 800eebe:	2300      	movs	r3, #0
 800eec0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec6:	f113 0f0d 	cmn.w	r3, #13
 800eeca:	d110      	bne.n	800eeee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eecc:	f06f 030c 	mvn.w	r3, #12
 800eed0:	e00e      	b.n	800eef0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800eed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eed6:	f113 0f0d 	cmn.w	r3, #13
 800eeda:	d102      	bne.n	800eee2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eedc:	f06f 030c 	mvn.w	r3, #12
 800eee0:	e006      	b.n	800eef0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800eee8:	f06f 0304 	mvn.w	r3, #4
 800eeec:	e000      	b.n	800eef0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd90      	pop	{r4, r7, pc}
 800eef8:	08019434 	.word	0x08019434
 800eefc:	08019944 	.word	0x08019944
 800ef00:	08019478 	.word	0x08019478

0800ef04 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ef0c:	e007      	b.n	800ef1e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 f80a 	bl	800ef2e <tcp_seg_free>
    seg = next;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1f4      	bne.n	800ef0e <tcp_segs_free+0xa>
  }
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b082      	sub	sp, #8
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00c      	beq.n	800ef56 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d004      	beq.n	800ef4e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fe fcdb 	bl	800d904 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	2003      	movs	r0, #3
 800ef52:	f7fd fe61 	bl	800cc18 <memp_free>
  }
}
 800ef56:	bf00      	nop
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d106      	bne.n	800ef7c <tcp_seg_copy+0x1c>
 800ef6e:	4b0f      	ldr	r3, [pc, #60]	; (800efac <tcp_seg_copy+0x4c>)
 800ef70:	f240 6282 	movw	r2, #1666	; 0x682
 800ef74:	490e      	ldr	r1, [pc, #56]	; (800efb0 <tcp_seg_copy+0x50>)
 800ef76:	480f      	ldr	r0, [pc, #60]	; (800efb4 <tcp_seg_copy+0x54>)
 800ef78:	f008 fc24 	bl	80177c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ef7c:	2003      	movs	r0, #3
 800ef7e:	f7fd fddb 	bl	800cb38 <memp_malloc>
 800ef82:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <tcp_seg_copy+0x2e>
    return NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	e00a      	b.n	800efa4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ef8e:	2210      	movs	r2, #16
 800ef90:	6879      	ldr	r1, [r7, #4]
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f008 fc00 	bl	8017798 <memcpy>
  pbuf_ref(cseg->p);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fe fd51 	bl	800da44 <pbuf_ref>
  return cseg;
 800efa2:	68fb      	ldr	r3, [r7, #12]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3710      	adds	r7, #16
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	08019434 	.word	0x08019434
 800efb0:	08019988 	.word	0x08019988
 800efb4:	08019478 	.word	0x08019478

0800efb8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
 800efc4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d109      	bne.n	800efe0 <tcp_recv_null+0x28>
 800efcc:	4b12      	ldr	r3, [pc, #72]	; (800f018 <tcp_recv_null+0x60>)
 800efce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800efd2:	4912      	ldr	r1, [pc, #72]	; (800f01c <tcp_recv_null+0x64>)
 800efd4:	4812      	ldr	r0, [pc, #72]	; (800f020 <tcp_recv_null+0x68>)
 800efd6:	f008 fbf5 	bl	80177c4 <iprintf>
 800efda:	f06f 030f 	mvn.w	r3, #15
 800efde:	e016      	b.n	800f00e <tcp_recv_null+0x56>

  if (p != NULL) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d009      	beq.n	800effa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	891b      	ldrh	r3, [r3, #8]
 800efea:	4619      	mov	r1, r3
 800efec:	68b8      	ldr	r0, [r7, #8]
 800efee:	f7ff fb19 	bl	800e624 <tcp_recved>
    pbuf_free(p);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7fe fc86 	bl	800d904 <pbuf_free>
 800eff8:	e008      	b.n	800f00c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800effa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d104      	bne.n	800f00c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f002:	68b8      	ldr	r0, [r7, #8]
 800f004:	f7ff f9be 	bl	800e384 <tcp_close>
 800f008:	4603      	mov	r3, r0
 800f00a:	e000      	b.n	800f00e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	08019434 	.word	0x08019434
 800f01c:	080199a4 	.word	0x080199a4
 800f020:	08019478 	.word	0x08019478

0800f024 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f02e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f032:	2b00      	cmp	r3, #0
 800f034:	db01      	blt.n	800f03a <tcp_kill_prio+0x16>
 800f036:	79fb      	ldrb	r3, [r7, #7]
 800f038:	e000      	b.n	800f03c <tcp_kill_prio+0x18>
 800f03a:	237f      	movs	r3, #127	; 0x7f
 800f03c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f03e:	7afb      	ldrb	r3, [r7, #11]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d034      	beq.n	800f0ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f044:	7afb      	ldrb	r3, [r7, #11]
 800f046:	3b01      	subs	r3, #1
 800f048:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f04e:	2300      	movs	r3, #0
 800f050:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f052:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <tcp_kill_prio+0x94>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	617b      	str	r3, [r7, #20]
 800f058:	e01f      	b.n	800f09a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	7d5b      	ldrb	r3, [r3, #21]
 800f05e:	7afa      	ldrb	r2, [r7, #11]
 800f060:	429a      	cmp	r2, r3
 800f062:	d80c      	bhi.n	800f07e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f068:	7afa      	ldrb	r2, [r7, #11]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d112      	bne.n	800f094 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f06e:	4b13      	ldr	r3, [pc, #76]	; (800f0bc <tcp_kill_prio+0x98>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d80a      	bhi.n	800f094 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f07e:	4b0f      	ldr	r3, [pc, #60]	; (800f0bc <tcp_kill_prio+0x98>)
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	6a1b      	ldr	r3, [r3, #32]
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	7d5b      	ldrb	r3, [r3, #21]
 800f092:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	617b      	str	r3, [r7, #20]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1dc      	bne.n	800f05a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d004      	beq.n	800f0b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f0a6:	6938      	ldr	r0, [r7, #16]
 800f0a8:	f7ff fa56 	bl	800e558 <tcp_abort>
 800f0ac:	e000      	b.n	800f0b0 <tcp_kill_prio+0x8c>
    return;
 800f0ae:	bf00      	nop
  }
}
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	20008e68 	.word	0x20008e68
 800f0bc:	20008e5c 	.word	0x20008e5c

0800f0c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	2b08      	cmp	r3, #8
 800f0ce:	d009      	beq.n	800f0e4 <tcp_kill_state+0x24>
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	2b09      	cmp	r3, #9
 800f0d4:	d006      	beq.n	800f0e4 <tcp_kill_state+0x24>
 800f0d6:	4b1a      	ldr	r3, [pc, #104]	; (800f140 <tcp_kill_state+0x80>)
 800f0d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f0dc:	4919      	ldr	r1, [pc, #100]	; (800f144 <tcp_kill_state+0x84>)
 800f0de:	481a      	ldr	r0, [pc, #104]	; (800f148 <tcp_kill_state+0x88>)
 800f0e0:	f008 fb70 	bl	80177c4 <iprintf>

  inactivity = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ec:	4b17      	ldr	r3, [pc, #92]	; (800f14c <tcp_kill_state+0x8c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	617b      	str	r3, [r7, #20]
 800f0f2:	e017      	b.n	800f124 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	7d1b      	ldrb	r3, [r3, #20]
 800f0f8:	79fa      	ldrb	r2, [r7, #7]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d10f      	bne.n	800f11e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f0fe:	4b14      	ldr	r3, [pc, #80]	; (800f150 <tcp_kill_state+0x90>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d807      	bhi.n	800f11e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f10e:	4b10      	ldr	r3, [pc, #64]	; (800f150 <tcp_kill_state+0x90>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	6a1b      	ldr	r3, [r3, #32]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1e4      	bne.n	800f0f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d003      	beq.n	800f138 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f130:	2100      	movs	r1, #0
 800f132:	6938      	ldr	r0, [r7, #16]
 800f134:	f7ff f952 	bl	800e3dc <tcp_abandon>
  }
}
 800f138:	bf00      	nop
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	08019434 	.word	0x08019434
 800f144:	080199c0 	.word	0x080199c0
 800f148:	08019478 	.word	0x08019478
 800f14c:	20008e68 	.word	0x20008e68
 800f150:	20008e5c 	.word	0x20008e5c

0800f154 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f15e:	2300      	movs	r3, #0
 800f160:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f162:	4b12      	ldr	r3, [pc, #72]	; (800f1ac <tcp_kill_timewait+0x58>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	60fb      	str	r3, [r7, #12]
 800f168:	e012      	b.n	800f190 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f16a:	4b11      	ldr	r3, [pc, #68]	; (800f1b0 <tcp_kill_timewait+0x5c>)
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	429a      	cmp	r2, r3
 800f178:	d807      	bhi.n	800f18a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f17a:	4b0d      	ldr	r3, [pc, #52]	; (800f1b0 <tcp_kill_timewait+0x5c>)
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1e9      	bne.n	800f16a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d002      	beq.n	800f1a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f19c:	68b8      	ldr	r0, [r7, #8]
 800f19e:	f7ff f9db 	bl	800e558 <tcp_abort>
  }
}
 800f1a2:	bf00      	nop
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20008e6c 	.word	0x20008e6c
 800f1b0:	20008e5c 	.word	0x20008e5c

0800f1b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f1ba:	4b10      	ldr	r3, [pc, #64]	; (800f1fc <tcp_handle_closepend+0x48>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f1c0:	e014      	b.n	800f1ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	8b5b      	ldrh	r3, [r3, #26]
 800f1cc:	f003 0308 	and.w	r3, r3, #8
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d009      	beq.n	800f1e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	8b5b      	ldrh	r3, [r3, #26]
 800f1d8:	f023 0308 	bic.w	r3, r3, #8
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff f864 	bl	800e2b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1e7      	bne.n	800f1c2 <tcp_handle_closepend+0xe>
  }
}
 800f1f2:	bf00      	nop
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20008e68 	.word	0x20008e68

0800f200 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f20a:	2001      	movs	r0, #1
 800f20c:	f7fd fc94 	bl	800cb38 <memp_malloc>
 800f210:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d126      	bne.n	800f266 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f218:	f7ff ffcc 	bl	800f1b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f21c:	f7ff ff9a 	bl	800f154 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f220:	2001      	movs	r0, #1
 800f222:	f7fd fc89 	bl	800cb38 <memp_malloc>
 800f226:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d11b      	bne.n	800f266 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f22e:	2009      	movs	r0, #9
 800f230:	f7ff ff46 	bl	800f0c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f234:	2001      	movs	r0, #1
 800f236:	f7fd fc7f 	bl	800cb38 <memp_malloc>
 800f23a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d111      	bne.n	800f266 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f242:	2008      	movs	r0, #8
 800f244:	f7ff ff3c 	bl	800f0c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f248:	2001      	movs	r0, #1
 800f24a:	f7fd fc75 	bl	800cb38 <memp_malloc>
 800f24e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d107      	bne.n	800f266 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f256:	79fb      	ldrb	r3, [r7, #7]
 800f258:	4618      	mov	r0, r3
 800f25a:	f7ff fee3 	bl	800f024 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f25e:	2001      	movs	r0, #1
 800f260:	f7fd fc6a 	bl	800cb38 <memp_malloc>
 800f264:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d03f      	beq.n	800f2ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f26c:	229c      	movs	r2, #156	; 0x9c
 800f26e:	2100      	movs	r1, #0
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f008 fa9f 	bl	80177b4 <memset>
    pcb->prio = prio;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	79fa      	ldrb	r2, [r7, #7]
 800f27a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f282:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f28c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	22ff      	movs	r2, #255	; 0xff
 800f29a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f2a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2206      	movs	r2, #6
 800f2a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2206      	movs	r2, #6
 800f2b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f2c2:	4b0d      	ldr	r3, [pc, #52]	; (800f2f8 <tcp_alloc+0xf8>)
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f2ca:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <tcp_alloc+0xfc>)
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f2d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	4a08      	ldr	r2, [pc, #32]	; (800f300 <tcp_alloc+0x100>)
 800f2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	4a07      	ldr	r2, [pc, #28]	; (800f304 <tcp_alloc+0x104>)
 800f2e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20008e5c 	.word	0x20008e5c
 800f2fc:	20008e72 	.word	0x20008e72
 800f300:	0800efb9 	.word	0x0800efb9
 800f304:	006ddd00 	.word	0x006ddd00

0800f308 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d107      	bne.n	800f326 <tcp_pcb_purge+0x1e>
 800f316:	4b21      	ldr	r3, [pc, #132]	; (800f39c <tcp_pcb_purge+0x94>)
 800f318:	f640 0251 	movw	r2, #2129	; 0x851
 800f31c:	4920      	ldr	r1, [pc, #128]	; (800f3a0 <tcp_pcb_purge+0x98>)
 800f31e:	4821      	ldr	r0, [pc, #132]	; (800f3a4 <tcp_pcb_purge+0x9c>)
 800f320:	f008 fa50 	bl	80177c4 <iprintf>
 800f324:	e037      	b.n	800f396 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	7d1b      	ldrb	r3, [r3, #20]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d033      	beq.n	800f396 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f332:	2b0a      	cmp	r3, #10
 800f334:	d02f      	beq.n	800f396 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d02b      	beq.n	800f396 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f342:	2b00      	cmp	r3, #0
 800f344:	d007      	beq.n	800f356 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fe fada 	bl	800d904 <pbuf_free>
      pcb->refused_data = NULL;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f986 	bl	800f670 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f36a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f370:	4618      	mov	r0, r3
 800f372:	f7ff fdc7 	bl	800ef04 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff fdc2 	bl	800ef04 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	66da      	str	r2, [r3, #108]	; 0x6c
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	08019434 	.word	0x08019434
 800f3a0:	08019a80 	.word	0x08019a80
 800f3a4:	08019478 	.word	0x08019478

0800f3a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d106      	bne.n	800f3c6 <tcp_pcb_remove+0x1e>
 800f3b8:	4b3e      	ldr	r3, [pc, #248]	; (800f4b4 <tcp_pcb_remove+0x10c>)
 800f3ba:	f640 0283 	movw	r2, #2179	; 0x883
 800f3be:	493e      	ldr	r1, [pc, #248]	; (800f4b8 <tcp_pcb_remove+0x110>)
 800f3c0:	483e      	ldr	r0, [pc, #248]	; (800f4bc <tcp_pcb_remove+0x114>)
 800f3c2:	f008 f9ff 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d106      	bne.n	800f3da <tcp_pcb_remove+0x32>
 800f3cc:	4b39      	ldr	r3, [pc, #228]	; (800f4b4 <tcp_pcb_remove+0x10c>)
 800f3ce:	f640 0284 	movw	r2, #2180	; 0x884
 800f3d2:	493b      	ldr	r1, [pc, #236]	; (800f4c0 <tcp_pcb_remove+0x118>)
 800f3d4:	4839      	ldr	r0, [pc, #228]	; (800f4bc <tcp_pcb_remove+0x114>)
 800f3d6:	f008 f9f5 	bl	80177c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d105      	bne.n	800f3f0 <tcp_pcb_remove+0x48>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e013      	b.n	800f418 <tcp_pcb_remove+0x70>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	60fb      	str	r3, [r7, #12]
 800f3f6:	e00c      	b.n	800f412 <tcp_pcb_remove+0x6a>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d104      	bne.n	800f40c <tcp_pcb_remove+0x64>
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	68da      	ldr	r2, [r3, #12]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	60da      	str	r2, [r3, #12]
 800f40a:	e005      	b.n	800f418 <tcp_pcb_remove+0x70>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	60fb      	str	r3, [r7, #12]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1ef      	bne.n	800f3f8 <tcp_pcb_remove+0x50>
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2200      	movs	r2, #0
 800f41c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f41e:	6838      	ldr	r0, [r7, #0]
 800f420:	f7ff ff72 	bl	800f308 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	7d1b      	ldrb	r3, [r3, #20]
 800f428:	2b0a      	cmp	r3, #10
 800f42a:	d013      	beq.n	800f454 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f430:	2b01      	cmp	r3, #1
 800f432:	d00f      	beq.n	800f454 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	8b5b      	ldrh	r3, [r3, #26]
 800f438:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d009      	beq.n	800f454 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	8b5b      	ldrh	r3, [r3, #26]
 800f444:	f043 0302 	orr.w	r3, r3, #2
 800f448:	b29a      	uxth	r2, r3
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f44e:	6838      	ldr	r0, [r7, #0]
 800f450:	f002 ff6e 	bl	8012330 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	7d1b      	ldrb	r3, [r3, #20]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d020      	beq.n	800f49e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f460:	2b00      	cmp	r3, #0
 800f462:	d006      	beq.n	800f472 <tcp_pcb_remove+0xca>
 800f464:	4b13      	ldr	r3, [pc, #76]	; (800f4b4 <tcp_pcb_remove+0x10c>)
 800f466:	f640 0293 	movw	r2, #2195	; 0x893
 800f46a:	4916      	ldr	r1, [pc, #88]	; (800f4c4 <tcp_pcb_remove+0x11c>)
 800f46c:	4813      	ldr	r0, [pc, #76]	; (800f4bc <tcp_pcb_remove+0x114>)
 800f46e:	f008 f9a9 	bl	80177c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f476:	2b00      	cmp	r3, #0
 800f478:	d006      	beq.n	800f488 <tcp_pcb_remove+0xe0>
 800f47a:	4b0e      	ldr	r3, [pc, #56]	; (800f4b4 <tcp_pcb_remove+0x10c>)
 800f47c:	f640 0294 	movw	r2, #2196	; 0x894
 800f480:	4911      	ldr	r1, [pc, #68]	; (800f4c8 <tcp_pcb_remove+0x120>)
 800f482:	480e      	ldr	r0, [pc, #56]	; (800f4bc <tcp_pcb_remove+0x114>)
 800f484:	f008 f99e 	bl	80177c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d006      	beq.n	800f49e <tcp_pcb_remove+0xf6>
 800f490:	4b08      	ldr	r3, [pc, #32]	; (800f4b4 <tcp_pcb_remove+0x10c>)
 800f492:	f640 0296 	movw	r2, #2198	; 0x896
 800f496:	490d      	ldr	r1, [pc, #52]	; (800f4cc <tcp_pcb_remove+0x124>)
 800f498:	4808      	ldr	r0, [pc, #32]	; (800f4bc <tcp_pcb_remove+0x114>)
 800f49a:	f008 f993 	bl	80177c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f4aa:	bf00      	nop
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	08019434 	.word	0x08019434
 800f4b8:	08019a9c 	.word	0x08019a9c
 800f4bc:	08019478 	.word	0x08019478
 800f4c0:	08019ab8 	.word	0x08019ab8
 800f4c4:	08019ad8 	.word	0x08019ad8
 800f4c8:	08019af0 	.word	0x08019af0
 800f4cc:	08019b0c 	.word	0x08019b0c

0800f4d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d106      	bne.n	800f4ec <tcp_next_iss+0x1c>
 800f4de:	4b0a      	ldr	r3, [pc, #40]	; (800f508 <tcp_next_iss+0x38>)
 800f4e0:	f640 02af 	movw	r2, #2223	; 0x8af
 800f4e4:	4909      	ldr	r1, [pc, #36]	; (800f50c <tcp_next_iss+0x3c>)
 800f4e6:	480a      	ldr	r0, [pc, #40]	; (800f510 <tcp_next_iss+0x40>)
 800f4e8:	f008 f96c 	bl	80177c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f4ec:	4b09      	ldr	r3, [pc, #36]	; (800f514 <tcp_next_iss+0x44>)
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	4b09      	ldr	r3, [pc, #36]	; (800f518 <tcp_next_iss+0x48>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	4a07      	ldr	r2, [pc, #28]	; (800f514 <tcp_next_iss+0x44>)
 800f4f8:	6013      	str	r3, [r2, #0]
  return iss;
 800f4fa:	4b06      	ldr	r3, [pc, #24]	; (800f514 <tcp_next_iss+0x44>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	08019434 	.word	0x08019434
 800f50c:	08019b24 	.word	0x08019b24
 800f510:	08019478 	.word	0x08019478
 800f514:	20000024 	.word	0x20000024
 800f518:	20008e5c 	.word	0x20008e5c

0800f51c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
 800f528:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d106      	bne.n	800f53e <tcp_eff_send_mss_netif+0x22>
 800f530:	4b14      	ldr	r3, [pc, #80]	; (800f584 <tcp_eff_send_mss_netif+0x68>)
 800f532:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f536:	4914      	ldr	r1, [pc, #80]	; (800f588 <tcp_eff_send_mss_netif+0x6c>)
 800f538:	4814      	ldr	r0, [pc, #80]	; (800f58c <tcp_eff_send_mss_netif+0x70>)
 800f53a:	f008 f943 	bl	80177c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d101      	bne.n	800f548 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f544:	89fb      	ldrh	r3, [r7, #14]
 800f546:	e019      	b.n	800f57c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f54c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f54e:	8afb      	ldrh	r3, [r7, #22]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d012      	beq.n	800f57a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f554:	2328      	movs	r3, #40	; 0x28
 800f556:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f558:	8afa      	ldrh	r2, [r7, #22]
 800f55a:	8abb      	ldrh	r3, [r7, #20]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d904      	bls.n	800f56a <tcp_eff_send_mss_netif+0x4e>
 800f560:	8afa      	ldrh	r2, [r7, #22]
 800f562:	8abb      	ldrh	r3, [r7, #20]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	b29b      	uxth	r3, r3
 800f568:	e000      	b.n	800f56c <tcp_eff_send_mss_netif+0x50>
 800f56a:	2300      	movs	r3, #0
 800f56c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f56e:	8a7a      	ldrh	r2, [r7, #18]
 800f570:	89fb      	ldrh	r3, [r7, #14]
 800f572:	4293      	cmp	r3, r2
 800f574:	bf28      	it	cs
 800f576:	4613      	movcs	r3, r2
 800f578:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f57a:	89fb      	ldrh	r3, [r7, #14]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3718      	adds	r7, #24
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	08019434 	.word	0x08019434
 800f588:	08019b40 	.word	0x08019b40
 800f58c:	08019478 	.word	0x08019478

0800f590 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d119      	bne.n	800f5d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f5a4:	4b10      	ldr	r3, [pc, #64]	; (800f5e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f5a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f5aa:	4910      	ldr	r1, [pc, #64]	; (800f5ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f5ac:	4810      	ldr	r0, [pc, #64]	; (800f5f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f5ae:	f008 f909 	bl	80177c4 <iprintf>

  while (pcb != NULL) {
 800f5b2:	e011      	b.n	800f5d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d108      	bne.n	800f5d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7fe ffc6 	bl	800e558 <tcp_abort>
      pcb = next;
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	60fb      	str	r3, [r7, #12]
 800f5d0:	e002      	b.n	800f5d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1ea      	bne.n	800f5b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f5de:	bf00      	nop
 800f5e0:	bf00      	nop
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	08019434 	.word	0x08019434
 800f5ec:	08019b68 	.word	0x08019b68
 800f5f0:	08019478 	.word	0x08019478

0800f5f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d02a      	beq.n	800f65a <tcp_netif_ip_addr_changed+0x66>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d026      	beq.n	800f65a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f60c:	4b15      	ldr	r3, [pc, #84]	; (800f664 <tcp_netif_ip_addr_changed+0x70>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4619      	mov	r1, r3
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7ff ffbc 	bl	800f590 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f618:	4b13      	ldr	r3, [pc, #76]	; (800f668 <tcp_netif_ip_addr_changed+0x74>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff ffb6 	bl	800f590 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d017      	beq.n	800f65a <tcp_netif_ip_addr_changed+0x66>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d013      	beq.n	800f65a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f632:	4b0e      	ldr	r3, [pc, #56]	; (800f66c <tcp_netif_ip_addr_changed+0x78>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60fb      	str	r3, [r7, #12]
 800f638:	e00c      	b.n	800f654 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	429a      	cmp	r2, r3
 800f644:	d103      	bne.n	800f64e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	60fb      	str	r3, [r7, #12]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1ef      	bne.n	800f63a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f65a:	bf00      	nop
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20008e68 	.word	0x20008e68
 800f668:	20008e60 	.word	0x20008e60
 800f66c:	20008e64 	.word	0x20008e64

0800f670 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d007      	beq.n	800f690 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f684:	4618      	mov	r0, r3
 800f686:	f7ff fc3d 	bl	800ef04 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f690:	bf00      	nop
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f698:	b590      	push	{r4, r7, lr}
 800f69a:	b08d      	sub	sp, #52	; 0x34
 800f69c:	af04      	add	r7, sp, #16
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d105      	bne.n	800f6b4 <tcp_input+0x1c>
 800f6a8:	4b9b      	ldr	r3, [pc, #620]	; (800f918 <tcp_input+0x280>)
 800f6aa:	2283      	movs	r2, #131	; 0x83
 800f6ac:	499b      	ldr	r1, [pc, #620]	; (800f91c <tcp_input+0x284>)
 800f6ae:	489c      	ldr	r0, [pc, #624]	; (800f920 <tcp_input+0x288>)
 800f6b0:	f008 f888 	bl	80177c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	4a9a      	ldr	r2, [pc, #616]	; (800f924 <tcp_input+0x28c>)
 800f6ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	895b      	ldrh	r3, [r3, #10]
 800f6c0:	2b13      	cmp	r3, #19
 800f6c2:	f240 83d1 	bls.w	800fe68 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f6c6:	4b98      	ldr	r3, [pc, #608]	; (800f928 <tcp_input+0x290>)
 800f6c8:	695b      	ldr	r3, [r3, #20]
 800f6ca:	4a97      	ldr	r2, [pc, #604]	; (800f928 <tcp_input+0x290>)
 800f6cc:	6812      	ldr	r2, [r2, #0]
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f005 ffd1 	bl	8015678 <ip4_addr_isbroadcast_u32>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f040 83c7 	bne.w	800fe6c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f6de:	4b92      	ldr	r3, [pc, #584]	; (800f928 <tcp_input+0x290>)
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f6e6:	2be0      	cmp	r3, #224	; 0xe0
 800f6e8:	f000 83c0 	beq.w	800fe6c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f6ec:	4b8d      	ldr	r3, [pc, #564]	; (800f924 <tcp_input+0x28c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	899b      	ldrh	r3, [r3, #12]
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fc fda7 	bl	800c248 <lwip_htons>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	0b1b      	lsrs	r3, r3, #12
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	b2db      	uxtb	r3, r3
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f706:	7cbb      	ldrb	r3, [r7, #18]
 800f708:	2b13      	cmp	r3, #19
 800f70a:	f240 83b1 	bls.w	800fe70 <tcp_input+0x7d8>
 800f70e:	7cbb      	ldrb	r3, [r7, #18]
 800f710:	b29a      	uxth	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	891b      	ldrh	r3, [r3, #8]
 800f716:	429a      	cmp	r2, r3
 800f718:	f200 83aa 	bhi.w	800fe70 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f71c:	7cbb      	ldrb	r3, [r7, #18]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	3b14      	subs	r3, #20
 800f722:	b29a      	uxth	r2, r3
 800f724:	4b81      	ldr	r3, [pc, #516]	; (800f92c <tcp_input+0x294>)
 800f726:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f728:	4b81      	ldr	r3, [pc, #516]	; (800f930 <tcp_input+0x298>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	895a      	ldrh	r2, [r3, #10]
 800f732:	7cbb      	ldrb	r3, [r7, #18]
 800f734:	b29b      	uxth	r3, r3
 800f736:	429a      	cmp	r2, r3
 800f738:	d309      	bcc.n	800f74e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f73a:	4b7c      	ldr	r3, [pc, #496]	; (800f92c <tcp_input+0x294>)
 800f73c:	881a      	ldrh	r2, [r3, #0]
 800f73e:	4b7d      	ldr	r3, [pc, #500]	; (800f934 <tcp_input+0x29c>)
 800f740:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f742:	7cbb      	ldrb	r3, [r7, #18]
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7fe f856 	bl	800d7f8 <pbuf_remove_header>
 800f74c:	e04e      	b.n	800f7ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d105      	bne.n	800f762 <tcp_input+0xca>
 800f756:	4b70      	ldr	r3, [pc, #448]	; (800f918 <tcp_input+0x280>)
 800f758:	22c2      	movs	r2, #194	; 0xc2
 800f75a:	4977      	ldr	r1, [pc, #476]	; (800f938 <tcp_input+0x2a0>)
 800f75c:	4870      	ldr	r0, [pc, #448]	; (800f920 <tcp_input+0x288>)
 800f75e:	f008 f831 	bl	80177c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f762:	2114      	movs	r1, #20
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7fe f847 	bl	800d7f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	895a      	ldrh	r2, [r3, #10]
 800f76e:	4b71      	ldr	r3, [pc, #452]	; (800f934 <tcp_input+0x29c>)
 800f770:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f772:	4b6e      	ldr	r3, [pc, #440]	; (800f92c <tcp_input+0x294>)
 800f774:	881a      	ldrh	r2, [r3, #0]
 800f776:	4b6f      	ldr	r3, [pc, #444]	; (800f934 <tcp_input+0x29c>)
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	1ad3      	subs	r3, r2, r3
 800f77c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f77e:	4b6d      	ldr	r3, [pc, #436]	; (800f934 <tcp_input+0x29c>)
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	4619      	mov	r1, r3
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7fe f837 	bl	800d7f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	895b      	ldrh	r3, [r3, #10]
 800f790:	8a3a      	ldrh	r2, [r7, #16]
 800f792:	429a      	cmp	r2, r3
 800f794:	f200 836e 	bhi.w	800fe74 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	4a64      	ldr	r2, [pc, #400]	; (800f930 <tcp_input+0x298>)
 800f7a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	8a3a      	ldrh	r2, [r7, #16]
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fe f824 	bl	800d7f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	891a      	ldrh	r2, [r3, #8]
 800f7b4:	8a3b      	ldrh	r3, [r7, #16]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	895b      	ldrh	r3, [r3, #10]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d005      	beq.n	800f7d2 <tcp_input+0x13a>
 800f7c6:	4b54      	ldr	r3, [pc, #336]	; (800f918 <tcp_input+0x280>)
 800f7c8:	22df      	movs	r2, #223	; 0xdf
 800f7ca:	495c      	ldr	r1, [pc, #368]	; (800f93c <tcp_input+0x2a4>)
 800f7cc:	4854      	ldr	r0, [pc, #336]	; (800f920 <tcp_input+0x288>)
 800f7ce:	f007 fff9 	bl	80177c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	891a      	ldrh	r2, [r3, #8]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	891b      	ldrh	r3, [r3, #8]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d005      	beq.n	800f7ec <tcp_input+0x154>
 800f7e0:	4b4d      	ldr	r3, [pc, #308]	; (800f918 <tcp_input+0x280>)
 800f7e2:	22e0      	movs	r2, #224	; 0xe0
 800f7e4:	4956      	ldr	r1, [pc, #344]	; (800f940 <tcp_input+0x2a8>)
 800f7e6:	484e      	ldr	r0, [pc, #312]	; (800f920 <tcp_input+0x288>)
 800f7e8:	f007 ffec 	bl	80177c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f7ec:	4b4d      	ldr	r3, [pc, #308]	; (800f924 <tcp_input+0x28c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	4a4b      	ldr	r2, [pc, #300]	; (800f924 <tcp_input+0x28c>)
 800f7f6:	6814      	ldr	r4, [r2, #0]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7fc fd25 	bl	800c248 <lwip_htons>
 800f7fe:	4603      	mov	r3, r0
 800f800:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f802:	4b48      	ldr	r3, [pc, #288]	; (800f924 <tcp_input+0x28c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	885b      	ldrh	r3, [r3, #2]
 800f808:	b29b      	uxth	r3, r3
 800f80a:	4a46      	ldr	r2, [pc, #280]	; (800f924 <tcp_input+0x28c>)
 800f80c:	6814      	ldr	r4, [r2, #0]
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fc fd1a 	bl	800c248 <lwip_htons>
 800f814:	4603      	mov	r3, r0
 800f816:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f818:	4b42      	ldr	r3, [pc, #264]	; (800f924 <tcp_input+0x28c>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	4a41      	ldr	r2, [pc, #260]	; (800f924 <tcp_input+0x28c>)
 800f820:	6814      	ldr	r4, [r2, #0]
 800f822:	4618      	mov	r0, r3
 800f824:	f7fc fd25 	bl	800c272 <lwip_htonl>
 800f828:	4603      	mov	r3, r0
 800f82a:	6063      	str	r3, [r4, #4]
 800f82c:	6863      	ldr	r3, [r4, #4]
 800f82e:	4a45      	ldr	r2, [pc, #276]	; (800f944 <tcp_input+0x2ac>)
 800f830:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f832:	4b3c      	ldr	r3, [pc, #240]	; (800f924 <tcp_input+0x28c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	4a3a      	ldr	r2, [pc, #232]	; (800f924 <tcp_input+0x28c>)
 800f83a:	6814      	ldr	r4, [r2, #0]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fc fd18 	bl	800c272 <lwip_htonl>
 800f842:	4603      	mov	r3, r0
 800f844:	60a3      	str	r3, [r4, #8]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	4a3f      	ldr	r2, [pc, #252]	; (800f948 <tcp_input+0x2b0>)
 800f84a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f84c:	4b35      	ldr	r3, [pc, #212]	; (800f924 <tcp_input+0x28c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	89db      	ldrh	r3, [r3, #14]
 800f852:	b29b      	uxth	r3, r3
 800f854:	4a33      	ldr	r2, [pc, #204]	; (800f924 <tcp_input+0x28c>)
 800f856:	6814      	ldr	r4, [r2, #0]
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fc fcf5 	bl	800c248 <lwip_htons>
 800f85e:	4603      	mov	r3, r0
 800f860:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f862:	4b30      	ldr	r3, [pc, #192]	; (800f924 <tcp_input+0x28c>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	899b      	ldrh	r3, [r3, #12]
 800f868:	b29b      	uxth	r3, r3
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fc fcec 	bl	800c248 <lwip_htons>
 800f870:	4603      	mov	r3, r0
 800f872:	b2db      	uxtb	r3, r3
 800f874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	4b34      	ldr	r3, [pc, #208]	; (800f94c <tcp_input+0x2b4>)
 800f87c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	891a      	ldrh	r2, [r3, #8]
 800f882:	4b33      	ldr	r3, [pc, #204]	; (800f950 <tcp_input+0x2b8>)
 800f884:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f886:	4b31      	ldr	r3, [pc, #196]	; (800f94c <tcp_input+0x2b4>)
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	f003 0303 	and.w	r3, r3, #3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00c      	beq.n	800f8ac <tcp_input+0x214>
    tcplen++;
 800f892:	4b2f      	ldr	r3, [pc, #188]	; (800f950 <tcp_input+0x2b8>)
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	3301      	adds	r3, #1
 800f898:	b29a      	uxth	r2, r3
 800f89a:	4b2d      	ldr	r3, [pc, #180]	; (800f950 <tcp_input+0x2b8>)
 800f89c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	891a      	ldrh	r2, [r3, #8]
 800f8a2:	4b2b      	ldr	r3, [pc, #172]	; (800f950 <tcp_input+0x2b8>)
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	f200 82e6 	bhi.w	800fe78 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b0:	4b28      	ldr	r3, [pc, #160]	; (800f954 <tcp_input+0x2bc>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	61fb      	str	r3, [r7, #28]
 800f8b6:	e09d      	b.n	800f9f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	7d1b      	ldrb	r3, [r3, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d105      	bne.n	800f8cc <tcp_input+0x234>
 800f8c0:	4b15      	ldr	r3, [pc, #84]	; (800f918 <tcp_input+0x280>)
 800f8c2:	22fb      	movs	r2, #251	; 0xfb
 800f8c4:	4924      	ldr	r1, [pc, #144]	; (800f958 <tcp_input+0x2c0>)
 800f8c6:	4816      	ldr	r0, [pc, #88]	; (800f920 <tcp_input+0x288>)
 800f8c8:	f007 ff7c 	bl	80177c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	7d1b      	ldrb	r3, [r3, #20]
 800f8d0:	2b0a      	cmp	r3, #10
 800f8d2:	d105      	bne.n	800f8e0 <tcp_input+0x248>
 800f8d4:	4b10      	ldr	r3, [pc, #64]	; (800f918 <tcp_input+0x280>)
 800f8d6:	22fc      	movs	r2, #252	; 0xfc
 800f8d8:	4920      	ldr	r1, [pc, #128]	; (800f95c <tcp_input+0x2c4>)
 800f8da:	4811      	ldr	r0, [pc, #68]	; (800f920 <tcp_input+0x288>)
 800f8dc:	f007 ff72 	bl	80177c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d105      	bne.n	800f8f4 <tcp_input+0x25c>
 800f8e8:	4b0b      	ldr	r3, [pc, #44]	; (800f918 <tcp_input+0x280>)
 800f8ea:	22fd      	movs	r2, #253	; 0xfd
 800f8ec:	491c      	ldr	r1, [pc, #112]	; (800f960 <tcp_input+0x2c8>)
 800f8ee:	480c      	ldr	r0, [pc, #48]	; (800f920 <tcp_input+0x288>)
 800f8f0:	f007 ff68 	bl	80177c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	7a1b      	ldrb	r3, [r3, #8]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d033      	beq.n	800f964 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	7a1a      	ldrb	r2, [r3, #8]
 800f900:	4b09      	ldr	r3, [pc, #36]	; (800f928 <tcp_input+0x290>)
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f908:	3301      	adds	r3, #1
 800f90a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d029      	beq.n	800f964 <tcp_input+0x2cc>
      prev = pcb;
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	61bb      	str	r3, [r7, #24]
      continue;
 800f914:	e06b      	b.n	800f9ee <tcp_input+0x356>
 800f916:	bf00      	nop
 800f918:	08019b9c 	.word	0x08019b9c
 800f91c:	08019bd0 	.word	0x08019bd0
 800f920:	08019be8 	.word	0x08019be8
 800f924:	20008e84 	.word	0x20008e84
 800f928:	200058ec 	.word	0x200058ec
 800f92c:	20008e88 	.word	0x20008e88
 800f930:	20008e8c 	.word	0x20008e8c
 800f934:	20008e8a 	.word	0x20008e8a
 800f938:	08019c10 	.word	0x08019c10
 800f93c:	08019c20 	.word	0x08019c20
 800f940:	08019c2c 	.word	0x08019c2c
 800f944:	20008e94 	.word	0x20008e94
 800f948:	20008e98 	.word	0x20008e98
 800f94c:	20008ea0 	.word	0x20008ea0
 800f950:	20008e9e 	.word	0x20008e9e
 800f954:	20008e68 	.word	0x20008e68
 800f958:	08019c4c 	.word	0x08019c4c
 800f95c:	08019c74 	.word	0x08019c74
 800f960:	08019ca0 	.word	0x08019ca0
    }

    if (pcb->remote_port == tcphdr->src &&
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	8b1a      	ldrh	r2, [r3, #24]
 800f968:	4b72      	ldr	r3, [pc, #456]	; (800fb34 <tcp_input+0x49c>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	881b      	ldrh	r3, [r3, #0]
 800f96e:	b29b      	uxth	r3, r3
 800f970:	429a      	cmp	r2, r3
 800f972:	d13a      	bne.n	800f9ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	8ada      	ldrh	r2, [r3, #22]
 800f978:	4b6e      	ldr	r3, [pc, #440]	; (800fb34 <tcp_input+0x49c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	885b      	ldrh	r3, [r3, #2]
 800f97e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f980:	429a      	cmp	r2, r3
 800f982:	d132      	bne.n	800f9ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	685a      	ldr	r2, [r3, #4]
 800f988:	4b6b      	ldr	r3, [pc, #428]	; (800fb38 <tcp_input+0x4a0>)
 800f98a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d12c      	bne.n	800f9ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	4b68      	ldr	r3, [pc, #416]	; (800fb38 <tcp_input+0x4a0>)
 800f996:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f998:	429a      	cmp	r2, r3
 800f99a:	d126      	bne.n	800f9ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	69fa      	ldr	r2, [r7, #28]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d106      	bne.n	800f9b4 <tcp_input+0x31c>
 800f9a6:	4b65      	ldr	r3, [pc, #404]	; (800fb3c <tcp_input+0x4a4>)
 800f9a8:	f240 120d 	movw	r2, #269	; 0x10d
 800f9ac:	4964      	ldr	r1, [pc, #400]	; (800fb40 <tcp_input+0x4a8>)
 800f9ae:	4865      	ldr	r0, [pc, #404]	; (800fb44 <tcp_input+0x4ac>)
 800f9b0:	f007 ff08 	bl	80177c4 <iprintf>
      if (prev != NULL) {
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00a      	beq.n	800f9d0 <tcp_input+0x338>
        prev->next = pcb->next;
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	68da      	ldr	r2, [r3, #12]
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f9c2:	4b61      	ldr	r3, [pc, #388]	; (800fb48 <tcp_input+0x4b0>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f9ca:	4a5f      	ldr	r2, [pc, #380]	; (800fb48 <tcp_input+0x4b0>)
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	69fa      	ldr	r2, [r7, #28]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d111      	bne.n	800f9fe <tcp_input+0x366>
 800f9da:	4b58      	ldr	r3, [pc, #352]	; (800fb3c <tcp_input+0x4a4>)
 800f9dc:	f240 1215 	movw	r2, #277	; 0x115
 800f9e0:	495a      	ldr	r1, [pc, #360]	; (800fb4c <tcp_input+0x4b4>)
 800f9e2:	4858      	ldr	r0, [pc, #352]	; (800fb44 <tcp_input+0x4ac>)
 800f9e4:	f007 feee 	bl	80177c4 <iprintf>
      break;
 800f9e8:	e009      	b.n	800f9fe <tcp_input+0x366>
    }
    prev = pcb;
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	61fb      	str	r3, [r7, #28]
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f47f af5e 	bne.w	800f8b8 <tcp_input+0x220>
 800f9fc:	e000      	b.n	800fa00 <tcp_input+0x368>
      break;
 800f9fe:	bf00      	nop
  }

  if (pcb == NULL) {
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f040 80aa 	bne.w	800fb5c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa08:	4b51      	ldr	r3, [pc, #324]	; (800fb50 <tcp_input+0x4b8>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	61fb      	str	r3, [r7, #28]
 800fa0e:	e03f      	b.n	800fa90 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	7d1b      	ldrb	r3, [r3, #20]
 800fa14:	2b0a      	cmp	r3, #10
 800fa16:	d006      	beq.n	800fa26 <tcp_input+0x38e>
 800fa18:	4b48      	ldr	r3, [pc, #288]	; (800fb3c <tcp_input+0x4a4>)
 800fa1a:	f240 121f 	movw	r2, #287	; 0x11f
 800fa1e:	494d      	ldr	r1, [pc, #308]	; (800fb54 <tcp_input+0x4bc>)
 800fa20:	4848      	ldr	r0, [pc, #288]	; (800fb44 <tcp_input+0x4ac>)
 800fa22:	f007 fecf 	bl	80177c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	7a1b      	ldrb	r3, [r3, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d009      	beq.n	800fa42 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	7a1a      	ldrb	r2, [r3, #8]
 800fa32:	4b41      	ldr	r3, [pc, #260]	; (800fb38 <tcp_input+0x4a0>)
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d122      	bne.n	800fa88 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	8b1a      	ldrh	r2, [r3, #24]
 800fa46:	4b3b      	ldr	r3, [pc, #236]	; (800fb34 <tcp_input+0x49c>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d11b      	bne.n	800fa8a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	8ada      	ldrh	r2, [r3, #22]
 800fa56:	4b37      	ldr	r3, [pc, #220]	; (800fb34 <tcp_input+0x49c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	885b      	ldrh	r3, [r3, #2]
 800fa5c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d113      	bne.n	800fa8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	4b34      	ldr	r3, [pc, #208]	; (800fb38 <tcp_input+0x4a0>)
 800fa68:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d10d      	bne.n	800fa8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	4b31      	ldr	r3, [pc, #196]	; (800fb38 <tcp_input+0x4a0>)
 800fa74:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d107      	bne.n	800fa8a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fa7a:	69f8      	ldr	r0, [r7, #28]
 800fa7c:	f000 fb56 	bl	801012c <tcp_timewait_input>
        }
        pbuf_free(p);
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7fd ff3f 	bl	800d904 <pbuf_free>
        return;
 800fa86:	e1fd      	b.n	800fe84 <tcp_input+0x7ec>
        continue;
 800fa88:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	61fb      	str	r3, [r7, #28]
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1bc      	bne.n	800fa10 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa9a:	4b2f      	ldr	r3, [pc, #188]	; (800fb58 <tcp_input+0x4c0>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	e02a      	b.n	800faf8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	7a1b      	ldrb	r3, [r3, #8]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00c      	beq.n	800fac4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	7a1a      	ldrb	r2, [r3, #8]
 800faae:	4b22      	ldr	r3, [pc, #136]	; (800fb38 <tcp_input+0x4a0>)
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fab6:	3301      	adds	r3, #1
 800fab8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800faba:	429a      	cmp	r2, r3
 800fabc:	d002      	beq.n	800fac4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	61bb      	str	r3, [r7, #24]
        continue;
 800fac2:	e016      	b.n	800faf2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	8ada      	ldrh	r2, [r3, #22]
 800fac8:	4b1a      	ldr	r3, [pc, #104]	; (800fb34 <tcp_input+0x49c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	885b      	ldrh	r3, [r3, #2]
 800face:	b29b      	uxth	r3, r3
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d10c      	bne.n	800faee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	4b17      	ldr	r3, [pc, #92]	; (800fb38 <tcp_input+0x4a0>)
 800fada:	695b      	ldr	r3, [r3, #20]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d00f      	beq.n	800fb00 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00d      	beq.n	800fb02 <tcp_input+0x46a>
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d009      	beq.n	800fb02 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	617b      	str	r3, [r7, #20]
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1d1      	bne.n	800faa2 <tcp_input+0x40a>
 800fafe:	e000      	b.n	800fb02 <tcp_input+0x46a>
            break;
 800fb00:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d029      	beq.n	800fb5c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00a      	beq.n	800fb24 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	68da      	ldr	r2, [r3, #12]
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fb16:	4b10      	ldr	r3, [pc, #64]	; (800fb58 <tcp_input+0x4c0>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fb1e:	4a0e      	ldr	r2, [pc, #56]	; (800fb58 <tcp_input+0x4c0>)
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fb24:	6978      	ldr	r0, [r7, #20]
 800fb26:	f000 fa03 	bl	800ff30 <tcp_listen_input>
      }
      pbuf_free(p);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7fd feea 	bl	800d904 <pbuf_free>
      return;
 800fb30:	e1a8      	b.n	800fe84 <tcp_input+0x7ec>
 800fb32:	bf00      	nop
 800fb34:	20008e84 	.word	0x20008e84
 800fb38:	200058ec 	.word	0x200058ec
 800fb3c:	08019b9c 	.word	0x08019b9c
 800fb40:	08019cc8 	.word	0x08019cc8
 800fb44:	08019be8 	.word	0x08019be8
 800fb48:	20008e68 	.word	0x20008e68
 800fb4c:	08019cf4 	.word	0x08019cf4
 800fb50:	20008e6c 	.word	0x20008e6c
 800fb54:	08019d20 	.word	0x08019d20
 800fb58:	20008e64 	.word	0x20008e64
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f000 8158 	beq.w	800fe14 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fb64:	4b95      	ldr	r3, [pc, #596]	; (800fdbc <tcp_input+0x724>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	891a      	ldrh	r2, [r3, #8]
 800fb6e:	4b93      	ldr	r3, [pc, #588]	; (800fdbc <tcp_input+0x724>)
 800fb70:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fb72:	4a92      	ldr	r2, [pc, #584]	; (800fdbc <tcp_input+0x724>)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fb78:	4b91      	ldr	r3, [pc, #580]	; (800fdc0 <tcp_input+0x728>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a8f      	ldr	r2, [pc, #572]	; (800fdbc <tcp_input+0x724>)
 800fb7e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fb80:	4b90      	ldr	r3, [pc, #576]	; (800fdc4 <tcp_input+0x72c>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fb86:	4b90      	ldr	r3, [pc, #576]	; (800fdc8 <tcp_input+0x730>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fb8c:	4b8f      	ldr	r3, [pc, #572]	; (800fdcc <tcp_input+0x734>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fb92:	4b8f      	ldr	r3, [pc, #572]	; (800fdd0 <tcp_input+0x738>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 0308 	and.w	r3, r3, #8
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d006      	beq.n	800fbac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	7b5b      	ldrb	r3, [r3, #13]
 800fba2:	f043 0301 	orr.w	r3, r3, #1
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d017      	beq.n	800fbe4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fbb4:	69f8      	ldr	r0, [r7, #28]
 800fbb6:	f7ff f929 	bl	800ee0c <tcp_process_refused_data>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	f113 0f0d 	cmn.w	r3, #13
 800fbc0:	d007      	beq.n	800fbd2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00c      	beq.n	800fbe4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fbca:	4b82      	ldr	r3, [pc, #520]	; (800fdd4 <tcp_input+0x73c>)
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d008      	beq.n	800fbe4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f040 80e3 	bne.w	800fda2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fbdc:	69f8      	ldr	r0, [r7, #28]
 800fbde:	f003 f9ad 	bl	8012f3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fbe2:	e0de      	b.n	800fda2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fbe4:	4a7c      	ldr	r2, [pc, #496]	; (800fdd8 <tcp_input+0x740>)
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fbea:	69f8      	ldr	r0, [r7, #28]
 800fbec:	f000 fb18 	bl	8010220 <tcp_process>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fbf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbf8:	f113 0f0d 	cmn.w	r3, #13
 800fbfc:	f000 80d3 	beq.w	800fda6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fc00:	4b71      	ldr	r3, [pc, #452]	; (800fdc8 <tcp_input+0x730>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	f003 0308 	and.w	r3, r3, #8
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d015      	beq.n	800fc38 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d008      	beq.n	800fc28 <tcp_input+0x590>
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc1c:	69fa      	ldr	r2, [r7, #28]
 800fc1e:	6912      	ldr	r2, [r2, #16]
 800fc20:	f06f 010d 	mvn.w	r1, #13
 800fc24:	4610      	mov	r0, r2
 800fc26:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc28:	69f9      	ldr	r1, [r7, #28]
 800fc2a:	486c      	ldr	r0, [pc, #432]	; (800fddc <tcp_input+0x744>)
 800fc2c:	f7ff fbbc 	bl	800f3a8 <tcp_pcb_remove>
        tcp_free(pcb);
 800fc30:	69f8      	ldr	r0, [r7, #28]
 800fc32:	f7fe f9a9 	bl	800df88 <tcp_free>
 800fc36:	e0da      	b.n	800fdee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fc3c:	4b63      	ldr	r3, [pc, #396]	; (800fdcc <tcp_input+0x734>)
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d01d      	beq.n	800fc80 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fc44:	4b61      	ldr	r3, [pc, #388]	; (800fdcc <tcp_input+0x734>)
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d00a      	beq.n	800fc6a <tcp_input+0x5d2>
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc5a:	69fa      	ldr	r2, [r7, #28]
 800fc5c:	6910      	ldr	r0, [r2, #16]
 800fc5e:	89fa      	ldrh	r2, [r7, #14]
 800fc60:	69f9      	ldr	r1, [r7, #28]
 800fc62:	4798      	blx	r3
 800fc64:	4603      	mov	r3, r0
 800fc66:	74fb      	strb	r3, [r7, #19]
 800fc68:	e001      	b.n	800fc6e <tcp_input+0x5d6>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc72:	f113 0f0d 	cmn.w	r3, #13
 800fc76:	f000 8098 	beq.w	800fdaa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fc7a:	4b54      	ldr	r3, [pc, #336]	; (800fdcc <tcp_input+0x734>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fc80:	69f8      	ldr	r0, [r7, #28]
 800fc82:	f000 f915 	bl	800feb0 <tcp_input_delayed_close>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f040 8090 	bne.w	800fdae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fc8e:	4b4d      	ldr	r3, [pc, #308]	; (800fdc4 <tcp_input+0x72c>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d041      	beq.n	800fd1a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d006      	beq.n	800fcac <tcp_input+0x614>
 800fc9e:	4b50      	ldr	r3, [pc, #320]	; (800fde0 <tcp_input+0x748>)
 800fca0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fca4:	494f      	ldr	r1, [pc, #316]	; (800fde4 <tcp_input+0x74c>)
 800fca6:	4850      	ldr	r0, [pc, #320]	; (800fde8 <tcp_input+0x750>)
 800fca8:	f007 fd8c 	bl	80177c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	8b5b      	ldrh	r3, [r3, #26]
 800fcb0:	f003 0310 	and.w	r3, r3, #16
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d008      	beq.n	800fcca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fcb8:	4b42      	ldr	r3, [pc, #264]	; (800fdc4 <tcp_input+0x72c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fd fe21 	bl	800d904 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fcc2:	69f8      	ldr	r0, [r7, #28]
 800fcc4:	f7fe fc48 	bl	800e558 <tcp_abort>
            goto aborted;
 800fcc8:	e091      	b.n	800fdee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00c      	beq.n	800fcee <tcp_input+0x656>
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	6918      	ldr	r0, [r3, #16]
 800fcde:	4b39      	ldr	r3, [pc, #228]	; (800fdc4 <tcp_input+0x72c>)
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	2300      	movs	r3, #0
 800fce4:	69f9      	ldr	r1, [r7, #28]
 800fce6:	47a0      	blx	r4
 800fce8:	4603      	mov	r3, r0
 800fcea:	74fb      	strb	r3, [r7, #19]
 800fcec:	e008      	b.n	800fd00 <tcp_input+0x668>
 800fcee:	4b35      	ldr	r3, [pc, #212]	; (800fdc4 <tcp_input+0x72c>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	69f9      	ldr	r1, [r7, #28]
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	f7ff f95e 	bl	800efb8 <tcp_recv_null>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fd00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd04:	f113 0f0d 	cmn.w	r3, #13
 800fd08:	d053      	beq.n	800fdb2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fd0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fd12:	4b2c      	ldr	r3, [pc, #176]	; (800fdc4 <tcp_input+0x72c>)
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fd1a:	4b2b      	ldr	r3, [pc, #172]	; (800fdc8 <tcp_input+0x730>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	f003 0320 	and.w	r3, r3, #32
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d030      	beq.n	800fd88 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d009      	beq.n	800fd42 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd32:	7b5a      	ldrb	r2, [r3, #13]
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd38:	f042 0220 	orr.w	r2, r2, #32
 800fd3c:	b2d2      	uxtb	r2, r2
 800fd3e:	735a      	strb	r2, [r3, #13]
 800fd40:	e022      	b.n	800fd88 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fd4a:	d005      	beq.n	800fd58 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd50:	3301      	adds	r3, #1
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d00b      	beq.n	800fd7a <tcp_input+0x6e2>
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	6918      	ldr	r0, [r3, #16]
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	69f9      	ldr	r1, [r7, #28]
 800fd72:	47a0      	blx	r4
 800fd74:	4603      	mov	r3, r0
 800fd76:	74fb      	strb	r3, [r7, #19]
 800fd78:	e001      	b.n	800fd7e <tcp_input+0x6e6>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fd7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd82:	f113 0f0d 	cmn.w	r3, #13
 800fd86:	d016      	beq.n	800fdb6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fd88:	4b13      	ldr	r3, [pc, #76]	; (800fdd8 <tcp_input+0x740>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fd8e:	69f8      	ldr	r0, [r7, #28]
 800fd90:	f000 f88e 	bl	800feb0 <tcp_input_delayed_close>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d128      	bne.n	800fdec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fd9a:	69f8      	ldr	r0, [r7, #28]
 800fd9c:	f002 fac8 	bl	8012330 <tcp_output>
 800fda0:	e025      	b.n	800fdee <tcp_input+0x756>
        goto aborted;
 800fda2:	bf00      	nop
 800fda4:	e023      	b.n	800fdee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fda6:	bf00      	nop
 800fda8:	e021      	b.n	800fdee <tcp_input+0x756>
              goto aborted;
 800fdaa:	bf00      	nop
 800fdac:	e01f      	b.n	800fdee <tcp_input+0x756>
          goto aborted;
 800fdae:	bf00      	nop
 800fdb0:	e01d      	b.n	800fdee <tcp_input+0x756>
            goto aborted;
 800fdb2:	bf00      	nop
 800fdb4:	e01b      	b.n	800fdee <tcp_input+0x756>
              goto aborted;
 800fdb6:	bf00      	nop
 800fdb8:	e019      	b.n	800fdee <tcp_input+0x756>
 800fdba:	bf00      	nop
 800fdbc:	20008e74 	.word	0x20008e74
 800fdc0:	20008e84 	.word	0x20008e84
 800fdc4:	20008ea4 	.word	0x20008ea4
 800fdc8:	20008ea1 	.word	0x20008ea1
 800fdcc:	20008e9c 	.word	0x20008e9c
 800fdd0:	20008ea0 	.word	0x20008ea0
 800fdd4:	20008e9e 	.word	0x20008e9e
 800fdd8:	20008ea8 	.word	0x20008ea8
 800fddc:	20008e68 	.word	0x20008e68
 800fde0:	08019b9c 	.word	0x08019b9c
 800fde4:	08019d50 	.word	0x08019d50
 800fde8:	08019be8 	.word	0x08019be8
          goto aborted;
 800fdec:	bf00      	nop
    tcp_input_pcb = NULL;
 800fdee:	4b27      	ldr	r3, [pc, #156]	; (800fe8c <tcp_input+0x7f4>)
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fdf4:	4b26      	ldr	r3, [pc, #152]	; (800fe90 <tcp_input+0x7f8>)
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fdfa:	4b26      	ldr	r3, [pc, #152]	; (800fe94 <tcp_input+0x7fc>)
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d03f      	beq.n	800fe82 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fe02:	4b24      	ldr	r3, [pc, #144]	; (800fe94 <tcp_input+0x7fc>)
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fd fd7c 	bl	800d904 <pbuf_free>
      inseg.p = NULL;
 800fe0c:	4b21      	ldr	r3, [pc, #132]	; (800fe94 <tcp_input+0x7fc>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fe12:	e036      	b.n	800fe82 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fe14:	4b20      	ldr	r3, [pc, #128]	; (800fe98 <tcp_input+0x800>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fc fa13 	bl	800c248 <lwip_htons>
 800fe22:	4603      	mov	r3, r0
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	f003 0304 	and.w	r3, r3, #4
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d118      	bne.n	800fe60 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe2e:	4b1b      	ldr	r3, [pc, #108]	; (800fe9c <tcp_input+0x804>)
 800fe30:	6819      	ldr	r1, [r3, #0]
 800fe32:	4b1b      	ldr	r3, [pc, #108]	; (800fea0 <tcp_input+0x808>)
 800fe34:	881b      	ldrh	r3, [r3, #0]
 800fe36:	461a      	mov	r2, r3
 800fe38:	4b1a      	ldr	r3, [pc, #104]	; (800fea4 <tcp_input+0x80c>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe3e:	4b16      	ldr	r3, [pc, #88]	; (800fe98 <tcp_input+0x800>)
 800fe40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe42:	885b      	ldrh	r3, [r3, #2]
 800fe44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe46:	4a14      	ldr	r2, [pc, #80]	; (800fe98 <tcp_input+0x800>)
 800fe48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe4a:	8812      	ldrh	r2, [r2, #0]
 800fe4c:	b292      	uxth	r2, r2
 800fe4e:	9202      	str	r2, [sp, #8]
 800fe50:	9301      	str	r3, [sp, #4]
 800fe52:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <tcp_input+0x810>)
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	4b15      	ldr	r3, [pc, #84]	; (800feac <tcp_input+0x814>)
 800fe58:	4602      	mov	r2, r0
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	f003 f81c 	bl	8012e98 <tcp_rst>
    pbuf_free(p);
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7fd fd4f 	bl	800d904 <pbuf_free>
  return;
 800fe66:	e00c      	b.n	800fe82 <tcp_input+0x7ea>
    goto dropped;
 800fe68:	bf00      	nop
 800fe6a:	e006      	b.n	800fe7a <tcp_input+0x7e2>
    goto dropped;
 800fe6c:	bf00      	nop
 800fe6e:	e004      	b.n	800fe7a <tcp_input+0x7e2>
    goto dropped;
 800fe70:	bf00      	nop
 800fe72:	e002      	b.n	800fe7a <tcp_input+0x7e2>
      goto dropped;
 800fe74:	bf00      	nop
 800fe76:	e000      	b.n	800fe7a <tcp_input+0x7e2>
      goto dropped;
 800fe78:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7fd fd42 	bl	800d904 <pbuf_free>
 800fe80:	e000      	b.n	800fe84 <tcp_input+0x7ec>
  return;
 800fe82:	bf00      	nop
}
 800fe84:	3724      	adds	r7, #36	; 0x24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd90      	pop	{r4, r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20008ea8 	.word	0x20008ea8
 800fe90:	20008ea4 	.word	0x20008ea4
 800fe94:	20008e74 	.word	0x20008e74
 800fe98:	20008e84 	.word	0x20008e84
 800fe9c:	20008e98 	.word	0x20008e98
 800fea0:	20008e9e 	.word	0x20008e9e
 800fea4:	20008e94 	.word	0x20008e94
 800fea8:	200058fc 	.word	0x200058fc
 800feac:	20005900 	.word	0x20005900

0800feb0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d106      	bne.n	800fecc <tcp_input_delayed_close+0x1c>
 800febe:	4b17      	ldr	r3, [pc, #92]	; (800ff1c <tcp_input_delayed_close+0x6c>)
 800fec0:	f240 225a 	movw	r2, #602	; 0x25a
 800fec4:	4916      	ldr	r1, [pc, #88]	; (800ff20 <tcp_input_delayed_close+0x70>)
 800fec6:	4817      	ldr	r0, [pc, #92]	; (800ff24 <tcp_input_delayed_close+0x74>)
 800fec8:	f007 fc7c 	bl	80177c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fecc:	4b16      	ldr	r3, [pc, #88]	; (800ff28 <tcp_input_delayed_close+0x78>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f003 0310 	and.w	r3, r3, #16
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d01c      	beq.n	800ff12 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	8b5b      	ldrh	r3, [r3, #26]
 800fedc:	f003 0310 	and.w	r3, r3, #16
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10d      	bne.n	800ff00 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feea:	2b00      	cmp	r3, #0
 800feec:	d008      	beq.n	800ff00 <tcp_input_delayed_close+0x50>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	6912      	ldr	r2, [r2, #16]
 800fef8:	f06f 010e 	mvn.w	r1, #14
 800fefc:	4610      	mov	r0, r2
 800fefe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff00:	6879      	ldr	r1, [r7, #4]
 800ff02:	480a      	ldr	r0, [pc, #40]	; (800ff2c <tcp_input_delayed_close+0x7c>)
 800ff04:	f7ff fa50 	bl	800f3a8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7fe f83d 	bl	800df88 <tcp_free>
    return 1;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e000      	b.n	800ff14 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	08019b9c 	.word	0x08019b9c
 800ff20:	08019d6c 	.word	0x08019d6c
 800ff24:	08019be8 	.word	0x08019be8
 800ff28:	20008ea1 	.word	0x20008ea1
 800ff2c:	20008e68 	.word	0x20008e68

0800ff30 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ff30:	b590      	push	{r4, r7, lr}
 800ff32:	b08b      	sub	sp, #44	; 0x2c
 800ff34:	af04      	add	r7, sp, #16
 800ff36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ff38:	4b6f      	ldr	r3, [pc, #444]	; (80100f8 <tcp_listen_input+0x1c8>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 0304 	and.w	r3, r3, #4
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f040 80d2 	bne.w	80100ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d106      	bne.n	800ff5a <tcp_listen_input+0x2a>
 800ff4c:	4b6b      	ldr	r3, [pc, #428]	; (80100fc <tcp_listen_input+0x1cc>)
 800ff4e:	f240 2281 	movw	r2, #641	; 0x281
 800ff52:	496b      	ldr	r1, [pc, #428]	; (8010100 <tcp_listen_input+0x1d0>)
 800ff54:	486b      	ldr	r0, [pc, #428]	; (8010104 <tcp_listen_input+0x1d4>)
 800ff56:	f007 fc35 	bl	80177c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ff5a:	4b67      	ldr	r3, [pc, #412]	; (80100f8 <tcp_listen_input+0x1c8>)
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	f003 0310 	and.w	r3, r3, #16
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d019      	beq.n	800ff9a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff66:	4b68      	ldr	r3, [pc, #416]	; (8010108 <tcp_listen_input+0x1d8>)
 800ff68:	6819      	ldr	r1, [r3, #0]
 800ff6a:	4b68      	ldr	r3, [pc, #416]	; (801010c <tcp_listen_input+0x1dc>)
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	4b67      	ldr	r3, [pc, #412]	; (8010110 <tcp_listen_input+0x1e0>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff76:	4b67      	ldr	r3, [pc, #412]	; (8010114 <tcp_listen_input+0x1e4>)
 800ff78:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff7a:	885b      	ldrh	r3, [r3, #2]
 800ff7c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff7e:	4a65      	ldr	r2, [pc, #404]	; (8010114 <tcp_listen_input+0x1e4>)
 800ff80:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff82:	8812      	ldrh	r2, [r2, #0]
 800ff84:	b292      	uxth	r2, r2
 800ff86:	9202      	str	r2, [sp, #8]
 800ff88:	9301      	str	r3, [sp, #4]
 800ff8a:	4b63      	ldr	r3, [pc, #396]	; (8010118 <tcp_listen_input+0x1e8>)
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	4b63      	ldr	r3, [pc, #396]	; (801011c <tcp_listen_input+0x1ec>)
 800ff90:	4602      	mov	r2, r0
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f002 ff80 	bl	8012e98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ff98:	e0a9      	b.n	80100ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ff9a:	4b57      	ldr	r3, [pc, #348]	; (80100f8 <tcp_listen_input+0x1c8>)
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	f003 0302 	and.w	r3, r3, #2
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f000 80a3 	beq.w	80100ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	7d5b      	ldrb	r3, [r3, #21]
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7ff f927 	bl	800f200 <tcp_alloc>
 800ffb2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d111      	bne.n	800ffde <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	699b      	ldr	r3, [r3, #24]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00a      	beq.n	800ffd8 <tcp_listen_input+0xa8>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	699b      	ldr	r3, [r3, #24]
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	6910      	ldr	r0, [r2, #16]
 800ffca:	f04f 32ff 	mov.w	r2, #4294967295
 800ffce:	2100      	movs	r1, #0
 800ffd0:	4798      	blx	r3
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	73bb      	strb	r3, [r7, #14]
      return;
 800ffd6:	e08b      	b.n	80100f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ffd8:	23f0      	movs	r3, #240	; 0xf0
 800ffda:	73bb      	strb	r3, [r7, #14]
      return;
 800ffdc:	e088      	b.n	80100f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ffde:	4b50      	ldr	r3, [pc, #320]	; (8010120 <tcp_listen_input+0x1f0>)
 800ffe0:	695a      	ldr	r2, [r3, #20]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ffe6:	4b4e      	ldr	r3, [pc, #312]	; (8010120 <tcp_listen_input+0x1f0>)
 800ffe8:	691a      	ldr	r2, [r3, #16]
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	8ada      	ldrh	r2, [r3, #22]
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fff6:	4b47      	ldr	r3, [pc, #284]	; (8010114 <tcp_listen_input+0x1e4>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	881b      	ldrh	r3, [r3, #0]
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2203      	movs	r2, #3
 8010006:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010008:	4b41      	ldr	r3, [pc, #260]	; (8010110 <tcp_listen_input+0x1e0>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	1c5a      	adds	r2, r3, #1
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801001a:	6978      	ldr	r0, [r7, #20]
 801001c:	f7ff fa58 	bl	800f4d0 <tcp_next_iss>
 8010020:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	693a      	ldr	r2, [r7, #16]
 8010026:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	693a      	ldr	r2, [r7, #16]
 801002c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	693a      	ldr	r2, [r7, #16]
 8010032:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	693a      	ldr	r2, [r7, #16]
 8010038:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801003a:	4b35      	ldr	r3, [pc, #212]	; (8010110 <tcp_listen_input+0x1e0>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	1e5a      	subs	r2, r3, #1
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	691a      	ldr	r2, [r3, #16]
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	7a5b      	ldrb	r3, [r3, #9]
 8010056:	f003 030c 	and.w	r3, r3, #12
 801005a:	b2da      	uxtb	r2, r3
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	7a1a      	ldrb	r2, [r3, #8]
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010068:	4b2e      	ldr	r3, [pc, #184]	; (8010124 <tcp_listen_input+0x1f4>)
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	60da      	str	r2, [r3, #12]
 8010070:	4a2c      	ldr	r2, [pc, #176]	; (8010124 <tcp_listen_input+0x1f4>)
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6013      	str	r3, [r2, #0]
 8010076:	f003 f8d1 	bl	801321c <tcp_timer_needed>
 801007a:	4b2b      	ldr	r3, [pc, #172]	; (8010128 <tcp_listen_input+0x1f8>)
 801007c:	2201      	movs	r2, #1
 801007e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010080:	6978      	ldr	r0, [r7, #20]
 8010082:	f001 fd8f 	bl	8011ba4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010086:	4b23      	ldr	r3, [pc, #140]	; (8010114 <tcp_listen_input+0x1e4>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	89db      	ldrh	r3, [r3, #14]
 801008c:	b29a      	uxth	r2, r3
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	3304      	adds	r3, #4
 80100a8:	4618      	mov	r0, r3
 80100aa:	f005 f84f 	bl	801514c <ip4_route>
 80100ae:	4601      	mov	r1, r0
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	3304      	adds	r3, #4
 80100b4:	461a      	mov	r2, r3
 80100b6:	4620      	mov	r0, r4
 80100b8:	f7ff fa30 	bl	800f51c <tcp_eff_send_mss_netif>
 80100bc:	4603      	mov	r3, r0
 80100be:	461a      	mov	r2, r3
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80100c4:	2112      	movs	r1, #18
 80100c6:	6978      	ldr	r0, [r7, #20]
 80100c8:	f002 f844 	bl	8012154 <tcp_enqueue_flags>
 80100cc:	4603      	mov	r3, r0
 80100ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80100d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d004      	beq.n	80100e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80100d8:	2100      	movs	r1, #0
 80100da:	6978      	ldr	r0, [r7, #20]
 80100dc:	f7fe f97e 	bl	800e3dc <tcp_abandon>
      return;
 80100e0:	e006      	b.n	80100f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80100e2:	6978      	ldr	r0, [r7, #20]
 80100e4:	f002 f924 	bl	8012330 <tcp_output>
  return;
 80100e8:	e001      	b.n	80100ee <tcp_listen_input+0x1be>
    return;
 80100ea:	bf00      	nop
 80100ec:	e000      	b.n	80100f0 <tcp_listen_input+0x1c0>
  return;
 80100ee:	bf00      	nop
}
 80100f0:	371c      	adds	r7, #28
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd90      	pop	{r4, r7, pc}
 80100f6:	bf00      	nop
 80100f8:	20008ea0 	.word	0x20008ea0
 80100fc:	08019b9c 	.word	0x08019b9c
 8010100:	08019d94 	.word	0x08019d94
 8010104:	08019be8 	.word	0x08019be8
 8010108:	20008e98 	.word	0x20008e98
 801010c:	20008e9e 	.word	0x20008e9e
 8010110:	20008e94 	.word	0x20008e94
 8010114:	20008e84 	.word	0x20008e84
 8010118:	200058fc 	.word	0x200058fc
 801011c:	20005900 	.word	0x20005900
 8010120:	200058ec 	.word	0x200058ec
 8010124:	20008e68 	.word	0x20008e68
 8010128:	20008e70 	.word	0x20008e70

0801012c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b086      	sub	sp, #24
 8010130:	af04      	add	r7, sp, #16
 8010132:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010134:	4b2f      	ldr	r3, [pc, #188]	; (80101f4 <tcp_timewait_input+0xc8>)
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	f003 0304 	and.w	r3, r3, #4
 801013c:	2b00      	cmp	r3, #0
 801013e:	d153      	bne.n	80101e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d106      	bne.n	8010154 <tcp_timewait_input+0x28>
 8010146:	4b2c      	ldr	r3, [pc, #176]	; (80101f8 <tcp_timewait_input+0xcc>)
 8010148:	f240 22ee 	movw	r2, #750	; 0x2ee
 801014c:	492b      	ldr	r1, [pc, #172]	; (80101fc <tcp_timewait_input+0xd0>)
 801014e:	482c      	ldr	r0, [pc, #176]	; (8010200 <tcp_timewait_input+0xd4>)
 8010150:	f007 fb38 	bl	80177c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010154:	4b27      	ldr	r3, [pc, #156]	; (80101f4 <tcp_timewait_input+0xc8>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	f003 0302 	and.w	r3, r3, #2
 801015c:	2b00      	cmp	r3, #0
 801015e:	d02a      	beq.n	80101b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010160:	4b28      	ldr	r3, [pc, #160]	; (8010204 <tcp_timewait_input+0xd8>)
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010168:	1ad3      	subs	r3, r2, r3
 801016a:	2b00      	cmp	r3, #0
 801016c:	db2d      	blt.n	80101ca <tcp_timewait_input+0x9e>
 801016e:	4b25      	ldr	r3, [pc, #148]	; (8010204 <tcp_timewait_input+0xd8>)
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010176:	6879      	ldr	r1, [r7, #4]
 8010178:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801017a:	440b      	add	r3, r1
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	dc23      	bgt.n	80101ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010182:	4b21      	ldr	r3, [pc, #132]	; (8010208 <tcp_timewait_input+0xdc>)
 8010184:	6819      	ldr	r1, [r3, #0]
 8010186:	4b21      	ldr	r3, [pc, #132]	; (801020c <tcp_timewait_input+0xe0>)
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	461a      	mov	r2, r3
 801018c:	4b1d      	ldr	r3, [pc, #116]	; (8010204 <tcp_timewait_input+0xd8>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010192:	4b1f      	ldr	r3, [pc, #124]	; (8010210 <tcp_timewait_input+0xe4>)
 8010194:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010196:	885b      	ldrh	r3, [r3, #2]
 8010198:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801019a:	4a1d      	ldr	r2, [pc, #116]	; (8010210 <tcp_timewait_input+0xe4>)
 801019c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801019e:	8812      	ldrh	r2, [r2, #0]
 80101a0:	b292      	uxth	r2, r2
 80101a2:	9202      	str	r2, [sp, #8]
 80101a4:	9301      	str	r3, [sp, #4]
 80101a6:	4b1b      	ldr	r3, [pc, #108]	; (8010214 <tcp_timewait_input+0xe8>)
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	4b1b      	ldr	r3, [pc, #108]	; (8010218 <tcp_timewait_input+0xec>)
 80101ac:	4602      	mov	r2, r0
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f002 fe72 	bl	8012e98 <tcp_rst>
      return;
 80101b4:	e01b      	b.n	80101ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80101b6:	4b0f      	ldr	r3, [pc, #60]	; (80101f4 <tcp_timewait_input+0xc8>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	f003 0301 	and.w	r3, r3, #1
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d003      	beq.n	80101ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80101c2:	4b16      	ldr	r3, [pc, #88]	; (801021c <tcp_timewait_input+0xf0>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80101ca:	4b10      	ldr	r3, [pc, #64]	; (801020c <tcp_timewait_input+0xe0>)
 80101cc:	881b      	ldrh	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00c      	beq.n	80101ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	8b5b      	ldrh	r3, [r3, #26]
 80101d6:	f043 0302 	orr.w	r3, r3, #2
 80101da:	b29a      	uxth	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f002 f8a5 	bl	8012330 <tcp_output>
  }
  return;
 80101e6:	e001      	b.n	80101ec <tcp_timewait_input+0xc0>
    return;
 80101e8:	bf00      	nop
 80101ea:	e000      	b.n	80101ee <tcp_timewait_input+0xc2>
  return;
 80101ec:	bf00      	nop
}
 80101ee:	3708      	adds	r7, #8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20008ea0 	.word	0x20008ea0
 80101f8:	08019b9c 	.word	0x08019b9c
 80101fc:	08019db4 	.word	0x08019db4
 8010200:	08019be8 	.word	0x08019be8
 8010204:	20008e94 	.word	0x20008e94
 8010208:	20008e98 	.word	0x20008e98
 801020c:	20008e9e 	.word	0x20008e9e
 8010210:	20008e84 	.word	0x20008e84
 8010214:	200058fc 	.word	0x200058fc
 8010218:	20005900 	.word	0x20005900
 801021c:	20008e5c 	.word	0x20008e5c

08010220 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b08d      	sub	sp, #52	; 0x34
 8010224:	af04      	add	r7, sp, #16
 8010226:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010228:	2300      	movs	r3, #0
 801022a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801022c:	2300      	movs	r3, #0
 801022e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d106      	bne.n	8010244 <tcp_process+0x24>
 8010236:	4b9d      	ldr	r3, [pc, #628]	; (80104ac <tcp_process+0x28c>)
 8010238:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801023c:	499c      	ldr	r1, [pc, #624]	; (80104b0 <tcp_process+0x290>)
 801023e:	489d      	ldr	r0, [pc, #628]	; (80104b4 <tcp_process+0x294>)
 8010240:	f007 fac0 	bl	80177c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010244:	4b9c      	ldr	r3, [pc, #624]	; (80104b8 <tcp_process+0x298>)
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	f003 0304 	and.w	r3, r3, #4
 801024c:	2b00      	cmp	r3, #0
 801024e:	d04e      	beq.n	80102ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	7d1b      	ldrb	r3, [r3, #20]
 8010254:	2b02      	cmp	r3, #2
 8010256:	d108      	bne.n	801026a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801025c:	4b97      	ldr	r3, [pc, #604]	; (80104bc <tcp_process+0x29c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	429a      	cmp	r2, r3
 8010262:	d123      	bne.n	80102ac <tcp_process+0x8c>
        acceptable = 1;
 8010264:	2301      	movs	r3, #1
 8010266:	76fb      	strb	r3, [r7, #27]
 8010268:	e020      	b.n	80102ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801026e:	4b94      	ldr	r3, [pc, #592]	; (80104c0 <tcp_process+0x2a0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	429a      	cmp	r2, r3
 8010274:	d102      	bne.n	801027c <tcp_process+0x5c>
        acceptable = 1;
 8010276:	2301      	movs	r3, #1
 8010278:	76fb      	strb	r3, [r7, #27]
 801027a:	e017      	b.n	80102ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801027c:	4b90      	ldr	r3, [pc, #576]	; (80104c0 <tcp_process+0x2a0>)
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	2b00      	cmp	r3, #0
 8010288:	db10      	blt.n	80102ac <tcp_process+0x8c>
 801028a:	4b8d      	ldr	r3, [pc, #564]	; (80104c0 <tcp_process+0x2a0>)
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010292:	6879      	ldr	r1, [r7, #4]
 8010294:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010296:	440b      	add	r3, r1
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	2b00      	cmp	r3, #0
 801029c:	dc06      	bgt.n	80102ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	8b5b      	ldrh	r3, [r3, #26]
 80102a2:	f043 0302 	orr.w	r3, r3, #2
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80102ac:	7efb      	ldrb	r3, [r7, #27]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d01b      	beq.n	80102ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	7d1b      	ldrb	r3, [r3, #20]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d106      	bne.n	80102c8 <tcp_process+0xa8>
 80102ba:	4b7c      	ldr	r3, [pc, #496]	; (80104ac <tcp_process+0x28c>)
 80102bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80102c0:	4980      	ldr	r1, [pc, #512]	; (80104c4 <tcp_process+0x2a4>)
 80102c2:	487c      	ldr	r0, [pc, #496]	; (80104b4 <tcp_process+0x294>)
 80102c4:	f007 fa7e 	bl	80177c4 <iprintf>
      recv_flags |= TF_RESET;
 80102c8:	4b7f      	ldr	r3, [pc, #508]	; (80104c8 <tcp_process+0x2a8>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	f043 0308 	orr.w	r3, r3, #8
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	4b7d      	ldr	r3, [pc, #500]	; (80104c8 <tcp_process+0x2a8>)
 80102d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	8b5b      	ldrh	r3, [r3, #26]
 80102da:	f023 0301 	bic.w	r3, r3, #1
 80102de:	b29a      	uxth	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80102e4:	f06f 030d 	mvn.w	r3, #13
 80102e8:	e37a      	b.n	80109e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e378      	b.n	80109e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80102ee:	4b72      	ldr	r3, [pc, #456]	; (80104b8 <tcp_process+0x298>)
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	f003 0302 	and.w	r3, r3, #2
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d010      	beq.n	801031c <tcp_process+0xfc>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	7d1b      	ldrb	r3, [r3, #20]
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d00c      	beq.n	801031c <tcp_process+0xfc>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	7d1b      	ldrb	r3, [r3, #20]
 8010306:	2b03      	cmp	r3, #3
 8010308:	d008      	beq.n	801031c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	8b5b      	ldrh	r3, [r3, #26]
 801030e:	f043 0302 	orr.w	r3, r3, #2
 8010312:	b29a      	uxth	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	e361      	b.n	80109e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	8b5b      	ldrh	r3, [r3, #26]
 8010320:	f003 0310 	and.w	r3, r3, #16
 8010324:	2b00      	cmp	r3, #0
 8010326:	d103      	bne.n	8010330 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010328:	4b68      	ldr	r3, [pc, #416]	; (80104cc <tcp_process+0x2ac>)
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f001 fc2f 	bl	8011ba4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	7d1b      	ldrb	r3, [r3, #20]
 801034a:	3b02      	subs	r3, #2
 801034c:	2b07      	cmp	r3, #7
 801034e:	f200 8337 	bhi.w	80109c0 <tcp_process+0x7a0>
 8010352:	a201      	add	r2, pc, #4	; (adr r2, 8010358 <tcp_process+0x138>)
 8010354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010358:	08010379 	.word	0x08010379
 801035c:	080105a9 	.word	0x080105a9
 8010360:	08010721 	.word	0x08010721
 8010364:	0801074b 	.word	0x0801074b
 8010368:	0801086f 	.word	0x0801086f
 801036c:	08010721 	.word	0x08010721
 8010370:	080108fb 	.word	0x080108fb
 8010374:	0801098b 	.word	0x0801098b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010378:	4b4f      	ldr	r3, [pc, #316]	; (80104b8 <tcp_process+0x298>)
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	f003 0310 	and.w	r3, r3, #16
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 80e4 	beq.w	801054e <tcp_process+0x32e>
 8010386:	4b4c      	ldr	r3, [pc, #304]	; (80104b8 <tcp_process+0x298>)
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	f003 0302 	and.w	r3, r3, #2
 801038e:	2b00      	cmp	r3, #0
 8010390:	f000 80dd 	beq.w	801054e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	4b48      	ldr	r3, [pc, #288]	; (80104bc <tcp_process+0x29c>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	429a      	cmp	r2, r3
 80103a0:	f040 80d5 	bne.w	801054e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80103a4:	4b46      	ldr	r3, [pc, #280]	; (80104c0 <tcp_process+0x2a0>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80103b6:	4b41      	ldr	r3, [pc, #260]	; (80104bc <tcp_process+0x29c>)
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80103be:	4b44      	ldr	r3, [pc, #272]	; (80104d0 <tcp_process+0x2b0>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	89db      	ldrh	r3, [r3, #14]
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80103d8:	4b39      	ldr	r3, [pc, #228]	; (80104c0 <tcp_process+0x2a0>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	1e5a      	subs	r2, r3, #1
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2204      	movs	r2, #4
 80103e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	3304      	adds	r3, #4
 80103f0:	4618      	mov	r0, r3
 80103f2:	f004 feab 	bl	801514c <ip4_route>
 80103f6:	4601      	mov	r1, r0
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	3304      	adds	r3, #4
 80103fc:	461a      	mov	r2, r3
 80103fe:	4620      	mov	r0, r4
 8010400:	f7ff f88c 	bl	800f51c <tcp_eff_send_mss_netif>
 8010404:	4603      	mov	r3, r0
 8010406:	461a      	mov	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010410:	009a      	lsls	r2, r3, #2
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010416:	005b      	lsls	r3, r3, #1
 8010418:	f241 111c 	movw	r1, #4380	; 0x111c
 801041c:	428b      	cmp	r3, r1
 801041e:	bf38      	it	cc
 8010420:	460b      	movcc	r3, r1
 8010422:	429a      	cmp	r2, r3
 8010424:	d204      	bcs.n	8010430 <tcp_process+0x210>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	b29b      	uxth	r3, r3
 801042e:	e00d      	b.n	801044c <tcp_process+0x22c>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	f241 121c 	movw	r2, #4380	; 0x111c
 801043a:	4293      	cmp	r3, r2
 801043c:	d904      	bls.n	8010448 <tcp_process+0x228>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	b29b      	uxth	r3, r3
 8010446:	e001      	b.n	801044c <tcp_process+0x22c>
 8010448:	f241 131c 	movw	r3, #4380	; 0x111c
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010458:	2b00      	cmp	r3, #0
 801045a:	d106      	bne.n	801046a <tcp_process+0x24a>
 801045c:	4b13      	ldr	r3, [pc, #76]	; (80104ac <tcp_process+0x28c>)
 801045e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010462:	491c      	ldr	r1, [pc, #112]	; (80104d4 <tcp_process+0x2b4>)
 8010464:	4813      	ldr	r0, [pc, #76]	; (80104b4 <tcp_process+0x294>)
 8010466:	f007 f9ad 	bl	80177c4 <iprintf>
        --pcb->snd_queuelen;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010470:	3b01      	subs	r3, #1
 8010472:	b29a      	uxth	r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801047e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d12a      	bne.n	80104dc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801048a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d106      	bne.n	80104a0 <tcp_process+0x280>
 8010492:	4b06      	ldr	r3, [pc, #24]	; (80104ac <tcp_process+0x28c>)
 8010494:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010498:	490f      	ldr	r1, [pc, #60]	; (80104d8 <tcp_process+0x2b8>)
 801049a:	4806      	ldr	r0, [pc, #24]	; (80104b4 <tcp_process+0x294>)
 801049c:	f007 f992 	bl	80177c4 <iprintf>
          pcb->unsent = rseg->next;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80104a8:	e01c      	b.n	80104e4 <tcp_process+0x2c4>
 80104aa:	bf00      	nop
 80104ac:	08019b9c 	.word	0x08019b9c
 80104b0:	08019dd4 	.word	0x08019dd4
 80104b4:	08019be8 	.word	0x08019be8
 80104b8:	20008ea0 	.word	0x20008ea0
 80104bc:	20008e98 	.word	0x20008e98
 80104c0:	20008e94 	.word	0x20008e94
 80104c4:	08019df0 	.word	0x08019df0
 80104c8:	20008ea1 	.word	0x20008ea1
 80104cc:	20008e5c 	.word	0x20008e5c
 80104d0:	20008e84 	.word	0x20008e84
 80104d4:	08019e10 	.word	0x08019e10
 80104d8:	08019e28 	.word	0x08019e28
        } else {
          pcb->unacked = rseg->next;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80104e4:	69f8      	ldr	r0, [r7, #28]
 80104e6:	f7fe fd22 	bl	800ef2e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d104      	bne.n	80104fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104f8:	861a      	strh	r2, [r3, #48]	; 0x30
 80104fa:	e006      	b.n	801050a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010510:	2b00      	cmp	r3, #0
 8010512:	d00a      	beq.n	801052a <tcp_process+0x30a>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801051a:	687a      	ldr	r2, [r7, #4]
 801051c:	6910      	ldr	r0, [r2, #16]
 801051e:	2200      	movs	r2, #0
 8010520:	6879      	ldr	r1, [r7, #4]
 8010522:	4798      	blx	r3
 8010524:	4603      	mov	r3, r0
 8010526:	76bb      	strb	r3, [r7, #26]
 8010528:	e001      	b.n	801052e <tcp_process+0x30e>
 801052a:	2300      	movs	r3, #0
 801052c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801052e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010532:	f113 0f0d 	cmn.w	r3, #13
 8010536:	d102      	bne.n	801053e <tcp_process+0x31e>
          return ERR_ABRT;
 8010538:	f06f 030c 	mvn.w	r3, #12
 801053c:	e250      	b.n	80109e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	8b5b      	ldrh	r3, [r3, #26]
 8010542:	f043 0302 	orr.w	r3, r3, #2
 8010546:	b29a      	uxth	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801054c:	e23a      	b.n	80109c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801054e:	4b98      	ldr	r3, [pc, #608]	; (80107b0 <tcp_process+0x590>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	f003 0310 	and.w	r3, r3, #16
 8010556:	2b00      	cmp	r3, #0
 8010558:	f000 8234 	beq.w	80109c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801055c:	4b95      	ldr	r3, [pc, #596]	; (80107b4 <tcp_process+0x594>)
 801055e:	6819      	ldr	r1, [r3, #0]
 8010560:	4b95      	ldr	r3, [pc, #596]	; (80107b8 <tcp_process+0x598>)
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	461a      	mov	r2, r3
 8010566:	4b95      	ldr	r3, [pc, #596]	; (80107bc <tcp_process+0x59c>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801056c:	4b94      	ldr	r3, [pc, #592]	; (80107c0 <tcp_process+0x5a0>)
 801056e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010570:	885b      	ldrh	r3, [r3, #2]
 8010572:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010574:	4a92      	ldr	r2, [pc, #584]	; (80107c0 <tcp_process+0x5a0>)
 8010576:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010578:	8812      	ldrh	r2, [r2, #0]
 801057a:	b292      	uxth	r2, r2
 801057c:	9202      	str	r2, [sp, #8]
 801057e:	9301      	str	r3, [sp, #4]
 8010580:	4b90      	ldr	r3, [pc, #576]	; (80107c4 <tcp_process+0x5a4>)
 8010582:	9300      	str	r3, [sp, #0]
 8010584:	4b90      	ldr	r3, [pc, #576]	; (80107c8 <tcp_process+0x5a8>)
 8010586:	4602      	mov	r2, r0
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f002 fc85 	bl	8012e98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010594:	2b05      	cmp	r3, #5
 8010596:	f200 8215 	bhi.w	80109c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f002 fa4f 	bl	8012a44 <tcp_rexmit_rto>
      break;
 80105a6:	e20d      	b.n	80109c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80105a8:	4b81      	ldr	r3, [pc, #516]	; (80107b0 <tcp_process+0x590>)
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	f003 0310 	and.w	r3, r3, #16
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f000 80a1 	beq.w	80106f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105b6:	4b7f      	ldr	r3, [pc, #508]	; (80107b4 <tcp_process+0x594>)
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105be:	1ad3      	subs	r3, r2, r3
 80105c0:	3b01      	subs	r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	db7e      	blt.n	80106c4 <tcp_process+0x4a4>
 80105c6:	4b7b      	ldr	r3, [pc, #492]	; (80107b4 <tcp_process+0x594>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	dc77      	bgt.n	80106c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2204      	movs	r2, #4
 80105d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d102      	bne.n	80105e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80105e2:	23fa      	movs	r3, #250	; 0xfa
 80105e4:	76bb      	strb	r3, [r7, #26]
 80105e6:	e01d      	b.n	8010624 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <tcp_process+0x3e0>
 80105f2:	4b76      	ldr	r3, [pc, #472]	; (80107cc <tcp_process+0x5ac>)
 80105f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80105f8:	4975      	ldr	r1, [pc, #468]	; (80107d0 <tcp_process+0x5b0>)
 80105fa:	4876      	ldr	r0, [pc, #472]	; (80107d4 <tcp_process+0x5b4>)
 80105fc:	f007 f8e2 	bl	80177c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010604:	699b      	ldr	r3, [r3, #24]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00a      	beq.n	8010620 <tcp_process+0x400>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801060e:	699b      	ldr	r3, [r3, #24]
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	6910      	ldr	r0, [r2, #16]
 8010614:	2200      	movs	r2, #0
 8010616:	6879      	ldr	r1, [r7, #4]
 8010618:	4798      	blx	r3
 801061a:	4603      	mov	r3, r0
 801061c:	76bb      	strb	r3, [r7, #26]
 801061e:	e001      	b.n	8010624 <tcp_process+0x404>
 8010620:	23f0      	movs	r3, #240	; 0xf0
 8010622:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010624:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00a      	beq.n	8010642 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801062c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010630:	f113 0f0d 	cmn.w	r3, #13
 8010634:	d002      	beq.n	801063c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f7fd ff8e 	bl	800e558 <tcp_abort>
            }
            return ERR_ABRT;
 801063c:	f06f 030c 	mvn.w	r3, #12
 8010640:	e1ce      	b.n	80109e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 fae0 	bl	8010c08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010648:	4b63      	ldr	r3, [pc, #396]	; (80107d8 <tcp_process+0x5b8>)
 801064a:	881b      	ldrh	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d005      	beq.n	801065c <tcp_process+0x43c>
            recv_acked--;
 8010650:	4b61      	ldr	r3, [pc, #388]	; (80107d8 <tcp_process+0x5b8>)
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	3b01      	subs	r3, #1
 8010656:	b29a      	uxth	r2, r3
 8010658:	4b5f      	ldr	r3, [pc, #380]	; (80107d8 <tcp_process+0x5b8>)
 801065a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010660:	009a      	lsls	r2, r3, #2
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010666:	005b      	lsls	r3, r3, #1
 8010668:	f241 111c 	movw	r1, #4380	; 0x111c
 801066c:	428b      	cmp	r3, r1
 801066e:	bf38      	it	cc
 8010670:	460b      	movcc	r3, r1
 8010672:	429a      	cmp	r2, r3
 8010674:	d204      	bcs.n	8010680 <tcp_process+0x460>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801067a:	009b      	lsls	r3, r3, #2
 801067c:	b29b      	uxth	r3, r3
 801067e:	e00d      	b.n	801069c <tcp_process+0x47c>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	f241 121c 	movw	r2, #4380	; 0x111c
 801068a:	4293      	cmp	r3, r2
 801068c:	d904      	bls.n	8010698 <tcp_process+0x478>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	b29b      	uxth	r3, r3
 8010696:	e001      	b.n	801069c <tcp_process+0x47c>
 8010698:	f241 131c 	movw	r3, #4380	; 0x111c
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80106a2:	4b4e      	ldr	r3, [pc, #312]	; (80107dc <tcp_process+0x5bc>)
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	f003 0320 	and.w	r3, r3, #32
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d037      	beq.n	801071e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	8b5b      	ldrh	r3, [r3, #26]
 80106b2:	f043 0302 	orr.w	r3, r3, #2
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2207      	movs	r2, #7
 80106c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80106c2:	e02c      	b.n	801071e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106c4:	4b3b      	ldr	r3, [pc, #236]	; (80107b4 <tcp_process+0x594>)
 80106c6:	6819      	ldr	r1, [r3, #0]
 80106c8:	4b3b      	ldr	r3, [pc, #236]	; (80107b8 <tcp_process+0x598>)
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	461a      	mov	r2, r3
 80106ce:	4b3b      	ldr	r3, [pc, #236]	; (80107bc <tcp_process+0x59c>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106d4:	4b3a      	ldr	r3, [pc, #232]	; (80107c0 <tcp_process+0x5a0>)
 80106d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106d8:	885b      	ldrh	r3, [r3, #2]
 80106da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106dc:	4a38      	ldr	r2, [pc, #224]	; (80107c0 <tcp_process+0x5a0>)
 80106de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106e0:	8812      	ldrh	r2, [r2, #0]
 80106e2:	b292      	uxth	r2, r2
 80106e4:	9202      	str	r2, [sp, #8]
 80106e6:	9301      	str	r3, [sp, #4]
 80106e8:	4b36      	ldr	r3, [pc, #216]	; (80107c4 <tcp_process+0x5a4>)
 80106ea:	9300      	str	r3, [sp, #0]
 80106ec:	4b36      	ldr	r3, [pc, #216]	; (80107c8 <tcp_process+0x5a8>)
 80106ee:	4602      	mov	r2, r0
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f002 fbd1 	bl	8012e98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80106f6:	e167      	b.n	80109c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80106f8:	4b2d      	ldr	r3, [pc, #180]	; (80107b0 <tcp_process+0x590>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 0302 	and.w	r3, r3, #2
 8010700:	2b00      	cmp	r3, #0
 8010702:	f000 8161 	beq.w	80109c8 <tcp_process+0x7a8>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070a:	1e5a      	subs	r2, r3, #1
 801070c:	4b2b      	ldr	r3, [pc, #172]	; (80107bc <tcp_process+0x59c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	f040 8159 	bne.w	80109c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f002 f9b6 	bl	8012a88 <tcp_rexmit>
      break;
 801071c:	e154      	b.n	80109c8 <tcp_process+0x7a8>
 801071e:	e153      	b.n	80109c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 fa71 	bl	8010c08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010726:	4b2d      	ldr	r3, [pc, #180]	; (80107dc <tcp_process+0x5bc>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f003 0320 	and.w	r3, r3, #32
 801072e:	2b00      	cmp	r3, #0
 8010730:	f000 814c 	beq.w	80109cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	8b5b      	ldrh	r3, [r3, #26]
 8010738:	f043 0302 	orr.w	r3, r3, #2
 801073c:	b29a      	uxth	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2207      	movs	r2, #7
 8010746:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010748:	e140      	b.n	80109cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fa5c 	bl	8010c08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010750:	4b22      	ldr	r3, [pc, #136]	; (80107dc <tcp_process+0x5bc>)
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	f003 0320 	and.w	r3, r3, #32
 8010758:	2b00      	cmp	r3, #0
 801075a:	d071      	beq.n	8010840 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801075c:	4b14      	ldr	r3, [pc, #80]	; (80107b0 <tcp_process+0x590>)
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 0310 	and.w	r3, r3, #16
 8010764:	2b00      	cmp	r3, #0
 8010766:	d060      	beq.n	801082a <tcp_process+0x60a>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801076c:	4b11      	ldr	r3, [pc, #68]	; (80107b4 <tcp_process+0x594>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d15a      	bne.n	801082a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010778:	2b00      	cmp	r3, #0
 801077a:	d156      	bne.n	801082a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	8b5b      	ldrh	r3, [r3, #26]
 8010780:	f043 0302 	orr.w	r3, r3, #2
 8010784:	b29a      	uxth	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7fe fdbc 	bl	800f308 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010790:	4b13      	ldr	r3, [pc, #76]	; (80107e0 <tcp_process+0x5c0>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	429a      	cmp	r2, r3
 8010798:	d105      	bne.n	80107a6 <tcp_process+0x586>
 801079a:	4b11      	ldr	r3, [pc, #68]	; (80107e0 <tcp_process+0x5c0>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	4a0f      	ldr	r2, [pc, #60]	; (80107e0 <tcp_process+0x5c0>)
 80107a2:	6013      	str	r3, [r2, #0]
 80107a4:	e02e      	b.n	8010804 <tcp_process+0x5e4>
 80107a6:	4b0e      	ldr	r3, [pc, #56]	; (80107e0 <tcp_process+0x5c0>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	e027      	b.n	80107fe <tcp_process+0x5de>
 80107ae:	bf00      	nop
 80107b0:	20008ea0 	.word	0x20008ea0
 80107b4:	20008e98 	.word	0x20008e98
 80107b8:	20008e9e 	.word	0x20008e9e
 80107bc:	20008e94 	.word	0x20008e94
 80107c0:	20008e84 	.word	0x20008e84
 80107c4:	200058fc 	.word	0x200058fc
 80107c8:	20005900 	.word	0x20005900
 80107cc:	08019b9c 	.word	0x08019b9c
 80107d0:	08019e3c 	.word	0x08019e3c
 80107d4:	08019be8 	.word	0x08019be8
 80107d8:	20008e9c 	.word	0x20008e9c
 80107dc:	20008ea1 	.word	0x20008ea1
 80107e0:	20008e68 	.word	0x20008e68
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d104      	bne.n	80107f8 <tcp_process+0x5d8>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	68da      	ldr	r2, [r3, #12]
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	60da      	str	r2, [r3, #12]
 80107f6:	e005      	b.n	8010804 <tcp_process+0x5e4>
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	617b      	str	r3, [r7, #20]
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1ef      	bne.n	80107e4 <tcp_process+0x5c4>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2200      	movs	r2, #0
 8010808:	60da      	str	r2, [r3, #12]
 801080a:	4b77      	ldr	r3, [pc, #476]	; (80109e8 <tcp_process+0x7c8>)
 801080c:	2201      	movs	r2, #1
 801080e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	220a      	movs	r2, #10
 8010814:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010816:	4b75      	ldr	r3, [pc, #468]	; (80109ec <tcp_process+0x7cc>)
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	60da      	str	r2, [r3, #12]
 801081e:	4a73      	ldr	r2, [pc, #460]	; (80109ec <tcp_process+0x7cc>)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6013      	str	r3, [r2, #0]
 8010824:	f002 fcfa 	bl	801321c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010828:	e0d2      	b.n	80109d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	8b5b      	ldrh	r3, [r3, #26]
 801082e:	f043 0302 	orr.w	r3, r3, #2
 8010832:	b29a      	uxth	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2208      	movs	r2, #8
 801083c:	751a      	strb	r2, [r3, #20]
      break;
 801083e:	e0c7      	b.n	80109d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010840:	4b6b      	ldr	r3, [pc, #428]	; (80109f0 <tcp_process+0x7d0>)
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	f003 0310 	and.w	r3, r3, #16
 8010848:	2b00      	cmp	r3, #0
 801084a:	f000 80c1 	beq.w	80109d0 <tcp_process+0x7b0>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010852:	4b68      	ldr	r3, [pc, #416]	; (80109f4 <tcp_process+0x7d4>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	429a      	cmp	r2, r3
 8010858:	f040 80ba 	bne.w	80109d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010860:	2b00      	cmp	r3, #0
 8010862:	f040 80b5 	bne.w	80109d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2206      	movs	r2, #6
 801086a:	751a      	strb	r2, [r3, #20]
      break;
 801086c:	e0b0      	b.n	80109d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 f9ca 	bl	8010c08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010874:	4b60      	ldr	r3, [pc, #384]	; (80109f8 <tcp_process+0x7d8>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f003 0320 	and.w	r3, r3, #32
 801087c:	2b00      	cmp	r3, #0
 801087e:	f000 80a9 	beq.w	80109d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	8b5b      	ldrh	r3, [r3, #26]
 8010886:	f043 0302 	orr.w	r3, r3, #2
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f7fe fd39 	bl	800f308 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010896:	4b59      	ldr	r3, [pc, #356]	; (80109fc <tcp_process+0x7dc>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	429a      	cmp	r2, r3
 801089e:	d105      	bne.n	80108ac <tcp_process+0x68c>
 80108a0:	4b56      	ldr	r3, [pc, #344]	; (80109fc <tcp_process+0x7dc>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	4a55      	ldr	r2, [pc, #340]	; (80109fc <tcp_process+0x7dc>)
 80108a8:	6013      	str	r3, [r2, #0]
 80108aa:	e013      	b.n	80108d4 <tcp_process+0x6b4>
 80108ac:	4b53      	ldr	r3, [pc, #332]	; (80109fc <tcp_process+0x7dc>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	613b      	str	r3, [r7, #16]
 80108b2:	e00c      	b.n	80108ce <tcp_process+0x6ae>
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d104      	bne.n	80108c8 <tcp_process+0x6a8>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	68da      	ldr	r2, [r3, #12]
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	60da      	str	r2, [r3, #12]
 80108c6:	e005      	b.n	80108d4 <tcp_process+0x6b4>
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	613b      	str	r3, [r7, #16]
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1ef      	bne.n	80108b4 <tcp_process+0x694>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	60da      	str	r2, [r3, #12]
 80108da:	4b43      	ldr	r3, [pc, #268]	; (80109e8 <tcp_process+0x7c8>)
 80108dc:	2201      	movs	r2, #1
 80108de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	220a      	movs	r2, #10
 80108e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80108e6:	4b41      	ldr	r3, [pc, #260]	; (80109ec <tcp_process+0x7cc>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	60da      	str	r2, [r3, #12]
 80108ee:	4a3f      	ldr	r2, [pc, #252]	; (80109ec <tcp_process+0x7cc>)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6013      	str	r3, [r2, #0]
 80108f4:	f002 fc92 	bl	801321c <tcp_timer_needed>
      }
      break;
 80108f8:	e06c      	b.n	80109d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f984 	bl	8010c08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010900:	4b3b      	ldr	r3, [pc, #236]	; (80109f0 <tcp_process+0x7d0>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	f003 0310 	and.w	r3, r3, #16
 8010908:	2b00      	cmp	r3, #0
 801090a:	d065      	beq.n	80109d8 <tcp_process+0x7b8>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010910:	4b38      	ldr	r3, [pc, #224]	; (80109f4 <tcp_process+0x7d4>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	429a      	cmp	r2, r3
 8010916:	d15f      	bne.n	80109d8 <tcp_process+0x7b8>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801091c:	2b00      	cmp	r3, #0
 801091e:	d15b      	bne.n	80109d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7fe fcf1 	bl	800f308 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010926:	4b35      	ldr	r3, [pc, #212]	; (80109fc <tcp_process+0x7dc>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	429a      	cmp	r2, r3
 801092e:	d105      	bne.n	801093c <tcp_process+0x71c>
 8010930:	4b32      	ldr	r3, [pc, #200]	; (80109fc <tcp_process+0x7dc>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	68db      	ldr	r3, [r3, #12]
 8010936:	4a31      	ldr	r2, [pc, #196]	; (80109fc <tcp_process+0x7dc>)
 8010938:	6013      	str	r3, [r2, #0]
 801093a:	e013      	b.n	8010964 <tcp_process+0x744>
 801093c:	4b2f      	ldr	r3, [pc, #188]	; (80109fc <tcp_process+0x7dc>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	60fb      	str	r3, [r7, #12]
 8010942:	e00c      	b.n	801095e <tcp_process+0x73e>
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	429a      	cmp	r2, r3
 801094c:	d104      	bne.n	8010958 <tcp_process+0x738>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	68da      	ldr	r2, [r3, #12]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	60da      	str	r2, [r3, #12]
 8010956:	e005      	b.n	8010964 <tcp_process+0x744>
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	60fb      	str	r3, [r7, #12]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d1ef      	bne.n	8010944 <tcp_process+0x724>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	60da      	str	r2, [r3, #12]
 801096a:	4b1f      	ldr	r3, [pc, #124]	; (80109e8 <tcp_process+0x7c8>)
 801096c:	2201      	movs	r2, #1
 801096e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	220a      	movs	r2, #10
 8010974:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010976:	4b1d      	ldr	r3, [pc, #116]	; (80109ec <tcp_process+0x7cc>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	60da      	str	r2, [r3, #12]
 801097e:	4a1b      	ldr	r2, [pc, #108]	; (80109ec <tcp_process+0x7cc>)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6013      	str	r3, [r2, #0]
 8010984:	f002 fc4a 	bl	801321c <tcp_timer_needed>
      }
      break;
 8010988:	e026      	b.n	80109d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f000 f93c 	bl	8010c08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010990:	4b17      	ldr	r3, [pc, #92]	; (80109f0 <tcp_process+0x7d0>)
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	f003 0310 	and.w	r3, r3, #16
 8010998:	2b00      	cmp	r3, #0
 801099a:	d01f      	beq.n	80109dc <tcp_process+0x7bc>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109a0:	4b14      	ldr	r3, [pc, #80]	; (80109f4 <tcp_process+0x7d4>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d119      	bne.n	80109dc <tcp_process+0x7bc>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d115      	bne.n	80109dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80109b0:	4b11      	ldr	r3, [pc, #68]	; (80109f8 <tcp_process+0x7d8>)
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	f043 0310 	orr.w	r3, r3, #16
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <tcp_process+0x7d8>)
 80109bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80109be:	e00d      	b.n	80109dc <tcp_process+0x7bc>
    default:
      break;
 80109c0:	bf00      	nop
 80109c2:	e00c      	b.n	80109de <tcp_process+0x7be>
      break;
 80109c4:	bf00      	nop
 80109c6:	e00a      	b.n	80109de <tcp_process+0x7be>
      break;
 80109c8:	bf00      	nop
 80109ca:	e008      	b.n	80109de <tcp_process+0x7be>
      break;
 80109cc:	bf00      	nop
 80109ce:	e006      	b.n	80109de <tcp_process+0x7be>
      break;
 80109d0:	bf00      	nop
 80109d2:	e004      	b.n	80109de <tcp_process+0x7be>
      break;
 80109d4:	bf00      	nop
 80109d6:	e002      	b.n	80109de <tcp_process+0x7be>
      break;
 80109d8:	bf00      	nop
 80109da:	e000      	b.n	80109de <tcp_process+0x7be>
      break;
 80109dc:	bf00      	nop
  }
  return ERR_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3724      	adds	r7, #36	; 0x24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd90      	pop	{r4, r7, pc}
 80109e8:	20008e70 	.word	0x20008e70
 80109ec:	20008e6c 	.word	0x20008e6c
 80109f0:	20008ea0 	.word	0x20008ea0
 80109f4:	20008e98 	.word	0x20008e98
 80109f8:	20008ea1 	.word	0x20008ea1
 80109fc:	20008e68 	.word	0x20008e68

08010a00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010a00:	b590      	push	{r4, r7, lr}
 8010a02:	b085      	sub	sp, #20
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d106      	bne.n	8010a1e <tcp_oos_insert_segment+0x1e>
 8010a10:	4b3b      	ldr	r3, [pc, #236]	; (8010b00 <tcp_oos_insert_segment+0x100>)
 8010a12:	f240 421f 	movw	r2, #1055	; 0x41f
 8010a16:	493b      	ldr	r1, [pc, #236]	; (8010b04 <tcp_oos_insert_segment+0x104>)
 8010a18:	483b      	ldr	r0, [pc, #236]	; (8010b08 <tcp_oos_insert_segment+0x108>)
 8010a1a:	f006 fed3 	bl	80177c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	899b      	ldrh	r3, [r3, #12]
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fb fc0e 	bl	800c248 <lwip_htons>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	f003 0301 	and.w	r3, r3, #1
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d028      	beq.n	8010a8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010a38:	6838      	ldr	r0, [r7, #0]
 8010a3a:	f7fe fa63 	bl	800ef04 <tcp_segs_free>
    next = NULL;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	603b      	str	r3, [r7, #0]
 8010a42:	e056      	b.n	8010af2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	899b      	ldrh	r3, [r3, #12]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fb fbfb 	bl	800c248 <lwip_htons>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 0301 	and.w	r3, r3, #1
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00d      	beq.n	8010a7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	899b      	ldrh	r3, [r3, #12]
 8010a64:	b29c      	uxth	r4, r3
 8010a66:	2001      	movs	r0, #1
 8010a68:	f7fb fbee 	bl	800c248 <lwip_htons>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	461a      	mov	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	4322      	orrs	r2, r4
 8010a76:	b292      	uxth	r2, r2
 8010a78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	f7fe fa52 	bl	800ef2e <tcp_seg_free>
    while (next &&
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00e      	beq.n	8010aae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	891b      	ldrh	r3, [r3, #8]
 8010a94:	461a      	mov	r2, r3
 8010a96:	4b1d      	ldr	r3, [pc, #116]	; (8010b0c <tcp_oos_insert_segment+0x10c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	441a      	add	r2, r3
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	8909      	ldrh	r1, [r1, #8]
 8010aa6:	440b      	add	r3, r1
 8010aa8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	daca      	bge.n	8010a44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d01e      	beq.n	8010af2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	891b      	ldrh	r3, [r3, #8]
 8010ab8:	461a      	mov	r2, r3
 8010aba:	4b14      	ldr	r3, [pc, #80]	; (8010b0c <tcp_oos_insert_segment+0x10c>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	441a      	add	r2, r3
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dd12      	ble.n	8010af2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	4b0d      	ldr	r3, [pc, #52]	; (8010b0c <tcp_oos_insert_segment+0x10c>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	685a      	ldr	r2, [r3, #4]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	891b      	ldrh	r3, [r3, #8]
 8010aea:	4619      	mov	r1, r3
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7fc fd83 	bl	800d5f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	683a      	ldr	r2, [r7, #0]
 8010af6:	601a      	str	r2, [r3, #0]
}
 8010af8:	bf00      	nop
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd90      	pop	{r4, r7, pc}
 8010b00:	08019b9c 	.word	0x08019b9c
 8010b04:	08019e5c 	.word	0x08019e5c
 8010b08:	08019be8 	.word	0x08019be8
 8010b0c:	20008e94 	.word	0x20008e94

08010b10 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010b10:	b5b0      	push	{r4, r5, r7, lr}
 8010b12:	b086      	sub	sp, #24
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	607a      	str	r2, [r7, #4]
 8010b1c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010b1e:	e03e      	b.n	8010b9e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fc ff70 	bl	800da14 <pbuf_clen>
 8010b34:	4603      	mov	r3, r0
 8010b36:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b3e:	8a7a      	ldrh	r2, [r7, #18]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d906      	bls.n	8010b52 <tcp_free_acked_segments+0x42>
 8010b44:	4b2a      	ldr	r3, [pc, #168]	; (8010bf0 <tcp_free_acked_segments+0xe0>)
 8010b46:	f240 4257 	movw	r2, #1111	; 0x457
 8010b4a:	492a      	ldr	r1, [pc, #168]	; (8010bf4 <tcp_free_acked_segments+0xe4>)
 8010b4c:	482a      	ldr	r0, [pc, #168]	; (8010bf8 <tcp_free_acked_segments+0xe8>)
 8010b4e:	f006 fe39 	bl	80177c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010b58:	8a7b      	ldrh	r3, [r7, #18]
 8010b5a:	1ad3      	subs	r3, r2, r3
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	891a      	ldrh	r2, [r3, #8]
 8010b68:	4b24      	ldr	r3, [pc, #144]	; (8010bfc <tcp_free_acked_segments+0xec>)
 8010b6a:	881b      	ldrh	r3, [r3, #0]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	4b22      	ldr	r3, [pc, #136]	; (8010bfc <tcp_free_acked_segments+0xec>)
 8010b72:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010b74:	6978      	ldr	r0, [r7, #20]
 8010b76:	f7fe f9da 	bl	800ef2e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d00c      	beq.n	8010b9e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d109      	bne.n	8010b9e <tcp_free_acked_segments+0x8e>
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d106      	bne.n	8010b9e <tcp_free_acked_segments+0x8e>
 8010b90:	4b17      	ldr	r3, [pc, #92]	; (8010bf0 <tcp_free_acked_segments+0xe0>)
 8010b92:	f240 4261 	movw	r2, #1121	; 0x461
 8010b96:	491a      	ldr	r1, [pc, #104]	; (8010c00 <tcp_free_acked_segments+0xf0>)
 8010b98:	4817      	ldr	r0, [pc, #92]	; (8010bf8 <tcp_free_acked_segments+0xe8>)
 8010b9a:	f006 fe13 	bl	80177c4 <iprintf>
  while (seg_list != NULL &&
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d020      	beq.n	8010be6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fb fb61 	bl	800c272 <lwip_htonl>
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	891b      	ldrh	r3, [r3, #8]
 8010bb6:	461d      	mov	r5, r3
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	899b      	ldrh	r3, [r3, #12]
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fb fb41 	bl	800c248 <lwip_htons>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	f003 0303 	and.w	r3, r3, #3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <tcp_free_acked_segments+0xc6>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e000      	b.n	8010bd8 <tcp_free_acked_segments+0xc8>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	442b      	add	r3, r5
 8010bda:	18e2      	adds	r2, r4, r3
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <tcp_free_acked_segments+0xf4>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	dd9c      	ble.n	8010b20 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010be6:	68bb      	ldr	r3, [r7, #8]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bdb0      	pop	{r4, r5, r7, pc}
 8010bf0:	08019b9c 	.word	0x08019b9c
 8010bf4:	08019e84 	.word	0x08019e84
 8010bf8:	08019be8 	.word	0x08019be8
 8010bfc:	20008e9c 	.word	0x20008e9c
 8010c00:	08019eac 	.word	0x08019eac
 8010c04:	20008e98 	.word	0x20008e98

08010c08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010c08:	b5b0      	push	{r4, r5, r7, lr}
 8010c0a:	b094      	sub	sp, #80	; 0x50
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d106      	bne.n	8010c28 <tcp_receive+0x20>
 8010c1a:	4b91      	ldr	r3, [pc, #580]	; (8010e60 <tcp_receive+0x258>)
 8010c1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010c20:	4990      	ldr	r1, [pc, #576]	; (8010e64 <tcp_receive+0x25c>)
 8010c22:	4891      	ldr	r0, [pc, #580]	; (8010e68 <tcp_receive+0x260>)
 8010c24:	f006 fdce 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	7d1b      	ldrb	r3, [r3, #20]
 8010c2c:	2b03      	cmp	r3, #3
 8010c2e:	d806      	bhi.n	8010c3e <tcp_receive+0x36>
 8010c30:	4b8b      	ldr	r3, [pc, #556]	; (8010e60 <tcp_receive+0x258>)
 8010c32:	f240 427c 	movw	r2, #1148	; 0x47c
 8010c36:	498d      	ldr	r1, [pc, #564]	; (8010e6c <tcp_receive+0x264>)
 8010c38:	488b      	ldr	r0, [pc, #556]	; (8010e68 <tcp_receive+0x260>)
 8010c3a:	f006 fdc3 	bl	80177c4 <iprintf>

  if (flags & TCP_ACK) {
 8010c3e:	4b8c      	ldr	r3, [pc, #560]	; (8010e70 <tcp_receive+0x268>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	f003 0310 	and.w	r3, r3, #16
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f000 8264 	beq.w	8011114 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c52:	461a      	mov	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c58:	4413      	add	r3, r2
 8010c5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c60:	4b84      	ldr	r3, [pc, #528]	; (8010e74 <tcp_receive+0x26c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	db1b      	blt.n	8010ca2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c6e:	4b81      	ldr	r3, [pc, #516]	; (8010e74 <tcp_receive+0x26c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d106      	bne.n	8010c84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c7a:	4b7f      	ldr	r3, [pc, #508]	; (8010e78 <tcp_receive+0x270>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	db0e      	blt.n	8010ca2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010c88:	4b7b      	ldr	r3, [pc, #492]	; (8010e78 <tcp_receive+0x270>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d125      	bne.n	8010cdc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010c90:	4b7a      	ldr	r3, [pc, #488]	; (8010e7c <tcp_receive+0x274>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	89db      	ldrh	r3, [r3, #14]
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d91c      	bls.n	8010cdc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010ca2:	4b76      	ldr	r3, [pc, #472]	; (8010e7c <tcp_receive+0x274>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	89db      	ldrh	r3, [r3, #14]
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d205      	bcs.n	8010ccc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010ccc:	4b69      	ldr	r3, [pc, #420]	; (8010e74 <tcp_receive+0x26c>)
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010cd4:	4b68      	ldr	r3, [pc, #416]	; (8010e78 <tcp_receive+0x270>)
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010cdc:	4b66      	ldr	r3, [pc, #408]	; (8010e78 <tcp_receive+0x270>)
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	dc58      	bgt.n	8010d9c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010cea:	4b65      	ldr	r3, [pc, #404]	; (8010e80 <tcp_receive+0x278>)
 8010cec:	881b      	ldrh	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d14b      	bne.n	8010d8a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010cfc:	4413      	add	r3, r2
 8010cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d142      	bne.n	8010d8a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	db3d      	blt.n	8010d8a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d12:	4b59      	ldr	r3, [pc, #356]	; (8010e78 <tcp_receive+0x270>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d137      	bne.n	8010d8a <tcp_receive+0x182>
              found_dupack = 1;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d24:	2bff      	cmp	r3, #255	; 0xff
 8010d26:	d007      	beq.n	8010d38 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d2e:	3301      	adds	r3, #1
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d91b      	bls.n	8010d7a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d4c:	4413      	add	r3, r2
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d30a      	bcc.n	8010d70 <tcp_receive+0x168>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d64:	4413      	add	r3, r2
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d6e:	e004      	b.n	8010d7a <tcp_receive+0x172>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d80:	2b02      	cmp	r3, #2
 8010d82:	d902      	bls.n	8010d8a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f001 feeb 	bl	8012b60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f040 8161 	bne.w	8011054 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2200      	movs	r2, #0
 8010d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010d9a:	e15b      	b.n	8011054 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d9c:	4b36      	ldr	r3, [pc, #216]	; (8010e78 <tcp_receive+0x270>)
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010da4:	1ad3      	subs	r3, r2, r3
 8010da6:	3b01      	subs	r3, #1
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f2c0 814e 	blt.w	801104a <tcp_receive+0x442>
 8010dae:	4b32      	ldr	r3, [pc, #200]	; (8010e78 <tcp_receive+0x270>)
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f300 8146 	bgt.w	801104a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8b5b      	ldrh	r3, [r3, #26]
 8010dc2:	f003 0304 	and.w	r3, r3, #4
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d010      	beq.n	8010dec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8b5b      	ldrh	r3, [r3, #26]
 8010dce:	f023 0304 	bic.w	r3, r3, #4
 8010dd2:	b29a      	uxth	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dfa:	10db      	asrs	r3, r3, #3
 8010dfc:	b21b      	sxth	r3, r3
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	4413      	add	r3, r2
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	b21a      	sxth	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010e14:	4b18      	ldr	r3, [pc, #96]	; (8010e78 <tcp_receive+0x270>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2200      	movs	r2, #0
 8010e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010e2c:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <tcp_receive+0x270>)
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	7d1b      	ldrb	r3, [r3, #20]
 8010e38:	2b03      	cmp	r3, #3
 8010e3a:	f240 8097 	bls.w	8010f6c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d245      	bcs.n	8010eda <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	8b5b      	ldrh	r3, [r3, #26]
 8010e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d014      	beq.n	8010e84 <tcp_receive+0x27c>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e013      	b.n	8010e86 <tcp_receive+0x27e>
 8010e5e:	bf00      	nop
 8010e60:	08019b9c 	.word	0x08019b9c
 8010e64:	08019ecc 	.word	0x08019ecc
 8010e68:	08019be8 	.word	0x08019be8
 8010e6c:	08019ee8 	.word	0x08019ee8
 8010e70:	20008ea0 	.word	0x20008ea0
 8010e74:	20008e94 	.word	0x20008e94
 8010e78:	20008e98 	.word	0x20008e98
 8010e7c:	20008e84 	.word	0x20008e84
 8010e80:	20008e9e 	.word	0x20008e9e
 8010e84:	2302      	movs	r3, #2
 8010e86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010e8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e94:	fb12 f303 	smulbb	r3, r2, r3
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	bf28      	it	cs
 8010ea0:	4613      	movcs	r3, r2
 8010ea2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010eaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010eac:	4413      	add	r3, r2
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d309      	bcc.n	8010ece <tcp_receive+0x2c6>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ec0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ec2:	4413      	add	r3, r2
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ecc:	e04e      	b.n	8010f6c <tcp_receive+0x364>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ed4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ed8:	e048      	b.n	8010f6c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ee0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ee2:	4413      	add	r3, r2
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d309      	bcc.n	8010f04 <tcp_receive+0x2fc>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ef6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ef8:	4413      	add	r3, r2
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f02:	e004      	b.n	8010f0e <tcp_receive+0x306>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d326      	bcc.n	8010f6c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f3e:	4413      	add	r3, r2
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d30a      	bcc.n	8010f62 <tcp_receive+0x35a>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f56:	4413      	add	r3, r2
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f60:	e004      	b.n	8010f6c <tcp_receive+0x364>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f74:	4a98      	ldr	r2, [pc, #608]	; (80111d8 <tcp_receive+0x5d0>)
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f7ff fdca 	bl	8010b10 <tcp_free_acked_segments>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f8a:	4a94      	ldr	r2, [pc, #592]	; (80111dc <tcp_receive+0x5d4>)
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7ff fdbf 	bl	8010b10 <tcp_free_acked_segments>
 8010f92:	4602      	mov	r2, r0
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d104      	bne.n	8010faa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fa6:	861a      	strh	r2, [r3, #48]	; 0x30
 8010fa8:	e002      	b.n	8010fb0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2200      	movs	r2, #0
 8010fae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d103      	bne.n	8010fc6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010fcc:	4b84      	ldr	r3, [pc, #528]	; (80111e0 <tcp_receive+0x5d8>)
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	8b5b      	ldrh	r3, [r3, #26]
 8010fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d035      	beq.n	8011052 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d118      	bne.n	8011020 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00c      	beq.n	8011010 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	4618      	mov	r0, r3
 8011004:	f7fb f935 	bl	800c272 <lwip_htonl>
 8011008:	4603      	mov	r3, r0
 801100a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801100c:	2b00      	cmp	r3, #0
 801100e:	dc20      	bgt.n	8011052 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	8b5b      	ldrh	r3, [r3, #26]
 8011014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801101e:	e018      	b.n	8011052 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	4618      	mov	r0, r3
 801102e:	f7fb f920 	bl	800c272 <lwip_htonl>
 8011032:	4603      	mov	r3, r0
 8011034:	1ae3      	subs	r3, r4, r3
 8011036:	2b00      	cmp	r3, #0
 8011038:	dc0b      	bgt.n	8011052 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	8b5b      	ldrh	r3, [r3, #26]
 801103e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011042:	b29a      	uxth	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011048:	e003      	b.n	8011052 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f001 ff76 	bl	8012f3c <tcp_send_empty_ack>
 8011050:	e000      	b.n	8011054 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011052:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011058:	2b00      	cmp	r3, #0
 801105a:	d05b      	beq.n	8011114 <tcp_receive+0x50c>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011060:	4b60      	ldr	r3, [pc, #384]	; (80111e4 <tcp_receive+0x5dc>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	1ad3      	subs	r3, r2, r3
 8011066:	2b00      	cmp	r3, #0
 8011068:	da54      	bge.n	8011114 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801106a:	4b5f      	ldr	r3, [pc, #380]	; (80111e8 <tcp_receive+0x5e0>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	b29a      	uxth	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011074:	b29b      	uxth	r3, r3
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	b29b      	uxth	r3, r3
 801107a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801107e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011088:	10db      	asrs	r3, r3, #3
 801108a:	b21b      	sxth	r3, r3
 801108c:	b29b      	uxth	r3, r3
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	b29b      	uxth	r3, r3
 8011092:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801109c:	b29a      	uxth	r2, r3
 801109e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80110a2:	4413      	add	r3, r2
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	b21a      	sxth	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80110ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	da05      	bge.n	80110c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80110b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80110b8:	425b      	negs	r3, r3
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80110c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80110ca:	109b      	asrs	r3, r3, #2
 80110cc:	b21b      	sxth	r3, r3
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80110de:	b29a      	uxth	r2, r3
 80110e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80110e4:	4413      	add	r3, r2
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	b21a      	sxth	r2, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110f4:	10db      	asrs	r3, r3, #3
 80110f6:	b21b      	sxth	r3, r3
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011100:	b29b      	uxth	r3, r3
 8011102:	4413      	add	r3, r2
 8011104:	b29b      	uxth	r3, r3
 8011106:	b21a      	sxth	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011114:	4b35      	ldr	r3, [pc, #212]	; (80111ec <tcp_receive+0x5e4>)
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 84e2 	beq.w	8011ae2 <tcp_receive+0xeda>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	7d1b      	ldrb	r3, [r3, #20]
 8011122:	2b06      	cmp	r3, #6
 8011124:	f200 84dd 	bhi.w	8011ae2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801112c:	4b30      	ldr	r3, [pc, #192]	; (80111f0 <tcp_receive+0x5e8>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	3b01      	subs	r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	f2c0 808f 	blt.w	8011258 <tcp_receive+0x650>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801113e:	4b2b      	ldr	r3, [pc, #172]	; (80111ec <tcp_receive+0x5e4>)
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	4619      	mov	r1, r3
 8011144:	4b2a      	ldr	r3, [pc, #168]	; (80111f0 <tcp_receive+0x5e8>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	440b      	add	r3, r1
 801114a:	1ad3      	subs	r3, r2, r3
 801114c:	3301      	adds	r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	f300 8082 	bgt.w	8011258 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011154:	4b27      	ldr	r3, [pc, #156]	; (80111f4 <tcp_receive+0x5ec>)
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801115e:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <tcp_receive+0x5e8>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	1ad3      	subs	r3, r2, r3
 8011164:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011166:	4b23      	ldr	r3, [pc, #140]	; (80111f4 <tcp_receive+0x5ec>)
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d106      	bne.n	801117c <tcp_receive+0x574>
 801116e:	4b22      	ldr	r3, [pc, #136]	; (80111f8 <tcp_receive+0x5f0>)
 8011170:	f240 5294 	movw	r2, #1428	; 0x594
 8011174:	4921      	ldr	r1, [pc, #132]	; (80111fc <tcp_receive+0x5f4>)
 8011176:	4822      	ldr	r0, [pc, #136]	; (8011200 <tcp_receive+0x5f8>)
 8011178:	f006 fb24 	bl	80177c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011182:	4293      	cmp	r3, r2
 8011184:	d906      	bls.n	8011194 <tcp_receive+0x58c>
 8011186:	4b1c      	ldr	r3, [pc, #112]	; (80111f8 <tcp_receive+0x5f0>)
 8011188:	f240 5295 	movw	r2, #1429	; 0x595
 801118c:	491d      	ldr	r1, [pc, #116]	; (8011204 <tcp_receive+0x5fc>)
 801118e:	481c      	ldr	r0, [pc, #112]	; (8011200 <tcp_receive+0x5f8>)
 8011190:	f006 fb18 	bl	80177c4 <iprintf>
      off = (u16_t)off32;
 8011194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011196:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801119a:	4b16      	ldr	r3, [pc, #88]	; (80111f4 <tcp_receive+0x5ec>)
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	891b      	ldrh	r3, [r3, #8]
 80111a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d906      	bls.n	80111b6 <tcp_receive+0x5ae>
 80111a8:	4b13      	ldr	r3, [pc, #76]	; (80111f8 <tcp_receive+0x5f0>)
 80111aa:	f240 5297 	movw	r2, #1431	; 0x597
 80111ae:	4916      	ldr	r1, [pc, #88]	; (8011208 <tcp_receive+0x600>)
 80111b0:	4813      	ldr	r0, [pc, #76]	; (8011200 <tcp_receive+0x5f8>)
 80111b2:	f006 fb07 	bl	80177c4 <iprintf>
      inseg.len -= off;
 80111b6:	4b0f      	ldr	r3, [pc, #60]	; (80111f4 <tcp_receive+0x5ec>)
 80111b8:	891a      	ldrh	r2, [r3, #8]
 80111ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	4b0c      	ldr	r3, [pc, #48]	; (80111f4 <tcp_receive+0x5ec>)
 80111c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80111c6:	4b0b      	ldr	r3, [pc, #44]	; (80111f4 <tcp_receive+0x5ec>)
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	891a      	ldrh	r2, [r3, #8]
 80111cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111d0:	1ad3      	subs	r3, r2, r3
 80111d2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80111d4:	e02a      	b.n	801122c <tcp_receive+0x624>
 80111d6:	bf00      	nop
 80111d8:	08019f04 	.word	0x08019f04
 80111dc:	08019f0c 	.word	0x08019f0c
 80111e0:	20008e9c 	.word	0x20008e9c
 80111e4:	20008e98 	.word	0x20008e98
 80111e8:	20008e5c 	.word	0x20008e5c
 80111ec:	20008e9e 	.word	0x20008e9e
 80111f0:	20008e94 	.word	0x20008e94
 80111f4:	20008e74 	.word	0x20008e74
 80111f8:	08019b9c 	.word	0x08019b9c
 80111fc:	08019f14 	.word	0x08019f14
 8011200:	08019be8 	.word	0x08019be8
 8011204:	08019f24 	.word	0x08019f24
 8011208:	08019f34 	.word	0x08019f34
        off -= p->len;
 801120c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801120e:	895b      	ldrh	r3, [r3, #10]
 8011210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801121a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801121c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801121e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011222:	2200      	movs	r2, #0
 8011224:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801122c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801122e:	895b      	ldrh	r3, [r3, #10]
 8011230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011234:	429a      	cmp	r2, r3
 8011236:	d8e9      	bhi.n	801120c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801123c:	4619      	mov	r1, r3
 801123e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011240:	f7fc fada 	bl	800d7f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011248:	4a91      	ldr	r2, [pc, #580]	; (8011490 <tcp_receive+0x888>)
 801124a:	6013      	str	r3, [r2, #0]
 801124c:	4b91      	ldr	r3, [pc, #580]	; (8011494 <tcp_receive+0x88c>)
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	4a8f      	ldr	r2, [pc, #572]	; (8011490 <tcp_receive+0x888>)
 8011252:	6812      	ldr	r2, [r2, #0]
 8011254:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011256:	e00d      	b.n	8011274 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011258:	4b8d      	ldr	r3, [pc, #564]	; (8011490 <tcp_receive+0x888>)
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	da06      	bge.n	8011274 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	8b5b      	ldrh	r3, [r3, #26]
 801126a:	f043 0302 	orr.w	r3, r3, #2
 801126e:	b29a      	uxth	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011274:	4b86      	ldr	r3, [pc, #536]	; (8011490 <tcp_receive+0x888>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	2b00      	cmp	r3, #0
 8011280:	f2c0 842a 	blt.w	8011ad8 <tcp_receive+0xed0>
 8011284:	4b82      	ldr	r3, [pc, #520]	; (8011490 <tcp_receive+0x888>)
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801128c:	6879      	ldr	r1, [r7, #4]
 801128e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011290:	440b      	add	r3, r1
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	3301      	adds	r3, #1
 8011296:	2b00      	cmp	r3, #0
 8011298:	f300 841e 	bgt.w	8011ad8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112a0:	4b7b      	ldr	r3, [pc, #492]	; (8011490 <tcp_receive+0x888>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	f040 829a 	bne.w	80117de <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80112aa:	4b7a      	ldr	r3, [pc, #488]	; (8011494 <tcp_receive+0x88c>)
 80112ac:	891c      	ldrh	r4, [r3, #8]
 80112ae:	4b79      	ldr	r3, [pc, #484]	; (8011494 <tcp_receive+0x88c>)
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	899b      	ldrh	r3, [r3, #12]
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7fa ffc6 	bl	800c248 <lwip_htons>
 80112bc:	4603      	mov	r3, r0
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	f003 0303 	and.w	r3, r3, #3
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d001      	beq.n	80112cc <tcp_receive+0x6c4>
 80112c8:	2301      	movs	r3, #1
 80112ca:	e000      	b.n	80112ce <tcp_receive+0x6c6>
 80112cc:	2300      	movs	r3, #0
 80112ce:	4423      	add	r3, r4
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	4b71      	ldr	r3, [pc, #452]	; (8011498 <tcp_receive+0x890>)
 80112d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112da:	4b6f      	ldr	r3, [pc, #444]	; (8011498 <tcp_receive+0x890>)
 80112dc:	881b      	ldrh	r3, [r3, #0]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d275      	bcs.n	80113ce <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80112e2:	4b6c      	ldr	r3, [pc, #432]	; (8011494 <tcp_receive+0x88c>)
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	899b      	ldrh	r3, [r3, #12]
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fa ffac 	bl	800c248 <lwip_htons>
 80112f0:	4603      	mov	r3, r0
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	f003 0301 	and.w	r3, r3, #1
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d01f      	beq.n	801133c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80112fc:	4b65      	ldr	r3, [pc, #404]	; (8011494 <tcp_receive+0x88c>)
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	b29b      	uxth	r3, r3
 8011304:	b21b      	sxth	r3, r3
 8011306:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801130a:	b21c      	sxth	r4, r3
 801130c:	4b61      	ldr	r3, [pc, #388]	; (8011494 <tcp_receive+0x88c>)
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	899b      	ldrh	r3, [r3, #12]
 8011312:	b29b      	uxth	r3, r3
 8011314:	4618      	mov	r0, r3
 8011316:	f7fa ff97 	bl	800c248 <lwip_htons>
 801131a:	4603      	mov	r3, r0
 801131c:	b2db      	uxtb	r3, r3
 801131e:	b29b      	uxth	r3, r3
 8011320:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011324:	b29b      	uxth	r3, r3
 8011326:	4618      	mov	r0, r3
 8011328:	f7fa ff8e 	bl	800c248 <lwip_htons>
 801132c:	4603      	mov	r3, r0
 801132e:	b21b      	sxth	r3, r3
 8011330:	4323      	orrs	r3, r4
 8011332:	b21a      	sxth	r2, r3
 8011334:	4b57      	ldr	r3, [pc, #348]	; (8011494 <tcp_receive+0x88c>)
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	b292      	uxth	r2, r2
 801133a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011340:	4b54      	ldr	r3, [pc, #336]	; (8011494 <tcp_receive+0x88c>)
 8011342:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011344:	4b53      	ldr	r3, [pc, #332]	; (8011494 <tcp_receive+0x88c>)
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	899b      	ldrh	r3, [r3, #12]
 801134a:	b29b      	uxth	r3, r3
 801134c:	4618      	mov	r0, r3
 801134e:	f7fa ff7b 	bl	800c248 <lwip_htons>
 8011352:	4603      	mov	r3, r0
 8011354:	b2db      	uxtb	r3, r3
 8011356:	f003 0302 	and.w	r3, r3, #2
 801135a:	2b00      	cmp	r3, #0
 801135c:	d005      	beq.n	801136a <tcp_receive+0x762>
            inseg.len -= 1;
 801135e:	4b4d      	ldr	r3, [pc, #308]	; (8011494 <tcp_receive+0x88c>)
 8011360:	891b      	ldrh	r3, [r3, #8]
 8011362:	3b01      	subs	r3, #1
 8011364:	b29a      	uxth	r2, r3
 8011366:	4b4b      	ldr	r3, [pc, #300]	; (8011494 <tcp_receive+0x88c>)
 8011368:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801136a:	4b4a      	ldr	r3, [pc, #296]	; (8011494 <tcp_receive+0x88c>)
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	4a49      	ldr	r2, [pc, #292]	; (8011494 <tcp_receive+0x88c>)
 8011370:	8912      	ldrh	r2, [r2, #8]
 8011372:	4611      	mov	r1, r2
 8011374:	4618      	mov	r0, r3
 8011376:	f7fc f93f 	bl	800d5f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801137a:	4b46      	ldr	r3, [pc, #280]	; (8011494 <tcp_receive+0x88c>)
 801137c:	891c      	ldrh	r4, [r3, #8]
 801137e:	4b45      	ldr	r3, [pc, #276]	; (8011494 <tcp_receive+0x88c>)
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	899b      	ldrh	r3, [r3, #12]
 8011384:	b29b      	uxth	r3, r3
 8011386:	4618      	mov	r0, r3
 8011388:	f7fa ff5e 	bl	800c248 <lwip_htons>
 801138c:	4603      	mov	r3, r0
 801138e:	b2db      	uxtb	r3, r3
 8011390:	f003 0303 	and.w	r3, r3, #3
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <tcp_receive+0x794>
 8011398:	2301      	movs	r3, #1
 801139a:	e000      	b.n	801139e <tcp_receive+0x796>
 801139c:	2300      	movs	r3, #0
 801139e:	4423      	add	r3, r4
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	4b3d      	ldr	r3, [pc, #244]	; (8011498 <tcp_receive+0x890>)
 80113a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80113a6:	4b3c      	ldr	r3, [pc, #240]	; (8011498 <tcp_receive+0x890>)
 80113a8:	881b      	ldrh	r3, [r3, #0]
 80113aa:	461a      	mov	r2, r3
 80113ac:	4b38      	ldr	r3, [pc, #224]	; (8011490 <tcp_receive+0x888>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	441a      	add	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b6:	6879      	ldr	r1, [r7, #4]
 80113b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113ba:	440b      	add	r3, r1
 80113bc:	429a      	cmp	r2, r3
 80113be:	d006      	beq.n	80113ce <tcp_receive+0x7c6>
 80113c0:	4b36      	ldr	r3, [pc, #216]	; (801149c <tcp_receive+0x894>)
 80113c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80113c6:	4936      	ldr	r1, [pc, #216]	; (80114a0 <tcp_receive+0x898>)
 80113c8:	4836      	ldr	r0, [pc, #216]	; (80114a4 <tcp_receive+0x89c>)
 80113ca:	f006 f9fb 	bl	80177c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f000 80e7 	beq.w	80115a6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80113d8:	4b2e      	ldr	r3, [pc, #184]	; (8011494 <tcp_receive+0x88c>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fa ff31 	bl	800c248 <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d010      	beq.n	8011414 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80113f2:	e00a      	b.n	801140a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f7fd fd92 	bl	800ef2e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1f0      	bne.n	80113f4 <tcp_receive+0x7ec>
 8011412:	e0c8      	b.n	80115a6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011418:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801141a:	e052      	b.n	80114c2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	899b      	ldrh	r3, [r3, #12]
 8011422:	b29b      	uxth	r3, r3
 8011424:	4618      	mov	r0, r3
 8011426:	f7fa ff0f 	bl	800c248 <lwip_htons>
 801142a:	4603      	mov	r3, r0
 801142c:	b2db      	uxtb	r3, r3
 801142e:	f003 0301 	and.w	r3, r3, #1
 8011432:	2b00      	cmp	r3, #0
 8011434:	d03d      	beq.n	80114b2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011436:	4b17      	ldr	r3, [pc, #92]	; (8011494 <tcp_receive+0x88c>)
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	899b      	ldrh	r3, [r3, #12]
 801143c:	b29b      	uxth	r3, r3
 801143e:	4618      	mov	r0, r3
 8011440:	f7fa ff02 	bl	800c248 <lwip_htons>
 8011444:	4603      	mov	r3, r0
 8011446:	b2db      	uxtb	r3, r3
 8011448:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801144c:	2b00      	cmp	r3, #0
 801144e:	d130      	bne.n	80114b2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011450:	4b10      	ldr	r3, [pc, #64]	; (8011494 <tcp_receive+0x88c>)
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	899b      	ldrh	r3, [r3, #12]
 8011456:	b29c      	uxth	r4, r3
 8011458:	2001      	movs	r0, #1
 801145a:	f7fa fef5 	bl	800c248 <lwip_htons>
 801145e:	4603      	mov	r3, r0
 8011460:	461a      	mov	r2, r3
 8011462:	4b0c      	ldr	r3, [pc, #48]	; (8011494 <tcp_receive+0x88c>)
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	4322      	orrs	r2, r4
 8011468:	b292      	uxth	r2, r2
 801146a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801146c:	4b09      	ldr	r3, [pc, #36]	; (8011494 <tcp_receive+0x88c>)
 801146e:	891c      	ldrh	r4, [r3, #8]
 8011470:	4b08      	ldr	r3, [pc, #32]	; (8011494 <tcp_receive+0x88c>)
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	899b      	ldrh	r3, [r3, #12]
 8011476:	b29b      	uxth	r3, r3
 8011478:	4618      	mov	r0, r3
 801147a:	f7fa fee5 	bl	800c248 <lwip_htons>
 801147e:	4603      	mov	r3, r0
 8011480:	b2db      	uxtb	r3, r3
 8011482:	f003 0303 	and.w	r3, r3, #3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00e      	beq.n	80114a8 <tcp_receive+0x8a0>
 801148a:	2301      	movs	r3, #1
 801148c:	e00d      	b.n	80114aa <tcp_receive+0x8a2>
 801148e:	bf00      	nop
 8011490:	20008e94 	.word	0x20008e94
 8011494:	20008e74 	.word	0x20008e74
 8011498:	20008e9e 	.word	0x20008e9e
 801149c:	08019b9c 	.word	0x08019b9c
 80114a0:	08019f44 	.word	0x08019f44
 80114a4:	08019be8 	.word	0x08019be8
 80114a8:	2300      	movs	r3, #0
 80114aa:	4423      	add	r3, r4
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	4b98      	ldr	r3, [pc, #608]	; (8011710 <tcp_receive+0xb08>)
 80114b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80114b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80114b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80114bc:	6938      	ldr	r0, [r7, #16]
 80114be:	f7fd fd36 	bl	800ef2e <tcp_seg_free>
            while (next &&
 80114c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d00e      	beq.n	80114e6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80114c8:	4b91      	ldr	r3, [pc, #580]	; (8011710 <tcp_receive+0xb08>)
 80114ca:	881b      	ldrh	r3, [r3, #0]
 80114cc:	461a      	mov	r2, r3
 80114ce:	4b91      	ldr	r3, [pc, #580]	; (8011714 <tcp_receive+0xb0c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	441a      	add	r2, r3
 80114d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114dc:	8909      	ldrh	r1, [r1, #8]
 80114de:	440b      	add	r3, r1
 80114e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	da9a      	bge.n	801141c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80114e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d059      	beq.n	80115a0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80114ec:	4b88      	ldr	r3, [pc, #544]	; (8011710 <tcp_receive+0xb08>)
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	461a      	mov	r2, r3
 80114f2:	4b88      	ldr	r3, [pc, #544]	; (8011714 <tcp_receive+0xb0c>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	441a      	add	r2, r3
 80114f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011500:	2b00      	cmp	r3, #0
 8011502:	dd4d      	ble.n	80115a0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	b29a      	uxth	r2, r3
 801150c:	4b81      	ldr	r3, [pc, #516]	; (8011714 <tcp_receive+0xb0c>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	b29b      	uxth	r3, r3
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	b29a      	uxth	r2, r3
 8011516:	4b80      	ldr	r3, [pc, #512]	; (8011718 <tcp_receive+0xb10>)
 8011518:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801151a:	4b7f      	ldr	r3, [pc, #508]	; (8011718 <tcp_receive+0xb10>)
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	899b      	ldrh	r3, [r3, #12]
 8011520:	b29b      	uxth	r3, r3
 8011522:	4618      	mov	r0, r3
 8011524:	f7fa fe90 	bl	800c248 <lwip_htons>
 8011528:	4603      	mov	r3, r0
 801152a:	b2db      	uxtb	r3, r3
 801152c:	f003 0302 	and.w	r3, r3, #2
 8011530:	2b00      	cmp	r3, #0
 8011532:	d005      	beq.n	8011540 <tcp_receive+0x938>
                inseg.len -= 1;
 8011534:	4b78      	ldr	r3, [pc, #480]	; (8011718 <tcp_receive+0xb10>)
 8011536:	891b      	ldrh	r3, [r3, #8]
 8011538:	3b01      	subs	r3, #1
 801153a:	b29a      	uxth	r2, r3
 801153c:	4b76      	ldr	r3, [pc, #472]	; (8011718 <tcp_receive+0xb10>)
 801153e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011540:	4b75      	ldr	r3, [pc, #468]	; (8011718 <tcp_receive+0xb10>)
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	4a74      	ldr	r2, [pc, #464]	; (8011718 <tcp_receive+0xb10>)
 8011546:	8912      	ldrh	r2, [r2, #8]
 8011548:	4611      	mov	r1, r2
 801154a:	4618      	mov	r0, r3
 801154c:	f7fc f854 	bl	800d5f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011550:	4b71      	ldr	r3, [pc, #452]	; (8011718 <tcp_receive+0xb10>)
 8011552:	891c      	ldrh	r4, [r3, #8]
 8011554:	4b70      	ldr	r3, [pc, #448]	; (8011718 <tcp_receive+0xb10>)
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	899b      	ldrh	r3, [r3, #12]
 801155a:	b29b      	uxth	r3, r3
 801155c:	4618      	mov	r0, r3
 801155e:	f7fa fe73 	bl	800c248 <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	f003 0303 	and.w	r3, r3, #3
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <tcp_receive+0x96a>
 801156e:	2301      	movs	r3, #1
 8011570:	e000      	b.n	8011574 <tcp_receive+0x96c>
 8011572:	2300      	movs	r3, #0
 8011574:	4423      	add	r3, r4
 8011576:	b29a      	uxth	r2, r3
 8011578:	4b65      	ldr	r3, [pc, #404]	; (8011710 <tcp_receive+0xb08>)
 801157a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801157c:	4b64      	ldr	r3, [pc, #400]	; (8011710 <tcp_receive+0xb08>)
 801157e:	881b      	ldrh	r3, [r3, #0]
 8011580:	461a      	mov	r2, r3
 8011582:	4b64      	ldr	r3, [pc, #400]	; (8011714 <tcp_receive+0xb0c>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	441a      	add	r2, r3
 8011588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158a:	68db      	ldr	r3, [r3, #12]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	429a      	cmp	r2, r3
 8011590:	d006      	beq.n	80115a0 <tcp_receive+0x998>
 8011592:	4b62      	ldr	r3, [pc, #392]	; (801171c <tcp_receive+0xb14>)
 8011594:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011598:	4961      	ldr	r1, [pc, #388]	; (8011720 <tcp_receive+0xb18>)
 801159a:	4862      	ldr	r0, [pc, #392]	; (8011724 <tcp_receive+0xb1c>)
 801159c:	f006 f912 	bl	80177c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80115a6:	4b5a      	ldr	r3, [pc, #360]	; (8011710 <tcp_receive+0xb08>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	4b59      	ldr	r3, [pc, #356]	; (8011714 <tcp_receive+0xb0c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	441a      	add	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115ba:	4b55      	ldr	r3, [pc, #340]	; (8011710 <tcp_receive+0xb08>)
 80115bc:	881b      	ldrh	r3, [r3, #0]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d206      	bcs.n	80115d0 <tcp_receive+0x9c8>
 80115c2:	4b56      	ldr	r3, [pc, #344]	; (801171c <tcp_receive+0xb14>)
 80115c4:	f240 6207 	movw	r2, #1543	; 0x607
 80115c8:	4957      	ldr	r1, [pc, #348]	; (8011728 <tcp_receive+0xb20>)
 80115ca:	4856      	ldr	r0, [pc, #344]	; (8011724 <tcp_receive+0xb1c>)
 80115cc:	f006 f8fa 	bl	80177c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115d4:	4b4e      	ldr	r3, [pc, #312]	; (8011710 <tcp_receive+0xb08>)
 80115d6:	881b      	ldrh	r3, [r3, #0]
 80115d8:	1ad3      	subs	r3, r2, r3
 80115da:	b29a      	uxth	r2, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7fc ffc5 	bl	800e570 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80115e6:	4b4c      	ldr	r3, [pc, #304]	; (8011718 <tcp_receive+0xb10>)
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	891b      	ldrh	r3, [r3, #8]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d006      	beq.n	80115fe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80115f0:	4b49      	ldr	r3, [pc, #292]	; (8011718 <tcp_receive+0xb10>)
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	4a4d      	ldr	r2, [pc, #308]	; (801172c <tcp_receive+0xb24>)
 80115f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80115f8:	4b47      	ldr	r3, [pc, #284]	; (8011718 <tcp_receive+0xb10>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80115fe:	4b46      	ldr	r3, [pc, #280]	; (8011718 <tcp_receive+0xb10>)
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	899b      	ldrh	r3, [r3, #12]
 8011604:	b29b      	uxth	r3, r3
 8011606:	4618      	mov	r0, r3
 8011608:	f7fa fe1e 	bl	800c248 <lwip_htons>
 801160c:	4603      	mov	r3, r0
 801160e:	b2db      	uxtb	r3, r3
 8011610:	f003 0301 	and.w	r3, r3, #1
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 80b8 	beq.w	801178a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801161a:	4b45      	ldr	r3, [pc, #276]	; (8011730 <tcp_receive+0xb28>)
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	f043 0320 	orr.w	r3, r3, #32
 8011622:	b2da      	uxtb	r2, r3
 8011624:	4b42      	ldr	r3, [pc, #264]	; (8011730 <tcp_receive+0xb28>)
 8011626:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011628:	e0af      	b.n	801178a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801162e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	4a36      	ldr	r2, [pc, #216]	; (8011714 <tcp_receive+0xb0c>)
 801163a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	891b      	ldrh	r3, [r3, #8]
 8011640:	461c      	mov	r4, r3
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	68db      	ldr	r3, [r3, #12]
 8011646:	899b      	ldrh	r3, [r3, #12]
 8011648:	b29b      	uxth	r3, r3
 801164a:	4618      	mov	r0, r3
 801164c:	f7fa fdfc 	bl	800c248 <lwip_htons>
 8011650:	4603      	mov	r3, r0
 8011652:	b2db      	uxtb	r3, r3
 8011654:	f003 0303 	and.w	r3, r3, #3
 8011658:	2b00      	cmp	r3, #0
 801165a:	d001      	beq.n	8011660 <tcp_receive+0xa58>
 801165c:	2301      	movs	r3, #1
 801165e:	e000      	b.n	8011662 <tcp_receive+0xa5a>
 8011660:	2300      	movs	r3, #0
 8011662:	191a      	adds	r2, r3, r4
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	441a      	add	r2, r3
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011672:	461c      	mov	r4, r3
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	891b      	ldrh	r3, [r3, #8]
 8011678:	461d      	mov	r5, r3
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	899b      	ldrh	r3, [r3, #12]
 8011680:	b29b      	uxth	r3, r3
 8011682:	4618      	mov	r0, r3
 8011684:	f7fa fde0 	bl	800c248 <lwip_htons>
 8011688:	4603      	mov	r3, r0
 801168a:	b2db      	uxtb	r3, r3
 801168c:	f003 0303 	and.w	r3, r3, #3
 8011690:	2b00      	cmp	r3, #0
 8011692:	d001      	beq.n	8011698 <tcp_receive+0xa90>
 8011694:	2301      	movs	r3, #1
 8011696:	e000      	b.n	801169a <tcp_receive+0xa92>
 8011698:	2300      	movs	r3, #0
 801169a:	442b      	add	r3, r5
 801169c:	429c      	cmp	r4, r3
 801169e:	d206      	bcs.n	80116ae <tcp_receive+0xaa6>
 80116a0:	4b1e      	ldr	r3, [pc, #120]	; (801171c <tcp_receive+0xb14>)
 80116a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80116a6:	4923      	ldr	r1, [pc, #140]	; (8011734 <tcp_receive+0xb2c>)
 80116a8:	481e      	ldr	r0, [pc, #120]	; (8011724 <tcp_receive+0xb1c>)
 80116aa:	f006 f88b 	bl	80177c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	461c      	mov	r4, r3
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	899b      	ldrh	r3, [r3, #12]
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fa fdc3 	bl	800c248 <lwip_htons>
 80116c2:	4603      	mov	r3, r0
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	f003 0303 	and.w	r3, r3, #3
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d001      	beq.n	80116d2 <tcp_receive+0xaca>
 80116ce:	2301      	movs	r3, #1
 80116d0:	e000      	b.n	80116d4 <tcp_receive+0xacc>
 80116d2:	2300      	movs	r3, #0
 80116d4:	1919      	adds	r1, r3, r4
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116da:	b28b      	uxth	r3, r1
 80116dc:	1ad3      	subs	r3, r2, r3
 80116de:	b29a      	uxth	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7fc ff43 	bl	800e570 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	891b      	ldrh	r3, [r3, #8]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d028      	beq.n	8011746 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80116f4:	4b0d      	ldr	r3, [pc, #52]	; (801172c <tcp_receive+0xb24>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d01d      	beq.n	8011738 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80116fc:	4b0b      	ldr	r3, [pc, #44]	; (801172c <tcp_receive+0xb24>)
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	4619      	mov	r1, r3
 8011706:	4610      	mov	r0, r2
 8011708:	f7fc f9be 	bl	800da88 <pbuf_cat>
 801170c:	e018      	b.n	8011740 <tcp_receive+0xb38>
 801170e:	bf00      	nop
 8011710:	20008e9e 	.word	0x20008e9e
 8011714:	20008e94 	.word	0x20008e94
 8011718:	20008e74 	.word	0x20008e74
 801171c:	08019b9c 	.word	0x08019b9c
 8011720:	08019f7c 	.word	0x08019f7c
 8011724:	08019be8 	.word	0x08019be8
 8011728:	08019fb8 	.word	0x08019fb8
 801172c:	20008ea4 	.word	0x20008ea4
 8011730:	20008ea1 	.word	0x20008ea1
 8011734:	08019fd8 	.word	0x08019fd8
            } else {
              recv_data = cseg->p;
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	4a70      	ldr	r2, [pc, #448]	; (8011900 <tcp_receive+0xcf8>)
 801173e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	2200      	movs	r2, #0
 8011744:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	899b      	ldrh	r3, [r3, #12]
 801174c:	b29b      	uxth	r3, r3
 801174e:	4618      	mov	r0, r3
 8011750:	f7fa fd7a 	bl	800c248 <lwip_htons>
 8011754:	4603      	mov	r3, r0
 8011756:	b2db      	uxtb	r3, r3
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	2b00      	cmp	r3, #0
 801175e:	d00d      	beq.n	801177c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011760:	4b68      	ldr	r3, [pc, #416]	; (8011904 <tcp_receive+0xcfc>)
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	f043 0320 	orr.w	r3, r3, #32
 8011768:	b2da      	uxtb	r2, r3
 801176a:	4b66      	ldr	r3, [pc, #408]	; (8011904 <tcp_receive+0xcfc>)
 801176c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	7d1b      	ldrb	r3, [r3, #20]
 8011772:	2b04      	cmp	r3, #4
 8011774:	d102      	bne.n	801177c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2207      	movs	r2, #7
 801177a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011784:	68b8      	ldr	r0, [r7, #8]
 8011786:	f7fd fbd2 	bl	800ef2e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801178e:	2b00      	cmp	r3, #0
 8011790:	d008      	beq.n	80117a4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801179e:	429a      	cmp	r2, r3
 80117a0:	f43f af43 	beq.w	801162a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	8b5b      	ldrh	r3, [r3, #26]
 80117a8:	f003 0301 	and.w	r3, r3, #1
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d00e      	beq.n	80117ce <tcp_receive+0xbc6>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8b5b      	ldrh	r3, [r3, #26]
 80117b4:	f023 0301 	bic.w	r3, r3, #1
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	835a      	strh	r2, [r3, #26]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	8b5b      	ldrh	r3, [r3, #26]
 80117c2:	f043 0302 	orr.w	r3, r3, #2
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80117cc:	e188      	b.n	8011ae0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8b5b      	ldrh	r3, [r3, #26]
 80117d2:	f043 0301 	orr.w	r3, r3, #1
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80117dc:	e180      	b.n	8011ae0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d106      	bne.n	80117f4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80117e6:	4848      	ldr	r0, [pc, #288]	; (8011908 <tcp_receive+0xd00>)
 80117e8:	f7fd fbba 	bl	800ef60 <tcp_seg_copy>
 80117ec:	4602      	mov	r2, r0
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	675a      	str	r2, [r3, #116]	; 0x74
 80117f2:	e16d      	b.n	8011ad0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80117f4:	2300      	movs	r3, #0
 80117f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80117fe:	e157      	b.n	8011ab0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	685a      	ldr	r2, [r3, #4]
 8011806:	4b41      	ldr	r3, [pc, #260]	; (801190c <tcp_receive+0xd04>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	429a      	cmp	r2, r3
 801180c:	d11d      	bne.n	801184a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801180e:	4b3e      	ldr	r3, [pc, #248]	; (8011908 <tcp_receive+0xd00>)
 8011810:	891a      	ldrh	r2, [r3, #8]
 8011812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011814:	891b      	ldrh	r3, [r3, #8]
 8011816:	429a      	cmp	r2, r3
 8011818:	f240 814f 	bls.w	8011aba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801181c:	483a      	ldr	r0, [pc, #232]	; (8011908 <tcp_receive+0xd00>)
 801181e:	f7fd fb9f 	bl	800ef60 <tcp_seg_copy>
 8011822:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	2b00      	cmp	r3, #0
 8011828:	f000 8149 	beq.w	8011abe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801182e:	2b00      	cmp	r3, #0
 8011830:	d003      	beq.n	801183a <tcp_receive+0xc32>
                    prev->next = cseg;
 8011832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	e002      	b.n	8011840 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	697a      	ldr	r2, [r7, #20]
 801183e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011842:	6978      	ldr	r0, [r7, #20]
 8011844:	f7ff f8dc 	bl	8010a00 <tcp_oos_insert_segment>
                }
                break;
 8011848:	e139      	b.n	8011abe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184c:	2b00      	cmp	r3, #0
 801184e:	d117      	bne.n	8011880 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011850:	4b2e      	ldr	r3, [pc, #184]	; (801190c <tcp_receive+0xd04>)
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	1ad3      	subs	r3, r2, r3
 801185c:	2b00      	cmp	r3, #0
 801185e:	da57      	bge.n	8011910 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011860:	4829      	ldr	r0, [pc, #164]	; (8011908 <tcp_receive+0xd00>)
 8011862:	f7fd fb7d 	bl	800ef60 <tcp_seg_copy>
 8011866:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 8129 	beq.w	8011ac2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	69ba      	ldr	r2, [r7, #24]
 8011874:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011878:	69b8      	ldr	r0, [r7, #24]
 801187a:	f7ff f8c1 	bl	8010a00 <tcp_oos_insert_segment>
                  }
                  break;
 801187e:	e120      	b.n	8011ac2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011880:	4b22      	ldr	r3, [pc, #136]	; (801190c <tcp_receive+0xd04>)
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	3b01      	subs	r3, #1
 801188e:	2b00      	cmp	r3, #0
 8011890:	db3e      	blt.n	8011910 <tcp_receive+0xd08>
 8011892:	4b1e      	ldr	r3, [pc, #120]	; (801190c <tcp_receive+0xd04>)
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	1ad3      	subs	r3, r2, r3
 801189e:	3301      	adds	r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	dc35      	bgt.n	8011910 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118a4:	4818      	ldr	r0, [pc, #96]	; (8011908 <tcp_receive+0xd00>)
 80118a6:	f7fd fb5b 	bl	800ef60 <tcp_seg_copy>
 80118aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 8109 	beq.w	8011ac6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80118b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118bc:	8912      	ldrh	r2, [r2, #8]
 80118be:	441a      	add	r2, r3
 80118c0:	4b12      	ldr	r3, [pc, #72]	; (801190c <tcp_receive+0xd04>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	dd12      	ble.n	80118f0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80118ca:	4b10      	ldr	r3, [pc, #64]	; (801190c <tcp_receive+0xd04>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	b29a      	uxth	r2, r3
 80118dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80118e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e2:	685a      	ldr	r2, [r3, #4]
 80118e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e6:	891b      	ldrh	r3, [r3, #8]
 80118e8:	4619      	mov	r1, r3
 80118ea:	4610      	mov	r0, r2
 80118ec:	f7fb fe84 	bl	800d5f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80118f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f2:	69fa      	ldr	r2, [r7, #28]
 80118f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80118f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118f8:	69f8      	ldr	r0, [r7, #28]
 80118fa:	f7ff f881 	bl	8010a00 <tcp_oos_insert_segment>
                  }
                  break;
 80118fe:	e0e2      	b.n	8011ac6 <tcp_receive+0xebe>
 8011900:	20008ea4 	.word	0x20008ea4
 8011904:	20008ea1 	.word	0x20008ea1
 8011908:	20008e74 	.word	0x20008e74
 801190c:	20008e94 	.word	0x20008e94
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011912:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	f040 80c6 	bne.w	8011aaa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801191e:	4b80      	ldr	r3, [pc, #512]	; (8011b20 <tcp_receive+0xf18>)
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801192a:	2b00      	cmp	r3, #0
 801192c:	f340 80bd 	ble.w	8011aaa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	899b      	ldrh	r3, [r3, #12]
 8011936:	b29b      	uxth	r3, r3
 8011938:	4618      	mov	r0, r3
 801193a:	f7fa fc85 	bl	800c248 <lwip_htons>
 801193e:	4603      	mov	r3, r0
 8011940:	b2db      	uxtb	r3, r3
 8011942:	f003 0301 	and.w	r3, r3, #1
 8011946:	2b00      	cmp	r3, #0
 8011948:	f040 80bf 	bne.w	8011aca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801194c:	4875      	ldr	r0, [pc, #468]	; (8011b24 <tcp_receive+0xf1c>)
 801194e:	f7fd fb07 	bl	800ef60 <tcp_seg_copy>
 8011952:	4602      	mov	r2, r0
 8011954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011956:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	f000 80b6 	beq.w	8011ace <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011964:	68db      	ldr	r3, [r3, #12]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801196a:	8912      	ldrh	r2, [r2, #8]
 801196c:	441a      	add	r2, r3
 801196e:	4b6c      	ldr	r3, [pc, #432]	; (8011b20 <tcp_receive+0xf18>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	2b00      	cmp	r3, #0
 8011976:	dd12      	ble.n	801199e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011978:	4b69      	ldr	r3, [pc, #420]	; (8011b20 <tcp_receive+0xf18>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	b29a      	uxth	r2, r3
 801197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011980:	68db      	ldr	r3, [r3, #12]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	b29b      	uxth	r3, r3
 8011986:	1ad3      	subs	r3, r2, r3
 8011988:	b29a      	uxth	r2, r3
 801198a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011994:	891b      	ldrh	r3, [r3, #8]
 8011996:	4619      	mov	r1, r3
 8011998:	4610      	mov	r0, r2
 801199a:	f7fb fe2d 	bl	800d5f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801199e:	4b62      	ldr	r3, [pc, #392]	; (8011b28 <tcp_receive+0xf20>)
 80119a0:	881b      	ldrh	r3, [r3, #0]
 80119a2:	461a      	mov	r2, r3
 80119a4:	4b5e      	ldr	r3, [pc, #376]	; (8011b20 <tcp_receive+0xf18>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	441a      	add	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ae:	6879      	ldr	r1, [r7, #4]
 80119b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119b2:	440b      	add	r3, r1
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f340 8089 	ble.w	8011ace <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80119bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	899b      	ldrh	r3, [r3, #12]
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fa fc3e 	bl	800c248 <lwip_htons>
 80119cc:	4603      	mov	r3, r0
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d022      	beq.n	8011a1e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80119d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	899b      	ldrh	r3, [r3, #12]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	b21b      	sxth	r3, r3
 80119e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80119e8:	b21c      	sxth	r4, r3
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	899b      	ldrh	r3, [r3, #12]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fa fc27 	bl	800c248 <lwip_htons>
 80119fa:	4603      	mov	r3, r0
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fa fc1e 	bl	800c248 <lwip_htons>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	b21b      	sxth	r3, r3
 8011a10:	4323      	orrs	r3, r4
 8011a12:	b21a      	sxth	r2, r3
 8011a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	b292      	uxth	r2, r2
 8011a1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a28:	4413      	add	r3, r2
 8011a2a:	b299      	uxth	r1, r3
 8011a2c:	4b3c      	ldr	r3, [pc, #240]	; (8011b20 <tcp_receive+0xf18>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	1a8a      	subs	r2, r1, r2
 8011a38:	b292      	uxth	r2, r2
 8011a3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	685a      	ldr	r2, [r3, #4]
 8011a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	891b      	ldrh	r3, [r3, #8]
 8011a48:	4619      	mov	r1, r3
 8011a4a:	4610      	mov	r0, r2
 8011a4c:	f7fb fdd4 	bl	800d5f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	891c      	ldrh	r4, [r3, #8]
 8011a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	899b      	ldrh	r3, [r3, #12]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7fa fbf1 	bl	800c248 <lwip_htons>
 8011a66:	4603      	mov	r3, r0
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	f003 0303 	and.w	r3, r3, #3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <tcp_receive+0xe6e>
 8011a72:	2301      	movs	r3, #1
 8011a74:	e000      	b.n	8011a78 <tcp_receive+0xe70>
 8011a76:	2300      	movs	r3, #0
 8011a78:	4423      	add	r3, r4
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	4b2a      	ldr	r3, [pc, #168]	; (8011b28 <tcp_receive+0xf20>)
 8011a7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a80:	4b29      	ldr	r3, [pc, #164]	; (8011b28 <tcp_receive+0xf20>)
 8011a82:	881b      	ldrh	r3, [r3, #0]
 8011a84:	461a      	mov	r2, r3
 8011a86:	4b26      	ldr	r3, [pc, #152]	; (8011b20 <tcp_receive+0xf18>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	441a      	add	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a90:	6879      	ldr	r1, [r7, #4]
 8011a92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a94:	440b      	add	r3, r1
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d019      	beq.n	8011ace <tcp_receive+0xec6>
 8011a9a:	4b24      	ldr	r3, [pc, #144]	; (8011b2c <tcp_receive+0xf24>)
 8011a9c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011aa0:	4923      	ldr	r1, [pc, #140]	; (8011b30 <tcp_receive+0xf28>)
 8011aa2:	4824      	ldr	r0, [pc, #144]	; (8011b34 <tcp_receive+0xf2c>)
 8011aa4:	f005 fe8e 	bl	80177c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011aa8:	e011      	b.n	8011ace <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f47f aea4 	bne.w	8011800 <tcp_receive+0xbf8>
 8011ab8:	e00a      	b.n	8011ad0 <tcp_receive+0xec8>
                break;
 8011aba:	bf00      	nop
 8011abc:	e008      	b.n	8011ad0 <tcp_receive+0xec8>
                break;
 8011abe:	bf00      	nop
 8011ac0:	e006      	b.n	8011ad0 <tcp_receive+0xec8>
                  break;
 8011ac2:	bf00      	nop
 8011ac4:	e004      	b.n	8011ad0 <tcp_receive+0xec8>
                  break;
 8011ac6:	bf00      	nop
 8011ac8:	e002      	b.n	8011ad0 <tcp_receive+0xec8>
                  break;
 8011aca:	bf00      	nop
 8011acc:	e000      	b.n	8011ad0 <tcp_receive+0xec8>
                break;
 8011ace:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f001 fa33 	bl	8012f3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011ad6:	e003      	b.n	8011ae0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f001 fa2f 	bl	8012f3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ade:	e01a      	b.n	8011b16 <tcp_receive+0xf0e>
 8011ae0:	e019      	b.n	8011b16 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011ae2:	4b0f      	ldr	r3, [pc, #60]	; (8011b20 <tcp_receive+0xf18>)
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	db0a      	blt.n	8011b06 <tcp_receive+0xefe>
 8011af0:	4b0b      	ldr	r3, [pc, #44]	; (8011b20 <tcp_receive+0xf18>)
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af8:	6879      	ldr	r1, [r7, #4]
 8011afa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011afc:	440b      	add	r3, r1
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	3301      	adds	r3, #1
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	dd07      	ble.n	8011b16 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	8b5b      	ldrh	r3, [r3, #26]
 8011b0a:	f043 0302 	orr.w	r3, r3, #2
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011b14:	e7ff      	b.n	8011b16 <tcp_receive+0xf0e>
 8011b16:	bf00      	nop
 8011b18:	3750      	adds	r7, #80	; 0x50
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	20008e94 	.word	0x20008e94
 8011b24:	20008e74 	.word	0x20008e74
 8011b28:	20008e9e 	.word	0x20008e9e
 8011b2c:	08019b9c 	.word	0x08019b9c
 8011b30:	08019f44 	.word	0x08019f44
 8011b34:	08019be8 	.word	0x08019be8

08011b38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011b3e:	4b15      	ldr	r3, [pc, #84]	; (8011b94 <tcp_get_next_optbyte+0x5c>)
 8011b40:	881b      	ldrh	r3, [r3, #0]
 8011b42:	1c5a      	adds	r2, r3, #1
 8011b44:	b291      	uxth	r1, r2
 8011b46:	4a13      	ldr	r2, [pc, #76]	; (8011b94 <tcp_get_next_optbyte+0x5c>)
 8011b48:	8011      	strh	r1, [r2, #0]
 8011b4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011b4c:	4b12      	ldr	r3, [pc, #72]	; (8011b98 <tcp_get_next_optbyte+0x60>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d004      	beq.n	8011b5e <tcp_get_next_optbyte+0x26>
 8011b54:	4b11      	ldr	r3, [pc, #68]	; (8011b9c <tcp_get_next_optbyte+0x64>)
 8011b56:	881b      	ldrh	r3, [r3, #0]
 8011b58:	88fa      	ldrh	r2, [r7, #6]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d208      	bcs.n	8011b70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011b5e:	4b10      	ldr	r3, [pc, #64]	; (8011ba0 <tcp_get_next_optbyte+0x68>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	3314      	adds	r3, #20
 8011b64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011b66:	88fb      	ldrh	r3, [r7, #6]
 8011b68:	683a      	ldr	r2, [r7, #0]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	e00b      	b.n	8011b88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011b70:	88fb      	ldrh	r3, [r7, #6]
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	4b09      	ldr	r3, [pc, #36]	; (8011b9c <tcp_get_next_optbyte+0x64>)
 8011b76:	881b      	ldrh	r3, [r3, #0]
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011b7e:	4b06      	ldr	r3, [pc, #24]	; (8011b98 <tcp_get_next_optbyte+0x60>)
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	797b      	ldrb	r3, [r7, #5]
 8011b84:	4413      	add	r3, r2
 8011b86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	20008e90 	.word	0x20008e90
 8011b98:	20008e8c 	.word	0x20008e8c
 8011b9c:	20008e8a 	.word	0x20008e8a
 8011ba0:	20008e84 	.word	0x20008e84

08011ba4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d106      	bne.n	8011bc0 <tcp_parseopt+0x1c>
 8011bb2:	4b32      	ldr	r3, [pc, #200]	; (8011c7c <tcp_parseopt+0xd8>)
 8011bb4:	f240 727d 	movw	r2, #1917	; 0x77d
 8011bb8:	4931      	ldr	r1, [pc, #196]	; (8011c80 <tcp_parseopt+0xdc>)
 8011bba:	4832      	ldr	r0, [pc, #200]	; (8011c84 <tcp_parseopt+0xe0>)
 8011bbc:	f005 fe02 	bl	80177c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011bc0:	4b31      	ldr	r3, [pc, #196]	; (8011c88 <tcp_parseopt+0xe4>)
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d055      	beq.n	8011c74 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011bc8:	4b30      	ldr	r3, [pc, #192]	; (8011c8c <tcp_parseopt+0xe8>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	801a      	strh	r2, [r3, #0]
 8011bce:	e045      	b.n	8011c5c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011bd0:	f7ff ffb2 	bl	8011b38 <tcp_get_next_optbyte>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011bd8:	7bfb      	ldrb	r3, [r7, #15]
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d006      	beq.n	8011bec <tcp_parseopt+0x48>
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	dc2b      	bgt.n	8011c3a <tcp_parseopt+0x96>
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d041      	beq.n	8011c6a <tcp_parseopt+0xc6>
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d127      	bne.n	8011c3a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011bea:	e037      	b.n	8011c5c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011bec:	f7ff ffa4 	bl	8011b38 <tcp_get_next_optbyte>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b04      	cmp	r3, #4
 8011bf4:	d13b      	bne.n	8011c6e <tcp_parseopt+0xca>
 8011bf6:	4b25      	ldr	r3, [pc, #148]	; (8011c8c <tcp_parseopt+0xe8>)
 8011bf8:	881b      	ldrh	r3, [r3, #0]
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	4a22      	ldr	r2, [pc, #136]	; (8011c88 <tcp_parseopt+0xe4>)
 8011bfe:	8812      	ldrh	r2, [r2, #0]
 8011c00:	4293      	cmp	r3, r2
 8011c02:	da34      	bge.n	8011c6e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011c04:	f7ff ff98 	bl	8011b38 <tcp_get_next_optbyte>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	021b      	lsls	r3, r3, #8
 8011c0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011c10:	f7ff ff92 	bl	8011b38 <tcp_get_next_optbyte>
 8011c14:	4603      	mov	r3, r0
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	89bb      	ldrh	r3, [r7, #12]
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011c1e:	89bb      	ldrh	r3, [r7, #12]
 8011c20:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011c24:	d804      	bhi.n	8011c30 <tcp_parseopt+0x8c>
 8011c26:	89bb      	ldrh	r3, [r7, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <tcp_parseopt+0x8c>
 8011c2c:	89ba      	ldrh	r2, [r7, #12]
 8011c2e:	e001      	b.n	8011c34 <tcp_parseopt+0x90>
 8011c30:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011c38:	e010      	b.n	8011c5c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011c3a:	f7ff ff7d 	bl	8011b38 <tcp_get_next_optbyte>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011c42:	7afb      	ldrb	r3, [r7, #11]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d914      	bls.n	8011c72 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011c48:	7afb      	ldrb	r3, [r7, #11]
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	4b0f      	ldr	r3, [pc, #60]	; (8011c8c <tcp_parseopt+0xe8>)
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	4413      	add	r3, r2
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	3b02      	subs	r3, #2
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	4b0c      	ldr	r3, [pc, #48]	; (8011c8c <tcp_parseopt+0xe8>)
 8011c5a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c5c:	4b0b      	ldr	r3, [pc, #44]	; (8011c8c <tcp_parseopt+0xe8>)
 8011c5e:	881a      	ldrh	r2, [r3, #0]
 8011c60:	4b09      	ldr	r3, [pc, #36]	; (8011c88 <tcp_parseopt+0xe4>)
 8011c62:	881b      	ldrh	r3, [r3, #0]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d3b3      	bcc.n	8011bd0 <tcp_parseopt+0x2c>
 8011c68:	e004      	b.n	8011c74 <tcp_parseopt+0xd0>
          return;
 8011c6a:	bf00      	nop
 8011c6c:	e002      	b.n	8011c74 <tcp_parseopt+0xd0>
            return;
 8011c6e:	bf00      	nop
 8011c70:	e000      	b.n	8011c74 <tcp_parseopt+0xd0>
            return;
 8011c72:	bf00      	nop
      }
    }
  }
}
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	08019b9c 	.word	0x08019b9c
 8011c80:	0801a000 	.word	0x0801a000
 8011c84:	08019be8 	.word	0x08019be8
 8011c88:	20008e88 	.word	0x20008e88
 8011c8c:	20008e90 	.word	0x20008e90

08011c90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011c90:	b480      	push	{r7}
 8011c92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011c94:	4b05      	ldr	r3, [pc, #20]	; (8011cac <tcp_trigger_input_pcb_close+0x1c>)
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	f043 0310 	orr.w	r3, r3, #16
 8011c9c:	b2da      	uxtb	r2, r3
 8011c9e:	4b03      	ldr	r3, [pc, #12]	; (8011cac <tcp_trigger_input_pcb_close+0x1c>)
 8011ca0:	701a      	strb	r2, [r3, #0]
}
 8011ca2:	bf00      	nop
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr
 8011cac:	20008ea1 	.word	0x20008ea1

08011cb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	60b9      	str	r1, [r7, #8]
 8011cba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00a      	beq.n	8011cd8 <tcp_route+0x28>
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	7a1b      	ldrb	r3, [r3, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d006      	beq.n	8011cd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	7a1b      	ldrb	r3, [r3, #8]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fb fab8 	bl	800d244 <netif_get_by_index>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	e003      	b.n	8011ce0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f003 fa37 	bl	801514c <ip4_route>
 8011cde:	4603      	mov	r3, r0
  }
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011ce8:	b590      	push	{r4, r7, lr}
 8011cea:	b087      	sub	sp, #28
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	603b      	str	r3, [r7, #0]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d105      	bne.n	8011d0a <tcp_create_segment+0x22>
 8011cfe:	4b44      	ldr	r3, [pc, #272]	; (8011e10 <tcp_create_segment+0x128>)
 8011d00:	22a3      	movs	r2, #163	; 0xa3
 8011d02:	4944      	ldr	r1, [pc, #272]	; (8011e14 <tcp_create_segment+0x12c>)
 8011d04:	4844      	ldr	r0, [pc, #272]	; (8011e18 <tcp_create_segment+0x130>)
 8011d06:	f005 fd5d 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d105      	bne.n	8011d1c <tcp_create_segment+0x34>
 8011d10:	4b3f      	ldr	r3, [pc, #252]	; (8011e10 <tcp_create_segment+0x128>)
 8011d12:	22a4      	movs	r2, #164	; 0xa4
 8011d14:	4941      	ldr	r1, [pc, #260]	; (8011e1c <tcp_create_segment+0x134>)
 8011d16:	4840      	ldr	r0, [pc, #256]	; (8011e18 <tcp_create_segment+0x130>)
 8011d18:	f005 fd54 	bl	80177c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	f003 0304 	and.w	r3, r3, #4
 8011d28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011d2a:	2003      	movs	r0, #3
 8011d2c:	f7fa ff04 	bl	800cb38 <memp_malloc>
 8011d30:	6138      	str	r0, [r7, #16]
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d104      	bne.n	8011d42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011d38:	68b8      	ldr	r0, [r7, #8]
 8011d3a:	f7fb fde3 	bl	800d904 <pbuf_free>
    return NULL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e061      	b.n	8011e06 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011d48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	68ba      	ldr	r2, [r7, #8]
 8011d54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	891a      	ldrh	r2, [r3, #8]
 8011d5a:	7dfb      	ldrb	r3, [r7, #23]
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d205      	bcs.n	8011d6e <tcp_create_segment+0x86>
 8011d62:	4b2b      	ldr	r3, [pc, #172]	; (8011e10 <tcp_create_segment+0x128>)
 8011d64:	22b0      	movs	r2, #176	; 0xb0
 8011d66:	492e      	ldr	r1, [pc, #184]	; (8011e20 <tcp_create_segment+0x138>)
 8011d68:	482b      	ldr	r0, [pc, #172]	; (8011e18 <tcp_create_segment+0x130>)
 8011d6a:	f005 fd2b 	bl	80177c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	891a      	ldrh	r2, [r3, #8]
 8011d72:	7dfb      	ldrb	r3, [r7, #23]
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	1ad3      	subs	r3, r2, r3
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011d7e:	2114      	movs	r1, #20
 8011d80:	68b8      	ldr	r0, [r7, #8]
 8011d82:	f7fb fd29 	bl	800d7d8 <pbuf_add_header>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d004      	beq.n	8011d96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011d8c:	6938      	ldr	r0, [r7, #16]
 8011d8e:	f7fd f8ce 	bl	800ef2e <tcp_seg_free>
    return NULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	e037      	b.n	8011e06 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	8ada      	ldrh	r2, [r3, #22]
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	68dc      	ldr	r4, [r3, #12]
 8011da8:	4610      	mov	r0, r2
 8011daa:	f7fa fa4d 	bl	800c248 <lwip_htons>
 8011dae:	4603      	mov	r3, r0
 8011db0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	8b1a      	ldrh	r2, [r3, #24]
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	68dc      	ldr	r4, [r3, #12]
 8011dba:	4610      	mov	r0, r2
 8011dbc:	f7fa fa44 	bl	800c248 <lwip_htons>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	68dc      	ldr	r4, [r3, #12]
 8011dc8:	6838      	ldr	r0, [r7, #0]
 8011dca:	f7fa fa52 	bl	800c272 <lwip_htonl>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011dd2:	7dfb      	ldrb	r3, [r7, #23]
 8011dd4:	089b      	lsrs	r3, r3, #2
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	3305      	adds	r3, #5
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	031b      	lsls	r3, r3, #12
 8011de0:	b29a      	uxth	r2, r3
 8011de2:	79fb      	ldrb	r3, [r7, #7]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	4313      	orrs	r3, r2
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	68dc      	ldr	r4, [r3, #12]
 8011dee:	4610      	mov	r0, r2
 8011df0:	f7fa fa2a 	bl	800c248 <lwip_htons>
 8011df4:	4603      	mov	r3, r0
 8011df6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	749a      	strb	r2, [r3, #18]
 8011e00:	2200      	movs	r2, #0
 8011e02:	74da      	strb	r2, [r3, #19]
  return seg;
 8011e04:	693b      	ldr	r3, [r7, #16]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	371c      	adds	r7, #28
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd90      	pop	{r4, r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	0801a01c 	.word	0x0801a01c
 8011e14:	0801a050 	.word	0x0801a050
 8011e18:	0801a070 	.word	0x0801a070
 8011e1c:	0801a098 	.word	0x0801a098
 8011e20:	0801a0bc 	.word	0x0801a0bc

08011e24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011e24:	b590      	push	{r4, r7, lr}
 8011e26:	b08b      	sub	sp, #44	; 0x2c
 8011e28:	af02      	add	r7, sp, #8
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011e30:	2300      	movs	r3, #0
 8011e32:	61fb      	str	r3, [r7, #28]
 8011e34:	2300      	movs	r3, #0
 8011e36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d106      	bne.n	8011e50 <tcp_split_unsent_seg+0x2c>
 8011e42:	4b95      	ldr	r3, [pc, #596]	; (8012098 <tcp_split_unsent_seg+0x274>)
 8011e44:	f240 324b 	movw	r2, #843	; 0x34b
 8011e48:	4994      	ldr	r1, [pc, #592]	; (801209c <tcp_split_unsent_seg+0x278>)
 8011e4a:	4895      	ldr	r0, [pc, #596]	; (80120a0 <tcp_split_unsent_seg+0x27c>)
 8011e4c:	f005 fcba 	bl	80177c4 <iprintf>

  useg = pcb->unsent;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d102      	bne.n	8011e62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e60:	e116      	b.n	8012090 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011e62:	887b      	ldrh	r3, [r7, #2]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d109      	bne.n	8011e7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011e68:	4b8b      	ldr	r3, [pc, #556]	; (8012098 <tcp_split_unsent_seg+0x274>)
 8011e6a:	f240 3253 	movw	r2, #851	; 0x353
 8011e6e:	498d      	ldr	r1, [pc, #564]	; (80120a4 <tcp_split_unsent_seg+0x280>)
 8011e70:	488b      	ldr	r0, [pc, #556]	; (80120a0 <tcp_split_unsent_seg+0x27c>)
 8011e72:	f005 fca7 	bl	80177c4 <iprintf>
    return ERR_VAL;
 8011e76:	f06f 0305 	mvn.w	r3, #5
 8011e7a:	e109      	b.n	8012090 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	891b      	ldrh	r3, [r3, #8]
 8011e80:	887a      	ldrh	r2, [r7, #2]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d301      	bcc.n	8011e8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011e86:	2300      	movs	r3, #0
 8011e88:	e102      	b.n	8012090 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e8e:	887a      	ldrh	r2, [r7, #2]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d906      	bls.n	8011ea2 <tcp_split_unsent_seg+0x7e>
 8011e94:	4b80      	ldr	r3, [pc, #512]	; (8012098 <tcp_split_unsent_seg+0x274>)
 8011e96:	f240 325b 	movw	r2, #859	; 0x35b
 8011e9a:	4983      	ldr	r1, [pc, #524]	; (80120a8 <tcp_split_unsent_seg+0x284>)
 8011e9c:	4880      	ldr	r0, [pc, #512]	; (80120a0 <tcp_split_unsent_seg+0x27c>)
 8011e9e:	f005 fc91 	bl	80177c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	891b      	ldrh	r3, [r3, #8]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d106      	bne.n	8011eb8 <tcp_split_unsent_seg+0x94>
 8011eaa:	4b7b      	ldr	r3, [pc, #492]	; (8012098 <tcp_split_unsent_seg+0x274>)
 8011eac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011eb0:	497e      	ldr	r1, [pc, #504]	; (80120ac <tcp_split_unsent_seg+0x288>)
 8011eb2:	487b      	ldr	r0, [pc, #492]	; (80120a0 <tcp_split_unsent_seg+0x27c>)
 8011eb4:	f005 fc86 	bl	80177c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	7a9b      	ldrb	r3, [r3, #10]
 8011ebc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011ebe:	7bfb      	ldrb	r3, [r7, #15]
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	f003 0304 	and.w	r3, r3, #4
 8011ec8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	891a      	ldrh	r2, [r3, #8]
 8011ece:	887b      	ldrh	r3, [r7, #2]
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011ed4:	7bbb      	ldrb	r3, [r7, #14]
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	89bb      	ldrh	r3, [r7, #12]
 8011eda:	4413      	add	r3, r2
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	2036      	movs	r0, #54	; 0x36
 8011ee6:	f7fb fa29 	bl	800d33c <pbuf_alloc>
 8011eea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f000 80b7 	beq.w	8012062 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	891a      	ldrh	r2, [r3, #8]
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	891b      	ldrh	r3, [r3, #8]
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	887b      	ldrh	r3, [r7, #2]
 8011f04:	4413      	add	r3, r2
 8011f06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	6858      	ldr	r0, [r3, #4]
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	685a      	ldr	r2, [r3, #4]
 8011f10:	7bbb      	ldrb	r3, [r7, #14]
 8011f12:	18d1      	adds	r1, r2, r3
 8011f14:	897b      	ldrh	r3, [r7, #10]
 8011f16:	89ba      	ldrh	r2, [r7, #12]
 8011f18:	f7fb feee 	bl	800dcf8 <pbuf_copy_partial>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	461a      	mov	r2, r3
 8011f20:	89bb      	ldrh	r3, [r7, #12]
 8011f22:	4293      	cmp	r3, r2
 8011f24:	f040 809f 	bne.w	8012066 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fa f989 	bl	800c248 <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011f40:	2300      	movs	r3, #0
 8011f42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011f44:	7efb      	ldrb	r3, [r7, #27]
 8011f46:	f003 0308 	and.w	r3, r3, #8
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d007      	beq.n	8011f5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011f4e:	7efb      	ldrb	r3, [r7, #27]
 8011f50:	f023 0308 	bic.w	r3, r3, #8
 8011f54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011f56:	7ebb      	ldrb	r3, [r7, #26]
 8011f58:	f043 0308 	orr.w	r3, r3, #8
 8011f5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011f5e:	7efb      	ldrb	r3, [r7, #27]
 8011f60:	f003 0301 	and.w	r3, r3, #1
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d007      	beq.n	8011f78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011f68:	7efb      	ldrb	r3, [r7, #27]
 8011f6a:	f023 0301 	bic.w	r3, r3, #1
 8011f6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011f70:	7ebb      	ldrb	r3, [r7, #26]
 8011f72:	f043 0301 	orr.w	r3, r3, #1
 8011f76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fa f977 	bl	800c272 <lwip_htonl>
 8011f84:	4602      	mov	r2, r0
 8011f86:	887b      	ldrh	r3, [r7, #2]
 8011f88:	18d1      	adds	r1, r2, r3
 8011f8a:	7eba      	ldrb	r2, [r7, #26]
 8011f8c:	7bfb      	ldrb	r3, [r7, #15]
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	460b      	mov	r3, r1
 8011f92:	6939      	ldr	r1, [r7, #16]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff fea7 	bl	8011ce8 <tcp_create_segment>
 8011f9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d063      	beq.n	801206a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fb fd34 	bl	800da14 <pbuf_clen>
 8011fac:	4603      	mov	r3, r0
 8011fae:	461a      	mov	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fb6:	1a9b      	subs	r3, r3, r2
 8011fb8:	b29a      	uxth	r2, r3
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	6858      	ldr	r0, [r3, #4]
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	891a      	ldrh	r2, [r3, #8]
 8011fca:	89bb      	ldrh	r3, [r7, #12]
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	f7fb fb11 	bl	800d5f8 <pbuf_realloc>
  useg->len -= remainder;
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	891a      	ldrh	r2, [r3, #8]
 8011fda:	89bb      	ldrh	r3, [r7, #12]
 8011fdc:	1ad3      	subs	r3, r2, r3
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	899b      	ldrh	r3, [r3, #12]
 8011fea:	b29c      	uxth	r4, r3
 8011fec:	7efb      	ldrb	r3, [r7, #27]
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7fa f929 	bl	800c248 <lwip_htons>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	4322      	orrs	r2, r4
 8012000:	b292      	uxth	r2, r2
 8012002:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	4618      	mov	r0, r3
 801200a:	f7fb fd03 	bl	800da14 <pbuf_clen>
 801200e:	4603      	mov	r3, r0
 8012010:	461a      	mov	r2, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012018:	4413      	add	r3, r2
 801201a:	b29a      	uxth	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	4618      	mov	r0, r3
 8012028:	f7fb fcf4 	bl	800da14 <pbuf_clen>
 801202c:	4603      	mov	r3, r0
 801202e:	461a      	mov	r2, r3
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012036:	4413      	add	r3, r2
 8012038:	b29a      	uxth	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	69fb      	ldr	r3, [r7, #28]
 8012046:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	69fa      	ldr	r2, [r7, #28]
 801204c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d103      	bne.n	801205e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2200      	movs	r2, #0
 801205a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801205e:	2300      	movs	r3, #0
 8012060:	e016      	b.n	8012090 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012062:	bf00      	nop
 8012064:	e002      	b.n	801206c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012066:	bf00      	nop
 8012068:	e000      	b.n	801206c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801206a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d006      	beq.n	8012080 <tcp_split_unsent_seg+0x25c>
 8012072:	4b09      	ldr	r3, [pc, #36]	; (8012098 <tcp_split_unsent_seg+0x274>)
 8012074:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012078:	490d      	ldr	r1, [pc, #52]	; (80120b0 <tcp_split_unsent_seg+0x28c>)
 801207a:	4809      	ldr	r0, [pc, #36]	; (80120a0 <tcp_split_unsent_seg+0x27c>)
 801207c:	f005 fba2 	bl	80177c4 <iprintf>
  if (p != NULL) {
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d002      	beq.n	801208c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012086:	6938      	ldr	r0, [r7, #16]
 8012088:	f7fb fc3c 	bl	800d904 <pbuf_free>
  }

  return ERR_MEM;
 801208c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012090:	4618      	mov	r0, r3
 8012092:	3724      	adds	r7, #36	; 0x24
 8012094:	46bd      	mov	sp, r7
 8012096:	bd90      	pop	{r4, r7, pc}
 8012098:	0801a01c 	.word	0x0801a01c
 801209c:	0801a3b0 	.word	0x0801a3b0
 80120a0:	0801a070 	.word	0x0801a070
 80120a4:	0801a3d4 	.word	0x0801a3d4
 80120a8:	0801a3f8 	.word	0x0801a3f8
 80120ac:	0801a408 	.word	0x0801a408
 80120b0:	0801a418 	.word	0x0801a418

080120b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80120b4:	b590      	push	{r4, r7, lr}
 80120b6:	b085      	sub	sp, #20
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d106      	bne.n	80120d0 <tcp_send_fin+0x1c>
 80120c2:	4b21      	ldr	r3, [pc, #132]	; (8012148 <tcp_send_fin+0x94>)
 80120c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80120c8:	4920      	ldr	r1, [pc, #128]	; (801214c <tcp_send_fin+0x98>)
 80120ca:	4821      	ldr	r0, [pc, #132]	; (8012150 <tcp_send_fin+0x9c>)
 80120cc:	f005 fb7a 	bl	80177c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d02e      	beq.n	8012136 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	e002      	b.n	80120e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d1f8      	bne.n	80120e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	68db      	ldr	r3, [r3, #12]
 80120f2:	899b      	ldrh	r3, [r3, #12]
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fa f8a6 	bl	800c248 <lwip_htons>
 80120fc:	4603      	mov	r3, r0
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	f003 0307 	and.w	r3, r3, #7
 8012104:	2b00      	cmp	r3, #0
 8012106:	d116      	bne.n	8012136 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	899b      	ldrh	r3, [r3, #12]
 801210e:	b29c      	uxth	r4, r3
 8012110:	2001      	movs	r0, #1
 8012112:	f7fa f899 	bl	800c248 <lwip_htons>
 8012116:	4603      	mov	r3, r0
 8012118:	461a      	mov	r2, r3
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	68db      	ldr	r3, [r3, #12]
 801211e:	4322      	orrs	r2, r4
 8012120:	b292      	uxth	r2, r2
 8012122:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	8b5b      	ldrh	r3, [r3, #26]
 8012128:	f043 0320 	orr.w	r3, r3, #32
 801212c:	b29a      	uxth	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	e004      	b.n	8012140 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012136:	2101      	movs	r1, #1
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 f80b 	bl	8012154 <tcp_enqueue_flags>
 801213e:	4603      	mov	r3, r0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3714      	adds	r7, #20
 8012144:	46bd      	mov	sp, r7
 8012146:	bd90      	pop	{r4, r7, pc}
 8012148:	0801a01c 	.word	0x0801a01c
 801214c:	0801a424 	.word	0x0801a424
 8012150:	0801a070 	.word	0x0801a070

08012154 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af02      	add	r7, sp, #8
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	460b      	mov	r3, r1
 801215e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012160:	2300      	movs	r3, #0
 8012162:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012164:	2300      	movs	r3, #0
 8012166:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012168:	78fb      	ldrb	r3, [r7, #3]
 801216a:	f003 0303 	and.w	r3, r3, #3
 801216e:	2b00      	cmp	r3, #0
 8012170:	d106      	bne.n	8012180 <tcp_enqueue_flags+0x2c>
 8012172:	4b67      	ldr	r3, [pc, #412]	; (8012310 <tcp_enqueue_flags+0x1bc>)
 8012174:	f240 4211 	movw	r2, #1041	; 0x411
 8012178:	4966      	ldr	r1, [pc, #408]	; (8012314 <tcp_enqueue_flags+0x1c0>)
 801217a:	4867      	ldr	r0, [pc, #412]	; (8012318 <tcp_enqueue_flags+0x1c4>)
 801217c:	f005 fb22 	bl	80177c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d106      	bne.n	8012194 <tcp_enqueue_flags+0x40>
 8012186:	4b62      	ldr	r3, [pc, #392]	; (8012310 <tcp_enqueue_flags+0x1bc>)
 8012188:	f240 4213 	movw	r2, #1043	; 0x413
 801218c:	4963      	ldr	r1, [pc, #396]	; (801231c <tcp_enqueue_flags+0x1c8>)
 801218e:	4862      	ldr	r0, [pc, #392]	; (8012318 <tcp_enqueue_flags+0x1c4>)
 8012190:	f005 fb18 	bl	80177c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012194:	78fb      	ldrb	r3, [r7, #3]
 8012196:	f003 0302 	and.w	r3, r3, #2
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801219e:	2301      	movs	r3, #1
 80121a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80121a2:	7ffb      	ldrb	r3, [r7, #31]
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	f003 0304 	and.w	r3, r3, #4
 80121ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80121ae:	7dfb      	ldrb	r3, [r7, #23]
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80121b6:	4619      	mov	r1, r3
 80121b8:	2036      	movs	r0, #54	; 0x36
 80121ba:	f7fb f8bf 	bl	800d33c <pbuf_alloc>
 80121be:	6138      	str	r0, [r7, #16]
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d109      	bne.n	80121da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8b5b      	ldrh	r3, [r3, #26]
 80121ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80121d4:	f04f 33ff 	mov.w	r3, #4294967295
 80121d8:	e095      	b.n	8012306 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	895a      	ldrh	r2, [r3, #10]
 80121de:	7dfb      	ldrb	r3, [r7, #23]
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d206      	bcs.n	80121f4 <tcp_enqueue_flags+0xa0>
 80121e6:	4b4a      	ldr	r3, [pc, #296]	; (8012310 <tcp_enqueue_flags+0x1bc>)
 80121e8:	f240 4239 	movw	r2, #1081	; 0x439
 80121ec:	494c      	ldr	r1, [pc, #304]	; (8012320 <tcp_enqueue_flags+0x1cc>)
 80121ee:	484a      	ldr	r0, [pc, #296]	; (8012318 <tcp_enqueue_flags+0x1c4>)
 80121f0:	f005 fae8 	bl	80177c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80121f8:	78fa      	ldrb	r2, [r7, #3]
 80121fa:	7ffb      	ldrb	r3, [r7, #31]
 80121fc:	9300      	str	r3, [sp, #0]
 80121fe:	460b      	mov	r3, r1
 8012200:	6939      	ldr	r1, [r7, #16]
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7ff fd70 	bl	8011ce8 <tcp_create_segment>
 8012208:	60f8      	str	r0, [r7, #12]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d109      	bne.n	8012224 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	8b5b      	ldrh	r3, [r3, #26]
 8012214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012218:	b29a      	uxth	r2, r3
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801221e:	f04f 33ff 	mov.w	r3, #4294967295
 8012222:	e070      	b.n	8012306 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	f003 0303 	and.w	r3, r3, #3
 801222c:	2b00      	cmp	r3, #0
 801222e:	d006      	beq.n	801223e <tcp_enqueue_flags+0xea>
 8012230:	4b37      	ldr	r3, [pc, #220]	; (8012310 <tcp_enqueue_flags+0x1bc>)
 8012232:	f240 4242 	movw	r2, #1090	; 0x442
 8012236:	493b      	ldr	r1, [pc, #236]	; (8012324 <tcp_enqueue_flags+0x1d0>)
 8012238:	4837      	ldr	r0, [pc, #220]	; (8012318 <tcp_enqueue_flags+0x1c4>)
 801223a:	f005 fac3 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	891b      	ldrh	r3, [r3, #8]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d006      	beq.n	8012254 <tcp_enqueue_flags+0x100>
 8012246:	4b32      	ldr	r3, [pc, #200]	; (8012310 <tcp_enqueue_flags+0x1bc>)
 8012248:	f240 4243 	movw	r2, #1091	; 0x443
 801224c:	4936      	ldr	r1, [pc, #216]	; (8012328 <tcp_enqueue_flags+0x1d4>)
 801224e:	4832      	ldr	r0, [pc, #200]	; (8012318 <tcp_enqueue_flags+0x1c4>)
 8012250:	f005 fab8 	bl	80177c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012258:	2b00      	cmp	r3, #0
 801225a:	d103      	bne.n	8012264 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	66da      	str	r2, [r3, #108]	; 0x6c
 8012262:	e00d      	b.n	8012280 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012268:	61bb      	str	r3, [r7, #24]
 801226a:	e002      	b.n	8012272 <tcp_enqueue_flags+0x11e>
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	61bb      	str	r3, [r7, #24]
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d1f8      	bne.n	801226c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2200      	movs	r2, #0
 8012284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012288:	78fb      	ldrb	r3, [r7, #3]
 801228a:	f003 0302 	and.w	r3, r3, #2
 801228e:	2b00      	cmp	r3, #0
 8012290:	d104      	bne.n	801229c <tcp_enqueue_flags+0x148>
 8012292:	78fb      	ldrb	r3, [r7, #3]
 8012294:	f003 0301 	and.w	r3, r3, #1
 8012298:	2b00      	cmp	r3, #0
 801229a:	d004      	beq.n	80122a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122a0:	1c5a      	adds	r2, r3, #1
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80122a6:	78fb      	ldrb	r3, [r7, #3]
 80122a8:	f003 0301 	and.w	r3, r3, #1
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d006      	beq.n	80122be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	8b5b      	ldrh	r3, [r3, #26]
 80122b4:	f043 0320 	orr.w	r3, r3, #32
 80122b8:	b29a      	uxth	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fb fba6 	bl	800da14 <pbuf_clen>
 80122c8:	4603      	mov	r3, r0
 80122ca:	461a      	mov	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122d2:	4413      	add	r3, r2
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00e      	beq.n	8012304 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d10a      	bne.n	8012304 <tcp_enqueue_flags+0x1b0>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d106      	bne.n	8012304 <tcp_enqueue_flags+0x1b0>
 80122f6:	4b06      	ldr	r3, [pc, #24]	; (8012310 <tcp_enqueue_flags+0x1bc>)
 80122f8:	f240 4265 	movw	r2, #1125	; 0x465
 80122fc:	490b      	ldr	r1, [pc, #44]	; (801232c <tcp_enqueue_flags+0x1d8>)
 80122fe:	4806      	ldr	r0, [pc, #24]	; (8012318 <tcp_enqueue_flags+0x1c4>)
 8012300:	f005 fa60 	bl	80177c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012304:	2300      	movs	r3, #0
}
 8012306:	4618      	mov	r0, r3
 8012308:	3720      	adds	r7, #32
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop
 8012310:	0801a01c 	.word	0x0801a01c
 8012314:	0801a440 	.word	0x0801a440
 8012318:	0801a070 	.word	0x0801a070
 801231c:	0801a498 	.word	0x0801a498
 8012320:	0801a4b8 	.word	0x0801a4b8
 8012324:	0801a4f4 	.word	0x0801a4f4
 8012328:	0801a50c 	.word	0x0801a50c
 801232c:	0801a538 	.word	0x0801a538

08012330 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012330:	b5b0      	push	{r4, r5, r7, lr}
 8012332:	b08a      	sub	sp, #40	; 0x28
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_output+0x1c>
 801233e:	4b8a      	ldr	r3, [pc, #552]	; (8012568 <tcp_output+0x238>)
 8012340:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012344:	4989      	ldr	r1, [pc, #548]	; (801256c <tcp_output+0x23c>)
 8012346:	488a      	ldr	r0, [pc, #552]	; (8012570 <tcp_output+0x240>)
 8012348:	f005 fa3c 	bl	80177c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	7d1b      	ldrb	r3, [r3, #20]
 8012350:	2b01      	cmp	r3, #1
 8012352:	d106      	bne.n	8012362 <tcp_output+0x32>
 8012354:	4b84      	ldr	r3, [pc, #528]	; (8012568 <tcp_output+0x238>)
 8012356:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801235a:	4986      	ldr	r1, [pc, #536]	; (8012574 <tcp_output+0x244>)
 801235c:	4884      	ldr	r0, [pc, #528]	; (8012570 <tcp_output+0x240>)
 801235e:	f005 fa31 	bl	80177c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012362:	4b85      	ldr	r3, [pc, #532]	; (8012578 <tcp_output+0x248>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	429a      	cmp	r2, r3
 801236a:	d101      	bne.n	8012370 <tcp_output+0x40>
    return ERR_OK;
 801236c:	2300      	movs	r3, #0
 801236e:	e1ce      	b.n	801270e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801237c:	4293      	cmp	r3, r2
 801237e:	bf28      	it	cs
 8012380:	4613      	movcs	r3, r2
 8012382:	b29b      	uxth	r3, r3
 8012384:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801238a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10b      	bne.n	80123aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8b5b      	ldrh	r3, [r3, #26]
 8012396:	f003 0302 	and.w	r3, r3, #2
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 81aa 	beq.w	80126f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f000 fdcb 	bl	8012f3c <tcp_send_empty_ack>
 80123a6:	4603      	mov	r3, r0
 80123a8:	e1b1      	b.n	801270e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80123aa:	6879      	ldr	r1, [r7, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	3304      	adds	r3, #4
 80123b0:	461a      	mov	r2, r3
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff fc7c 	bl	8011cb0 <tcp_route>
 80123b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d102      	bne.n	80123c6 <tcp_output+0x96>
    return ERR_RTE;
 80123c0:	f06f 0303 	mvn.w	r3, #3
 80123c4:	e1a3      	b.n	801270e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d003      	beq.n	80123d4 <tcp_output+0xa4>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d111      	bne.n	80123f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d002      	beq.n	80123e0 <tcp_output+0xb0>
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	3304      	adds	r3, #4
 80123de:	e000      	b.n	80123e2 <tcp_output+0xb2>
 80123e0:	2300      	movs	r3, #0
 80123e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d102      	bne.n	80123f0 <tcp_output+0xc0>
      return ERR_RTE;
 80123ea:	f06f 0303 	mvn.w	r3, #3
 80123ee:	e18e      	b.n	801270e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80123f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fa:	68db      	ldr	r3, [r3, #12]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	4618      	mov	r0, r3
 8012400:	f7f9 ff37 	bl	800c272 <lwip_htonl>
 8012404:	4602      	mov	r2, r0
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801240e:	8912      	ldrh	r2, [r2, #8]
 8012410:	4413      	add	r3, r2
 8012412:	69ba      	ldr	r2, [r7, #24]
 8012414:	429a      	cmp	r2, r3
 8012416:	d227      	bcs.n	8012468 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801241e:	461a      	mov	r2, r3
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	4293      	cmp	r3, r2
 8012424:	d114      	bne.n	8012450 <tcp_output+0x120>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801242a:	2b00      	cmp	r3, #0
 801242c:	d110      	bne.n	8012450 <tcp_output+0x120>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10b      	bne.n	8012450 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2201      	movs	r2, #1
 8012444:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	8b5b      	ldrh	r3, [r3, #26]
 8012454:	f003 0302 	and.w	r3, r3, #2
 8012458:	2b00      	cmp	r3, #0
 801245a:	f000 814d 	beq.w	80126f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 fd6c 	bl	8012f3c <tcp_send_empty_ack>
 8012464:	4603      	mov	r3, r0
 8012466:	e152      	b.n	801270e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012474:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	2b00      	cmp	r3, #0
 801247a:	f000 811c 	beq.w	80126b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801247e:	e002      	b.n	8012486 <tcp_output+0x156>
 8012480:	6a3b      	ldr	r3, [r7, #32]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	623b      	str	r3, [r7, #32]
 8012486:	6a3b      	ldr	r3, [r7, #32]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d1f8      	bne.n	8012480 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801248e:	e112      	b.n	80126b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	899b      	ldrh	r3, [r3, #12]
 8012496:	b29b      	uxth	r3, r3
 8012498:	4618      	mov	r0, r3
 801249a:	f7f9 fed5 	bl	800c248 <lwip_htons>
 801249e:	4603      	mov	r3, r0
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	f003 0304 	and.w	r3, r3, #4
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d006      	beq.n	80124b8 <tcp_output+0x188>
 80124aa:	4b2f      	ldr	r3, [pc, #188]	; (8012568 <tcp_output+0x238>)
 80124ac:	f240 5236 	movw	r2, #1334	; 0x536
 80124b0:	4932      	ldr	r1, [pc, #200]	; (801257c <tcp_output+0x24c>)
 80124b2:	482f      	ldr	r0, [pc, #188]	; (8012570 <tcp_output+0x240>)
 80124b4:	f005 f986 	bl	80177c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d01f      	beq.n	8012500 <tcp_output+0x1d0>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	8b5b      	ldrh	r3, [r3, #26]
 80124c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d119      	bne.n	8012500 <tcp_output+0x1d0>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00b      	beq.n	80124ec <tcp_output+0x1bc>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d110      	bne.n	8012500 <tcp_output+0x1d0>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e2:	891a      	ldrh	r2, [r3, #8]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d209      	bcs.n	8012500 <tcp_output+0x1d0>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d004      	beq.n	8012500 <tcp_output+0x1d0>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124fc:	2b08      	cmp	r3, #8
 80124fe:	d901      	bls.n	8012504 <tcp_output+0x1d4>
 8012500:	2301      	movs	r3, #1
 8012502:	e000      	b.n	8012506 <tcp_output+0x1d6>
 8012504:	2300      	movs	r3, #0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	8b5b      	ldrh	r3, [r3, #26]
 801250e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012512:	2b00      	cmp	r3, #0
 8012514:	f000 80e4 	beq.w	80126e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	7d1b      	ldrb	r3, [r3, #20]
 801251c:	2b02      	cmp	r3, #2
 801251e:	d00d      	beq.n	801253c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	899b      	ldrh	r3, [r3, #12]
 8012526:	b29c      	uxth	r4, r3
 8012528:	2010      	movs	r0, #16
 801252a:	f7f9 fe8d 	bl	800c248 <lwip_htons>
 801252e:	4603      	mov	r3, r0
 8012530:	461a      	mov	r2, r3
 8012532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012534:	68db      	ldr	r3, [r3, #12]
 8012536:	4322      	orrs	r2, r4
 8012538:	b292      	uxth	r2, r2
 801253a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801253c:	697a      	ldr	r2, [r7, #20]
 801253e:	6879      	ldr	r1, [r7, #4]
 8012540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012542:	f000 f909 	bl	8012758 <tcp_output_segment>
 8012546:	4603      	mov	r3, r0
 8012548:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d016      	beq.n	8012580 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	8b5b      	ldrh	r3, [r3, #26]
 8012556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	835a      	strh	r2, [r3, #26]
      return err;
 8012560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012564:	e0d3      	b.n	801270e <tcp_output+0x3de>
 8012566:	bf00      	nop
 8012568:	0801a01c 	.word	0x0801a01c
 801256c:	0801a560 	.word	0x0801a560
 8012570:	0801a070 	.word	0x0801a070
 8012574:	0801a578 	.word	0x0801a578
 8012578:	20008ea8 	.word	0x20008ea8
 801257c:	0801a5a0 	.word	0x0801a5a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	7d1b      	ldrb	r3, [r3, #20]
 801258c:	2b02      	cmp	r3, #2
 801258e:	d006      	beq.n	801259e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	8b5b      	ldrh	r3, [r3, #26]
 8012594:	f023 0303 	bic.w	r3, r3, #3
 8012598:	b29a      	uxth	r2, r3
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f9 fe64 	bl	800c272 <lwip_htonl>
 80125aa:	4604      	mov	r4, r0
 80125ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ae:	891b      	ldrh	r3, [r3, #8]
 80125b0:	461d      	mov	r5, r3
 80125b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	899b      	ldrh	r3, [r3, #12]
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7f9 fe44 	bl	800c248 <lwip_htons>
 80125c0:	4603      	mov	r3, r0
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	f003 0303 	and.w	r3, r3, #3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <tcp_output+0x2a0>
 80125cc:	2301      	movs	r3, #1
 80125ce:	e000      	b.n	80125d2 <tcp_output+0x2a2>
 80125d0:	2300      	movs	r3, #0
 80125d2:	442b      	add	r3, r5
 80125d4:	4423      	add	r3, r4
 80125d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	1ad3      	subs	r3, r2, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	da02      	bge.n	80125ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	68ba      	ldr	r2, [r7, #8]
 80125e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80125ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ec:	891b      	ldrh	r3, [r3, #8]
 80125ee:	461c      	mov	r4, r3
 80125f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	899b      	ldrh	r3, [r3, #12]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f9 fe25 	bl	800c248 <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	b2db      	uxtb	r3, r3
 8012602:	f003 0303 	and.w	r3, r3, #3
 8012606:	2b00      	cmp	r3, #0
 8012608:	d001      	beq.n	801260e <tcp_output+0x2de>
 801260a:	2301      	movs	r3, #1
 801260c:	e000      	b.n	8012610 <tcp_output+0x2e0>
 801260e:	2300      	movs	r3, #0
 8012610:	4423      	add	r3, r4
 8012612:	2b00      	cmp	r3, #0
 8012614:	d049      	beq.n	80126aa <tcp_output+0x37a>
      seg->next = NULL;
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	2200      	movs	r2, #0
 801261a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012620:	2b00      	cmp	r3, #0
 8012622:	d105      	bne.n	8012630 <tcp_output+0x300>
        pcb->unacked = seg;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012628:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262c:	623b      	str	r3, [r7, #32]
 801262e:	e03f      	b.n	80126b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	4618      	mov	r0, r3
 8012638:	f7f9 fe1b 	bl	800c272 <lwip_htonl>
 801263c:	4604      	mov	r4, r0
 801263e:	6a3b      	ldr	r3, [r7, #32]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	4618      	mov	r0, r3
 8012646:	f7f9 fe14 	bl	800c272 <lwip_htonl>
 801264a:	4603      	mov	r3, r0
 801264c:	1ae3      	subs	r3, r4, r3
 801264e:	2b00      	cmp	r3, #0
 8012650:	da24      	bge.n	801269c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	3370      	adds	r3, #112	; 0x70
 8012656:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012658:	e002      	b.n	8012660 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d011      	beq.n	801268c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	68db      	ldr	r3, [r3, #12]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f7f9 fdfe 	bl	800c272 <lwip_htonl>
 8012676:	4604      	mov	r4, r0
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	4618      	mov	r0, r3
 8012680:	f7f9 fdf7 	bl	800c272 <lwip_htonl>
 8012684:	4603      	mov	r3, r0
 8012686:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012688:	2b00      	cmp	r3, #0
 801268a:	dbe6      	blt.n	801265a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012692:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	e009      	b.n	80126b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80126a2:	6a3b      	ldr	r3, [r7, #32]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	623b      	str	r3, [r7, #32]
 80126a8:	e002      	b.n	80126b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80126aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126ac:	f7fc fc3f 	bl	800ef2e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80126b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d012      	beq.n	80126e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80126bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7f9 fdd5 	bl	800c272 <lwip_htonl>
 80126c8:	4602      	mov	r2, r0
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126ce:	1ad3      	subs	r3, r2, r3
 80126d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126d2:	8912      	ldrh	r2, [r2, #8]
 80126d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80126d6:	69ba      	ldr	r2, [r7, #24]
 80126d8:	429a      	cmp	r2, r3
 80126da:	f4bf aed9 	bcs.w	8012490 <tcp_output+0x160>
 80126de:	e000      	b.n	80126e2 <tcp_output+0x3b2>
      break;
 80126e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d108      	bne.n	80126fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80126f2:	e004      	b.n	80126fe <tcp_output+0x3ce>
    goto output_done;
 80126f4:	bf00      	nop
 80126f6:	e002      	b.n	80126fe <tcp_output+0x3ce>
    goto output_done;
 80126f8:	bf00      	nop
 80126fa:	e000      	b.n	80126fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80126fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	8b5b      	ldrh	r3, [r3, #26]
 8012702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012706:	b29a      	uxth	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3728      	adds	r7, #40	; 0x28
 8012712:	46bd      	mov	sp, r7
 8012714:	bdb0      	pop	{r4, r5, r7, pc}
 8012716:	bf00      	nop

08012718 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d106      	bne.n	8012734 <tcp_output_segment_busy+0x1c>
 8012726:	4b09      	ldr	r3, [pc, #36]	; (801274c <tcp_output_segment_busy+0x34>)
 8012728:	f240 529a 	movw	r2, #1434	; 0x59a
 801272c:	4908      	ldr	r1, [pc, #32]	; (8012750 <tcp_output_segment_busy+0x38>)
 801272e:	4809      	ldr	r0, [pc, #36]	; (8012754 <tcp_output_segment_busy+0x3c>)
 8012730:	f005 f848 	bl	80177c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	7b9b      	ldrb	r3, [r3, #14]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d001      	beq.n	8012742 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801273e:	2301      	movs	r3, #1
 8012740:	e000      	b.n	8012744 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012742:	2300      	movs	r3, #0
}
 8012744:	4618      	mov	r0, r3
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	0801a01c 	.word	0x0801a01c
 8012750:	0801a5b8 	.word	0x0801a5b8
 8012754:	0801a070 	.word	0x0801a070

08012758 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012758:	b5b0      	push	{r4, r5, r7, lr}
 801275a:	b08c      	sub	sp, #48	; 0x30
 801275c:	af04      	add	r7, sp, #16
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d106      	bne.n	8012778 <tcp_output_segment+0x20>
 801276a:	4b63      	ldr	r3, [pc, #396]	; (80128f8 <tcp_output_segment+0x1a0>)
 801276c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012770:	4962      	ldr	r1, [pc, #392]	; (80128fc <tcp_output_segment+0x1a4>)
 8012772:	4863      	ldr	r0, [pc, #396]	; (8012900 <tcp_output_segment+0x1a8>)
 8012774:	f005 f826 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d106      	bne.n	801278c <tcp_output_segment+0x34>
 801277e:	4b5e      	ldr	r3, [pc, #376]	; (80128f8 <tcp_output_segment+0x1a0>)
 8012780:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012784:	495f      	ldr	r1, [pc, #380]	; (8012904 <tcp_output_segment+0x1ac>)
 8012786:	485e      	ldr	r0, [pc, #376]	; (8012900 <tcp_output_segment+0x1a8>)
 8012788:	f005 f81c 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d106      	bne.n	80127a0 <tcp_output_segment+0x48>
 8012792:	4b59      	ldr	r3, [pc, #356]	; (80128f8 <tcp_output_segment+0x1a0>)
 8012794:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012798:	495b      	ldr	r1, [pc, #364]	; (8012908 <tcp_output_segment+0x1b0>)
 801279a:	4859      	ldr	r0, [pc, #356]	; (8012900 <tcp_output_segment+0x1a8>)
 801279c:	f005 f812 	bl	80177c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f7ff ffb9 	bl	8012718 <tcp_output_segment_busy>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d001      	beq.n	80127b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80127ac:	2300      	movs	r3, #0
 80127ae:	e09f      	b.n	80128f0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	68dc      	ldr	r4, [r3, #12]
 80127b8:	4610      	mov	r0, r2
 80127ba:	f7f9 fd5a 	bl	800c272 <lwip_htonl>
 80127be:	4603      	mov	r3, r0
 80127c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	68dc      	ldr	r4, [r3, #12]
 80127ca:	4610      	mov	r0, r2
 80127cc:	f7f9 fd3c 	bl	800c248 <lwip_htons>
 80127d0:	4603      	mov	r3, r0
 80127d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d8:	68ba      	ldr	r2, [r7, #8]
 80127da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80127dc:	441a      	add	r2, r3
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	68db      	ldr	r3, [r3, #12]
 80127e6:	3314      	adds	r3, #20
 80127e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	7a9b      	ldrb	r3, [r3, #10]
 80127ee:	f003 0301 	and.w	r3, r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d015      	beq.n	8012822 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	3304      	adds	r3, #4
 80127fa:	461a      	mov	r2, r3
 80127fc:	6879      	ldr	r1, [r7, #4]
 80127fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012802:	f7fc fe8b 	bl	800f51c <tcp_eff_send_mss_netif>
 8012806:	4603      	mov	r3, r0
 8012808:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801280a:	8b7b      	ldrh	r3, [r7, #26]
 801280c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012810:	4618      	mov	r0, r3
 8012812:	f7f9 fd2e 	bl	800c272 <lwip_htonl>
 8012816:	4602      	mov	r2, r0
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	3304      	adds	r3, #4
 8012820:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012828:	2b00      	cmp	r3, #0
 801282a:	da02      	bge.n	8012832 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2200      	movs	r2, #0
 8012830:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10c      	bne.n	8012854 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801283a:	4b34      	ldr	r3, [pc, #208]	; (801290c <tcp_output_segment+0x1b4>)
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	f7f9 fd12 	bl	800c272 <lwip_htonl>
 801284e:	4602      	mov	r2, r0
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	68da      	ldr	r2, [r3, #12]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	1ad3      	subs	r3, r2, r3
 8012860:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	8959      	ldrh	r1, [r3, #10]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	8b3a      	ldrh	r2, [r7, #24]
 801286e:	1a8a      	subs	r2, r1, r2
 8012870:	b292      	uxth	r2, r2
 8012872:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	8919      	ldrh	r1, [r3, #8]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	8b3a      	ldrh	r2, [r7, #24]
 8012880:	1a8a      	subs	r2, r1, r2
 8012882:	b292      	uxth	r2, r2
 8012884:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	68fa      	ldr	r2, [r7, #12]
 801288c:	68d2      	ldr	r2, [r2, #12]
 801288e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	2200      	movs	r2, #0
 8012896:	741a      	strb	r2, [r3, #16]
 8012898:	2200      	movs	r2, #0
 801289a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	f103 0214 	add.w	r2, r3, #20
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	7a9b      	ldrb	r3, [r3, #10]
 80128a8:	009b      	lsls	r3, r3, #2
 80128aa:	f003 0304 	and.w	r3, r3, #4
 80128ae:	4413      	add	r3, r2
 80128b0:	69fa      	ldr	r2, [r7, #28]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d006      	beq.n	80128c4 <tcp_output_segment+0x16c>
 80128b6:	4b10      	ldr	r3, [pc, #64]	; (80128f8 <tcp_output_segment+0x1a0>)
 80128b8:	f240 621c 	movw	r2, #1564	; 0x61c
 80128bc:	4914      	ldr	r1, [pc, #80]	; (8012910 <tcp_output_segment+0x1b8>)
 80128be:	4810      	ldr	r0, [pc, #64]	; (8012900 <tcp_output_segment+0x1a8>)
 80128c0:	f004 ff80 	bl	80177c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6858      	ldr	r0, [r3, #4]
 80128c8:	68b9      	ldr	r1, [r7, #8]
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	1d1c      	adds	r4, r3, #4
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	7add      	ldrb	r5, [r3, #11]
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	7a9b      	ldrb	r3, [r3, #10]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	9202      	str	r2, [sp, #8]
 80128da:	2206      	movs	r2, #6
 80128dc:	9201      	str	r2, [sp, #4]
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	462b      	mov	r3, r5
 80128e2:	4622      	mov	r2, r4
 80128e4:	f002 fdf0 	bl	80154c8 <ip4_output_if>
 80128e8:	4603      	mov	r3, r0
 80128ea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80128ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bdb0      	pop	{r4, r5, r7, pc}
 80128f8:	0801a01c 	.word	0x0801a01c
 80128fc:	0801a5e0 	.word	0x0801a5e0
 8012900:	0801a070 	.word	0x0801a070
 8012904:	0801a600 	.word	0x0801a600
 8012908:	0801a620 	.word	0x0801a620
 801290c:	20008e5c 	.word	0x20008e5c
 8012910:	0801a644 	.word	0x0801a644

08012914 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012914:	b5b0      	push	{r4, r5, r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d106      	bne.n	8012930 <tcp_rexmit_rto_prepare+0x1c>
 8012922:	4b31      	ldr	r3, [pc, #196]	; (80129e8 <tcp_rexmit_rto_prepare+0xd4>)
 8012924:	f240 6263 	movw	r2, #1635	; 0x663
 8012928:	4930      	ldr	r1, [pc, #192]	; (80129ec <tcp_rexmit_rto_prepare+0xd8>)
 801292a:	4831      	ldr	r0, [pc, #196]	; (80129f0 <tcp_rexmit_rto_prepare+0xdc>)
 801292c:	f004 ff4a 	bl	80177c4 <iprintf>

  if (pcb->unacked == NULL) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012934:	2b00      	cmp	r3, #0
 8012936:	d102      	bne.n	801293e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012938:	f06f 0305 	mvn.w	r3, #5
 801293c:	e050      	b.n	80129e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012942:	60fb      	str	r3, [r7, #12]
 8012944:	e00b      	b.n	801295e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f7ff fee6 	bl	8012718 <tcp_output_segment_busy>
 801294c:	4603      	mov	r3, r0
 801294e:	2b00      	cmp	r3, #0
 8012950:	d002      	beq.n	8012958 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012952:	f06f 0305 	mvn.w	r3, #5
 8012956:	e043      	b.n	80129e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	60fb      	str	r3, [r7, #12]
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d1ef      	bne.n	8012946 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012966:	68f8      	ldr	r0, [r7, #12]
 8012968:	f7ff fed6 	bl	8012718 <tcp_output_segment_busy>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d002      	beq.n	8012978 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012972:	f06f 0305 	mvn.w	r3, #5
 8012976:	e033      	b.n	80129e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	8b5b      	ldrh	r3, [r3, #26]
 8012992:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012996:	b29a      	uxth	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7f9 fc65 	bl	800c272 <lwip_htonl>
 80129a8:	4604      	mov	r4, r0
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	891b      	ldrh	r3, [r3, #8]
 80129ae:	461d      	mov	r5, r3
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	899b      	ldrh	r3, [r3, #12]
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f9 fc45 	bl	800c248 <lwip_htons>
 80129be:	4603      	mov	r3, r0
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	f003 0303 	and.w	r3, r3, #3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d001      	beq.n	80129ce <tcp_rexmit_rto_prepare+0xba>
 80129ca:	2301      	movs	r3, #1
 80129cc:	e000      	b.n	80129d0 <tcp_rexmit_rto_prepare+0xbc>
 80129ce:	2300      	movs	r3, #0
 80129d0:	442b      	add	r3, r5
 80129d2:	18e2      	adds	r2, r4, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80129de:	2300      	movs	r3, #0
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bdb0      	pop	{r4, r5, r7, pc}
 80129e8:	0801a01c 	.word	0x0801a01c
 80129ec:	0801a658 	.word	0x0801a658
 80129f0:	0801a070 	.word	0x0801a070

080129f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_rexmit_rto_commit+0x1c>
 8012a02:	4b0d      	ldr	r3, [pc, #52]	; (8012a38 <tcp_rexmit_rto_commit+0x44>)
 8012a04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012a08:	490c      	ldr	r1, [pc, #48]	; (8012a3c <tcp_rexmit_rto_commit+0x48>)
 8012a0a:	480d      	ldr	r0, [pc, #52]	; (8012a40 <tcp_rexmit_rto_commit+0x4c>)
 8012a0c:	f004 feda 	bl	80177c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a16:	2bff      	cmp	r3, #255	; 0xff
 8012a18:	d007      	beq.n	8012a2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a20:	3301      	adds	r3, #1
 8012a22:	b2da      	uxtb	r2, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f7ff fc80 	bl	8012330 <tcp_output>
}
 8012a30:	bf00      	nop
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	0801a01c 	.word	0x0801a01c
 8012a3c:	0801a67c 	.word	0x0801a67c
 8012a40:	0801a070 	.word	0x0801a070

08012a44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d106      	bne.n	8012a60 <tcp_rexmit_rto+0x1c>
 8012a52:	4b0a      	ldr	r3, [pc, #40]	; (8012a7c <tcp_rexmit_rto+0x38>)
 8012a54:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012a58:	4909      	ldr	r1, [pc, #36]	; (8012a80 <tcp_rexmit_rto+0x3c>)
 8012a5a:	480a      	ldr	r0, [pc, #40]	; (8012a84 <tcp_rexmit_rto+0x40>)
 8012a5c:	f004 feb2 	bl	80177c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff ff57 	bl	8012914 <tcp_rexmit_rto_prepare>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d102      	bne.n	8012a72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7ff ffc1 	bl	80129f4 <tcp_rexmit_rto_commit>
  }
}
 8012a72:	bf00      	nop
 8012a74:	3708      	adds	r7, #8
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	0801a01c 	.word	0x0801a01c
 8012a80:	0801a6a0 	.word	0x0801a6a0
 8012a84:	0801a070 	.word	0x0801a070

08012a88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012a88:	b590      	push	{r4, r7, lr}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d106      	bne.n	8012aa4 <tcp_rexmit+0x1c>
 8012a96:	4b2f      	ldr	r3, [pc, #188]	; (8012b54 <tcp_rexmit+0xcc>)
 8012a98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012a9c:	492e      	ldr	r1, [pc, #184]	; (8012b58 <tcp_rexmit+0xd0>)
 8012a9e:	482f      	ldr	r0, [pc, #188]	; (8012b5c <tcp_rexmit+0xd4>)
 8012aa0:	f004 fe90 	bl	80177c4 <iprintf>

  if (pcb->unacked == NULL) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d102      	bne.n	8012ab2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012aac:	f06f 0305 	mvn.w	r3, #5
 8012ab0:	e04c      	b.n	8012b4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ab6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012ab8:	68b8      	ldr	r0, [r7, #8]
 8012aba:	f7ff fe2d 	bl	8012718 <tcp_output_segment_busy>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ac4:	f06f 0305 	mvn.w	r3, #5
 8012ac8:	e040      	b.n	8012b4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	681a      	ldr	r2, [r3, #0]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	336c      	adds	r3, #108	; 0x6c
 8012ad6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ad8:	e002      	b.n	8012ae0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d011      	beq.n	8012b0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7f9 fbbe 	bl	800c272 <lwip_htonl>
 8012af6:	4604      	mov	r4, r0
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7f9 fbb7 	bl	800c272 <lwip_htonl>
 8012b04:	4603      	mov	r3, r0
 8012b06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	dbe6      	blt.n	8012ada <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d103      	bne.n	8012b2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2200      	movs	r2, #0
 8012b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b30:	2bff      	cmp	r3, #255	; 0xff
 8012b32:	d007      	beq.n	8012b44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	b2da      	uxtb	r2, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3714      	adds	r7, #20
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd90      	pop	{r4, r7, pc}
 8012b54:	0801a01c 	.word	0x0801a01c
 8012b58:	0801a6bc 	.word	0x0801a6bc
 8012b5c:	0801a070 	.word	0x0801a070

08012b60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d106      	bne.n	8012b7c <tcp_rexmit_fast+0x1c>
 8012b6e:	4b2a      	ldr	r3, [pc, #168]	; (8012c18 <tcp_rexmit_fast+0xb8>)
 8012b70:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012b74:	4929      	ldr	r1, [pc, #164]	; (8012c1c <tcp_rexmit_fast+0xbc>)
 8012b76:	482a      	ldr	r0, [pc, #168]	; (8012c20 <tcp_rexmit_fast+0xc0>)
 8012b78:	f004 fe24 	bl	80177c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d045      	beq.n	8012c10 <tcp_rexmit_fast+0xb0>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	8b5b      	ldrh	r3, [r3, #26]
 8012b88:	f003 0304 	and.w	r3, r3, #4
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d13f      	bne.n	8012c10 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7ff ff79 	bl	8012a88 <tcp_rexmit>
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d139      	bne.n	8012c10 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	bf28      	it	cs
 8012bac:	4613      	movcs	r3, r2
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	da00      	bge.n	8012bb6 <tcp_rexmit_fast+0x56>
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	105b      	asrs	r3, r3, #1
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bcc:	005b      	lsls	r3, r3, #1
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d206      	bcs.n	8012be0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bd6:	005b      	lsls	r3, r3, #1
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bea:	4619      	mov	r1, r3
 8012bec:	0049      	lsls	r1, r1, #1
 8012bee:	440b      	add	r3, r1
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	4413      	add	r3, r2
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	8b5b      	ldrh	r3, [r3, #26]
 8012c00:	f043 0304 	orr.w	r3, r3, #4
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012c10:	bf00      	nop
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	0801a01c 	.word	0x0801a01c
 8012c1c:	0801a6d4 	.word	0x0801a6d4
 8012c20:	0801a070 	.word	0x0801a070

08012c24 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b086      	sub	sp, #24
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	607b      	str	r3, [r7, #4]
 8012c2e:	460b      	mov	r3, r1
 8012c30:	817b      	strh	r3, [r7, #10]
 8012c32:	4613      	mov	r3, r2
 8012c34:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012c36:	897a      	ldrh	r2, [r7, #10]
 8012c38:	893b      	ldrh	r3, [r7, #8]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	3314      	adds	r3, #20
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c46:	4619      	mov	r1, r3
 8012c48:	2022      	movs	r0, #34	; 0x22
 8012c4a:	f7fa fb77 	bl	800d33c <pbuf_alloc>
 8012c4e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d04d      	beq.n	8012cf2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012c56:	897b      	ldrh	r3, [r7, #10]
 8012c58:	3313      	adds	r3, #19
 8012c5a:	697a      	ldr	r2, [r7, #20]
 8012c5c:	8952      	ldrh	r2, [r2, #10]
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	db06      	blt.n	8012c70 <tcp_output_alloc_header_common+0x4c>
 8012c62:	4b26      	ldr	r3, [pc, #152]	; (8012cfc <tcp_output_alloc_header_common+0xd8>)
 8012c64:	f240 7223 	movw	r2, #1827	; 0x723
 8012c68:	4925      	ldr	r1, [pc, #148]	; (8012d00 <tcp_output_alloc_header_common+0xdc>)
 8012c6a:	4826      	ldr	r0, [pc, #152]	; (8012d04 <tcp_output_alloc_header_common+0xe0>)
 8012c6c:	f004 fdaa 	bl	80177c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012c76:	8c3b      	ldrh	r3, [r7, #32]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7f9 fae5 	bl	800c248 <lwip_htons>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	461a      	mov	r2, r3
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7f9 fadd 	bl	800c248 <lwip_htons>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	461a      	mov	r2, r3
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f7f9 fae8 	bl	800c272 <lwip_htonl>
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ca8:	897b      	ldrh	r3, [r7, #10]
 8012caa:	089b      	lsrs	r3, r3, #2
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	3305      	adds	r3, #5
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	031b      	lsls	r3, r3, #12
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7f9 fac1 	bl	800c248 <lwip_htons>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	461a      	mov	r2, r3
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012cce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7f9 fab9 	bl	800c248 <lwip_htons>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	461a      	mov	r2, r3
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	741a      	strb	r2, [r3, #16]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	2200      	movs	r2, #0
 8012cec:	749a      	strb	r2, [r3, #18]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012cf2:	697b      	ldr	r3, [r7, #20]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3718      	adds	r7, #24
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	0801a01c 	.word	0x0801a01c
 8012d00:	0801a6f4 	.word	0x0801a6f4
 8012d04:	0801a070 	.word	0x0801a070

08012d08 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012d08:	b5b0      	push	{r4, r5, r7, lr}
 8012d0a:	b08a      	sub	sp, #40	; 0x28
 8012d0c:	af04      	add	r7, sp, #16
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	607b      	str	r3, [r7, #4]
 8012d12:	460b      	mov	r3, r1
 8012d14:	817b      	strh	r3, [r7, #10]
 8012d16:	4613      	mov	r3, r2
 8012d18:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d106      	bne.n	8012d2e <tcp_output_alloc_header+0x26>
 8012d20:	4b15      	ldr	r3, [pc, #84]	; (8012d78 <tcp_output_alloc_header+0x70>)
 8012d22:	f240 7242 	movw	r2, #1858	; 0x742
 8012d26:	4915      	ldr	r1, [pc, #84]	; (8012d7c <tcp_output_alloc_header+0x74>)
 8012d28:	4815      	ldr	r0, [pc, #84]	; (8012d80 <tcp_output_alloc_header+0x78>)
 8012d2a:	f004 fd4b 	bl	80177c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	8adb      	ldrh	r3, [r3, #22]
 8012d36:	68fa      	ldr	r2, [r7, #12]
 8012d38:	8b12      	ldrh	r2, [r2, #24]
 8012d3a:	68f9      	ldr	r1, [r7, #12]
 8012d3c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012d3e:	893d      	ldrh	r5, [r7, #8]
 8012d40:	897c      	ldrh	r4, [r7, #10]
 8012d42:	9103      	str	r1, [sp, #12]
 8012d44:	2110      	movs	r1, #16
 8012d46:	9102      	str	r1, [sp, #8]
 8012d48:	9201      	str	r2, [sp, #4]
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	462a      	mov	r2, r5
 8012d50:	4621      	mov	r1, r4
 8012d52:	f7ff ff67 	bl	8012c24 <tcp_output_alloc_header_common>
 8012d56:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d006      	beq.n	8012d6c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012d66:	441a      	add	r2, r3
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012d6c:	697b      	ldr	r3, [r7, #20]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3718      	adds	r7, #24
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bdb0      	pop	{r4, r5, r7, pc}
 8012d76:	bf00      	nop
 8012d78:	0801a01c 	.word	0x0801a01c
 8012d7c:	0801a724 	.word	0x0801a724
 8012d80:	0801a070 	.word	0x0801a070

08012d84 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b088      	sub	sp, #32
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	4611      	mov	r1, r2
 8012d90:	461a      	mov	r2, r3
 8012d92:	460b      	mov	r3, r1
 8012d94:	71fb      	strb	r3, [r7, #7]
 8012d96:	4613      	mov	r3, r2
 8012d98:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d106      	bne.n	8012db2 <tcp_output_fill_options+0x2e>
 8012da4:	4b13      	ldr	r3, [pc, #76]	; (8012df4 <tcp_output_fill_options+0x70>)
 8012da6:	f240 7256 	movw	r2, #1878	; 0x756
 8012daa:	4913      	ldr	r1, [pc, #76]	; (8012df8 <tcp_output_fill_options+0x74>)
 8012dac:	4813      	ldr	r0, [pc, #76]	; (8012dfc <tcp_output_fill_options+0x78>)
 8012dae:	f004 fd09 	bl	80177c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012db8:	69bb      	ldr	r3, [r7, #24]
 8012dba:	3314      	adds	r3, #20
 8012dbc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	f103 0214 	add.w	r2, r3, #20
 8012dc4:	8bfb      	ldrh	r3, [r7, #30]
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	4619      	mov	r1, r3
 8012dca:	79fb      	ldrb	r3, [r7, #7]
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	f003 0304 	and.w	r3, r3, #4
 8012dd2:	440b      	add	r3, r1
 8012dd4:	4413      	add	r3, r2
 8012dd6:	697a      	ldr	r2, [r7, #20]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d006      	beq.n	8012dea <tcp_output_fill_options+0x66>
 8012ddc:	4b05      	ldr	r3, [pc, #20]	; (8012df4 <tcp_output_fill_options+0x70>)
 8012dde:	f240 7275 	movw	r2, #1909	; 0x775
 8012de2:	4907      	ldr	r1, [pc, #28]	; (8012e00 <tcp_output_fill_options+0x7c>)
 8012de4:	4805      	ldr	r0, [pc, #20]	; (8012dfc <tcp_output_fill_options+0x78>)
 8012de6:	f004 fced 	bl	80177c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012dea:	bf00      	nop
 8012dec:	3720      	adds	r7, #32
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	0801a01c 	.word	0x0801a01c
 8012df8:	0801a74c 	.word	0x0801a74c
 8012dfc:	0801a070 	.word	0x0801a070
 8012e00:	0801a644 	.word	0x0801a644

08012e04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b08a      	sub	sp, #40	; 0x28
 8012e08:	af04      	add	r7, sp, #16
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
 8012e10:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d106      	bne.n	8012e26 <tcp_output_control_segment+0x22>
 8012e18:	4b1c      	ldr	r3, [pc, #112]	; (8012e8c <tcp_output_control_segment+0x88>)
 8012e1a:	f240 7287 	movw	r2, #1927	; 0x787
 8012e1e:	491c      	ldr	r1, [pc, #112]	; (8012e90 <tcp_output_control_segment+0x8c>)
 8012e20:	481c      	ldr	r0, [pc, #112]	; (8012e94 <tcp_output_control_segment+0x90>)
 8012e22:	f004 fccf 	bl	80177c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012e26:	683a      	ldr	r2, [r7, #0]
 8012e28:	6879      	ldr	r1, [r7, #4]
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f7fe ff40 	bl	8011cb0 <tcp_route>
 8012e30:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d102      	bne.n	8012e3e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012e38:	23fc      	movs	r3, #252	; 0xfc
 8012e3a:	75fb      	strb	r3, [r7, #23]
 8012e3c:	e01c      	b.n	8012e78 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d006      	beq.n	8012e52 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	7adb      	ldrb	r3, [r3, #11]
 8012e48:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7a9b      	ldrb	r3, [r3, #10]
 8012e4e:	757b      	strb	r3, [r7, #21]
 8012e50:	e003      	b.n	8012e5a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012e52:	23ff      	movs	r3, #255	; 0xff
 8012e54:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012e56:	2300      	movs	r3, #0
 8012e58:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012e5a:	7dba      	ldrb	r2, [r7, #22]
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	9302      	str	r3, [sp, #8]
 8012e60:	2306      	movs	r3, #6
 8012e62:	9301      	str	r3, [sp, #4]
 8012e64:	7d7b      	ldrb	r3, [r7, #21]
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	4613      	mov	r3, r2
 8012e6a:	683a      	ldr	r2, [r7, #0]
 8012e6c:	6879      	ldr	r1, [r7, #4]
 8012e6e:	68b8      	ldr	r0, [r7, #8]
 8012e70:	f002 fb2a 	bl	80154c8 <ip4_output_if>
 8012e74:	4603      	mov	r3, r0
 8012e76:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012e78:	68b8      	ldr	r0, [r7, #8]
 8012e7a:	f7fa fd43 	bl	800d904 <pbuf_free>
  return err;
 8012e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3718      	adds	r7, #24
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	0801a01c 	.word	0x0801a01c
 8012e90:	0801a774 	.word	0x0801a774
 8012e94:	0801a070 	.word	0x0801a070

08012e98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012e98:	b590      	push	{r4, r7, lr}
 8012e9a:	b08b      	sub	sp, #44	; 0x2c
 8012e9c:	af04      	add	r7, sp, #16
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
 8012ea4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d106      	bne.n	8012eba <tcp_rst+0x22>
 8012eac:	4b1f      	ldr	r3, [pc, #124]	; (8012f2c <tcp_rst+0x94>)
 8012eae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012eb2:	491f      	ldr	r1, [pc, #124]	; (8012f30 <tcp_rst+0x98>)
 8012eb4:	481f      	ldr	r0, [pc, #124]	; (8012f34 <tcp_rst+0x9c>)
 8012eb6:	f004 fc85 	bl	80177c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d106      	bne.n	8012ece <tcp_rst+0x36>
 8012ec0:	4b1a      	ldr	r3, [pc, #104]	; (8012f2c <tcp_rst+0x94>)
 8012ec2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012ec6:	491c      	ldr	r1, [pc, #112]	; (8012f38 <tcp_rst+0xa0>)
 8012ec8:	481a      	ldr	r0, [pc, #104]	; (8012f34 <tcp_rst+0x9c>)
 8012eca:	f004 fc7b 	bl	80177c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ece:	2300      	movs	r3, #0
 8012ed0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012ed2:	f246 0308 	movw	r3, #24584	; 0x6008
 8012ed6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012ed8:	7dfb      	ldrb	r3, [r7, #23]
 8012eda:	b29c      	uxth	r4, r3
 8012edc:	68b8      	ldr	r0, [r7, #8]
 8012ede:	f7f9 f9c8 	bl	800c272 <lwip_htonl>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	8abb      	ldrh	r3, [r7, #20]
 8012ee6:	9303      	str	r3, [sp, #12]
 8012ee8:	2314      	movs	r3, #20
 8012eea:	9302      	str	r3, [sp, #8]
 8012eec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012eee:	9301      	str	r3, [sp, #4]
 8012ef0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	4621      	mov	r1, r4
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff fe92 	bl	8012c24 <tcp_output_alloc_header_common>
 8012f00:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d00c      	beq.n	8012f22 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f08:	7dfb      	ldrb	r3, [r7, #23]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	6939      	ldr	r1, [r7, #16]
 8012f0e:	68f8      	ldr	r0, [r7, #12]
 8012f10:	f7ff ff38 	bl	8012d84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f16:	683a      	ldr	r2, [r7, #0]
 8012f18:	6939      	ldr	r1, [r7, #16]
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	f7ff ff72 	bl	8012e04 <tcp_output_control_segment>
 8012f20:	e000      	b.n	8012f24 <tcp_rst+0x8c>
    return;
 8012f22:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012f24:	371c      	adds	r7, #28
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd90      	pop	{r4, r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	0801a01c 	.word	0x0801a01c
 8012f30:	0801a7a0 	.word	0x0801a7a0
 8012f34:	0801a070 	.word	0x0801a070
 8012f38:	0801a7bc 	.word	0x0801a7bc

08012f3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012f3c:	b590      	push	{r4, r7, lr}
 8012f3e:	b087      	sub	sp, #28
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012f44:	2300      	movs	r3, #0
 8012f46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d106      	bne.n	8012f60 <tcp_send_empty_ack+0x24>
 8012f52:	4b28      	ldr	r3, [pc, #160]	; (8012ff4 <tcp_send_empty_ack+0xb8>)
 8012f54:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012f58:	4927      	ldr	r1, [pc, #156]	; (8012ff8 <tcp_send_empty_ack+0xbc>)
 8012f5a:	4828      	ldr	r0, [pc, #160]	; (8012ffc <tcp_send_empty_ack+0xc0>)
 8012f5c:	f004 fc32 	bl	80177c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f60:	7dfb      	ldrb	r3, [r7, #23]
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	f003 0304 	and.w	r3, r3, #4
 8012f6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012f6c:	7d7b      	ldrb	r3, [r7, #21]
 8012f6e:	b29c      	uxth	r4, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7f9 f97c 	bl	800c272 <lwip_htonl>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4621      	mov	r1, r4
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7ff fec1 	bl	8012d08 <tcp_output_alloc_header>
 8012f86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d109      	bne.n	8012fa2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	8b5b      	ldrh	r3, [r3, #26]
 8012f92:	f043 0303 	orr.w	r3, r3, #3
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012f9c:	f06f 0301 	mvn.w	r3, #1
 8012fa0:	e023      	b.n	8012fea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012fa2:	7dbb      	ldrb	r3, [r7, #22]
 8012fa4:	7dfa      	ldrb	r2, [r7, #23]
 8012fa6:	6939      	ldr	r1, [r7, #16]
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f7ff feeb 	bl	8012d84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	6939      	ldr	r1, [r7, #16]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7ff ff24 	bl	8012e04 <tcp_output_control_segment>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d007      	beq.n	8012fd8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	8b5b      	ldrh	r3, [r3, #26]
 8012fcc:	f043 0303 	orr.w	r3, r3, #3
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	835a      	strh	r2, [r3, #26]
 8012fd6:	e006      	b.n	8012fe6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	8b5b      	ldrh	r3, [r3, #26]
 8012fdc:	f023 0303 	bic.w	r3, r3, #3
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	371c      	adds	r7, #28
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd90      	pop	{r4, r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	0801a01c 	.word	0x0801a01c
 8012ff8:	0801a7d8 	.word	0x0801a7d8
 8012ffc:	0801a070 	.word	0x0801a070

08013000 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013000:	b590      	push	{r4, r7, lr}
 8013002:	b087      	sub	sp, #28
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013008:	2300      	movs	r3, #0
 801300a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d106      	bne.n	8013020 <tcp_keepalive+0x20>
 8013012:	4b18      	ldr	r3, [pc, #96]	; (8013074 <tcp_keepalive+0x74>)
 8013014:	f640 0224 	movw	r2, #2084	; 0x824
 8013018:	4917      	ldr	r1, [pc, #92]	; (8013078 <tcp_keepalive+0x78>)
 801301a:	4818      	ldr	r0, [pc, #96]	; (801307c <tcp_keepalive+0x7c>)
 801301c:	f004 fbd2 	bl	80177c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013020:	7dfb      	ldrb	r3, [r7, #23]
 8013022:	b29c      	uxth	r4, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013028:	3b01      	subs	r3, #1
 801302a:	4618      	mov	r0, r3
 801302c:	f7f9 f921 	bl	800c272 <lwip_htonl>
 8013030:	4603      	mov	r3, r0
 8013032:	2200      	movs	r2, #0
 8013034:	4621      	mov	r1, r4
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7ff fe66 	bl	8012d08 <tcp_output_alloc_header>
 801303c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d102      	bne.n	801304a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013044:	f04f 33ff 	mov.w	r3, #4294967295
 8013048:	e010      	b.n	801306c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	2200      	movs	r2, #0
 801304e:	6939      	ldr	r1, [r7, #16]
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7ff fe97 	bl	8012d84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	3304      	adds	r3, #4
 801305c:	6939      	ldr	r1, [r7, #16]
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f7ff fed0 	bl	8012e04 <tcp_output_control_segment>
 8013064:	4603      	mov	r3, r0
 8013066:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801306c:	4618      	mov	r0, r3
 801306e:	371c      	adds	r7, #28
 8013070:	46bd      	mov	sp, r7
 8013072:	bd90      	pop	{r4, r7, pc}
 8013074:	0801a01c 	.word	0x0801a01c
 8013078:	0801a7f8 	.word	0x0801a7f8
 801307c:	0801a070 	.word	0x0801a070

08013080 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013080:	b590      	push	{r4, r7, lr}
 8013082:	b08b      	sub	sp, #44	; 0x2c
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013088:	2300      	movs	r3, #0
 801308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d106      	bne.n	80130a2 <tcp_zero_window_probe+0x22>
 8013094:	4b4c      	ldr	r3, [pc, #304]	; (80131c8 <tcp_zero_window_probe+0x148>)
 8013096:	f640 024f 	movw	r2, #2127	; 0x84f
 801309a:	494c      	ldr	r1, [pc, #304]	; (80131cc <tcp_zero_window_probe+0x14c>)
 801309c:	484c      	ldr	r0, [pc, #304]	; (80131d0 <tcp_zero_window_probe+0x150>)
 801309e:	f004 fb91 	bl	80177c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80130a8:	6a3b      	ldr	r3, [r7, #32]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d101      	bne.n	80130b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e086      	b.n	80131c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130b8:	2bff      	cmp	r3, #255	; 0xff
 80130ba:	d007      	beq.n	80130cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130c2:	3301      	adds	r3, #1
 80130c4:	b2da      	uxtb	r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80130cc:	6a3b      	ldr	r3, [r7, #32]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	899b      	ldrh	r3, [r3, #12]
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7f9 f8b7 	bl	800c248 <lwip_htons>
 80130da:	4603      	mov	r3, r0
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	f003 0301 	and.w	r3, r3, #1
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d005      	beq.n	80130f2 <tcp_zero_window_probe+0x72>
 80130e6:	6a3b      	ldr	r3, [r7, #32]
 80130e8:	891b      	ldrh	r3, [r3, #8]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d101      	bne.n	80130f2 <tcp_zero_window_probe+0x72>
 80130ee:	2301      	movs	r3, #1
 80130f0:	e000      	b.n	80130f4 <tcp_zero_window_probe+0x74>
 80130f2:	2300      	movs	r3, #0
 80130f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80130f6:	7ffb      	ldrb	r3, [r7, #31]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	bf0c      	ite	eq
 80130fc:	2301      	moveq	r3, #1
 80130fe:	2300      	movne	r3, #0
 8013100:	b2db      	uxtb	r3, r3
 8013102:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013108:	b299      	uxth	r1, r3
 801310a:	6a3b      	ldr	r3, [r7, #32]
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	8bba      	ldrh	r2, [r7, #28]
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7ff fdf8 	bl	8012d08 <tcp_output_alloc_header>
 8013118:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d102      	bne.n	8013126 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013120:	f04f 33ff 	mov.w	r3, #4294967295
 8013124:	e04c      	b.n	80131c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801312c:	7ffb      	ldrb	r3, [r7, #31]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d011      	beq.n	8013156 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	899b      	ldrh	r3, [r3, #12]
 8013136:	b29b      	uxth	r3, r3
 8013138:	b21b      	sxth	r3, r3
 801313a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801313e:	b21c      	sxth	r4, r3
 8013140:	2011      	movs	r0, #17
 8013142:	f7f9 f881 	bl	800c248 <lwip_htons>
 8013146:	4603      	mov	r3, r0
 8013148:	b21b      	sxth	r3, r3
 801314a:	4323      	orrs	r3, r4
 801314c:	b21b      	sxth	r3, r3
 801314e:	b29a      	uxth	r2, r3
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	819a      	strh	r2, [r3, #12]
 8013154:	e010      	b.n	8013178 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	3314      	adds	r3, #20
 801315c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801315e:	6a3b      	ldr	r3, [r7, #32]
 8013160:	6858      	ldr	r0, [r3, #4]
 8013162:	6a3b      	ldr	r3, [r7, #32]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	891a      	ldrh	r2, [r3, #8]
 8013168:	6a3b      	ldr	r3, [r7, #32]
 801316a:	891b      	ldrh	r3, [r3, #8]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	b29b      	uxth	r3, r3
 8013170:	2201      	movs	r2, #1
 8013172:	6939      	ldr	r1, [r7, #16]
 8013174:	f7fa fdc0 	bl	800dcf8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013178:	6a3b      	ldr	r3, [r7, #32]
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	4618      	mov	r0, r3
 8013180:	f7f9 f877 	bl	800c272 <lwip_htonl>
 8013184:	4603      	mov	r3, r0
 8013186:	3301      	adds	r3, #1
 8013188:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	2b00      	cmp	r3, #0
 8013194:	da02      	bge.n	801319c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801319c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131a0:	2200      	movs	r2, #0
 80131a2:	69b9      	ldr	r1, [r7, #24]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7ff fded 	bl	8012d84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	3304      	adds	r3, #4
 80131b0:	69b9      	ldr	r1, [r7, #24]
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7ff fe26 	bl	8012e04 <tcp_output_control_segment>
 80131b8:	4603      	mov	r3, r0
 80131ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80131bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	372c      	adds	r7, #44	; 0x2c
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd90      	pop	{r4, r7, pc}
 80131c8:	0801a01c 	.word	0x0801a01c
 80131cc:	0801a814 	.word	0x0801a814
 80131d0:	0801a070 	.word	0x0801a070

080131d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80131dc:	f7fa ff0c 	bl	800dff8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80131e0:	4b0a      	ldr	r3, [pc, #40]	; (801320c <tcpip_tcp_timer+0x38>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d103      	bne.n	80131f0 <tcpip_tcp_timer+0x1c>
 80131e8:	4b09      	ldr	r3, [pc, #36]	; (8013210 <tcpip_tcp_timer+0x3c>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d005      	beq.n	80131fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80131f0:	2200      	movs	r2, #0
 80131f2:	4908      	ldr	r1, [pc, #32]	; (8013214 <tcpip_tcp_timer+0x40>)
 80131f4:	20fa      	movs	r0, #250	; 0xfa
 80131f6:	f000 f8f3 	bl	80133e0 <sys_timeout>
 80131fa:	e003      	b.n	8013204 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80131fc:	4b06      	ldr	r3, [pc, #24]	; (8013218 <tcpip_tcp_timer+0x44>)
 80131fe:	2200      	movs	r2, #0
 8013200:	601a      	str	r2, [r3, #0]
  }
}
 8013202:	bf00      	nop
 8013204:	bf00      	nop
 8013206:	3708      	adds	r7, #8
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	20008e68 	.word	0x20008e68
 8013210:	20008e6c 	.word	0x20008e6c
 8013214:	080131d5 	.word	0x080131d5
 8013218:	20008eb4 	.word	0x20008eb4

0801321c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013220:	4b0a      	ldr	r3, [pc, #40]	; (801324c <tcp_timer_needed+0x30>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d10f      	bne.n	8013248 <tcp_timer_needed+0x2c>
 8013228:	4b09      	ldr	r3, [pc, #36]	; (8013250 <tcp_timer_needed+0x34>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d103      	bne.n	8013238 <tcp_timer_needed+0x1c>
 8013230:	4b08      	ldr	r3, [pc, #32]	; (8013254 <tcp_timer_needed+0x38>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d007      	beq.n	8013248 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013238:	4b04      	ldr	r3, [pc, #16]	; (801324c <tcp_timer_needed+0x30>)
 801323a:	2201      	movs	r2, #1
 801323c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801323e:	2200      	movs	r2, #0
 8013240:	4905      	ldr	r1, [pc, #20]	; (8013258 <tcp_timer_needed+0x3c>)
 8013242:	20fa      	movs	r0, #250	; 0xfa
 8013244:	f000 f8cc 	bl	80133e0 <sys_timeout>
  }
}
 8013248:	bf00      	nop
 801324a:	bd80      	pop	{r7, pc}
 801324c:	20008eb4 	.word	0x20008eb4
 8013250:	20008e68 	.word	0x20008e68
 8013254:	20008e6c 	.word	0x20008e6c
 8013258:	080131d5 	.word	0x080131d5

0801325c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013268:	2006      	movs	r0, #6
 801326a:	f7f9 fc65 	bl	800cb38 <memp_malloc>
 801326e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d109      	bne.n	801328a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d151      	bne.n	8013320 <sys_timeout_abs+0xc4>
 801327c:	4b2a      	ldr	r3, [pc, #168]	; (8013328 <sys_timeout_abs+0xcc>)
 801327e:	22be      	movs	r2, #190	; 0xbe
 8013280:	492a      	ldr	r1, [pc, #168]	; (801332c <sys_timeout_abs+0xd0>)
 8013282:	482b      	ldr	r0, [pc, #172]	; (8013330 <sys_timeout_abs+0xd4>)
 8013284:	f004 fa9e 	bl	80177c4 <iprintf>
    return;
 8013288:	e04a      	b.n	8013320 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	2200      	movs	r2, #0
 801328e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	68ba      	ldr	r2, [r7, #8]
 8013294:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80132a2:	4b24      	ldr	r3, [pc, #144]	; (8013334 <sys_timeout_abs+0xd8>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d103      	bne.n	80132b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80132aa:	4a22      	ldr	r2, [pc, #136]	; (8013334 <sys_timeout_abs+0xd8>)
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	6013      	str	r3, [r2, #0]
    return;
 80132b0:	e037      	b.n	8013322 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	685a      	ldr	r2, [r3, #4]
 80132b6:	4b1f      	ldr	r3, [pc, #124]	; (8013334 <sys_timeout_abs+0xd8>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	0fdb      	lsrs	r3, r3, #31
 80132c0:	f003 0301 	and.w	r3, r3, #1
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d007      	beq.n	80132da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80132ca:	4b1a      	ldr	r3, [pc, #104]	; (8013334 <sys_timeout_abs+0xd8>)
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80132d2:	4a18      	ldr	r2, [pc, #96]	; (8013334 <sys_timeout_abs+0xd8>)
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	e023      	b.n	8013322 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80132da:	4b16      	ldr	r3, [pc, #88]	; (8013334 <sys_timeout_abs+0xd8>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	617b      	str	r3, [r7, #20]
 80132e0:	e01a      	b.n	8013318 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00b      	beq.n	8013302 <sys_timeout_abs+0xa6>
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	685a      	ldr	r2, [r3, #4]
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	1ad3      	subs	r3, r2, r3
 80132f6:	0fdb      	lsrs	r3, r3, #31
 80132f8:	f003 0301 	and.w	r3, r3, #1
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d007      	beq.n	8013312 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	693a      	ldr	r2, [r7, #16]
 801330e:	601a      	str	r2, [r3, #0]
        break;
 8013310:	e007      	b.n	8013322 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	617b      	str	r3, [r7, #20]
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1e1      	bne.n	80132e2 <sys_timeout_abs+0x86>
 801331e:	e000      	b.n	8013322 <sys_timeout_abs+0xc6>
    return;
 8013320:	bf00      	nop
      }
    }
  }
}
 8013322:	3718      	adds	r7, #24
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	0801a838 	.word	0x0801a838
 801332c:	0801a86c 	.word	0x0801a86c
 8013330:	0801a8ac 	.word	0x0801a8ac
 8013334:	20008eac 	.word	0x20008eac

08013338 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	4798      	blx	r3

  now = sys_now();
 801334a:	f7f8 fd61 	bl	800be10 <sys_now>
 801334e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	4b0f      	ldr	r3, [pc, #60]	; (8013394 <lwip_cyclic_timer+0x5c>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4413      	add	r3, r2
 801335a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	0fdb      	lsrs	r3, r3, #31
 8013364:	f003 0301 	and.w	r3, r3, #1
 8013368:	b2db      	uxtb	r3, r3
 801336a:	2b00      	cmp	r3, #0
 801336c:	d009      	beq.n	8013382 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	4413      	add	r3, r2
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	4907      	ldr	r1, [pc, #28]	; (8013398 <lwip_cyclic_timer+0x60>)
 801337a:	4618      	mov	r0, r3
 801337c:	f7ff ff6e 	bl	801325c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013380:	e004      	b.n	801338c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	4904      	ldr	r1, [pc, #16]	; (8013398 <lwip_cyclic_timer+0x60>)
 8013386:	68f8      	ldr	r0, [r7, #12]
 8013388:	f7ff ff68 	bl	801325c <sys_timeout_abs>
}
 801338c:	bf00      	nop
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	20008eb0 	.word	0x20008eb0
 8013398:	08013339 	.word	0x08013339

0801339c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133a2:	2301      	movs	r3, #1
 80133a4:	607b      	str	r3, [r7, #4]
 80133a6:	e00e      	b.n	80133c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80133a8:	4a0b      	ldr	r2, [pc, #44]	; (80133d8 <sys_timeouts_init+0x3c>)
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	00db      	lsls	r3, r3, #3
 80133b4:	4a08      	ldr	r2, [pc, #32]	; (80133d8 <sys_timeouts_init+0x3c>)
 80133b6:	4413      	add	r3, r2
 80133b8:	461a      	mov	r2, r3
 80133ba:	4908      	ldr	r1, [pc, #32]	; (80133dc <sys_timeouts_init+0x40>)
 80133bc:	f000 f810 	bl	80133e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	3301      	adds	r3, #1
 80133c4:	607b      	str	r3, [r7, #4]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2b02      	cmp	r3, #2
 80133ca:	d9ed      	bls.n	80133a8 <sys_timeouts_init+0xc>
  }
}
 80133cc:	bf00      	nop
 80133ce:	bf00      	nop
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	0801b5d4 	.word	0x0801b5d4
 80133dc:	08013339 	.word	0x08013339

080133e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b086      	sub	sp, #24
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133f2:	d306      	bcc.n	8013402 <sys_timeout+0x22>
 80133f4:	4b0a      	ldr	r3, [pc, #40]	; (8013420 <sys_timeout+0x40>)
 80133f6:	f240 1229 	movw	r2, #297	; 0x129
 80133fa:	490a      	ldr	r1, [pc, #40]	; (8013424 <sys_timeout+0x44>)
 80133fc:	480a      	ldr	r0, [pc, #40]	; (8013428 <sys_timeout+0x48>)
 80133fe:	f004 f9e1 	bl	80177c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013402:	f7f8 fd05 	bl	800be10 <sys_now>
 8013406:	4602      	mov	r2, r0
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	4413      	add	r3, r2
 801340c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	68b9      	ldr	r1, [r7, #8]
 8013412:	6978      	ldr	r0, [r7, #20]
 8013414:	f7ff ff22 	bl	801325c <sys_timeout_abs>
#endif
}
 8013418:	bf00      	nop
 801341a:	3718      	adds	r7, #24
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	0801a838 	.word	0x0801a838
 8013424:	0801a8d4 	.word	0x0801a8d4
 8013428:	0801a8ac 	.word	0x0801a8ac

0801342c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013432:	f7f8 fced 	bl	800be10 <sys_now>
 8013436:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013438:	4b1a      	ldr	r3, [pc, #104]	; (80134a4 <sys_check_timeouts+0x78>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	b2db      	uxtb	r3, r3
 801343e:	2b00      	cmp	r3, #0
 8013440:	d001      	beq.n	8013446 <sys_check_timeouts+0x1a>
 8013442:	f7f9 ff25 	bl	800d290 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013446:	4b18      	ldr	r3, [pc, #96]	; (80134a8 <sys_check_timeouts+0x7c>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d022      	beq.n	8013498 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	68fa      	ldr	r2, [r7, #12]
 8013458:	1ad3      	subs	r3, r2, r3
 801345a:	0fdb      	lsrs	r3, r3, #31
 801345c:	f003 0301 	and.w	r3, r3, #1
 8013460:	b2db      	uxtb	r3, r3
 8013462:	2b00      	cmp	r3, #0
 8013464:	d11a      	bne.n	801349c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	4a0f      	ldr	r2, [pc, #60]	; (80134a8 <sys_check_timeouts+0x7c>)
 801346c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	4a0b      	ldr	r2, [pc, #44]	; (80134ac <sys_check_timeouts+0x80>)
 8013480:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013482:	68b9      	ldr	r1, [r7, #8]
 8013484:	2006      	movs	r0, #6
 8013486:	f7f9 fbc7 	bl	800cc18 <memp_free>
    if (handler != NULL) {
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d0d3      	beq.n	8013438 <sys_check_timeouts+0xc>
      handler(arg);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6838      	ldr	r0, [r7, #0]
 8013494:	4798      	blx	r3
  do {
 8013496:	e7cf      	b.n	8013438 <sys_check_timeouts+0xc>
      return;
 8013498:	bf00      	nop
 801349a:	e000      	b.n	801349e <sys_check_timeouts+0x72>
      return;
 801349c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801349e:	3710      	adds	r7, #16
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	20008e59 	.word	0x20008e59
 80134a8:	20008eac 	.word	0x20008eac
 80134ac:	20008eb0 	.word	0x20008eb0

080134b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80134b4:	f004 fa14 	bl	80178e0 <rand>
 80134b8:	4603      	mov	r3, r0
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	4b01      	ldr	r3, [pc, #4]	; (80134d0 <udp_init+0x20>)
 80134ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80134cc:	bf00      	nop
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	20000028 	.word	0x20000028

080134d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80134da:	2300      	movs	r3, #0
 80134dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80134de:	4b17      	ldr	r3, [pc, #92]	; (801353c <udp_new_port+0x68>)
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	1c5a      	adds	r2, r3, #1
 80134e4:	b291      	uxth	r1, r2
 80134e6:	4a15      	ldr	r2, [pc, #84]	; (801353c <udp_new_port+0x68>)
 80134e8:	8011      	strh	r1, [r2, #0]
 80134ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d103      	bne.n	80134fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80134f2:	4b12      	ldr	r3, [pc, #72]	; (801353c <udp_new_port+0x68>)
 80134f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80134f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134fa:	4b11      	ldr	r3, [pc, #68]	; (8013540 <udp_new_port+0x6c>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	603b      	str	r3, [r7, #0]
 8013500:	e011      	b.n	8013526 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	8a5a      	ldrh	r2, [r3, #18]
 8013506:	4b0d      	ldr	r3, [pc, #52]	; (801353c <udp_new_port+0x68>)
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	429a      	cmp	r2, r3
 801350c:	d108      	bne.n	8013520 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801350e:	88fb      	ldrh	r3, [r7, #6]
 8013510:	3301      	adds	r3, #1
 8013512:	80fb      	strh	r3, [r7, #6]
 8013514:	88fb      	ldrh	r3, [r7, #6]
 8013516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801351a:	d3e0      	bcc.n	80134de <udp_new_port+0xa>
        return 0;
 801351c:	2300      	movs	r3, #0
 801351e:	e007      	b.n	8013530 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	603b      	str	r3, [r7, #0]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d1ea      	bne.n	8013502 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801352c:	4b03      	ldr	r3, [pc, #12]	; (801353c <udp_new_port+0x68>)
 801352e:	881b      	ldrh	r3, [r3, #0]
}
 8013530:	4618      	mov	r0, r3
 8013532:	370c      	adds	r7, #12
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr
 801353c:	20000028 	.word	0x20000028
 8013540:	20008eb8 	.word	0x20008eb8

08013544 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	4613      	mov	r3, r2
 8013550:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d105      	bne.n	8013564 <udp_input_local_match+0x20>
 8013558:	4b27      	ldr	r3, [pc, #156]	; (80135f8 <udp_input_local_match+0xb4>)
 801355a:	2287      	movs	r2, #135	; 0x87
 801355c:	4927      	ldr	r1, [pc, #156]	; (80135fc <udp_input_local_match+0xb8>)
 801355e:	4828      	ldr	r0, [pc, #160]	; (8013600 <udp_input_local_match+0xbc>)
 8013560:	f004 f930 	bl	80177c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <udp_input_local_match+0x32>
 801356a:	4b23      	ldr	r3, [pc, #140]	; (80135f8 <udp_input_local_match+0xb4>)
 801356c:	2288      	movs	r2, #136	; 0x88
 801356e:	4925      	ldr	r1, [pc, #148]	; (8013604 <udp_input_local_match+0xc0>)
 8013570:	4823      	ldr	r0, [pc, #140]	; (8013600 <udp_input_local_match+0xbc>)
 8013572:	f004 f927 	bl	80177c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	7a1b      	ldrb	r3, [r3, #8]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00b      	beq.n	8013596 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	7a1a      	ldrb	r2, [r3, #8]
 8013582:	4b21      	ldr	r3, [pc, #132]	; (8013608 <udp_input_local_match+0xc4>)
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801358a:	3301      	adds	r3, #1
 801358c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801358e:	429a      	cmp	r2, r3
 8013590:	d001      	beq.n	8013596 <udp_input_local_match+0x52>
    return 0;
 8013592:	2300      	movs	r3, #0
 8013594:	e02b      	b.n	80135ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013596:	79fb      	ldrb	r3, [r7, #7]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d018      	beq.n	80135ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d013      	beq.n	80135ca <udp_input_local_match+0x86>
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00f      	beq.n	80135ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80135aa:	4b17      	ldr	r3, [pc, #92]	; (8013608 <udp_input_local_match+0xc4>)
 80135ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b2:	d00a      	beq.n	80135ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	4b13      	ldr	r3, [pc, #76]	; (8013608 <udp_input_local_match+0xc4>)
 80135ba:	695b      	ldr	r3, [r3, #20]
 80135bc:	405a      	eors	r2, r3
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	3308      	adds	r3, #8
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d110      	bne.n	80135ec <udp_input_local_match+0xa8>
          return 1;
 80135ca:	2301      	movs	r3, #1
 80135cc:	e00f      	b.n	80135ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d009      	beq.n	80135e8 <udp_input_local_match+0xa4>
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d005      	beq.n	80135e8 <udp_input_local_match+0xa4>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681a      	ldr	r2, [r3, #0]
 80135e0:	4b09      	ldr	r3, [pc, #36]	; (8013608 <udp_input_local_match+0xc4>)
 80135e2:	695b      	ldr	r3, [r3, #20]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d101      	bne.n	80135ec <udp_input_local_match+0xa8>
        return 1;
 80135e8:	2301      	movs	r3, #1
 80135ea:	e000      	b.n	80135ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80135ec:	2300      	movs	r3, #0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3710      	adds	r7, #16
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	0801a920 	.word	0x0801a920
 80135fc:	0801a950 	.word	0x0801a950
 8013600:	0801a974 	.word	0x0801a974
 8013604:	0801a99c 	.word	0x0801a99c
 8013608:	200058ec 	.word	0x200058ec

0801360c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801360c:	b590      	push	{r4, r7, lr}
 801360e:	b08d      	sub	sp, #52	; 0x34
 8013610:	af02      	add	r7, sp, #8
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013616:	2300      	movs	r3, #0
 8013618:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d105      	bne.n	801362c <udp_input+0x20>
 8013620:	4b7c      	ldr	r3, [pc, #496]	; (8013814 <udp_input+0x208>)
 8013622:	22cf      	movs	r2, #207	; 0xcf
 8013624:	497c      	ldr	r1, [pc, #496]	; (8013818 <udp_input+0x20c>)
 8013626:	487d      	ldr	r0, [pc, #500]	; (801381c <udp_input+0x210>)
 8013628:	f004 f8cc 	bl	80177c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d105      	bne.n	801363e <udp_input+0x32>
 8013632:	4b78      	ldr	r3, [pc, #480]	; (8013814 <udp_input+0x208>)
 8013634:	22d0      	movs	r2, #208	; 0xd0
 8013636:	497a      	ldr	r1, [pc, #488]	; (8013820 <udp_input+0x214>)
 8013638:	4878      	ldr	r0, [pc, #480]	; (801381c <udp_input+0x210>)
 801363a:	f004 f8c3 	bl	80177c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	895b      	ldrh	r3, [r3, #10]
 8013642:	2b07      	cmp	r3, #7
 8013644:	d803      	bhi.n	801364e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7fa f95c 	bl	800d904 <pbuf_free>
    goto end;
 801364c:	e0de      	b.n	801380c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013654:	4b73      	ldr	r3, [pc, #460]	; (8013824 <udp_input+0x218>)
 8013656:	695b      	ldr	r3, [r3, #20]
 8013658:	4a72      	ldr	r2, [pc, #456]	; (8013824 <udp_input+0x218>)
 801365a:	6812      	ldr	r2, [r2, #0]
 801365c:	4611      	mov	r1, r2
 801365e:	4618      	mov	r0, r3
 8013660:	f002 f80a 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8013664:	4603      	mov	r3, r0
 8013666:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	881b      	ldrh	r3, [r3, #0]
 801366c:	b29b      	uxth	r3, r3
 801366e:	4618      	mov	r0, r3
 8013670:	f7f8 fdea 	bl	800c248 <lwip_htons>
 8013674:	4603      	mov	r3, r0
 8013676:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	885b      	ldrh	r3, [r3, #2]
 801367c:	b29b      	uxth	r3, r3
 801367e:	4618      	mov	r0, r3
 8013680:	f7f8 fde2 	bl	800c248 <lwip_htons>
 8013684:	4603      	mov	r3, r0
 8013686:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013688:	2300      	movs	r3, #0
 801368a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801368c:	2300      	movs	r3, #0
 801368e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013690:	2300      	movs	r3, #0
 8013692:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013694:	4b64      	ldr	r3, [pc, #400]	; (8013828 <udp_input+0x21c>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	627b      	str	r3, [r7, #36]	; 0x24
 801369a:	e054      	b.n	8013746 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369e:	8a5b      	ldrh	r3, [r3, #18]
 80136a0:	89fa      	ldrh	r2, [r7, #14]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d14a      	bne.n	801373c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80136a6:	7cfb      	ldrb	r3, [r7, #19]
 80136a8:	461a      	mov	r2, r3
 80136aa:	6839      	ldr	r1, [r7, #0]
 80136ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136ae:	f7ff ff49 	bl	8013544 <udp_input_local_match>
 80136b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d041      	beq.n	801373c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80136b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ba:	7c1b      	ldrb	r3, [r3, #16]
 80136bc:	f003 0304 	and.w	r3, r3, #4
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d11d      	bne.n	8013700 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d102      	bne.n	80136d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80136ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136cc:	61fb      	str	r3, [r7, #28]
 80136ce:	e017      	b.n	8013700 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80136d0:	7cfb      	ldrb	r3, [r7, #19]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d014      	beq.n	8013700 <udp_input+0xf4>
 80136d6:	4b53      	ldr	r3, [pc, #332]	; (8013824 <udp_input+0x218>)
 80136d8:	695b      	ldr	r3, [r3, #20]
 80136da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136de:	d10f      	bne.n	8013700 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	3304      	adds	r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d008      	beq.n	8013700 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80136ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	3304      	adds	r3, #4
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d101      	bne.n	8013700 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80136fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013702:	8a9b      	ldrh	r3, [r3, #20]
 8013704:	8a3a      	ldrh	r2, [r7, #16]
 8013706:	429a      	cmp	r2, r3
 8013708:	d118      	bne.n	801373c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801370e:	2b00      	cmp	r3, #0
 8013710:	d005      	beq.n	801371e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013714:	685a      	ldr	r2, [r3, #4]
 8013716:	4b43      	ldr	r3, [pc, #268]	; (8013824 <udp_input+0x218>)
 8013718:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801371a:	429a      	cmp	r2, r3
 801371c:	d10e      	bne.n	801373c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801371e:	6a3b      	ldr	r3, [r7, #32]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d014      	beq.n	801374e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013726:	68da      	ldr	r2, [r3, #12]
 8013728:	6a3b      	ldr	r3, [r7, #32]
 801372a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801372c:	4b3e      	ldr	r3, [pc, #248]	; (8013828 <udp_input+0x21c>)
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013732:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013734:	4a3c      	ldr	r2, [pc, #240]	; (8013828 <udp_input+0x21c>)
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013738:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801373a:	e008      	b.n	801374e <udp_input+0x142>
      }
    }

    prev = pcb;
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013742:	68db      	ldr	r3, [r3, #12]
 8013744:	627b      	str	r3, [r7, #36]	; 0x24
 8013746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1a7      	bne.n	801369c <udp_input+0x90>
 801374c:	e000      	b.n	8013750 <udp_input+0x144>
        break;
 801374e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013752:	2b00      	cmp	r3, #0
 8013754:	d101      	bne.n	801375a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013756:	69fb      	ldr	r3, [r7, #28]
 8013758:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	2b00      	cmp	r3, #0
 801375e:	d002      	beq.n	8013766 <udp_input+0x15a>
    for_us = 1;
 8013760:	2301      	movs	r3, #1
 8013762:	76fb      	strb	r3, [r7, #27]
 8013764:	e00a      	b.n	801377c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	3304      	adds	r3, #4
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	4b2d      	ldr	r3, [pc, #180]	; (8013824 <udp_input+0x218>)
 801376e:	695b      	ldr	r3, [r3, #20]
 8013770:	429a      	cmp	r2, r3
 8013772:	bf0c      	ite	eq
 8013774:	2301      	moveq	r3, #1
 8013776:	2300      	movne	r3, #0
 8013778:	b2db      	uxtb	r3, r3
 801377a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801377c:	7efb      	ldrb	r3, [r7, #27]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d041      	beq.n	8013806 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013782:	2108      	movs	r1, #8
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7fa f837 	bl	800d7f8 <pbuf_remove_header>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00a      	beq.n	80137a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013790:	4b20      	ldr	r3, [pc, #128]	; (8013814 <udp_input+0x208>)
 8013792:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013796:	4925      	ldr	r1, [pc, #148]	; (801382c <udp_input+0x220>)
 8013798:	4820      	ldr	r0, [pc, #128]	; (801381c <udp_input+0x210>)
 801379a:	f004 f813 	bl	80177c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7fa f8b0 	bl	800d904 <pbuf_free>
      goto end;
 80137a4:	e032      	b.n	801380c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80137a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d012      	beq.n	80137d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80137ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ae:	699b      	ldr	r3, [r3, #24]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00a      	beq.n	80137ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80137b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b6:	699c      	ldr	r4, [r3, #24]
 80137b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ba:	69d8      	ldr	r0, [r3, #28]
 80137bc:	8a3b      	ldrh	r3, [r7, #16]
 80137be:	9300      	str	r3, [sp, #0]
 80137c0:	4b1b      	ldr	r3, [pc, #108]	; (8013830 <udp_input+0x224>)
 80137c2:	687a      	ldr	r2, [r7, #4]
 80137c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80137c8:	e021      	b.n	801380e <udp_input+0x202>
        pbuf_free(p);
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f7fa f89a 	bl	800d904 <pbuf_free>
        goto end;
 80137d0:	e01c      	b.n	801380c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80137d2:	7cfb      	ldrb	r3, [r7, #19]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d112      	bne.n	80137fe <udp_input+0x1f2>
 80137d8:	4b12      	ldr	r3, [pc, #72]	; (8013824 <udp_input+0x218>)
 80137da:	695b      	ldr	r3, [r3, #20]
 80137dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80137e0:	2be0      	cmp	r3, #224	; 0xe0
 80137e2:	d00c      	beq.n	80137fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80137e4:	4b0f      	ldr	r3, [pc, #60]	; (8013824 <udp_input+0x218>)
 80137e6:	899b      	ldrh	r3, [r3, #12]
 80137e8:	3308      	adds	r3, #8
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b21b      	sxth	r3, r3
 80137ee:	4619      	mov	r1, r3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7fa f874 	bl	800d8de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80137f6:	2103      	movs	r1, #3
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f001 fc1d 	bl	8015038 <icmp_dest_unreach>
      pbuf_free(p);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7fa f880 	bl	800d904 <pbuf_free>
  return;
 8013804:	e003      	b.n	801380e <udp_input+0x202>
    pbuf_free(p);
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f7fa f87c 	bl	800d904 <pbuf_free>
  return;
 801380c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801380e:	372c      	adds	r7, #44	; 0x2c
 8013810:	46bd      	mov	sp, r7
 8013812:	bd90      	pop	{r4, r7, pc}
 8013814:	0801a920 	.word	0x0801a920
 8013818:	0801a9c4 	.word	0x0801a9c4
 801381c:	0801a974 	.word	0x0801a974
 8013820:	0801a9dc 	.word	0x0801a9dc
 8013824:	200058ec 	.word	0x200058ec
 8013828:	20008eb8 	.word	0x20008eb8
 801382c:	0801a9f8 	.word	0x0801a9f8
 8013830:	200058fc 	.word	0x200058fc

08013834 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d109      	bne.n	8013858 <udp_send+0x24>
 8013844:	4b11      	ldr	r3, [pc, #68]	; (801388c <udp_send+0x58>)
 8013846:	f240 12d5 	movw	r2, #469	; 0x1d5
 801384a:	4911      	ldr	r1, [pc, #68]	; (8013890 <udp_send+0x5c>)
 801384c:	4811      	ldr	r0, [pc, #68]	; (8013894 <udp_send+0x60>)
 801384e:	f003 ffb9 	bl	80177c4 <iprintf>
 8013852:	f06f 030f 	mvn.w	r3, #15
 8013856:	e015      	b.n	8013884 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d109      	bne.n	8013872 <udp_send+0x3e>
 801385e:	4b0b      	ldr	r3, [pc, #44]	; (801388c <udp_send+0x58>)
 8013860:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013864:	490c      	ldr	r1, [pc, #48]	; (8013898 <udp_send+0x64>)
 8013866:	480b      	ldr	r0, [pc, #44]	; (8013894 <udp_send+0x60>)
 8013868:	f003 ffac 	bl	80177c4 <iprintf>
 801386c:	f06f 030f 	mvn.w	r3, #15
 8013870:	e008      	b.n	8013884 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	1d1a      	adds	r2, r3, #4
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	8a9b      	ldrh	r3, [r3, #20]
 801387a:	6839      	ldr	r1, [r7, #0]
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f000 f80d 	bl	801389c <udp_sendto>
 8013882:	4603      	mov	r3, r0
}
 8013884:	4618      	mov	r0, r3
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	0801a920 	.word	0x0801a920
 8013890:	0801aa14 	.word	0x0801aa14
 8013894:	0801a974 	.word	0x0801a974
 8013898:	0801aa2c 	.word	0x0801aa2c

0801389c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b088      	sub	sp, #32
 80138a0:	af02      	add	r7, sp, #8
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
 80138a8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d109      	bne.n	80138c4 <udp_sendto+0x28>
 80138b0:	4b23      	ldr	r3, [pc, #140]	; (8013940 <udp_sendto+0xa4>)
 80138b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80138b6:	4923      	ldr	r1, [pc, #140]	; (8013944 <udp_sendto+0xa8>)
 80138b8:	4823      	ldr	r0, [pc, #140]	; (8013948 <udp_sendto+0xac>)
 80138ba:	f003 ff83 	bl	80177c4 <iprintf>
 80138be:	f06f 030f 	mvn.w	r3, #15
 80138c2:	e038      	b.n	8013936 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d109      	bne.n	80138de <udp_sendto+0x42>
 80138ca:	4b1d      	ldr	r3, [pc, #116]	; (8013940 <udp_sendto+0xa4>)
 80138cc:	f240 2219 	movw	r2, #537	; 0x219
 80138d0:	491e      	ldr	r1, [pc, #120]	; (801394c <udp_sendto+0xb0>)
 80138d2:	481d      	ldr	r0, [pc, #116]	; (8013948 <udp_sendto+0xac>)
 80138d4:	f003 ff76 	bl	80177c4 <iprintf>
 80138d8:	f06f 030f 	mvn.w	r3, #15
 80138dc:	e02b      	b.n	8013936 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d109      	bne.n	80138f8 <udp_sendto+0x5c>
 80138e4:	4b16      	ldr	r3, [pc, #88]	; (8013940 <udp_sendto+0xa4>)
 80138e6:	f240 221a 	movw	r2, #538	; 0x21a
 80138ea:	4919      	ldr	r1, [pc, #100]	; (8013950 <udp_sendto+0xb4>)
 80138ec:	4816      	ldr	r0, [pc, #88]	; (8013948 <udp_sendto+0xac>)
 80138ee:	f003 ff69 	bl	80177c4 <iprintf>
 80138f2:	f06f 030f 	mvn.w	r3, #15
 80138f6:	e01e      	b.n	8013936 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	7a1b      	ldrb	r3, [r3, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d006      	beq.n	801390e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	7a1b      	ldrb	r3, [r3, #8]
 8013904:	4618      	mov	r0, r3
 8013906:	f7f9 fc9d 	bl	800d244 <netif_get_by_index>
 801390a:	6178      	str	r0, [r7, #20]
 801390c:	e003      	b.n	8013916 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f001 fc1c 	bl	801514c <ip4_route>
 8013914:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d102      	bne.n	8013922 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801391c:	f06f 0303 	mvn.w	r3, #3
 8013920:	e009      	b.n	8013936 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013922:	887a      	ldrh	r2, [r7, #2]
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	4613      	mov	r3, r2
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	68b9      	ldr	r1, [r7, #8]
 801392e:	68f8      	ldr	r0, [r7, #12]
 8013930:	f000 f810 	bl	8013954 <udp_sendto_if>
 8013934:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013936:	4618      	mov	r0, r3
 8013938:	3718      	adds	r7, #24
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	0801a920 	.word	0x0801a920
 8013944:	0801aa44 	.word	0x0801aa44
 8013948:	0801a974 	.word	0x0801a974
 801394c:	0801aa5c 	.word	0x0801aa5c
 8013950:	0801aa78 	.word	0x0801aa78

08013954 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b088      	sub	sp, #32
 8013958:	af02      	add	r7, sp, #8
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
 8013960:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d109      	bne.n	801397c <udp_sendto_if+0x28>
 8013968:	4b2e      	ldr	r3, [pc, #184]	; (8013a24 <udp_sendto_if+0xd0>)
 801396a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801396e:	492e      	ldr	r1, [pc, #184]	; (8013a28 <udp_sendto_if+0xd4>)
 8013970:	482e      	ldr	r0, [pc, #184]	; (8013a2c <udp_sendto_if+0xd8>)
 8013972:	f003 ff27 	bl	80177c4 <iprintf>
 8013976:	f06f 030f 	mvn.w	r3, #15
 801397a:	e04f      	b.n	8013a1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d109      	bne.n	8013996 <udp_sendto_if+0x42>
 8013982:	4b28      	ldr	r3, [pc, #160]	; (8013a24 <udp_sendto_if+0xd0>)
 8013984:	f240 2281 	movw	r2, #641	; 0x281
 8013988:	4929      	ldr	r1, [pc, #164]	; (8013a30 <udp_sendto_if+0xdc>)
 801398a:	4828      	ldr	r0, [pc, #160]	; (8013a2c <udp_sendto_if+0xd8>)
 801398c:	f003 ff1a 	bl	80177c4 <iprintf>
 8013990:	f06f 030f 	mvn.w	r3, #15
 8013994:	e042      	b.n	8013a1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d109      	bne.n	80139b0 <udp_sendto_if+0x5c>
 801399c:	4b21      	ldr	r3, [pc, #132]	; (8013a24 <udp_sendto_if+0xd0>)
 801399e:	f240 2282 	movw	r2, #642	; 0x282
 80139a2:	4924      	ldr	r1, [pc, #144]	; (8013a34 <udp_sendto_if+0xe0>)
 80139a4:	4821      	ldr	r0, [pc, #132]	; (8013a2c <udp_sendto_if+0xd8>)
 80139a6:	f003 ff0d 	bl	80177c4 <iprintf>
 80139aa:	f06f 030f 	mvn.w	r3, #15
 80139ae:	e035      	b.n	8013a1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80139b0:	6a3b      	ldr	r3, [r7, #32]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d109      	bne.n	80139ca <udp_sendto_if+0x76>
 80139b6:	4b1b      	ldr	r3, [pc, #108]	; (8013a24 <udp_sendto_if+0xd0>)
 80139b8:	f240 2283 	movw	r2, #643	; 0x283
 80139bc:	491e      	ldr	r1, [pc, #120]	; (8013a38 <udp_sendto_if+0xe4>)
 80139be:	481b      	ldr	r0, [pc, #108]	; (8013a2c <udp_sendto_if+0xd8>)
 80139c0:	f003 ff00 	bl	80177c4 <iprintf>
 80139c4:	f06f 030f 	mvn.w	r3, #15
 80139c8:	e028      	b.n	8013a1c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d009      	beq.n	80139e4 <udp_sendto_if+0x90>
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d005      	beq.n	80139e4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80139e0:	2be0      	cmp	r3, #224	; 0xe0
 80139e2:	d103      	bne.n	80139ec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80139e4:	6a3b      	ldr	r3, [r7, #32]
 80139e6:	3304      	adds	r3, #4
 80139e8:	617b      	str	r3, [r7, #20]
 80139ea:	e00b      	b.n	8013a04 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	6a3b      	ldr	r3, [r7, #32]
 80139f2:	3304      	adds	r3, #4
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d002      	beq.n	8013a00 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80139fa:	f06f 0303 	mvn.w	r3, #3
 80139fe:	e00d      	b.n	8013a1c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013a04:	887a      	ldrh	r2, [r7, #2]
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	9301      	str	r3, [sp, #4]
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	4613      	mov	r3, r2
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	68b9      	ldr	r1, [r7, #8]
 8013a14:	68f8      	ldr	r0, [r7, #12]
 8013a16:	f000 f811 	bl	8013a3c <udp_sendto_if_src>
 8013a1a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3718      	adds	r7, #24
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	0801a920 	.word	0x0801a920
 8013a28:	0801aa94 	.word	0x0801aa94
 8013a2c:	0801a974 	.word	0x0801a974
 8013a30:	0801aab0 	.word	0x0801aab0
 8013a34:	0801aacc 	.word	0x0801aacc
 8013a38:	0801aaec 	.word	0x0801aaec

08013a3c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b08c      	sub	sp, #48	; 0x30
 8013a40:	af04      	add	r7, sp, #16
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
 8013a48:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d109      	bne.n	8013a64 <udp_sendto_if_src+0x28>
 8013a50:	4b65      	ldr	r3, [pc, #404]	; (8013be8 <udp_sendto_if_src+0x1ac>)
 8013a52:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013a56:	4965      	ldr	r1, [pc, #404]	; (8013bec <udp_sendto_if_src+0x1b0>)
 8013a58:	4865      	ldr	r0, [pc, #404]	; (8013bf0 <udp_sendto_if_src+0x1b4>)
 8013a5a:	f003 feb3 	bl	80177c4 <iprintf>
 8013a5e:	f06f 030f 	mvn.w	r3, #15
 8013a62:	e0bc      	b.n	8013bde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d109      	bne.n	8013a7e <udp_sendto_if_src+0x42>
 8013a6a:	4b5f      	ldr	r3, [pc, #380]	; (8013be8 <udp_sendto_if_src+0x1ac>)
 8013a6c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013a70:	4960      	ldr	r1, [pc, #384]	; (8013bf4 <udp_sendto_if_src+0x1b8>)
 8013a72:	485f      	ldr	r0, [pc, #380]	; (8013bf0 <udp_sendto_if_src+0x1b4>)
 8013a74:	f003 fea6 	bl	80177c4 <iprintf>
 8013a78:	f06f 030f 	mvn.w	r3, #15
 8013a7c:	e0af      	b.n	8013bde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d109      	bne.n	8013a98 <udp_sendto_if_src+0x5c>
 8013a84:	4b58      	ldr	r3, [pc, #352]	; (8013be8 <udp_sendto_if_src+0x1ac>)
 8013a86:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013a8a:	495b      	ldr	r1, [pc, #364]	; (8013bf8 <udp_sendto_if_src+0x1bc>)
 8013a8c:	4858      	ldr	r0, [pc, #352]	; (8013bf0 <udp_sendto_if_src+0x1b4>)
 8013a8e:	f003 fe99 	bl	80177c4 <iprintf>
 8013a92:	f06f 030f 	mvn.w	r3, #15
 8013a96:	e0a2      	b.n	8013bde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d109      	bne.n	8013ab2 <udp_sendto_if_src+0x76>
 8013a9e:	4b52      	ldr	r3, [pc, #328]	; (8013be8 <udp_sendto_if_src+0x1ac>)
 8013aa0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013aa4:	4955      	ldr	r1, [pc, #340]	; (8013bfc <udp_sendto_if_src+0x1c0>)
 8013aa6:	4852      	ldr	r0, [pc, #328]	; (8013bf0 <udp_sendto_if_src+0x1b4>)
 8013aa8:	f003 fe8c 	bl	80177c4 <iprintf>
 8013aac:	f06f 030f 	mvn.w	r3, #15
 8013ab0:	e095      	b.n	8013bde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d109      	bne.n	8013acc <udp_sendto_if_src+0x90>
 8013ab8:	4b4b      	ldr	r3, [pc, #300]	; (8013be8 <udp_sendto_if_src+0x1ac>)
 8013aba:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013abe:	4950      	ldr	r1, [pc, #320]	; (8013c00 <udp_sendto_if_src+0x1c4>)
 8013ac0:	484b      	ldr	r0, [pc, #300]	; (8013bf0 <udp_sendto_if_src+0x1b4>)
 8013ac2:	f003 fe7f 	bl	80177c4 <iprintf>
 8013ac6:	f06f 030f 	mvn.w	r3, #15
 8013aca:	e088      	b.n	8013bde <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	8a5b      	ldrh	r3, [r3, #18]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d10f      	bne.n	8013af4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013ad4:	68f9      	ldr	r1, [r7, #12]
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	8a5b      	ldrh	r3, [r3, #18]
 8013ada:	461a      	mov	r2, r3
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	f000 f893 	bl	8013c08 <udp_bind>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013ae6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d002      	beq.n	8013af4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013aee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013af2:	e074      	b.n	8013bde <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	891b      	ldrh	r3, [r3, #8]
 8013af8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d902      	bls.n	8013b06 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013b00:	f04f 33ff 	mov.w	r3, #4294967295
 8013b04:	e06b      	b.n	8013bde <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013b06:	2108      	movs	r1, #8
 8013b08:	68b8      	ldr	r0, [r7, #8]
 8013b0a:	f7f9 fe65 	bl	800d7d8 <pbuf_add_header>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d015      	beq.n	8013b40 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013b14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b18:	2108      	movs	r1, #8
 8013b1a:	2022      	movs	r0, #34	; 0x22
 8013b1c:	f7f9 fc0e 	bl	800d33c <pbuf_alloc>
 8013b20:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d102      	bne.n	8013b2e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013b28:	f04f 33ff 	mov.w	r3, #4294967295
 8013b2c:	e057      	b.n	8013bde <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	891b      	ldrh	r3, [r3, #8]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d006      	beq.n	8013b44 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013b36:	68b9      	ldr	r1, [r7, #8]
 8013b38:	69f8      	ldr	r0, [r7, #28]
 8013b3a:	f7f9 fffb 	bl	800db34 <pbuf_chain>
 8013b3e:	e001      	b.n	8013b44 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	895b      	ldrh	r3, [r3, #10]
 8013b48:	2b07      	cmp	r3, #7
 8013b4a:	d806      	bhi.n	8013b5a <udp_sendto_if_src+0x11e>
 8013b4c:	4b26      	ldr	r3, [pc, #152]	; (8013be8 <udp_sendto_if_src+0x1ac>)
 8013b4e:	f240 320d 	movw	r2, #781	; 0x30d
 8013b52:	492c      	ldr	r1, [pc, #176]	; (8013c04 <udp_sendto_if_src+0x1c8>)
 8013b54:	4826      	ldr	r0, [pc, #152]	; (8013bf0 <udp_sendto_if_src+0x1b4>)
 8013b56:	f003 fe35 	bl	80177c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	8a5b      	ldrh	r3, [r3, #18]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7f8 fb6f 	bl	800c248 <lwip_htons>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013b72:	887b      	ldrh	r3, [r7, #2]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7f8 fb67 	bl	800c248 <lwip_htons>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	2200      	movs	r2, #0
 8013b86:	719a      	strb	r2, [r3, #6]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	891b      	ldrh	r3, [r3, #8]
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f8 fb59 	bl	800c248 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	461a      	mov	r2, r3
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013b9e:	2311      	movs	r3, #17
 8013ba0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	7adb      	ldrb	r3, [r3, #11]
 8013ba6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	7a9b      	ldrb	r3, [r3, #10]
 8013bac:	7cb9      	ldrb	r1, [r7, #18]
 8013bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bb0:	9202      	str	r2, [sp, #8]
 8013bb2:	7cfa      	ldrb	r2, [r7, #19]
 8013bb4:	9201      	str	r2, [sp, #4]
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	460b      	mov	r3, r1
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bbe:	69f8      	ldr	r0, [r7, #28]
 8013bc0:	f001 fcac 	bl	801551c <ip4_output_if_src>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013bc8:	69fa      	ldr	r2, [r7, #28]
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d004      	beq.n	8013bda <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013bd0:	69f8      	ldr	r0, [r7, #28]
 8013bd2:	f7f9 fe97 	bl	800d904 <pbuf_free>
    q = NULL;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013bda:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3720      	adds	r7, #32
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	0801a920 	.word	0x0801a920
 8013bec:	0801ab0c 	.word	0x0801ab0c
 8013bf0:	0801a974 	.word	0x0801a974
 8013bf4:	0801ab2c 	.word	0x0801ab2c
 8013bf8:	0801ab4c 	.word	0x0801ab4c
 8013bfc:	0801ab70 	.word	0x0801ab70
 8013c00:	0801ab94 	.word	0x0801ab94
 8013c04:	0801abb8 	.word	0x0801abb8

08013c08 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b086      	sub	sp, #24
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	4613      	mov	r3, r2
 8013c14:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d101      	bne.n	8013c20 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013c1c:	4b39      	ldr	r3, [pc, #228]	; (8013d04 <udp_bind+0xfc>)
 8013c1e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d109      	bne.n	8013c3a <udp_bind+0x32>
 8013c26:	4b38      	ldr	r3, [pc, #224]	; (8013d08 <udp_bind+0x100>)
 8013c28:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013c2c:	4937      	ldr	r1, [pc, #220]	; (8013d0c <udp_bind+0x104>)
 8013c2e:	4838      	ldr	r0, [pc, #224]	; (8013d10 <udp_bind+0x108>)
 8013c30:	f003 fdc8 	bl	80177c4 <iprintf>
 8013c34:	f06f 030f 	mvn.w	r3, #15
 8013c38:	e060      	b.n	8013cfc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c3e:	4b35      	ldr	r3, [pc, #212]	; (8013d14 <udp_bind+0x10c>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	617b      	str	r3, [r7, #20]
 8013c44:	e009      	b.n	8013c5a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013c46:	68fa      	ldr	r2, [r7, #12]
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d102      	bne.n	8013c54 <udp_bind+0x4c>
      rebind = 1;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	74fb      	strb	r3, [r7, #19]
      break;
 8013c52:	e005      	b.n	8013c60 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	617b      	str	r3, [r7, #20]
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d1f2      	bne.n	8013c46 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013c60:	88fb      	ldrh	r3, [r7, #6]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d109      	bne.n	8013c7a <udp_bind+0x72>
    port = udp_new_port();
 8013c66:	f7ff fc35 	bl	80134d4 <udp_new_port>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013c6e:	88fb      	ldrh	r3, [r7, #6]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d12c      	bne.n	8013cce <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013c74:	f06f 0307 	mvn.w	r3, #7
 8013c78:	e040      	b.n	8013cfc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c7a:	4b26      	ldr	r3, [pc, #152]	; (8013d14 <udp_bind+0x10c>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	617b      	str	r3, [r7, #20]
 8013c80:	e022      	b.n	8013cc8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d01b      	beq.n	8013cc2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	8a5b      	ldrh	r3, [r3, #18]
 8013c8e:	88fa      	ldrh	r2, [r7, #6]
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d116      	bne.n	8013cc2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d00d      	beq.n	8013cbc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d00a      	beq.n	8013cbc <udp_bind+0xb4>
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d006      	beq.n	8013cbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013cae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d003      	beq.n	8013cbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d102      	bne.n	8013cc2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013cbc:	f06f 0307 	mvn.w	r3, #7
 8013cc0:	e01c      	b.n	8013cfc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	617b      	str	r3, [r7, #20]
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d1d9      	bne.n	8013c82 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <udp_bind+0xd2>
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	e000      	b.n	8013cdc <udp_bind+0xd4>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	68fa      	ldr	r2, [r7, #12]
 8013cde:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	88fa      	ldrh	r2, [r7, #6]
 8013ce4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013ce6:	7cfb      	ldrb	r3, [r7, #19]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d106      	bne.n	8013cfa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013cec:	4b09      	ldr	r3, [pc, #36]	; (8013d14 <udp_bind+0x10c>)
 8013cee:	681a      	ldr	r2, [r3, #0]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013cf4:	4a07      	ldr	r2, [pc, #28]	; (8013d14 <udp_bind+0x10c>)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	0801b5ec 	.word	0x0801b5ec
 8013d08:	0801a920 	.word	0x0801a920
 8013d0c:	0801abe8 	.word	0x0801abe8
 8013d10:	0801a974 	.word	0x0801a974
 8013d14:	20008eb8 	.word	0x20008eb8

08013d18 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b086      	sub	sp, #24
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	4613      	mov	r3, r2
 8013d24:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d109      	bne.n	8013d40 <udp_connect+0x28>
 8013d2c:	4b2c      	ldr	r3, [pc, #176]	; (8013de0 <udp_connect+0xc8>)
 8013d2e:	f240 4235 	movw	r2, #1077	; 0x435
 8013d32:	492c      	ldr	r1, [pc, #176]	; (8013de4 <udp_connect+0xcc>)
 8013d34:	482c      	ldr	r0, [pc, #176]	; (8013de8 <udp_connect+0xd0>)
 8013d36:	f003 fd45 	bl	80177c4 <iprintf>
 8013d3a:	f06f 030f 	mvn.w	r3, #15
 8013d3e:	e04b      	b.n	8013dd8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d109      	bne.n	8013d5a <udp_connect+0x42>
 8013d46:	4b26      	ldr	r3, [pc, #152]	; (8013de0 <udp_connect+0xc8>)
 8013d48:	f240 4236 	movw	r2, #1078	; 0x436
 8013d4c:	4927      	ldr	r1, [pc, #156]	; (8013dec <udp_connect+0xd4>)
 8013d4e:	4826      	ldr	r0, [pc, #152]	; (8013de8 <udp_connect+0xd0>)
 8013d50:	f003 fd38 	bl	80177c4 <iprintf>
 8013d54:	f06f 030f 	mvn.w	r3, #15
 8013d58:	e03e      	b.n	8013dd8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	8a5b      	ldrh	r3, [r3, #18]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d10f      	bne.n	8013d82 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013d62:	68f9      	ldr	r1, [r7, #12]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	8a5b      	ldrh	r3, [r3, #18]
 8013d68:	461a      	mov	r2, r3
 8013d6a:	68f8      	ldr	r0, [r7, #12]
 8013d6c:	f7ff ff4c 	bl	8013c08 <udp_bind>
 8013d70:	4603      	mov	r3, r0
 8013d72:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013d74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d002      	beq.n	8013d82 <udp_connect+0x6a>
      return err;
 8013d7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d80:	e02a      	b.n	8013dd8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d002      	beq.n	8013d8e <udp_connect+0x76>
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	e000      	b.n	8013d90 <udp_connect+0x78>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	68fa      	ldr	r2, [r7, #12]
 8013d92:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	88fa      	ldrh	r2, [r7, #6]
 8013d98:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	7c1b      	ldrb	r3, [r3, #16]
 8013d9e:	f043 0304 	orr.w	r3, r3, #4
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013da8:	4b11      	ldr	r3, [pc, #68]	; (8013df0 <udp_connect+0xd8>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	617b      	str	r3, [r7, #20]
 8013dae:	e008      	b.n	8013dc2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d101      	bne.n	8013dbc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013db8:	2300      	movs	r3, #0
 8013dba:	e00d      	b.n	8013dd8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	68db      	ldr	r3, [r3, #12]
 8013dc0:	617b      	str	r3, [r7, #20]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1f3      	bne.n	8013db0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013dc8:	4b09      	ldr	r3, [pc, #36]	; (8013df0 <udp_connect+0xd8>)
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013dd0:	4a07      	ldr	r2, [pc, #28]	; (8013df0 <udp_connect+0xd8>)
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3718      	adds	r7, #24
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	0801a920 	.word	0x0801a920
 8013de4:	0801ac00 	.word	0x0801ac00
 8013de8:	0801a974 	.word	0x0801a974
 8013dec:	0801ac1c 	.word	0x0801ac1c
 8013df0:	20008eb8 	.word	0x20008eb8

08013df4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d107      	bne.n	8013e12 <udp_disconnect+0x1e>
 8013e02:	4b0d      	ldr	r3, [pc, #52]	; (8013e38 <udp_disconnect+0x44>)
 8013e04:	f240 426a 	movw	r2, #1130	; 0x46a
 8013e08:	490c      	ldr	r1, [pc, #48]	; (8013e3c <udp_disconnect+0x48>)
 8013e0a:	480d      	ldr	r0, [pc, #52]	; (8013e40 <udp_disconnect+0x4c>)
 8013e0c:	f003 fcda 	bl	80177c4 <iprintf>
 8013e10:	e00f      	b.n	8013e32 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2200      	movs	r2, #0
 8013e16:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	7c1b      	ldrb	r3, [r3, #16]
 8013e28:	f023 0304 	bic.w	r3, r3, #4
 8013e2c:	b2da      	uxtb	r2, r3
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	741a      	strb	r2, [r3, #16]
}
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	0801a920 	.word	0x0801a920
 8013e3c:	0801ac38 	.word	0x0801ac38
 8013e40:	0801a974 	.word	0x0801a974

08013e44 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	60b9      	str	r1, [r7, #8]
 8013e4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d107      	bne.n	8013e66 <udp_recv+0x22>
 8013e56:	4b08      	ldr	r3, [pc, #32]	; (8013e78 <udp_recv+0x34>)
 8013e58:	f240 428a 	movw	r2, #1162	; 0x48a
 8013e5c:	4907      	ldr	r1, [pc, #28]	; (8013e7c <udp_recv+0x38>)
 8013e5e:	4808      	ldr	r0, [pc, #32]	; (8013e80 <udp_recv+0x3c>)
 8013e60:	f003 fcb0 	bl	80177c4 <iprintf>
 8013e64:	e005      	b.n	8013e72 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	68ba      	ldr	r2, [r7, #8]
 8013e6a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	61da      	str	r2, [r3, #28]
}
 8013e72:	3710      	adds	r7, #16
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	0801a920 	.word	0x0801a920
 8013e7c:	0801ac54 	.word	0x0801ac54
 8013e80:	0801a974 	.word	0x0801a974

08013e84 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d107      	bne.n	8013ea2 <udp_remove+0x1e>
 8013e92:	4b19      	ldr	r3, [pc, #100]	; (8013ef8 <udp_remove+0x74>)
 8013e94:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013e98:	4918      	ldr	r1, [pc, #96]	; (8013efc <udp_remove+0x78>)
 8013e9a:	4819      	ldr	r0, [pc, #100]	; (8013f00 <udp_remove+0x7c>)
 8013e9c:	f003 fc92 	bl	80177c4 <iprintf>
 8013ea0:	e026      	b.n	8013ef0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013ea2:	4b18      	ldr	r3, [pc, #96]	; (8013f04 <udp_remove+0x80>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d105      	bne.n	8013eb8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013eac:	4b15      	ldr	r3, [pc, #84]	; (8013f04 <udp_remove+0x80>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	4a14      	ldr	r2, [pc, #80]	; (8013f04 <udp_remove+0x80>)
 8013eb4:	6013      	str	r3, [r2, #0]
 8013eb6:	e017      	b.n	8013ee8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013eb8:	4b12      	ldr	r3, [pc, #72]	; (8013f04 <udp_remove+0x80>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	60fb      	str	r3, [r7, #12]
 8013ebe:	e010      	b.n	8013ee2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	68db      	ldr	r3, [r3, #12]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d009      	beq.n	8013edc <udp_remove+0x58>
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	68db      	ldr	r3, [r3, #12]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d104      	bne.n	8013edc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	68da      	ldr	r2, [r3, #12]
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	60da      	str	r2, [r3, #12]
        break;
 8013eda:	e005      	b.n	8013ee8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	60fb      	str	r3, [r7, #12]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d1eb      	bne.n	8013ec0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013ee8:	6879      	ldr	r1, [r7, #4]
 8013eea:	2000      	movs	r0, #0
 8013eec:	f7f8 fe94 	bl	800cc18 <memp_free>
}
 8013ef0:	3710      	adds	r7, #16
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	0801a920 	.word	0x0801a920
 8013efc:	0801ac6c 	.word	0x0801ac6c
 8013f00:	0801a974 	.word	0x0801a974
 8013f04:	20008eb8 	.word	0x20008eb8

08013f08 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013f0e:	2000      	movs	r0, #0
 8013f10:	f7f8 fe12 	bl	800cb38 <memp_malloc>
 8013f14:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d007      	beq.n	8013f2c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013f1c:	2220      	movs	r2, #32
 8013f1e:	2100      	movs	r1, #0
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f003 fc47 	bl	80177b4 <memset>
    pcb->ttl = UDP_TTL;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	22ff      	movs	r2, #255	; 0xff
 8013f2a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013f2c:	687b      	ldr	r3, [r7, #4]
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3708      	adds	r7, #8
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
	...

08013f38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d01e      	beq.n	8013f86 <udp_netif_ip_addr_changed+0x4e>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d01a      	beq.n	8013f86 <udp_netif_ip_addr_changed+0x4e>
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d017      	beq.n	8013f86 <udp_netif_ip_addr_changed+0x4e>
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d013      	beq.n	8013f86 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f5e:	4b0d      	ldr	r3, [pc, #52]	; (8013f94 <udp_netif_ip_addr_changed+0x5c>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	60fb      	str	r3, [r7, #12]
 8013f64:	e00c      	b.n	8013f80 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d103      	bne.n	8013f7a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	68db      	ldr	r3, [r3, #12]
 8013f7e:	60fb      	str	r3, [r7, #12]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d1ef      	bne.n	8013f66 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013f86:	bf00      	nop
 8013f88:	3714      	adds	r7, #20
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop
 8013f94:	20008eb8 	.word	0x20008eb8

08013f98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013fa0:	4915      	ldr	r1, [pc, #84]	; (8013ff8 <etharp_free_entry+0x60>)
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	005b      	lsls	r3, r3, #1
 8013fa8:	4413      	add	r3, r2
 8013faa:	00db      	lsls	r3, r3, #3
 8013fac:	440b      	add	r3, r1
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d013      	beq.n	8013fdc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013fb4:	4910      	ldr	r1, [pc, #64]	; (8013ff8 <etharp_free_entry+0x60>)
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	4413      	add	r3, r2
 8013fbe:	00db      	lsls	r3, r3, #3
 8013fc0:	440b      	add	r3, r1
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7f9 fc9d 	bl	800d904 <pbuf_free>
    arp_table[i].q = NULL;
 8013fca:	490b      	ldr	r1, [pc, #44]	; (8013ff8 <etharp_free_entry+0x60>)
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	440b      	add	r3, r1
 8013fd8:	2200      	movs	r2, #0
 8013fda:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013fdc:	4906      	ldr	r1, [pc, #24]	; (8013ff8 <etharp_free_entry+0x60>)
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	440b      	add	r3, r1
 8013fea:	3314      	adds	r3, #20
 8013fec:	2200      	movs	r2, #0
 8013fee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013ff0:	bf00      	nop
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	20008ebc 	.word	0x20008ebc

08013ffc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014002:	2300      	movs	r3, #0
 8014004:	607b      	str	r3, [r7, #4]
 8014006:	e096      	b.n	8014136 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014008:	494f      	ldr	r1, [pc, #316]	; (8014148 <etharp_tmr+0x14c>)
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	4613      	mov	r3, r2
 801400e:	005b      	lsls	r3, r3, #1
 8014010:	4413      	add	r3, r2
 8014012:	00db      	lsls	r3, r3, #3
 8014014:	440b      	add	r3, r1
 8014016:	3314      	adds	r3, #20
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801401c:	78fb      	ldrb	r3, [r7, #3]
 801401e:	2b00      	cmp	r3, #0
 8014020:	f000 8086 	beq.w	8014130 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014024:	4948      	ldr	r1, [pc, #288]	; (8014148 <etharp_tmr+0x14c>)
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	4613      	mov	r3, r2
 801402a:	005b      	lsls	r3, r3, #1
 801402c:	4413      	add	r3, r2
 801402e:	00db      	lsls	r3, r3, #3
 8014030:	440b      	add	r3, r1
 8014032:	3312      	adds	r3, #18
 8014034:	881b      	ldrh	r3, [r3, #0]
 8014036:	3301      	adds	r3, #1
 8014038:	b298      	uxth	r0, r3
 801403a:	4943      	ldr	r1, [pc, #268]	; (8014148 <etharp_tmr+0x14c>)
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	4613      	mov	r3, r2
 8014040:	005b      	lsls	r3, r3, #1
 8014042:	4413      	add	r3, r2
 8014044:	00db      	lsls	r3, r3, #3
 8014046:	440b      	add	r3, r1
 8014048:	3312      	adds	r3, #18
 801404a:	4602      	mov	r2, r0
 801404c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801404e:	493e      	ldr	r1, [pc, #248]	; (8014148 <etharp_tmr+0x14c>)
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	4613      	mov	r3, r2
 8014054:	005b      	lsls	r3, r3, #1
 8014056:	4413      	add	r3, r2
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	440b      	add	r3, r1
 801405c:	3312      	adds	r3, #18
 801405e:	881b      	ldrh	r3, [r3, #0]
 8014060:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014064:	d215      	bcs.n	8014092 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014066:	4938      	ldr	r1, [pc, #224]	; (8014148 <etharp_tmr+0x14c>)
 8014068:	687a      	ldr	r2, [r7, #4]
 801406a:	4613      	mov	r3, r2
 801406c:	005b      	lsls	r3, r3, #1
 801406e:	4413      	add	r3, r2
 8014070:	00db      	lsls	r3, r3, #3
 8014072:	440b      	add	r3, r1
 8014074:	3314      	adds	r3, #20
 8014076:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014078:	2b01      	cmp	r3, #1
 801407a:	d10e      	bne.n	801409a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801407c:	4932      	ldr	r1, [pc, #200]	; (8014148 <etharp_tmr+0x14c>)
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	4613      	mov	r3, r2
 8014082:	005b      	lsls	r3, r3, #1
 8014084:	4413      	add	r3, r2
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	440b      	add	r3, r1
 801408a:	3312      	adds	r3, #18
 801408c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801408e:	2b04      	cmp	r3, #4
 8014090:	d903      	bls.n	801409a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7ff ff80 	bl	8013f98 <etharp_free_entry>
 8014098:	e04a      	b.n	8014130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801409a:	492b      	ldr	r1, [pc, #172]	; (8014148 <etharp_tmr+0x14c>)
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	4613      	mov	r3, r2
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	440b      	add	r3, r1
 80140a8:	3314      	adds	r3, #20
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b03      	cmp	r3, #3
 80140ae:	d10a      	bne.n	80140c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80140b0:	4925      	ldr	r1, [pc, #148]	; (8014148 <etharp_tmr+0x14c>)
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	4613      	mov	r3, r2
 80140b6:	005b      	lsls	r3, r3, #1
 80140b8:	4413      	add	r3, r2
 80140ba:	00db      	lsls	r3, r3, #3
 80140bc:	440b      	add	r3, r1
 80140be:	3314      	adds	r3, #20
 80140c0:	2204      	movs	r2, #4
 80140c2:	701a      	strb	r2, [r3, #0]
 80140c4:	e034      	b.n	8014130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80140c6:	4920      	ldr	r1, [pc, #128]	; (8014148 <etharp_tmr+0x14c>)
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	4613      	mov	r3, r2
 80140cc:	005b      	lsls	r3, r3, #1
 80140ce:	4413      	add	r3, r2
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	440b      	add	r3, r1
 80140d4:	3314      	adds	r3, #20
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	2b04      	cmp	r3, #4
 80140da:	d10a      	bne.n	80140f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80140dc:	491a      	ldr	r1, [pc, #104]	; (8014148 <etharp_tmr+0x14c>)
 80140de:	687a      	ldr	r2, [r7, #4]
 80140e0:	4613      	mov	r3, r2
 80140e2:	005b      	lsls	r3, r3, #1
 80140e4:	4413      	add	r3, r2
 80140e6:	00db      	lsls	r3, r3, #3
 80140e8:	440b      	add	r3, r1
 80140ea:	3314      	adds	r3, #20
 80140ec:	2202      	movs	r2, #2
 80140ee:	701a      	strb	r2, [r3, #0]
 80140f0:	e01e      	b.n	8014130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140f2:	4915      	ldr	r1, [pc, #84]	; (8014148 <etharp_tmr+0x14c>)
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	4613      	mov	r3, r2
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	4413      	add	r3, r2
 80140fc:	00db      	lsls	r3, r3, #3
 80140fe:	440b      	add	r3, r1
 8014100:	3314      	adds	r3, #20
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	2b01      	cmp	r3, #1
 8014106:	d113      	bne.n	8014130 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014108:	490f      	ldr	r1, [pc, #60]	; (8014148 <etharp_tmr+0x14c>)
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	4613      	mov	r3, r2
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	4413      	add	r3, r2
 8014112:	00db      	lsls	r3, r3, #3
 8014114:	440b      	add	r3, r1
 8014116:	3308      	adds	r3, #8
 8014118:	6818      	ldr	r0, [r3, #0]
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	4613      	mov	r3, r2
 801411e:	005b      	lsls	r3, r3, #1
 8014120:	4413      	add	r3, r2
 8014122:	00db      	lsls	r3, r3, #3
 8014124:	4a08      	ldr	r2, [pc, #32]	; (8014148 <etharp_tmr+0x14c>)
 8014126:	4413      	add	r3, r2
 8014128:	3304      	adds	r3, #4
 801412a:	4619      	mov	r1, r3
 801412c:	f000 fe6e 	bl	8014e0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	3301      	adds	r3, #1
 8014134:	607b      	str	r3, [r7, #4]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2b09      	cmp	r3, #9
 801413a:	f77f af65 	ble.w	8014008 <etharp_tmr+0xc>
      }
    }
  }
}
 801413e:	bf00      	nop
 8014140:	bf00      	nop
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	20008ebc 	.word	0x20008ebc

0801414c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b08a      	sub	sp, #40	; 0x28
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	460b      	mov	r3, r1
 8014156:	607a      	str	r2, [r7, #4]
 8014158:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801415a:	230a      	movs	r3, #10
 801415c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801415e:	230a      	movs	r3, #10
 8014160:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014162:	230a      	movs	r3, #10
 8014164:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014166:	2300      	movs	r3, #0
 8014168:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801416a:	230a      	movs	r3, #10
 801416c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801416e:	2300      	movs	r3, #0
 8014170:	83bb      	strh	r3, [r7, #28]
 8014172:	2300      	movs	r3, #0
 8014174:	837b      	strh	r3, [r7, #26]
 8014176:	2300      	movs	r3, #0
 8014178:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801417a:	2300      	movs	r3, #0
 801417c:	843b      	strh	r3, [r7, #32]
 801417e:	e0ae      	b.n	80142de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014184:	49a6      	ldr	r1, [pc, #664]	; (8014420 <etharp_find_entry+0x2d4>)
 8014186:	4613      	mov	r3, r2
 8014188:	005b      	lsls	r3, r3, #1
 801418a:	4413      	add	r3, r2
 801418c:	00db      	lsls	r3, r3, #3
 801418e:	440b      	add	r3, r1
 8014190:	3314      	adds	r3, #20
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014196:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801419a:	2b0a      	cmp	r3, #10
 801419c:	d105      	bne.n	80141aa <etharp_find_entry+0x5e>
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d102      	bne.n	80141aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80141a4:	8c3b      	ldrh	r3, [r7, #32]
 80141a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80141a8:	e095      	b.n	80142d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80141aa:	7dfb      	ldrb	r3, [r7, #23]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 8092 	beq.w	80142d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80141b2:	7dfb      	ldrb	r3, [r7, #23]
 80141b4:	2b01      	cmp	r3, #1
 80141b6:	d009      	beq.n	80141cc <etharp_find_entry+0x80>
 80141b8:	7dfb      	ldrb	r3, [r7, #23]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d806      	bhi.n	80141cc <etharp_find_entry+0x80>
 80141be:	4b99      	ldr	r3, [pc, #612]	; (8014424 <etharp_find_entry+0x2d8>)
 80141c0:	f240 1223 	movw	r2, #291	; 0x123
 80141c4:	4998      	ldr	r1, [pc, #608]	; (8014428 <etharp_find_entry+0x2dc>)
 80141c6:	4899      	ldr	r0, [pc, #612]	; (801442c <etharp_find_entry+0x2e0>)
 80141c8:	f003 fafc 	bl	80177c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d020      	beq.n	8014214 <etharp_find_entry+0xc8>
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	6819      	ldr	r1, [r3, #0]
 80141d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141da:	4891      	ldr	r0, [pc, #580]	; (8014420 <etharp_find_entry+0x2d4>)
 80141dc:	4613      	mov	r3, r2
 80141de:	005b      	lsls	r3, r3, #1
 80141e0:	4413      	add	r3, r2
 80141e2:	00db      	lsls	r3, r3, #3
 80141e4:	4403      	add	r3, r0
 80141e6:	3304      	adds	r3, #4
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4299      	cmp	r1, r3
 80141ec:	d112      	bne.n	8014214 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d00c      	beq.n	801420e <etharp_find_entry+0xc2>
 80141f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f8:	4989      	ldr	r1, [pc, #548]	; (8014420 <etharp_find_entry+0x2d4>)
 80141fa:	4613      	mov	r3, r2
 80141fc:	005b      	lsls	r3, r3, #1
 80141fe:	4413      	add	r3, r2
 8014200:	00db      	lsls	r3, r3, #3
 8014202:	440b      	add	r3, r1
 8014204:	3308      	adds	r3, #8
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	429a      	cmp	r2, r3
 801420c:	d102      	bne.n	8014214 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801420e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014212:	e100      	b.n	8014416 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014214:	7dfb      	ldrb	r3, [r7, #23]
 8014216:	2b01      	cmp	r3, #1
 8014218:	d140      	bne.n	801429c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801421a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801421e:	4980      	ldr	r1, [pc, #512]	; (8014420 <etharp_find_entry+0x2d4>)
 8014220:	4613      	mov	r3, r2
 8014222:	005b      	lsls	r3, r3, #1
 8014224:	4413      	add	r3, r2
 8014226:	00db      	lsls	r3, r3, #3
 8014228:	440b      	add	r3, r1
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d01a      	beq.n	8014266 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014234:	497a      	ldr	r1, [pc, #488]	; (8014420 <etharp_find_entry+0x2d4>)
 8014236:	4613      	mov	r3, r2
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	4413      	add	r3, r2
 801423c:	00db      	lsls	r3, r3, #3
 801423e:	440b      	add	r3, r1
 8014240:	3312      	adds	r3, #18
 8014242:	881b      	ldrh	r3, [r3, #0]
 8014244:	8bba      	ldrh	r2, [r7, #28]
 8014246:	429a      	cmp	r2, r3
 8014248:	d845      	bhi.n	80142d6 <etharp_find_entry+0x18a>
            old_queue = i;
 801424a:	8c3b      	ldrh	r3, [r7, #32]
 801424c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801424e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014252:	4973      	ldr	r1, [pc, #460]	; (8014420 <etharp_find_entry+0x2d4>)
 8014254:	4613      	mov	r3, r2
 8014256:	005b      	lsls	r3, r3, #1
 8014258:	4413      	add	r3, r2
 801425a:	00db      	lsls	r3, r3, #3
 801425c:	440b      	add	r3, r1
 801425e:	3312      	adds	r3, #18
 8014260:	881b      	ldrh	r3, [r3, #0]
 8014262:	83bb      	strh	r3, [r7, #28]
 8014264:	e037      	b.n	80142d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801426a:	496d      	ldr	r1, [pc, #436]	; (8014420 <etharp_find_entry+0x2d4>)
 801426c:	4613      	mov	r3, r2
 801426e:	005b      	lsls	r3, r3, #1
 8014270:	4413      	add	r3, r2
 8014272:	00db      	lsls	r3, r3, #3
 8014274:	440b      	add	r3, r1
 8014276:	3312      	adds	r3, #18
 8014278:	881b      	ldrh	r3, [r3, #0]
 801427a:	8b7a      	ldrh	r2, [r7, #26]
 801427c:	429a      	cmp	r2, r3
 801427e:	d82a      	bhi.n	80142d6 <etharp_find_entry+0x18a>
            old_pending = i;
 8014280:	8c3b      	ldrh	r3, [r7, #32]
 8014282:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014284:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014288:	4965      	ldr	r1, [pc, #404]	; (8014420 <etharp_find_entry+0x2d4>)
 801428a:	4613      	mov	r3, r2
 801428c:	005b      	lsls	r3, r3, #1
 801428e:	4413      	add	r3, r2
 8014290:	00db      	lsls	r3, r3, #3
 8014292:	440b      	add	r3, r1
 8014294:	3312      	adds	r3, #18
 8014296:	881b      	ldrh	r3, [r3, #0]
 8014298:	837b      	strh	r3, [r7, #26]
 801429a:	e01c      	b.n	80142d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801429c:	7dfb      	ldrb	r3, [r7, #23]
 801429e:	2b01      	cmp	r3, #1
 80142a0:	d919      	bls.n	80142d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80142a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142a6:	495e      	ldr	r1, [pc, #376]	; (8014420 <etharp_find_entry+0x2d4>)
 80142a8:	4613      	mov	r3, r2
 80142aa:	005b      	lsls	r3, r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	00db      	lsls	r3, r3, #3
 80142b0:	440b      	add	r3, r1
 80142b2:	3312      	adds	r3, #18
 80142b4:	881b      	ldrh	r3, [r3, #0]
 80142b6:	8b3a      	ldrh	r2, [r7, #24]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d80c      	bhi.n	80142d6 <etharp_find_entry+0x18a>
            old_stable = i;
 80142bc:	8c3b      	ldrh	r3, [r7, #32]
 80142be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80142c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142c4:	4956      	ldr	r1, [pc, #344]	; (8014420 <etharp_find_entry+0x2d4>)
 80142c6:	4613      	mov	r3, r2
 80142c8:	005b      	lsls	r3, r3, #1
 80142ca:	4413      	add	r3, r2
 80142cc:	00db      	lsls	r3, r3, #3
 80142ce:	440b      	add	r3, r1
 80142d0:	3312      	adds	r3, #18
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142d6:	8c3b      	ldrh	r3, [r7, #32]
 80142d8:	3301      	adds	r3, #1
 80142da:	b29b      	uxth	r3, r3
 80142dc:	843b      	strh	r3, [r7, #32]
 80142de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	f77f af4c 	ble.w	8014180 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80142e8:	7afb      	ldrb	r3, [r7, #11]
 80142ea:	f003 0302 	and.w	r3, r3, #2
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d108      	bne.n	8014304 <etharp_find_entry+0x1b8>
 80142f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142f6:	2b0a      	cmp	r3, #10
 80142f8:	d107      	bne.n	801430a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80142fa:	7afb      	ldrb	r3, [r7, #11]
 80142fc:	f003 0301 	and.w	r3, r3, #1
 8014300:	2b00      	cmp	r3, #0
 8014302:	d102      	bne.n	801430a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014304:	f04f 33ff 	mov.w	r3, #4294967295
 8014308:	e085      	b.n	8014416 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801430a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801430e:	2b09      	cmp	r3, #9
 8014310:	dc02      	bgt.n	8014318 <etharp_find_entry+0x1cc>
    i = empty;
 8014312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014314:	843b      	strh	r3, [r7, #32]
 8014316:	e039      	b.n	801438c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014318:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801431c:	2b09      	cmp	r3, #9
 801431e:	dc14      	bgt.n	801434a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014322:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014328:	493d      	ldr	r1, [pc, #244]	; (8014420 <etharp_find_entry+0x2d4>)
 801432a:	4613      	mov	r3, r2
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4413      	add	r3, r2
 8014330:	00db      	lsls	r3, r3, #3
 8014332:	440b      	add	r3, r1
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d018      	beq.n	801436c <etharp_find_entry+0x220>
 801433a:	4b3a      	ldr	r3, [pc, #232]	; (8014424 <etharp_find_entry+0x2d8>)
 801433c:	f240 126d 	movw	r2, #365	; 0x16d
 8014340:	493b      	ldr	r1, [pc, #236]	; (8014430 <etharp_find_entry+0x2e4>)
 8014342:	483a      	ldr	r0, [pc, #232]	; (801442c <etharp_find_entry+0x2e0>)
 8014344:	f003 fa3e 	bl	80177c4 <iprintf>
 8014348:	e010      	b.n	801436c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801434a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801434e:	2b09      	cmp	r3, #9
 8014350:	dc02      	bgt.n	8014358 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014354:	843b      	strh	r3, [r7, #32]
 8014356:	e009      	b.n	801436c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801435c:	2b09      	cmp	r3, #9
 801435e:	dc02      	bgt.n	8014366 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014360:	8bfb      	ldrh	r3, [r7, #30]
 8014362:	843b      	strh	r3, [r7, #32]
 8014364:	e002      	b.n	801436c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014366:	f04f 33ff 	mov.w	r3, #4294967295
 801436a:	e054      	b.n	8014416 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801436c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014370:	2b09      	cmp	r3, #9
 8014372:	dd06      	ble.n	8014382 <etharp_find_entry+0x236>
 8014374:	4b2b      	ldr	r3, [pc, #172]	; (8014424 <etharp_find_entry+0x2d8>)
 8014376:	f240 127f 	movw	r2, #383	; 0x17f
 801437a:	492e      	ldr	r1, [pc, #184]	; (8014434 <etharp_find_entry+0x2e8>)
 801437c:	482b      	ldr	r0, [pc, #172]	; (801442c <etharp_find_entry+0x2e0>)
 801437e:	f003 fa21 	bl	80177c4 <iprintf>
    etharp_free_entry(i);
 8014382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014386:	4618      	mov	r0, r3
 8014388:	f7ff fe06 	bl	8013f98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801438c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014390:	2b09      	cmp	r3, #9
 8014392:	dd06      	ble.n	80143a2 <etharp_find_entry+0x256>
 8014394:	4b23      	ldr	r3, [pc, #140]	; (8014424 <etharp_find_entry+0x2d8>)
 8014396:	f240 1283 	movw	r2, #387	; 0x183
 801439a:	4926      	ldr	r1, [pc, #152]	; (8014434 <etharp_find_entry+0x2e8>)
 801439c:	4823      	ldr	r0, [pc, #140]	; (801442c <etharp_find_entry+0x2e0>)
 801439e:	f003 fa11 	bl	80177c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80143a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143a6:	491e      	ldr	r1, [pc, #120]	; (8014420 <etharp_find_entry+0x2d4>)
 80143a8:	4613      	mov	r3, r2
 80143aa:	005b      	lsls	r3, r3, #1
 80143ac:	4413      	add	r3, r2
 80143ae:	00db      	lsls	r3, r3, #3
 80143b0:	440b      	add	r3, r1
 80143b2:	3314      	adds	r3, #20
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d006      	beq.n	80143c8 <etharp_find_entry+0x27c>
 80143ba:	4b1a      	ldr	r3, [pc, #104]	; (8014424 <etharp_find_entry+0x2d8>)
 80143bc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80143c0:	491d      	ldr	r1, [pc, #116]	; (8014438 <etharp_find_entry+0x2ec>)
 80143c2:	481a      	ldr	r0, [pc, #104]	; (801442c <etharp_find_entry+0x2e0>)
 80143c4:	f003 f9fe 	bl	80177c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d00b      	beq.n	80143e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80143ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6819      	ldr	r1, [r3, #0]
 80143d6:	4812      	ldr	r0, [pc, #72]	; (8014420 <etharp_find_entry+0x2d4>)
 80143d8:	4613      	mov	r3, r2
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	4413      	add	r3, r2
 80143de:	00db      	lsls	r3, r3, #3
 80143e0:	4403      	add	r3, r0
 80143e2:	3304      	adds	r3, #4
 80143e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80143e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143ea:	490d      	ldr	r1, [pc, #52]	; (8014420 <etharp_find_entry+0x2d4>)
 80143ec:	4613      	mov	r3, r2
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	440b      	add	r3, r1
 80143f6:	3312      	adds	r3, #18
 80143f8:	2200      	movs	r2, #0
 80143fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80143fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014400:	4907      	ldr	r1, [pc, #28]	; (8014420 <etharp_find_entry+0x2d4>)
 8014402:	4613      	mov	r3, r2
 8014404:	005b      	lsls	r3, r3, #1
 8014406:	4413      	add	r3, r2
 8014408:	00db      	lsls	r3, r3, #3
 801440a:	440b      	add	r3, r1
 801440c:	3308      	adds	r3, #8
 801440e:	687a      	ldr	r2, [r7, #4]
 8014410:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3728      	adds	r7, #40	; 0x28
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	20008ebc 	.word	0x20008ebc
 8014424:	0801ac84 	.word	0x0801ac84
 8014428:	0801acbc 	.word	0x0801acbc
 801442c:	0801acfc 	.word	0x0801acfc
 8014430:	0801ad24 	.word	0x0801ad24
 8014434:	0801ad3c 	.word	0x0801ad3c
 8014438:	0801ad50 	.word	0x0801ad50

0801443c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b088      	sub	sp, #32
 8014440:	af02      	add	r7, sp, #8
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
 8014448:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014450:	2b06      	cmp	r3, #6
 8014452:	d006      	beq.n	8014462 <etharp_update_arp_entry+0x26>
 8014454:	4b48      	ldr	r3, [pc, #288]	; (8014578 <etharp_update_arp_entry+0x13c>)
 8014456:	f240 12a9 	movw	r2, #425	; 0x1a9
 801445a:	4948      	ldr	r1, [pc, #288]	; (801457c <etharp_update_arp_entry+0x140>)
 801445c:	4848      	ldr	r0, [pc, #288]	; (8014580 <etharp_update_arp_entry+0x144>)
 801445e:	f003 f9b1 	bl	80177c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d012      	beq.n	801448e <etharp_update_arp_entry+0x52>
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d00e      	beq.n	801448e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	68f9      	ldr	r1, [r7, #12]
 8014476:	4618      	mov	r0, r3
 8014478:	f001 f8fe 	bl	8015678 <ip4_addr_isbroadcast_u32>
 801447c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801447e:	2b00      	cmp	r3, #0
 8014480:	d105      	bne.n	801448e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801448a:	2be0      	cmp	r3, #224	; 0xe0
 801448c:	d102      	bne.n	8014494 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801448e:	f06f 030f 	mvn.w	r3, #15
 8014492:	e06c      	b.n	801456e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014494:	78fb      	ldrb	r3, [r7, #3]
 8014496:	68fa      	ldr	r2, [r7, #12]
 8014498:	4619      	mov	r1, r3
 801449a:	68b8      	ldr	r0, [r7, #8]
 801449c:	f7ff fe56 	bl	801414c <etharp_find_entry>
 80144a0:	4603      	mov	r3, r0
 80144a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80144a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	da02      	bge.n	80144b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80144ac:	8afb      	ldrh	r3, [r7, #22]
 80144ae:	b25b      	sxtb	r3, r3
 80144b0:	e05d      	b.n	801456e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80144b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144b6:	4933      	ldr	r1, [pc, #204]	; (8014584 <etharp_update_arp_entry+0x148>)
 80144b8:	4613      	mov	r3, r2
 80144ba:	005b      	lsls	r3, r3, #1
 80144bc:	4413      	add	r3, r2
 80144be:	00db      	lsls	r3, r3, #3
 80144c0:	440b      	add	r3, r1
 80144c2:	3314      	adds	r3, #20
 80144c4:	2202      	movs	r2, #2
 80144c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80144c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144cc:	492d      	ldr	r1, [pc, #180]	; (8014584 <etharp_update_arp_entry+0x148>)
 80144ce:	4613      	mov	r3, r2
 80144d0:	005b      	lsls	r3, r3, #1
 80144d2:	4413      	add	r3, r2
 80144d4:	00db      	lsls	r3, r3, #3
 80144d6:	440b      	add	r3, r1
 80144d8:	3308      	adds	r3, #8
 80144da:	68fa      	ldr	r2, [r7, #12]
 80144dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80144de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144e2:	4613      	mov	r3, r2
 80144e4:	005b      	lsls	r3, r3, #1
 80144e6:	4413      	add	r3, r2
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	3308      	adds	r3, #8
 80144ec:	4a25      	ldr	r2, [pc, #148]	; (8014584 <etharp_update_arp_entry+0x148>)
 80144ee:	4413      	add	r3, r2
 80144f0:	3304      	adds	r3, #4
 80144f2:	2206      	movs	r2, #6
 80144f4:	6879      	ldr	r1, [r7, #4]
 80144f6:	4618      	mov	r0, r3
 80144f8:	f003 f94e 	bl	8017798 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80144fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014500:	4920      	ldr	r1, [pc, #128]	; (8014584 <etharp_update_arp_entry+0x148>)
 8014502:	4613      	mov	r3, r2
 8014504:	005b      	lsls	r3, r3, #1
 8014506:	4413      	add	r3, r2
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	440b      	add	r3, r1
 801450c:	3312      	adds	r3, #18
 801450e:	2200      	movs	r2, #0
 8014510:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014516:	491b      	ldr	r1, [pc, #108]	; (8014584 <etharp_update_arp_entry+0x148>)
 8014518:	4613      	mov	r3, r2
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	00db      	lsls	r3, r3, #3
 8014520:	440b      	add	r3, r1
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d021      	beq.n	801456c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014528:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801452c:	4915      	ldr	r1, [pc, #84]	; (8014584 <etharp_update_arp_entry+0x148>)
 801452e:	4613      	mov	r3, r2
 8014530:	005b      	lsls	r3, r3, #1
 8014532:	4413      	add	r3, r2
 8014534:	00db      	lsls	r3, r3, #3
 8014536:	440b      	add	r3, r1
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801453c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014540:	4910      	ldr	r1, [pc, #64]	; (8014584 <etharp_update_arp_entry+0x148>)
 8014542:	4613      	mov	r3, r2
 8014544:	005b      	lsls	r3, r3, #1
 8014546:	4413      	add	r3, r2
 8014548:	00db      	lsls	r3, r3, #3
 801454a:	440b      	add	r3, r1
 801454c:	2200      	movs	r2, #0
 801454e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6939      	ldr	r1, [r7, #16]
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f002 f827 	bl	80165b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014566:	6938      	ldr	r0, [r7, #16]
 8014568:	f7f9 f9cc 	bl	800d904 <pbuf_free>
  }
  return ERR_OK;
 801456c:	2300      	movs	r3, #0
}
 801456e:	4618      	mov	r0, r3
 8014570:	3718      	adds	r7, #24
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	0801ac84 	.word	0x0801ac84
 801457c:	0801ad7c 	.word	0x0801ad7c
 8014580:	0801acfc 	.word	0x0801acfc
 8014584:	20008ebc 	.word	0x20008ebc

08014588 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b084      	sub	sp, #16
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014590:	2300      	movs	r3, #0
 8014592:	60fb      	str	r3, [r7, #12]
 8014594:	e01e      	b.n	80145d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014596:	4913      	ldr	r1, [pc, #76]	; (80145e4 <etharp_cleanup_netif+0x5c>)
 8014598:	68fa      	ldr	r2, [r7, #12]
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	440b      	add	r3, r1
 80145a4:	3314      	adds	r3, #20
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80145aa:	7afb      	ldrb	r3, [r7, #11]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00e      	beq.n	80145ce <etharp_cleanup_netif+0x46>
 80145b0:	490c      	ldr	r1, [pc, #48]	; (80145e4 <etharp_cleanup_netif+0x5c>)
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	4613      	mov	r3, r2
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	440b      	add	r3, r1
 80145be:	3308      	adds	r3, #8
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d102      	bne.n	80145ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80145c8:	68f8      	ldr	r0, [r7, #12]
 80145ca:	f7ff fce5 	bl	8013f98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	3301      	adds	r3, #1
 80145d2:	60fb      	str	r3, [r7, #12]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2b09      	cmp	r3, #9
 80145d8:	dddd      	ble.n	8014596 <etharp_cleanup_netif+0xe>
    }
  }
}
 80145da:	bf00      	nop
 80145dc:	bf00      	nop
 80145de:	3710      	adds	r7, #16
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	20008ebc 	.word	0x20008ebc

080145e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80145e8:	b5b0      	push	{r4, r5, r7, lr}
 80145ea:	b08a      	sub	sp, #40	; 0x28
 80145ec:	af04      	add	r7, sp, #16
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d107      	bne.n	8014608 <etharp_input+0x20>
 80145f8:	4b3d      	ldr	r3, [pc, #244]	; (80146f0 <etharp_input+0x108>)
 80145fa:	f240 228a 	movw	r2, #650	; 0x28a
 80145fe:	493d      	ldr	r1, [pc, #244]	; (80146f4 <etharp_input+0x10c>)
 8014600:	483d      	ldr	r0, [pc, #244]	; (80146f8 <etharp_input+0x110>)
 8014602:	f003 f8df 	bl	80177c4 <iprintf>
 8014606:	e06f      	b.n	80146e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	685b      	ldr	r3, [r3, #4]
 801460c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	b29b      	uxth	r3, r3
 8014614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014618:	d10c      	bne.n	8014634 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801461e:	2b06      	cmp	r3, #6
 8014620:	d108      	bne.n	8014634 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014626:	2b04      	cmp	r3, #4
 8014628:	d104      	bne.n	8014634 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	885b      	ldrh	r3, [r3, #2]
 801462e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014630:	2b08      	cmp	r3, #8
 8014632:	d003      	beq.n	801463c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7f9 f965 	bl	800d904 <pbuf_free>
    return;
 801463a:	e055      	b.n	80146e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	330e      	adds	r3, #14
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	3318      	adds	r3, #24
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	3304      	adds	r3, #4
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d102      	bne.n	801465c <etharp_input+0x74>
    for_us = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	75fb      	strb	r3, [r7, #23]
 801465a:	e009      	b.n	8014670 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801465c:	68ba      	ldr	r2, [r7, #8]
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	3304      	adds	r3, #4
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	429a      	cmp	r2, r3
 8014666:	bf0c      	ite	eq
 8014668:	2301      	moveq	r3, #1
 801466a:	2300      	movne	r3, #0
 801466c:	b2db      	uxtb	r3, r3
 801466e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	f103 0208 	add.w	r2, r3, #8
 8014676:	7dfb      	ldrb	r3, [r7, #23]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d001      	beq.n	8014680 <etharp_input+0x98>
 801467c:	2301      	movs	r3, #1
 801467e:	e000      	b.n	8014682 <etharp_input+0x9a>
 8014680:	2302      	movs	r3, #2
 8014682:	f107 010c 	add.w	r1, r7, #12
 8014686:	6838      	ldr	r0, [r7, #0]
 8014688:	f7ff fed8 	bl	801443c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	88db      	ldrh	r3, [r3, #6]
 8014690:	b29b      	uxth	r3, r3
 8014692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014696:	d003      	beq.n	80146a0 <etharp_input+0xb8>
 8014698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801469c:	d01e      	beq.n	80146dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801469e:	e020      	b.n	80146e2 <etharp_input+0xfa>
      if (for_us) {
 80146a0:	7dfb      	ldrb	r3, [r7, #23]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d01c      	beq.n	80146e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80146bc:	693a      	ldr	r2, [r7, #16]
 80146be:	3208      	adds	r2, #8
        etharp_raw(netif,
 80146c0:	2102      	movs	r1, #2
 80146c2:	9103      	str	r1, [sp, #12]
 80146c4:	f107 010c 	add.w	r1, r7, #12
 80146c8:	9102      	str	r1, [sp, #8]
 80146ca:	9201      	str	r2, [sp, #4]
 80146cc:	9300      	str	r3, [sp, #0]
 80146ce:	462b      	mov	r3, r5
 80146d0:	4622      	mov	r2, r4
 80146d2:	4601      	mov	r1, r0
 80146d4:	6838      	ldr	r0, [r7, #0]
 80146d6:	f000 faeb 	bl	8014cb0 <etharp_raw>
      break;
 80146da:	e001      	b.n	80146e0 <etharp_input+0xf8>
      break;
 80146dc:	bf00      	nop
 80146de:	e000      	b.n	80146e2 <etharp_input+0xfa>
      break;
 80146e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f7f9 f90e 	bl	800d904 <pbuf_free>
}
 80146e8:	3718      	adds	r7, #24
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bdb0      	pop	{r4, r5, r7, pc}
 80146ee:	bf00      	nop
 80146f0:	0801ac84 	.word	0x0801ac84
 80146f4:	0801add4 	.word	0x0801add4
 80146f8:	0801acfc 	.word	0x0801acfc

080146fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b086      	sub	sp, #24
 8014700:	af02      	add	r7, sp, #8
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	4613      	mov	r3, r2
 8014708:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801470a:	79fa      	ldrb	r2, [r7, #7]
 801470c:	4944      	ldr	r1, [pc, #272]	; (8014820 <etharp_output_to_arp_index+0x124>)
 801470e:	4613      	mov	r3, r2
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4413      	add	r3, r2
 8014714:	00db      	lsls	r3, r3, #3
 8014716:	440b      	add	r3, r1
 8014718:	3314      	adds	r3, #20
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d806      	bhi.n	801472e <etharp_output_to_arp_index+0x32>
 8014720:	4b40      	ldr	r3, [pc, #256]	; (8014824 <etharp_output_to_arp_index+0x128>)
 8014722:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014726:	4940      	ldr	r1, [pc, #256]	; (8014828 <etharp_output_to_arp_index+0x12c>)
 8014728:	4840      	ldr	r0, [pc, #256]	; (801482c <etharp_output_to_arp_index+0x130>)
 801472a:	f003 f84b 	bl	80177c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801472e:	79fa      	ldrb	r2, [r7, #7]
 8014730:	493b      	ldr	r1, [pc, #236]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014732:	4613      	mov	r3, r2
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	440b      	add	r3, r1
 801473c:	3314      	adds	r3, #20
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	2b02      	cmp	r3, #2
 8014742:	d153      	bne.n	80147ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014744:	79fa      	ldrb	r2, [r7, #7]
 8014746:	4936      	ldr	r1, [pc, #216]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014748:	4613      	mov	r3, r2
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	4413      	add	r3, r2
 801474e:	00db      	lsls	r3, r3, #3
 8014750:	440b      	add	r3, r1
 8014752:	3312      	adds	r3, #18
 8014754:	881b      	ldrh	r3, [r3, #0]
 8014756:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801475a:	d919      	bls.n	8014790 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801475c:	79fa      	ldrb	r2, [r7, #7]
 801475e:	4613      	mov	r3, r2
 8014760:	005b      	lsls	r3, r3, #1
 8014762:	4413      	add	r3, r2
 8014764:	00db      	lsls	r3, r3, #3
 8014766:	4a2e      	ldr	r2, [pc, #184]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014768:	4413      	add	r3, r2
 801476a:	3304      	adds	r3, #4
 801476c:	4619      	mov	r1, r3
 801476e:	68f8      	ldr	r0, [r7, #12]
 8014770:	f000 fb4c 	bl	8014e0c <etharp_request>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d138      	bne.n	80147ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801477a:	79fa      	ldrb	r2, [r7, #7]
 801477c:	4928      	ldr	r1, [pc, #160]	; (8014820 <etharp_output_to_arp_index+0x124>)
 801477e:	4613      	mov	r3, r2
 8014780:	005b      	lsls	r3, r3, #1
 8014782:	4413      	add	r3, r2
 8014784:	00db      	lsls	r3, r3, #3
 8014786:	440b      	add	r3, r1
 8014788:	3314      	adds	r3, #20
 801478a:	2203      	movs	r2, #3
 801478c:	701a      	strb	r2, [r3, #0]
 801478e:	e02d      	b.n	80147ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014790:	79fa      	ldrb	r2, [r7, #7]
 8014792:	4923      	ldr	r1, [pc, #140]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014794:	4613      	mov	r3, r2
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	440b      	add	r3, r1
 801479e:	3312      	adds	r3, #18
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80147a6:	d321      	bcc.n	80147ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80147a8:	79fa      	ldrb	r2, [r7, #7]
 80147aa:	4613      	mov	r3, r2
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4413      	add	r3, r2
 80147b0:	00db      	lsls	r3, r3, #3
 80147b2:	4a1b      	ldr	r2, [pc, #108]	; (8014820 <etharp_output_to_arp_index+0x124>)
 80147b4:	4413      	add	r3, r2
 80147b6:	1d19      	adds	r1, r3, #4
 80147b8:	79fa      	ldrb	r2, [r7, #7]
 80147ba:	4613      	mov	r3, r2
 80147bc:	005b      	lsls	r3, r3, #1
 80147be:	4413      	add	r3, r2
 80147c0:	00db      	lsls	r3, r3, #3
 80147c2:	3308      	adds	r3, #8
 80147c4:	4a16      	ldr	r2, [pc, #88]	; (8014820 <etharp_output_to_arp_index+0x124>)
 80147c6:	4413      	add	r3, r2
 80147c8:	3304      	adds	r3, #4
 80147ca:	461a      	mov	r2, r3
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f000 fafb 	bl	8014dc8 <etharp_request_dst>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d109      	bne.n	80147ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80147d8:	79fa      	ldrb	r2, [r7, #7]
 80147da:	4911      	ldr	r1, [pc, #68]	; (8014820 <etharp_output_to_arp_index+0x124>)
 80147dc:	4613      	mov	r3, r2
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	4413      	add	r3, r2
 80147e2:	00db      	lsls	r3, r3, #3
 80147e4:	440b      	add	r3, r1
 80147e6:	3314      	adds	r3, #20
 80147e8:	2203      	movs	r2, #3
 80147ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80147f2:	79fa      	ldrb	r2, [r7, #7]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	3308      	adds	r3, #8
 80147fe:	4a08      	ldr	r2, [pc, #32]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014800:	4413      	add	r3, r2
 8014802:	3304      	adds	r3, #4
 8014804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014808:	9200      	str	r2, [sp, #0]
 801480a:	460a      	mov	r2, r1
 801480c:	68b9      	ldr	r1, [r7, #8]
 801480e:	68f8      	ldr	r0, [r7, #12]
 8014810:	f001 fed0 	bl	80165b4 <ethernet_output>
 8014814:	4603      	mov	r3, r0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	20008ebc 	.word	0x20008ebc
 8014824:	0801ac84 	.word	0x0801ac84
 8014828:	0801adf4 	.word	0x0801adf4
 801482c:	0801acfc 	.word	0x0801acfc

08014830 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b08a      	sub	sp, #40	; 0x28
 8014834:	af02      	add	r7, sp, #8
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <etharp_output+0x24>
 8014846:	4b73      	ldr	r3, [pc, #460]	; (8014a14 <etharp_output+0x1e4>)
 8014848:	f240 321e 	movw	r2, #798	; 0x31e
 801484c:	4972      	ldr	r1, [pc, #456]	; (8014a18 <etharp_output+0x1e8>)
 801484e:	4873      	ldr	r0, [pc, #460]	; (8014a1c <etharp_output+0x1ec>)
 8014850:	f002 ffb8 	bl	80177c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <etharp_output+0x38>
 801485a:	4b6e      	ldr	r3, [pc, #440]	; (8014a14 <etharp_output+0x1e4>)
 801485c:	f240 321f 	movw	r2, #799	; 0x31f
 8014860:	496f      	ldr	r1, [pc, #444]	; (8014a20 <etharp_output+0x1f0>)
 8014862:	486e      	ldr	r0, [pc, #440]	; (8014a1c <etharp_output+0x1ec>)
 8014864:	f002 ffae 	bl	80177c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <etharp_output+0x4c>
 801486e:	4b69      	ldr	r3, [pc, #420]	; (8014a14 <etharp_output+0x1e4>)
 8014870:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014874:	496b      	ldr	r1, [pc, #428]	; (8014a24 <etharp_output+0x1f4>)
 8014876:	4869      	ldr	r0, [pc, #420]	; (8014a1c <etharp_output+0x1ec>)
 8014878:	f002 ffa4 	bl	80177c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	68f9      	ldr	r1, [r7, #12]
 8014882:	4618      	mov	r0, r3
 8014884:	f000 fef8 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8014888:	4603      	mov	r3, r0
 801488a:	2b00      	cmp	r3, #0
 801488c:	d002      	beq.n	8014894 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801488e:	4b66      	ldr	r3, [pc, #408]	; (8014a28 <etharp_output+0x1f8>)
 8014890:	61fb      	str	r3, [r7, #28]
 8014892:	e0af      	b.n	80149f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801489c:	2be0      	cmp	r3, #224	; 0xe0
 801489e:	d118      	bne.n	80148d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80148a0:	2301      	movs	r3, #1
 80148a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80148a4:	2300      	movs	r3, #0
 80148a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80148a8:	235e      	movs	r3, #94	; 0x5e
 80148aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3301      	adds	r3, #1
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	3302      	adds	r3, #2
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	3303      	adds	r3, #3
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80148ca:	f107 0310 	add.w	r3, r7, #16
 80148ce:	61fb      	str	r3, [r7, #28]
 80148d0:	e090      	b.n	80149f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	3304      	adds	r3, #4
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	405a      	eors	r2, r3
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	3308      	adds	r3, #8
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4013      	ands	r3, r2
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d012      	beq.n	8014910 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80148f4:	4293      	cmp	r3, r2
 80148f6:	d00b      	beq.n	8014910 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	330c      	adds	r3, #12
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d003      	beq.n	801490a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	330c      	adds	r3, #12
 8014906:	61bb      	str	r3, [r7, #24]
 8014908:	e002      	b.n	8014910 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801490a:	f06f 0303 	mvn.w	r3, #3
 801490e:	e07d      	b.n	8014a0c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014910:	4b46      	ldr	r3, [pc, #280]	; (8014a2c <etharp_output+0x1fc>)
 8014912:	781b      	ldrb	r3, [r3, #0]
 8014914:	4619      	mov	r1, r3
 8014916:	4a46      	ldr	r2, [pc, #280]	; (8014a30 <etharp_output+0x200>)
 8014918:	460b      	mov	r3, r1
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	440b      	add	r3, r1
 801491e:	00db      	lsls	r3, r3, #3
 8014920:	4413      	add	r3, r2
 8014922:	3314      	adds	r3, #20
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	2b01      	cmp	r3, #1
 8014928:	d925      	bls.n	8014976 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801492a:	4b40      	ldr	r3, [pc, #256]	; (8014a2c <etharp_output+0x1fc>)
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	4619      	mov	r1, r3
 8014930:	4a3f      	ldr	r2, [pc, #252]	; (8014a30 <etharp_output+0x200>)
 8014932:	460b      	mov	r3, r1
 8014934:	005b      	lsls	r3, r3, #1
 8014936:	440b      	add	r3, r1
 8014938:	00db      	lsls	r3, r3, #3
 801493a:	4413      	add	r3, r2
 801493c:	3308      	adds	r3, #8
 801493e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014940:	68fa      	ldr	r2, [r7, #12]
 8014942:	429a      	cmp	r2, r3
 8014944:	d117      	bne.n	8014976 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	4b38      	ldr	r3, [pc, #224]	; (8014a2c <etharp_output+0x1fc>)
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	4618      	mov	r0, r3
 8014950:	4937      	ldr	r1, [pc, #220]	; (8014a30 <etharp_output+0x200>)
 8014952:	4603      	mov	r3, r0
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	4403      	add	r3, r0
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	440b      	add	r3, r1
 801495c:	3304      	adds	r3, #4
 801495e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014960:	429a      	cmp	r2, r3
 8014962:	d108      	bne.n	8014976 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014964:	4b31      	ldr	r3, [pc, #196]	; (8014a2c <etharp_output+0x1fc>)
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	461a      	mov	r2, r3
 801496a:	68b9      	ldr	r1, [r7, #8]
 801496c:	68f8      	ldr	r0, [r7, #12]
 801496e:	f7ff fec5 	bl	80146fc <etharp_output_to_arp_index>
 8014972:	4603      	mov	r3, r0
 8014974:	e04a      	b.n	8014a0c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014976:	2300      	movs	r3, #0
 8014978:	75fb      	strb	r3, [r7, #23]
 801497a:	e031      	b.n	80149e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801497c:	7dfa      	ldrb	r2, [r7, #23]
 801497e:	492c      	ldr	r1, [pc, #176]	; (8014a30 <etharp_output+0x200>)
 8014980:	4613      	mov	r3, r2
 8014982:	005b      	lsls	r3, r3, #1
 8014984:	4413      	add	r3, r2
 8014986:	00db      	lsls	r3, r3, #3
 8014988:	440b      	add	r3, r1
 801498a:	3314      	adds	r3, #20
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	2b01      	cmp	r3, #1
 8014990:	d923      	bls.n	80149da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014992:	7dfa      	ldrb	r2, [r7, #23]
 8014994:	4926      	ldr	r1, [pc, #152]	; (8014a30 <etharp_output+0x200>)
 8014996:	4613      	mov	r3, r2
 8014998:	005b      	lsls	r3, r3, #1
 801499a:	4413      	add	r3, r2
 801499c:	00db      	lsls	r3, r3, #3
 801499e:	440b      	add	r3, r1
 80149a0:	3308      	adds	r3, #8
 80149a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d117      	bne.n	80149da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80149aa:	69bb      	ldr	r3, [r7, #24]
 80149ac:	6819      	ldr	r1, [r3, #0]
 80149ae:	7dfa      	ldrb	r2, [r7, #23]
 80149b0:	481f      	ldr	r0, [pc, #124]	; (8014a30 <etharp_output+0x200>)
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	4403      	add	r3, r0
 80149bc:	3304      	adds	r3, #4
 80149be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80149c0:	4299      	cmp	r1, r3
 80149c2:	d10a      	bne.n	80149da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80149c4:	4a19      	ldr	r2, [pc, #100]	; (8014a2c <etharp_output+0x1fc>)
 80149c6:	7dfb      	ldrb	r3, [r7, #23]
 80149c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80149ca:	7dfb      	ldrb	r3, [r7, #23]
 80149cc:	461a      	mov	r2, r3
 80149ce:	68b9      	ldr	r1, [r7, #8]
 80149d0:	68f8      	ldr	r0, [r7, #12]
 80149d2:	f7ff fe93 	bl	80146fc <etharp_output_to_arp_index>
 80149d6:	4603      	mov	r3, r0
 80149d8:	e018      	b.n	8014a0c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80149da:	7dfb      	ldrb	r3, [r7, #23]
 80149dc:	3301      	adds	r3, #1
 80149de:	75fb      	strb	r3, [r7, #23]
 80149e0:	7dfb      	ldrb	r3, [r7, #23]
 80149e2:	2b09      	cmp	r3, #9
 80149e4:	d9ca      	bls.n	801497c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80149e6:	68ba      	ldr	r2, [r7, #8]
 80149e8:	69b9      	ldr	r1, [r7, #24]
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f000 f822 	bl	8014a34 <etharp_query>
 80149f0:	4603      	mov	r3, r0
 80149f2:	e00b      	b.n	8014a0c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80149fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80149fe:	9300      	str	r3, [sp, #0]
 8014a00:	69fb      	ldr	r3, [r7, #28]
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f001 fdd5 	bl	80165b4 <ethernet_output>
 8014a0a:	4603      	mov	r3, r0
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3720      	adds	r7, #32
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	0801ac84 	.word	0x0801ac84
 8014a18:	0801add4 	.word	0x0801add4
 8014a1c:	0801acfc 	.word	0x0801acfc
 8014a20:	0801ae24 	.word	0x0801ae24
 8014a24:	0801adc4 	.word	0x0801adc4
 8014a28:	0801b5f0 	.word	0x0801b5f0
 8014a2c:	20008fac 	.word	0x20008fac
 8014a30:	20008ebc 	.word	0x20008ebc

08014a34 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08c      	sub	sp, #48	; 0x30
 8014a38:	af02      	add	r7, sp, #8
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	3326      	adds	r3, #38	; 0x26
 8014a44:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014a46:	23ff      	movs	r3, #255	; 0xff
 8014a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	68f9      	ldr	r1, [r7, #12]
 8014a56:	4618      	mov	r0, r3
 8014a58:	f000 fe0e 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d10c      	bne.n	8014a7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a6a:	2be0      	cmp	r3, #224	; 0xe0
 8014a6c:	d006      	beq.n	8014a7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d003      	beq.n	8014a7c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d102      	bne.n	8014a82 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a7c:	f06f 030f 	mvn.w	r3, #15
 8014a80:	e101      	b.n	8014c86 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a82:	68fa      	ldr	r2, [r7, #12]
 8014a84:	2101      	movs	r1, #1
 8014a86:	68b8      	ldr	r0, [r7, #8]
 8014a88:	f7ff fb60 	bl	801414c <etharp_find_entry>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014a90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	da02      	bge.n	8014a9e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014a98:	8a7b      	ldrh	r3, [r7, #18]
 8014a9a:	b25b      	sxtb	r3, r3
 8014a9c:	e0f3      	b.n	8014c86 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014a9e:	8a7b      	ldrh	r3, [r7, #18]
 8014aa0:	2b7e      	cmp	r3, #126	; 0x7e
 8014aa2:	d906      	bls.n	8014ab2 <etharp_query+0x7e>
 8014aa4:	4b7a      	ldr	r3, [pc, #488]	; (8014c90 <etharp_query+0x25c>)
 8014aa6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014aaa:	497a      	ldr	r1, [pc, #488]	; (8014c94 <etharp_query+0x260>)
 8014aac:	487a      	ldr	r0, [pc, #488]	; (8014c98 <etharp_query+0x264>)
 8014aae:	f002 fe89 	bl	80177c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014ab2:	8a7b      	ldrh	r3, [r7, #18]
 8014ab4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014ab6:	7c7a      	ldrb	r2, [r7, #17]
 8014ab8:	4978      	ldr	r1, [pc, #480]	; (8014c9c <etharp_query+0x268>)
 8014aba:	4613      	mov	r3, r2
 8014abc:	005b      	lsls	r3, r3, #1
 8014abe:	4413      	add	r3, r2
 8014ac0:	00db      	lsls	r3, r3, #3
 8014ac2:	440b      	add	r3, r1
 8014ac4:	3314      	adds	r3, #20
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d115      	bne.n	8014af8 <etharp_query+0xc4>
    is_new_entry = 1;
 8014acc:	2301      	movs	r3, #1
 8014ace:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014ad0:	7c7a      	ldrb	r2, [r7, #17]
 8014ad2:	4972      	ldr	r1, [pc, #456]	; (8014c9c <etharp_query+0x268>)
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	440b      	add	r3, r1
 8014ade:	3314      	adds	r3, #20
 8014ae0:	2201      	movs	r2, #1
 8014ae2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014ae4:	7c7a      	ldrb	r2, [r7, #17]
 8014ae6:	496d      	ldr	r1, [pc, #436]	; (8014c9c <etharp_query+0x268>)
 8014ae8:	4613      	mov	r3, r2
 8014aea:	005b      	lsls	r3, r3, #1
 8014aec:	4413      	add	r3, r2
 8014aee:	00db      	lsls	r3, r3, #3
 8014af0:	440b      	add	r3, r1
 8014af2:	3308      	adds	r3, #8
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014af8:	7c7a      	ldrb	r2, [r7, #17]
 8014afa:	4968      	ldr	r1, [pc, #416]	; (8014c9c <etharp_query+0x268>)
 8014afc:	4613      	mov	r3, r2
 8014afe:	005b      	lsls	r3, r3, #1
 8014b00:	4413      	add	r3, r2
 8014b02:	00db      	lsls	r3, r3, #3
 8014b04:	440b      	add	r3, r1
 8014b06:	3314      	adds	r3, #20
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d011      	beq.n	8014b32 <etharp_query+0xfe>
 8014b0e:	7c7a      	ldrb	r2, [r7, #17]
 8014b10:	4962      	ldr	r1, [pc, #392]	; (8014c9c <etharp_query+0x268>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3314      	adds	r3, #20
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d806      	bhi.n	8014b32 <etharp_query+0xfe>
 8014b24:	4b5a      	ldr	r3, [pc, #360]	; (8014c90 <etharp_query+0x25c>)
 8014b26:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014b2a:	495d      	ldr	r1, [pc, #372]	; (8014ca0 <etharp_query+0x26c>)
 8014b2c:	485a      	ldr	r0, [pc, #360]	; (8014c98 <etharp_query+0x264>)
 8014b2e:	f002 fe49 	bl	80177c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014b32:	6a3b      	ldr	r3, [r7, #32]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d102      	bne.n	8014b3e <etharp_query+0x10a>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d10c      	bne.n	8014b58 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014b3e:	68b9      	ldr	r1, [r7, #8]
 8014b40:	68f8      	ldr	r0, [r7, #12]
 8014b42:	f000 f963 	bl	8014e0c <etharp_request>
 8014b46:	4603      	mov	r3, r0
 8014b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d102      	bne.n	8014b58 <etharp_query+0x124>
      return result;
 8014b52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b56:	e096      	b.n	8014c86 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d106      	bne.n	8014b6c <etharp_query+0x138>
 8014b5e:	4b4c      	ldr	r3, [pc, #304]	; (8014c90 <etharp_query+0x25c>)
 8014b60:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014b64:	494f      	ldr	r1, [pc, #316]	; (8014ca4 <etharp_query+0x270>)
 8014b66:	484c      	ldr	r0, [pc, #304]	; (8014c98 <etharp_query+0x264>)
 8014b68:	f002 fe2c 	bl	80177c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014b6c:	7c7a      	ldrb	r2, [r7, #17]
 8014b6e:	494b      	ldr	r1, [pc, #300]	; (8014c9c <etharp_query+0x268>)
 8014b70:	4613      	mov	r3, r2
 8014b72:	005b      	lsls	r3, r3, #1
 8014b74:	4413      	add	r3, r2
 8014b76:	00db      	lsls	r3, r3, #3
 8014b78:	440b      	add	r3, r1
 8014b7a:	3314      	adds	r3, #20
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d917      	bls.n	8014bb2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014b82:	4a49      	ldr	r2, [pc, #292]	; (8014ca8 <etharp_query+0x274>)
 8014b84:	7c7b      	ldrb	r3, [r7, #17]
 8014b86:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b88:	7c7a      	ldrb	r2, [r7, #17]
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	005b      	lsls	r3, r3, #1
 8014b8e:	4413      	add	r3, r2
 8014b90:	00db      	lsls	r3, r3, #3
 8014b92:	3308      	adds	r3, #8
 8014b94:	4a41      	ldr	r2, [pc, #260]	; (8014c9c <etharp_query+0x268>)
 8014b96:	4413      	add	r3, r2
 8014b98:	3304      	adds	r3, #4
 8014b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b9e:	9200      	str	r2, [sp, #0]
 8014ba0:	697a      	ldr	r2, [r7, #20]
 8014ba2:	6879      	ldr	r1, [r7, #4]
 8014ba4:	68f8      	ldr	r0, [r7, #12]
 8014ba6:	f001 fd05 	bl	80165b4 <ethernet_output>
 8014baa:	4603      	mov	r3, r0
 8014bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014bb0:	e067      	b.n	8014c82 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014bb2:	7c7a      	ldrb	r2, [r7, #17]
 8014bb4:	4939      	ldr	r1, [pc, #228]	; (8014c9c <etharp_query+0x268>)
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	4413      	add	r3, r2
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	440b      	add	r3, r1
 8014bc0:	3314      	adds	r3, #20
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d15c      	bne.n	8014c82 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014bd0:	e01c      	b.n	8014c0c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014bd2:	69fb      	ldr	r3, [r7, #28]
 8014bd4:	895a      	ldrh	r2, [r3, #10]
 8014bd6:	69fb      	ldr	r3, [r7, #28]
 8014bd8:	891b      	ldrh	r3, [r3, #8]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d10a      	bne.n	8014bf4 <etharp_query+0x1c0>
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d006      	beq.n	8014bf4 <etharp_query+0x1c0>
 8014be6:	4b2a      	ldr	r3, [pc, #168]	; (8014c90 <etharp_query+0x25c>)
 8014be8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014bec:	492f      	ldr	r1, [pc, #188]	; (8014cac <etharp_query+0x278>)
 8014bee:	482a      	ldr	r0, [pc, #168]	; (8014c98 <etharp_query+0x264>)
 8014bf0:	f002 fde8 	bl	80177c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014bf4:	69fb      	ldr	r3, [r7, #28]
 8014bf6:	7b1b      	ldrb	r3, [r3, #12]
 8014bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d002      	beq.n	8014c06 <etharp_query+0x1d2>
        copy_needed = 1;
 8014c00:	2301      	movs	r3, #1
 8014c02:	61bb      	str	r3, [r7, #24]
        break;
 8014c04:	e005      	b.n	8014c12 <etharp_query+0x1de>
      }
      p = p->next;
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1df      	bne.n	8014bd2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014c12:	69bb      	ldr	r3, [r7, #24]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d007      	beq.n	8014c28 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014c1e:	200e      	movs	r0, #14
 8014c20:	f7f9 f96e 	bl	800df00 <pbuf_clone>
 8014c24:	61f8      	str	r0, [r7, #28]
 8014c26:	e004      	b.n	8014c32 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014c2c:	69f8      	ldr	r0, [r7, #28]
 8014c2e:	f7f8 ff09 	bl	800da44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d021      	beq.n	8014c7c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014c38:	7c7a      	ldrb	r2, [r7, #17]
 8014c3a:	4918      	ldr	r1, [pc, #96]	; (8014c9c <etharp_query+0x268>)
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	005b      	lsls	r3, r3, #1
 8014c40:	4413      	add	r3, r2
 8014c42:	00db      	lsls	r3, r3, #3
 8014c44:	440b      	add	r3, r1
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00a      	beq.n	8014c62 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014c4c:	7c7a      	ldrb	r2, [r7, #17]
 8014c4e:	4913      	ldr	r1, [pc, #76]	; (8014c9c <etharp_query+0x268>)
 8014c50:	4613      	mov	r3, r2
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	440b      	add	r3, r1
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7f8 fe51 	bl	800d904 <pbuf_free>
      }
      arp_table[i].q = p;
 8014c62:	7c7a      	ldrb	r2, [r7, #17]
 8014c64:	490d      	ldr	r1, [pc, #52]	; (8014c9c <etharp_query+0x268>)
 8014c66:	4613      	mov	r3, r2
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	4413      	add	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	440b      	add	r3, r1
 8014c70:	69fa      	ldr	r2, [r7, #28]
 8014c72:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014c74:	2300      	movs	r3, #0
 8014c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c7a:	e002      	b.n	8014c82 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c7c:	23ff      	movs	r3, #255	; 0xff
 8014c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3728      	adds	r7, #40	; 0x28
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	0801ac84 	.word	0x0801ac84
 8014c94:	0801ae30 	.word	0x0801ae30
 8014c98:	0801acfc 	.word	0x0801acfc
 8014c9c:	20008ebc 	.word	0x20008ebc
 8014ca0:	0801ae40 	.word	0x0801ae40
 8014ca4:	0801ae24 	.word	0x0801ae24
 8014ca8:	20008fac 	.word	0x20008fac
 8014cac:	0801ae68 	.word	0x0801ae68

08014cb0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b08a      	sub	sp, #40	; 0x28
 8014cb4:	af02      	add	r7, sp, #8
 8014cb6:	60f8      	str	r0, [r7, #12]
 8014cb8:	60b9      	str	r1, [r7, #8]
 8014cba:	607a      	str	r2, [r7, #4]
 8014cbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d106      	bne.n	8014cd6 <etharp_raw+0x26>
 8014cc8:	4b3a      	ldr	r3, [pc, #232]	; (8014db4 <etharp_raw+0x104>)
 8014cca:	f240 4257 	movw	r2, #1111	; 0x457
 8014cce:	493a      	ldr	r1, [pc, #232]	; (8014db8 <etharp_raw+0x108>)
 8014cd0:	483a      	ldr	r0, [pc, #232]	; (8014dbc <etharp_raw+0x10c>)
 8014cd2:	f002 fd77 	bl	80177c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014cd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cda:	211c      	movs	r1, #28
 8014cdc:	200e      	movs	r0, #14
 8014cde:	f7f8 fb2d 	bl	800d33c <pbuf_alloc>
 8014ce2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ce4:	69bb      	ldr	r3, [r7, #24]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d102      	bne.n	8014cf0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014cea:	f04f 33ff 	mov.w	r3, #4294967295
 8014cee:	e05d      	b.n	8014dac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014cf0:	69bb      	ldr	r3, [r7, #24]
 8014cf2:	895b      	ldrh	r3, [r3, #10]
 8014cf4:	2b1b      	cmp	r3, #27
 8014cf6:	d806      	bhi.n	8014d06 <etharp_raw+0x56>
 8014cf8:	4b2e      	ldr	r3, [pc, #184]	; (8014db4 <etharp_raw+0x104>)
 8014cfa:	f240 4262 	movw	r2, #1122	; 0x462
 8014cfe:	4930      	ldr	r1, [pc, #192]	; (8014dc0 <etharp_raw+0x110>)
 8014d00:	482e      	ldr	r0, [pc, #184]	; (8014dbc <etharp_raw+0x10c>)
 8014d02:	f002 fd5f 	bl	80177c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014d06:	69bb      	ldr	r3, [r7, #24]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014d0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7f7 fa9a 	bl	800c248 <lwip_htons>
 8014d14:	4603      	mov	r3, r0
 8014d16:	461a      	mov	r2, r3
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014d22:	2b06      	cmp	r3, #6
 8014d24:	d006      	beq.n	8014d34 <etharp_raw+0x84>
 8014d26:	4b23      	ldr	r3, [pc, #140]	; (8014db4 <etharp_raw+0x104>)
 8014d28:	f240 4269 	movw	r2, #1129	; 0x469
 8014d2c:	4925      	ldr	r1, [pc, #148]	; (8014dc4 <etharp_raw+0x114>)
 8014d2e:	4823      	ldr	r0, [pc, #140]	; (8014dbc <etharp_raw+0x10c>)
 8014d30:	f002 fd48 	bl	80177c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	3308      	adds	r3, #8
 8014d38:	2206      	movs	r2, #6
 8014d3a:	6839      	ldr	r1, [r7, #0]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f002 fd2b 	bl	8017798 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	3312      	adds	r3, #18
 8014d46:	2206      	movs	r2, #6
 8014d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f002 fd24 	bl	8017798 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	330e      	adds	r3, #14
 8014d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d56:	6812      	ldr	r2, [r2, #0]
 8014d58:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	3318      	adds	r3, #24
 8014d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d60:	6812      	ldr	r2, [r2, #0]
 8014d62:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	2200      	movs	r2, #0
 8014d68:	701a      	strb	r2, [r3, #0]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f042 0201 	orr.w	r2, r2, #1
 8014d70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	2200      	movs	r2, #0
 8014d76:	f042 0208 	orr.w	r2, r2, #8
 8014d7a:	709a      	strb	r2, [r3, #2]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	2206      	movs	r2, #6
 8014d84:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	2204      	movs	r2, #4
 8014d8a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d8c:	f640 0306 	movw	r3, #2054	; 0x806
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	69b9      	ldr	r1, [r7, #24]
 8014d98:	68f8      	ldr	r0, [r7, #12]
 8014d9a:	f001 fc0b 	bl	80165b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d9e:	69b8      	ldr	r0, [r7, #24]
 8014da0:	f7f8 fdb0 	bl	800d904 <pbuf_free>
  p = NULL;
 8014da4:	2300      	movs	r3, #0
 8014da6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014da8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3720      	adds	r7, #32
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	0801ac84 	.word	0x0801ac84
 8014db8:	0801add4 	.word	0x0801add4
 8014dbc:	0801acfc 	.word	0x0801acfc
 8014dc0:	0801ae84 	.word	0x0801ae84
 8014dc4:	0801aeb8 	.word	0x0801aeb8

08014dc8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b088      	sub	sp, #32
 8014dcc:	af04      	add	r7, sp, #16
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014de4:	2201      	movs	r2, #1
 8014de6:	9203      	str	r2, [sp, #12]
 8014de8:	68ba      	ldr	r2, [r7, #8]
 8014dea:	9202      	str	r2, [sp, #8]
 8014dec:	4a06      	ldr	r2, [pc, #24]	; (8014e08 <etharp_request_dst+0x40>)
 8014dee:	9201      	str	r2, [sp, #4]
 8014df0:	9300      	str	r3, [sp, #0]
 8014df2:	4603      	mov	r3, r0
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	68f8      	ldr	r0, [r7, #12]
 8014df8:	f7ff ff5a 	bl	8014cb0 <etharp_raw>
 8014dfc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3710      	adds	r7, #16
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	0801b5f8 	.word	0x0801b5f8

08014e0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014e16:	4a05      	ldr	r2, [pc, #20]	; (8014e2c <etharp_request+0x20>)
 8014e18:	6839      	ldr	r1, [r7, #0]
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f7ff ffd4 	bl	8014dc8 <etharp_request_dst>
 8014e20:	4603      	mov	r3, r0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3708      	adds	r7, #8
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	0801b5f0 	.word	0x0801b5f0

08014e30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b08e      	sub	sp, #56	; 0x38
 8014e34:	af04      	add	r7, sp, #16
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e3a:	4b79      	ldr	r3, [pc, #484]	; (8015020 <icmp_input+0x1f0>)
 8014e3c:	689b      	ldr	r3, [r3, #8]
 8014e3e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	f003 030f 	and.w	r3, r3, #15
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014e50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e52:	2b13      	cmp	r3, #19
 8014e54:	f240 80cd 	bls.w	8014ff2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	895b      	ldrh	r3, [r3, #10]
 8014e5c:	2b03      	cmp	r3, #3
 8014e5e:	f240 80ca 	bls.w	8014ff6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	781b      	ldrb	r3, [r3, #0]
 8014e68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	f000 80b7 	beq.w	8014fe4 <icmp_input+0x1b4>
 8014e76:	2b08      	cmp	r3, #8
 8014e78:	f040 80b7 	bne.w	8014fea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e7c:	4b69      	ldr	r3, [pc, #420]	; (8015024 <icmp_input+0x1f4>)
 8014e7e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e80:	4b67      	ldr	r3, [pc, #412]	; (8015020 <icmp_input+0x1f0>)
 8014e82:	695b      	ldr	r3, [r3, #20]
 8014e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e88:	2be0      	cmp	r3, #224	; 0xe0
 8014e8a:	f000 80bb 	beq.w	8015004 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e8e:	4b64      	ldr	r3, [pc, #400]	; (8015020 <icmp_input+0x1f0>)
 8014e90:	695b      	ldr	r3, [r3, #20]
 8014e92:	4a63      	ldr	r2, [pc, #396]	; (8015020 <icmp_input+0x1f0>)
 8014e94:	6812      	ldr	r2, [r2, #0]
 8014e96:	4611      	mov	r1, r2
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f000 fbed 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	f040 80b1 	bne.w	8015008 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	891b      	ldrh	r3, [r3, #8]
 8014eaa:	2b07      	cmp	r3, #7
 8014eac:	f240 80a5 	bls.w	8014ffa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014eb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014eb2:	330e      	adds	r3, #14
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f7f8 fc8e 	bl	800d7d8 <pbuf_add_header>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d04b      	beq.n	8014f5a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	891a      	ldrh	r2, [r3, #8]
 8014ec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ec8:	4413      	add	r3, r2
 8014eca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	891b      	ldrh	r3, [r3, #8]
 8014ed0:	8b7a      	ldrh	r2, [r7, #26]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	f0c0 809a 	bcc.w	801500c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014ed8:	8b7b      	ldrh	r3, [r7, #26]
 8014eda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ede:	4619      	mov	r1, r3
 8014ee0:	200e      	movs	r0, #14
 8014ee2:	f7f8 fa2b 	bl	800d33c <pbuf_alloc>
 8014ee6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	f000 8090 	beq.w	8015010 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	895b      	ldrh	r3, [r3, #10]
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ef8:	3308      	adds	r3, #8
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d203      	bcs.n	8014f06 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014efe:	6978      	ldr	r0, [r7, #20]
 8014f00:	f7f8 fd00 	bl	800d904 <pbuf_free>
          goto icmperr;
 8014f04:	e085      	b.n	8015012 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f002 fc42 	bl	8017798 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f16:	4619      	mov	r1, r3
 8014f18:	6978      	ldr	r0, [r7, #20]
 8014f1a:	f7f8 fc6d 	bl	800d7f8 <pbuf_remove_header>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d009      	beq.n	8014f38 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f24:	4b40      	ldr	r3, [pc, #256]	; (8015028 <icmp_input+0x1f8>)
 8014f26:	22b6      	movs	r2, #182	; 0xb6
 8014f28:	4940      	ldr	r1, [pc, #256]	; (801502c <icmp_input+0x1fc>)
 8014f2a:	4841      	ldr	r0, [pc, #260]	; (8015030 <icmp_input+0x200>)
 8014f2c:	f002 fc4a 	bl	80177c4 <iprintf>
          pbuf_free(r);
 8014f30:	6978      	ldr	r0, [r7, #20]
 8014f32:	f7f8 fce7 	bl	800d904 <pbuf_free>
          goto icmperr;
 8014f36:	e06c      	b.n	8015012 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f38:	6879      	ldr	r1, [r7, #4]
 8014f3a:	6978      	ldr	r0, [r7, #20]
 8014f3c:	f7f8 fe0a 	bl	800db54 <pbuf_copy>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d003      	beq.n	8014f4e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014f46:	6978      	ldr	r0, [r7, #20]
 8014f48:	f7f8 fcdc 	bl	800d904 <pbuf_free>
          goto icmperr;
 8014f4c:	e061      	b.n	8015012 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f7f8 fcd8 	bl	800d904 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	607b      	str	r3, [r7, #4]
 8014f58:	e00f      	b.n	8014f7a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f5c:	330e      	adds	r3, #14
 8014f5e:	4619      	mov	r1, r3
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f7f8 fc49 	bl	800d7f8 <pbuf_remove_header>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d006      	beq.n	8014f7a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f6c:	4b2e      	ldr	r3, [pc, #184]	; (8015028 <icmp_input+0x1f8>)
 8014f6e:	22c7      	movs	r2, #199	; 0xc7
 8014f70:	4930      	ldr	r1, [pc, #192]	; (8015034 <icmp_input+0x204>)
 8014f72:	482f      	ldr	r0, [pc, #188]	; (8015030 <icmp_input+0x200>)
 8014f74:	f002 fc26 	bl	80177c4 <iprintf>
          goto icmperr;
 8014f78:	e04b      	b.n	8015012 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f82:	4619      	mov	r1, r3
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f7f8 fc27 	bl	800d7d8 <pbuf_add_header>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d12b      	bne.n	8014fe8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f9e:	4b20      	ldr	r3, [pc, #128]	; (8015020 <icmp_input+0x1f0>)
 8014fa0:	691a      	ldr	r2, [r3, #16]
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	709a      	strb	r2, [r3, #2]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	22ff      	movs	r2, #255	; 0xff
 8014fba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	729a      	strb	r2, [r3, #10]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	9302      	str	r3, [sp, #8]
 8014fca:	2301      	movs	r3, #1
 8014fcc:	9301      	str	r3, [sp, #4]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	9300      	str	r3, [sp, #0]
 8014fd2:	23ff      	movs	r3, #255	; 0xff
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	69f9      	ldr	r1, [r7, #28]
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f000 fa75 	bl	80154c8 <ip4_output_if>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014fe2:	e001      	b.n	8014fe8 <icmp_input+0x1b8>
      break;
 8014fe4:	bf00      	nop
 8014fe6:	e000      	b.n	8014fea <icmp_input+0x1ba>
      break;
 8014fe8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f7f8 fc8a 	bl	800d904 <pbuf_free>
  return;
 8014ff0:	e013      	b.n	801501a <icmp_input+0x1ea>
    goto lenerr;
 8014ff2:	bf00      	nop
 8014ff4:	e002      	b.n	8014ffc <icmp_input+0x1cc>
    goto lenerr;
 8014ff6:	bf00      	nop
 8014ff8:	e000      	b.n	8014ffc <icmp_input+0x1cc>
        goto lenerr;
 8014ffa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f7f8 fc81 	bl	800d904 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015002:	e00a      	b.n	801501a <icmp_input+0x1ea>
        goto icmperr;
 8015004:	bf00      	nop
 8015006:	e004      	b.n	8015012 <icmp_input+0x1e2>
        goto icmperr;
 8015008:	bf00      	nop
 801500a:	e002      	b.n	8015012 <icmp_input+0x1e2>
          goto icmperr;
 801500c:	bf00      	nop
 801500e:	e000      	b.n	8015012 <icmp_input+0x1e2>
          goto icmperr;
 8015010:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7f8 fc76 	bl	800d904 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015018:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801501a:	3728      	adds	r7, #40	; 0x28
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	200058ec 	.word	0x200058ec
 8015024:	20005900 	.word	0x20005900
 8015028:	0801aefc 	.word	0x0801aefc
 801502c:	0801af34 	.word	0x0801af34
 8015030:	0801af6c 	.word	0x0801af6c
 8015034:	0801af94 	.word	0x0801af94

08015038 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b082      	sub	sp, #8
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	460b      	mov	r3, r1
 8015042:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015044:	78fb      	ldrb	r3, [r7, #3]
 8015046:	461a      	mov	r2, r3
 8015048:	2103      	movs	r1, #3
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f000 f814 	bl	8015078 <icmp_send_response>
}
 8015050:	bf00      	nop
 8015052:	3708      	adds	r7, #8
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}

08015058 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	460b      	mov	r3, r1
 8015062:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015064:	78fb      	ldrb	r3, [r7, #3]
 8015066:	461a      	mov	r2, r3
 8015068:	210b      	movs	r1, #11
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f000 f804 	bl	8015078 <icmp_send_response>
}
 8015070:	bf00      	nop
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b08c      	sub	sp, #48	; 0x30
 801507c:	af04      	add	r7, sp, #16
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	460b      	mov	r3, r1
 8015082:	70fb      	strb	r3, [r7, #3]
 8015084:	4613      	mov	r3, r2
 8015086:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015088:	f44f 7220 	mov.w	r2, #640	; 0x280
 801508c:	2124      	movs	r1, #36	; 0x24
 801508e:	2022      	movs	r0, #34	; 0x22
 8015090:	f7f8 f954 	bl	800d33c <pbuf_alloc>
 8015094:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015096:	69fb      	ldr	r3, [r7, #28]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d04c      	beq.n	8015136 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801509c:	69fb      	ldr	r3, [r7, #28]
 801509e:	895b      	ldrh	r3, [r3, #10]
 80150a0:	2b23      	cmp	r3, #35	; 0x23
 80150a2:	d806      	bhi.n	80150b2 <icmp_send_response+0x3a>
 80150a4:	4b26      	ldr	r3, [pc, #152]	; (8015140 <icmp_send_response+0xc8>)
 80150a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80150aa:	4926      	ldr	r1, [pc, #152]	; (8015144 <icmp_send_response+0xcc>)
 80150ac:	4826      	ldr	r0, [pc, #152]	; (8015148 <icmp_send_response+0xd0>)
 80150ae:	f002 fb89 	bl	80177c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	685b      	ldr	r3, [r3, #4]
 80150b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	78fa      	ldrb	r2, [r7, #3]
 80150c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	78ba      	ldrb	r2, [r7, #2]
 80150c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	2200      	movs	r2, #0
 80150ce:	711a      	strb	r2, [r3, #4]
 80150d0:	2200      	movs	r2, #0
 80150d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	2200      	movs	r2, #0
 80150d8:	719a      	strb	r2, [r3, #6]
 80150da:	2200      	movs	r2, #0
 80150dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80150de:	69fb      	ldr	r3, [r7, #28]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	f103 0008 	add.w	r0, r3, #8
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	221c      	movs	r2, #28
 80150ec:	4619      	mov	r1, r3
 80150ee:	f002 fb53 	bl	8017798 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80150f2:	69bb      	ldr	r3, [r7, #24]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80150f8:	f107 030c 	add.w	r3, r7, #12
 80150fc:	4618      	mov	r0, r3
 80150fe:	f000 f825 	bl	801514c <ip4_route>
 8015102:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d011      	beq.n	801512e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2200      	movs	r2, #0
 801510e:	709a      	strb	r2, [r3, #2]
 8015110:	2200      	movs	r2, #0
 8015112:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015114:	f107 020c 	add.w	r2, r7, #12
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	9302      	str	r3, [sp, #8]
 801511c:	2301      	movs	r3, #1
 801511e:	9301      	str	r3, [sp, #4]
 8015120:	2300      	movs	r3, #0
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	23ff      	movs	r3, #255	; 0xff
 8015126:	2100      	movs	r1, #0
 8015128:	69f8      	ldr	r0, [r7, #28]
 801512a:	f000 f9cd 	bl	80154c8 <ip4_output_if>
  }
  pbuf_free(q);
 801512e:	69f8      	ldr	r0, [r7, #28]
 8015130:	f7f8 fbe8 	bl	800d904 <pbuf_free>
 8015134:	e000      	b.n	8015138 <icmp_send_response+0xc0>
    return;
 8015136:	bf00      	nop
}
 8015138:	3720      	adds	r7, #32
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	0801aefc 	.word	0x0801aefc
 8015144:	0801afc8 	.word	0x0801afc8
 8015148:	0801af6c 	.word	0x0801af6c

0801514c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801514c:	b480      	push	{r7}
 801514e:	b085      	sub	sp, #20
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015154:	4b33      	ldr	r3, [pc, #204]	; (8015224 <ip4_route+0xd8>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	60fb      	str	r3, [r7, #12]
 801515a:	e036      	b.n	80151ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015162:	f003 0301 	and.w	r3, r3, #1
 8015166:	b2db      	uxtb	r3, r3
 8015168:	2b00      	cmp	r3, #0
 801516a:	d02b      	beq.n	80151c4 <ip4_route+0x78>
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015172:	089b      	lsrs	r3, r3, #2
 8015174:	f003 0301 	and.w	r3, r3, #1
 8015178:	b2db      	uxtb	r3, r3
 801517a:	2b00      	cmp	r3, #0
 801517c:	d022      	beq.n	80151c4 <ip4_route+0x78>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	3304      	adds	r3, #4
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d01d      	beq.n	80151c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681a      	ldr	r2, [r3, #0]
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	3304      	adds	r3, #4
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	405a      	eors	r2, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	3308      	adds	r3, #8
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	4013      	ands	r3, r2
 801519c:	2b00      	cmp	r3, #0
 801519e:	d101      	bne.n	80151a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	e038      	b.n	8015216 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151aa:	f003 0302 	and.w	r3, r3, #2
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d108      	bne.n	80151c4 <ip4_route+0x78>
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	330c      	adds	r3, #12
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d101      	bne.n	80151c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	e028      	b.n	8015216 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	60fb      	str	r3, [r7, #12]
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1c5      	bne.n	801515c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151d0:	4b15      	ldr	r3, [pc, #84]	; (8015228 <ip4_route+0xdc>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d01a      	beq.n	801520e <ip4_route+0xc2>
 80151d8:	4b13      	ldr	r3, [pc, #76]	; (8015228 <ip4_route+0xdc>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151e0:	f003 0301 	and.w	r3, r3, #1
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d012      	beq.n	801520e <ip4_route+0xc2>
 80151e8:	4b0f      	ldr	r3, [pc, #60]	; (8015228 <ip4_route+0xdc>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151f0:	f003 0304 	and.w	r3, r3, #4
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d00a      	beq.n	801520e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151f8:	4b0b      	ldr	r3, [pc, #44]	; (8015228 <ip4_route+0xdc>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	3304      	adds	r3, #4
 80151fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015200:	2b00      	cmp	r3, #0
 8015202:	d004      	beq.n	801520e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	b2db      	uxtb	r3, r3
 801520a:	2b7f      	cmp	r3, #127	; 0x7f
 801520c:	d101      	bne.n	8015212 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801520e:	2300      	movs	r3, #0
 8015210:	e001      	b.n	8015216 <ip4_route+0xca>
  }

  return netif_default;
 8015212:	4b05      	ldr	r3, [pc, #20]	; (8015228 <ip4_route+0xdc>)
 8015214:	681b      	ldr	r3, [r3, #0]
}
 8015216:	4618      	mov	r0, r3
 8015218:	3714      	adds	r7, #20
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	20008e50 	.word	0x20008e50
 8015228:	20008e54 	.word	0x20008e54

0801522c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801523a:	f003 0301 	and.w	r3, r3, #1
 801523e:	b2db      	uxtb	r3, r3
 8015240:	2b00      	cmp	r3, #0
 8015242:	d016      	beq.n	8015272 <ip4_input_accept+0x46>
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	3304      	adds	r3, #4
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d011      	beq.n	8015272 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801524e:	4b0b      	ldr	r3, [pc, #44]	; (801527c <ip4_input_accept+0x50>)
 8015250:	695a      	ldr	r2, [r3, #20]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	3304      	adds	r3, #4
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	429a      	cmp	r2, r3
 801525a:	d008      	beq.n	801526e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801525c:	4b07      	ldr	r3, [pc, #28]	; (801527c <ip4_input_accept+0x50>)
 801525e:	695b      	ldr	r3, [r3, #20]
 8015260:	6879      	ldr	r1, [r7, #4]
 8015262:	4618      	mov	r0, r3
 8015264:	f000 fa08 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8015268:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801526a:	2b00      	cmp	r3, #0
 801526c:	d001      	beq.n	8015272 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801526e:	2301      	movs	r3, #1
 8015270:	e000      	b.n	8015274 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015272:	2300      	movs	r3, #0
}
 8015274:	4618      	mov	r0, r3
 8015276:	3708      	adds	r7, #8
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	200058ec 	.word	0x200058ec

08015280 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	091b      	lsrs	r3, r3, #4
 8015296:	b2db      	uxtb	r3, r3
 8015298:	2b04      	cmp	r3, #4
 801529a:	d004      	beq.n	80152a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7f8 fb31 	bl	800d904 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80152a2:	2300      	movs	r3, #0
 80152a4:	e107      	b.n	80154b6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	781b      	ldrb	r3, [r3, #0]
 80152aa:	f003 030f 	and.w	r3, r3, #15
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	009b      	lsls	r3, r3, #2
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	885b      	ldrh	r3, [r3, #2]
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	4618      	mov	r0, r3
 80152be:	f7f6 ffc3 	bl	800c248 <lwip_htons>
 80152c2:	4603      	mov	r3, r0
 80152c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	891b      	ldrh	r3, [r3, #8]
 80152ca:	89ba      	ldrh	r2, [r7, #12]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d204      	bcs.n	80152da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80152d0:	89bb      	ldrh	r3, [r7, #12]
 80152d2:	4619      	mov	r1, r3
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7f8 f98f 	bl	800d5f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	895b      	ldrh	r3, [r3, #10]
 80152de:	89fa      	ldrh	r2, [r7, #14]
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d807      	bhi.n	80152f4 <ip4_input+0x74>
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	891b      	ldrh	r3, [r3, #8]
 80152e8:	89ba      	ldrh	r2, [r7, #12]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d802      	bhi.n	80152f4 <ip4_input+0x74>
 80152ee:	89fb      	ldrh	r3, [r7, #14]
 80152f0:	2b13      	cmp	r3, #19
 80152f2:	d804      	bhi.n	80152fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7f8 fb05 	bl	800d904 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80152fa:	2300      	movs	r3, #0
 80152fc:	e0db      	b.n	80154b6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	4a6f      	ldr	r2, [pc, #444]	; (80154c0 <ip4_input+0x240>)
 8015304:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	4a6d      	ldr	r2, [pc, #436]	; (80154c0 <ip4_input+0x240>)
 801530c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801530e:	4b6c      	ldr	r3, [pc, #432]	; (80154c0 <ip4_input+0x240>)
 8015310:	695b      	ldr	r3, [r3, #20]
 8015312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015316:	2be0      	cmp	r3, #224	; 0xe0
 8015318:	d112      	bne.n	8015340 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015320:	f003 0301 	and.w	r3, r3, #1
 8015324:	b2db      	uxtb	r3, r3
 8015326:	2b00      	cmp	r3, #0
 8015328:	d007      	beq.n	801533a <ip4_input+0xba>
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	3304      	adds	r3, #4
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d002      	beq.n	801533a <ip4_input+0xba>
      netif = inp;
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	613b      	str	r3, [r7, #16]
 8015338:	e02a      	b.n	8015390 <ip4_input+0x110>
    } else {
      netif = NULL;
 801533a:	2300      	movs	r3, #0
 801533c:	613b      	str	r3, [r7, #16]
 801533e:	e027      	b.n	8015390 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015340:	6838      	ldr	r0, [r7, #0]
 8015342:	f7ff ff73 	bl	801522c <ip4_input_accept>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d002      	beq.n	8015352 <ip4_input+0xd2>
      netif = inp;
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	613b      	str	r3, [r7, #16]
 8015350:	e01e      	b.n	8015390 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015352:	2300      	movs	r3, #0
 8015354:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015356:	4b5a      	ldr	r3, [pc, #360]	; (80154c0 <ip4_input+0x240>)
 8015358:	695b      	ldr	r3, [r3, #20]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	2b7f      	cmp	r3, #127	; 0x7f
 801535e:	d017      	beq.n	8015390 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015360:	4b58      	ldr	r3, [pc, #352]	; (80154c4 <ip4_input+0x244>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	613b      	str	r3, [r7, #16]
 8015366:	e00e      	b.n	8015386 <ip4_input+0x106>
          if (netif == inp) {
 8015368:	693a      	ldr	r2, [r7, #16]
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	429a      	cmp	r2, r3
 801536e:	d006      	beq.n	801537e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015370:	6938      	ldr	r0, [r7, #16]
 8015372:	f7ff ff5b 	bl	801522c <ip4_input_accept>
 8015376:	4603      	mov	r3, r0
 8015378:	2b00      	cmp	r3, #0
 801537a:	d108      	bne.n	801538e <ip4_input+0x10e>
 801537c:	e000      	b.n	8015380 <ip4_input+0x100>
            continue;
 801537e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	613b      	str	r3, [r7, #16]
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d1ed      	bne.n	8015368 <ip4_input+0xe8>
 801538c:	e000      	b.n	8015390 <ip4_input+0x110>
            break;
 801538e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015390:	4b4b      	ldr	r3, [pc, #300]	; (80154c0 <ip4_input+0x240>)
 8015392:	691b      	ldr	r3, [r3, #16]
 8015394:	6839      	ldr	r1, [r7, #0]
 8015396:	4618      	mov	r0, r3
 8015398:	f000 f96e 	bl	8015678 <ip4_addr_isbroadcast_u32>
 801539c:	4603      	mov	r3, r0
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d105      	bne.n	80153ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80153a2:	4b47      	ldr	r3, [pc, #284]	; (80154c0 <ip4_input+0x240>)
 80153a4:	691b      	ldr	r3, [r3, #16]
 80153a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80153aa:	2be0      	cmp	r3, #224	; 0xe0
 80153ac:	d104      	bne.n	80153b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f7f8 faa8 	bl	800d904 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80153b4:	2300      	movs	r3, #0
 80153b6:	e07e      	b.n	80154b6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d104      	bne.n	80153c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f7f8 faa0 	bl	800d904 <pbuf_free>
    return ERR_OK;
 80153c4:	2300      	movs	r3, #0
 80153c6:	e076      	b.n	80154b6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	88db      	ldrh	r3, [r3, #6]
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	461a      	mov	r2, r3
 80153d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80153d4:	4013      	ands	r3, r2
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d00b      	beq.n	80153f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 fd22 	bl	8015e24 <ip4_reass>
 80153e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d101      	bne.n	80153ec <ip4_input+0x16c>
      return ERR_OK;
 80153e8:	2300      	movs	r3, #0
 80153ea:	e064      	b.n	80154b6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80153f2:	4a33      	ldr	r2, [pc, #204]	; (80154c0 <ip4_input+0x240>)
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80153f8:	4a31      	ldr	r2, [pc, #196]	; (80154c0 <ip4_input+0x240>)
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80153fe:	4a30      	ldr	r2, [pc, #192]	; (80154c0 <ip4_input+0x240>)
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015404:	697b      	ldr	r3, [r7, #20]
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	f003 030f 	and.w	r3, r3, #15
 801540c:	b2db      	uxtb	r3, r3
 801540e:	009b      	lsls	r3, r3, #2
 8015410:	b2db      	uxtb	r3, r3
 8015412:	b29a      	uxth	r2, r3
 8015414:	4b2a      	ldr	r3, [pc, #168]	; (80154c0 <ip4_input+0x240>)
 8015416:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015418:	89fb      	ldrh	r3, [r7, #14]
 801541a:	4619      	mov	r1, r3
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f7f8 f9eb 	bl	800d7f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015422:	697b      	ldr	r3, [r7, #20]
 8015424:	7a5b      	ldrb	r3, [r3, #9]
 8015426:	2b11      	cmp	r3, #17
 8015428:	d006      	beq.n	8015438 <ip4_input+0x1b8>
 801542a:	2b11      	cmp	r3, #17
 801542c:	dc13      	bgt.n	8015456 <ip4_input+0x1d6>
 801542e:	2b01      	cmp	r3, #1
 8015430:	d00c      	beq.n	801544c <ip4_input+0x1cc>
 8015432:	2b06      	cmp	r3, #6
 8015434:	d005      	beq.n	8015442 <ip4_input+0x1c2>
 8015436:	e00e      	b.n	8015456 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015438:	6839      	ldr	r1, [r7, #0]
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f7fe f8e6 	bl	801360c <udp_input>
        break;
 8015440:	e026      	b.n	8015490 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015442:	6839      	ldr	r1, [r7, #0]
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7fa f927 	bl	800f698 <tcp_input>
        break;
 801544a:	e021      	b.n	8015490 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801544c:	6839      	ldr	r1, [r7, #0]
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f7ff fcee 	bl	8014e30 <icmp_input>
        break;
 8015454:	e01c      	b.n	8015490 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015456:	4b1a      	ldr	r3, [pc, #104]	; (80154c0 <ip4_input+0x240>)
 8015458:	695b      	ldr	r3, [r3, #20]
 801545a:	6939      	ldr	r1, [r7, #16]
 801545c:	4618      	mov	r0, r3
 801545e:	f000 f90b 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d10f      	bne.n	8015488 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015468:	4b15      	ldr	r3, [pc, #84]	; (80154c0 <ip4_input+0x240>)
 801546a:	695b      	ldr	r3, [r3, #20]
 801546c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015470:	2be0      	cmp	r3, #224	; 0xe0
 8015472:	d009      	beq.n	8015488 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015478:	4619      	mov	r1, r3
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f7f8 fa2f 	bl	800d8de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015480:	2102      	movs	r1, #2
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f7ff fdd8 	bl	8015038 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f7f8 fa3b 	bl	800d904 <pbuf_free>
        break;
 801548e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015490:	4b0b      	ldr	r3, [pc, #44]	; (80154c0 <ip4_input+0x240>)
 8015492:	2200      	movs	r2, #0
 8015494:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015496:	4b0a      	ldr	r3, [pc, #40]	; (80154c0 <ip4_input+0x240>)
 8015498:	2200      	movs	r2, #0
 801549a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801549c:	4b08      	ldr	r3, [pc, #32]	; (80154c0 <ip4_input+0x240>)
 801549e:	2200      	movs	r2, #0
 80154a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80154a2:	4b07      	ldr	r3, [pc, #28]	; (80154c0 <ip4_input+0x240>)
 80154a4:	2200      	movs	r2, #0
 80154a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80154a8:	4b05      	ldr	r3, [pc, #20]	; (80154c0 <ip4_input+0x240>)
 80154aa:	2200      	movs	r2, #0
 80154ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80154ae:	4b04      	ldr	r3, [pc, #16]	; (80154c0 <ip4_input+0x240>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3718      	adds	r7, #24
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	200058ec 	.word	0x200058ec
 80154c4:	20008e50 	.word	0x20008e50

080154c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b08a      	sub	sp, #40	; 0x28
 80154cc:	af04      	add	r7, sp, #16
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d009      	beq.n	80154f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d003      	beq.n	80154ee <ip4_output_if+0x26>
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d102      	bne.n	80154f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80154ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f0:	3304      	adds	r3, #4
 80154f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80154f4:	78fa      	ldrb	r2, [r7, #3]
 80154f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f8:	9302      	str	r3, [sp, #8]
 80154fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154fe:	9301      	str	r3, [sp, #4]
 8015500:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	4613      	mov	r3, r2
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	6979      	ldr	r1, [r7, #20]
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f000 f805 	bl	801551c <ip4_output_if_src>
 8015512:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015514:	4618      	mov	r0, r3
 8015516:	3718      	adds	r7, #24
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b088      	sub	sp, #32
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	7b9b      	ldrb	r3, [r3, #14]
 801552e:	2b01      	cmp	r3, #1
 8015530:	d006      	beq.n	8015540 <ip4_output_if_src+0x24>
 8015532:	4b4b      	ldr	r3, [pc, #300]	; (8015660 <ip4_output_if_src+0x144>)
 8015534:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015538:	494a      	ldr	r1, [pc, #296]	; (8015664 <ip4_output_if_src+0x148>)
 801553a:	484b      	ldr	r0, [pc, #300]	; (8015668 <ip4_output_if_src+0x14c>)
 801553c:	f002 f942 	bl	80177c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d060      	beq.n	8015608 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015546:	2314      	movs	r3, #20
 8015548:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801554a:	2114      	movs	r1, #20
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f7f8 f943 	bl	800d7d8 <pbuf_add_header>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d002      	beq.n	801555e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015558:	f06f 0301 	mvn.w	r3, #1
 801555c:	e07c      	b.n	8015658 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	895b      	ldrh	r3, [r3, #10]
 8015568:	2b13      	cmp	r3, #19
 801556a:	d806      	bhi.n	801557a <ip4_output_if_src+0x5e>
 801556c:	4b3c      	ldr	r3, [pc, #240]	; (8015660 <ip4_output_if_src+0x144>)
 801556e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015572:	493e      	ldr	r1, [pc, #248]	; (801566c <ip4_output_if_src+0x150>)
 8015574:	483c      	ldr	r0, [pc, #240]	; (8015668 <ip4_output_if_src+0x14c>)
 8015576:	f002 f925 	bl	80177c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	78fa      	ldrb	r2, [r7, #3]
 801557e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015586:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015590:	8b7b      	ldrh	r3, [r7, #26]
 8015592:	089b      	lsrs	r3, r3, #2
 8015594:	b29b      	uxth	r3, r3
 8015596:	b2db      	uxtb	r3, r3
 8015598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801559c:	b2da      	uxtb	r2, r3
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80155a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	891b      	ldrh	r3, [r3, #8]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f6 fe4a 	bl	800c248 <lwip_htons>
 80155b4:	4603      	mov	r3, r0
 80155b6:	461a      	mov	r2, r3
 80155b8:	69fb      	ldr	r3, [r7, #28]
 80155ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	2200      	movs	r2, #0
 80155c0:	719a      	strb	r2, [r3, #6]
 80155c2:	2200      	movs	r2, #0
 80155c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80155c6:	4b2a      	ldr	r3, [pc, #168]	; (8015670 <ip4_output_if_src+0x154>)
 80155c8:	881b      	ldrh	r3, [r3, #0]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7f6 fe3c 	bl	800c248 <lwip_htons>
 80155d0:	4603      	mov	r3, r0
 80155d2:	461a      	mov	r2, r3
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80155d8:	4b25      	ldr	r3, [pc, #148]	; (8015670 <ip4_output_if_src+0x154>)
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	3301      	adds	r3, #1
 80155de:	b29a      	uxth	r2, r3
 80155e0:	4b23      	ldr	r3, [pc, #140]	; (8015670 <ip4_output_if_src+0x154>)
 80155e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d104      	bne.n	80155f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80155ea:	4b22      	ldr	r3, [pc, #136]	; (8015674 <ip4_output_if_src+0x158>)
 80155ec:	681a      	ldr	r2, [r3, #0]
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	60da      	str	r2, [r3, #12]
 80155f2:	e003      	b.n	80155fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	2200      	movs	r2, #0
 8015600:	729a      	strb	r2, [r3, #10]
 8015602:	2200      	movs	r2, #0
 8015604:	72da      	strb	r2, [r3, #11]
 8015606:	e00f      	b.n	8015628 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	895b      	ldrh	r3, [r3, #10]
 801560c:	2b13      	cmp	r3, #19
 801560e:	d802      	bhi.n	8015616 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015610:	f06f 0301 	mvn.w	r3, #1
 8015614:	e020      	b.n	8015658 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	691b      	ldr	r3, [r3, #16]
 8015620:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015622:	f107 0314 	add.w	r3, r7, #20
 8015626:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801562c:	2b00      	cmp	r3, #0
 801562e:	d00c      	beq.n	801564a <ip4_output_if_src+0x12e>
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	891a      	ldrh	r2, [r3, #8]
 8015634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015638:	429a      	cmp	r2, r3
 801563a:	d906      	bls.n	801564a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f000 fde3 	bl	801620c <ip4_frag>
 8015646:	4603      	mov	r3, r0
 8015648:	e006      	b.n	8015658 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564c:	695b      	ldr	r3, [r3, #20]
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	68f9      	ldr	r1, [r7, #12]
 8015652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015654:	4798      	blx	r3
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3720      	adds	r7, #32
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}
 8015660:	0801aff4 	.word	0x0801aff4
 8015664:	0801b028 	.word	0x0801b028
 8015668:	0801b034 	.word	0x0801b034
 801566c:	0801b05c 	.word	0x0801b05c
 8015670:	20008fae 	.word	0x20008fae
 8015674:	0801b5ec 	.word	0x0801b5ec

08015678 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015678:	b480      	push	{r7}
 801567a:	b085      	sub	sp, #20
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801568c:	d002      	beq.n	8015694 <ip4_addr_isbroadcast_u32+0x1c>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015694:	2301      	movs	r3, #1
 8015696:	e02a      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801569e:	f003 0302 	and.w	r3, r3, #2
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d101      	bne.n	80156aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80156a6:	2300      	movs	r3, #0
 80156a8:	e021      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	3304      	adds	r3, #4
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d101      	bne.n	80156ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80156b6:	2300      	movs	r3, #0
 80156b8:	e019      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80156ba:	68fa      	ldr	r2, [r7, #12]
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	3304      	adds	r3, #4
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	405a      	eors	r2, r3
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	3308      	adds	r3, #8
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4013      	ands	r3, r2
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d10d      	bne.n	80156ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	3308      	adds	r3, #8
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	43da      	mvns	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	3308      	adds	r3, #8
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d101      	bne.n	80156ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80156e8:	2301      	movs	r3, #1
 80156ea:	e000      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80156ec:	2300      	movs	r3, #0
  }
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3714      	adds	r7, #20
 80156f2:	46bd      	mov	sp, r7
 80156f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f8:	4770      	bx	lr
	...

080156fc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015704:	2210      	movs	r2, #16
 8015706:	4904      	ldr	r1, [pc, #16]	; (8015718 <ip4addr_ntoa+0x1c>)
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 f807 	bl	801571c <ip4addr_ntoa_r>
 801570e:	4603      	mov	r3, r0
}
 8015710:	4618      	mov	r0, r3
 8015712:	3708      	adds	r7, #8
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}
 8015718:	20008fb0 	.word	0x20008fb0

0801571c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801571c:	b480      	push	{r7}
 801571e:	b08d      	sub	sp, #52	; 0x34
 8015720:	af00      	add	r7, sp, #0
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8015728:	2300      	movs	r3, #0
 801572a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8015736:	f107 0318 	add.w	r3, r7, #24
 801573a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801573c:	2300      	movs	r3, #0
 801573e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015742:	e058      	b.n	80157f6 <ip4addr_ntoa_r+0xda>
    i = 0;
 8015744:	2300      	movs	r3, #0
 8015746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801574c:	781a      	ldrb	r2, [r3, #0]
 801574e:	4b32      	ldr	r3, [pc, #200]	; (8015818 <ip4addr_ntoa_r+0xfc>)
 8015750:	fba3 1302 	umull	r1, r3, r3, r2
 8015754:	08d9      	lsrs	r1, r3, #3
 8015756:	460b      	mov	r3, r1
 8015758:	009b      	lsls	r3, r3, #2
 801575a:	440b      	add	r3, r1
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	1ad3      	subs	r3, r2, r3
 8015760:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8015762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	4a2c      	ldr	r2, [pc, #176]	; (8015818 <ip4addr_ntoa_r+0xfc>)
 8015768:	fba2 2303 	umull	r2, r3, r2, r3
 801576c:	08db      	lsrs	r3, r3, #3
 801576e:	b2da      	uxtb	r2, r3
 8015770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015772:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8015774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015778:	1c5a      	adds	r2, r3, #1
 801577a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801577e:	4619      	mov	r1, r3
 8015780:	7ffb      	ldrb	r3, [r7, #31]
 8015782:	3330      	adds	r3, #48	; 0x30
 8015784:	b2da      	uxtb	r2, r3
 8015786:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801578a:	443b      	add	r3, r7
 801578c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d1d8      	bne.n	801574a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015798:	e011      	b.n	80157be <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801579a:	6a3b      	ldr	r3, [r7, #32]
 801579c:	1c5a      	adds	r2, r3, #1
 801579e:	623a      	str	r2, [r7, #32]
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	dc01      	bgt.n	80157aa <ip4addr_ntoa_r+0x8e>
        return NULL;
 80157a6:	2300      	movs	r3, #0
 80157a8:	e030      	b.n	801580c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80157aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80157ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b0:	1c59      	adds	r1, r3, #1
 80157b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80157b4:	3230      	adds	r2, #48	; 0x30
 80157b6:	443a      	add	r2, r7
 80157b8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80157bc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80157be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80157c2:	1e5a      	subs	r2, r3, #1
 80157c4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d1e6      	bne.n	801579a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80157cc:	6a3b      	ldr	r3, [r7, #32]
 80157ce:	1c5a      	adds	r2, r3, #1
 80157d0:	623a      	str	r2, [r7, #32]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	dc01      	bgt.n	80157dc <ip4addr_ntoa_r+0xc0>
      return NULL;
 80157d8:	2300      	movs	r3, #0
 80157da:	e017      	b.n	801580c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80157dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157de:	1c5a      	adds	r2, r3, #1
 80157e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80157e2:	222e      	movs	r2, #46	; 0x2e
 80157e4:	701a      	strb	r2, [r3, #0]
    ap++;
 80157e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e8:	3301      	adds	r3, #1
 80157ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80157ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157f0:	3301      	adds	r3, #1
 80157f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157fa:	2b03      	cmp	r3, #3
 80157fc:	d9a2      	bls.n	8015744 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80157fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015800:	3b01      	subs	r3, #1
 8015802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015806:	2200      	movs	r2, #0
 8015808:	701a      	strb	r2, [r3, #0]
  return buf;
 801580a:	68bb      	ldr	r3, [r7, #8]
}
 801580c:	4618      	mov	r0, r3
 801580e:	3734      	adds	r7, #52	; 0x34
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr
 8015818:	cccccccd 	.word	0xcccccccd

0801581c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015822:	2300      	movs	r3, #0
 8015824:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015826:	4b12      	ldr	r3, [pc, #72]	; (8015870 <ip_reass_tmr+0x54>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801582c:	e018      	b.n	8015860 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	7fdb      	ldrb	r3, [r3, #31]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d00b      	beq.n	801584e <ip_reass_tmr+0x32>
      r->timer--;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	7fdb      	ldrb	r3, [r3, #31]
 801583a:	3b01      	subs	r3, #1
 801583c:	b2da      	uxtb	r2, r3
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	60fb      	str	r3, [r7, #12]
 801584c:	e008      	b.n	8015860 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015858:	68b9      	ldr	r1, [r7, #8]
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f000 f80a 	bl	8015874 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d1e3      	bne.n	801582e <ip_reass_tmr+0x12>
    }
  }
}
 8015866:	bf00      	nop
 8015868:	bf00      	nop
 801586a:	3710      	adds	r7, #16
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	20008fc0 	.word	0x20008fc0

08015874 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b088      	sub	sp, #32
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801587e:	2300      	movs	r3, #0
 8015880:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015882:	683a      	ldr	r2, [r7, #0]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	429a      	cmp	r2, r3
 8015888:	d105      	bne.n	8015896 <ip_reass_free_complete_datagram+0x22>
 801588a:	4b45      	ldr	r3, [pc, #276]	; (80159a0 <ip_reass_free_complete_datagram+0x12c>)
 801588c:	22ab      	movs	r2, #171	; 0xab
 801588e:	4945      	ldr	r1, [pc, #276]	; (80159a4 <ip_reass_free_complete_datagram+0x130>)
 8015890:	4845      	ldr	r0, [pc, #276]	; (80159a8 <ip_reass_free_complete_datagram+0x134>)
 8015892:	f001 ff97 	bl	80177c4 <iprintf>
  if (prev != NULL) {
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00a      	beq.n	80158b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d005      	beq.n	80158b2 <ip_reass_free_complete_datagram+0x3e>
 80158a6:	4b3e      	ldr	r3, [pc, #248]	; (80159a0 <ip_reass_free_complete_datagram+0x12c>)
 80158a8:	22ad      	movs	r2, #173	; 0xad
 80158aa:	4940      	ldr	r1, [pc, #256]	; (80159ac <ip_reass_free_complete_datagram+0x138>)
 80158ac:	483e      	ldr	r0, [pc, #248]	; (80159a8 <ip_reass_free_complete_datagram+0x134>)
 80158ae:	f001 ff89 	bl	80177c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	889b      	ldrh	r3, [r3, #4]
 80158be:	b29b      	uxth	r3, r3
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d12a      	bne.n	801591a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	681a      	ldr	r2, [r3, #0]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	6858      	ldr	r0, [r3, #4]
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	3308      	adds	r3, #8
 80158da:	2214      	movs	r2, #20
 80158dc:	4619      	mov	r1, r3
 80158de:	f001 ff5b 	bl	8017798 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80158e2:	2101      	movs	r1, #1
 80158e4:	69b8      	ldr	r0, [r7, #24]
 80158e6:	f7ff fbb7 	bl	8015058 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80158ea:	69b8      	ldr	r0, [r7, #24]
 80158ec:	f7f8 f892 	bl	800da14 <pbuf_clen>
 80158f0:	4603      	mov	r3, r0
 80158f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80158f4:	8bfa      	ldrh	r2, [r7, #30]
 80158f6:	8a7b      	ldrh	r3, [r7, #18]
 80158f8:	4413      	add	r3, r2
 80158fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158fe:	db05      	blt.n	801590c <ip_reass_free_complete_datagram+0x98>
 8015900:	4b27      	ldr	r3, [pc, #156]	; (80159a0 <ip_reass_free_complete_datagram+0x12c>)
 8015902:	22bc      	movs	r2, #188	; 0xbc
 8015904:	492a      	ldr	r1, [pc, #168]	; (80159b0 <ip_reass_free_complete_datagram+0x13c>)
 8015906:	4828      	ldr	r0, [pc, #160]	; (80159a8 <ip_reass_free_complete_datagram+0x134>)
 8015908:	f001 ff5c 	bl	80177c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801590c:	8bfa      	ldrh	r2, [r7, #30]
 801590e:	8a7b      	ldrh	r3, [r7, #18]
 8015910:	4413      	add	r3, r2
 8015912:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015914:	69b8      	ldr	r0, [r7, #24]
 8015916:	f7f7 fff5 	bl	800d904 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015920:	e01f      	b.n	8015962 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	685b      	ldr	r3, [r3, #4]
 8015926:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015932:	68f8      	ldr	r0, [r7, #12]
 8015934:	f7f8 f86e 	bl	800da14 <pbuf_clen>
 8015938:	4603      	mov	r3, r0
 801593a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801593c:	8bfa      	ldrh	r2, [r7, #30]
 801593e:	8a7b      	ldrh	r3, [r7, #18]
 8015940:	4413      	add	r3, r2
 8015942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015946:	db05      	blt.n	8015954 <ip_reass_free_complete_datagram+0xe0>
 8015948:	4b15      	ldr	r3, [pc, #84]	; (80159a0 <ip_reass_free_complete_datagram+0x12c>)
 801594a:	22cc      	movs	r2, #204	; 0xcc
 801594c:	4918      	ldr	r1, [pc, #96]	; (80159b0 <ip_reass_free_complete_datagram+0x13c>)
 801594e:	4816      	ldr	r0, [pc, #88]	; (80159a8 <ip_reass_free_complete_datagram+0x134>)
 8015950:	f001 ff38 	bl	80177c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015954:	8bfa      	ldrh	r2, [r7, #30]
 8015956:	8a7b      	ldrh	r3, [r7, #18]
 8015958:	4413      	add	r3, r2
 801595a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f7f7 ffd1 	bl	800d904 <pbuf_free>
  while (p != NULL) {
 8015962:	69bb      	ldr	r3, [r7, #24]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d1dc      	bne.n	8015922 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015968:	6839      	ldr	r1, [r7, #0]
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f000 f8c2 	bl	8015af4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015970:	4b10      	ldr	r3, [pc, #64]	; (80159b4 <ip_reass_free_complete_datagram+0x140>)
 8015972:	881b      	ldrh	r3, [r3, #0]
 8015974:	8bfa      	ldrh	r2, [r7, #30]
 8015976:	429a      	cmp	r2, r3
 8015978:	d905      	bls.n	8015986 <ip_reass_free_complete_datagram+0x112>
 801597a:	4b09      	ldr	r3, [pc, #36]	; (80159a0 <ip_reass_free_complete_datagram+0x12c>)
 801597c:	22d2      	movs	r2, #210	; 0xd2
 801597e:	490e      	ldr	r1, [pc, #56]	; (80159b8 <ip_reass_free_complete_datagram+0x144>)
 8015980:	4809      	ldr	r0, [pc, #36]	; (80159a8 <ip_reass_free_complete_datagram+0x134>)
 8015982:	f001 ff1f 	bl	80177c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015986:	4b0b      	ldr	r3, [pc, #44]	; (80159b4 <ip_reass_free_complete_datagram+0x140>)
 8015988:	881a      	ldrh	r2, [r3, #0]
 801598a:	8bfb      	ldrh	r3, [r7, #30]
 801598c:	1ad3      	subs	r3, r2, r3
 801598e:	b29a      	uxth	r2, r3
 8015990:	4b08      	ldr	r3, [pc, #32]	; (80159b4 <ip_reass_free_complete_datagram+0x140>)
 8015992:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015994:	8bfb      	ldrh	r3, [r7, #30]
}
 8015996:	4618      	mov	r0, r3
 8015998:	3720      	adds	r7, #32
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}
 801599e:	bf00      	nop
 80159a0:	0801b08c 	.word	0x0801b08c
 80159a4:	0801b0c8 	.word	0x0801b0c8
 80159a8:	0801b0d4 	.word	0x0801b0d4
 80159ac:	0801b0fc 	.word	0x0801b0fc
 80159b0:	0801b110 	.word	0x0801b110
 80159b4:	20008fc4 	.word	0x20008fc4
 80159b8:	0801b130 	.word	0x0801b130

080159bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b08a      	sub	sp, #40	; 0x28
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80159c6:	2300      	movs	r3, #0
 80159c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80159ce:	2300      	movs	r3, #0
 80159d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80159d2:	2300      	movs	r3, #0
 80159d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80159d6:	2300      	movs	r3, #0
 80159d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80159da:	4b28      	ldr	r3, [pc, #160]	; (8015a7c <ip_reass_remove_oldest_datagram+0xc0>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80159e0:	e030      	b.n	8015a44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	695a      	ldr	r2, [r3, #20]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d10c      	bne.n	8015a08 <ip_reass_remove_oldest_datagram+0x4c>
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	699a      	ldr	r2, [r3, #24]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	691b      	ldr	r3, [r3, #16]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d106      	bne.n	8015a08 <ip_reass_remove_oldest_datagram+0x4c>
 80159fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fc:	899a      	ldrh	r2, [r3, #12]
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	889b      	ldrh	r3, [r3, #4]
 8015a02:	b29b      	uxth	r3, r3
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d014      	beq.n	8015a32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a0e:	6a3b      	ldr	r3, [r7, #32]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d104      	bne.n	8015a1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a18:	69fb      	ldr	r3, [r7, #28]
 8015a1a:	61bb      	str	r3, [r7, #24]
 8015a1c:	e009      	b.n	8015a32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a20:	7fda      	ldrb	r2, [r3, #31]
 8015a22:	6a3b      	ldr	r3, [r7, #32]
 8015a24:	7fdb      	ldrb	r3, [r3, #31]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d803      	bhi.n	8015a32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d001      	beq.n	8015a3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1cb      	bne.n	80159e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015a4a:	6a3b      	ldr	r3, [r7, #32]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d008      	beq.n	8015a62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015a50:	69b9      	ldr	r1, [r7, #24]
 8015a52:	6a38      	ldr	r0, [r7, #32]
 8015a54:	f7ff ff0e 	bl	8015874 <ip_reass_free_complete_datagram>
 8015a58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015a5a:	697a      	ldr	r2, [r7, #20]
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	4413      	add	r3, r2
 8015a60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015a62:	697a      	ldr	r2, [r7, #20]
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	da02      	bge.n	8015a70 <ip_reass_remove_oldest_datagram+0xb4>
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	dcac      	bgt.n	80159ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015a70:	697b      	ldr	r3, [r7, #20]
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3728      	adds	r7, #40	; 0x28
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	20008fc0 	.word	0x20008fc0

08015a80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b084      	sub	sp, #16
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a8a:	2004      	movs	r0, #4
 8015a8c:	f7f7 f854 	bl	800cb38 <memp_malloc>
 8015a90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d110      	bne.n	8015aba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015a98:	6839      	ldr	r1, [r7, #0]
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f7ff ff8e 	bl	80159bc <ip_reass_remove_oldest_datagram>
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	4293      	cmp	r3, r2
 8015aa6:	dc03      	bgt.n	8015ab0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015aa8:	2004      	movs	r0, #4
 8015aaa:	f7f7 f845 	bl	800cb38 <memp_malloc>
 8015aae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d101      	bne.n	8015aba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	e016      	b.n	8015ae8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015aba:	2220      	movs	r2, #32
 8015abc:	2100      	movs	r1, #0
 8015abe:	68f8      	ldr	r0, [r7, #12]
 8015ac0:	f001 fe78 	bl	80177b4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	220f      	movs	r2, #15
 8015ac8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015aca:	4b09      	ldr	r3, [pc, #36]	; (8015af0 <ip_reass_enqueue_new_datagram+0x70>)
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015ad2:	4a07      	ldr	r2, [pc, #28]	; (8015af0 <ip_reass_enqueue_new_datagram+0x70>)
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	3308      	adds	r3, #8
 8015adc:	2214      	movs	r2, #20
 8015ade:	6879      	ldr	r1, [r7, #4]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f001 fe59 	bl	8017798 <memcpy>
  return ipr;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3710      	adds	r7, #16
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	20008fc0 	.word	0x20008fc0

08015af4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015afe:	4b10      	ldr	r3, [pc, #64]	; (8015b40 <ip_reass_dequeue_datagram+0x4c>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	687a      	ldr	r2, [r7, #4]
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d104      	bne.n	8015b12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	4a0c      	ldr	r2, [pc, #48]	; (8015b40 <ip_reass_dequeue_datagram+0x4c>)
 8015b0e:	6013      	str	r3, [r2, #0]
 8015b10:	e00d      	b.n	8015b2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d106      	bne.n	8015b26 <ip_reass_dequeue_datagram+0x32>
 8015b18:	4b0a      	ldr	r3, [pc, #40]	; (8015b44 <ip_reass_dequeue_datagram+0x50>)
 8015b1a:	f240 1245 	movw	r2, #325	; 0x145
 8015b1e:	490a      	ldr	r1, [pc, #40]	; (8015b48 <ip_reass_dequeue_datagram+0x54>)
 8015b20:	480a      	ldr	r0, [pc, #40]	; (8015b4c <ip_reass_dequeue_datagram+0x58>)
 8015b22:	f001 fe4f 	bl	80177c4 <iprintf>
    prev->next = ipr->next;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b2e:	6879      	ldr	r1, [r7, #4]
 8015b30:	2004      	movs	r0, #4
 8015b32:	f7f7 f871 	bl	800cc18 <memp_free>
}
 8015b36:	bf00      	nop
 8015b38:	3708      	adds	r7, #8
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	20008fc0 	.word	0x20008fc0
 8015b44:	0801b08c 	.word	0x0801b08c
 8015b48:	0801b154 	.word	0x0801b154
 8015b4c:	0801b0d4 	.word	0x0801b0d4

08015b50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b08c      	sub	sp, #48	; 0x30
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	60b9      	str	r1, [r7, #8]
 8015b5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015b60:	2301      	movs	r3, #1
 8015b62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b6a:	69fb      	ldr	r3, [r7, #28]
 8015b6c:	885b      	ldrh	r3, [r3, #2]
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7f6 fb69 	bl	800c248 <lwip_htons>
 8015b76:	4603      	mov	r3, r0
 8015b78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	f003 030f 	and.w	r3, r3, #15
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015b88:	7e7b      	ldrb	r3, [r7, #25]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	8b7a      	ldrh	r2, [r7, #26]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d202      	bcs.n	8015b98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b92:	f04f 33ff 	mov.w	r3, #4294967295
 8015b96:	e135      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015b98:	7e7b      	ldrb	r3, [r7, #25]
 8015b9a:	b29b      	uxth	r3, r3
 8015b9c:	8b7a      	ldrh	r2, [r7, #26]
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	88db      	ldrh	r3, [r3, #6]
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7f6 fb4d 	bl	800c248 <lwip_htons>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bb4:	b29b      	uxth	r3, r3
 8015bb6:	00db      	lsls	r3, r3, #3
 8015bb8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	701a      	strb	r2, [r3, #0]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	705a      	strb	r2, [r3, #1]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	709a      	strb	r2, [r3, #2]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd4:	8afa      	ldrh	r2, [r7, #22]
 8015bd6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015bd8:	8afa      	ldrh	r2, [r7, #22]
 8015bda:	8b7b      	ldrh	r3, [r7, #26]
 8015bdc:	4413      	add	r3, r2
 8015bde:	b29a      	uxth	r2, r3
 8015be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be6:	88db      	ldrh	r3, [r3, #6]
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	8afa      	ldrh	r2, [r7, #22]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d902      	bls.n	8015bf6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf4:	e106      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8015bfc:	e068      	b.n	8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c06:	889b      	ldrh	r3, [r3, #4]
 8015c08:	b29a      	uxth	r2, r3
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	889b      	ldrh	r3, [r3, #4]
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d235      	bcs.n	8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d020      	beq.n	8015c62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c22:	889b      	ldrh	r3, [r3, #4]
 8015c24:	b29a      	uxth	r2, r3
 8015c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c28:	88db      	ldrh	r3, [r3, #6]
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d307      	bcc.n	8015c40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c32:	88db      	ldrh	r3, [r3, #6]
 8015c34:	b29a      	uxth	r2, r3
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	889b      	ldrh	r3, [r3, #4]
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d902      	bls.n	8015c46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c40:	f04f 33ff 	mov.w	r3, #4294967295
 8015c44:	e0de      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c48:	68ba      	ldr	r2, [r7, #8]
 8015c4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c4e:	88db      	ldrh	r3, [r3, #6]
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c54:	889b      	ldrh	r3, [r3, #4]
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d03d      	beq.n	8015cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015c60:	e03a      	b.n	8015cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c64:	88db      	ldrh	r3, [r3, #6]
 8015c66:	b29a      	uxth	r2, r3
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	889b      	ldrh	r3, [r3, #4]
 8015c6c:	b29b      	uxth	r3, r3
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d902      	bls.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c72:	f04f 33ff 	mov.w	r3, #4294967295
 8015c76:	e0c5      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	68ba      	ldr	r2, [r7, #8]
 8015c7c:	605a      	str	r2, [r3, #4]
      break;
 8015c7e:	e02b      	b.n	8015cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c82:	889b      	ldrh	r3, [r3, #4]
 8015c84:	b29a      	uxth	r2, r3
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	889b      	ldrh	r3, [r3, #4]
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d102      	bne.n	8015c96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c90:	f04f 33ff 	mov.w	r3, #4294967295
 8015c94:	e0b6      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c98:	889b      	ldrh	r3, [r3, #4]
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	88db      	ldrh	r3, [r3, #6]
 8015ca0:	b29b      	uxth	r3, r3
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d202      	bcs.n	8015cac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8015caa:	e0ab      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d009      	beq.n	8015cc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb4:	88db      	ldrh	r3, [r3, #6]
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	889b      	ldrh	r3, [r3, #4]
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d001      	beq.n	8015cc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d193      	bne.n	8015bfe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015cd6:	e000      	b.n	8015cda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015cd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d12d      	bne.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d01c      	beq.n	8015d20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce8:	88db      	ldrh	r3, [r3, #6]
 8015cea:	b29a      	uxth	r2, r3
 8015cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cee:	889b      	ldrh	r3, [r3, #4]
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d906      	bls.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015cf6:	4b45      	ldr	r3, [pc, #276]	; (8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cf8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015cfc:	4944      	ldr	r1, [pc, #272]	; (8015e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015cfe:	4845      	ldr	r0, [pc, #276]	; (8015e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d00:	f001 fd60 	bl	80177c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d06:	68ba      	ldr	r2, [r7, #8]
 8015d08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0c:	88db      	ldrh	r3, [r3, #6]
 8015d0e:	b29a      	uxth	r2, r3
 8015d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d12:	889b      	ldrh	r3, [r3, #4]
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d010      	beq.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	623b      	str	r3, [r7, #32]
 8015d1e:	e00d      	b.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d006      	beq.n	8015d36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d28:	4b38      	ldr	r3, [pc, #224]	; (8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015d2e:	493a      	ldr	r1, [pc, #232]	; (8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d30:	4838      	ldr	r0, [pc, #224]	; (8015e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d32:	f001 fd47 	bl	80177c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d105      	bne.n	8015d4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	7f9b      	ldrb	r3, [r3, #30]
 8015d46:	f003 0301 	and.w	r3, r3, #1
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d059      	beq.n	8015e02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015d4e:	6a3b      	ldr	r3, [r7, #32]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d04f      	beq.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	685b      	ldr	r3, [r3, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d006      	beq.n	8015d6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	889b      	ldrh	r3, [r3, #4]
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d002      	beq.n	8015d70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	623b      	str	r3, [r7, #32]
 8015d6e:	e041      	b.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d7a:	e012      	b.n	8015da2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d84:	88db      	ldrh	r3, [r3, #6]
 8015d86:	b29a      	uxth	r2, r3
 8015d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8a:	889b      	ldrh	r3, [r3, #4]
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d002      	beq.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015d92:	2300      	movs	r3, #0
 8015d94:	623b      	str	r3, [r7, #32]
            break;
 8015d96:	e007      	b.n	8015da8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d1e9      	bne.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d022      	beq.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d106      	bne.n	8015dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015db6:	4b15      	ldr	r3, [pc, #84]	; (8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015db8:	f240 12df 	movw	r2, #479	; 0x1df
 8015dbc:	4917      	ldr	r1, [pc, #92]	; (8015e1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015dbe:	4815      	ldr	r0, [pc, #84]	; (8015e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dc0:	f001 fd00 	bl	80177c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d106      	bne.n	8015dde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015dd0:	4b0e      	ldr	r3, [pc, #56]	; (8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015dd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015dd6:	4911      	ldr	r1, [pc, #68]	; (8015e1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015dd8:	480e      	ldr	r0, [pc, #56]	; (8015e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dda:	f001 fcf3 	bl	80177c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d006      	beq.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015de6:	4b09      	ldr	r3, [pc, #36]	; (8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015de8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015dec:	490c      	ldr	r1, [pc, #48]	; (8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015dee:	4809      	ldr	r0, [pc, #36]	; (8015e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015df0:	f001 fce8 	bl	80177c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015df4:	6a3b      	ldr	r3, [r7, #32]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	bf14      	ite	ne
 8015dfa:	2301      	movne	r3, #1
 8015dfc:	2300      	moveq	r3, #0
 8015dfe:	b2db      	uxtb	r3, r3
 8015e00:	e000      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e02:	2300      	movs	r3, #0
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3730      	adds	r7, #48	; 0x30
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	0801b08c 	.word	0x0801b08c
 8015e10:	0801b170 	.word	0x0801b170
 8015e14:	0801b0d4 	.word	0x0801b0d4
 8015e18:	0801b190 	.word	0x0801b190
 8015e1c:	0801b1c8 	.word	0x0801b1c8
 8015e20:	0801b1d8 	.word	0x0801b1d8

08015e24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08e      	sub	sp, #56	; 0x38
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	f003 030f 	and.w	r3, r3, #15
 8015e3a:	b2db      	uxtb	r3, r3
 8015e3c:	009b      	lsls	r3, r3, #2
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	2b14      	cmp	r3, #20
 8015e42:	f040 8171 	bne.w	8016128 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e48:	88db      	ldrh	r3, [r3, #6]
 8015e4a:	b29b      	uxth	r3, r3
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7f6 f9fb 	bl	800c248 <lwip_htons>
 8015e52:	4603      	mov	r3, r0
 8015e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	00db      	lsls	r3, r3, #3
 8015e5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e60:	885b      	ldrh	r3, [r3, #2]
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7f6 f9ef 	bl	800c248 <lwip_htons>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	f003 030f 	and.w	r3, r3, #15
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	009b      	lsls	r3, r3, #2
 8015e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e86:	429a      	cmp	r2, r3
 8015e88:	f0c0 8150 	bcc.w	801612c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e90:	b29b      	uxth	r3, r3
 8015e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f7f7 fdbb 	bl	800da14 <pbuf_clen>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015ea2:	4b8c      	ldr	r3, [pc, #560]	; (80160d4 <ip4_reass+0x2b0>)
 8015ea4:	881b      	ldrh	r3, [r3, #0]
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	8c3b      	ldrh	r3, [r7, #32]
 8015eaa:	4413      	add	r3, r2
 8015eac:	2b0a      	cmp	r3, #10
 8015eae:	dd10      	ble.n	8015ed2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015eb0:	8c3b      	ldrh	r3, [r7, #32]
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eb6:	f7ff fd81 	bl	80159bc <ip_reass_remove_oldest_datagram>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	f000 8137 	beq.w	8016130 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015ec2:	4b84      	ldr	r3, [pc, #528]	; (80160d4 <ip4_reass+0x2b0>)
 8015ec4:	881b      	ldrh	r3, [r3, #0]
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	8c3b      	ldrh	r3, [r7, #32]
 8015eca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ecc:	2b0a      	cmp	r3, #10
 8015ece:	f300 812f 	bgt.w	8016130 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ed2:	4b81      	ldr	r3, [pc, #516]	; (80160d8 <ip4_reass+0x2b4>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8015ed8:	e015      	b.n	8015f06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015edc:	695a      	ldr	r2, [r3, #20]
 8015ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee0:	68db      	ldr	r3, [r3, #12]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d10c      	bne.n	8015f00 <ip4_reass+0xdc>
 8015ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee8:	699a      	ldr	r2, [r3, #24]
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	691b      	ldr	r3, [r3, #16]
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d106      	bne.n	8015f00 <ip4_reass+0xdc>
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef4:	899a      	ldrh	r2, [r3, #12]
 8015ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef8:	889b      	ldrh	r3, [r3, #4]
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d006      	beq.n	8015f0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	633b      	str	r3, [r7, #48]	; 0x30
 8015f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d1e6      	bne.n	8015eda <ip4_reass+0xb6>
 8015f0c:	e000      	b.n	8015f10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d109      	bne.n	8015f2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f16:	8c3b      	ldrh	r3, [r7, #32]
 8015f18:	4619      	mov	r1, r3
 8015f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f1c:	f7ff fdb0 	bl	8015a80 <ip_reass_enqueue_new_datagram>
 8015f20:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d11c      	bne.n	8015f62 <ip4_reass+0x13e>
      goto nullreturn;
 8015f28:	e105      	b.n	8016136 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f2c:	88db      	ldrh	r3, [r3, #6]
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7f6 f989 	bl	800c248 <lwip_htons>
 8015f36:	4603      	mov	r3, r0
 8015f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d110      	bne.n	8015f62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f42:	89db      	ldrh	r3, [r3, #14]
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7f6 f97f 	bl	800c248 <lwip_htons>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d006      	beq.n	8015f62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f56:	3308      	adds	r3, #8
 8015f58:	2214      	movs	r2, #20
 8015f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f001 fc1b 	bl	8017798 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f64:	88db      	ldrh	r3, [r3, #6]
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	f003 0320 	and.w	r3, r3, #32
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	bf0c      	ite	eq
 8015f70:	2301      	moveq	r3, #1
 8015f72:	2300      	movne	r3, #0
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d00e      	beq.n	8015f9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f82:	4413      	add	r3, r2
 8015f84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015f86:	8b7a      	ldrh	r2, [r7, #26]
 8015f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	f0c0 80a0 	bcc.w	80160d0 <ip4_reass+0x2ac>
 8015f90:	8b7b      	ldrh	r3, [r7, #26]
 8015f92:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015f96:	4293      	cmp	r3, r2
 8015f98:	f200 809a 	bhi.w	80160d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015f9c:	69fa      	ldr	r2, [r7, #28]
 8015f9e:	6879      	ldr	r1, [r7, #4]
 8015fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fa2:	f7ff fdd5 	bl	8015b50 <ip_reass_chain_frag_into_datagram_and_validate>
 8015fa6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fae:	f000 809b 	beq.w	80160e8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015fb2:	4b48      	ldr	r3, [pc, #288]	; (80160d4 <ip4_reass+0x2b0>)
 8015fb4:	881a      	ldrh	r2, [r3, #0]
 8015fb6:	8c3b      	ldrh	r3, [r7, #32]
 8015fb8:	4413      	add	r3, r2
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	4b45      	ldr	r3, [pc, #276]	; (80160d4 <ip4_reass+0x2b0>)
 8015fbe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015fc0:	69fb      	ldr	r3, [r7, #28]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d00d      	beq.n	8015fe2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015fc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015fc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fca:	4413      	add	r3, r2
 8015fcc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd0:	8a7a      	ldrh	r2, [r7, #18]
 8015fd2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd6:	7f9b      	ldrb	r3, [r3, #30]
 8015fd8:	f043 0301 	orr.w	r3, r3, #1
 8015fdc:	b2da      	uxtb	r2, r3
 8015fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d171      	bne.n	80160cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fea:	8b9b      	ldrh	r3, [r3, #28]
 8015fec:	3314      	adds	r3, #20
 8015fee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffc:	685b      	ldr	r3, [r3, #4]
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	3308      	adds	r3, #8
 8016006:	2214      	movs	r2, #20
 8016008:	4619      	mov	r1, r3
 801600a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801600c:	f001 fbc4 	bl	8017798 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016010:	8a3b      	ldrh	r3, [r7, #16]
 8016012:	4618      	mov	r0, r3
 8016014:	f7f6 f918 	bl	800c248 <lwip_htons>
 8016018:	4603      	mov	r3, r0
 801601a:	461a      	mov	r2, r3
 801601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016022:	2200      	movs	r2, #0
 8016024:	719a      	strb	r2, [r3, #6]
 8016026:	2200      	movs	r2, #0
 8016028:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	2200      	movs	r2, #0
 801602e:	729a      	strb	r2, [r3, #10]
 8016030:	2200      	movs	r2, #0
 8016032:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016036:	685b      	ldr	r3, [r3, #4]
 8016038:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801603a:	e00d      	b.n	8016058 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016042:	2114      	movs	r1, #20
 8016044:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016046:	f7f7 fbd7 	bl	800d7f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801604a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f7f7 fd1b 	bl	800da88 <pbuf_cat>
      r = iprh->next_pbuf;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801605a:	2b00      	cmp	r3, #0
 801605c:	d1ee      	bne.n	801603c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801605e:	4b1e      	ldr	r3, [pc, #120]	; (80160d8 <ip4_reass+0x2b4>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016064:	429a      	cmp	r2, r3
 8016066:	d102      	bne.n	801606e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016068:	2300      	movs	r3, #0
 801606a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801606c:	e010      	b.n	8016090 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801606e:	4b1a      	ldr	r3, [pc, #104]	; (80160d8 <ip4_reass+0x2b4>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016074:	e007      	b.n	8016086 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801607c:	429a      	cmp	r2, r3
 801607e:	d006      	beq.n	801608e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016088:	2b00      	cmp	r3, #0
 801608a:	d1f4      	bne.n	8016076 <ip4_reass+0x252>
 801608c:	e000      	b.n	8016090 <ip4_reass+0x26c>
          break;
 801608e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016094:	f7ff fd2e 	bl	8015af4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7f7 fcbb 	bl	800da14 <pbuf_clen>
 801609e:	4603      	mov	r3, r0
 80160a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80160a2:	4b0c      	ldr	r3, [pc, #48]	; (80160d4 <ip4_reass+0x2b0>)
 80160a4:	881b      	ldrh	r3, [r3, #0]
 80160a6:	8c3a      	ldrh	r2, [r7, #32]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d906      	bls.n	80160ba <ip4_reass+0x296>
 80160ac:	4b0b      	ldr	r3, [pc, #44]	; (80160dc <ip4_reass+0x2b8>)
 80160ae:	f240 229b 	movw	r2, #667	; 0x29b
 80160b2:	490b      	ldr	r1, [pc, #44]	; (80160e0 <ip4_reass+0x2bc>)
 80160b4:	480b      	ldr	r0, [pc, #44]	; (80160e4 <ip4_reass+0x2c0>)
 80160b6:	f001 fb85 	bl	80177c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80160ba:	4b06      	ldr	r3, [pc, #24]	; (80160d4 <ip4_reass+0x2b0>)
 80160bc:	881a      	ldrh	r2, [r3, #0]
 80160be:	8c3b      	ldrh	r3, [r7, #32]
 80160c0:	1ad3      	subs	r3, r2, r3
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	4b03      	ldr	r3, [pc, #12]	; (80160d4 <ip4_reass+0x2b0>)
 80160c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	e038      	b.n	801613e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80160cc:	2300      	movs	r3, #0
 80160ce:	e036      	b.n	801613e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80160d0:	bf00      	nop
 80160d2:	e00a      	b.n	80160ea <ip4_reass+0x2c6>
 80160d4:	20008fc4 	.word	0x20008fc4
 80160d8:	20008fc0 	.word	0x20008fc0
 80160dc:	0801b08c 	.word	0x0801b08c
 80160e0:	0801b1fc 	.word	0x0801b1fc
 80160e4:	0801b0d4 	.word	0x0801b0d4
    goto nullreturn_ipr;
 80160e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d106      	bne.n	80160fe <ip4_reass+0x2da>
 80160f0:	4b15      	ldr	r3, [pc, #84]	; (8016148 <ip4_reass+0x324>)
 80160f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80160f6:	4915      	ldr	r1, [pc, #84]	; (801614c <ip4_reass+0x328>)
 80160f8:	4815      	ldr	r0, [pc, #84]	; (8016150 <ip4_reass+0x32c>)
 80160fa:	f001 fb63 	bl	80177c4 <iprintf>
  if (ipr->p == NULL) {
 80160fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d116      	bne.n	8016134 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016106:	4b13      	ldr	r3, [pc, #76]	; (8016154 <ip4_reass+0x330>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801610c:	429a      	cmp	r2, r3
 801610e:	d006      	beq.n	801611e <ip4_reass+0x2fa>
 8016110:	4b0d      	ldr	r3, [pc, #52]	; (8016148 <ip4_reass+0x324>)
 8016112:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016116:	4910      	ldr	r1, [pc, #64]	; (8016158 <ip4_reass+0x334>)
 8016118:	480d      	ldr	r0, [pc, #52]	; (8016150 <ip4_reass+0x32c>)
 801611a:	f001 fb53 	bl	80177c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801611e:	2100      	movs	r1, #0
 8016120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016122:	f7ff fce7 	bl	8015af4 <ip_reass_dequeue_datagram>
 8016126:	e006      	b.n	8016136 <ip4_reass+0x312>
    goto nullreturn;
 8016128:	bf00      	nop
 801612a:	e004      	b.n	8016136 <ip4_reass+0x312>
    goto nullreturn;
 801612c:	bf00      	nop
 801612e:	e002      	b.n	8016136 <ip4_reass+0x312>
      goto nullreturn;
 8016130:	bf00      	nop
 8016132:	e000      	b.n	8016136 <ip4_reass+0x312>
  }

nullreturn:
 8016134:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f7f7 fbe4 	bl	800d904 <pbuf_free>
  return NULL;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	3738      	adds	r7, #56	; 0x38
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	0801b08c 	.word	0x0801b08c
 801614c:	0801b218 	.word	0x0801b218
 8016150:	0801b0d4 	.word	0x0801b0d4
 8016154:	20008fc0 	.word	0x20008fc0
 8016158:	0801b224 	.word	0x0801b224

0801615c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016160:	2005      	movs	r0, #5
 8016162:	f7f6 fce9 	bl	800cb38 <memp_malloc>
 8016166:	4603      	mov	r3, r0
}
 8016168:	4618      	mov	r0, r3
 801616a:	bd80      	pop	{r7, pc}

0801616c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b082      	sub	sp, #8
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d106      	bne.n	8016188 <ip_frag_free_pbuf_custom_ref+0x1c>
 801617a:	4b07      	ldr	r3, [pc, #28]	; (8016198 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801617c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016180:	4906      	ldr	r1, [pc, #24]	; (801619c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016182:	4807      	ldr	r0, [pc, #28]	; (80161a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016184:	f001 fb1e 	bl	80177c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016188:	6879      	ldr	r1, [r7, #4]
 801618a:	2005      	movs	r0, #5
 801618c:	f7f6 fd44 	bl	800cc18 <memp_free>
}
 8016190:	bf00      	nop
 8016192:	3708      	adds	r7, #8
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}
 8016198:	0801b08c 	.word	0x0801b08c
 801619c:	0801b244 	.word	0x0801b244
 80161a0:	0801b0d4 	.word	0x0801b0d4

080161a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b084      	sub	sp, #16
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d106      	bne.n	80161c4 <ipfrag_free_pbuf_custom+0x20>
 80161b6:	4b11      	ldr	r3, [pc, #68]	; (80161fc <ipfrag_free_pbuf_custom+0x58>)
 80161b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80161bc:	4910      	ldr	r1, [pc, #64]	; (8016200 <ipfrag_free_pbuf_custom+0x5c>)
 80161be:	4811      	ldr	r0, [pc, #68]	; (8016204 <ipfrag_free_pbuf_custom+0x60>)
 80161c0:	f001 fb00 	bl	80177c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80161c4:	68fa      	ldr	r2, [r7, #12]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d006      	beq.n	80161da <ipfrag_free_pbuf_custom+0x36>
 80161cc:	4b0b      	ldr	r3, [pc, #44]	; (80161fc <ipfrag_free_pbuf_custom+0x58>)
 80161ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 80161d2:	490d      	ldr	r1, [pc, #52]	; (8016208 <ipfrag_free_pbuf_custom+0x64>)
 80161d4:	480b      	ldr	r0, [pc, #44]	; (8016204 <ipfrag_free_pbuf_custom+0x60>)
 80161d6:	f001 faf5 	bl	80177c4 <iprintf>
  if (pcr->original != NULL) {
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	695b      	ldr	r3, [r3, #20]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d004      	beq.n	80161ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	695b      	ldr	r3, [r3, #20]
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7f7 fb8c 	bl	800d904 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80161ec:	68f8      	ldr	r0, [r7, #12]
 80161ee:	f7ff ffbd 	bl	801616c <ip_frag_free_pbuf_custom_ref>
}
 80161f2:	bf00      	nop
 80161f4:	3710      	adds	r7, #16
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	0801b08c 	.word	0x0801b08c
 8016200:	0801b250 	.word	0x0801b250
 8016204:	0801b0d4 	.word	0x0801b0d4
 8016208:	0801b25c 	.word	0x0801b25c

0801620c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b094      	sub	sp, #80	; 0x50
 8016210:	af02      	add	r7, sp, #8
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016218:	2300      	movs	r3, #0
 801621a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016222:	3b14      	subs	r3, #20
 8016224:	2b00      	cmp	r3, #0
 8016226:	da00      	bge.n	801622a <ip4_frag+0x1e>
 8016228:	3307      	adds	r3, #7
 801622a:	10db      	asrs	r3, r3, #3
 801622c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801622e:	2314      	movs	r3, #20
 8016230:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	f003 030f 	and.w	r3, r3, #15
 8016244:	b2db      	uxtb	r3, r3
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b14      	cmp	r3, #20
 801624c:	d002      	beq.n	8016254 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801624e:	f06f 0305 	mvn.w	r3, #5
 8016252:	e110      	b.n	8016476 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	895b      	ldrh	r3, [r3, #10]
 8016258:	2b13      	cmp	r3, #19
 801625a:	d809      	bhi.n	8016270 <ip4_frag+0x64>
 801625c:	4b88      	ldr	r3, [pc, #544]	; (8016480 <ip4_frag+0x274>)
 801625e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016262:	4988      	ldr	r1, [pc, #544]	; (8016484 <ip4_frag+0x278>)
 8016264:	4888      	ldr	r0, [pc, #544]	; (8016488 <ip4_frag+0x27c>)
 8016266:	f001 faad 	bl	80177c4 <iprintf>
 801626a:	f06f 0305 	mvn.w	r3, #5
 801626e:	e102      	b.n	8016476 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016272:	88db      	ldrh	r3, [r3, #6]
 8016274:	b29b      	uxth	r3, r3
 8016276:	4618      	mov	r0, r3
 8016278:	f7f5 ffe6 	bl	800c248 <lwip_htons>
 801627c:	4603      	mov	r3, r0
 801627e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016282:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016286:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801628a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801628c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016290:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	891b      	ldrh	r3, [r3, #8]
 8016296:	3b14      	subs	r3, #20
 8016298:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801629c:	e0e1      	b.n	8016462 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801629e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162a0:	00db      	lsls	r3, r3, #3
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162a8:	4293      	cmp	r3, r2
 80162aa:	bf28      	it	cs
 80162ac:	4613      	movcs	r3, r2
 80162ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80162b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162b4:	2114      	movs	r1, #20
 80162b6:	200e      	movs	r0, #14
 80162b8:	f7f7 f840 	bl	800d33c <pbuf_alloc>
 80162bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80162be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 80d5 	beq.w	8016470 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80162c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c8:	895b      	ldrh	r3, [r3, #10]
 80162ca:	2b13      	cmp	r3, #19
 80162cc:	d806      	bhi.n	80162dc <ip4_frag+0xd0>
 80162ce:	4b6c      	ldr	r3, [pc, #432]	; (8016480 <ip4_frag+0x274>)
 80162d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80162d4:	496d      	ldr	r1, [pc, #436]	; (801648c <ip4_frag+0x280>)
 80162d6:	486c      	ldr	r0, [pc, #432]	; (8016488 <ip4_frag+0x27c>)
 80162d8:	f001 fa74 	bl	80177c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80162dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	2214      	movs	r2, #20
 80162e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80162e4:	4618      	mov	r0, r3
 80162e6:	f001 fa57 	bl	8017798 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80162ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80162f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80162f6:	e064      	b.n	80163c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	895a      	ldrh	r2, [r3, #10]
 80162fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	895b      	ldrh	r3, [r3, #10]
 8016306:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016308:	429a      	cmp	r2, r3
 801630a:	d906      	bls.n	801631a <ip4_frag+0x10e>
 801630c:	4b5c      	ldr	r3, [pc, #368]	; (8016480 <ip4_frag+0x274>)
 801630e:	f240 322d 	movw	r2, #813	; 0x32d
 8016312:	495f      	ldr	r1, [pc, #380]	; (8016490 <ip4_frag+0x284>)
 8016314:	485c      	ldr	r0, [pc, #368]	; (8016488 <ip4_frag+0x27c>)
 8016316:	f001 fa55 	bl	80177c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801631a:	8bfa      	ldrh	r2, [r7, #30]
 801631c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016320:	4293      	cmp	r3, r2
 8016322:	bf28      	it	cs
 8016324:	4613      	movcs	r3, r2
 8016326:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801632a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801632e:	2b00      	cmp	r3, #0
 8016330:	d105      	bne.n	801633e <ip4_frag+0x132>
        poff = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	60fb      	str	r3, [r7, #12]
        continue;
 801633c:	e041      	b.n	80163c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801633e:	f7ff ff0d 	bl	801615c <ip_frag_alloc_pbuf_custom_ref>
 8016342:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016344:	69bb      	ldr	r3, [r7, #24]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d103      	bne.n	8016352 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801634a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801634c:	f7f7 fada 	bl	800d904 <pbuf_free>
        goto memerr;
 8016350:	e08f      	b.n	8016472 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016352:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801635a:	4413      	add	r3, r2
 801635c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016360:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016364:	9201      	str	r2, [sp, #4]
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	4603      	mov	r3, r0
 801636a:	2241      	movs	r2, #65	; 0x41
 801636c:	2000      	movs	r0, #0
 801636e:	f7f7 f90f 	bl	800d590 <pbuf_alloced_custom>
 8016372:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d106      	bne.n	8016388 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801637a:	69b8      	ldr	r0, [r7, #24]
 801637c:	f7ff fef6 	bl	801616c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016382:	f7f7 fabf 	bl	800d904 <pbuf_free>
        goto memerr;
 8016386:	e074      	b.n	8016472 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	f7f7 fb5b 	bl	800da44 <pbuf_ref>
      pcr->original = p;
 801638e:	69bb      	ldr	r3, [r7, #24]
 8016390:	68fa      	ldr	r2, [r7, #12]
 8016392:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	4a3f      	ldr	r2, [pc, #252]	; (8016494 <ip4_frag+0x288>)
 8016398:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801639a:	6979      	ldr	r1, [r7, #20]
 801639c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801639e:	f7f7 fb73 	bl	800da88 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80163a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80163a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80163aa:	1ad3      	subs	r3, r2, r3
 80163ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80163b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d004      	beq.n	80163c2 <ip4_frag+0x1b6>
        poff = 0;
 80163b8:	2300      	movs	r3, #0
 80163ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80163c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d196      	bne.n	80162f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80163ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80163cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80163d0:	4413      	add	r3, r2
 80163d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163d8:	f1a3 0213 	sub.w	r2, r3, #19
 80163dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163e0:	429a      	cmp	r2, r3
 80163e2:	bfcc      	ite	gt
 80163e4:	2301      	movgt	r3, #1
 80163e6:	2300      	movle	r3, #0
 80163e8:	b2db      	uxtb	r3, r3
 80163ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80163ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80163f6:	6a3b      	ldr	r3, [r7, #32]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d002      	beq.n	8016402 <ip4_frag+0x1f6>
 80163fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d003      	beq.n	801640a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016402:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016408:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801640a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801640c:	4618      	mov	r0, r3
 801640e:	f7f5 ff1b 	bl	800c248 <lwip_htons>
 8016412:	4603      	mov	r3, r0
 8016414:	461a      	mov	r2, r3
 8016416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016418:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801641a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801641c:	3314      	adds	r3, #20
 801641e:	b29b      	uxth	r3, r3
 8016420:	4618      	mov	r0, r3
 8016422:	f7f5 ff11 	bl	800c248 <lwip_htons>
 8016426:	4603      	mov	r3, r0
 8016428:	461a      	mov	r2, r3
 801642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016430:	2200      	movs	r2, #0
 8016432:	729a      	strb	r2, [r3, #10]
 8016434:	2200      	movs	r2, #0
 8016436:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	695b      	ldr	r3, [r3, #20]
 801643c:	687a      	ldr	r2, [r7, #4]
 801643e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016440:	68b8      	ldr	r0, [r7, #8]
 8016442:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016446:	f7f7 fa5d 	bl	800d904 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801644a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801644e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016450:	1ad3      	subs	r3, r2, r3
 8016452:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016456:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801645a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801645c:	4413      	add	r3, r2
 801645e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016462:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016466:	2b00      	cmp	r3, #0
 8016468:	f47f af19 	bne.w	801629e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801646c:	2300      	movs	r3, #0
 801646e:	e002      	b.n	8016476 <ip4_frag+0x26a>
      goto memerr;
 8016470:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016476:	4618      	mov	r0, r3
 8016478:	3748      	adds	r7, #72	; 0x48
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	0801b08c 	.word	0x0801b08c
 8016484:	0801b268 	.word	0x0801b268
 8016488:	0801b0d4 	.word	0x0801b0d4
 801648c:	0801b284 	.word	0x0801b284
 8016490:	0801b2a4 	.word	0x0801b2a4
 8016494:	080161a5 	.word	0x080161a5

08016498 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b086      	sub	sp, #24
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80164a2:	230e      	movs	r3, #14
 80164a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	895b      	ldrh	r3, [r3, #10]
 80164aa:	2b0e      	cmp	r3, #14
 80164ac:	d96e      	bls.n	801658c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	7bdb      	ldrb	r3, [r3, #15]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d106      	bne.n	80164c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164bc:	3301      	adds	r3, #1
 80164be:	b2da      	uxtb	r2, r3
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	7b1a      	ldrb	r2, [r3, #12]
 80164ce:	7b5b      	ldrb	r3, [r3, #13]
 80164d0:	021b      	lsls	r3, r3, #8
 80164d2:	4313      	orrs	r3, r2
 80164d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	f003 0301 	and.w	r3, r3, #1
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d023      	beq.n	801652a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d10f      	bne.n	801650a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	785b      	ldrb	r3, [r3, #1]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d11b      	bne.n	801652a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80164f2:	693b      	ldr	r3, [r7, #16]
 80164f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164f6:	2b5e      	cmp	r3, #94	; 0x5e
 80164f8:	d117      	bne.n	801652a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	7b5b      	ldrb	r3, [r3, #13]
 80164fe:	f043 0310 	orr.w	r3, r3, #16
 8016502:	b2da      	uxtb	r2, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	735a      	strb	r2, [r3, #13]
 8016508:	e00f      	b.n	801652a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	2206      	movs	r2, #6
 801650e:	4928      	ldr	r1, [pc, #160]	; (80165b0 <ethernet_input+0x118>)
 8016510:	4618      	mov	r0, r3
 8016512:	f001 f931 	bl	8017778 <memcmp>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d106      	bne.n	801652a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	7b5b      	ldrb	r3, [r3, #13]
 8016520:	f043 0308 	orr.w	r3, r3, #8
 8016524:	b2da      	uxtb	r2, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801652a:	89fb      	ldrh	r3, [r7, #14]
 801652c:	2b08      	cmp	r3, #8
 801652e:	d003      	beq.n	8016538 <ethernet_input+0xa0>
 8016530:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016534:	d014      	beq.n	8016560 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016536:	e032      	b.n	801659e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801653e:	f003 0308 	and.w	r3, r3, #8
 8016542:	2b00      	cmp	r3, #0
 8016544:	d024      	beq.n	8016590 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016546:	8afb      	ldrh	r3, [r7, #22]
 8016548:	4619      	mov	r1, r3
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7f7 f954 	bl	800d7f8 <pbuf_remove_header>
 8016550:	4603      	mov	r3, r0
 8016552:	2b00      	cmp	r3, #0
 8016554:	d11e      	bne.n	8016594 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016556:	6839      	ldr	r1, [r7, #0]
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f7fe fe91 	bl	8015280 <ip4_input>
      break;
 801655e:	e013      	b.n	8016588 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016566:	f003 0308 	and.w	r3, r3, #8
 801656a:	2b00      	cmp	r3, #0
 801656c:	d014      	beq.n	8016598 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801656e:	8afb      	ldrh	r3, [r7, #22]
 8016570:	4619      	mov	r1, r3
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7f7 f940 	bl	800d7f8 <pbuf_remove_header>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d10e      	bne.n	801659c <ethernet_input+0x104>
        etharp_input(p, netif);
 801657e:	6839      	ldr	r1, [r7, #0]
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f7fe f831 	bl	80145e8 <etharp_input>
      break;
 8016586:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016588:	2300      	movs	r3, #0
 801658a:	e00c      	b.n	80165a6 <ethernet_input+0x10e>
    goto free_and_return;
 801658c:	bf00      	nop
 801658e:	e006      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 8016590:	bf00      	nop
 8016592:	e004      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 8016594:	bf00      	nop
 8016596:	e002      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 8016598:	bf00      	nop
 801659a:	e000      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 801659c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f7f7 f9b0 	bl	800d904 <pbuf_free>
  return ERR_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3718      	adds	r7, #24
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	0801b5f0 	.word	0x0801b5f0

080165b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	60b9      	str	r1, [r7, #8]
 80165be:	607a      	str	r2, [r7, #4]
 80165c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80165c2:	8c3b      	ldrh	r3, [r7, #32]
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7f5 fe3f 	bl	800c248 <lwip_htons>
 80165ca:	4603      	mov	r3, r0
 80165cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80165ce:	210e      	movs	r1, #14
 80165d0:	68b8      	ldr	r0, [r7, #8]
 80165d2:	f7f7 f901 	bl	800d7d8 <pbuf_add_header>
 80165d6:	4603      	mov	r3, r0
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d125      	bne.n	8016628 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	8afa      	ldrh	r2, [r7, #22]
 80165e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	2206      	movs	r2, #6
 80165ec:	6839      	ldr	r1, [r7, #0]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f001 f8d2 	bl	8017798 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	3306      	adds	r3, #6
 80165f8:	2206      	movs	r2, #6
 80165fa:	6879      	ldr	r1, [r7, #4]
 80165fc:	4618      	mov	r0, r3
 80165fe:	f001 f8cb 	bl	8017798 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016608:	2b06      	cmp	r3, #6
 801660a:	d006      	beq.n	801661a <ethernet_output+0x66>
 801660c:	4b0a      	ldr	r3, [pc, #40]	; (8016638 <ethernet_output+0x84>)
 801660e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016612:	490a      	ldr	r1, [pc, #40]	; (801663c <ethernet_output+0x88>)
 8016614:	480a      	ldr	r0, [pc, #40]	; (8016640 <ethernet_output+0x8c>)
 8016616:	f001 f8d5 	bl	80177c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	699b      	ldr	r3, [r3, #24]
 801661e:	68b9      	ldr	r1, [r7, #8]
 8016620:	68f8      	ldr	r0, [r7, #12]
 8016622:	4798      	blx	r3
 8016624:	4603      	mov	r3, r0
 8016626:	e002      	b.n	801662e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016628:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801662a:	f06f 0301 	mvn.w	r3, #1
}
 801662e:	4618      	mov	r0, r3
 8016630:	3718      	adds	r7, #24
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	0801b2b4 	.word	0x0801b2b4
 801663c:	0801b2ec 	.word	0x0801b2ec
 8016640:	0801b320 	.word	0x0801b320

08016644 <HAL_UART_RxCpltCallback>:

/**
  * @brief This function is called when *any* UART completes receiving X bytes.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
	if(huart==UART_5)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4a09      	ldr	r2, [pc, #36]	; (8016674 <HAL_UART_RxCpltCallback+0x30>)
 8016650:	4293      	cmp	r3, r2
 8016652:	d102      	bne.n	801665a <HAL_UART_RxCpltCallback+0x16>
		receivere_UART5_flag_RxCpltCallback = TRUE;
 8016654:	4b08      	ldr	r3, [pc, #32]	; (8016678 <HAL_UART_RxCpltCallback+0x34>)
 8016656:	2201      	movs	r2, #1
 8016658:	701a      	strb	r2, [r3, #0]
	if(huart==UART_4)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	4a07      	ldr	r2, [pc, #28]	; (801667c <HAL_UART_RxCpltCallback+0x38>)
 801665e:	4293      	cmp	r3, r2
 8016660:	d102      	bne.n	8016668 <HAL_UART_RxCpltCallback+0x24>
		receivere_UART4_flag_RxCpltCallback = TRUE;
 8016662:	4b07      	ldr	r3, [pc, #28]	; (8016680 <HAL_UART_RxCpltCallback+0x3c>)
 8016664:	2201      	movs	r2, #1
 8016666:	701a      	strb	r2, [r3, #0]
}
 8016668:	bf00      	nop
 801666a:	370c      	adds	r7, #12
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr
 8016674:	200007ec 	.word	0x200007ec
 8016678:	20008fc6 	.word	0x20008fc6
 801667c:	20000764 	.word	0x20000764
 8016680:	20008fc7 	.word	0x20008fc7

08016684 <HAL_I2C_SlaveRxCpltCallback>:

/**
  * @brief This function is called when Slave I2C completes receiving X bytes.
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8016684:	b480      	push	{r7}
 8016686:	b083      	sub	sp, #12
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
	flag_R_slave=TRUE;
 801668c:	4b04      	ldr	r3, [pc, #16]	; (80166a0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 801668e:	2201      	movs	r2, #1
 8016690:	701a      	strb	r2, [r3, #0]
}
 8016692:	bf00      	nop
 8016694:	370c      	adds	r7, #12
 8016696:	46bd      	mov	sp, r7
 8016698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669c:	4770      	bx	lr
 801669e:	bf00      	nop
 80166a0:	20008fc9 	.word	0x20008fc9

080166a4 <HAL_I2C_MasterRxCpltCallback>:

/**
  * @brief This function is called when Master I2C completes receiving X bytes.
  */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
	flag_R_Master=TRUE;
 80166ac:	4b04      	ldr	r3, [pc, #16]	; (80166c0 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 80166ae:	2201      	movs	r2, #1
 80166b0:	701a      	strb	r2, [r3, #0]

 }
 80166b2:	bf00      	nop
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr
 80166be:	bf00      	nop
 80166c0:	20008fc8 	.word	0x20008fc8

080166c4 <HAL_ADC_ConvCpltCallback>:

// ADC interrupt Callback (convert data finish)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80166c4:	b480      	push	{r7}
 80166c6:	b083      	sub	sp, #12
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
	flag_ADC_ConvCpltCallback = TRUE;
 80166cc:	4b04      	ldr	r3, [pc, #16]	; (80166e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80166ce:	2201      	movs	r2, #1
 80166d0:	701a      	strb	r2, [r3, #0]
}
 80166d2:	bf00      	nop
 80166d4:	370c      	adds	r7, #12
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr
 80166de:	bf00      	nop
 80166e0:	20008fca 	.word	0x20008fca

080166e4 <HAL_TIM_PeriodElapsedCallback>:


// == Timer Callback ======================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
	time_flag_PeriodElapsedCallback=TRUE;
 80166ec:	4b06      	ldr	r3, [pc, #24]	; (8016708 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80166ee:	2201      	movs	r2, #1
 80166f0:	701a      	strb	r2, [r3, #0]
	PeriodElapsedCallback_couter++;
 80166f2:	4b06      	ldr	r3, [pc, #24]	; (801670c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	3301      	adds	r3, #1
 80166f8:	4a04      	ldr	r2, [pc, #16]	; (801670c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80166fa:	6013      	str	r3, [r2, #0]

}
 80166fc:	bf00      	nop
 80166fe:	370c      	adds	r7, #12
 8016700:	46bd      	mov	sp, r7
 8016702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016706:	4770      	bx	lr
 8016708:	20008fcb 	.word	0x20008fcb
 801670c:	20008fcc 	.word	0x20008fcc

08016710 <udp_receive_callback>:
/**
  * @brief This function is called when udp receive Block.
  */
void udp_receive_callback(
		void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b086      	sub	sp, #24
 8016714:	af00      	add	r7, sp, #0
 8016716:	60f8      	str	r0, [r7, #12]
 8016718:	60b9      	str	r1, [r7, #8]
 801671a:	607a      	str	r2, [r7, #4]
 801671c:	603b      	str	r3, [r7, #0]
	flag_message_From_client=TRUE;
 801671e:	4b0e      	ldr	r3, [pc, #56]	; (8016758 <udp_receive_callback+0x48>)
 8016720:	2201      	movs	r2, #1
 8016722:	601a      	str	r2, [r3, #0]
	/* Get the IP of the Client */
	/* Get the IP of the Client */

	addr_global=addr;
 8016724:	4a0d      	ldr	r2, [pc, #52]	; (801675c <udp_receive_callback+0x4c>)
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	6013      	str	r3, [r2, #0]
    remoteIP_global = ipaddr_ntoa(addr);
 801672a:	6838      	ldr	r0, [r7, #0]
 801672c:	f7fe ffe6 	bl	80156fc <ip4addr_ntoa>
 8016730:	4603      	mov	r3, r0
 8016732:	4a0b      	ldr	r2, [pc, #44]	; (8016760 <udp_receive_callback+0x50>)
 8016734:	6013      	str	r3, [r2, #0]

	upcb_global=upcb;
 8016736:	4a0b      	ldr	r2, [pc, #44]	; (8016764 <udp_receive_callback+0x54>)
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	6013      	str	r3, [r2, #0]

	port_global=port;
 801673c:	4a0a      	ldr	r2, [pc, #40]	; (8016768 <udp_receive_callback+0x58>)
 801673e:	8c3b      	ldrh	r3, [r7, #32]
 8016740:	8013      	strh	r3, [r2, #0]
	p_global=p;
 8016742:	4a0a      	ldr	r2, [pc, #40]	; (801676c <udp_receive_callback+0x5c>)
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6013      	str	r3, [r2, #0]

	const int len =handleMessageFromClient(p);
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f000 f951 	bl	80169f0 <handleMessageFromClient>
 801674e:	6178      	str	r0, [r7, #20]
}
 8016750:	bf00      	nop
 8016752:	3718      	adds	r7, #24
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	20008fe8 	.word	0x20008fe8
 801675c:	20008fd0 	.word	0x20008fd0
 8016760:	20008fdc 	.word	0x20008fdc
 8016764:	20008fe4 	.word	0x20008fe4
 8016768:	20008fd4 	.word	0x20008fd4
 801676c:	20008fd8 	.word	0x20008fd8

08016770 <udpServer_init>:
void udpServer_init(void) {
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb* upcb = udp_new();
 8016776:	f7fd fbc7 	bl	8013f08 <udp_new>
 801677a:	4603      	mov	r3, r0
 801677c:	607b      	str	r3, [r7, #4]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 7 is the server UDP port
 801677e:	2207      	movs	r2, #7
 8016780:	490b      	ldr	r1, [pc, #44]	; (80167b0 <udpServer_init+0x40>)
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f7fd fa40 	bl	8013c08 <udp_bind>
 8016788:	4603      	mov	r3, r0
 801678a:	70fb      	strb	r3, [r7, #3]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 801678c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d105      	bne.n	80167a0 <udpServer_init+0x30>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8016794:	2200      	movs	r2, #0
 8016796:	4907      	ldr	r1, [pc, #28]	; (80167b4 <udpServer_init+0x44>)
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f7fd fb53 	bl	8013e44 <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 801679e:	e002      	b.n	80167a6 <udpServer_init+0x36>
	   udp_remove(upcb);
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7fd fb6f 	bl	8013e84 <udp_remove>
}
 80167a6:	bf00      	nop
 80167a8:	3708      	adds	r7, #8
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}
 80167ae:	bf00      	nop
 80167b0:	0801b5ec 	.word	0x0801b5ec
 80167b4:	08016711 	.word	0x08016711

080167b8 <rtg_main>:
 *	NETMASK: 	255.255.255.0 (or 0.0.0.0/24)
 *	GATEWAY: 	192.168.1.100 (not in use but required by IDE)
 *	Port:		7 (recommended 50,000+)
 */

void rtg_main()    {
 80167b8:	b580      	push	{r7, lr}
 80167ba:	af00      	add	r7, sp, #0
	printf("Start of program\n\r");
 80167bc:	4803      	ldr	r0, [pc, #12]	; (80167cc <rtg_main+0x14>)
 80167be:	f001 f801 	bl	80177c4 <iprintf>
	udpServer_init();					//UDP server initialization
 80167c2:	f7ff ffd5 	bl	8016770 <udpServer_init>
	while (1) {
		handle_reception_network();
 80167c6:	f000 fb8d 	bl	8016ee4 <handle_reception_network>
	while (1) {
 80167ca:	e7fc      	b.n	80167c6 <rtg_main+0xe>
 80167cc:	0801b348 	.word	0x0801b348

080167d0 <print_result_test>:
#include "RTG.h"

//print the result of the test
void print_result_test( result_test result){
 80167d0:	b084      	sub	sp, #16
 80167d2:	b580      	push	{r7, lr}
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	f107 0c08 	add.w	ip, r7, #8
 80167da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf("\r\n result -> %s \r\n", result.msg);
 80167de:	f107 0309 	add.w	r3, r7, #9
 80167e2:	4619      	mov	r1, r3
 80167e4:	4804      	ldr	r0, [pc, #16]	; (80167f8 <print_result_test+0x28>)
 80167e6:	f000 ffed 	bl	80177c4 <iprintf>
}
 80167ea:	bf00      	nop
 80167ec:	46bd      	mov	sp, r7
 80167ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80167f2:	b004      	add	sp, #16
 80167f4:	4770      	bx	lr
 80167f6:	bf00      	nop
 80167f8:	0801b35c 	.word	0x0801b35c

080167fc <check_data>:

// checking the to data is equals
uint8_t check_data(const char* data,const char* data_buff_receiver1,uint8_t lenght){
 80167fc:	b480      	push	{r7}
 80167fe:	b087      	sub	sp, #28
 8016800:	af00      	add	r7, sp, #0
 8016802:	60f8      	str	r0, [r7, #12]
 8016804:	60b9      	str	r1, [r7, #8]
 8016806:	4613      	mov	r3, r2
 8016808:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < lenght ;i++ )
 801680a:	2300      	movs	r3, #0
 801680c:	75fb      	strb	r3, [r7, #23]
 801680e:	e00e      	b.n	801682e <check_data+0x32>
	{
		if( *(data+i)!=*(data_buff_receiver1+i) )
 8016810:	7dfb      	ldrb	r3, [r7, #23]
 8016812:	68fa      	ldr	r2, [r7, #12]
 8016814:	4413      	add	r3, r2
 8016816:	781a      	ldrb	r2, [r3, #0]
 8016818:	7dfb      	ldrb	r3, [r7, #23]
 801681a:	68b9      	ldr	r1, [r7, #8]
 801681c:	440b      	add	r3, r1
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	429a      	cmp	r2, r3
 8016822:	d001      	beq.n	8016828 <check_data+0x2c>
			return FALSE;
 8016824:	2300      	movs	r3, #0
 8016826:	e007      	b.n	8016838 <check_data+0x3c>
	for (uint8_t i = 0; i < lenght ;i++ )
 8016828:	7dfb      	ldrb	r3, [r7, #23]
 801682a:	3301      	adds	r3, #1
 801682c:	75fb      	strb	r3, [r7, #23]
 801682e:	7dfa      	ldrb	r2, [r7, #23]
 8016830:	79fb      	ldrb	r3, [r7, #7]
 8016832:	429a      	cmp	r2, r3
 8016834:	d3ec      	bcc.n	8016810 <check_data+0x14>
	}

	return TRUE;
 8016836:	2301      	movs	r3, #1
}
 8016838:	4618      	mov	r0, r3
 801683a:	371c      	adds	r7, #28
 801683c:	46bd      	mov	sp, r7
 801683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016842:	4770      	bx	lr

08016844 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8016844:	b580      	push	{r7, lr}
 8016846:	b084      	sub	sp, #16
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	b29a      	uxth	r2, r3
 8016854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016858:	68b9      	ldr	r1, [r7, #8]
 801685a:	4804      	ldr	r0, [pc, #16]	; (801686c <_write+0x28>)
 801685c:	f7f3 f874 	bl	8009948 <HAL_UART_Transmit>
	return len;
 8016860:	687b      	ldr	r3, [r7, #4]
}
 8016862:	4618      	mov	r0, r3
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	20000874 	.word	0x20000874

08016870 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8016876:	2300      	movs	r3, #0
 8016878:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 801687a:	1df9      	adds	r1, r7, #7
 801687c:	f04f 33ff 	mov.w	r3, #4294967295
 8016880:	2201      	movs	r2, #1
 8016882:	4807      	ldr	r0, [pc, #28]	; (80168a0 <__io_getchar+0x30>)
 8016884:	f7f3 f8e3 	bl	8009a4e <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8016888:	1df9      	adds	r1, r7, #7
 801688a:	f04f 33ff 	mov.w	r3, #4294967295
 801688e:	2201      	movs	r2, #1
 8016890:	4803      	ldr	r0, [pc, #12]	; (80168a0 <__io_getchar+0x30>)
 8016892:	f7f3 f859 	bl	8009948 <HAL_UART_Transmit>
	return ch;
 8016896:	79fb      	ldrb	r3, [r7, #7]
}
 8016898:	4618      	mov	r0, r3
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	20000874 	.word	0x20000874

080168a4 <_read>:

int _read(int file, char *ptr, int len) {
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b088      	sub	sp, #32
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	60b9      	str	r1, [r7, #8]
 80168ae:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 80168b0:	2300      	movs	r3, #0
 80168b2:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = 0;
 80168b4:	2300      	movs	r3, #0
 80168b6:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 80168b8:	e016      	b.n	80168e8 <_read+0x44>
		ch = __io_getchar();
 80168ba:	f7ff ffd9 	bl	8016870 <__io_getchar>
 80168be:	4603      	mov	r3, r0
 80168c0:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	7dfa      	ldrb	r2, [r7, #23]
 80168c6:	701a      	strb	r2, [r3, #0]
		ptr++;
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	3301      	adds	r3, #1
 80168cc:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 80168ce:	7dfb      	ldrb	r3, [r7, #23]
 80168d0:	2b0d      	cmp	r3, #13
 80168d2:	d002      	beq.n	80168da <_read+0x36>
 80168d4:	7dfb      	ldrb	r3, [r7, #23]
 80168d6:	2b0a      	cmp	r3, #10
 80168d8:	d103      	bne.n	80168e2 <_read+0x3e>
			*(ptr) = 0;
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	2200      	movs	r2, #0
 80168de:	701a      	strb	r2, [r3, #0]
			break;
 80168e0:	e006      	b.n	80168f0 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	3301      	adds	r3, #1
 80168e6:	61fb      	str	r3, [r7, #28]
 80168e8:	69fa      	ldr	r2, [r7, #28]
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	429a      	cmp	r2, r3
 80168ee:	dbe4      	blt.n	80168ba <_read+0x16>
		}
	}
	return DataIdx + 1;
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	3301      	adds	r3, #1
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3720      	adds	r7, #32
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <send_to_cient>:

my_message receive_client_message;

//send the result to client
void send_to_cient(my_message receive_client_message )
{
 80168fc:	b084      	sub	sp, #16
 80168fe:	b580      	push	{r7, lr}
 8016900:	b09c      	sub	sp, #112	; 0x70
 8016902:	af00      	add	r7, sp, #0
 8016904:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 8016908:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	/* copy the data into the buffer  */
	char buf[100];
	uint8_t id;
	printf("\r\n send data... \r\n");
 801690c:	4831      	ldr	r0, [pc, #196]	; (80169d4 <send_to_cient+0xd8>)
 801690e:	f000 ffdf 	bl	80178d0 <puts>
	buf[my_message_id_index]=receive_client_message.id;
 8016912:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8016916:	713b      	strb	r3, [r7, #4]
	buf[my_message_Peripheral_index]=receive_client_message.Peripheral;
 8016918:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 801691c:	717b      	strb	r3, [r7, #5]
	buf[my_message_Iterations_index]=receive_client_message.Iterations;
 801691e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8016922:	71bb      	strb	r3, [r7, #6]
	buf[my_message_length_index]=receive_client_message.length;
 8016924:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8016928:	71fb      	strb	r3, [r7, #7]
	for (int i= 0,j=my_message_msg_index; i <= receive_client_message.length; i++)
 801692a:	2300      	movs	r3, #0
 801692c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801692e:	2304      	movs	r3, #4
 8016930:	66bb      	str	r3, [r7, #104]	; 0x68
 8016932:	e00e      	b.n	8016952 <send_to_cient+0x56>
	{
		buf[j++]=receive_client_message.msg[i];
 8016934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016936:	1c5a      	adds	r2, r3, #1
 8016938:	66ba      	str	r2, [r7, #104]	; 0x68
 801693a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801693e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016940:	440a      	add	r2, r1
 8016942:	7812      	ldrb	r2, [r2, #0]
 8016944:	3370      	adds	r3, #112	; 0x70
 8016946:	443b      	add	r3, r7
 8016948:	f803 2c6c 	strb.w	r2, [r3, #-108]
	for (int i= 0,j=my_message_msg_index; i <= receive_client_message.length; i++)
 801694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801694e:	3301      	adds	r3, #1
 8016950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016952:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8016956:	461a      	mov	r2, r3
 8016958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801695a:	4293      	cmp	r3, r2
 801695c:	ddea      	ble.n	8016934 <send_to_cient+0x38>
	}

	addr_global->addr=ADDR_;
 801695e:	4b1e      	ldr	r3, [pc, #120]	; (80169d8 <send_to_cient+0xdc>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	4a1e      	ldr	r2, [pc, #120]	; (80169dc <send_to_cient+0xe0>)
 8016964:	601a      	str	r2, [r3, #0]


	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,14, PBUF_RAM);
 8016966:	f44f 7220 	mov.w	r2, #640	; 0x280
 801696a:	210e      	movs	r1, #14
 801696c:	2036      	movs	r0, #54	; 0x36
 801696e:	f7f6 fce5 	bl	800d33c <pbuf_alloc>
 8016972:	4603      	mov	r3, r0
 8016974:	4a1a      	ldr	r2, [pc, #104]	; (80169e0 <send_to_cient+0xe4>)
 8016976:	6013      	str	r3, [r2, #0]
	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, 14);
 8016978:	4b19      	ldr	r3, [pc, #100]	; (80169e0 <send_to_cient+0xe4>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	1d39      	adds	r1, r7, #4
 801697e:	220e      	movs	r2, #14
 8016980:	4618      	mov	r0, r3
 8016982:	f7f7 fa2b 	bl	800dddc <pbuf_take>
	/* Connect to the remote client */
	udp_connect(upcb_global, addr_global, port_global);
 8016986:	4b17      	ldr	r3, [pc, #92]	; (80169e4 <send_to_cient+0xe8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	4a13      	ldr	r2, [pc, #76]	; (80169d8 <send_to_cient+0xdc>)
 801698c:	6811      	ldr	r1, [r2, #0]
 801698e:	4a16      	ldr	r2, [pc, #88]	; (80169e8 <send_to_cient+0xec>)
 8016990:	8812      	ldrh	r2, [r2, #0]
 8016992:	4618      	mov	r0, r3
 8016994:	f7fd f9c0 	bl	8013d18 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb_global, txBuf);
 8016998:	4b12      	ldr	r3, [pc, #72]	; (80169e4 <send_to_cient+0xe8>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4a10      	ldr	r2, [pc, #64]	; (80169e0 <send_to_cient+0xe4>)
 801699e:	6812      	ldr	r2, [r2, #0]
 80169a0:	4611      	mov	r1, r2
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7fc ff46 	bl	8013834 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb_global);
 80169a8:	4b0e      	ldr	r3, [pc, #56]	; (80169e4 <send_to_cient+0xe8>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	4618      	mov	r0, r3
 80169ae:	f7fd fa21 	bl	8013df4 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 80169b2:	4b0b      	ldr	r3, [pc, #44]	; (80169e0 <send_to_cient+0xe4>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7f6 ffa4 	bl	800d904 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p_global);
 80169bc:	4b0b      	ldr	r3, [pc, #44]	; (80169ec <send_to_cient+0xf0>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	4618      	mov	r0, r3
 80169c2:	f7f6 ff9f 	bl	800d904 <pbuf_free>
}
 80169c6:	bf00      	nop
 80169c8:	3770      	adds	r7, #112	; 0x70
 80169ca:	46bd      	mov	sp, r7
 80169cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80169d0:	b004      	add	sp, #16
 80169d2:	4770      	bx	lr
 80169d4:	0801b370 	.word	0x0801b370
 80169d8:	20008fd0 	.word	0x20008fd0
 80169dc:	0101a8c0 	.word	0x0101a8c0
 80169e0:	20008fe0 	.word	0x20008fe0
 80169e4:	20008fe4 	.word	0x20008fe4
 80169e8:	20008fd4 	.word	0x20008fd4
 80169ec:	20008fd8 	.word	0x20008fd8

080169f0 <handleMessageFromClient>:

// handle Message From Client
int handleMessageFromClient(struct pbuf *p)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
	receive_client_message.id= *(uint8_t *)(p->payload + my_message_id_index);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	685b      	ldr	r3, [r3, #4]
 80169fc:	781a      	ldrb	r2, [r3, #0]
 80169fe:	4b10      	ldr	r3, [pc, #64]	; (8016a40 <handleMessageFromClient+0x50>)
 8016a00:	701a      	strb	r2, [r3, #0]
	receive_client_message.Peripheral= *(uint8_t *)(p->payload + my_message_Peripheral_index);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	785a      	ldrb	r2, [r3, #1]
 8016a08:	4b0d      	ldr	r3, [pc, #52]	; (8016a40 <handleMessageFromClient+0x50>)
 8016a0a:	705a      	strb	r2, [r3, #1]
	receive_client_message.Iterations= *(uint8_t *)(p->payload + my_message_Iterations_index);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	685b      	ldr	r3, [r3, #4]
 8016a10:	789a      	ldrb	r2, [r3, #2]
 8016a12:	4b0b      	ldr	r3, [pc, #44]	; (8016a40 <handleMessageFromClient+0x50>)
 8016a14:	709a      	strb	r2, [r3, #2]
	receive_client_message.length= *(uint8_t *)(p->payload + my_message_length_index);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	685b      	ldr	r3, [r3, #4]
 8016a1a:	78da      	ldrb	r2, [r3, #3]
 8016a1c:	4b08      	ldr	r3, [pc, #32]	; (8016a40 <handleMessageFromClient+0x50>)
 8016a1e:	70da      	strb	r2, [r3, #3]
	// save into buffer
	memcpy(receive_client_message.msg , (p->payload + my_message_msg_index),  receive_client_message.length);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	3304      	adds	r3, #4
 8016a26:	4a06      	ldr	r2, [pc, #24]	; (8016a40 <handleMessageFromClient+0x50>)
 8016a28:	78d2      	ldrb	r2, [r2, #3]
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	4805      	ldr	r0, [pc, #20]	; (8016a44 <handleMessageFromClient+0x54>)
 8016a2e:	f000 feb3 	bl	8017798 <memcpy>

	return my_message_msg_index+receive_client_message.length;
 8016a32:	4b03      	ldr	r3, [pc, #12]	; (8016a40 <handleMessageFromClient+0x50>)
 8016a34:	78db      	ldrb	r3, [r3, #3]
 8016a36:	3304      	adds	r3, #4
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	20009020 	.word	0x20009020
 8016a44:	20009024 	.word	0x20009024

08016a48 <run_client_test>:

//run the correct test
result_test  run_client_test(my_message receive_client_message)
{
 8016a48:	b084      	sub	sp, #16
 8016a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a4c:	b09d      	sub	sp, #116	; 0x74
 8016a4e:	af0a      	add	r7, sp, #40	; 0x28
 8016a50:	6078      	str	r0, [r7, #4]
 8016a52:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8016a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	result_test result={FALSE,"ERROR"};
 8016a5a:	4bc8      	ldr	r3, [pc, #800]	; (8016d7c <run_client_test+0x334>)
 8016a5c:	f107 040c 	add.w	r4, r7, #12
 8016a60:	461d      	mov	r5, r3
 8016a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a6e:	682b      	ldr	r3, [r5, #0]
 8016a70:	461a      	mov	r2, r3
 8016a72:	8022      	strh	r2, [r4, #0]
 8016a74:	3402      	adds	r4, #2
 8016a76:	0c1b      	lsrs	r3, r3, #16
 8016a78:	7023      	strb	r3, [r4, #0]
	uint8_t iteration=receive_client_message.Iterations;
 8016a7a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016a7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	switch(receive_client_message.Peripheral)
 8016a82:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016a86:	3b01      	subs	r3, #1
 8016a88:	2b0f      	cmp	r3, #15
 8016a8a:	f200 820a 	bhi.w	8016ea2 <run_client_test+0x45a>
 8016a8e:	a201      	add	r2, pc, #4	; (adr r2, 8016a94 <run_client_test+0x4c>)
 8016a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a94:	08016ded 	.word	0x08016ded
 8016a98:	08016ad5 	.word	0x08016ad5
 8016a9c:	08016ea3 	.word	0x08016ea3
 8016aa0:	08016c69 	.word	0x08016c69
 8016aa4:	08016ea3 	.word	0x08016ea3
 8016aa8:	08016ea3 	.word	0x08016ea3
 8016aac:	08016ea3 	.word	0x08016ea3
 8016ab0:	08016b9f 	.word	0x08016b9f
 8016ab4:	08016ea3 	.word	0x08016ea3
 8016ab8:	08016ea3 	.word	0x08016ea3
 8016abc:	08016ea3 	.word	0x08016ea3
 8016ac0:	08016ea3 	.word	0x08016ea3
 8016ac4:	08016ea3 	.word	0x08016ea3
 8016ac8:	08016ea3 	.word	0x08016ea3
 8016acc:	08016ea3 	.word	0x08016ea3
 8016ad0:	08016d33 	.word	0x08016d33
  	{
	int result1 ;
  		case TEST_UART:
  			for (uint8_t i = 0; i < iteration ; i++)
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016ada:	e02f      	b.n	8016b3c <run_client_test+0xf4>
  			{
  				UART_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 8016adc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016ae6:	461c      	mov	r4, r3
 8016ae8:	f107 020c 	add.w	r2, r7, #12
 8016aec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016af0:	1d18      	adds	r0, r3, #4
 8016af2:	4613      	mov	r3, r2
 8016af4:	4622      	mov	r2, r4
 8016af6:	f000 fdb1 	bl	801765c <UART_tests>
  				if(result.bool_test ==FALSE )
 8016afa:	7b3b      	ldrb	r3, [r7, #12]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d118      	bne.n	8016b32 <run_client_test+0xea>
  					return result;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f107 040c 	add.w	r4, r7, #12
 8016b06:	469c      	mov	ip, r3
 8016b08:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016b0c:	4665      	mov	r5, ip
 8016b0e:	4626      	mov	r6, r4
 8016b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016b12:	6028      	str	r0, [r5, #0]
 8016b14:	6069      	str	r1, [r5, #4]
 8016b16:	60aa      	str	r2, [r5, #8]
 8016b18:	60eb      	str	r3, [r5, #12]
 8016b1a:	3410      	adds	r4, #16
 8016b1c:	f10c 0c10 	add.w	ip, ip, #16
 8016b20:	4574      	cmp	r4, lr
 8016b22:	d1f3      	bne.n	8016b0c <run_client_test+0xc4>
 8016b24:	4663      	mov	r3, ip
 8016b26:	4622      	mov	r2, r4
 8016b28:	8811      	ldrh	r1, [r2, #0]
 8016b2a:	7892      	ldrb	r2, [r2, #2]
 8016b2c:	8019      	strh	r1, [r3, #0]
 8016b2e:	709a      	strb	r2, [r3, #2]
 8016b30:	e1d0      	b.n	8016ed4 <run_client_test+0x48c>
  			for (uint8_t i = 0; i < iteration ; i++)
 8016b32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016b36:	3301      	adds	r3, #1
 8016b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016b3c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8016b40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d3c9      	bcc.n	8016adc <run_client_test+0x94>
  			}
  			print_result_test(result);
 8016b48:	466c      	mov	r4, sp
 8016b4a:	f107 051c 	add.w	r5, r7, #28
 8016b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b56:	682b      	ldr	r3, [r5, #0]
 8016b58:	461a      	mov	r2, r3
 8016b5a:	8022      	strh	r2, [r4, #0]
 8016b5c:	3402      	adds	r4, #2
 8016b5e:	0c1b      	lsrs	r3, r3, #16
 8016b60:	7023      	strb	r3, [r4, #0]
 8016b62:	f107 030c 	add.w	r3, r7, #12
 8016b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b68:	f7ff fe32 	bl	80167d0 <print_result_test>
  			return result;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f107 040c 	add.w	r4, r7, #12
 8016b72:	469c      	mov	ip, r3
 8016b74:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016b78:	4665      	mov	r5, ip
 8016b7a:	4626      	mov	r6, r4
 8016b7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016b7e:	6028      	str	r0, [r5, #0]
 8016b80:	6069      	str	r1, [r5, #4]
 8016b82:	60aa      	str	r2, [r5, #8]
 8016b84:	60eb      	str	r3, [r5, #12]
 8016b86:	3410      	adds	r4, #16
 8016b88:	f10c 0c10 	add.w	ip, ip, #16
 8016b8c:	4574      	cmp	r4, lr
 8016b8e:	d1f3      	bne.n	8016b78 <run_client_test+0x130>
 8016b90:	4663      	mov	r3, ip
 8016b92:	4622      	mov	r2, r4
 8016b94:	8811      	ldrh	r1, [r2, #0]
 8016b96:	7892      	ldrb	r2, [r2, #2]
 8016b98:	8019      	strh	r1, [r3, #0]
 8016b9a:	709a      	strb	r2, [r3, #2]
 8016b9c:	e19a      	b.n	8016ed4 <run_client_test+0x48c>


  		case TEST_I2C:

  			for (uint8_t i = 0; i < iteration ; i++)
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8016ba4:	e02f      	b.n	8016c06 <run_client_test+0x1be>
  			{
  				I2C_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 8016ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016baa:	4619      	mov	r1, r3
 8016bac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016bb0:	461c      	mov	r4, r3
 8016bb2:	f107 020c 	add.w	r2, r7, #12
 8016bb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016bba:	1d18      	adds	r0, r3, #4
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	4622      	mov	r2, r4
 8016bc0:	f000 fb70 	bl	80172a4 <I2C_tests>
  			  	if(result.bool_test ==FALSE )
 8016bc4:	7b3b      	ldrb	r3, [r7, #12]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d118      	bne.n	8016bfc <run_client_test+0x1b4>
  			  		return result;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f107 040c 	add.w	r4, r7, #12
 8016bd0:	469c      	mov	ip, r3
 8016bd2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016bd6:	4665      	mov	r5, ip
 8016bd8:	4626      	mov	r6, r4
 8016bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016bdc:	6028      	str	r0, [r5, #0]
 8016bde:	6069      	str	r1, [r5, #4]
 8016be0:	60aa      	str	r2, [r5, #8]
 8016be2:	60eb      	str	r3, [r5, #12]
 8016be4:	3410      	adds	r4, #16
 8016be6:	f10c 0c10 	add.w	ip, ip, #16
 8016bea:	4574      	cmp	r4, lr
 8016bec:	d1f3      	bne.n	8016bd6 <run_client_test+0x18e>
 8016bee:	4663      	mov	r3, ip
 8016bf0:	4622      	mov	r2, r4
 8016bf2:	8811      	ldrh	r1, [r2, #0]
 8016bf4:	7892      	ldrb	r2, [r2, #2]
 8016bf6:	8019      	strh	r1, [r3, #0]
 8016bf8:	709a      	strb	r2, [r3, #2]
 8016bfa:	e16b      	b.n	8016ed4 <run_client_test+0x48c>
  			for (uint8_t i = 0; i < iteration ; i++)
 8016bfc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016c00:	3301      	adds	r3, #1
 8016c02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8016c06:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016c0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d3c9      	bcc.n	8016ba6 <run_client_test+0x15e>
  			}
  			print_result_test(result);
 8016c12:	466c      	mov	r4, sp
 8016c14:	f107 051c 	add.w	r5, r7, #28
 8016c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016c20:	682b      	ldr	r3, [r5, #0]
 8016c22:	461a      	mov	r2, r3
 8016c24:	8022      	strh	r2, [r4, #0]
 8016c26:	3402      	adds	r4, #2
 8016c28:	0c1b      	lsrs	r3, r3, #16
 8016c2a:	7023      	strb	r3, [r4, #0]
 8016c2c:	f107 030c 	add.w	r3, r7, #12
 8016c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c32:	f7ff fdcd 	bl	80167d0 <print_result_test>
  			return result;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f107 040c 	add.w	r4, r7, #12
 8016c3c:	469c      	mov	ip, r3
 8016c3e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016c42:	4665      	mov	r5, ip
 8016c44:	4626      	mov	r6, r4
 8016c46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016c48:	6028      	str	r0, [r5, #0]
 8016c4a:	6069      	str	r1, [r5, #4]
 8016c4c:	60aa      	str	r2, [r5, #8]
 8016c4e:	60eb      	str	r3, [r5, #12]
 8016c50:	3410      	adds	r4, #16
 8016c52:	f10c 0c10 	add.w	ip, ip, #16
 8016c56:	4574      	cmp	r4, lr
 8016c58:	d1f3      	bne.n	8016c42 <run_client_test+0x1fa>
 8016c5a:	4663      	mov	r3, ip
 8016c5c:	4622      	mov	r2, r4
 8016c5e:	8811      	ldrh	r1, [r2, #0]
 8016c60:	7892      	ldrb	r2, [r2, #2]
 8016c62:	8019      	strh	r1, [r3, #0]
 8016c64:	709a      	strb	r2, [r3, #2]
 8016c66:	e135      	b.n	8016ed4 <run_client_test+0x48c>

  		case TEST_SPI:

  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016c6e:	e02f      	b.n	8016cd0 <run_client_test+0x288>
  		  	{
  		  		SPI_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 8016c70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c74:	4619      	mov	r1, r3
 8016c76:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016c7a:	461c      	mov	r4, r3
 8016c7c:	f107 020c 	add.w	r2, r7, #12
 8016c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016c84:	1d18      	adds	r0, r3, #4
 8016c86:	4613      	mov	r3, r2
 8016c88:	4622      	mov	r2, r4
 8016c8a:	f000 fbad 	bl	80173e8 <SPI_tests>
  		  		if(result.bool_test ==FALSE )
 8016c8e:	7b3b      	ldrb	r3, [r7, #12]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d118      	bne.n	8016cc6 <run_client_test+0x27e>
  		  		return result;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f107 040c 	add.w	r4, r7, #12
 8016c9a:	469c      	mov	ip, r3
 8016c9c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016ca0:	4665      	mov	r5, ip
 8016ca2:	4626      	mov	r6, r4
 8016ca4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016ca6:	6028      	str	r0, [r5, #0]
 8016ca8:	6069      	str	r1, [r5, #4]
 8016caa:	60aa      	str	r2, [r5, #8]
 8016cac:	60eb      	str	r3, [r5, #12]
 8016cae:	3410      	adds	r4, #16
 8016cb0:	f10c 0c10 	add.w	ip, ip, #16
 8016cb4:	4574      	cmp	r4, lr
 8016cb6:	d1f3      	bne.n	8016ca0 <run_client_test+0x258>
 8016cb8:	4663      	mov	r3, ip
 8016cba:	4622      	mov	r2, r4
 8016cbc:	8811      	ldrh	r1, [r2, #0]
 8016cbe:	7892      	ldrb	r2, [r2, #2]
 8016cc0:	8019      	strh	r1, [r3, #0]
 8016cc2:	709a      	strb	r2, [r3, #2]
 8016cc4:	e106      	b.n	8016ed4 <run_client_test+0x48c>
  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016cc6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016cca:	3301      	adds	r3, #1
 8016ccc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016cd0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016cd4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	d3c9      	bcc.n	8016c70 <run_client_test+0x228>
  		  	}
  		  	print_result_test(result);
 8016cdc:	466c      	mov	r4, sp
 8016cde:	f107 051c 	add.w	r5, r7, #28
 8016ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cea:	682b      	ldr	r3, [r5, #0]
 8016cec:	461a      	mov	r2, r3
 8016cee:	8022      	strh	r2, [r4, #0]
 8016cf0:	3402      	adds	r4, #2
 8016cf2:	0c1b      	lsrs	r3, r3, #16
 8016cf4:	7023      	strb	r3, [r4, #0]
 8016cf6:	f107 030c 	add.w	r3, r7, #12
 8016cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016cfc:	f7ff fd68 	bl	80167d0 <print_result_test>
  		  	return result;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f107 040c 	add.w	r4, r7, #12
 8016d06:	469c      	mov	ip, r3
 8016d08:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016d0c:	4665      	mov	r5, ip
 8016d0e:	4626      	mov	r6, r4
 8016d10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016d12:	6028      	str	r0, [r5, #0]
 8016d14:	6069      	str	r1, [r5, #4]
 8016d16:	60aa      	str	r2, [r5, #8]
 8016d18:	60eb      	str	r3, [r5, #12]
 8016d1a:	3410      	adds	r4, #16
 8016d1c:	f10c 0c10 	add.w	ip, ip, #16
 8016d20:	4574      	cmp	r4, lr
 8016d22:	d1f3      	bne.n	8016d0c <run_client_test+0x2c4>
 8016d24:	4663      	mov	r3, ip
 8016d26:	4622      	mov	r2, r4
 8016d28:	8811      	ldrh	r1, [r2, #0]
 8016d2a:	7892      	ldrb	r2, [r2, #2]
 8016d2c:	8019      	strh	r1, [r3, #0]
 8016d2e:	709a      	strb	r2, [r3, #2]
 8016d30:	e0d0      	b.n	8016ed4 <run_client_test+0x48c>

  		case TEST_ADC:
  			for (uint8_t i = 0; i < iteration ; i++)
 8016d32:	2300      	movs	r3, #0
 8016d34:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8016d38:	e027      	b.n	8016d8a <run_client_test+0x342>
  			{
  				ADC_tests(&result);
 8016d3a:	f107 030c 	add.w	r3, r7, #12
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f000 f990 	bl	8017064 <ADC_tests>
  			  	if(result.bool_test ==FALSE )
 8016d44:	7b3b      	ldrb	r3, [r7, #12]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d11a      	bne.n	8016d80 <run_client_test+0x338>
  			  		return result;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f107 040c 	add.w	r4, r7, #12
 8016d50:	469c      	mov	ip, r3
 8016d52:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016d56:	4665      	mov	r5, ip
 8016d58:	4626      	mov	r6, r4
 8016d5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016d5c:	6028      	str	r0, [r5, #0]
 8016d5e:	6069      	str	r1, [r5, #4]
 8016d60:	60aa      	str	r2, [r5, #8]
 8016d62:	60eb      	str	r3, [r5, #12]
 8016d64:	3410      	adds	r4, #16
 8016d66:	f10c 0c10 	add.w	ip, ip, #16
 8016d6a:	4574      	cmp	r4, lr
 8016d6c:	d1f3      	bne.n	8016d56 <run_client_test+0x30e>
 8016d6e:	4663      	mov	r3, ip
 8016d70:	4622      	mov	r2, r4
 8016d72:	8811      	ldrh	r1, [r2, #0]
 8016d74:	7892      	ldrb	r2, [r2, #2]
 8016d76:	8019      	strh	r1, [r3, #0]
 8016d78:	709a      	strb	r2, [r3, #2]
 8016d7a:	e0ab      	b.n	8016ed4 <run_client_test+0x48c>
 8016d7c:	0801b384 	.word	0x0801b384
  			for (uint8_t i = 0; i < iteration ; i++)
 8016d80:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016d84:	3301      	adds	r3, #1
 8016d86:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8016d8a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016d8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d3d1      	bcc.n	8016d3a <run_client_test+0x2f2>
  			}
  			 print_result_test(result);
 8016d96:	466c      	mov	r4, sp
 8016d98:	f107 051c 	add.w	r5, r7, #28
 8016d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016da4:	682b      	ldr	r3, [r5, #0]
 8016da6:	461a      	mov	r2, r3
 8016da8:	8022      	strh	r2, [r4, #0]
 8016daa:	3402      	adds	r4, #2
 8016dac:	0c1b      	lsrs	r3, r3, #16
 8016dae:	7023      	strb	r3, [r4, #0]
 8016db0:	f107 030c 	add.w	r3, r7, #12
 8016db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016db6:	f7ff fd0b 	bl	80167d0 <print_result_test>
  			 return result;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f107 040c 	add.w	r4, r7, #12
 8016dc0:	469c      	mov	ip, r3
 8016dc2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016dc6:	4665      	mov	r5, ip
 8016dc8:	4626      	mov	r6, r4
 8016dca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016dcc:	6028      	str	r0, [r5, #0]
 8016dce:	6069      	str	r1, [r5, #4]
 8016dd0:	60aa      	str	r2, [r5, #8]
 8016dd2:	60eb      	str	r3, [r5, #12]
 8016dd4:	3410      	adds	r4, #16
 8016dd6:	f10c 0c10 	add.w	ip, ip, #16
 8016dda:	4574      	cmp	r4, lr
 8016ddc:	d1f3      	bne.n	8016dc6 <run_client_test+0x37e>
 8016dde:	4663      	mov	r3, ip
 8016de0:	4622      	mov	r2, r4
 8016de2:	8811      	ldrh	r1, [r2, #0]
 8016de4:	7892      	ldrb	r2, [r2, #2]
 8016de6:	8019      	strh	r1, [r3, #0]
 8016de8:	709a      	strb	r2, [r3, #2]
 8016dea:	e073      	b.n	8016ed4 <run_client_test+0x48c>

  		case Test_TIMER:

  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016dec:	2300      	movs	r3, #0
 8016dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016df2:	e025      	b.n	8016e40 <run_client_test+0x3f8>
  		  	{
  		  		timer_test(&result);
 8016df4:	f107 030c 	add.w	r3, r7, #12
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f000 fc5f 	bl	80176bc <timer_test>
  		  		if(result.bool_test ==FALSE )
 8016dfe:	7b3b      	ldrb	r3, [r7, #12]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d118      	bne.n	8016e36 <run_client_test+0x3ee>
  		  			return result;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	f107 040c 	add.w	r4, r7, #12
 8016e0a:	469c      	mov	ip, r3
 8016e0c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016e10:	4665      	mov	r5, ip
 8016e12:	4626      	mov	r6, r4
 8016e14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016e16:	6028      	str	r0, [r5, #0]
 8016e18:	6069      	str	r1, [r5, #4]
 8016e1a:	60aa      	str	r2, [r5, #8]
 8016e1c:	60eb      	str	r3, [r5, #12]
 8016e1e:	3410      	adds	r4, #16
 8016e20:	f10c 0c10 	add.w	ip, ip, #16
 8016e24:	4574      	cmp	r4, lr
 8016e26:	d1f3      	bne.n	8016e10 <run_client_test+0x3c8>
 8016e28:	4663      	mov	r3, ip
 8016e2a:	4622      	mov	r2, r4
 8016e2c:	8811      	ldrh	r1, [r2, #0]
 8016e2e:	7892      	ldrb	r2, [r2, #2]
 8016e30:	8019      	strh	r1, [r3, #0]
 8016e32:	709a      	strb	r2, [r3, #2]
 8016e34:	e04e      	b.n	8016ed4 <run_client_test+0x48c>
  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016e36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e40:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8016e44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d3d3      	bcc.n	8016df4 <run_client_test+0x3ac>
  		  	}
  		  			 print_result_test(result);
 8016e4c:	466c      	mov	r4, sp
 8016e4e:	f107 051c 	add.w	r5, r7, #28
 8016e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e5a:	682b      	ldr	r3, [r5, #0]
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	8022      	strh	r2, [r4, #0]
 8016e60:	3402      	adds	r4, #2
 8016e62:	0c1b      	lsrs	r3, r3, #16
 8016e64:	7023      	strb	r3, [r4, #0]
 8016e66:	f107 030c 	add.w	r3, r7, #12
 8016e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e6c:	f7ff fcb0 	bl	80167d0 <print_result_test>
  		  			 return result;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	f107 040c 	add.w	r4, r7, #12
 8016e76:	469c      	mov	ip, r3
 8016e78:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016e7c:	4665      	mov	r5, ip
 8016e7e:	4626      	mov	r6, r4
 8016e80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016e82:	6028      	str	r0, [r5, #0]
 8016e84:	6069      	str	r1, [r5, #4]
 8016e86:	60aa      	str	r2, [r5, #8]
 8016e88:	60eb      	str	r3, [r5, #12]
 8016e8a:	3410      	adds	r4, #16
 8016e8c:	f10c 0c10 	add.w	ip, ip, #16
 8016e90:	4574      	cmp	r4, lr
 8016e92:	d1f3      	bne.n	8016e7c <run_client_test+0x434>
 8016e94:	4663      	mov	r3, ip
 8016e96:	4622      	mov	r2, r4
 8016e98:	8811      	ldrh	r1, [r2, #0]
 8016e9a:	7892      	ldrb	r2, [r2, #2]
 8016e9c:	8019      	strh	r1, [r3, #0]
 8016e9e:	709a      	strb	r2, [r3, #2]
 8016ea0:	e018      	b.n	8016ed4 <run_client_test+0x48c>
  		default:

  			break;
 8016ea2:	bf00      	nop
  	}

	return result;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f107 040c 	add.w	r4, r7, #12
 8016eaa:	469c      	mov	ip, r3
 8016eac:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016eb0:	4665      	mov	r5, ip
 8016eb2:	4626      	mov	r6, r4
 8016eb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016eb6:	6028      	str	r0, [r5, #0]
 8016eb8:	6069      	str	r1, [r5, #4]
 8016eba:	60aa      	str	r2, [r5, #8]
 8016ebc:	60eb      	str	r3, [r5, #12]
 8016ebe:	3410      	adds	r4, #16
 8016ec0:	f10c 0c10 	add.w	ip, ip, #16
 8016ec4:	4574      	cmp	r4, lr
 8016ec6:	d1f3      	bne.n	8016eb0 <run_client_test+0x468>
 8016ec8:	4663      	mov	r3, ip
 8016eca:	4622      	mov	r2, r4
 8016ecc:	8811      	ldrh	r1, [r2, #0]
 8016ece:	7892      	ldrb	r2, [r2, #2]
 8016ed0:	8019      	strh	r1, [r3, #0]
 8016ed2:	709a      	strb	r2, [r3, #2]
}
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	374c      	adds	r7, #76	; 0x4c
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ede:	b004      	add	sp, #16
 8016ee0:	4770      	bx	lr
 8016ee2:	bf00      	nop

08016ee4 <handle_reception_network>:

//handle reception network
void handle_reception_network()
{
 8016ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ee6:	b09d      	sub	sp, #116	; 0x74
 8016ee8:	af0c      	add	r7, sp, #48	; 0x30
	//Handles the actual reception of bytes from the network interface
	ethernetif_input(&gnetif);
 8016eea:	482d      	ldr	r0, [pc, #180]	; (8016fa0 <handle_reception_network+0xbc>)
 8016eec:	f7f4 ff28 	bl	800bd40 <ethernetif_input>
	//Handle which checks timeout expiration
	sys_check_timeouts();
 8016ef0:	f7fc fa9c 	bl	801342c <sys_check_timeouts>

	//got reception network
	if(flag_message_From_client==TRUE)
 8016ef4:	4b2b      	ldr	r3, [pc, #172]	; (8016fa4 <handle_reception_network+0xc0>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	2b01      	cmp	r3, #1
 8016efa:	d14c      	bne.n	8016f96 <handle_reception_network+0xb2>
	{
		result=run_client_test(receive_client_message);
 8016efc:	4b2a      	ldr	r3, [pc, #168]	; (8016fa8 <handle_reception_network+0xc4>)
 8016efe:	607b      	str	r3, [r7, #4]
 8016f00:	f107 0c08 	add.w	ip, r7, #8
 8016f04:	4e29      	ldr	r6, [pc, #164]	; (8016fac <handle_reception_network+0xc8>)
 8016f06:	466c      	mov	r4, sp
 8016f08:	f106 050c 	add.w	r5, r6, #12
 8016f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016f18:	c403      	stmia	r4!, {r0, r1}
 8016f1a:	8022      	strh	r2, [r4, #0]
 8016f1c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8016f20:	4660      	mov	r0, ip
 8016f22:	f7ff fd91 	bl	8016a48 <run_client_test>
 8016f26:	f107 0408 	add.w	r4, r7, #8
 8016f2a:	687e      	ldr	r6, [r7, #4]
 8016f2c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8016f30:	4635      	mov	r5, r6
 8016f32:	4623      	mov	r3, r4
 8016f34:	6818      	ldr	r0, [r3, #0]
 8016f36:	6859      	ldr	r1, [r3, #4]
 8016f38:	689a      	ldr	r2, [r3, #8]
 8016f3a:	68db      	ldr	r3, [r3, #12]
 8016f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016f3e:	3410      	adds	r4, #16
 8016f40:	3610      	adds	r6, #16
 8016f42:	4564      	cmp	r4, ip
 8016f44:	d1f4      	bne.n	8016f30 <handle_reception_network+0x4c>
 8016f46:	4633      	mov	r3, r6
 8016f48:	4622      	mov	r2, r4
 8016f4a:	8811      	ldrh	r1, [r2, #0]
 8016f4c:	7892      	ldrb	r2, [r2, #2]
 8016f4e:	8019      	strh	r1, [r3, #0]
 8016f50:	709a      	strb	r2, [r3, #2]

		receive_client_message.length=strlen(result.msg);
 8016f52:	4817      	ldr	r0, [pc, #92]	; (8016fb0 <handle_reception_network+0xcc>)
 8016f54:	f7e9 f95c 	bl	8000210 <strlen>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	b2da      	uxtb	r2, r3
 8016f5c:	4b13      	ldr	r3, [pc, #76]	; (8016fac <handle_reception_network+0xc8>)
 8016f5e:	70da      	strb	r2, [r3, #3]
		memcpy(receive_client_message.msg , result.msg,  receive_client_message.length );
 8016f60:	4b12      	ldr	r3, [pc, #72]	; (8016fac <handle_reception_network+0xc8>)
 8016f62:	78db      	ldrb	r3, [r3, #3]
 8016f64:	461a      	mov	r2, r3
 8016f66:	4912      	ldr	r1, [pc, #72]	; (8016fb0 <handle_reception_network+0xcc>)
 8016f68:	4812      	ldr	r0, [pc, #72]	; (8016fb4 <handle_reception_network+0xd0>)
 8016f6a:	f000 fc15 	bl	8017798 <memcpy>
		//send client message
		send_to_cient(receive_client_message  ) ;
 8016f6e:	4e0f      	ldr	r6, [pc, #60]	; (8016fac <handle_reception_network+0xc8>)
 8016f70:	466c      	mov	r4, sp
 8016f72:	f106 0510 	add.w	r5, r6, #16
 8016f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016f82:	6020      	str	r0, [r4, #0]
 8016f84:	3404      	adds	r4, #4
 8016f86:	8021      	strh	r1, [r4, #0]
 8016f88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8016f8c:	f7ff fcb6 	bl	80168fc <send_to_cient>

		flag_message_From_client=FALSE;
 8016f90:	4b04      	ldr	r3, [pc, #16]	; (8016fa4 <handle_reception_network+0xc0>)
 8016f92:	2200      	movs	r2, #0
 8016f94:	601a      	str	r2, [r3, #0]
	}
}
 8016f96:	bf00      	nop
 8016f98:	3744      	adds	r7, #68	; 0x44
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	20000e0c 	.word	0x20000e0c
 8016fa4:	20008fe8 	.word	0x20008fe8
 8016fa8:	20008fec 	.word	0x20008fec
 8016fac:	20009020 	.word	0x20009020
 8016fb0:	20008fed 	.word	0x20008fed
 8016fb4:	20009024 	.word	0x20009024

08016fb8 <analog_to_digital_converter_test>:
#include "RTG.h"
#include "tests.h"

//test for check that analog to digital_converter in correct way
result_test analog_to_digital_converter_test()
{
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	b093      	sub	sp, #76	; 0x4c
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
	result_test result;
	uint32_t adcVal1;
	uint32_t expected_adc_value=0;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	647b      	str	r3, [r7, #68]	; 0x44
	int wrong_value=100;
 8016fc4:	2364      	movs	r3, #100	; 0x64
 8016fc6:	643b      	str	r3, [r7, #64]	; 0x40
	 //	Enable ADC and start ADC conversion
	 HAL_ADC_Start(ADC_1);
 8016fc8:	4823      	ldr	r0, [pc, #140]	; (8017058 <analog_to_digital_converter_test+0xa0>)
 8016fca:	f7eb f8ff 	bl	80021cc <HAL_ADC_Start>
	 //	Wait for ADC conversion to be completed
	 HAL_ADC_PollForConversion(ADC_1, 10);
 8016fce:	210a      	movs	r1, #10
 8016fd0:	4821      	ldr	r0, [pc, #132]	; (8017058 <analog_to_digital_converter_test+0xa0>)
 8016fd2:	f7eb f9c9 	bl	8002368 <HAL_ADC_PollForConversion>

	 //	Get ADC value from ADC data register
	  adcVal1 = HAL_ADC_GetValue(ADC_1);
 8016fd6:	4820      	ldr	r0, [pc, #128]	; (8017058 <analog_to_digital_converter_test+0xa0>)
 8016fd8:	f7eb fb61 	bl	800269e <HAL_ADC_GetValue>
 8016fdc:	63f8      	str	r0, [r7, #60]	; 0x3c


	if(expected_adc_value-wrong_value > adcVal1 || adcVal1 > expected_adc_value+wrong_value )
 8016fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016fe2:	1ad3      	subs	r3, r2, r3
 8016fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d305      	bcc.n	8016ff6 <analog_to_digital_converter_test+0x3e>
 8016fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016fee:	4413      	add	r3, r2
 8016ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	d90a      	bls.n	801700c <analog_to_digital_converter_test+0x54>
	{
		result.bool_test=TRUE;
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	723b      	strb	r3, [r7, #8]
		memcpy(result.msg , STR_SUCCESS,  strlen(STR_SUCCESS)+1 );
 8016ffa:	f107 0308 	add.w	r3, r7, #8
 8016ffe:	3301      	adds	r3, #1
 8017000:	220c      	movs	r2, #12
 8017002:	4916      	ldr	r1, [pc, #88]	; (801705c <analog_to_digital_converter_test+0xa4>)
 8017004:	4618      	mov	r0, r3
 8017006:	f000 fbc7 	bl	8017798 <memcpy>
 801700a:	e009      	b.n	8017020 <analog_to_digital_converter_test+0x68>
	}
	else
	{
		result.bool_test=FALSE;
 801700c:	2300      	movs	r3, #0
 801700e:	723b      	strb	r3, [r7, #8]
	    memcpy(result.msg , STR_ADC_FAIL,  strlen(STR_ADC_FAIL)+1);
 8017010:	f107 0308 	add.w	r3, r7, #8
 8017014:	3301      	adds	r3, #1
 8017016:	220a      	movs	r2, #10
 8017018:	4911      	ldr	r1, [pc, #68]	; (8017060 <analog_to_digital_converter_test+0xa8>)
 801701a:	4618      	mov	r0, r3
 801701c:	f000 fbbc 	bl	8017798 <memcpy>
	}
	return result;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f107 0408 	add.w	r4, r7, #8
 8017026:	469c      	mov	ip, r3
 8017028:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801702c:	4665      	mov	r5, ip
 801702e:	4626      	mov	r6, r4
 8017030:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017032:	6028      	str	r0, [r5, #0]
 8017034:	6069      	str	r1, [r5, #4]
 8017036:	60aa      	str	r2, [r5, #8]
 8017038:	60eb      	str	r3, [r5, #12]
 801703a:	3410      	adds	r4, #16
 801703c:	f10c 0c10 	add.w	ip, ip, #16
 8017040:	4574      	cmp	r4, lr
 8017042:	d1f3      	bne.n	801702c <analog_to_digital_converter_test+0x74>
 8017044:	4663      	mov	r3, ip
 8017046:	4622      	mov	r2, r4
 8017048:	8811      	ldrh	r1, [r2, #0]
 801704a:	7892      	ldrb	r2, [r2, #2]
 801704c:	8019      	strh	r1, [r3, #0]
 801704e:	709a      	strb	r2, [r3, #2]
}
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	374c      	adds	r7, #76	; 0x4c
 8017054:	46bd      	mov	sp, r7
 8017056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017058:	200001ec 	.word	0x200001ec
 801705c:	0801b3b8 	.word	0x0801b3b8
 8017060:	0801b3c4 	.word	0x0801b3c4

08017064 <ADC_tests>:



void ADC_tests( result_test*result)
{
 8017064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017066:	b091      	sub	sp, #68	; 0x44
 8017068:	af00      	add	r7, sp, #0
 801706a:	63f8      	str	r0, [r7, #60]	; 0x3c
	*result=analog_to_digital_converter_test();
 801706c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 801706e:	463b      	mov	r3, r7
 8017070:	4618      	mov	r0, r3
 8017072:	f7ff ffa1 	bl	8016fb8 <analog_to_digital_converter_test>
 8017076:	463b      	mov	r3, r7
 8017078:	4620      	mov	r0, r4
 801707a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801707e:	4602      	mov	r2, r0
 8017080:	4619      	mov	r1, r3
 8017082:	f8d1 c000 	ldr.w	ip, [r1]
 8017086:	684e      	ldr	r6, [r1, #4]
 8017088:	688d      	ldr	r5, [r1, #8]
 801708a:	68c9      	ldr	r1, [r1, #12]
 801708c:	f8c2 c000 	str.w	ip, [r2]
 8017090:	6056      	str	r6, [r2, #4]
 8017092:	6095      	str	r5, [r2, #8]
 8017094:	60d1      	str	r1, [r2, #12]
 8017096:	3310      	adds	r3, #16
 8017098:	3010      	adds	r0, #16
 801709a:	42a3      	cmp	r3, r4
 801709c:	d1ef      	bne.n	801707e <ADC_tests+0x1a>
 801709e:	4602      	mov	r2, r0
 80170a0:	8819      	ldrh	r1, [r3, #0]
 80170a2:	789b      	ldrb	r3, [r3, #2]
 80170a4:	8011      	strh	r1, [r2, #0]
 80170a6:	7093      	strb	r3, [r2, #2]
}
 80170a8:	bf00      	nop
 80170aa:	3744      	adds	r7, #68	; 0x44
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170b0 <test_transmit_receive_data_I2C>:



//test for check transmit data on I2C protocol
result_test test_transmit_receive_data_I2C(const char* data,uint8_t lenght)
{
 80170b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b2:	b093      	sub	sp, #76	; 0x4c
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	4613      	mov	r3, r2
 80170bc:	71fb      	strb	r3, [r7, #7]
	result_test result;
	int waiting_counter=0;
 80170be:	2300      	movs	r3, #0
 80170c0:	647b      	str	r3, [r7, #68]	; 0x44

	//salve ready for receive data
	HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, &data_buff_receiver1_Slave_I2C, lenght);
 80170c2:	79fb      	ldrb	r3, [r7, #7]
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	461a      	mov	r2, r3
 80170c8:	496b      	ldr	r1, [pc, #428]	; (8017278 <test_transmit_receive_data_I2C+0x1c8>)
 80170ca:	486c      	ldr	r0, [pc, #432]	; (801727c <test_transmit_receive_data_I2C+0x1cc>)
 80170cc:	f7ee fa86 	bl	80055dc <HAL_I2C_Slave_Receive_DMA>
	//master ready for transmit data
	HAL_I2C_Master_Transmit_DMA(I2C_MASTER, 44, data, lenght);
 80170d0:	79fb      	ldrb	r3, [r7, #7]
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	68ba      	ldr	r2, [r7, #8]
 80170d6:	212c      	movs	r1, #44	; 0x2c
 80170d8:	4869      	ldr	r0, [pc, #420]	; (8017280 <test_transmit_receive_data_I2C+0x1d0>)
 80170da:	f7ed ffe9 	bl	80050b0 <HAL_I2C_Master_Transmit_DMA>

	while (1)
	{
		//slave received data
		if(flag_R_slave==TRUE)
 80170de:	4b69      	ldr	r3, [pc, #420]	; (8017284 <test_transmit_receive_data_I2C+0x1d4>)
 80170e0:	781b      	ldrb	r3, [r3, #0]
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d13c      	bne.n	8017160 <test_transmit_receive_data_I2C+0xb0>
		{

			if( check_data(data,data_buff_receiver1_Slave_I2C,lenght)==FALSE )
 80170e6:	79fb      	ldrb	r3, [r7, #7]
 80170e8:	461a      	mov	r2, r3
 80170ea:	4963      	ldr	r1, [pc, #396]	; (8017278 <test_transmit_receive_data_I2C+0x1c8>)
 80170ec:	68b8      	ldr	r0, [r7, #8]
 80170ee:	f7ff fb85 	bl	80167fc <check_data>
 80170f2:	4603      	mov	r3, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d122      	bne.n	801713e <test_transmit_receive_data_I2C+0x8e>
			{
				result.bool_test=FALSE;
 80170f8:	2300      	movs	r3, #0
 80170fa:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , STR_FAIL_SLAVE_RECEIVE,  strlen(STR_FAIL_SLAVE_RECEIVE)+1);
 80170fc:	f107 0310 	add.w	r3, r7, #16
 8017100:	3301      	adds	r3, #1
 8017102:	2223      	movs	r2, #35	; 0x23
 8017104:	4960      	ldr	r1, [pc, #384]	; (8017288 <test_transmit_receive_data_I2C+0x1d8>)
 8017106:	4618      	mov	r0, r3
 8017108:	f000 fb46 	bl	8017798 <memcpy>
				return result;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f107 0410 	add.w	r4, r7, #16
 8017112:	469c      	mov	ip, r3
 8017114:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017118:	4665      	mov	r5, ip
 801711a:	4626      	mov	r6, r4
 801711c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801711e:	6028      	str	r0, [r5, #0]
 8017120:	6069      	str	r1, [r5, #4]
 8017122:	60aa      	str	r2, [r5, #8]
 8017124:	60eb      	str	r3, [r5, #12]
 8017126:	3410      	adds	r4, #16
 8017128:	f10c 0c10 	add.w	ip, ip, #16
 801712c:	4574      	cmp	r4, lr
 801712e:	d1f3      	bne.n	8017118 <test_transmit_receive_data_I2C+0x68>
 8017130:	4663      	mov	r3, ip
 8017132:	4622      	mov	r2, r4
 8017134:	8811      	ldrh	r1, [r2, #0]
 8017136:	7892      	ldrb	r2, [r2, #2]
 8017138:	8019      	strh	r1, [r3, #0]
 801713a:	709a      	strb	r2, [r3, #2]
 801713c:	e098      	b.n	8017270 <test_transmit_receive_data_I2C+0x1c0>
			}


			HAL_I2C_Master_Receive_DMA(I2C_MASTER,44, &data_buff_receiver_Master_I2C, lenght);
 801713e:	79fb      	ldrb	r3, [r7, #7]
 8017140:	b29b      	uxth	r3, r3
 8017142:	4a52      	ldr	r2, [pc, #328]	; (801728c <test_transmit_receive_data_I2C+0x1dc>)
 8017144:	212c      	movs	r1, #44	; 0x2c
 8017146:	484e      	ldr	r0, [pc, #312]	; (8017280 <test_transmit_receive_data_I2C+0x1d0>)
 8017148:	f7ee f8a2 	bl	8005290 <HAL_I2C_Master_Receive_DMA>
			HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE,data_buff_receiver1_Slave_I2C, lenght);
 801714c:	79fb      	ldrb	r3, [r7, #7]
 801714e:	b29b      	uxth	r3, r3
 8017150:	461a      	mov	r2, r3
 8017152:	4949      	ldr	r1, [pc, #292]	; (8017278 <test_transmit_receive_data_I2C+0x1c8>)
 8017154:	4849      	ldr	r0, [pc, #292]	; (801727c <test_transmit_receive_data_I2C+0x1cc>)
 8017156:	f7ee f98b 	bl	8005470 <HAL_I2C_Slave_Transmit_DMA>
			flag_R_slave=FALSE;
 801715a:	4b4a      	ldr	r3, [pc, #296]	; (8017284 <test_transmit_receive_data_I2C+0x1d4>)
 801715c:	2200      	movs	r2, #0
 801715e:	701a      	strb	r2, [r3, #0]
		}
		//master received data
		if(flag_R_Master==TRUE)
 8017160:	4b4b      	ldr	r3, [pc, #300]	; (8017290 <test_transmit_receive_data_I2C+0x1e0>)
 8017162:	781b      	ldrb	r3, [r3, #0]
 8017164:	2b01      	cmp	r3, #1
 8017166:	d144      	bne.n	80171f2 <test_transmit_receive_data_I2C+0x142>
		{
			if( check_data(data,data_buff_receiver_Master_I2C,lenght)==FALSE )
 8017168:	79fb      	ldrb	r3, [r7, #7]
 801716a:	461a      	mov	r2, r3
 801716c:	4947      	ldr	r1, [pc, #284]	; (801728c <test_transmit_receive_data_I2C+0x1dc>)
 801716e:	68b8      	ldr	r0, [r7, #8]
 8017170:	f7ff fb44 	bl	80167fc <check_data>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	d122      	bne.n	80171c0 <test_transmit_receive_data_I2C+0x110>
			{
				result.bool_test=FALSE;
 801717a:	2300      	movs	r3, #0
 801717c:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , STR_FAIL_MASTER_RECEIVE,  strlen(STR_FAIL_MASTER_RECEIVE)+1);
 801717e:	f107 0310 	add.w	r3, r7, #16
 8017182:	3301      	adds	r3, #1
 8017184:	2224      	movs	r2, #36	; 0x24
 8017186:	4943      	ldr	r1, [pc, #268]	; (8017294 <test_transmit_receive_data_I2C+0x1e4>)
 8017188:	4618      	mov	r0, r3
 801718a:	f000 fb05 	bl	8017798 <memcpy>
				return result;
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	f107 0410 	add.w	r4, r7, #16
 8017194:	469c      	mov	ip, r3
 8017196:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801719a:	4665      	mov	r5, ip
 801719c:	4626      	mov	r6, r4
 801719e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80171a0:	6028      	str	r0, [r5, #0]
 80171a2:	6069      	str	r1, [r5, #4]
 80171a4:	60aa      	str	r2, [r5, #8]
 80171a6:	60eb      	str	r3, [r5, #12]
 80171a8:	3410      	adds	r4, #16
 80171aa:	f10c 0c10 	add.w	ip, ip, #16
 80171ae:	4574      	cmp	r4, lr
 80171b0:	d1f3      	bne.n	801719a <test_transmit_receive_data_I2C+0xea>
 80171b2:	4663      	mov	r3, ip
 80171b4:	4622      	mov	r2, r4
 80171b6:	8811      	ldrh	r1, [r2, #0]
 80171b8:	7892      	ldrb	r2, [r2, #2]
 80171ba:	8019      	strh	r1, [r3, #0]
 80171bc:	709a      	strb	r2, [r3, #2]
 80171be:	e057      	b.n	8017270 <test_transmit_receive_data_I2C+0x1c0>
			}
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 80171c0:	2180      	movs	r1, #128	; 0x80
 80171c2:	4835      	ldr	r0, [pc, #212]	; (8017298 <test_transmit_receive_data_I2C+0x1e8>)
 80171c4:	f7ed fea5 	bl	8004f12 <HAL_GPIO_TogglePin>
			flag_R_Master=FALSE;
 80171c8:	4b31      	ldr	r3, [pc, #196]	; (8017290 <test_transmit_receive_data_I2C+0x1e0>)
 80171ca:	2200      	movs	r2, #0
 80171cc:	701a      	strb	r2, [r3, #0]
			break;
 80171ce:	bf00      	nop
			return result;
		}

	}

	result.bool_test=TRUE;
 80171d0:	2301      	movs	r3, #1
 80171d2:	743b      	strb	r3, [r7, #16]
	memcpy(result.msg , STR_SUCCESS,  strlen(STR_SUCCESS)+1);
 80171d4:	f107 0310 	add.w	r3, r7, #16
 80171d8:	3301      	adds	r3, #1
 80171da:	220c      	movs	r2, #12
 80171dc:	492f      	ldr	r1, [pc, #188]	; (801729c <test_transmit_receive_data_I2C+0x1ec>)
 80171de:	4618      	mov	r0, r3
 80171e0:	f000 fada 	bl	8017798 <memcpy>
	return result;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	f107 0410 	add.w	r4, r7, #16
 80171ea:	469c      	mov	ip, r3
 80171ec:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80171f0:	e02c      	b.n	801724c <test_transmit_receive_data_I2C+0x19c>
		HAL_Delay(10);
 80171f2:	200a      	movs	r0, #10
 80171f4:	f7ea ff82 	bl	80020fc <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 80171f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171fa:	3301      	adds	r3, #1
 80171fc:	647b      	str	r3, [r7, #68]	; 0x44
 80171fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017200:	2b05      	cmp	r3, #5
 8017202:	f77f af6c 	ble.w	80170de <test_transmit_receive_data_I2C+0x2e>
			result.bool_test=FALSE;
 8017206:	2300      	movs	r3, #0
 8017208:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , STR_FAIL_TIMEOUT,  strlen(STR_FAIL_TIMEOUT)+1);
 801720a:	f107 0310 	add.w	r3, r7, #16
 801720e:	3301      	adds	r3, #1
 8017210:	220f      	movs	r2, #15
 8017212:	4923      	ldr	r1, [pc, #140]	; (80172a0 <test_transmit_receive_data_I2C+0x1f0>)
 8017214:	4618      	mov	r0, r3
 8017216:	f000 fabf 	bl	8017798 <memcpy>
			return result;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	f107 0410 	add.w	r4, r7, #16
 8017220:	469c      	mov	ip, r3
 8017222:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8017226:	4665      	mov	r5, ip
 8017228:	4626      	mov	r6, r4
 801722a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801722c:	6028      	str	r0, [r5, #0]
 801722e:	6069      	str	r1, [r5, #4]
 8017230:	60aa      	str	r2, [r5, #8]
 8017232:	60eb      	str	r3, [r5, #12]
 8017234:	3410      	adds	r4, #16
 8017236:	f10c 0c10 	add.w	ip, ip, #16
 801723a:	4574      	cmp	r4, lr
 801723c:	d1f3      	bne.n	8017226 <test_transmit_receive_data_I2C+0x176>
 801723e:	4663      	mov	r3, ip
 8017240:	4622      	mov	r2, r4
 8017242:	8811      	ldrh	r1, [r2, #0]
 8017244:	7892      	ldrb	r2, [r2, #2]
 8017246:	8019      	strh	r1, [r3, #0]
 8017248:	709a      	strb	r2, [r3, #2]
 801724a:	e011      	b.n	8017270 <test_transmit_receive_data_I2C+0x1c0>
	return result;
 801724c:	4665      	mov	r5, ip
 801724e:	4626      	mov	r6, r4
 8017250:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017252:	6028      	str	r0, [r5, #0]
 8017254:	6069      	str	r1, [r5, #4]
 8017256:	60aa      	str	r2, [r5, #8]
 8017258:	60eb      	str	r3, [r5, #12]
 801725a:	3410      	adds	r4, #16
 801725c:	f10c 0c10 	add.w	ip, ip, #16
 8017260:	4574      	cmp	r4, lr
 8017262:	d1f3      	bne.n	801724c <test_transmit_receive_data_I2C+0x19c>
 8017264:	4663      	mov	r3, ip
 8017266:	4622      	mov	r2, r4
 8017268:	8811      	ldrh	r1, [r2, #0]
 801726a:	7892      	ldrb	r2, [r2, #2]
 801726c:	8019      	strh	r1, [r3, #0]
 801726e:	709a      	strb	r2, [r3, #2]
}
 8017270:	68f8      	ldr	r0, [r7, #12]
 8017272:	374c      	adds	r7, #76	; 0x4c
 8017274:	46bd      	mov	sp, r7
 8017276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017278:	2000906c 	.word	0x2000906c
 801727c:	2000029c 	.word	0x2000029c
 8017280:	20000248 	.word	0x20000248
 8017284:	20008fc9 	.word	0x20008fc9
 8017288:	0801b3d0 	.word	0x0801b3d0
 801728c:	20009058 	.word	0x20009058
 8017290:	20008fc8 	.word	0x20008fc8
 8017294:	0801b3f4 	.word	0x0801b3f4
 8017298:	40020400 	.word	0x40020400
 801729c:	0801b428 	.word	0x0801b428
 80172a0:	0801b418 	.word	0x0801b418

080172a4 <I2C_tests>:


void I2C_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 80172a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172a6:	b093      	sub	sp, #76	; 0x4c
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6478      	str	r0, [r7, #68]	; 0x44
 80172ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80172ae:	460b      	mov	r3, r1
 80172b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172b4:	4613      	mov	r3, r2
 80172b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data_buff_receiver_Master_I2C[SIZEOF_DATA_BUFF]=0;
 80172ba:	4b15      	ldr	r3, [pc, #84]	; (8017310 <I2C_tests+0x6c>)
 80172bc:	2200      	movs	r2, #0
 80172be:	749a      	strb	r2, [r3, #18]
	data_buff_receiver1_Slave_I2C[SIZEOF_DATA_BUFF]=0;
 80172c0:	4b14      	ldr	r3, [pc, #80]	; (8017314 <I2C_tests+0x70>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	749a      	strb	r2, [r3, #18]


	*result=test_transmit_receive_data_I2C(data,lenght);
 80172c6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80172c8:	463b      	mov	r3, r7
 80172ca:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80172ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ff feed 	bl	80170b0 <test_transmit_receive_data_I2C>
 80172d6:	463b      	mov	r3, r7
 80172d8:	4620      	mov	r0, r4
 80172da:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80172de:	4602      	mov	r2, r0
 80172e0:	4619      	mov	r1, r3
 80172e2:	f8d1 c000 	ldr.w	ip, [r1]
 80172e6:	684e      	ldr	r6, [r1, #4]
 80172e8:	688d      	ldr	r5, [r1, #8]
 80172ea:	68c9      	ldr	r1, [r1, #12]
 80172ec:	f8c2 c000 	str.w	ip, [r2]
 80172f0:	6056      	str	r6, [r2, #4]
 80172f2:	6095      	str	r5, [r2, #8]
 80172f4:	60d1      	str	r1, [r2, #12]
 80172f6:	3310      	adds	r3, #16
 80172f8:	3010      	adds	r0, #16
 80172fa:	42a3      	cmp	r3, r4
 80172fc:	d1ef      	bne.n	80172de <I2C_tests+0x3a>
 80172fe:	4602      	mov	r2, r0
 8017300:	8819      	ldrh	r1, [r3, #0]
 8017302:	789b      	ldrb	r3, [r3, #2]
 8017304:	8011      	strh	r1, [r2, #0]
 8017306:	7093      	strb	r3, [r2, #2]

}
 8017308:	bf00      	nop
 801730a:	374c      	adds	r7, #76	; 0x4c
 801730c:	46bd      	mov	sp, r7
 801730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017310:	20009058 	.word	0x20009058
 8017314:	2000906c 	.word	0x2000906c

08017318 <test_transmit_receive_data_SPI>:


//test for check transmit data on SPI protocol

result_test test_transmit_receive_data_SPI(const char* data,uint8_t lenght)
{
 8017318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801731a:	b093      	sub	sp, #76	; 0x4c
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	4613      	mov	r3, r2
 8017324:	71fb      	strb	r3, [r7, #7]
	result_test result;
	int waiting_counter=0;
 8017326:	2300      	movs	r3, #0
 8017328:	647b      	str	r3, [r7, #68]	; 0x44
	while (1)
	{

		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, data_buff_receiver1_Slave_SPI,
 801732a:	79fb      	ldrb	r3, [r7, #7]
 801732c:	b29b      	uxth	r3, r3
 801732e:	4a29      	ldr	r2, [pc, #164]	; (80173d4 <test_transmit_receive_data_SPI+0xbc>)
 8017330:	4928      	ldr	r1, [pc, #160]	; (80173d4 <test_transmit_receive_data_SPI+0xbc>)
 8017332:	4829      	ldr	r0, [pc, #164]	; (80173d8 <test_transmit_receive_data_SPI+0xc0>)
 8017334:	f7f1 f8ba 	bl	80084ac <HAL_SPI_TransmitReceive_DMA>
				data_buff_receiver1_Slave_SPI, lenght);
		HAL_Delay(100);
 8017338:	2064      	movs	r0, #100	; 0x64
 801733a:	f7ea fedf 	bl	80020fc <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, data,
 801733e:	79fb      	ldrb	r3, [r7, #7]
 8017340:	b29b      	uxth	r3, r3
 8017342:	4a26      	ldr	r2, [pc, #152]	; (80173dc <test_transmit_receive_data_SPI+0xc4>)
 8017344:	68b9      	ldr	r1, [r7, #8]
 8017346:	4826      	ldr	r0, [pc, #152]	; (80173e0 <test_transmit_receive_data_SPI+0xc8>)
 8017348:	f7f1 f8b0 	bl	80084ac <HAL_SPI_TransmitReceive_DMA>
				data_buff_receiver_Master_SPI, lenght);
		HAL_Delay(100);
 801734c:	2064      	movs	r0, #100	; 0x64
 801734e:	f7ea fed5 	bl	80020fc <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, data_buff_receiver1_Slave_SPI,
 8017352:	79fb      	ldrb	r3, [r7, #7]
 8017354:	b29b      	uxth	r3, r3
 8017356:	4a1f      	ldr	r2, [pc, #124]	; (80173d4 <test_transmit_receive_data_SPI+0xbc>)
 8017358:	491e      	ldr	r1, [pc, #120]	; (80173d4 <test_transmit_receive_data_SPI+0xbc>)
 801735a:	481f      	ldr	r0, [pc, #124]	; (80173d8 <test_transmit_receive_data_SPI+0xc0>)
 801735c:	f7f1 f8a6 	bl	80084ac <HAL_SPI_TransmitReceive_DMA>
						data_buff_receiver1_Slave_SPI, lenght);
		HAL_Delay(100);
 8017360:	2064      	movs	r0, #100	; 0x64
 8017362:	f7ea fecb 	bl	80020fc <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, data_buff_receiver_Master_SPI,
 8017366:	79fb      	ldrb	r3, [r7, #7]
 8017368:	b29b      	uxth	r3, r3
 801736a:	4a1c      	ldr	r2, [pc, #112]	; (80173dc <test_transmit_receive_data_SPI+0xc4>)
 801736c:	491b      	ldr	r1, [pc, #108]	; (80173dc <test_transmit_receive_data_SPI+0xc4>)
 801736e:	481c      	ldr	r0, [pc, #112]	; (80173e0 <test_transmit_receive_data_SPI+0xc8>)
 8017370:	f7f1 f89c 	bl	80084ac <HAL_SPI_TransmitReceive_DMA>
						data_buff_receiver_Master_SPI, lenght);



		HAL_Delay(10);
 8017374:	200a      	movs	r0, #10
 8017376:	f7ea fec1 	bl	80020fc <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 801737a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801737c:	3301      	adds	r3, #1
 801737e:	647b      	str	r3, [r7, #68]	; 0x44
 8017380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017382:	2b05      	cmp	r3, #5
 8017384:	ddd1      	ble.n	801732a <test_transmit_receive_data_SPI+0x12>
		{
			result.bool_test=FALSE;
 8017386:	2300      	movs	r3, #0
 8017388:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , "bad conotion between UART",  26);
 801738a:	f107 0310 	add.w	r3, r7, #16
 801738e:	3301      	adds	r3, #1
 8017390:	221a      	movs	r2, #26
 8017392:	4914      	ldr	r1, [pc, #80]	; (80173e4 <test_transmit_receive_data_SPI+0xcc>)
 8017394:	4618      	mov	r0, r3
 8017396:	f000 f9ff 	bl	8017798 <memcpy>
			return result;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	f107 0410 	add.w	r4, r7, #16
 80173a0:	469c      	mov	ip, r3
 80173a2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80173a6:	4665      	mov	r5, ip
 80173a8:	4626      	mov	r6, r4
 80173aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80173ac:	6028      	str	r0, [r5, #0]
 80173ae:	6069      	str	r1, [r5, #4]
 80173b0:	60aa      	str	r2, [r5, #8]
 80173b2:	60eb      	str	r3, [r5, #12]
 80173b4:	3410      	adds	r4, #16
 80173b6:	f10c 0c10 	add.w	ip, ip, #16
 80173ba:	4574      	cmp	r4, lr
 80173bc:	d1f3      	bne.n	80173a6 <test_transmit_receive_data_SPI+0x8e>
 80173be:	4663      	mov	r3, ip
 80173c0:	4622      	mov	r2, r4
 80173c2:	8811      	ldrh	r1, [r2, #0]
 80173c4:	7892      	ldrb	r2, [r2, #2]
 80173c6:	8019      	strh	r1, [r3, #0]
 80173c8:	709a      	strb	r2, [r3, #2]
	}

	result.bool_test=TRUE;
	memcpy(result.msg , "Success",  8);
	return result;
}
 80173ca:	68f8      	ldr	r0, [r7, #12]
 80173cc:	374c      	adds	r7, #76	; 0x4c
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173d2:	bf00      	nop
 80173d4:	20009094 	.word	0x20009094
 80173d8:	200004d4 	.word	0x200004d4
 80173dc:	20009080 	.word	0x20009080
 80173e0:	20000470 	.word	0x20000470
 80173e4:	0801b434 	.word	0x0801b434

080173e8 <SPI_tests>:


void SPI_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 80173e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173ea:	b093      	sub	sp, #76	; 0x4c
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6478      	str	r0, [r7, #68]	; 0x44
 80173f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80173f2:	460b      	mov	r3, r1
 80173f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80173f8:	4613      	mov	r3, r2
 80173fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	//initialization buffers for master and salve
	data_buff_receiver_Master_SPI[SIZEOF_DATA_BUFF]=0;
 80173fe:	4b15      	ldr	r3, [pc, #84]	; (8017454 <SPI_tests+0x6c>)
 8017400:	2200      	movs	r2, #0
 8017402:	749a      	strb	r2, [r3, #18]
	data_buff_receiver1_Slave_SPI[SIZEOF_DATA_BUFF]=0;
 8017404:	4b14      	ldr	r3, [pc, #80]	; (8017458 <SPI_tests+0x70>)
 8017406:	2200      	movs	r2, #0
 8017408:	749a      	strb	r2, [r3, #18]

	*result=test_transmit_receive_data_SPI(data,lenght);
 801740a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 801740c:	463b      	mov	r3, r7
 801740e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017414:	4618      	mov	r0, r3
 8017416:	f7ff ff7f 	bl	8017318 <test_transmit_receive_data_SPI>
 801741a:	463b      	mov	r3, r7
 801741c:	4620      	mov	r0, r4
 801741e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8017422:	4602      	mov	r2, r0
 8017424:	4619      	mov	r1, r3
 8017426:	f8d1 c000 	ldr.w	ip, [r1]
 801742a:	684e      	ldr	r6, [r1, #4]
 801742c:	688d      	ldr	r5, [r1, #8]
 801742e:	68c9      	ldr	r1, [r1, #12]
 8017430:	f8c2 c000 	str.w	ip, [r2]
 8017434:	6056      	str	r6, [r2, #4]
 8017436:	6095      	str	r5, [r2, #8]
 8017438:	60d1      	str	r1, [r2, #12]
 801743a:	3310      	adds	r3, #16
 801743c:	3010      	adds	r0, #16
 801743e:	42a3      	cmp	r3, r4
 8017440:	d1ef      	bne.n	8017422 <SPI_tests+0x3a>
 8017442:	4602      	mov	r2, r0
 8017444:	8819      	ldrh	r1, [r3, #0]
 8017446:	789b      	ldrb	r3, [r3, #2]
 8017448:	8011      	strh	r1, [r2, #0]
 801744a:	7093      	strb	r3, [r2, #2]

}
 801744c:	bf00      	nop
 801744e:	374c      	adds	r7, #76	; 0x4c
 8017450:	46bd      	mov	sp, r7
 8017452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017454:	20009080 	.word	0x20009080
 8017458:	20009094 	.word	0x20009094

0801745c <test_transmit_receive_data>:
uint8_t data_buff_receiver2[SIZEOF_DATA_BUFF];
uint8_t data_buff_receiver1[SIZEOF_DATA_BUFF];


//test for check transmit data on UART protocol
result_test test_transmit_receive_data(const char* data,uint8_t lenght){
 801745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801745e:	b093      	sub	sp, #76	; 0x4c
 8017460:	af00      	add	r7, sp, #0
 8017462:	60f8      	str	r0, [r7, #12]
 8017464:	60b9      	str	r1, [r7, #8]
 8017466:	4613      	mov	r3, r2
 8017468:	71fb      	strb	r3, [r7, #7]

	int waiting_counter=0;
 801746a:	2300      	movs	r3, #0
 801746c:	647b      	str	r3, [r7, #68]	; 0x44
	result_test result;
	//Prepare Receive UART to receive data
	HAL_UART_Receive_IT(UART_5, data_buff_receiver1, lenght);
 801746e:	79fb      	ldrb	r3, [r7, #7]
 8017470:	b29b      	uxth	r3, r3
 8017472:	461a      	mov	r2, r3
 8017474:	496d      	ldr	r1, [pc, #436]	; (801762c <test_transmit_receive_data+0x1d0>)
 8017476:	486e      	ldr	r0, [pc, #440]	; (8017630 <test_transmit_receive_data+0x1d4>)
 8017478:	f7f2 fc0c 	bl	8009c94 <HAL_UART_Receive_IT>
	//Prepare Receive UART to Transmit data
	HAL_UART_Transmit_IT(UART_4, data, lenght);
 801747c:	79fb      	ldrb	r3, [r7, #7]
 801747e:	b29b      	uxth	r3, r3
 8017480:	461a      	mov	r2, r3
 8017482:	68b9      	ldr	r1, [r7, #8]
 8017484:	486b      	ldr	r0, [pc, #428]	; (8017634 <test_transmit_receive_data+0x1d8>)
 8017486:	f7f2 fba7 	bl	8009bd8 <HAL_UART_Transmit_IT>


	while(1)
	{
		//UART5 receivered data
		if(receivere_UART5_flag_RxCpltCallback==TRUE)
 801748a:	4b6b      	ldr	r3, [pc, #428]	; (8017638 <test_transmit_receive_data+0x1dc>)
 801748c:	781b      	ldrb	r3, [r3, #0]
 801748e:	2b01      	cmp	r3, #1
 8017490:	d13c      	bne.n	801750c <test_transmit_receive_data+0xb0>
		{
			if( check_data(data,data_buff_receiver1,lenght)==FALSE )
 8017492:	79fb      	ldrb	r3, [r7, #7]
 8017494:	461a      	mov	r2, r3
 8017496:	4965      	ldr	r1, [pc, #404]	; (801762c <test_transmit_receive_data+0x1d0>)
 8017498:	68b8      	ldr	r0, [r7, #8]
 801749a:	f7ff f9af 	bl	80167fc <check_data>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d122      	bne.n	80174ea <test_transmit_receive_data+0x8e>
			{
				result.bool_test=FALSE;
 80174a4:	2300      	movs	r3, #0
 80174a6:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , STR_FAIL_UART5_RECEIVE, strlen(STR_FAIL_UART5_RECEIVE)+1);
 80174a8:	f107 0310 	add.w	r3, r7, #16
 80174ac:	3301      	adds	r3, #1
 80174ae:	2224      	movs	r2, #36	; 0x24
 80174b0:	4962      	ldr	r1, [pc, #392]	; (801763c <test_transmit_receive_data+0x1e0>)
 80174b2:	4618      	mov	r0, r3
 80174b4:	f000 f970 	bl	8017798 <memcpy>
				return result;
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	f107 0410 	add.w	r4, r7, #16
 80174be:	469c      	mov	ip, r3
 80174c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80174c4:	4665      	mov	r5, ip
 80174c6:	4626      	mov	r6, r4
 80174c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80174ca:	6028      	str	r0, [r5, #0]
 80174cc:	6069      	str	r1, [r5, #4]
 80174ce:	60aa      	str	r2, [r5, #8]
 80174d0:	60eb      	str	r3, [r5, #12]
 80174d2:	3410      	adds	r4, #16
 80174d4:	f10c 0c10 	add.w	ip, ip, #16
 80174d8:	4574      	cmp	r4, lr
 80174da:	d1f3      	bne.n	80174c4 <test_transmit_receive_data+0x68>
 80174dc:	4663      	mov	r3, ip
 80174de:	4622      	mov	r2, r4
 80174e0:	8811      	ldrh	r1, [r2, #0]
 80174e2:	7892      	ldrb	r2, [r2, #2]
 80174e4:	8019      	strh	r1, [r3, #0]
 80174e6:	709a      	strb	r2, [r3, #2]
 80174e8:	e09b      	b.n	8017622 <test_transmit_receive_data+0x1c6>
			}
			//Prepare Receive UART to receive data
			HAL_UART_Receive_IT(UART_4, data_buff_receiver2, lenght);
 80174ea:	79fb      	ldrb	r3, [r7, #7]
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	461a      	mov	r2, r3
 80174f0:	4953      	ldr	r1, [pc, #332]	; (8017640 <test_transmit_receive_data+0x1e4>)
 80174f2:	4850      	ldr	r0, [pc, #320]	; (8017634 <test_transmit_receive_data+0x1d8>)
 80174f4:	f7f2 fbce 	bl	8009c94 <HAL_UART_Receive_IT>
			//Prepare Receive UART to Transmit data
			HAL_UART_Transmit_IT(UART_5, data_buff_receiver1, lenght);
 80174f8:	79fb      	ldrb	r3, [r7, #7]
 80174fa:	b29b      	uxth	r3, r3
 80174fc:	461a      	mov	r2, r3
 80174fe:	494b      	ldr	r1, [pc, #300]	; (801762c <test_transmit_receive_data+0x1d0>)
 8017500:	484b      	ldr	r0, [pc, #300]	; (8017630 <test_transmit_receive_data+0x1d4>)
 8017502:	f7f2 fb69 	bl	8009bd8 <HAL_UART_Transmit_IT>

			receivere_UART5_flag_RxCpltCallback = FALSE;
 8017506:	4b4c      	ldr	r3, [pc, #304]	; (8017638 <test_transmit_receive_data+0x1dc>)
 8017508:	2200      	movs	r2, #0
 801750a:	701a      	strb	r2, [r3, #0]
		}
		//UART4 receivered data
		if(receivere_UART4_flag_RxCpltCallback==TRUE)
 801750c:	4b4d      	ldr	r3, [pc, #308]	; (8017644 <test_transmit_receive_data+0x1e8>)
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	2b01      	cmp	r3, #1
 8017512:	d147      	bne.n	80175a4 <test_transmit_receive_data+0x148>
		{
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 8017514:	2180      	movs	r1, #128	; 0x80
 8017516:	484c      	ldr	r0, [pc, #304]	; (8017648 <test_transmit_receive_data+0x1ec>)
 8017518:	f7ed fcfb 	bl	8004f12 <HAL_GPIO_TogglePin>
			// check the transmit  data
			if( check_data(data,data_buff_receiver1,lenght)==FALSE )
 801751c:	79fb      	ldrb	r3, [r7, #7]
 801751e:	461a      	mov	r2, r3
 8017520:	4942      	ldr	r1, [pc, #264]	; (801762c <test_transmit_receive_data+0x1d0>)
 8017522:	68b8      	ldr	r0, [r7, #8]
 8017524:	f7ff f96a 	bl	80167fc <check_data>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d122      	bne.n	8017574 <test_transmit_receive_data+0x118>
			{
				result.bool_test=FALSE;
 801752e:	2300      	movs	r3, #0
 8017530:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , STR_FAIL_UART4_RECEIVE,  strlen(STR_FAIL_UART4_RECEIVE)+1);
 8017532:	f107 0310 	add.w	r3, r7, #16
 8017536:	3301      	adds	r3, #1
 8017538:	2224      	movs	r2, #36	; 0x24
 801753a:	4944      	ldr	r1, [pc, #272]	; (801764c <test_transmit_receive_data+0x1f0>)
 801753c:	4618      	mov	r0, r3
 801753e:	f000 f92b 	bl	8017798 <memcpy>
				return result;
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	f107 0410 	add.w	r4, r7, #16
 8017548:	469c      	mov	ip, r3
 801754a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801754e:	4665      	mov	r5, ip
 8017550:	4626      	mov	r6, r4
 8017552:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017554:	6028      	str	r0, [r5, #0]
 8017556:	6069      	str	r1, [r5, #4]
 8017558:	60aa      	str	r2, [r5, #8]
 801755a:	60eb      	str	r3, [r5, #12]
 801755c:	3410      	adds	r4, #16
 801755e:	f10c 0c10 	add.w	ip, ip, #16
 8017562:	4574      	cmp	r4, lr
 8017564:	d1f3      	bne.n	801754e <test_transmit_receive_data+0xf2>
 8017566:	4663      	mov	r3, ip
 8017568:	4622      	mov	r2, r4
 801756a:	8811      	ldrh	r1, [r2, #0]
 801756c:	7892      	ldrb	r2, [r2, #2]
 801756e:	8019      	strh	r1, [r3, #0]
 8017570:	709a      	strb	r2, [r3, #2]
 8017572:	e056      	b.n	8017622 <test_transmit_receive_data+0x1c6>
			}
			receivere_UART4_flag_RxCpltCallback= FALSE;
 8017574:	4b33      	ldr	r3, [pc, #204]	; (8017644 <test_transmit_receive_data+0x1e8>)
 8017576:	2200      	movs	r2, #0
 8017578:	701a      	strb	r2, [r3, #0]
			break;
 801757a:	bf00      	nop
			memcpy(result.msg , STR_FAIL_TIMEOUT,  strlen(STR_FAIL_TIMEOUT)+1 );
			return result;
		}

	}
	printf("\r\n  end \r\n");
 801757c:	4834      	ldr	r0, [pc, #208]	; (8017650 <test_transmit_receive_data+0x1f4>)
 801757e:	f000 f9a7 	bl	80178d0 <puts>
	result.bool_test=TRUE;
 8017582:	2301      	movs	r3, #1
 8017584:	743b      	strb	r3, [r7, #16]
	memcpy(result.msg , STR_SUCCESS,  strlen(STR_SUCCESS)+1);
 8017586:	f107 0310 	add.w	r3, r7, #16
 801758a:	3301      	adds	r3, #1
 801758c:	220c      	movs	r2, #12
 801758e:	4931      	ldr	r1, [pc, #196]	; (8017654 <test_transmit_receive_data+0x1f8>)
 8017590:	4618      	mov	r0, r3
 8017592:	f000 f901 	bl	8017798 <memcpy>

	return result;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	f107 0410 	add.w	r4, r7, #16
 801759c:	469c      	mov	ip, r3
 801759e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80175a2:	e02c      	b.n	80175fe <test_transmit_receive_data+0x1a2>
		HAL_Delay(10);
 80175a4:	200a      	movs	r0, #10
 80175a6:	f7ea fda9 	bl	80020fc <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 80175aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175ac:	3301      	adds	r3, #1
 80175ae:	647b      	str	r3, [r7, #68]	; 0x44
 80175b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175b2:	2b05      	cmp	r3, #5
 80175b4:	f77f af69 	ble.w	801748a <test_transmit_receive_data+0x2e>
			result.bool_test=FALSE;
 80175b8:	2300      	movs	r3, #0
 80175ba:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , STR_FAIL_TIMEOUT,  strlen(STR_FAIL_TIMEOUT)+1 );
 80175bc:	f107 0310 	add.w	r3, r7, #16
 80175c0:	3301      	adds	r3, #1
 80175c2:	220f      	movs	r2, #15
 80175c4:	4924      	ldr	r1, [pc, #144]	; (8017658 <test_transmit_receive_data+0x1fc>)
 80175c6:	4618      	mov	r0, r3
 80175c8:	f000 f8e6 	bl	8017798 <memcpy>
			return result;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	f107 0410 	add.w	r4, r7, #16
 80175d2:	469c      	mov	ip, r3
 80175d4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80175d8:	4665      	mov	r5, ip
 80175da:	4626      	mov	r6, r4
 80175dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80175de:	6028      	str	r0, [r5, #0]
 80175e0:	6069      	str	r1, [r5, #4]
 80175e2:	60aa      	str	r2, [r5, #8]
 80175e4:	60eb      	str	r3, [r5, #12]
 80175e6:	3410      	adds	r4, #16
 80175e8:	f10c 0c10 	add.w	ip, ip, #16
 80175ec:	4574      	cmp	r4, lr
 80175ee:	d1f3      	bne.n	80175d8 <test_transmit_receive_data+0x17c>
 80175f0:	4663      	mov	r3, ip
 80175f2:	4622      	mov	r2, r4
 80175f4:	8811      	ldrh	r1, [r2, #0]
 80175f6:	7892      	ldrb	r2, [r2, #2]
 80175f8:	8019      	strh	r1, [r3, #0]
 80175fa:	709a      	strb	r2, [r3, #2]
 80175fc:	e011      	b.n	8017622 <test_transmit_receive_data+0x1c6>
	return result;
 80175fe:	4665      	mov	r5, ip
 8017600:	4626      	mov	r6, r4
 8017602:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017604:	6028      	str	r0, [r5, #0]
 8017606:	6069      	str	r1, [r5, #4]
 8017608:	60aa      	str	r2, [r5, #8]
 801760a:	60eb      	str	r3, [r5, #12]
 801760c:	3410      	adds	r4, #16
 801760e:	f10c 0c10 	add.w	ip, ip, #16
 8017612:	4574      	cmp	r4, lr
 8017614:	d1f3      	bne.n	80175fe <test_transmit_receive_data+0x1a2>
 8017616:	4663      	mov	r3, ip
 8017618:	4622      	mov	r2, r4
 801761a:	8811      	ldrh	r1, [r2, #0]
 801761c:	7892      	ldrb	r2, [r2, #2]
 801761e:	8019      	strh	r1, [r3, #0]
 8017620:	709a      	strb	r2, [r3, #2]

}
 8017622:	68f8      	ldr	r0, [r7, #12]
 8017624:	374c      	adds	r7, #76	; 0x4c
 8017626:	46bd      	mov	sp, r7
 8017628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801762a:	bf00      	nop
 801762c:	200090bc 	.word	0x200090bc
 8017630:	200007ec 	.word	0x200007ec
 8017634:	20000764 	.word	0x20000764
 8017638:	20008fc6 	.word	0x20008fc6
 801763c:	0801b450 	.word	0x0801b450
 8017640:	200090a8 	.word	0x200090a8
 8017644:	20008fc7 	.word	0x20008fc7
 8017648:	40020400 	.word	0x40020400
 801764c:	0801b474 	.word	0x0801b474
 8017650:	0801b4a8 	.word	0x0801b4a8
 8017654:	0801b4b4 	.word	0x0801b4b4
 8017658:	0801b498 	.word	0x0801b498

0801765c <UART_tests>:


void UART_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 801765c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801765e:	b093      	sub	sp, #76	; 0x4c
 8017660:	af00      	add	r7, sp, #0
 8017662:	6478      	str	r0, [r7, #68]	; 0x44
 8017664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017666:	460b      	mov	r3, r1
 8017668:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801766c:	4613      	mov	r3, r2
 801766e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	*result=test_transmit_receive_data(data,lenght);
 8017672:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8017674:	463b      	mov	r3, r7
 8017676:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801767a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801767c:	4618      	mov	r0, r3
 801767e:	f7ff feed 	bl	801745c <test_transmit_receive_data>
 8017682:	463b      	mov	r3, r7
 8017684:	4620      	mov	r0, r4
 8017686:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801768a:	4602      	mov	r2, r0
 801768c:	4619      	mov	r1, r3
 801768e:	f8d1 c000 	ldr.w	ip, [r1]
 8017692:	684e      	ldr	r6, [r1, #4]
 8017694:	688d      	ldr	r5, [r1, #8]
 8017696:	68c9      	ldr	r1, [r1, #12]
 8017698:	f8c2 c000 	str.w	ip, [r2]
 801769c:	6056      	str	r6, [r2, #4]
 801769e:	6095      	str	r5, [r2, #8]
 80176a0:	60d1      	str	r1, [r2, #12]
 80176a2:	3310      	adds	r3, #16
 80176a4:	3010      	adds	r0, #16
 80176a6:	42a3      	cmp	r3, r4
 80176a8:	d1ef      	bne.n	801768a <UART_tests+0x2e>
 80176aa:	4602      	mov	r2, r0
 80176ac:	8819      	ldrh	r1, [r3, #0]
 80176ae:	789b      	ldrb	r3, [r3, #2]
 80176b0:	8011      	strh	r1, [r2, #0]
 80176b2:	7093      	strb	r3, [r2, #2]
}
 80176b4:	bf00      	nop
 80176b6:	374c      	adds	r7, #76	; 0x4c
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176bc <timer_test>:
#include "RTG.h"
#include "tests.h"

//check is the timer work good
void timer_test( result_test*result)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b084      	sub	sp, #16
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]

	//init PSC_counter
	int PSC_counter=PSC_COUNTER_INIT;
 80176c4:	2304      	movs	r3, #4
 80176c6:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		if(time_flag_PeriodElapsedCallback==TRUE)
 80176c8:	4b15      	ldr	r3, [pc, #84]	; (8017720 <timer_test+0x64>)
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d1fb      	bne.n	80176c8 <timer_test+0xc>
		{
			PSC_counter--;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	3b01      	subs	r3, #1
 80176d4:	60fb      	str	r3, [r7, #12]
			time_flag_PeriodElapsedCallback=FALSE;
 80176d6:	4b12      	ldr	r3, [pc, #72]	; (8017720 <timer_test+0x64>)
 80176d8:	2200      	movs	r2, #0
 80176da:	701a      	strb	r2, [r3, #0]

			if(PSC_counter==0)
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d000      	beq.n	80176e4 <timer_test+0x28>
		if(time_flag_PeriodElapsedCallback==TRUE)
 80176e2:	e7f1      	b.n	80176c8 <timer_test+0xc>
				break;
 80176e4:	bf00      	nop
		}
	}

	//check how many Period elapsed
	 if(PeriodElapsedCallback_couter==PSC_counter_expected)
 80176e6:	4b0f      	ldr	r3, [pc, #60]	; (8017724 <timer_test+0x68>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b04      	cmp	r3, #4
 80176ec:	d10a      	bne.n	8017704 <timer_test+0x48>
	 {
		 result->bool_test=TRUE;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2201      	movs	r2, #1
 80176f2:	701a      	strb	r2, [r3, #0]
		 memcpy(result->msg , STR_SUCCESS,  strlen(STR_SUCCESS)+1);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	3301      	adds	r3, #1
 80176f8:	220c      	movs	r2, #12
 80176fa:	490b      	ldr	r1, [pc, #44]	; (8017728 <timer_test+0x6c>)
 80176fc:	4618      	mov	r0, r3
 80176fe:	f000 f84b 	bl	8017798 <memcpy>
	 {
		 result->bool_test=FALSE;
		 memcpy(result->msg , STR_FAIL_TIMER,  strlen(STR_FAIL_TIMER)+1);

	 }
}
 8017702:	e009      	b.n	8017718 <timer_test+0x5c>
		 result->bool_test=FALSE;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2200      	movs	r2, #0
 8017708:	701a      	strb	r2, [r3, #0]
		 memcpy(result->msg , STR_FAIL_TIMER,  strlen(STR_FAIL_TIMER)+1);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	3301      	adds	r3, #1
 801770e:	2224      	movs	r2, #36	; 0x24
 8017710:	4906      	ldr	r1, [pc, #24]	; (801772c <timer_test+0x70>)
 8017712:	4618      	mov	r0, r3
 8017714:	f000 f840 	bl	8017798 <memcpy>
}
 8017718:	bf00      	nop
 801771a:	3710      	adds	r7, #16
 801771c:	46bd      	mov	sp, r7
 801771e:	bd80      	pop	{r7, pc}
 8017720:	20008fcb 	.word	0x20008fcb
 8017724:	20008fcc 	.word	0x20008fcc
 8017728:	0801b4c0 	.word	0x0801b4c0
 801772c:	0801b4cc 	.word	0x0801b4cc

08017730 <__libc_init_array>:
 8017730:	b570      	push	{r4, r5, r6, lr}
 8017732:	4d0d      	ldr	r5, [pc, #52]	; (8017768 <__libc_init_array+0x38>)
 8017734:	4c0d      	ldr	r4, [pc, #52]	; (801776c <__libc_init_array+0x3c>)
 8017736:	1b64      	subs	r4, r4, r5
 8017738:	10a4      	asrs	r4, r4, #2
 801773a:	2600      	movs	r6, #0
 801773c:	42a6      	cmp	r6, r4
 801773e:	d109      	bne.n	8017754 <__libc_init_array+0x24>
 8017740:	4d0b      	ldr	r5, [pc, #44]	; (8017770 <__libc_init_array+0x40>)
 8017742:	4c0c      	ldr	r4, [pc, #48]	; (8017774 <__libc_init_array+0x44>)
 8017744:	f001 f904 	bl	8018950 <_init>
 8017748:	1b64      	subs	r4, r4, r5
 801774a:	10a4      	asrs	r4, r4, #2
 801774c:	2600      	movs	r6, #0
 801774e:	42a6      	cmp	r6, r4
 8017750:	d105      	bne.n	801775e <__libc_init_array+0x2e>
 8017752:	bd70      	pop	{r4, r5, r6, pc}
 8017754:	f855 3b04 	ldr.w	r3, [r5], #4
 8017758:	4798      	blx	r3
 801775a:	3601      	adds	r6, #1
 801775c:	e7ee      	b.n	801773c <__libc_init_array+0xc>
 801775e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017762:	4798      	blx	r3
 8017764:	3601      	adds	r6, #1
 8017766:	e7f2      	b.n	801774e <__libc_init_array+0x1e>
 8017768:	0801b750 	.word	0x0801b750
 801776c:	0801b750 	.word	0x0801b750
 8017770:	0801b750 	.word	0x0801b750
 8017774:	0801b754 	.word	0x0801b754

08017778 <memcmp>:
 8017778:	b510      	push	{r4, lr}
 801777a:	3901      	subs	r1, #1
 801777c:	4402      	add	r2, r0
 801777e:	4290      	cmp	r0, r2
 8017780:	d101      	bne.n	8017786 <memcmp+0xe>
 8017782:	2000      	movs	r0, #0
 8017784:	e005      	b.n	8017792 <memcmp+0x1a>
 8017786:	7803      	ldrb	r3, [r0, #0]
 8017788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801778c:	42a3      	cmp	r3, r4
 801778e:	d001      	beq.n	8017794 <memcmp+0x1c>
 8017790:	1b18      	subs	r0, r3, r4
 8017792:	bd10      	pop	{r4, pc}
 8017794:	3001      	adds	r0, #1
 8017796:	e7f2      	b.n	801777e <memcmp+0x6>

08017798 <memcpy>:
 8017798:	440a      	add	r2, r1
 801779a:	4291      	cmp	r1, r2
 801779c:	f100 33ff 	add.w	r3, r0, #4294967295
 80177a0:	d100      	bne.n	80177a4 <memcpy+0xc>
 80177a2:	4770      	bx	lr
 80177a4:	b510      	push	{r4, lr}
 80177a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177ae:	4291      	cmp	r1, r2
 80177b0:	d1f9      	bne.n	80177a6 <memcpy+0xe>
 80177b2:	bd10      	pop	{r4, pc}

080177b4 <memset>:
 80177b4:	4402      	add	r2, r0
 80177b6:	4603      	mov	r3, r0
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d100      	bne.n	80177be <memset+0xa>
 80177bc:	4770      	bx	lr
 80177be:	f803 1b01 	strb.w	r1, [r3], #1
 80177c2:	e7f9      	b.n	80177b8 <memset+0x4>

080177c4 <iprintf>:
 80177c4:	b40f      	push	{r0, r1, r2, r3}
 80177c6:	4b0a      	ldr	r3, [pc, #40]	; (80177f0 <iprintf+0x2c>)
 80177c8:	b513      	push	{r0, r1, r4, lr}
 80177ca:	681c      	ldr	r4, [r3, #0]
 80177cc:	b124      	cbz	r4, 80177d8 <iprintf+0x14>
 80177ce:	69a3      	ldr	r3, [r4, #24]
 80177d0:	b913      	cbnz	r3, 80177d8 <iprintf+0x14>
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 faba 	bl	8017d4c <__sinit>
 80177d8:	ab05      	add	r3, sp, #20
 80177da:	9a04      	ldr	r2, [sp, #16]
 80177dc:	68a1      	ldr	r1, [r4, #8]
 80177de:	9301      	str	r3, [sp, #4]
 80177e0:	4620      	mov	r0, r4
 80177e2:	f000 fcdd 	bl	80181a0 <_vfiprintf_r>
 80177e6:	b002      	add	sp, #8
 80177e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177ec:	b004      	add	sp, #16
 80177ee:	4770      	bx	lr
 80177f0:	2000002c 	.word	0x2000002c

080177f4 <_puts_r>:
 80177f4:	b570      	push	{r4, r5, r6, lr}
 80177f6:	460e      	mov	r6, r1
 80177f8:	4605      	mov	r5, r0
 80177fa:	b118      	cbz	r0, 8017804 <_puts_r+0x10>
 80177fc:	6983      	ldr	r3, [r0, #24]
 80177fe:	b90b      	cbnz	r3, 8017804 <_puts_r+0x10>
 8017800:	f000 faa4 	bl	8017d4c <__sinit>
 8017804:	69ab      	ldr	r3, [r5, #24]
 8017806:	68ac      	ldr	r4, [r5, #8]
 8017808:	b913      	cbnz	r3, 8017810 <_puts_r+0x1c>
 801780a:	4628      	mov	r0, r5
 801780c:	f000 fa9e 	bl	8017d4c <__sinit>
 8017810:	4b2c      	ldr	r3, [pc, #176]	; (80178c4 <_puts_r+0xd0>)
 8017812:	429c      	cmp	r4, r3
 8017814:	d120      	bne.n	8017858 <_puts_r+0x64>
 8017816:	686c      	ldr	r4, [r5, #4]
 8017818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801781a:	07db      	lsls	r3, r3, #31
 801781c:	d405      	bmi.n	801782a <_puts_r+0x36>
 801781e:	89a3      	ldrh	r3, [r4, #12]
 8017820:	0598      	lsls	r0, r3, #22
 8017822:	d402      	bmi.n	801782a <_puts_r+0x36>
 8017824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017826:	f000 fb41 	bl	8017eac <__retarget_lock_acquire_recursive>
 801782a:	89a3      	ldrh	r3, [r4, #12]
 801782c:	0719      	lsls	r1, r3, #28
 801782e:	d51d      	bpl.n	801786c <_puts_r+0x78>
 8017830:	6923      	ldr	r3, [r4, #16]
 8017832:	b1db      	cbz	r3, 801786c <_puts_r+0x78>
 8017834:	3e01      	subs	r6, #1
 8017836:	68a3      	ldr	r3, [r4, #8]
 8017838:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801783c:	3b01      	subs	r3, #1
 801783e:	60a3      	str	r3, [r4, #8]
 8017840:	bb39      	cbnz	r1, 8017892 <_puts_r+0x9e>
 8017842:	2b00      	cmp	r3, #0
 8017844:	da38      	bge.n	80178b8 <_puts_r+0xc4>
 8017846:	4622      	mov	r2, r4
 8017848:	210a      	movs	r1, #10
 801784a:	4628      	mov	r0, r5
 801784c:	f000 f886 	bl	801795c <__swbuf_r>
 8017850:	3001      	adds	r0, #1
 8017852:	d011      	beq.n	8017878 <_puts_r+0x84>
 8017854:	250a      	movs	r5, #10
 8017856:	e011      	b.n	801787c <_puts_r+0x88>
 8017858:	4b1b      	ldr	r3, [pc, #108]	; (80178c8 <_puts_r+0xd4>)
 801785a:	429c      	cmp	r4, r3
 801785c:	d101      	bne.n	8017862 <_puts_r+0x6e>
 801785e:	68ac      	ldr	r4, [r5, #8]
 8017860:	e7da      	b.n	8017818 <_puts_r+0x24>
 8017862:	4b1a      	ldr	r3, [pc, #104]	; (80178cc <_puts_r+0xd8>)
 8017864:	429c      	cmp	r4, r3
 8017866:	bf08      	it	eq
 8017868:	68ec      	ldreq	r4, [r5, #12]
 801786a:	e7d5      	b.n	8017818 <_puts_r+0x24>
 801786c:	4621      	mov	r1, r4
 801786e:	4628      	mov	r0, r5
 8017870:	f000 f8c6 	bl	8017a00 <__swsetup_r>
 8017874:	2800      	cmp	r0, #0
 8017876:	d0dd      	beq.n	8017834 <_puts_r+0x40>
 8017878:	f04f 35ff 	mov.w	r5, #4294967295
 801787c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801787e:	07da      	lsls	r2, r3, #31
 8017880:	d405      	bmi.n	801788e <_puts_r+0x9a>
 8017882:	89a3      	ldrh	r3, [r4, #12]
 8017884:	059b      	lsls	r3, r3, #22
 8017886:	d402      	bmi.n	801788e <_puts_r+0x9a>
 8017888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801788a:	f000 fb10 	bl	8017eae <__retarget_lock_release_recursive>
 801788e:	4628      	mov	r0, r5
 8017890:	bd70      	pop	{r4, r5, r6, pc}
 8017892:	2b00      	cmp	r3, #0
 8017894:	da04      	bge.n	80178a0 <_puts_r+0xac>
 8017896:	69a2      	ldr	r2, [r4, #24]
 8017898:	429a      	cmp	r2, r3
 801789a:	dc06      	bgt.n	80178aa <_puts_r+0xb6>
 801789c:	290a      	cmp	r1, #10
 801789e:	d004      	beq.n	80178aa <_puts_r+0xb6>
 80178a0:	6823      	ldr	r3, [r4, #0]
 80178a2:	1c5a      	adds	r2, r3, #1
 80178a4:	6022      	str	r2, [r4, #0]
 80178a6:	7019      	strb	r1, [r3, #0]
 80178a8:	e7c5      	b.n	8017836 <_puts_r+0x42>
 80178aa:	4622      	mov	r2, r4
 80178ac:	4628      	mov	r0, r5
 80178ae:	f000 f855 	bl	801795c <__swbuf_r>
 80178b2:	3001      	adds	r0, #1
 80178b4:	d1bf      	bne.n	8017836 <_puts_r+0x42>
 80178b6:	e7df      	b.n	8017878 <_puts_r+0x84>
 80178b8:	6823      	ldr	r3, [r4, #0]
 80178ba:	250a      	movs	r5, #10
 80178bc:	1c5a      	adds	r2, r3, #1
 80178be:	6022      	str	r2, [r4, #0]
 80178c0:	701d      	strb	r5, [r3, #0]
 80178c2:	e7db      	b.n	801787c <_puts_r+0x88>
 80178c4:	0801b6d4 	.word	0x0801b6d4
 80178c8:	0801b6f4 	.word	0x0801b6f4
 80178cc:	0801b6b4 	.word	0x0801b6b4

080178d0 <puts>:
 80178d0:	4b02      	ldr	r3, [pc, #8]	; (80178dc <puts+0xc>)
 80178d2:	4601      	mov	r1, r0
 80178d4:	6818      	ldr	r0, [r3, #0]
 80178d6:	f7ff bf8d 	b.w	80177f4 <_puts_r>
 80178da:	bf00      	nop
 80178dc:	2000002c 	.word	0x2000002c

080178e0 <rand>:
 80178e0:	4b16      	ldr	r3, [pc, #88]	; (801793c <rand+0x5c>)
 80178e2:	b510      	push	{r4, lr}
 80178e4:	681c      	ldr	r4, [r3, #0]
 80178e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80178e8:	b9b3      	cbnz	r3, 8017918 <rand+0x38>
 80178ea:	2018      	movs	r0, #24
 80178ec:	f000 fb46 	bl	8017f7c <malloc>
 80178f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80178f2:	b928      	cbnz	r0, 8017900 <rand+0x20>
 80178f4:	4602      	mov	r2, r0
 80178f6:	4b12      	ldr	r3, [pc, #72]	; (8017940 <rand+0x60>)
 80178f8:	4812      	ldr	r0, [pc, #72]	; (8017944 <rand+0x64>)
 80178fa:	214e      	movs	r1, #78	; 0x4e
 80178fc:	f000 f8ee 	bl	8017adc <__assert_func>
 8017900:	4a11      	ldr	r2, [pc, #68]	; (8017948 <rand+0x68>)
 8017902:	4b12      	ldr	r3, [pc, #72]	; (801794c <rand+0x6c>)
 8017904:	e9c0 2300 	strd	r2, r3, [r0]
 8017908:	4b11      	ldr	r3, [pc, #68]	; (8017950 <rand+0x70>)
 801790a:	6083      	str	r3, [r0, #8]
 801790c:	230b      	movs	r3, #11
 801790e:	8183      	strh	r3, [r0, #12]
 8017910:	2201      	movs	r2, #1
 8017912:	2300      	movs	r3, #0
 8017914:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017918:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801791a:	4a0e      	ldr	r2, [pc, #56]	; (8017954 <rand+0x74>)
 801791c:	6920      	ldr	r0, [r4, #16]
 801791e:	6963      	ldr	r3, [r4, #20]
 8017920:	490d      	ldr	r1, [pc, #52]	; (8017958 <rand+0x78>)
 8017922:	4342      	muls	r2, r0
 8017924:	fb01 2203 	mla	r2, r1, r3, r2
 8017928:	fba0 0101 	umull	r0, r1, r0, r1
 801792c:	1c43      	adds	r3, r0, #1
 801792e:	eb42 0001 	adc.w	r0, r2, r1
 8017932:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017936:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801793a:	bd10      	pop	{r4, pc}
 801793c:	2000002c 	.word	0x2000002c
 8017940:	0801b604 	.word	0x0801b604
 8017944:	0801b61b 	.word	0x0801b61b
 8017948:	abcd330e 	.word	0xabcd330e
 801794c:	e66d1234 	.word	0xe66d1234
 8017950:	0005deec 	.word	0x0005deec
 8017954:	5851f42d 	.word	0x5851f42d
 8017958:	4c957f2d 	.word	0x4c957f2d

0801795c <__swbuf_r>:
 801795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801795e:	460e      	mov	r6, r1
 8017960:	4614      	mov	r4, r2
 8017962:	4605      	mov	r5, r0
 8017964:	b118      	cbz	r0, 801796e <__swbuf_r+0x12>
 8017966:	6983      	ldr	r3, [r0, #24]
 8017968:	b90b      	cbnz	r3, 801796e <__swbuf_r+0x12>
 801796a:	f000 f9ef 	bl	8017d4c <__sinit>
 801796e:	4b21      	ldr	r3, [pc, #132]	; (80179f4 <__swbuf_r+0x98>)
 8017970:	429c      	cmp	r4, r3
 8017972:	d12b      	bne.n	80179cc <__swbuf_r+0x70>
 8017974:	686c      	ldr	r4, [r5, #4]
 8017976:	69a3      	ldr	r3, [r4, #24]
 8017978:	60a3      	str	r3, [r4, #8]
 801797a:	89a3      	ldrh	r3, [r4, #12]
 801797c:	071a      	lsls	r2, r3, #28
 801797e:	d52f      	bpl.n	80179e0 <__swbuf_r+0x84>
 8017980:	6923      	ldr	r3, [r4, #16]
 8017982:	b36b      	cbz	r3, 80179e0 <__swbuf_r+0x84>
 8017984:	6923      	ldr	r3, [r4, #16]
 8017986:	6820      	ldr	r0, [r4, #0]
 8017988:	1ac0      	subs	r0, r0, r3
 801798a:	6963      	ldr	r3, [r4, #20]
 801798c:	b2f6      	uxtb	r6, r6
 801798e:	4283      	cmp	r3, r0
 8017990:	4637      	mov	r7, r6
 8017992:	dc04      	bgt.n	801799e <__swbuf_r+0x42>
 8017994:	4621      	mov	r1, r4
 8017996:	4628      	mov	r0, r5
 8017998:	f000 f944 	bl	8017c24 <_fflush_r>
 801799c:	bb30      	cbnz	r0, 80179ec <__swbuf_r+0x90>
 801799e:	68a3      	ldr	r3, [r4, #8]
 80179a0:	3b01      	subs	r3, #1
 80179a2:	60a3      	str	r3, [r4, #8]
 80179a4:	6823      	ldr	r3, [r4, #0]
 80179a6:	1c5a      	adds	r2, r3, #1
 80179a8:	6022      	str	r2, [r4, #0]
 80179aa:	701e      	strb	r6, [r3, #0]
 80179ac:	6963      	ldr	r3, [r4, #20]
 80179ae:	3001      	adds	r0, #1
 80179b0:	4283      	cmp	r3, r0
 80179b2:	d004      	beq.n	80179be <__swbuf_r+0x62>
 80179b4:	89a3      	ldrh	r3, [r4, #12]
 80179b6:	07db      	lsls	r3, r3, #31
 80179b8:	d506      	bpl.n	80179c8 <__swbuf_r+0x6c>
 80179ba:	2e0a      	cmp	r6, #10
 80179bc:	d104      	bne.n	80179c8 <__swbuf_r+0x6c>
 80179be:	4621      	mov	r1, r4
 80179c0:	4628      	mov	r0, r5
 80179c2:	f000 f92f 	bl	8017c24 <_fflush_r>
 80179c6:	b988      	cbnz	r0, 80179ec <__swbuf_r+0x90>
 80179c8:	4638      	mov	r0, r7
 80179ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179cc:	4b0a      	ldr	r3, [pc, #40]	; (80179f8 <__swbuf_r+0x9c>)
 80179ce:	429c      	cmp	r4, r3
 80179d0:	d101      	bne.n	80179d6 <__swbuf_r+0x7a>
 80179d2:	68ac      	ldr	r4, [r5, #8]
 80179d4:	e7cf      	b.n	8017976 <__swbuf_r+0x1a>
 80179d6:	4b09      	ldr	r3, [pc, #36]	; (80179fc <__swbuf_r+0xa0>)
 80179d8:	429c      	cmp	r4, r3
 80179da:	bf08      	it	eq
 80179dc:	68ec      	ldreq	r4, [r5, #12]
 80179de:	e7ca      	b.n	8017976 <__swbuf_r+0x1a>
 80179e0:	4621      	mov	r1, r4
 80179e2:	4628      	mov	r0, r5
 80179e4:	f000 f80c 	bl	8017a00 <__swsetup_r>
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d0cb      	beq.n	8017984 <__swbuf_r+0x28>
 80179ec:	f04f 37ff 	mov.w	r7, #4294967295
 80179f0:	e7ea      	b.n	80179c8 <__swbuf_r+0x6c>
 80179f2:	bf00      	nop
 80179f4:	0801b6d4 	.word	0x0801b6d4
 80179f8:	0801b6f4 	.word	0x0801b6f4
 80179fc:	0801b6b4 	.word	0x0801b6b4

08017a00 <__swsetup_r>:
 8017a00:	4b32      	ldr	r3, [pc, #200]	; (8017acc <__swsetup_r+0xcc>)
 8017a02:	b570      	push	{r4, r5, r6, lr}
 8017a04:	681d      	ldr	r5, [r3, #0]
 8017a06:	4606      	mov	r6, r0
 8017a08:	460c      	mov	r4, r1
 8017a0a:	b125      	cbz	r5, 8017a16 <__swsetup_r+0x16>
 8017a0c:	69ab      	ldr	r3, [r5, #24]
 8017a0e:	b913      	cbnz	r3, 8017a16 <__swsetup_r+0x16>
 8017a10:	4628      	mov	r0, r5
 8017a12:	f000 f99b 	bl	8017d4c <__sinit>
 8017a16:	4b2e      	ldr	r3, [pc, #184]	; (8017ad0 <__swsetup_r+0xd0>)
 8017a18:	429c      	cmp	r4, r3
 8017a1a:	d10f      	bne.n	8017a3c <__swsetup_r+0x3c>
 8017a1c:	686c      	ldr	r4, [r5, #4]
 8017a1e:	89a3      	ldrh	r3, [r4, #12]
 8017a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a24:	0719      	lsls	r1, r3, #28
 8017a26:	d42c      	bmi.n	8017a82 <__swsetup_r+0x82>
 8017a28:	06dd      	lsls	r5, r3, #27
 8017a2a:	d411      	bmi.n	8017a50 <__swsetup_r+0x50>
 8017a2c:	2309      	movs	r3, #9
 8017a2e:	6033      	str	r3, [r6, #0]
 8017a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a34:	81a3      	strh	r3, [r4, #12]
 8017a36:	f04f 30ff 	mov.w	r0, #4294967295
 8017a3a:	e03e      	b.n	8017aba <__swsetup_r+0xba>
 8017a3c:	4b25      	ldr	r3, [pc, #148]	; (8017ad4 <__swsetup_r+0xd4>)
 8017a3e:	429c      	cmp	r4, r3
 8017a40:	d101      	bne.n	8017a46 <__swsetup_r+0x46>
 8017a42:	68ac      	ldr	r4, [r5, #8]
 8017a44:	e7eb      	b.n	8017a1e <__swsetup_r+0x1e>
 8017a46:	4b24      	ldr	r3, [pc, #144]	; (8017ad8 <__swsetup_r+0xd8>)
 8017a48:	429c      	cmp	r4, r3
 8017a4a:	bf08      	it	eq
 8017a4c:	68ec      	ldreq	r4, [r5, #12]
 8017a4e:	e7e6      	b.n	8017a1e <__swsetup_r+0x1e>
 8017a50:	0758      	lsls	r0, r3, #29
 8017a52:	d512      	bpl.n	8017a7a <__swsetup_r+0x7a>
 8017a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a56:	b141      	cbz	r1, 8017a6a <__swsetup_r+0x6a>
 8017a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a5c:	4299      	cmp	r1, r3
 8017a5e:	d002      	beq.n	8017a66 <__swsetup_r+0x66>
 8017a60:	4630      	mov	r0, r6
 8017a62:	f000 fa93 	bl	8017f8c <_free_r>
 8017a66:	2300      	movs	r3, #0
 8017a68:	6363      	str	r3, [r4, #52]	; 0x34
 8017a6a:	89a3      	ldrh	r3, [r4, #12]
 8017a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a70:	81a3      	strh	r3, [r4, #12]
 8017a72:	2300      	movs	r3, #0
 8017a74:	6063      	str	r3, [r4, #4]
 8017a76:	6923      	ldr	r3, [r4, #16]
 8017a78:	6023      	str	r3, [r4, #0]
 8017a7a:	89a3      	ldrh	r3, [r4, #12]
 8017a7c:	f043 0308 	orr.w	r3, r3, #8
 8017a80:	81a3      	strh	r3, [r4, #12]
 8017a82:	6923      	ldr	r3, [r4, #16]
 8017a84:	b94b      	cbnz	r3, 8017a9a <__swsetup_r+0x9a>
 8017a86:	89a3      	ldrh	r3, [r4, #12]
 8017a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a90:	d003      	beq.n	8017a9a <__swsetup_r+0x9a>
 8017a92:	4621      	mov	r1, r4
 8017a94:	4630      	mov	r0, r6
 8017a96:	f000 fa31 	bl	8017efc <__smakebuf_r>
 8017a9a:	89a0      	ldrh	r0, [r4, #12]
 8017a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017aa0:	f010 0301 	ands.w	r3, r0, #1
 8017aa4:	d00a      	beq.n	8017abc <__swsetup_r+0xbc>
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	60a3      	str	r3, [r4, #8]
 8017aaa:	6963      	ldr	r3, [r4, #20]
 8017aac:	425b      	negs	r3, r3
 8017aae:	61a3      	str	r3, [r4, #24]
 8017ab0:	6923      	ldr	r3, [r4, #16]
 8017ab2:	b943      	cbnz	r3, 8017ac6 <__swsetup_r+0xc6>
 8017ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ab8:	d1ba      	bne.n	8017a30 <__swsetup_r+0x30>
 8017aba:	bd70      	pop	{r4, r5, r6, pc}
 8017abc:	0781      	lsls	r1, r0, #30
 8017abe:	bf58      	it	pl
 8017ac0:	6963      	ldrpl	r3, [r4, #20]
 8017ac2:	60a3      	str	r3, [r4, #8]
 8017ac4:	e7f4      	b.n	8017ab0 <__swsetup_r+0xb0>
 8017ac6:	2000      	movs	r0, #0
 8017ac8:	e7f7      	b.n	8017aba <__swsetup_r+0xba>
 8017aca:	bf00      	nop
 8017acc:	2000002c 	.word	0x2000002c
 8017ad0:	0801b6d4 	.word	0x0801b6d4
 8017ad4:	0801b6f4 	.word	0x0801b6f4
 8017ad8:	0801b6b4 	.word	0x0801b6b4

08017adc <__assert_func>:
 8017adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017ade:	4614      	mov	r4, r2
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	4b09      	ldr	r3, [pc, #36]	; (8017b08 <__assert_func+0x2c>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	4605      	mov	r5, r0
 8017ae8:	68d8      	ldr	r0, [r3, #12]
 8017aea:	b14c      	cbz	r4, 8017b00 <__assert_func+0x24>
 8017aec:	4b07      	ldr	r3, [pc, #28]	; (8017b0c <__assert_func+0x30>)
 8017aee:	9100      	str	r1, [sp, #0]
 8017af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017af4:	4906      	ldr	r1, [pc, #24]	; (8017b10 <__assert_func+0x34>)
 8017af6:	462b      	mov	r3, r5
 8017af8:	f000 f9a6 	bl	8017e48 <fiprintf>
 8017afc:	f000 fe7a 	bl	80187f4 <abort>
 8017b00:	4b04      	ldr	r3, [pc, #16]	; (8017b14 <__assert_func+0x38>)
 8017b02:	461c      	mov	r4, r3
 8017b04:	e7f3      	b.n	8017aee <__assert_func+0x12>
 8017b06:	bf00      	nop
 8017b08:	2000002c 	.word	0x2000002c
 8017b0c:	0801b676 	.word	0x0801b676
 8017b10:	0801b683 	.word	0x0801b683
 8017b14:	0801b6b1 	.word	0x0801b6b1

08017b18 <__sflush_r>:
 8017b18:	898a      	ldrh	r2, [r1, #12]
 8017b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b1e:	4605      	mov	r5, r0
 8017b20:	0710      	lsls	r0, r2, #28
 8017b22:	460c      	mov	r4, r1
 8017b24:	d458      	bmi.n	8017bd8 <__sflush_r+0xc0>
 8017b26:	684b      	ldr	r3, [r1, #4]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	dc05      	bgt.n	8017b38 <__sflush_r+0x20>
 8017b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	dc02      	bgt.n	8017b38 <__sflush_r+0x20>
 8017b32:	2000      	movs	r0, #0
 8017b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b3a:	2e00      	cmp	r6, #0
 8017b3c:	d0f9      	beq.n	8017b32 <__sflush_r+0x1a>
 8017b3e:	2300      	movs	r3, #0
 8017b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b44:	682f      	ldr	r7, [r5, #0]
 8017b46:	602b      	str	r3, [r5, #0]
 8017b48:	d032      	beq.n	8017bb0 <__sflush_r+0x98>
 8017b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b4c:	89a3      	ldrh	r3, [r4, #12]
 8017b4e:	075a      	lsls	r2, r3, #29
 8017b50:	d505      	bpl.n	8017b5e <__sflush_r+0x46>
 8017b52:	6863      	ldr	r3, [r4, #4]
 8017b54:	1ac0      	subs	r0, r0, r3
 8017b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b58:	b10b      	cbz	r3, 8017b5e <__sflush_r+0x46>
 8017b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b5c:	1ac0      	subs	r0, r0, r3
 8017b5e:	2300      	movs	r3, #0
 8017b60:	4602      	mov	r2, r0
 8017b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b64:	6a21      	ldr	r1, [r4, #32]
 8017b66:	4628      	mov	r0, r5
 8017b68:	47b0      	blx	r6
 8017b6a:	1c43      	adds	r3, r0, #1
 8017b6c:	89a3      	ldrh	r3, [r4, #12]
 8017b6e:	d106      	bne.n	8017b7e <__sflush_r+0x66>
 8017b70:	6829      	ldr	r1, [r5, #0]
 8017b72:	291d      	cmp	r1, #29
 8017b74:	d82c      	bhi.n	8017bd0 <__sflush_r+0xb8>
 8017b76:	4a2a      	ldr	r2, [pc, #168]	; (8017c20 <__sflush_r+0x108>)
 8017b78:	40ca      	lsrs	r2, r1
 8017b7a:	07d6      	lsls	r6, r2, #31
 8017b7c:	d528      	bpl.n	8017bd0 <__sflush_r+0xb8>
 8017b7e:	2200      	movs	r2, #0
 8017b80:	6062      	str	r2, [r4, #4]
 8017b82:	04d9      	lsls	r1, r3, #19
 8017b84:	6922      	ldr	r2, [r4, #16]
 8017b86:	6022      	str	r2, [r4, #0]
 8017b88:	d504      	bpl.n	8017b94 <__sflush_r+0x7c>
 8017b8a:	1c42      	adds	r2, r0, #1
 8017b8c:	d101      	bne.n	8017b92 <__sflush_r+0x7a>
 8017b8e:	682b      	ldr	r3, [r5, #0]
 8017b90:	b903      	cbnz	r3, 8017b94 <__sflush_r+0x7c>
 8017b92:	6560      	str	r0, [r4, #84]	; 0x54
 8017b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b96:	602f      	str	r7, [r5, #0]
 8017b98:	2900      	cmp	r1, #0
 8017b9a:	d0ca      	beq.n	8017b32 <__sflush_r+0x1a>
 8017b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ba0:	4299      	cmp	r1, r3
 8017ba2:	d002      	beq.n	8017baa <__sflush_r+0x92>
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	f000 f9f1 	bl	8017f8c <_free_r>
 8017baa:	2000      	movs	r0, #0
 8017bac:	6360      	str	r0, [r4, #52]	; 0x34
 8017bae:	e7c1      	b.n	8017b34 <__sflush_r+0x1c>
 8017bb0:	6a21      	ldr	r1, [r4, #32]
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	4628      	mov	r0, r5
 8017bb6:	47b0      	blx	r6
 8017bb8:	1c41      	adds	r1, r0, #1
 8017bba:	d1c7      	bne.n	8017b4c <__sflush_r+0x34>
 8017bbc:	682b      	ldr	r3, [r5, #0]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d0c4      	beq.n	8017b4c <__sflush_r+0x34>
 8017bc2:	2b1d      	cmp	r3, #29
 8017bc4:	d001      	beq.n	8017bca <__sflush_r+0xb2>
 8017bc6:	2b16      	cmp	r3, #22
 8017bc8:	d101      	bne.n	8017bce <__sflush_r+0xb6>
 8017bca:	602f      	str	r7, [r5, #0]
 8017bcc:	e7b1      	b.n	8017b32 <__sflush_r+0x1a>
 8017bce:	89a3      	ldrh	r3, [r4, #12]
 8017bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bd4:	81a3      	strh	r3, [r4, #12]
 8017bd6:	e7ad      	b.n	8017b34 <__sflush_r+0x1c>
 8017bd8:	690f      	ldr	r7, [r1, #16]
 8017bda:	2f00      	cmp	r7, #0
 8017bdc:	d0a9      	beq.n	8017b32 <__sflush_r+0x1a>
 8017bde:	0793      	lsls	r3, r2, #30
 8017be0:	680e      	ldr	r6, [r1, #0]
 8017be2:	bf08      	it	eq
 8017be4:	694b      	ldreq	r3, [r1, #20]
 8017be6:	600f      	str	r7, [r1, #0]
 8017be8:	bf18      	it	ne
 8017bea:	2300      	movne	r3, #0
 8017bec:	eba6 0807 	sub.w	r8, r6, r7
 8017bf0:	608b      	str	r3, [r1, #8]
 8017bf2:	f1b8 0f00 	cmp.w	r8, #0
 8017bf6:	dd9c      	ble.n	8017b32 <__sflush_r+0x1a>
 8017bf8:	6a21      	ldr	r1, [r4, #32]
 8017bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bfc:	4643      	mov	r3, r8
 8017bfe:	463a      	mov	r2, r7
 8017c00:	4628      	mov	r0, r5
 8017c02:	47b0      	blx	r6
 8017c04:	2800      	cmp	r0, #0
 8017c06:	dc06      	bgt.n	8017c16 <__sflush_r+0xfe>
 8017c08:	89a3      	ldrh	r3, [r4, #12]
 8017c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c0e:	81a3      	strh	r3, [r4, #12]
 8017c10:	f04f 30ff 	mov.w	r0, #4294967295
 8017c14:	e78e      	b.n	8017b34 <__sflush_r+0x1c>
 8017c16:	4407      	add	r7, r0
 8017c18:	eba8 0800 	sub.w	r8, r8, r0
 8017c1c:	e7e9      	b.n	8017bf2 <__sflush_r+0xda>
 8017c1e:	bf00      	nop
 8017c20:	20400001 	.word	0x20400001

08017c24 <_fflush_r>:
 8017c24:	b538      	push	{r3, r4, r5, lr}
 8017c26:	690b      	ldr	r3, [r1, #16]
 8017c28:	4605      	mov	r5, r0
 8017c2a:	460c      	mov	r4, r1
 8017c2c:	b913      	cbnz	r3, 8017c34 <_fflush_r+0x10>
 8017c2e:	2500      	movs	r5, #0
 8017c30:	4628      	mov	r0, r5
 8017c32:	bd38      	pop	{r3, r4, r5, pc}
 8017c34:	b118      	cbz	r0, 8017c3e <_fflush_r+0x1a>
 8017c36:	6983      	ldr	r3, [r0, #24]
 8017c38:	b90b      	cbnz	r3, 8017c3e <_fflush_r+0x1a>
 8017c3a:	f000 f887 	bl	8017d4c <__sinit>
 8017c3e:	4b14      	ldr	r3, [pc, #80]	; (8017c90 <_fflush_r+0x6c>)
 8017c40:	429c      	cmp	r4, r3
 8017c42:	d11b      	bne.n	8017c7c <_fflush_r+0x58>
 8017c44:	686c      	ldr	r4, [r5, #4]
 8017c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d0ef      	beq.n	8017c2e <_fflush_r+0xa>
 8017c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c50:	07d0      	lsls	r0, r2, #31
 8017c52:	d404      	bmi.n	8017c5e <_fflush_r+0x3a>
 8017c54:	0599      	lsls	r1, r3, #22
 8017c56:	d402      	bmi.n	8017c5e <_fflush_r+0x3a>
 8017c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c5a:	f000 f927 	bl	8017eac <__retarget_lock_acquire_recursive>
 8017c5e:	4628      	mov	r0, r5
 8017c60:	4621      	mov	r1, r4
 8017c62:	f7ff ff59 	bl	8017b18 <__sflush_r>
 8017c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c68:	07da      	lsls	r2, r3, #31
 8017c6a:	4605      	mov	r5, r0
 8017c6c:	d4e0      	bmi.n	8017c30 <_fflush_r+0xc>
 8017c6e:	89a3      	ldrh	r3, [r4, #12]
 8017c70:	059b      	lsls	r3, r3, #22
 8017c72:	d4dd      	bmi.n	8017c30 <_fflush_r+0xc>
 8017c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c76:	f000 f91a 	bl	8017eae <__retarget_lock_release_recursive>
 8017c7a:	e7d9      	b.n	8017c30 <_fflush_r+0xc>
 8017c7c:	4b05      	ldr	r3, [pc, #20]	; (8017c94 <_fflush_r+0x70>)
 8017c7e:	429c      	cmp	r4, r3
 8017c80:	d101      	bne.n	8017c86 <_fflush_r+0x62>
 8017c82:	68ac      	ldr	r4, [r5, #8]
 8017c84:	e7df      	b.n	8017c46 <_fflush_r+0x22>
 8017c86:	4b04      	ldr	r3, [pc, #16]	; (8017c98 <_fflush_r+0x74>)
 8017c88:	429c      	cmp	r4, r3
 8017c8a:	bf08      	it	eq
 8017c8c:	68ec      	ldreq	r4, [r5, #12]
 8017c8e:	e7da      	b.n	8017c46 <_fflush_r+0x22>
 8017c90:	0801b6d4 	.word	0x0801b6d4
 8017c94:	0801b6f4 	.word	0x0801b6f4
 8017c98:	0801b6b4 	.word	0x0801b6b4

08017c9c <std>:
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	b510      	push	{r4, lr}
 8017ca0:	4604      	mov	r4, r0
 8017ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8017ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017caa:	6083      	str	r3, [r0, #8]
 8017cac:	8181      	strh	r1, [r0, #12]
 8017cae:	6643      	str	r3, [r0, #100]	; 0x64
 8017cb0:	81c2      	strh	r2, [r0, #14]
 8017cb2:	6183      	str	r3, [r0, #24]
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	2208      	movs	r2, #8
 8017cb8:	305c      	adds	r0, #92	; 0x5c
 8017cba:	f7ff fd7b 	bl	80177b4 <memset>
 8017cbe:	4b05      	ldr	r3, [pc, #20]	; (8017cd4 <std+0x38>)
 8017cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8017cc2:	4b05      	ldr	r3, [pc, #20]	; (8017cd8 <std+0x3c>)
 8017cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8017cc6:	4b05      	ldr	r3, [pc, #20]	; (8017cdc <std+0x40>)
 8017cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017cca:	4b05      	ldr	r3, [pc, #20]	; (8017ce0 <std+0x44>)
 8017ccc:	6224      	str	r4, [r4, #32]
 8017cce:	6323      	str	r3, [r4, #48]	; 0x30
 8017cd0:	bd10      	pop	{r4, pc}
 8017cd2:	bf00      	nop
 8017cd4:	08018749 	.word	0x08018749
 8017cd8:	0801876b 	.word	0x0801876b
 8017cdc:	080187a3 	.word	0x080187a3
 8017ce0:	080187c7 	.word	0x080187c7

08017ce4 <_cleanup_r>:
 8017ce4:	4901      	ldr	r1, [pc, #4]	; (8017cec <_cleanup_r+0x8>)
 8017ce6:	f000 b8c1 	b.w	8017e6c <_fwalk_reent>
 8017cea:	bf00      	nop
 8017cec:	08017c25 	.word	0x08017c25

08017cf0 <__sfmoreglue>:
 8017cf0:	b570      	push	{r4, r5, r6, lr}
 8017cf2:	2268      	movs	r2, #104	; 0x68
 8017cf4:	1e4d      	subs	r5, r1, #1
 8017cf6:	4355      	muls	r5, r2
 8017cf8:	460e      	mov	r6, r1
 8017cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017cfe:	f000 f9b1 	bl	8018064 <_malloc_r>
 8017d02:	4604      	mov	r4, r0
 8017d04:	b140      	cbz	r0, 8017d18 <__sfmoreglue+0x28>
 8017d06:	2100      	movs	r1, #0
 8017d08:	e9c0 1600 	strd	r1, r6, [r0]
 8017d0c:	300c      	adds	r0, #12
 8017d0e:	60a0      	str	r0, [r4, #8]
 8017d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017d14:	f7ff fd4e 	bl	80177b4 <memset>
 8017d18:	4620      	mov	r0, r4
 8017d1a:	bd70      	pop	{r4, r5, r6, pc}

08017d1c <__sfp_lock_acquire>:
 8017d1c:	4801      	ldr	r0, [pc, #4]	; (8017d24 <__sfp_lock_acquire+0x8>)
 8017d1e:	f000 b8c5 	b.w	8017eac <__retarget_lock_acquire_recursive>
 8017d22:	bf00      	nop
 8017d24:	200090d5 	.word	0x200090d5

08017d28 <__sfp_lock_release>:
 8017d28:	4801      	ldr	r0, [pc, #4]	; (8017d30 <__sfp_lock_release+0x8>)
 8017d2a:	f000 b8c0 	b.w	8017eae <__retarget_lock_release_recursive>
 8017d2e:	bf00      	nop
 8017d30:	200090d5 	.word	0x200090d5

08017d34 <__sinit_lock_acquire>:
 8017d34:	4801      	ldr	r0, [pc, #4]	; (8017d3c <__sinit_lock_acquire+0x8>)
 8017d36:	f000 b8b9 	b.w	8017eac <__retarget_lock_acquire_recursive>
 8017d3a:	bf00      	nop
 8017d3c:	200090d6 	.word	0x200090d6

08017d40 <__sinit_lock_release>:
 8017d40:	4801      	ldr	r0, [pc, #4]	; (8017d48 <__sinit_lock_release+0x8>)
 8017d42:	f000 b8b4 	b.w	8017eae <__retarget_lock_release_recursive>
 8017d46:	bf00      	nop
 8017d48:	200090d6 	.word	0x200090d6

08017d4c <__sinit>:
 8017d4c:	b510      	push	{r4, lr}
 8017d4e:	4604      	mov	r4, r0
 8017d50:	f7ff fff0 	bl	8017d34 <__sinit_lock_acquire>
 8017d54:	69a3      	ldr	r3, [r4, #24]
 8017d56:	b11b      	cbz	r3, 8017d60 <__sinit+0x14>
 8017d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d5c:	f7ff bff0 	b.w	8017d40 <__sinit_lock_release>
 8017d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d64:	6523      	str	r3, [r4, #80]	; 0x50
 8017d66:	4b13      	ldr	r3, [pc, #76]	; (8017db4 <__sinit+0x68>)
 8017d68:	4a13      	ldr	r2, [pc, #76]	; (8017db8 <__sinit+0x6c>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d6e:	42a3      	cmp	r3, r4
 8017d70:	bf04      	itt	eq
 8017d72:	2301      	moveq	r3, #1
 8017d74:	61a3      	streq	r3, [r4, #24]
 8017d76:	4620      	mov	r0, r4
 8017d78:	f000 f820 	bl	8017dbc <__sfp>
 8017d7c:	6060      	str	r0, [r4, #4]
 8017d7e:	4620      	mov	r0, r4
 8017d80:	f000 f81c 	bl	8017dbc <__sfp>
 8017d84:	60a0      	str	r0, [r4, #8]
 8017d86:	4620      	mov	r0, r4
 8017d88:	f000 f818 	bl	8017dbc <__sfp>
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	60e0      	str	r0, [r4, #12]
 8017d90:	2104      	movs	r1, #4
 8017d92:	6860      	ldr	r0, [r4, #4]
 8017d94:	f7ff ff82 	bl	8017c9c <std>
 8017d98:	68a0      	ldr	r0, [r4, #8]
 8017d9a:	2201      	movs	r2, #1
 8017d9c:	2109      	movs	r1, #9
 8017d9e:	f7ff ff7d 	bl	8017c9c <std>
 8017da2:	68e0      	ldr	r0, [r4, #12]
 8017da4:	2202      	movs	r2, #2
 8017da6:	2112      	movs	r1, #18
 8017da8:	f7ff ff78 	bl	8017c9c <std>
 8017dac:	2301      	movs	r3, #1
 8017dae:	61a3      	str	r3, [r4, #24]
 8017db0:	e7d2      	b.n	8017d58 <__sinit+0xc>
 8017db2:	bf00      	nop
 8017db4:	0801b600 	.word	0x0801b600
 8017db8:	08017ce5 	.word	0x08017ce5

08017dbc <__sfp>:
 8017dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dbe:	4607      	mov	r7, r0
 8017dc0:	f7ff ffac 	bl	8017d1c <__sfp_lock_acquire>
 8017dc4:	4b1e      	ldr	r3, [pc, #120]	; (8017e40 <__sfp+0x84>)
 8017dc6:	681e      	ldr	r6, [r3, #0]
 8017dc8:	69b3      	ldr	r3, [r6, #24]
 8017dca:	b913      	cbnz	r3, 8017dd2 <__sfp+0x16>
 8017dcc:	4630      	mov	r0, r6
 8017dce:	f7ff ffbd 	bl	8017d4c <__sinit>
 8017dd2:	3648      	adds	r6, #72	; 0x48
 8017dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017dd8:	3b01      	subs	r3, #1
 8017dda:	d503      	bpl.n	8017de4 <__sfp+0x28>
 8017ddc:	6833      	ldr	r3, [r6, #0]
 8017dde:	b30b      	cbz	r3, 8017e24 <__sfp+0x68>
 8017de0:	6836      	ldr	r6, [r6, #0]
 8017de2:	e7f7      	b.n	8017dd4 <__sfp+0x18>
 8017de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017de8:	b9d5      	cbnz	r5, 8017e20 <__sfp+0x64>
 8017dea:	4b16      	ldr	r3, [pc, #88]	; (8017e44 <__sfp+0x88>)
 8017dec:	60e3      	str	r3, [r4, #12]
 8017dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017df2:	6665      	str	r5, [r4, #100]	; 0x64
 8017df4:	f000 f859 	bl	8017eaa <__retarget_lock_init_recursive>
 8017df8:	f7ff ff96 	bl	8017d28 <__sfp_lock_release>
 8017dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017e04:	6025      	str	r5, [r4, #0]
 8017e06:	61a5      	str	r5, [r4, #24]
 8017e08:	2208      	movs	r2, #8
 8017e0a:	4629      	mov	r1, r5
 8017e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e10:	f7ff fcd0 	bl	80177b4 <memset>
 8017e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e20:	3468      	adds	r4, #104	; 0x68
 8017e22:	e7d9      	b.n	8017dd8 <__sfp+0x1c>
 8017e24:	2104      	movs	r1, #4
 8017e26:	4638      	mov	r0, r7
 8017e28:	f7ff ff62 	bl	8017cf0 <__sfmoreglue>
 8017e2c:	4604      	mov	r4, r0
 8017e2e:	6030      	str	r0, [r6, #0]
 8017e30:	2800      	cmp	r0, #0
 8017e32:	d1d5      	bne.n	8017de0 <__sfp+0x24>
 8017e34:	f7ff ff78 	bl	8017d28 <__sfp_lock_release>
 8017e38:	230c      	movs	r3, #12
 8017e3a:	603b      	str	r3, [r7, #0]
 8017e3c:	e7ee      	b.n	8017e1c <__sfp+0x60>
 8017e3e:	bf00      	nop
 8017e40:	0801b600 	.word	0x0801b600
 8017e44:	ffff0001 	.word	0xffff0001

08017e48 <fiprintf>:
 8017e48:	b40e      	push	{r1, r2, r3}
 8017e4a:	b503      	push	{r0, r1, lr}
 8017e4c:	4601      	mov	r1, r0
 8017e4e:	ab03      	add	r3, sp, #12
 8017e50:	4805      	ldr	r0, [pc, #20]	; (8017e68 <fiprintf+0x20>)
 8017e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e56:	6800      	ldr	r0, [r0, #0]
 8017e58:	9301      	str	r3, [sp, #4]
 8017e5a:	f000 f9a1 	bl	80181a0 <_vfiprintf_r>
 8017e5e:	b002      	add	sp, #8
 8017e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e64:	b003      	add	sp, #12
 8017e66:	4770      	bx	lr
 8017e68:	2000002c 	.word	0x2000002c

08017e6c <_fwalk_reent>:
 8017e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e70:	4606      	mov	r6, r0
 8017e72:	4688      	mov	r8, r1
 8017e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e78:	2700      	movs	r7, #0
 8017e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8017e82:	d505      	bpl.n	8017e90 <_fwalk_reent+0x24>
 8017e84:	6824      	ldr	r4, [r4, #0]
 8017e86:	2c00      	cmp	r4, #0
 8017e88:	d1f7      	bne.n	8017e7a <_fwalk_reent+0xe>
 8017e8a:	4638      	mov	r0, r7
 8017e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e90:	89ab      	ldrh	r3, [r5, #12]
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d907      	bls.n	8017ea6 <_fwalk_reent+0x3a>
 8017e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e9a:	3301      	adds	r3, #1
 8017e9c:	d003      	beq.n	8017ea6 <_fwalk_reent+0x3a>
 8017e9e:	4629      	mov	r1, r5
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	47c0      	blx	r8
 8017ea4:	4307      	orrs	r7, r0
 8017ea6:	3568      	adds	r5, #104	; 0x68
 8017ea8:	e7e9      	b.n	8017e7e <_fwalk_reent+0x12>

08017eaa <__retarget_lock_init_recursive>:
 8017eaa:	4770      	bx	lr

08017eac <__retarget_lock_acquire_recursive>:
 8017eac:	4770      	bx	lr

08017eae <__retarget_lock_release_recursive>:
 8017eae:	4770      	bx	lr

08017eb0 <__swhatbuf_r>:
 8017eb0:	b570      	push	{r4, r5, r6, lr}
 8017eb2:	460e      	mov	r6, r1
 8017eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eb8:	2900      	cmp	r1, #0
 8017eba:	b096      	sub	sp, #88	; 0x58
 8017ebc:	4614      	mov	r4, r2
 8017ebe:	461d      	mov	r5, r3
 8017ec0:	da08      	bge.n	8017ed4 <__swhatbuf_r+0x24>
 8017ec2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	602a      	str	r2, [r5, #0]
 8017eca:	061a      	lsls	r2, r3, #24
 8017ecc:	d410      	bmi.n	8017ef0 <__swhatbuf_r+0x40>
 8017ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ed2:	e00e      	b.n	8017ef2 <__swhatbuf_r+0x42>
 8017ed4:	466a      	mov	r2, sp
 8017ed6:	f000 fca5 	bl	8018824 <_fstat_r>
 8017eda:	2800      	cmp	r0, #0
 8017edc:	dbf1      	blt.n	8017ec2 <__swhatbuf_r+0x12>
 8017ede:	9a01      	ldr	r2, [sp, #4]
 8017ee0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017ee4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ee8:	425a      	negs	r2, r3
 8017eea:	415a      	adcs	r2, r3
 8017eec:	602a      	str	r2, [r5, #0]
 8017eee:	e7ee      	b.n	8017ece <__swhatbuf_r+0x1e>
 8017ef0:	2340      	movs	r3, #64	; 0x40
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	6023      	str	r3, [r4, #0]
 8017ef6:	b016      	add	sp, #88	; 0x58
 8017ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

08017efc <__smakebuf_r>:
 8017efc:	898b      	ldrh	r3, [r1, #12]
 8017efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f00:	079d      	lsls	r5, r3, #30
 8017f02:	4606      	mov	r6, r0
 8017f04:	460c      	mov	r4, r1
 8017f06:	d507      	bpl.n	8017f18 <__smakebuf_r+0x1c>
 8017f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f0c:	6023      	str	r3, [r4, #0]
 8017f0e:	6123      	str	r3, [r4, #16]
 8017f10:	2301      	movs	r3, #1
 8017f12:	6163      	str	r3, [r4, #20]
 8017f14:	b002      	add	sp, #8
 8017f16:	bd70      	pop	{r4, r5, r6, pc}
 8017f18:	ab01      	add	r3, sp, #4
 8017f1a:	466a      	mov	r2, sp
 8017f1c:	f7ff ffc8 	bl	8017eb0 <__swhatbuf_r>
 8017f20:	9900      	ldr	r1, [sp, #0]
 8017f22:	4605      	mov	r5, r0
 8017f24:	4630      	mov	r0, r6
 8017f26:	f000 f89d 	bl	8018064 <_malloc_r>
 8017f2a:	b948      	cbnz	r0, 8017f40 <__smakebuf_r+0x44>
 8017f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f30:	059a      	lsls	r2, r3, #22
 8017f32:	d4ef      	bmi.n	8017f14 <__smakebuf_r+0x18>
 8017f34:	f023 0303 	bic.w	r3, r3, #3
 8017f38:	f043 0302 	orr.w	r3, r3, #2
 8017f3c:	81a3      	strh	r3, [r4, #12]
 8017f3e:	e7e3      	b.n	8017f08 <__smakebuf_r+0xc>
 8017f40:	4b0d      	ldr	r3, [pc, #52]	; (8017f78 <__smakebuf_r+0x7c>)
 8017f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f44:	89a3      	ldrh	r3, [r4, #12]
 8017f46:	6020      	str	r0, [r4, #0]
 8017f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f4c:	81a3      	strh	r3, [r4, #12]
 8017f4e:	9b00      	ldr	r3, [sp, #0]
 8017f50:	6163      	str	r3, [r4, #20]
 8017f52:	9b01      	ldr	r3, [sp, #4]
 8017f54:	6120      	str	r0, [r4, #16]
 8017f56:	b15b      	cbz	r3, 8017f70 <__smakebuf_r+0x74>
 8017f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f5c:	4630      	mov	r0, r6
 8017f5e:	f000 fc73 	bl	8018848 <_isatty_r>
 8017f62:	b128      	cbz	r0, 8017f70 <__smakebuf_r+0x74>
 8017f64:	89a3      	ldrh	r3, [r4, #12]
 8017f66:	f023 0303 	bic.w	r3, r3, #3
 8017f6a:	f043 0301 	orr.w	r3, r3, #1
 8017f6e:	81a3      	strh	r3, [r4, #12]
 8017f70:	89a0      	ldrh	r0, [r4, #12]
 8017f72:	4305      	orrs	r5, r0
 8017f74:	81a5      	strh	r5, [r4, #12]
 8017f76:	e7cd      	b.n	8017f14 <__smakebuf_r+0x18>
 8017f78:	08017ce5 	.word	0x08017ce5

08017f7c <malloc>:
 8017f7c:	4b02      	ldr	r3, [pc, #8]	; (8017f88 <malloc+0xc>)
 8017f7e:	4601      	mov	r1, r0
 8017f80:	6818      	ldr	r0, [r3, #0]
 8017f82:	f000 b86f 	b.w	8018064 <_malloc_r>
 8017f86:	bf00      	nop
 8017f88:	2000002c 	.word	0x2000002c

08017f8c <_free_r>:
 8017f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f8e:	2900      	cmp	r1, #0
 8017f90:	d044      	beq.n	801801c <_free_r+0x90>
 8017f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f96:	9001      	str	r0, [sp, #4]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8017f9e:	bfb8      	it	lt
 8017fa0:	18e4      	addlt	r4, r4, r3
 8017fa2:	f000 fc73 	bl	801888c <__malloc_lock>
 8017fa6:	4a1e      	ldr	r2, [pc, #120]	; (8018020 <_free_r+0x94>)
 8017fa8:	9801      	ldr	r0, [sp, #4]
 8017faa:	6813      	ldr	r3, [r2, #0]
 8017fac:	b933      	cbnz	r3, 8017fbc <_free_r+0x30>
 8017fae:	6063      	str	r3, [r4, #4]
 8017fb0:	6014      	str	r4, [r2, #0]
 8017fb2:	b003      	add	sp, #12
 8017fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fb8:	f000 bc6e 	b.w	8018898 <__malloc_unlock>
 8017fbc:	42a3      	cmp	r3, r4
 8017fbe:	d908      	bls.n	8017fd2 <_free_r+0x46>
 8017fc0:	6825      	ldr	r5, [r4, #0]
 8017fc2:	1961      	adds	r1, r4, r5
 8017fc4:	428b      	cmp	r3, r1
 8017fc6:	bf01      	itttt	eq
 8017fc8:	6819      	ldreq	r1, [r3, #0]
 8017fca:	685b      	ldreq	r3, [r3, #4]
 8017fcc:	1949      	addeq	r1, r1, r5
 8017fce:	6021      	streq	r1, [r4, #0]
 8017fd0:	e7ed      	b.n	8017fae <_free_r+0x22>
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	b10b      	cbz	r3, 8017fdc <_free_r+0x50>
 8017fd8:	42a3      	cmp	r3, r4
 8017fda:	d9fa      	bls.n	8017fd2 <_free_r+0x46>
 8017fdc:	6811      	ldr	r1, [r2, #0]
 8017fde:	1855      	adds	r5, r2, r1
 8017fe0:	42a5      	cmp	r5, r4
 8017fe2:	d10b      	bne.n	8017ffc <_free_r+0x70>
 8017fe4:	6824      	ldr	r4, [r4, #0]
 8017fe6:	4421      	add	r1, r4
 8017fe8:	1854      	adds	r4, r2, r1
 8017fea:	42a3      	cmp	r3, r4
 8017fec:	6011      	str	r1, [r2, #0]
 8017fee:	d1e0      	bne.n	8017fb2 <_free_r+0x26>
 8017ff0:	681c      	ldr	r4, [r3, #0]
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	6053      	str	r3, [r2, #4]
 8017ff6:	4421      	add	r1, r4
 8017ff8:	6011      	str	r1, [r2, #0]
 8017ffa:	e7da      	b.n	8017fb2 <_free_r+0x26>
 8017ffc:	d902      	bls.n	8018004 <_free_r+0x78>
 8017ffe:	230c      	movs	r3, #12
 8018000:	6003      	str	r3, [r0, #0]
 8018002:	e7d6      	b.n	8017fb2 <_free_r+0x26>
 8018004:	6825      	ldr	r5, [r4, #0]
 8018006:	1961      	adds	r1, r4, r5
 8018008:	428b      	cmp	r3, r1
 801800a:	bf04      	itt	eq
 801800c:	6819      	ldreq	r1, [r3, #0]
 801800e:	685b      	ldreq	r3, [r3, #4]
 8018010:	6063      	str	r3, [r4, #4]
 8018012:	bf04      	itt	eq
 8018014:	1949      	addeq	r1, r1, r5
 8018016:	6021      	streq	r1, [r4, #0]
 8018018:	6054      	str	r4, [r2, #4]
 801801a:	e7ca      	b.n	8017fb2 <_free_r+0x26>
 801801c:	b003      	add	sp, #12
 801801e:	bd30      	pop	{r4, r5, pc}
 8018020:	200090d8 	.word	0x200090d8

08018024 <sbrk_aligned>:
 8018024:	b570      	push	{r4, r5, r6, lr}
 8018026:	4e0e      	ldr	r6, [pc, #56]	; (8018060 <sbrk_aligned+0x3c>)
 8018028:	460c      	mov	r4, r1
 801802a:	6831      	ldr	r1, [r6, #0]
 801802c:	4605      	mov	r5, r0
 801802e:	b911      	cbnz	r1, 8018036 <sbrk_aligned+0x12>
 8018030:	f000 fb7a 	bl	8018728 <_sbrk_r>
 8018034:	6030      	str	r0, [r6, #0]
 8018036:	4621      	mov	r1, r4
 8018038:	4628      	mov	r0, r5
 801803a:	f000 fb75 	bl	8018728 <_sbrk_r>
 801803e:	1c43      	adds	r3, r0, #1
 8018040:	d00a      	beq.n	8018058 <sbrk_aligned+0x34>
 8018042:	1cc4      	adds	r4, r0, #3
 8018044:	f024 0403 	bic.w	r4, r4, #3
 8018048:	42a0      	cmp	r0, r4
 801804a:	d007      	beq.n	801805c <sbrk_aligned+0x38>
 801804c:	1a21      	subs	r1, r4, r0
 801804e:	4628      	mov	r0, r5
 8018050:	f000 fb6a 	bl	8018728 <_sbrk_r>
 8018054:	3001      	adds	r0, #1
 8018056:	d101      	bne.n	801805c <sbrk_aligned+0x38>
 8018058:	f04f 34ff 	mov.w	r4, #4294967295
 801805c:	4620      	mov	r0, r4
 801805e:	bd70      	pop	{r4, r5, r6, pc}
 8018060:	200090dc 	.word	0x200090dc

08018064 <_malloc_r>:
 8018064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018068:	1ccd      	adds	r5, r1, #3
 801806a:	f025 0503 	bic.w	r5, r5, #3
 801806e:	3508      	adds	r5, #8
 8018070:	2d0c      	cmp	r5, #12
 8018072:	bf38      	it	cc
 8018074:	250c      	movcc	r5, #12
 8018076:	2d00      	cmp	r5, #0
 8018078:	4607      	mov	r7, r0
 801807a:	db01      	blt.n	8018080 <_malloc_r+0x1c>
 801807c:	42a9      	cmp	r1, r5
 801807e:	d905      	bls.n	801808c <_malloc_r+0x28>
 8018080:	230c      	movs	r3, #12
 8018082:	603b      	str	r3, [r7, #0]
 8018084:	2600      	movs	r6, #0
 8018086:	4630      	mov	r0, r6
 8018088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801808c:	4e2e      	ldr	r6, [pc, #184]	; (8018148 <_malloc_r+0xe4>)
 801808e:	f000 fbfd 	bl	801888c <__malloc_lock>
 8018092:	6833      	ldr	r3, [r6, #0]
 8018094:	461c      	mov	r4, r3
 8018096:	bb34      	cbnz	r4, 80180e6 <_malloc_r+0x82>
 8018098:	4629      	mov	r1, r5
 801809a:	4638      	mov	r0, r7
 801809c:	f7ff ffc2 	bl	8018024 <sbrk_aligned>
 80180a0:	1c43      	adds	r3, r0, #1
 80180a2:	4604      	mov	r4, r0
 80180a4:	d14d      	bne.n	8018142 <_malloc_r+0xde>
 80180a6:	6834      	ldr	r4, [r6, #0]
 80180a8:	4626      	mov	r6, r4
 80180aa:	2e00      	cmp	r6, #0
 80180ac:	d140      	bne.n	8018130 <_malloc_r+0xcc>
 80180ae:	6823      	ldr	r3, [r4, #0]
 80180b0:	4631      	mov	r1, r6
 80180b2:	4638      	mov	r0, r7
 80180b4:	eb04 0803 	add.w	r8, r4, r3
 80180b8:	f000 fb36 	bl	8018728 <_sbrk_r>
 80180bc:	4580      	cmp	r8, r0
 80180be:	d13a      	bne.n	8018136 <_malloc_r+0xd2>
 80180c0:	6821      	ldr	r1, [r4, #0]
 80180c2:	3503      	adds	r5, #3
 80180c4:	1a6d      	subs	r5, r5, r1
 80180c6:	f025 0503 	bic.w	r5, r5, #3
 80180ca:	3508      	adds	r5, #8
 80180cc:	2d0c      	cmp	r5, #12
 80180ce:	bf38      	it	cc
 80180d0:	250c      	movcc	r5, #12
 80180d2:	4629      	mov	r1, r5
 80180d4:	4638      	mov	r0, r7
 80180d6:	f7ff ffa5 	bl	8018024 <sbrk_aligned>
 80180da:	3001      	adds	r0, #1
 80180dc:	d02b      	beq.n	8018136 <_malloc_r+0xd2>
 80180de:	6823      	ldr	r3, [r4, #0]
 80180e0:	442b      	add	r3, r5
 80180e2:	6023      	str	r3, [r4, #0]
 80180e4:	e00e      	b.n	8018104 <_malloc_r+0xa0>
 80180e6:	6822      	ldr	r2, [r4, #0]
 80180e8:	1b52      	subs	r2, r2, r5
 80180ea:	d41e      	bmi.n	801812a <_malloc_r+0xc6>
 80180ec:	2a0b      	cmp	r2, #11
 80180ee:	d916      	bls.n	801811e <_malloc_r+0xba>
 80180f0:	1961      	adds	r1, r4, r5
 80180f2:	42a3      	cmp	r3, r4
 80180f4:	6025      	str	r5, [r4, #0]
 80180f6:	bf18      	it	ne
 80180f8:	6059      	strne	r1, [r3, #4]
 80180fa:	6863      	ldr	r3, [r4, #4]
 80180fc:	bf08      	it	eq
 80180fe:	6031      	streq	r1, [r6, #0]
 8018100:	5162      	str	r2, [r4, r5]
 8018102:	604b      	str	r3, [r1, #4]
 8018104:	4638      	mov	r0, r7
 8018106:	f104 060b 	add.w	r6, r4, #11
 801810a:	f000 fbc5 	bl	8018898 <__malloc_unlock>
 801810e:	f026 0607 	bic.w	r6, r6, #7
 8018112:	1d23      	adds	r3, r4, #4
 8018114:	1af2      	subs	r2, r6, r3
 8018116:	d0b6      	beq.n	8018086 <_malloc_r+0x22>
 8018118:	1b9b      	subs	r3, r3, r6
 801811a:	50a3      	str	r3, [r4, r2]
 801811c:	e7b3      	b.n	8018086 <_malloc_r+0x22>
 801811e:	6862      	ldr	r2, [r4, #4]
 8018120:	42a3      	cmp	r3, r4
 8018122:	bf0c      	ite	eq
 8018124:	6032      	streq	r2, [r6, #0]
 8018126:	605a      	strne	r2, [r3, #4]
 8018128:	e7ec      	b.n	8018104 <_malloc_r+0xa0>
 801812a:	4623      	mov	r3, r4
 801812c:	6864      	ldr	r4, [r4, #4]
 801812e:	e7b2      	b.n	8018096 <_malloc_r+0x32>
 8018130:	4634      	mov	r4, r6
 8018132:	6876      	ldr	r6, [r6, #4]
 8018134:	e7b9      	b.n	80180aa <_malloc_r+0x46>
 8018136:	230c      	movs	r3, #12
 8018138:	603b      	str	r3, [r7, #0]
 801813a:	4638      	mov	r0, r7
 801813c:	f000 fbac 	bl	8018898 <__malloc_unlock>
 8018140:	e7a1      	b.n	8018086 <_malloc_r+0x22>
 8018142:	6025      	str	r5, [r4, #0]
 8018144:	e7de      	b.n	8018104 <_malloc_r+0xa0>
 8018146:	bf00      	nop
 8018148:	200090d8 	.word	0x200090d8

0801814c <__sfputc_r>:
 801814c:	6893      	ldr	r3, [r2, #8]
 801814e:	3b01      	subs	r3, #1
 8018150:	2b00      	cmp	r3, #0
 8018152:	b410      	push	{r4}
 8018154:	6093      	str	r3, [r2, #8]
 8018156:	da08      	bge.n	801816a <__sfputc_r+0x1e>
 8018158:	6994      	ldr	r4, [r2, #24]
 801815a:	42a3      	cmp	r3, r4
 801815c:	db01      	blt.n	8018162 <__sfputc_r+0x16>
 801815e:	290a      	cmp	r1, #10
 8018160:	d103      	bne.n	801816a <__sfputc_r+0x1e>
 8018162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018166:	f7ff bbf9 	b.w	801795c <__swbuf_r>
 801816a:	6813      	ldr	r3, [r2, #0]
 801816c:	1c58      	adds	r0, r3, #1
 801816e:	6010      	str	r0, [r2, #0]
 8018170:	7019      	strb	r1, [r3, #0]
 8018172:	4608      	mov	r0, r1
 8018174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018178:	4770      	bx	lr

0801817a <__sfputs_r>:
 801817a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817c:	4606      	mov	r6, r0
 801817e:	460f      	mov	r7, r1
 8018180:	4614      	mov	r4, r2
 8018182:	18d5      	adds	r5, r2, r3
 8018184:	42ac      	cmp	r4, r5
 8018186:	d101      	bne.n	801818c <__sfputs_r+0x12>
 8018188:	2000      	movs	r0, #0
 801818a:	e007      	b.n	801819c <__sfputs_r+0x22>
 801818c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018190:	463a      	mov	r2, r7
 8018192:	4630      	mov	r0, r6
 8018194:	f7ff ffda 	bl	801814c <__sfputc_r>
 8018198:	1c43      	adds	r3, r0, #1
 801819a:	d1f3      	bne.n	8018184 <__sfputs_r+0xa>
 801819c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080181a0 <_vfiprintf_r>:
 80181a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a4:	460d      	mov	r5, r1
 80181a6:	b09d      	sub	sp, #116	; 0x74
 80181a8:	4614      	mov	r4, r2
 80181aa:	4698      	mov	r8, r3
 80181ac:	4606      	mov	r6, r0
 80181ae:	b118      	cbz	r0, 80181b8 <_vfiprintf_r+0x18>
 80181b0:	6983      	ldr	r3, [r0, #24]
 80181b2:	b90b      	cbnz	r3, 80181b8 <_vfiprintf_r+0x18>
 80181b4:	f7ff fdca 	bl	8017d4c <__sinit>
 80181b8:	4b89      	ldr	r3, [pc, #548]	; (80183e0 <_vfiprintf_r+0x240>)
 80181ba:	429d      	cmp	r5, r3
 80181bc:	d11b      	bne.n	80181f6 <_vfiprintf_r+0x56>
 80181be:	6875      	ldr	r5, [r6, #4]
 80181c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80181c2:	07d9      	lsls	r1, r3, #31
 80181c4:	d405      	bmi.n	80181d2 <_vfiprintf_r+0x32>
 80181c6:	89ab      	ldrh	r3, [r5, #12]
 80181c8:	059a      	lsls	r2, r3, #22
 80181ca:	d402      	bmi.n	80181d2 <_vfiprintf_r+0x32>
 80181cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80181ce:	f7ff fe6d 	bl	8017eac <__retarget_lock_acquire_recursive>
 80181d2:	89ab      	ldrh	r3, [r5, #12]
 80181d4:	071b      	lsls	r3, r3, #28
 80181d6:	d501      	bpl.n	80181dc <_vfiprintf_r+0x3c>
 80181d8:	692b      	ldr	r3, [r5, #16]
 80181da:	b9eb      	cbnz	r3, 8018218 <_vfiprintf_r+0x78>
 80181dc:	4629      	mov	r1, r5
 80181de:	4630      	mov	r0, r6
 80181e0:	f7ff fc0e 	bl	8017a00 <__swsetup_r>
 80181e4:	b1c0      	cbz	r0, 8018218 <_vfiprintf_r+0x78>
 80181e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80181e8:	07dc      	lsls	r4, r3, #31
 80181ea:	d50e      	bpl.n	801820a <_vfiprintf_r+0x6a>
 80181ec:	f04f 30ff 	mov.w	r0, #4294967295
 80181f0:	b01d      	add	sp, #116	; 0x74
 80181f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f6:	4b7b      	ldr	r3, [pc, #492]	; (80183e4 <_vfiprintf_r+0x244>)
 80181f8:	429d      	cmp	r5, r3
 80181fa:	d101      	bne.n	8018200 <_vfiprintf_r+0x60>
 80181fc:	68b5      	ldr	r5, [r6, #8]
 80181fe:	e7df      	b.n	80181c0 <_vfiprintf_r+0x20>
 8018200:	4b79      	ldr	r3, [pc, #484]	; (80183e8 <_vfiprintf_r+0x248>)
 8018202:	429d      	cmp	r5, r3
 8018204:	bf08      	it	eq
 8018206:	68f5      	ldreq	r5, [r6, #12]
 8018208:	e7da      	b.n	80181c0 <_vfiprintf_r+0x20>
 801820a:	89ab      	ldrh	r3, [r5, #12]
 801820c:	0598      	lsls	r0, r3, #22
 801820e:	d4ed      	bmi.n	80181ec <_vfiprintf_r+0x4c>
 8018210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018212:	f7ff fe4c 	bl	8017eae <__retarget_lock_release_recursive>
 8018216:	e7e9      	b.n	80181ec <_vfiprintf_r+0x4c>
 8018218:	2300      	movs	r3, #0
 801821a:	9309      	str	r3, [sp, #36]	; 0x24
 801821c:	2320      	movs	r3, #32
 801821e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018222:	f8cd 800c 	str.w	r8, [sp, #12]
 8018226:	2330      	movs	r3, #48	; 0x30
 8018228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80183ec <_vfiprintf_r+0x24c>
 801822c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018230:	f04f 0901 	mov.w	r9, #1
 8018234:	4623      	mov	r3, r4
 8018236:	469a      	mov	sl, r3
 8018238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801823c:	b10a      	cbz	r2, 8018242 <_vfiprintf_r+0xa2>
 801823e:	2a25      	cmp	r2, #37	; 0x25
 8018240:	d1f9      	bne.n	8018236 <_vfiprintf_r+0x96>
 8018242:	ebba 0b04 	subs.w	fp, sl, r4
 8018246:	d00b      	beq.n	8018260 <_vfiprintf_r+0xc0>
 8018248:	465b      	mov	r3, fp
 801824a:	4622      	mov	r2, r4
 801824c:	4629      	mov	r1, r5
 801824e:	4630      	mov	r0, r6
 8018250:	f7ff ff93 	bl	801817a <__sfputs_r>
 8018254:	3001      	adds	r0, #1
 8018256:	f000 80aa 	beq.w	80183ae <_vfiprintf_r+0x20e>
 801825a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801825c:	445a      	add	r2, fp
 801825e:	9209      	str	r2, [sp, #36]	; 0x24
 8018260:	f89a 3000 	ldrb.w	r3, [sl]
 8018264:	2b00      	cmp	r3, #0
 8018266:	f000 80a2 	beq.w	80183ae <_vfiprintf_r+0x20e>
 801826a:	2300      	movs	r3, #0
 801826c:	f04f 32ff 	mov.w	r2, #4294967295
 8018270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018274:	f10a 0a01 	add.w	sl, sl, #1
 8018278:	9304      	str	r3, [sp, #16]
 801827a:	9307      	str	r3, [sp, #28]
 801827c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018280:	931a      	str	r3, [sp, #104]	; 0x68
 8018282:	4654      	mov	r4, sl
 8018284:	2205      	movs	r2, #5
 8018286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801828a:	4858      	ldr	r0, [pc, #352]	; (80183ec <_vfiprintf_r+0x24c>)
 801828c:	f7e7 ffc8 	bl	8000220 <memchr>
 8018290:	9a04      	ldr	r2, [sp, #16]
 8018292:	b9d8      	cbnz	r0, 80182cc <_vfiprintf_r+0x12c>
 8018294:	06d1      	lsls	r1, r2, #27
 8018296:	bf44      	itt	mi
 8018298:	2320      	movmi	r3, #32
 801829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801829e:	0713      	lsls	r3, r2, #28
 80182a0:	bf44      	itt	mi
 80182a2:	232b      	movmi	r3, #43	; 0x2b
 80182a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80182a8:	f89a 3000 	ldrb.w	r3, [sl]
 80182ac:	2b2a      	cmp	r3, #42	; 0x2a
 80182ae:	d015      	beq.n	80182dc <_vfiprintf_r+0x13c>
 80182b0:	9a07      	ldr	r2, [sp, #28]
 80182b2:	4654      	mov	r4, sl
 80182b4:	2000      	movs	r0, #0
 80182b6:	f04f 0c0a 	mov.w	ip, #10
 80182ba:	4621      	mov	r1, r4
 80182bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182c0:	3b30      	subs	r3, #48	; 0x30
 80182c2:	2b09      	cmp	r3, #9
 80182c4:	d94e      	bls.n	8018364 <_vfiprintf_r+0x1c4>
 80182c6:	b1b0      	cbz	r0, 80182f6 <_vfiprintf_r+0x156>
 80182c8:	9207      	str	r2, [sp, #28]
 80182ca:	e014      	b.n	80182f6 <_vfiprintf_r+0x156>
 80182cc:	eba0 0308 	sub.w	r3, r0, r8
 80182d0:	fa09 f303 	lsl.w	r3, r9, r3
 80182d4:	4313      	orrs	r3, r2
 80182d6:	9304      	str	r3, [sp, #16]
 80182d8:	46a2      	mov	sl, r4
 80182da:	e7d2      	b.n	8018282 <_vfiprintf_r+0xe2>
 80182dc:	9b03      	ldr	r3, [sp, #12]
 80182de:	1d19      	adds	r1, r3, #4
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	9103      	str	r1, [sp, #12]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	bfbb      	ittet	lt
 80182e8:	425b      	neglt	r3, r3
 80182ea:	f042 0202 	orrlt.w	r2, r2, #2
 80182ee:	9307      	strge	r3, [sp, #28]
 80182f0:	9307      	strlt	r3, [sp, #28]
 80182f2:	bfb8      	it	lt
 80182f4:	9204      	strlt	r2, [sp, #16]
 80182f6:	7823      	ldrb	r3, [r4, #0]
 80182f8:	2b2e      	cmp	r3, #46	; 0x2e
 80182fa:	d10c      	bne.n	8018316 <_vfiprintf_r+0x176>
 80182fc:	7863      	ldrb	r3, [r4, #1]
 80182fe:	2b2a      	cmp	r3, #42	; 0x2a
 8018300:	d135      	bne.n	801836e <_vfiprintf_r+0x1ce>
 8018302:	9b03      	ldr	r3, [sp, #12]
 8018304:	1d1a      	adds	r2, r3, #4
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	9203      	str	r2, [sp, #12]
 801830a:	2b00      	cmp	r3, #0
 801830c:	bfb8      	it	lt
 801830e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018312:	3402      	adds	r4, #2
 8018314:	9305      	str	r3, [sp, #20]
 8018316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80183fc <_vfiprintf_r+0x25c>
 801831a:	7821      	ldrb	r1, [r4, #0]
 801831c:	2203      	movs	r2, #3
 801831e:	4650      	mov	r0, sl
 8018320:	f7e7 ff7e 	bl	8000220 <memchr>
 8018324:	b140      	cbz	r0, 8018338 <_vfiprintf_r+0x198>
 8018326:	2340      	movs	r3, #64	; 0x40
 8018328:	eba0 000a 	sub.w	r0, r0, sl
 801832c:	fa03 f000 	lsl.w	r0, r3, r0
 8018330:	9b04      	ldr	r3, [sp, #16]
 8018332:	4303      	orrs	r3, r0
 8018334:	3401      	adds	r4, #1
 8018336:	9304      	str	r3, [sp, #16]
 8018338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801833c:	482c      	ldr	r0, [pc, #176]	; (80183f0 <_vfiprintf_r+0x250>)
 801833e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018342:	2206      	movs	r2, #6
 8018344:	f7e7 ff6c 	bl	8000220 <memchr>
 8018348:	2800      	cmp	r0, #0
 801834a:	d03f      	beq.n	80183cc <_vfiprintf_r+0x22c>
 801834c:	4b29      	ldr	r3, [pc, #164]	; (80183f4 <_vfiprintf_r+0x254>)
 801834e:	bb1b      	cbnz	r3, 8018398 <_vfiprintf_r+0x1f8>
 8018350:	9b03      	ldr	r3, [sp, #12]
 8018352:	3307      	adds	r3, #7
 8018354:	f023 0307 	bic.w	r3, r3, #7
 8018358:	3308      	adds	r3, #8
 801835a:	9303      	str	r3, [sp, #12]
 801835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801835e:	443b      	add	r3, r7
 8018360:	9309      	str	r3, [sp, #36]	; 0x24
 8018362:	e767      	b.n	8018234 <_vfiprintf_r+0x94>
 8018364:	fb0c 3202 	mla	r2, ip, r2, r3
 8018368:	460c      	mov	r4, r1
 801836a:	2001      	movs	r0, #1
 801836c:	e7a5      	b.n	80182ba <_vfiprintf_r+0x11a>
 801836e:	2300      	movs	r3, #0
 8018370:	3401      	adds	r4, #1
 8018372:	9305      	str	r3, [sp, #20]
 8018374:	4619      	mov	r1, r3
 8018376:	f04f 0c0a 	mov.w	ip, #10
 801837a:	4620      	mov	r0, r4
 801837c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018380:	3a30      	subs	r2, #48	; 0x30
 8018382:	2a09      	cmp	r2, #9
 8018384:	d903      	bls.n	801838e <_vfiprintf_r+0x1ee>
 8018386:	2b00      	cmp	r3, #0
 8018388:	d0c5      	beq.n	8018316 <_vfiprintf_r+0x176>
 801838a:	9105      	str	r1, [sp, #20]
 801838c:	e7c3      	b.n	8018316 <_vfiprintf_r+0x176>
 801838e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018392:	4604      	mov	r4, r0
 8018394:	2301      	movs	r3, #1
 8018396:	e7f0      	b.n	801837a <_vfiprintf_r+0x1da>
 8018398:	ab03      	add	r3, sp, #12
 801839a:	9300      	str	r3, [sp, #0]
 801839c:	462a      	mov	r2, r5
 801839e:	4b16      	ldr	r3, [pc, #88]	; (80183f8 <_vfiprintf_r+0x258>)
 80183a0:	a904      	add	r1, sp, #16
 80183a2:	4630      	mov	r0, r6
 80183a4:	f3af 8000 	nop.w
 80183a8:	4607      	mov	r7, r0
 80183aa:	1c78      	adds	r0, r7, #1
 80183ac:	d1d6      	bne.n	801835c <_vfiprintf_r+0x1bc>
 80183ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183b0:	07d9      	lsls	r1, r3, #31
 80183b2:	d405      	bmi.n	80183c0 <_vfiprintf_r+0x220>
 80183b4:	89ab      	ldrh	r3, [r5, #12]
 80183b6:	059a      	lsls	r2, r3, #22
 80183b8:	d402      	bmi.n	80183c0 <_vfiprintf_r+0x220>
 80183ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183bc:	f7ff fd77 	bl	8017eae <__retarget_lock_release_recursive>
 80183c0:	89ab      	ldrh	r3, [r5, #12]
 80183c2:	065b      	lsls	r3, r3, #25
 80183c4:	f53f af12 	bmi.w	80181ec <_vfiprintf_r+0x4c>
 80183c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183ca:	e711      	b.n	80181f0 <_vfiprintf_r+0x50>
 80183cc:	ab03      	add	r3, sp, #12
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	462a      	mov	r2, r5
 80183d2:	4b09      	ldr	r3, [pc, #36]	; (80183f8 <_vfiprintf_r+0x258>)
 80183d4:	a904      	add	r1, sp, #16
 80183d6:	4630      	mov	r0, r6
 80183d8:	f000 f880 	bl	80184dc <_printf_i>
 80183dc:	e7e4      	b.n	80183a8 <_vfiprintf_r+0x208>
 80183de:	bf00      	nop
 80183e0:	0801b6d4 	.word	0x0801b6d4
 80183e4:	0801b6f4 	.word	0x0801b6f4
 80183e8:	0801b6b4 	.word	0x0801b6b4
 80183ec:	0801b714 	.word	0x0801b714
 80183f0:	0801b71e 	.word	0x0801b71e
 80183f4:	00000000 	.word	0x00000000
 80183f8:	0801817b 	.word	0x0801817b
 80183fc:	0801b71a 	.word	0x0801b71a

08018400 <_printf_common>:
 8018400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018404:	4616      	mov	r6, r2
 8018406:	4699      	mov	r9, r3
 8018408:	688a      	ldr	r2, [r1, #8]
 801840a:	690b      	ldr	r3, [r1, #16]
 801840c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018410:	4293      	cmp	r3, r2
 8018412:	bfb8      	it	lt
 8018414:	4613      	movlt	r3, r2
 8018416:	6033      	str	r3, [r6, #0]
 8018418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801841c:	4607      	mov	r7, r0
 801841e:	460c      	mov	r4, r1
 8018420:	b10a      	cbz	r2, 8018426 <_printf_common+0x26>
 8018422:	3301      	adds	r3, #1
 8018424:	6033      	str	r3, [r6, #0]
 8018426:	6823      	ldr	r3, [r4, #0]
 8018428:	0699      	lsls	r1, r3, #26
 801842a:	bf42      	ittt	mi
 801842c:	6833      	ldrmi	r3, [r6, #0]
 801842e:	3302      	addmi	r3, #2
 8018430:	6033      	strmi	r3, [r6, #0]
 8018432:	6825      	ldr	r5, [r4, #0]
 8018434:	f015 0506 	ands.w	r5, r5, #6
 8018438:	d106      	bne.n	8018448 <_printf_common+0x48>
 801843a:	f104 0a19 	add.w	sl, r4, #25
 801843e:	68e3      	ldr	r3, [r4, #12]
 8018440:	6832      	ldr	r2, [r6, #0]
 8018442:	1a9b      	subs	r3, r3, r2
 8018444:	42ab      	cmp	r3, r5
 8018446:	dc26      	bgt.n	8018496 <_printf_common+0x96>
 8018448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801844c:	1e13      	subs	r3, r2, #0
 801844e:	6822      	ldr	r2, [r4, #0]
 8018450:	bf18      	it	ne
 8018452:	2301      	movne	r3, #1
 8018454:	0692      	lsls	r2, r2, #26
 8018456:	d42b      	bmi.n	80184b0 <_printf_common+0xb0>
 8018458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801845c:	4649      	mov	r1, r9
 801845e:	4638      	mov	r0, r7
 8018460:	47c0      	blx	r8
 8018462:	3001      	adds	r0, #1
 8018464:	d01e      	beq.n	80184a4 <_printf_common+0xa4>
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	68e5      	ldr	r5, [r4, #12]
 801846a:	6832      	ldr	r2, [r6, #0]
 801846c:	f003 0306 	and.w	r3, r3, #6
 8018470:	2b04      	cmp	r3, #4
 8018472:	bf08      	it	eq
 8018474:	1aad      	subeq	r5, r5, r2
 8018476:	68a3      	ldr	r3, [r4, #8]
 8018478:	6922      	ldr	r2, [r4, #16]
 801847a:	bf0c      	ite	eq
 801847c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018480:	2500      	movne	r5, #0
 8018482:	4293      	cmp	r3, r2
 8018484:	bfc4      	itt	gt
 8018486:	1a9b      	subgt	r3, r3, r2
 8018488:	18ed      	addgt	r5, r5, r3
 801848a:	2600      	movs	r6, #0
 801848c:	341a      	adds	r4, #26
 801848e:	42b5      	cmp	r5, r6
 8018490:	d11a      	bne.n	80184c8 <_printf_common+0xc8>
 8018492:	2000      	movs	r0, #0
 8018494:	e008      	b.n	80184a8 <_printf_common+0xa8>
 8018496:	2301      	movs	r3, #1
 8018498:	4652      	mov	r2, sl
 801849a:	4649      	mov	r1, r9
 801849c:	4638      	mov	r0, r7
 801849e:	47c0      	blx	r8
 80184a0:	3001      	adds	r0, #1
 80184a2:	d103      	bne.n	80184ac <_printf_common+0xac>
 80184a4:	f04f 30ff 	mov.w	r0, #4294967295
 80184a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ac:	3501      	adds	r5, #1
 80184ae:	e7c6      	b.n	801843e <_printf_common+0x3e>
 80184b0:	18e1      	adds	r1, r4, r3
 80184b2:	1c5a      	adds	r2, r3, #1
 80184b4:	2030      	movs	r0, #48	; 0x30
 80184b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80184ba:	4422      	add	r2, r4
 80184bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80184c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80184c4:	3302      	adds	r3, #2
 80184c6:	e7c7      	b.n	8018458 <_printf_common+0x58>
 80184c8:	2301      	movs	r3, #1
 80184ca:	4622      	mov	r2, r4
 80184cc:	4649      	mov	r1, r9
 80184ce:	4638      	mov	r0, r7
 80184d0:	47c0      	blx	r8
 80184d2:	3001      	adds	r0, #1
 80184d4:	d0e6      	beq.n	80184a4 <_printf_common+0xa4>
 80184d6:	3601      	adds	r6, #1
 80184d8:	e7d9      	b.n	801848e <_printf_common+0x8e>
	...

080184dc <_printf_i>:
 80184dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80184e0:	7e0f      	ldrb	r7, [r1, #24]
 80184e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184e4:	2f78      	cmp	r7, #120	; 0x78
 80184e6:	4691      	mov	r9, r2
 80184e8:	4680      	mov	r8, r0
 80184ea:	460c      	mov	r4, r1
 80184ec:	469a      	mov	sl, r3
 80184ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80184f2:	d807      	bhi.n	8018504 <_printf_i+0x28>
 80184f4:	2f62      	cmp	r7, #98	; 0x62
 80184f6:	d80a      	bhi.n	801850e <_printf_i+0x32>
 80184f8:	2f00      	cmp	r7, #0
 80184fa:	f000 80d8 	beq.w	80186ae <_printf_i+0x1d2>
 80184fe:	2f58      	cmp	r7, #88	; 0x58
 8018500:	f000 80a3 	beq.w	801864a <_printf_i+0x16e>
 8018504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801850c:	e03a      	b.n	8018584 <_printf_i+0xa8>
 801850e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018512:	2b15      	cmp	r3, #21
 8018514:	d8f6      	bhi.n	8018504 <_printf_i+0x28>
 8018516:	a101      	add	r1, pc, #4	; (adr r1, 801851c <_printf_i+0x40>)
 8018518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801851c:	08018575 	.word	0x08018575
 8018520:	08018589 	.word	0x08018589
 8018524:	08018505 	.word	0x08018505
 8018528:	08018505 	.word	0x08018505
 801852c:	08018505 	.word	0x08018505
 8018530:	08018505 	.word	0x08018505
 8018534:	08018589 	.word	0x08018589
 8018538:	08018505 	.word	0x08018505
 801853c:	08018505 	.word	0x08018505
 8018540:	08018505 	.word	0x08018505
 8018544:	08018505 	.word	0x08018505
 8018548:	08018695 	.word	0x08018695
 801854c:	080185b9 	.word	0x080185b9
 8018550:	08018677 	.word	0x08018677
 8018554:	08018505 	.word	0x08018505
 8018558:	08018505 	.word	0x08018505
 801855c:	080186b7 	.word	0x080186b7
 8018560:	08018505 	.word	0x08018505
 8018564:	080185b9 	.word	0x080185b9
 8018568:	08018505 	.word	0x08018505
 801856c:	08018505 	.word	0x08018505
 8018570:	0801867f 	.word	0x0801867f
 8018574:	682b      	ldr	r3, [r5, #0]
 8018576:	1d1a      	adds	r2, r3, #4
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	602a      	str	r2, [r5, #0]
 801857c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018584:	2301      	movs	r3, #1
 8018586:	e0a3      	b.n	80186d0 <_printf_i+0x1f4>
 8018588:	6820      	ldr	r0, [r4, #0]
 801858a:	6829      	ldr	r1, [r5, #0]
 801858c:	0606      	lsls	r6, r0, #24
 801858e:	f101 0304 	add.w	r3, r1, #4
 8018592:	d50a      	bpl.n	80185aa <_printf_i+0xce>
 8018594:	680e      	ldr	r6, [r1, #0]
 8018596:	602b      	str	r3, [r5, #0]
 8018598:	2e00      	cmp	r6, #0
 801859a:	da03      	bge.n	80185a4 <_printf_i+0xc8>
 801859c:	232d      	movs	r3, #45	; 0x2d
 801859e:	4276      	negs	r6, r6
 80185a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80185a4:	485e      	ldr	r0, [pc, #376]	; (8018720 <_printf_i+0x244>)
 80185a6:	230a      	movs	r3, #10
 80185a8:	e019      	b.n	80185de <_printf_i+0x102>
 80185aa:	680e      	ldr	r6, [r1, #0]
 80185ac:	602b      	str	r3, [r5, #0]
 80185ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80185b2:	bf18      	it	ne
 80185b4:	b236      	sxthne	r6, r6
 80185b6:	e7ef      	b.n	8018598 <_printf_i+0xbc>
 80185b8:	682b      	ldr	r3, [r5, #0]
 80185ba:	6820      	ldr	r0, [r4, #0]
 80185bc:	1d19      	adds	r1, r3, #4
 80185be:	6029      	str	r1, [r5, #0]
 80185c0:	0601      	lsls	r1, r0, #24
 80185c2:	d501      	bpl.n	80185c8 <_printf_i+0xec>
 80185c4:	681e      	ldr	r6, [r3, #0]
 80185c6:	e002      	b.n	80185ce <_printf_i+0xf2>
 80185c8:	0646      	lsls	r6, r0, #25
 80185ca:	d5fb      	bpl.n	80185c4 <_printf_i+0xe8>
 80185cc:	881e      	ldrh	r6, [r3, #0]
 80185ce:	4854      	ldr	r0, [pc, #336]	; (8018720 <_printf_i+0x244>)
 80185d0:	2f6f      	cmp	r7, #111	; 0x6f
 80185d2:	bf0c      	ite	eq
 80185d4:	2308      	moveq	r3, #8
 80185d6:	230a      	movne	r3, #10
 80185d8:	2100      	movs	r1, #0
 80185da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80185de:	6865      	ldr	r5, [r4, #4]
 80185e0:	60a5      	str	r5, [r4, #8]
 80185e2:	2d00      	cmp	r5, #0
 80185e4:	bfa2      	ittt	ge
 80185e6:	6821      	ldrge	r1, [r4, #0]
 80185e8:	f021 0104 	bicge.w	r1, r1, #4
 80185ec:	6021      	strge	r1, [r4, #0]
 80185ee:	b90e      	cbnz	r6, 80185f4 <_printf_i+0x118>
 80185f0:	2d00      	cmp	r5, #0
 80185f2:	d04d      	beq.n	8018690 <_printf_i+0x1b4>
 80185f4:	4615      	mov	r5, r2
 80185f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80185fa:	fb03 6711 	mls	r7, r3, r1, r6
 80185fe:	5dc7      	ldrb	r7, [r0, r7]
 8018600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018604:	4637      	mov	r7, r6
 8018606:	42bb      	cmp	r3, r7
 8018608:	460e      	mov	r6, r1
 801860a:	d9f4      	bls.n	80185f6 <_printf_i+0x11a>
 801860c:	2b08      	cmp	r3, #8
 801860e:	d10b      	bne.n	8018628 <_printf_i+0x14c>
 8018610:	6823      	ldr	r3, [r4, #0]
 8018612:	07de      	lsls	r6, r3, #31
 8018614:	d508      	bpl.n	8018628 <_printf_i+0x14c>
 8018616:	6923      	ldr	r3, [r4, #16]
 8018618:	6861      	ldr	r1, [r4, #4]
 801861a:	4299      	cmp	r1, r3
 801861c:	bfde      	ittt	le
 801861e:	2330      	movle	r3, #48	; 0x30
 8018620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018628:	1b52      	subs	r2, r2, r5
 801862a:	6122      	str	r2, [r4, #16]
 801862c:	f8cd a000 	str.w	sl, [sp]
 8018630:	464b      	mov	r3, r9
 8018632:	aa03      	add	r2, sp, #12
 8018634:	4621      	mov	r1, r4
 8018636:	4640      	mov	r0, r8
 8018638:	f7ff fee2 	bl	8018400 <_printf_common>
 801863c:	3001      	adds	r0, #1
 801863e:	d14c      	bne.n	80186da <_printf_i+0x1fe>
 8018640:	f04f 30ff 	mov.w	r0, #4294967295
 8018644:	b004      	add	sp, #16
 8018646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801864a:	4835      	ldr	r0, [pc, #212]	; (8018720 <_printf_i+0x244>)
 801864c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018650:	6829      	ldr	r1, [r5, #0]
 8018652:	6823      	ldr	r3, [r4, #0]
 8018654:	f851 6b04 	ldr.w	r6, [r1], #4
 8018658:	6029      	str	r1, [r5, #0]
 801865a:	061d      	lsls	r5, r3, #24
 801865c:	d514      	bpl.n	8018688 <_printf_i+0x1ac>
 801865e:	07df      	lsls	r7, r3, #31
 8018660:	bf44      	itt	mi
 8018662:	f043 0320 	orrmi.w	r3, r3, #32
 8018666:	6023      	strmi	r3, [r4, #0]
 8018668:	b91e      	cbnz	r6, 8018672 <_printf_i+0x196>
 801866a:	6823      	ldr	r3, [r4, #0]
 801866c:	f023 0320 	bic.w	r3, r3, #32
 8018670:	6023      	str	r3, [r4, #0]
 8018672:	2310      	movs	r3, #16
 8018674:	e7b0      	b.n	80185d8 <_printf_i+0xfc>
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	f043 0320 	orr.w	r3, r3, #32
 801867c:	6023      	str	r3, [r4, #0]
 801867e:	2378      	movs	r3, #120	; 0x78
 8018680:	4828      	ldr	r0, [pc, #160]	; (8018724 <_printf_i+0x248>)
 8018682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018686:	e7e3      	b.n	8018650 <_printf_i+0x174>
 8018688:	0659      	lsls	r1, r3, #25
 801868a:	bf48      	it	mi
 801868c:	b2b6      	uxthmi	r6, r6
 801868e:	e7e6      	b.n	801865e <_printf_i+0x182>
 8018690:	4615      	mov	r5, r2
 8018692:	e7bb      	b.n	801860c <_printf_i+0x130>
 8018694:	682b      	ldr	r3, [r5, #0]
 8018696:	6826      	ldr	r6, [r4, #0]
 8018698:	6961      	ldr	r1, [r4, #20]
 801869a:	1d18      	adds	r0, r3, #4
 801869c:	6028      	str	r0, [r5, #0]
 801869e:	0635      	lsls	r5, r6, #24
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	d501      	bpl.n	80186a8 <_printf_i+0x1cc>
 80186a4:	6019      	str	r1, [r3, #0]
 80186a6:	e002      	b.n	80186ae <_printf_i+0x1d2>
 80186a8:	0670      	lsls	r0, r6, #25
 80186aa:	d5fb      	bpl.n	80186a4 <_printf_i+0x1c8>
 80186ac:	8019      	strh	r1, [r3, #0]
 80186ae:	2300      	movs	r3, #0
 80186b0:	6123      	str	r3, [r4, #16]
 80186b2:	4615      	mov	r5, r2
 80186b4:	e7ba      	b.n	801862c <_printf_i+0x150>
 80186b6:	682b      	ldr	r3, [r5, #0]
 80186b8:	1d1a      	adds	r2, r3, #4
 80186ba:	602a      	str	r2, [r5, #0]
 80186bc:	681d      	ldr	r5, [r3, #0]
 80186be:	6862      	ldr	r2, [r4, #4]
 80186c0:	2100      	movs	r1, #0
 80186c2:	4628      	mov	r0, r5
 80186c4:	f7e7 fdac 	bl	8000220 <memchr>
 80186c8:	b108      	cbz	r0, 80186ce <_printf_i+0x1f2>
 80186ca:	1b40      	subs	r0, r0, r5
 80186cc:	6060      	str	r0, [r4, #4]
 80186ce:	6863      	ldr	r3, [r4, #4]
 80186d0:	6123      	str	r3, [r4, #16]
 80186d2:	2300      	movs	r3, #0
 80186d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186d8:	e7a8      	b.n	801862c <_printf_i+0x150>
 80186da:	6923      	ldr	r3, [r4, #16]
 80186dc:	462a      	mov	r2, r5
 80186de:	4649      	mov	r1, r9
 80186e0:	4640      	mov	r0, r8
 80186e2:	47d0      	blx	sl
 80186e4:	3001      	adds	r0, #1
 80186e6:	d0ab      	beq.n	8018640 <_printf_i+0x164>
 80186e8:	6823      	ldr	r3, [r4, #0]
 80186ea:	079b      	lsls	r3, r3, #30
 80186ec:	d413      	bmi.n	8018716 <_printf_i+0x23a>
 80186ee:	68e0      	ldr	r0, [r4, #12]
 80186f0:	9b03      	ldr	r3, [sp, #12]
 80186f2:	4298      	cmp	r0, r3
 80186f4:	bfb8      	it	lt
 80186f6:	4618      	movlt	r0, r3
 80186f8:	e7a4      	b.n	8018644 <_printf_i+0x168>
 80186fa:	2301      	movs	r3, #1
 80186fc:	4632      	mov	r2, r6
 80186fe:	4649      	mov	r1, r9
 8018700:	4640      	mov	r0, r8
 8018702:	47d0      	blx	sl
 8018704:	3001      	adds	r0, #1
 8018706:	d09b      	beq.n	8018640 <_printf_i+0x164>
 8018708:	3501      	adds	r5, #1
 801870a:	68e3      	ldr	r3, [r4, #12]
 801870c:	9903      	ldr	r1, [sp, #12]
 801870e:	1a5b      	subs	r3, r3, r1
 8018710:	42ab      	cmp	r3, r5
 8018712:	dcf2      	bgt.n	80186fa <_printf_i+0x21e>
 8018714:	e7eb      	b.n	80186ee <_printf_i+0x212>
 8018716:	2500      	movs	r5, #0
 8018718:	f104 0619 	add.w	r6, r4, #25
 801871c:	e7f5      	b.n	801870a <_printf_i+0x22e>
 801871e:	bf00      	nop
 8018720:	0801b725 	.word	0x0801b725
 8018724:	0801b736 	.word	0x0801b736

08018728 <_sbrk_r>:
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	4d06      	ldr	r5, [pc, #24]	; (8018744 <_sbrk_r+0x1c>)
 801872c:	2300      	movs	r3, #0
 801872e:	4604      	mov	r4, r0
 8018730:	4608      	mov	r0, r1
 8018732:	602b      	str	r3, [r5, #0]
 8018734:	f7e9 fab0 	bl	8001c98 <_sbrk>
 8018738:	1c43      	adds	r3, r0, #1
 801873a:	d102      	bne.n	8018742 <_sbrk_r+0x1a>
 801873c:	682b      	ldr	r3, [r5, #0]
 801873e:	b103      	cbz	r3, 8018742 <_sbrk_r+0x1a>
 8018740:	6023      	str	r3, [r4, #0]
 8018742:	bd38      	pop	{r3, r4, r5, pc}
 8018744:	200090d0 	.word	0x200090d0

08018748 <__sread>:
 8018748:	b510      	push	{r4, lr}
 801874a:	460c      	mov	r4, r1
 801874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018750:	f000 f8a8 	bl	80188a4 <_read_r>
 8018754:	2800      	cmp	r0, #0
 8018756:	bfab      	itete	ge
 8018758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801875a:	89a3      	ldrhlt	r3, [r4, #12]
 801875c:	181b      	addge	r3, r3, r0
 801875e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018762:	bfac      	ite	ge
 8018764:	6563      	strge	r3, [r4, #84]	; 0x54
 8018766:	81a3      	strhlt	r3, [r4, #12]
 8018768:	bd10      	pop	{r4, pc}

0801876a <__swrite>:
 801876a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801876e:	461f      	mov	r7, r3
 8018770:	898b      	ldrh	r3, [r1, #12]
 8018772:	05db      	lsls	r3, r3, #23
 8018774:	4605      	mov	r5, r0
 8018776:	460c      	mov	r4, r1
 8018778:	4616      	mov	r6, r2
 801877a:	d505      	bpl.n	8018788 <__swrite+0x1e>
 801877c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018780:	2302      	movs	r3, #2
 8018782:	2200      	movs	r2, #0
 8018784:	f000 f870 	bl	8018868 <_lseek_r>
 8018788:	89a3      	ldrh	r3, [r4, #12]
 801878a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801878e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018792:	81a3      	strh	r3, [r4, #12]
 8018794:	4632      	mov	r2, r6
 8018796:	463b      	mov	r3, r7
 8018798:	4628      	mov	r0, r5
 801879a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801879e:	f000 b817 	b.w	80187d0 <_write_r>

080187a2 <__sseek>:
 80187a2:	b510      	push	{r4, lr}
 80187a4:	460c      	mov	r4, r1
 80187a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187aa:	f000 f85d 	bl	8018868 <_lseek_r>
 80187ae:	1c43      	adds	r3, r0, #1
 80187b0:	89a3      	ldrh	r3, [r4, #12]
 80187b2:	bf15      	itete	ne
 80187b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80187b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80187ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80187be:	81a3      	strheq	r3, [r4, #12]
 80187c0:	bf18      	it	ne
 80187c2:	81a3      	strhne	r3, [r4, #12]
 80187c4:	bd10      	pop	{r4, pc}

080187c6 <__sclose>:
 80187c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187ca:	f000 b81b 	b.w	8018804 <_close_r>
	...

080187d0 <_write_r>:
 80187d0:	b538      	push	{r3, r4, r5, lr}
 80187d2:	4d07      	ldr	r5, [pc, #28]	; (80187f0 <_write_r+0x20>)
 80187d4:	4604      	mov	r4, r0
 80187d6:	4608      	mov	r0, r1
 80187d8:	4611      	mov	r1, r2
 80187da:	2200      	movs	r2, #0
 80187dc:	602a      	str	r2, [r5, #0]
 80187de:	461a      	mov	r2, r3
 80187e0:	f7fe f830 	bl	8016844 <_write>
 80187e4:	1c43      	adds	r3, r0, #1
 80187e6:	d102      	bne.n	80187ee <_write_r+0x1e>
 80187e8:	682b      	ldr	r3, [r5, #0]
 80187ea:	b103      	cbz	r3, 80187ee <_write_r+0x1e>
 80187ec:	6023      	str	r3, [r4, #0]
 80187ee:	bd38      	pop	{r3, r4, r5, pc}
 80187f0:	200090d0 	.word	0x200090d0

080187f4 <abort>:
 80187f4:	b508      	push	{r3, lr}
 80187f6:	2006      	movs	r0, #6
 80187f8:	f000 f88e 	bl	8018918 <raise>
 80187fc:	2001      	movs	r0, #1
 80187fe:	f7e9 fa0d 	bl	8001c1c <_exit>
	...

08018804 <_close_r>:
 8018804:	b538      	push	{r3, r4, r5, lr}
 8018806:	4d06      	ldr	r5, [pc, #24]	; (8018820 <_close_r+0x1c>)
 8018808:	2300      	movs	r3, #0
 801880a:	4604      	mov	r4, r0
 801880c:	4608      	mov	r0, r1
 801880e:	602b      	str	r3, [r5, #0]
 8018810:	f7e9 fa0e 	bl	8001c30 <_close>
 8018814:	1c43      	adds	r3, r0, #1
 8018816:	d102      	bne.n	801881e <_close_r+0x1a>
 8018818:	682b      	ldr	r3, [r5, #0]
 801881a:	b103      	cbz	r3, 801881e <_close_r+0x1a>
 801881c:	6023      	str	r3, [r4, #0]
 801881e:	bd38      	pop	{r3, r4, r5, pc}
 8018820:	200090d0 	.word	0x200090d0

08018824 <_fstat_r>:
 8018824:	b538      	push	{r3, r4, r5, lr}
 8018826:	4d07      	ldr	r5, [pc, #28]	; (8018844 <_fstat_r+0x20>)
 8018828:	2300      	movs	r3, #0
 801882a:	4604      	mov	r4, r0
 801882c:	4608      	mov	r0, r1
 801882e:	4611      	mov	r1, r2
 8018830:	602b      	str	r3, [r5, #0]
 8018832:	f7e9 fa09 	bl	8001c48 <_fstat>
 8018836:	1c43      	adds	r3, r0, #1
 8018838:	d102      	bne.n	8018840 <_fstat_r+0x1c>
 801883a:	682b      	ldr	r3, [r5, #0]
 801883c:	b103      	cbz	r3, 8018840 <_fstat_r+0x1c>
 801883e:	6023      	str	r3, [r4, #0]
 8018840:	bd38      	pop	{r3, r4, r5, pc}
 8018842:	bf00      	nop
 8018844:	200090d0 	.word	0x200090d0

08018848 <_isatty_r>:
 8018848:	b538      	push	{r3, r4, r5, lr}
 801884a:	4d06      	ldr	r5, [pc, #24]	; (8018864 <_isatty_r+0x1c>)
 801884c:	2300      	movs	r3, #0
 801884e:	4604      	mov	r4, r0
 8018850:	4608      	mov	r0, r1
 8018852:	602b      	str	r3, [r5, #0]
 8018854:	f7e9 fa08 	bl	8001c68 <_isatty>
 8018858:	1c43      	adds	r3, r0, #1
 801885a:	d102      	bne.n	8018862 <_isatty_r+0x1a>
 801885c:	682b      	ldr	r3, [r5, #0]
 801885e:	b103      	cbz	r3, 8018862 <_isatty_r+0x1a>
 8018860:	6023      	str	r3, [r4, #0]
 8018862:	bd38      	pop	{r3, r4, r5, pc}
 8018864:	200090d0 	.word	0x200090d0

08018868 <_lseek_r>:
 8018868:	b538      	push	{r3, r4, r5, lr}
 801886a:	4d07      	ldr	r5, [pc, #28]	; (8018888 <_lseek_r+0x20>)
 801886c:	4604      	mov	r4, r0
 801886e:	4608      	mov	r0, r1
 8018870:	4611      	mov	r1, r2
 8018872:	2200      	movs	r2, #0
 8018874:	602a      	str	r2, [r5, #0]
 8018876:	461a      	mov	r2, r3
 8018878:	f7e9 fa01 	bl	8001c7e <_lseek>
 801887c:	1c43      	adds	r3, r0, #1
 801887e:	d102      	bne.n	8018886 <_lseek_r+0x1e>
 8018880:	682b      	ldr	r3, [r5, #0]
 8018882:	b103      	cbz	r3, 8018886 <_lseek_r+0x1e>
 8018884:	6023      	str	r3, [r4, #0]
 8018886:	bd38      	pop	{r3, r4, r5, pc}
 8018888:	200090d0 	.word	0x200090d0

0801888c <__malloc_lock>:
 801888c:	4801      	ldr	r0, [pc, #4]	; (8018894 <__malloc_lock+0x8>)
 801888e:	f7ff bb0d 	b.w	8017eac <__retarget_lock_acquire_recursive>
 8018892:	bf00      	nop
 8018894:	200090d4 	.word	0x200090d4

08018898 <__malloc_unlock>:
 8018898:	4801      	ldr	r0, [pc, #4]	; (80188a0 <__malloc_unlock+0x8>)
 801889a:	f7ff bb08 	b.w	8017eae <__retarget_lock_release_recursive>
 801889e:	bf00      	nop
 80188a0:	200090d4 	.word	0x200090d4

080188a4 <_read_r>:
 80188a4:	b538      	push	{r3, r4, r5, lr}
 80188a6:	4d07      	ldr	r5, [pc, #28]	; (80188c4 <_read_r+0x20>)
 80188a8:	4604      	mov	r4, r0
 80188aa:	4608      	mov	r0, r1
 80188ac:	4611      	mov	r1, r2
 80188ae:	2200      	movs	r2, #0
 80188b0:	602a      	str	r2, [r5, #0]
 80188b2:	461a      	mov	r2, r3
 80188b4:	f7fd fff6 	bl	80168a4 <_read>
 80188b8:	1c43      	adds	r3, r0, #1
 80188ba:	d102      	bne.n	80188c2 <_read_r+0x1e>
 80188bc:	682b      	ldr	r3, [r5, #0]
 80188be:	b103      	cbz	r3, 80188c2 <_read_r+0x1e>
 80188c0:	6023      	str	r3, [r4, #0]
 80188c2:	bd38      	pop	{r3, r4, r5, pc}
 80188c4:	200090d0 	.word	0x200090d0

080188c8 <_raise_r>:
 80188c8:	291f      	cmp	r1, #31
 80188ca:	b538      	push	{r3, r4, r5, lr}
 80188cc:	4604      	mov	r4, r0
 80188ce:	460d      	mov	r5, r1
 80188d0:	d904      	bls.n	80188dc <_raise_r+0x14>
 80188d2:	2316      	movs	r3, #22
 80188d4:	6003      	str	r3, [r0, #0]
 80188d6:	f04f 30ff 	mov.w	r0, #4294967295
 80188da:	bd38      	pop	{r3, r4, r5, pc}
 80188dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80188de:	b112      	cbz	r2, 80188e6 <_raise_r+0x1e>
 80188e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80188e4:	b94b      	cbnz	r3, 80188fa <_raise_r+0x32>
 80188e6:	4620      	mov	r0, r4
 80188e8:	f000 f830 	bl	801894c <_getpid_r>
 80188ec:	462a      	mov	r2, r5
 80188ee:	4601      	mov	r1, r0
 80188f0:	4620      	mov	r0, r4
 80188f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188f6:	f000 b817 	b.w	8018928 <_kill_r>
 80188fa:	2b01      	cmp	r3, #1
 80188fc:	d00a      	beq.n	8018914 <_raise_r+0x4c>
 80188fe:	1c59      	adds	r1, r3, #1
 8018900:	d103      	bne.n	801890a <_raise_r+0x42>
 8018902:	2316      	movs	r3, #22
 8018904:	6003      	str	r3, [r0, #0]
 8018906:	2001      	movs	r0, #1
 8018908:	e7e7      	b.n	80188da <_raise_r+0x12>
 801890a:	2400      	movs	r4, #0
 801890c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018910:	4628      	mov	r0, r5
 8018912:	4798      	blx	r3
 8018914:	2000      	movs	r0, #0
 8018916:	e7e0      	b.n	80188da <_raise_r+0x12>

08018918 <raise>:
 8018918:	4b02      	ldr	r3, [pc, #8]	; (8018924 <raise+0xc>)
 801891a:	4601      	mov	r1, r0
 801891c:	6818      	ldr	r0, [r3, #0]
 801891e:	f7ff bfd3 	b.w	80188c8 <_raise_r>
 8018922:	bf00      	nop
 8018924:	2000002c 	.word	0x2000002c

08018928 <_kill_r>:
 8018928:	b538      	push	{r3, r4, r5, lr}
 801892a:	4d07      	ldr	r5, [pc, #28]	; (8018948 <_kill_r+0x20>)
 801892c:	2300      	movs	r3, #0
 801892e:	4604      	mov	r4, r0
 8018930:	4608      	mov	r0, r1
 8018932:	4611      	mov	r1, r2
 8018934:	602b      	str	r3, [r5, #0]
 8018936:	f7e9 f95f 	bl	8001bf8 <_kill>
 801893a:	1c43      	adds	r3, r0, #1
 801893c:	d102      	bne.n	8018944 <_kill_r+0x1c>
 801893e:	682b      	ldr	r3, [r5, #0]
 8018940:	b103      	cbz	r3, 8018944 <_kill_r+0x1c>
 8018942:	6023      	str	r3, [r4, #0]
 8018944:	bd38      	pop	{r3, r4, r5, pc}
 8018946:	bf00      	nop
 8018948:	200090d0 	.word	0x200090d0

0801894c <_getpid_r>:
 801894c:	f7e9 b94c 	b.w	8001be8 <_getpid>

08018950 <_init>:
 8018950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018952:	bf00      	nop
 8018954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018956:	bc08      	pop	{r3}
 8018958:	469e      	mov	lr, r3
 801895a:	4770      	bx	lr

0801895c <_fini>:
 801895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801895e:	bf00      	nop
 8018960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018962:	bc08      	pop	{r3}
 8018964:	469e      	mov	lr, r3
 8018966:	4770      	bx	lr
