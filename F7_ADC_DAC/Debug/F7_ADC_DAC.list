
F7_ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e1c  08017c48  08017c48  00027c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa64  0801aa64  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa64  0801aa64  0002aa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa6c  0801aa6c  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa6c  0801aa6c  0002aa6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa70  0801aa70  0002aa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801aa74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801ab04  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801aba4  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d04  200001d0  0801ac44  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008ed4  0801ac44  00038ed4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000379a6  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007cef  00000000  00000000  00067ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000027f0  00000000  00000000  0006f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002610  00000000  00000000  00072088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039516  00000000  00000000  00074698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041bef  00000000  00000000  000adbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001165b4  00000000  00000000  000ef79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00205d51  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000afd0  00000000  00000000  00205da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017c30 	.word	0x08017c30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08017c30 	.word	0x08017c30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fbd0 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f822 	bl	8000604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005c0:	f000 fb08 	bl	8000bd4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb3c 	bl	8000c40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 faa6 	bl	8000b18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fad4 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005d0:	f000 f880 	bl	80006d4 <MX_ADC1_Init>
  MX_DAC_Init();
 80005d4:	f000 f8d0 	bl	8000778 <MX_DAC_Init>
  MX_TIM2_Init();
 80005d8:	f000 f9f0 	bl	80009bc <MX_TIM2_Init>
  MX_UART4_Init();
 80005dc:	f000 fa3c 	bl	8000a58 <MX_UART4_Init>
  MX_UART5_Init();
 80005e0:	f000 fa6a 	bl	8000ab8 <MX_UART5_Init>
  MX_I2C1_Init();
 80005e4:	f000 f8f2 	bl	80007cc <MX_I2C1_Init>
  MX_DMA_Init();
 80005e8:	f000 faf4 	bl	8000bd4 <MX_DMA_Init>
  MX_I2C2_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_I2C2_Init>
  MX_SPI1_Init();
 80005f0:	f000 f96c 	bl	80008cc <MX_SPI1_Init>
  MX_SPI2_Init();
 80005f4:	f000 f9a8 	bl	8000948 <MX_SPI2_Init>
  MX_LWIP_Init();
 80005f8:	f00a fb7a 	bl	800acf0 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005fc:	f015 fcb6 	bl	8015f6c <rtg_main>
 8000600:	e7fc      	b.n	80005fc <main+0x48>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f016 fa3e 	bl	8016a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f006 fc58 	bl	8006edc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000678:	2348      	movs	r3, #72	; 0x48
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f006 fc37 	bl	8006efc <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fb7e 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f006 fec5 	bl	8007444 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 fb68 	bl	8000d94 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0x98>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_ADC1_Init+0x9c>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC1_Init+0x98>)
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_ADC1_Init+0xa0>)
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_ADC1_Init+0x98>)
 8000734:	f001 fb94 	bl	8001e60 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fb29 	bl	8000d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0x98>)
 8000754:	f001 fe52 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075e:	f000 fb19 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001ec 	.word	0x200001ec
 8000770:	40012000 	.word	0x40012000
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_DAC_Init+0x4c>)
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_DAC_Init+0x50>)
 800078a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_DAC_Init+0x4c>)
 800078e:	f002 f9a0 	bl	8002ad2 <HAL_DAC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000798:	f000 fafc 	bl	8000d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_DAC_Init+0x4c>)
 80007ac:	f002 fa17 	bl	8002bde <HAL_DAC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b6:	f000 faed 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000234 	.word	0x20000234
 80007c8:	40007400 	.word	0x40007400

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f004 fa50 	bl	8004cac <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fabf 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f006 f97f 	bl	8006b1c <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fab6 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f006 f9c1 	bl	8006bb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 faad 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000248 	.word	0x20000248
 8000844:	40005400 	.word	0x40005400
 8000848:	00808cd2 	.word	0x00808cd2

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 44;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	222c      	movs	r2, #44	; 0x2c
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f004 fa10 	bl	8004cac <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fa7f 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f006 f93f 	bl	8006b1c <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fa76 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f006 f981 	bl	8006bb2 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fa6d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000029c 	.word	0x2000029c
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00808cd2 	.word	0x00808cd2

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x74>)
 800092c:	f007 fba0 	bl	8008070 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fa2d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000470 	.word	0x20000470
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_SPI2_Init+0x70>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000960:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI2_Init+0x6c>)
 80009a0:	f007 fb66 	bl	8008070 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009aa:	f000 f9f3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004d4 	.word	0x200004d4
 80009b8:	40003800 	.word	0x40003800

080009bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a06:	f007 fcfe 	bl	8008406 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f9c0 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a22:	f007 fedf 	bl	80087e4 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f9b2 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a3e:	f008 f8fd 	bl	8008c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f9a4 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000538 	.word	0x20000538

08000a58 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_UART4_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a9c:	f008 f97a 	bl	8008d94 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f975 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000584 	.word	0x20000584
 8000ab4:	40004c00 	.word	0x40004c00

08000ab8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_UART5_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_UART5_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_UART5_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_UART5_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_UART5_Init+0x58>)
 8000afc:	f008 f94a 	bl	8008d94 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f945 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000060c 	.word	0x2000060c
 8000b14:	40005000 	.word	0x40005000

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f008 f91a 	bl	8008d94 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f915 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000694 	.word	0x20000694
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	f006 f845 	bl	8006c4a <HAL_PCD_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f8e5 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000071c 	.word	0x2000071c

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_DMA_Init+0x68>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_DMA_Init+0x68>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_DMA_Init+0x68>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f001 ff35 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f001 ff4e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200d      	movs	r0, #13
 8000c08:	f001 ff2d 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f001 ff46 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2011      	movs	r0, #17
 8000c18:	f001 ff25 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f001 ff3e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	202f      	movs	r0, #47	; 0x2f
 8000c28:	f001 ff1d 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c2c:	202f      	movs	r0, #47	; 0x2f
 8000c2e:	f001 ff36 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_GPIO_Init+0x148>)
 8000cee:	f003 ff85 	bl	8004bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	4825      	ldr	r0, [pc, #148]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cf8:	f003 ff80 	bl	8004bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	481f      	ldr	r0, [pc, #124]	; (8000d90 <MX_GPIO_Init+0x150>)
 8000d14:	f003 fdc6 	bl	80048a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x148>)
 8000d32:	f003 fdb7 	bl	80048a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000d4e:	f003 fda9 	bl	80048a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000d66:	f003 fd9d 	bl	80048a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f001 fe79 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d74:	2028      	movs	r0, #40	; 0x28
 8000d76:	f001 fe92 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_ADC_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12b      	bne.n	8000e62 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <HAL_ADC_MspInit+0x8c>)
 8000e4e:	f003 fd29 	bl	80048a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2012      	movs	r0, #18
 8000e58:	f001 fe05 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e5c:	2012      	movs	r0, #18
 8000e5e:	f001 fe1e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_DAC_MspInit+0x84>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12b      	bne.n	8000ef2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_DAC_MspInit+0x8c>)
 8000ede:	f003 fce1 	bl	80048a4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2036      	movs	r0, #54	; 0x36
 8000ee8:	f001 fdbd 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eec:	2036      	movs	r0, #54	; 0x36
 8000eee:	f001 fdd6 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40007400 	.word	0x40007400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ac      	sub	sp, #176	; 0xb0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	2284      	movs	r2, #132	; 0x84
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f015 fdb3 	bl	8016a94 <memset>
  if(hi2c->Instance==I2C1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_I2C_MspInit+0x188>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	f040 80b9 	bne.w	80010ac <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fca1 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f54:	f7ff ff1e 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b4e      	ldr	r3, [pc, #312]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f70:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4840      	ldr	r0, [pc, #256]	; (8001098 <HAL_I2C_MspInit+0x190>)
 8000f98:	f003 fc84 	bl	80048a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <HAL_I2C_MspInit+0x198>)
 8000fb8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000ff6:	f001 fe4b 	bl	8002c90 <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001000:	f7ff fec8 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <HAL_I2C_MspInit+0x194>)
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c
 800100a:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_I2C_MspInit+0x194>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <HAL_I2C_MspInit+0x1a0>)
 8001014:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800101c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001052:	f001 fe1d 	bl	8002c90 <HAL_DMA_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 800105c:	f7ff fe9a 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	201f      	movs	r0, #31
 8001072:	f001 fcf8 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001076:	201f      	movs	r0, #31
 8001078:	f001 fd11 	bl	8002a9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2020      	movs	r0, #32
 8001082:	f001 fcf0 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001086:	2020      	movs	r0, #32
 8001088:	f001 fd09 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800108c:	e0be      	b.n	800120c <HAL_I2C_MspInit+0x304>
 800108e:	bf00      	nop
 8001090:	40005400 	.word	0x40005400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400
 800109c:	200002f0 	.word	0x200002f0
 80010a0:	40026010 	.word	0x40026010
 80010a4:	20000350 	.word	0x20000350
 80010a8:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_I2C_MspInit+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 80aa 	bne.w	800120c <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 fbe1 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 80010d4:	f7ff fe5e 	bl	8000d94 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <HAL_I2C_MspInit+0x310>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_I2C_MspInit+0x310>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <HAL_I2C_MspInit+0x310>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800110a:	2304      	movs	r3, #4
 800110c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001114:	4619      	mov	r1, r3
 8001116:	4841      	ldr	r0, [pc, #260]	; (800121c <HAL_I2C_MspInit+0x314>)
 8001118:	f003 fbc4 	bl	80048a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_I2C_MspInit+0x310>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a3d      	ldr	r2, [pc, #244]	; (8001218 <HAL_I2C_MspInit+0x310>)
 8001122:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_I2C_MspInit+0x310>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001134:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <HAL_I2C_MspInit+0x31c>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800113c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001140:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001154:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001176:	f001 fd8b 	bl	8002c90 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001180:	f7ff fe08 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_I2C_MspInit+0x320>)
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_I2C_MspInit+0x324>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_I2C_MspInit+0x320>)
 8001198:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800119c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011d2:	f001 fd5d 	bl	8002c90 <HAL_DMA_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80011dc:	f7ff fdda 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2021      	movs	r0, #33	; 0x21
 80011f2:	f001 fc38 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011f6:	2021      	movs	r0, #33	; 0x21
 80011f8:	f001 fc51 	bl	8002a9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2022      	movs	r0, #34	; 0x22
 8001202:	f001 fc30 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001206:	2022      	movs	r0, #34	; 0x22
 8001208:	f001 fc49 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 800120c:	bf00      	nop
 800120e:	37b0      	adds	r7, #176	; 0xb0
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005800 	.word	0x40005800
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400
 8001220:	200003b0 	.word	0x200003b0
 8001224:	40026040 	.word	0x40026040
 8001228:	20000410 	.word	0x20000410
 800122c:	400260b8 	.word	0x400260b8

08001230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_SPI_MspInit+0x168>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d14c      	bne.n	80012ec <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_SPI_MspInit+0x16c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a45      	ldr	r2, [pc, #276]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012aa:	2305      	movs	r3, #5
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	483a      	ldr	r0, [pc, #232]	; (80013a0 <HAL_SPI_MspInit+0x170>)
 80012b6:	f003 faf5 	bl	80048a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ba:	2320      	movs	r3, #32
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ca:	2305      	movs	r3, #5
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <HAL_SPI_MspInit+0x174>)
 80012d6:	f003 fae5 	bl	80048a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2023      	movs	r0, #35	; 0x23
 80012e0:	f001 fbc1 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012e4:	2023      	movs	r0, #35	; 0x23
 80012e6:	f001 fbda 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ea:	e050      	b.n	800138e <HAL_SPI_MspInit+0x15e>
  else if(hspi->Instance==SPI2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <HAL_SPI_MspInit+0x178>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d14b      	bne.n	800138e <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_SPI_MspInit+0x16c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_SPI_MspInit+0x16c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_SPI_MspInit+0x16c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_SPI_MspInit+0x16c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800133e:	230c      	movs	r3, #12
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134e:	2305      	movs	r3, #5
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <HAL_SPI_MspInit+0x17c>)
 800135a:	f003 faa3 	bl	80048a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800135e:	2308      	movs	r3, #8
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800136e:	2305      	movs	r3, #5
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <HAL_SPI_MspInit+0x180>)
 800137a:	f003 fa93 	bl	80048a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2024      	movs	r0, #36	; 0x24
 8001384:	f001 fb6f 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001388:	2024      	movs	r0, #36	; 0x24
 800138a:	f001 fb88 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013000 	.word	0x40013000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40003800 	.word	0x40003800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c4:	d113      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201c      	movs	r0, #28
 80013e4:	f001 fb3f 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f001 fb58 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0b0      	sub	sp, #192	; 0xc0
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001418:	2284      	movs	r2, #132	; 0x84
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f015 fb39 	bl	8016a94 <memset>
  if(huart->Instance==UART4)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a81      	ldr	r2, [pc, #516]	; (800162c <HAL_UART_MspInit+0x230>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d145      	bne.n	80014b8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001432:	2300      	movs	r3, #0
 8001434:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f006 fa28 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001446:	f7ff fca5 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800144a:	4b79      	ldr	r3, [pc, #484]	; (8001630 <HAL_UART_MspInit+0x234>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a78      	ldr	r2, [pc, #480]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a72      	ldr	r2, [pc, #456]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001494:	2308      	movs	r3, #8
 8001496:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800149e:	4619      	mov	r1, r3
 80014a0:	4864      	ldr	r0, [pc, #400]	; (8001634 <HAL_UART_MspInit+0x238>)
 80014a2:	f003 f9ff 	bl	80048a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2034      	movs	r0, #52	; 0x34
 80014ac:	f001 fadb 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014b0:	2034      	movs	r0, #52	; 0x34
 80014b2:	f001 faf4 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b6:	e0b5      	b.n	8001624 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==UART5)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <HAL_UART_MspInit+0x23c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d166      	bne.n	8001590 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 f9dd 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80014dc:	f7ff fc5a 	bl	8000d94 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a46      	ldr	r2, [pc, #280]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HAL_UART_MspInit+0x234>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001536:	2301      	movs	r3, #1
 8001538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001542:	2308      	movs	r3, #8
 8001544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800154c:	4619      	mov	r1, r3
 800154e:	4839      	ldr	r0, [pc, #228]	; (8001634 <HAL_UART_MspInit+0x238>)
 8001550:	f003 f9a8 	bl	80048a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001554:	2304      	movs	r3, #4
 8001556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001560:	2301      	movs	r3, #1
 8001562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800156c:	2308      	movs	r3, #8
 800156e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001572:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001576:	4619      	mov	r1, r3
 8001578:	4830      	ldr	r0, [pc, #192]	; (800163c <HAL_UART_MspInit+0x240>)
 800157a:	f003 f993 	bl	80048a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2035      	movs	r0, #53	; 0x35
 8001584:	f001 fa6f 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001588:	2035      	movs	r0, #53	; 0x35
 800158a:	f001 fa88 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 800158e:	e049      	b.n	8001624 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_UART_MspInit+0x244>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d144      	bne.n	8001624 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 f971 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80015b4:	f7ff fbee 	bl	8000d94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001602:	2307      	movs	r3, #7
 8001604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800160c:	4619      	mov	r1, r3
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_UART_MspInit+0x240>)
 8001610:	f003 f948 	bl	80048a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2027      	movs	r0, #39	; 0x27
 800161a:	f001 fa24 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800161e:	2027      	movs	r0, #39	; 0x27
 8001620:	f001 fa3d 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	37c0      	adds	r7, #192	; 0xc0
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40004c00 	.word	0x40004c00
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40005000 	.word	0x40005000
 800163c:	40020c00 	.word	0x40020c00
 8001640:	40004800 	.word	0x40004800

08001644 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0ac      	sub	sp, #176	; 0xb0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2284      	movs	r2, #132	; 0x84
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f015 fa15 	bl	8016a94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001672:	d159      	bne.n	8001728 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001674:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001678:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f006 f903 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001690:	f7ff fb80 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_PCD_MspInit+0xec>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_PCD_MspInit+0xec>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016c6:	230a      	movs	r3, #10
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d0:	4619      	mov	r1, r3
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <HAL_PCD_MspInit+0xf0>)
 80016d4:	f003 f8e6 	bl	80048a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f0:	4619      	mov	r1, r3
 80016f2:	4810      	ldr	r0, [pc, #64]	; (8001734 <HAL_PCD_MspInit+0xf0>)
 80016f4:	f003 f8d6 	bl	80048a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_PCD_MspInit+0xec>)
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_PCD_MspInit+0xec>)
 80016fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001702:	6353      	str	r3, [r2, #52]	; 0x34
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6453      	str	r3, [r2, #68]	; 0x44
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_PCD_MspInit+0xec>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	37b0      	adds	r7, #176	; 0xb0
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 fb28 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Stream0_IRQHandler+0x10>)
 8001792:	f001 fc1d 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002f0 	.word	0x200002f0

080017a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Stream2_IRQHandler+0x10>)
 80017a6:	f001 fc13 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003b0 	.word	0x200003b0

080017b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Stream6_IRQHandler+0x10>)
 80017ba:	f001 fc09 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000350 	.word	0x20000350

080017c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <ADC_IRQHandler+0x10>)
 80017ce:	f000 fce4 	bl	800219a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200001ec 	.word	0x200001ec

080017dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM2_IRQHandler+0x10>)
 80017e2:	f006 fedf 	bl	80085a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000538 	.word	0x20000538

080017f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <I2C1_EV_IRQHandler+0x10>)
 80017f6:	f003 fe35 	bl	8005464 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000248 	.word	0x20000248

08001804 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <I2C1_ER_IRQHandler+0x10>)
 800180a:	f003 fe45 	bl	8005498 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000248 	.word	0x20000248

08001818 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <I2C2_EV_IRQHandler+0x10>)
 800181e:	f003 fe21 	bl	8005464 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000029c 	.word	0x2000029c

0800182c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <I2C2_ER_IRQHandler+0x10>)
 8001832:	f003 fe31 	bl	8005498 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000029c 	.word	0x2000029c

08001840 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <SPI1_IRQHandler+0x10>)
 8001846:	f006 fcbf 	bl	80081c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000470 	.word	0x20000470

08001854 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <SPI2_IRQHandler+0x10>)
 800185a:	f006 fcb5 	bl	80081c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200004d4 	.word	0x200004d4

08001868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART3_IRQHandler+0x10>)
 800186e:	f007 fcc9 	bl	8009204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000694 	.word	0x20000694

0800187c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001880:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001884:	f003 f9ee 	bl	8004c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Stream7_IRQHandler+0x10>)
 8001892:	f001 fb9d 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000410 	.word	0x20000410

080018a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <UART4_IRQHandler+0x10>)
 80018a6:	f007 fcad 	bl	8009204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000584 	.word	0x20000584

080018b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART5_IRQHandler+0x10>)
 80018ba:	f007 fca3 	bl	8009204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000060c 	.word	0x2000060c

080018c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM6_DAC_IRQHandler+0x10>)
 80018ce:	f001 f922 	bl	8002b16 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000234 	.word	0x20000234

080018dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <ETH_IRQHandler+0x10>)
 80018e2:	f002 f8f9 	bl	8003ad8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20005604 	.word	0x20005604

080018f0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <ETH_WKUP_IRQHandler+0x10>)
 80018f6:	f002 f8ef 	bl	8003ad8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20005604 	.word	0x20005604

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <_kill+0x20>)
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
	return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20008ec4 	.word	0x20008ec4

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe5 	bl	8001914 <_kill>
	while (1) {}		/* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_close>:
	}
	return len;
}

int _close(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001974:	605a      	str	r2, [r3, #4]
	return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_isatty>:

int _isatty(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
	return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d205      	bcs.n	80019f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <_sbrk+0x6c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	20050000 	.word	0x20050000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000c24 	.word	0x20000c24
 8001a1c:	20008ed8 	.word	0x20008ed8
 8001a20:	20008ec4 	.word	0x20008ec4

08001a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a64:	4c0b      	ldr	r4, [pc, #44]	; (8001a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a72:	f7ff ffd7 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f014 ffcb 	bl	8016a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7fe fd9b 	bl	80005b4 <main>
  bx  lr    
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a8c:	0801aa74 	.word	0x0801aa74
  ldr r2, =_sbss
 8001a90:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001a94:	20008ed4 	.word	0x20008ed4

08001a98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <CAN1_RX0_IRQHandler>

08001a9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <LAN8742_RegisterBusIO+0x28>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <LAN8742_RegisterBusIO+0x28>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <LAN8742_RegisterBusIO+0x28>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e014      	b.n	8001af2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d17c      	bne.n	8001c18 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e01c      	b.n	8001b72 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f107 0208 	add.w	r2, r7, #8
 8001b40:	2112      	movs	r1, #18
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	4798      	blx	r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da03      	bge.n	8001b54 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001b4c:	f06f 0304 	mvn.w	r3, #4
 8001b50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001b52:	e00b      	b.n	8001b6c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d105      	bne.n	8001b6c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
         break;
 8001b6a:	e005      	b.n	8001b78 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b1f      	cmp	r3, #31
 8001b76:	d9df      	bls.n	8001b38 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b1f      	cmp	r3, #31
 8001b7e:	d902      	bls.n	8001b86 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b80:	f06f 0302 	mvn.w	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d145      	bne.n	8001c18 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6810      	ldr	r0, [r2, #0]
 8001b94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4798      	blx	r3
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db37      	blt.n	8001c12 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6810      	ldr	r0, [r2, #0]
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4798      	blx	r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db28      	blt.n	8001c0a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001bc2:	e01c      	b.n	8001bfe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4798      	blx	r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bd6:	d80e      	bhi.n	8001bf6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6810      	ldr	r0, [r2, #0]
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	2100      	movs	r1, #0
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da07      	bge.n	8001bfe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001bee:	f06f 0304 	mvn.w	r3, #4
 8001bf2:	613b      	str	r3, [r7, #16]
                 break;
 8001bf4:	e010      	b.n	8001c18 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001bf6:	f06f 0301 	mvn.w	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
               break;
 8001bfc:	e00c      	b.n	8001c18 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1dd      	bne.n	8001bc4 <LAN8742_Init+0xc6>
 8001c08:	e006      	b.n	8001c18 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001c0a:	f06f 0304 	mvn.w	r3, #4
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e002      	b.n	8001c18 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001c12:	f06f 0303 	mvn.w	r3, #3
 8001c16:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d112      	bne.n	8001c44 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	4798      	blx	r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001c28:	bf00      	nop
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	4798      	blx	r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c3c:	d9f5      	bls.n	8001c2a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001c44:	693b      	ldr	r3, [r7, #16]
 }
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6810      	ldr	r0, [r2, #0]
 8001c62:	f107 020c 	add.w	r2, r7, #12
 8001c66:	2101      	movs	r1, #1
 8001c68:	4798      	blx	r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da02      	bge.n	8001c76 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c70:	f06f 0304 	mvn.w	r3, #4
 8001c74:	e06e      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6810      	ldr	r0, [r2, #0]
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	2101      	movs	r1, #1
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da02      	bge.n	8001c92 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c8c:	f06f 0304 	mvn.w	r3, #4
 8001c90:	e060      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e059      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6810      	ldr	r0, [r2, #0]
 8001ca8:	f107 020c 	add.w	r2, r7, #12
 8001cac:	2100      	movs	r1, #0
 8001cae:	4798      	blx	r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da02      	bge.n	8001cbc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cb6:	f06f 0304 	mvn.w	r3, #4
 8001cba:	e04b      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11b      	bne.n	8001cfe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <LAN8742_GetLinkState+0x90>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e03a      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e033      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e02c      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	e02a      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6810      	ldr	r0, [r2, #0]
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	211f      	movs	r1, #31
 8001d0c:	4798      	blx	r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da02      	bge.n	8001d1a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d14:	f06f 0304 	mvn.w	r3, #4
 8001d18:	e01c      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d24:	2306      	movs	r3, #6
 8001d26:	e015      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 031c 	and.w	r3, r3, #28
 8001d2e:	2b18      	cmp	r3, #24
 8001d30:	d101      	bne.n	8001d36 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00e      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 031c 	and.w	r3, r3, #28
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d101      	bne.n	8001d44 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e007      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 031c 	and.w	r3, r3, #28
 8001d4a:	2b14      	cmp	r3, #20
 8001d4c:	d101      	bne.n	8001d52 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e000      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d52:	2305      	movs	r3, #5
    }				
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 fe75 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f806 	bl	8001d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff f818 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x54>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x58>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fe8f 	bl	8002aba <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00e      	b.n	8001dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d80a      	bhi.n	8001dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f000 fe57 	bl	8002a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_InitTick+0x5c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000c28 	.word	0x20000c28

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000c28 	.word	0x20000c28

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008

08001e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e031      	b.n	8001eda <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe ffb2 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_ADC_Init+0x84>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fbfa 	bl	80026a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	e001      	b.n	8001ed0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	ffffeefd 	.word	0xffffeefd

08001ee8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Start+0x1a>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0ad      	b.n	800205e <HAL_ADC_Start+0x176>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d018      	beq.n	8001f4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_ADC_Start+0x184>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	; (8002070 <HAL_ADC_Start+0x188>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9a      	lsrs	r2, r3, #18
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d175      	bne.n	8002044 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_ADC_Start+0x18c>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f023 0206 	bic.w	r2, r3, #6
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fb8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_ADC_Start+0x190>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d143      	bne.n	800205c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e03a      	b.n	800205c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a24      	ldr	r2, [pc, #144]	; (800207c <HAL_ADC_Start+0x194>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d10e      	bne.n	800200e <HAL_ADC_Start+0x126>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_ADC_Start+0x190>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d120      	bne.n	800205c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_ADC_Start+0x198>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d11b      	bne.n	800205c <HAL_ADC_Start+0x174>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d114      	bne.n	800205c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	e00b      	b.n	800205c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 0210 	orr.w	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000
 8002070:	431bde83 	.word	0x431bde83
 8002074:	fffff8fe 	.word	0xfffff8fe
 8002078:	40012300 	.word	0x40012300
 800207c:	40012000 	.word	0x40012000
 8002080:	40012200 	.word	0x40012200

08002084 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a0:	d113      	bne.n	80020ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b0:	d10b      	bne.n	80020ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e063      	b.n	8002192 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020ca:	f7ff fe99 	bl	8001e00 <HAL_GetTick>
 80020ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d0:	e021      	b.n	8002116 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d01d      	beq.n	8002116 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_ADC_PollForConversion+0x6c>
 80020e0:	f7ff fe8e 	bl	8001e00 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d212      	bcs.n	8002116 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d00b      	beq.n	8002116 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e03d      	b.n	8002192 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d1d6      	bne.n	80020d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0212 	mvn.w	r2, #18
 800212c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d123      	bne.n	8002190 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	d11f      	bne.n	8002190 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d049      	beq.n	8002264 <HAL_ADC_IRQHandler+0xca>
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d046      	beq.n	8002264 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d12b      	bne.n	8002254 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d127      	bne.n	8002254 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800221c:	2b00      	cmp	r3, #0
 800221e:	d119      	bne.n	8002254 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f013 fd2b 	bl	8015cb0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f06f 0212 	mvn.w	r2, #18
 8002262:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d057      	beq.n	800232a <HAL_ADC_IRQHandler+0x190>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d054      	beq.n	800232a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d139      	bne.n	800231a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d12b      	bne.n	800231a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d124      	bne.n	800231a <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11d      	bne.n	800231a <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d119      	bne.n	800231a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fabe 	bl	800289c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 020c 	mvn.w	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_ADC_IRQHandler+0x1d6>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10d      	bne.n	8002370 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f837 	bl	80023d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0201 	mvn.w	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800237e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x218>
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0220 	mvn.w	r2, #32
 80023a0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f820 	bl	80023e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0220 	mvn.w	r2, #32
 80023b0:	601a      	str	r2, [r3, #0]
  }
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1c>
 8002414:	2302      	movs	r3, #2
 8002416:	e136      	b.n	8002686 <HAL_ADC_ConfigChannel+0x28a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b09      	cmp	r3, #9
 8002426:	d93a      	bls.n	800249e <HAL_ADC_ConfigChannel+0xa2>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002430:	d035      	beq.n	800249e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68d9      	ldr	r1, [r3, #12]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	3b1e      	subs	r3, #30
 8002448:	2207      	movs	r2, #7
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a8d      	ldr	r2, [pc, #564]	; (8002694 <HAL_ADC_ConfigChannel+0x298>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	061a      	lsls	r2, r3, #24
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002476:	e035      	b.n	80024e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	4603      	mov	r3, r0
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4403      	add	r3, r0
 8002490:	3b1e      	subs	r3, #30
 8002492:	409a      	lsls	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249c:	e022      	b.n	80024e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	2207      	movs	r2, #7
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6919      	ldr	r1, [r3, #16]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4403      	add	r3, r0
 80024da:	409a      	lsls	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d824      	bhi.n	8002536 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43da      	mvns	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	400a      	ands	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4618      	mov	r0, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b05      	subs	r3, #5
 8002528:	fa00 f203 	lsl.w	r2, r0, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	635a      	str	r2, [r3, #52]	; 0x34
 8002534:	e04c      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d824      	bhi.n	8002588 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b23      	subs	r3, #35	; 0x23
 8002550:	221f      	movs	r2, #31
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	400a      	ands	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b23      	subs	r3, #35	; 0x23
 800257a:	fa00 f203 	lsl.w	r2, r0, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
 8002586:	e023      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b41      	subs	r3, #65	; 0x41
 800259a:	221f      	movs	r2, #31
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43da      	mvns	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	400a      	ands	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b41      	subs	r3, #65	; 0x41
 80025c4:	fa00 f203 	lsl.w	r2, r0, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_ADC_ConfigChannel+0x29c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10a      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1f4>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a2c      	ldr	r2, [pc, #176]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 80025ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_ADC_ConfigChannel+0x29c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10f      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d10b      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a25      	ldr	r2, [pc, #148]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002608:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800260c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002618:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_ADC_ConfigChannel+0x29c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d12b      	bne.n	800267c <HAL_ADC_ConfigChannel+0x280>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_ADC_ConfigChannel+0x298>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x23a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b11      	cmp	r3, #17
 8002634:	d122      	bne.n	800267c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a18      	ldr	r2, [pc, #96]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 800263c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002640:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_ADC_ConfigChannel+0x2a0>)
 8002648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800264c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_ADC_ConfigChannel+0x298>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d111      	bne.n	800267c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9a      	lsrs	r2, r3, #18
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800266e:	e002      	b.n	8002676 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3b01      	subs	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	10000012 	.word	0x10000012
 8002698:	40012000 	.word	0x40012000
 800269c:	40012300 	.word	0x40012300
 80026a0:	20000000 	.word	0x20000000
 80026a4:	431bde83 	.word	0x431bde83

080026a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <ADC_Init+0x1ec>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a77      	ldr	r2, [pc, #476]	; (8002894 <ADC_Init+0x1ec>)
 80026b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026bc:	4b75      	ldr	r3, [pc, #468]	; (8002894 <ADC_Init+0x1ec>)
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4973      	ldr	r1, [pc, #460]	; (8002894 <ADC_Init+0x1ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <ADC_Init+0x1f0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800274a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800276c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e00f      	b.n	80027a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0202 	bic.w	r2, r2, #2
 80027b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	005a      	lsls	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	3b01      	subs	r3, #1
 80027fc:	035a      	lsls	r2, r3, #13
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e007      	b.n	8002818 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	3b01      	subs	r3, #1
 8002834:	051a      	lsls	r2, r3, #20
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800284c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800285a:	025a      	lsls	r2, r3, #9
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	029a      	lsls	r2, r3, #10
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40012300 	.word	0x40012300
 8002898:	0f000001 	.word	0x0f000001

0800289c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	05fa0000 	.word	0x05fa0000

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e014      	b.n	8002b0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	791b      	ldrb	r3, [r3, #4]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7fe f9bf 	bl	8000e78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d120      	bne.n	8002b70 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3c:	d118      	bne.n	8002b70 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b68:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f82d 	bl	8002bca <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7e:	d120      	bne.n	8002bc2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8e:	d118      	bne.n	8002bc2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2204      	movs	r2, #4
 8002b94:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f043 0202 	orr.w	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f85d 	bl	8002c7c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	795b      	ldrb	r3, [r3, #5]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_DAC_ConfigChannel+0x18>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e03c      	b.n	8002c70 <HAL_DAC_ConfigChannel+0x92>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	22c0      	movs	r2, #192	; 0xc0
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff f8b0 	bl	8001e00 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e099      	b.n	8002de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	e00f      	b.n	8002cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cce:	f7ff f897 	bl	8001e00 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d908      	bls.n	8002cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e078      	b.n	8002de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e8      	bne.n	8002cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_DMA_Init+0x158>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4313      	orrs	r3, r2
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f023 0307 	bic.w	r3, r3, #7
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d117      	bne.n	8002db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fb23 	bl	80033e0 <DMA_CheckFifoParam>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dae:	2301      	movs	r3, #1
 8002db0:	e016      	b.n	8002de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fada 	bl	8003374 <DMA_CalcBaseAndBitshift>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	223f      	movs	r2, #63	; 0x3f
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	f010803f 	.word	0xf010803f

08002dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Start_IT+0x26>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e048      	b.n	8002ea4 <HAL_DMA_Start_IT+0xb8>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d137      	bne.n	8002e96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa6c 	bl	8003318 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0216 	orr.w	r2, r2, #22
 8002e5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e6a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e005      	b.n	8002ea2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eba:	f7fe ffa1 	bl	8001e00 <HAL_GetTick>
 8002ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e052      	b.n	8002f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0216 	bic.w	r2, r2, #22
 8002eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_DMA_Abort+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0208 	bic.w	r2, r2, #8
 8002f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2e:	e013      	b.n	8002f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f30:	f7fe ff66 	bl	8001e00 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d90c      	bls.n	8002f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e015      	b.n	8002f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e4      	bne.n	8002f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	223f      	movs	r2, #63	; 0x3f
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d004      	beq.n	8002faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00c      	b.n	8002fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2205      	movs	r2, #5
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002fdc:	4b8e      	ldr	r3, [pc, #568]	; (8003218 <HAL_DMA_IRQHandler+0x248>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a8e      	ldr	r2, [pc, #568]	; (800321c <HAL_DMA_IRQHandler+0x24c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	2208      	movs	r2, #8
 800302a:	409a      	lsls	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	2201      	movs	r2, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2204      	movs	r2, #4
 8003078:	409a      	lsls	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d012      	beq.n	80030a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2204      	movs	r2, #4
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0204 	orr.w	r2, r3, #4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2210      	movs	r2, #16
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d043      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03c      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2210      	movs	r2, #16
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e01f      	b.n	8003140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
 8003110:	e016      	b.n	8003140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0208 	bic.w	r2, r2, #8
 800312e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	2220      	movs	r2, #32
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 808f 	beq.w	8003270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8087 	beq.w	8003270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2220      	movs	r2, #32
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b05      	cmp	r3, #5
 8003178:	d136      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0216 	bic.w	r2, r2, #22
 8003188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_DMA_IRQHandler+0x1da>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0208 	bic.w	r2, r2, #8
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	223f      	movs	r2, #63	; 0x3f
 80031c0:	409a      	lsls	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d07e      	beq.n	80032dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
        }
        return;
 80031e6:	e079      	b.n	80032dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01d      	beq.n	8003232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	2b00      	cmp	r3, #0
 800320a:	d031      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e02c      	b.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000
 800321c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e01e      	b.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0210 	bic.w	r2, r2, #16
 800324e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	2b00      	cmp	r3, #0
 8003276:	d032      	beq.n	80032de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2205      	movs	r2, #5
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	3301      	adds	r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d307      	bcc.n	80032b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f2      	bne.n	800329c <HAL_DMA_IRQHandler+0x2cc>
 80032b6:	e000      	b.n	80032ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
 80032da:	e000      	b.n	80032de <HAL_DMA_IRQHandler+0x30e>
        return;
 80032dc:	bf00      	nop
    }
  }
}
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f2:	b2db      	uxtb	r3, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003334:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d108      	bne.n	8003358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003356:	e007      	b.n	8003368 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3b10      	subs	r3, #16
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d908      	bls.n	80033b4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <DMA_CalcBaseAndBitshift+0x68>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	; 0x58
 80033b2:	e006      	b.n	80033c2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <DMA_CalcBaseAndBitshift+0x68>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	aaaaaaab 	.word	0xaaaaaaab
 80033d8:	0801a824 	.word	0x0801a824
 80033dc:	fffffc00 	.word	0xfffffc00

080033e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11f      	bne.n	800343a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d856      	bhi.n	80034ae <DMA_CheckFifoParam+0xce>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <DMA_CheckFifoParam+0x28>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	08003419 	.word	0x08003419
 800340c:	0800342b 	.word	0x0800342b
 8003410:	08003419 	.word	0x08003419
 8003414:	080034af 	.word	0x080034af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d046      	beq.n	80034b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003428:	e043      	b.n	80034b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003432:	d140      	bne.n	80034b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003438:	e03d      	b.n	80034b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d121      	bne.n	8003488 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d837      	bhi.n	80034ba <DMA_CheckFifoParam+0xda>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <DMA_CheckFifoParam+0x70>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003461 	.word	0x08003461
 8003454:	08003467 	.word	0x08003467
 8003458:	08003461 	.word	0x08003461
 800345c:	08003479 	.word	0x08003479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      break;
 8003464:	e030      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d025      	beq.n	80034be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003476:	e022      	b.n	80034be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003480:	d11f      	bne.n	80034c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003486:	e01c      	b.n	80034c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d903      	bls.n	8003496 <DMA_CheckFifoParam+0xb6>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d003      	beq.n	800349c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003494:	e018      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
      break;
 800349a:	e015      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      break;
 80034ac:	e00b      	b.n	80034c6 <DMA_CheckFifoParam+0xe6>
      break;
 80034ae:	bf00      	nop
 80034b0:	e00a      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034b2:	bf00      	nop
 80034b4:	e008      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034b6:	bf00      	nop
 80034b8:	e006      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e004      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
    }
  } 
  
  return status; 
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop

080034d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06a      	b.n	80035c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2223      	movs	r2, #35	; 0x23
 80034f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f007 ff03 	bl	800b308 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_ETH_Init+0xf0>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <HAL_ETH_Init+0xf0>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_ETH_Init+0xf0>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_ETH_Init+0xf4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <HAL_ETH_Init+0xf4>)
 8003520:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003524:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_ETH_Init+0xf4>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4927      	ldr	r1, [pc, #156]	; (80035cc <HAL_ETH_Init+0xf4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_ETH_Init+0xf4>)
 8003536:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800354e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003550:	f7fe fc56 	bl	8001e00 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003556:	e011      	b.n	800357c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003558:	f7fe fc52 	bl	8001e00 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003566:	d909      	bls.n	800357c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2204      	movs	r2, #4
 800356c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	22e0      	movs	r2, #224	; 0xe0
 8003574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e021      	b.n	80035c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e4      	bne.n	8003558 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fee4 	bl	800435c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 ff8b 	bl	80044b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 ffe1 	bl	8004562 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	461a      	mov	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 ff49 	bl	8004440 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2210      	movs	r2, #16
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40013800 	.word	0x40013800

080035d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d150      	bne.n	8003684 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2223      	movs	r2, #35	; 0x23
 80035e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f9fd 	bl	80039f0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800360e:	2001      	movs	r0, #1
 8003610:	f7fe fc02 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0204 	orr.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003634:	2001      	movs	r0, #1
 8003636:	f7fe fbef 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fd2a 	bl	800409c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800365a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800365e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003676:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2223      	movs	r2, #35	; 0x23
 800367c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369c:	2b23      	cmp	r3, #35	; 0x23
 800369e:	d14a      	bne.n	8003736 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2223      	movs	r2, #35	; 0x23
 80036a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036be:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	f023 0302 	bic.w	r3, r3, #2
 80036d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036d6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7fe fb91 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fccc 	bl	800409c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0208 	bic.w	r2, r2, #8
 8003712:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800371c:	2001      	movs	r0, #1
 800371e:	f7fe fb7b 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2210      	movs	r2, #16
 800372e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f043 0201 	orr.w	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07c      	b.n	8003860 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	2b23      	cmp	r3, #35	; 0x23
 800376e:	d176      	bne.n	800385e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003770:	2200      	movs	r2, #0
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 ff61 	bl	800463c <ETH_Prepare_Tx_Descriptors>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e065      	b.n	8003860 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003794:	f3bf 8f4f 	dsb	sy
}
 8003798:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3206      	adds	r2, #6
 80037a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d904      	bls.n	80037c4 <HAL_ETH_Transmit+0x84>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	1f1a      	subs	r2, r3, #4
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3106      	adds	r1, #6
 80037d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037d8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80037da:	f7fe fb11 	bl	8001e00 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80037e0:	e037      	b.n	8003852 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d011      	beq.n	8003818 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f043 0208 	orr.w	r2, r3, #8
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e023      	b.n	8003860 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d018      	beq.n	8003852 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003820:	f7fe faee 	bl	8001e00 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <HAL_ETH_Transmit+0xf6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f043 0204 	orr.w	r2, r3, #4
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800384c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e006      	b.n	8003860 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	dbc3      	blt.n	80037e2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0a8      	b.n	80039e6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389a:	2b23      	cmp	r3, #35	; 0x23
 800389c:	d001      	beq.n	80038a2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0a1      	b.n	80039e6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	3212      	adds	r2, #18
 80038ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b8:	f1c3 0304 	rsb	r3, r3, #4
 80038bc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80038be:	e06a      	b.n	8003996 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <HAL_ETH_ReadData+0x88>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d040      	beq.n	8003972 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003924:	3b04      	subs	r3, #4
 8003926:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800394c:	461a      	mov	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f007 feab 	bl	800b6ac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2200      	movs	r2, #0
 8003970:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d902      	bls.n	8003984 <HAL_ETH_ReadData+0x11c>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3b04      	subs	r3, #4
 8003982:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	3212      	adds	r2, #18
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db06      	blt.n	80039ac <HAL_ETH_ReadData+0x144>
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d202      	bcs.n	80039ac <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d089      	beq.n	80038c0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f815 	bl	80039f0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d108      	bne.n	80039e4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80039fc:	2301      	movs	r3, #1
 80039fe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a04:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	3212      	adds	r2, #18
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a10:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003a18:	e040      	b.n	8003a9c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d112      	bne.n	8003a48 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	4618      	mov	r0, r3
 8003a28:	f007 fe10 	bl	800b64c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	74fb      	strb	r3, [r7, #19]
 8003a36:	e007      	b.n	8003a48 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	461a      	mov	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d026      	beq.n	8003a9c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <ETH_UpdateDescriptor+0xe4>)
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	e003      	b.n	8003a66 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003a64:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003a66:	f3bf 8f5f 	dmb	sy
}
 8003a6a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d902      	bls.n	8003a8a <ETH_UpdateDescriptor+0x9a>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	3212      	adds	r2, #18
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	617b      	str	r3, [r7, #20]
      desccount--;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <ETH_UpdateDescriptor+0xb8>
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1b8      	bne.n	8003a1a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d00c      	beq.n	8003acc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aba:	461a      	mov	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003acc:	bf00      	nop
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	800045f8 	.word	0x800045f8

08003ad8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d112      	bne.n	8003b18 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d109      	bne.n	8003b18 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <HAL_ETH_IRQHandler+0x178>)
 8003b10:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8ac 	bl	8003c70 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d113      	bne.n	8003b52 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10a      	bne.n	8003b52 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b44:	461a      	mov	r2, r3
 8003b46:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003b4a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f885 	bl	8003c5c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b64:	d14c      	bne.n	8003c00 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	d142      	bne.n	8003c00 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f043 0208 	orr.w	r2, r3, #8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9c:	d11a      	bne.n	8003bd4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <HAL_ETH_IRQHandler+0x17c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bc8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	22e0      	movs	r2, #224	; 0xe0
 8003bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003bd2:	e012      	b.n	8003bfa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	f248 6380 	movw	r3, #34432	; 0x8680
 8003be2:	4013      	ands	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f248 6380 	movw	r3, #34432	; 0x8680
 8003bf8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f842 	bl	8003c84 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d10e      	bne.n	8003c2c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f83a 	bl	8003c98 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_ETH_IRQHandler+0x180>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_ETH_IRQHandler+0x180>)
 8003c3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c3e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f833 	bl	8003cac <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	00010040 	.word	0x00010040
 8003c54:	007e2000 	.word	0x007e2000
 8003c58:	40013c00 	.word	0x40013c00

08003c5c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 031c 	and.w	r3, r3, #28
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	02db      	lsls	r3, r3, #11
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0302 	bic.w	r3, r3, #2
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003d10:	f7fe f876 	bl	8001e00 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d16:	e00d      	b.n	8003d34 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003d18:	f7fe f872 	bl	8001e00 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d26:	d301      	bcc.n	8003d2c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e010      	b.n	8003d4e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ec      	bne.n	8003d18 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 031c 	and.w	r3, r3, #28
 8003d72:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	02db      	lsls	r3, r3, #11
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	019b      	lsls	r3, r3, #6
 8003d84:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db0:	f7fe f826 	bl	8001e00 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003db6:	e00d      	b.n	8003dd4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003db8:	f7fe f822 	bl	8001e00 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d301      	bcc.n	8003dcc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e009      	b.n	8003de0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ec      	bne.n	8003db8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0d9      	b.n	8003fb0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e00b      	b.n	8003fe8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d105      	bne.n	8003fe6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003fda:	6839      	ldr	r1, [r7, #0]
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f883 	bl	80040e8 <ETH_SetMACConfig>

    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 031c 	bic.w	r3, r3, #28
 8004006:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004008:	f003 fc0e 	bl	8007828 <HAL_RCC_GetHCLKFreq>
 800400c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d908      	bls.n	8004028 <HAL_ETH_SetMDIOClockRange+0x38>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d804      	bhi.n	8004028 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f043 0308 	orr.w	r3, r3, #8
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e027      	b.n	8004078 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d908      	bls.n	8004042 <HAL_ETH_SetMDIOClockRange+0x52>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a17      	ldr	r2, [pc, #92]	; (8004090 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d204      	bcs.n	8004042 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f043 030c 	orr.w	r3, r3, #12
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e01a      	b.n	8004078 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d303      	bcc.n	8004052 <HAL_ETH_SetMDIOClockRange+0x62>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d911      	bls.n	8004076 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d908      	bls.n	800406c <HAL_ETH_SetMDIOClockRange+0x7c>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d804      	bhi.n	800406c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e005      	b.n	8004078 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f043 0310 	orr.w	r3, r3, #16
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e000      	b.n	8004078 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004076:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	611a      	str	r2, [r3, #16]
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	01312cff 	.word	0x01312cff
 800408c:	02160ebf 	.word	0x02160ebf
 8004090:	03938700 	.word	0x03938700
 8004094:	05f5e0ff 	.word	0x05f5e0ff
 8004098:	08f0d17f 	.word	0x08f0d17f

0800409c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040be:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fd fea3 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040dc:	6193      	str	r3, [r2, #24]
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4b51      	ldr	r3, [pc, #324]	; (8004244 <ETH_SetMACConfig+0x15c>)
 80040fe:	4013      	ands	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	7c1b      	ldrb	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <ETH_SetMACConfig+0x28>
 800410a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800410e:	e000      	b.n	8004112 <ETH_SetMACConfig+0x2a>
 8004110:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	7c5b      	ldrb	r3, [r3, #17]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <ETH_SetMACConfig+0x38>
 800411a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800411e:	e000      	b.n	8004122 <ETH_SetMACConfig+0x3a>
 8004120:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004122:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004128:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7fdb      	ldrb	r3, [r3, #31]
 800412e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004130:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004136:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	7f92      	ldrb	r2, [r2, #30]
 800413c:	2a00      	cmp	r2, #0
 800413e:	d102      	bne.n	8004146 <ETH_SetMACConfig+0x5e>
 8004140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004144:	e000      	b.n	8004148 <ETH_SetMACConfig+0x60>
 8004146:	2200      	movs	r2, #0
                        macconf->Speed |
 8004148:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7f1b      	ldrb	r3, [r3, #28]
 800414e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004150:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004156:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	791b      	ldrb	r3, [r3, #4]
 800415c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800415e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004166:	2a00      	cmp	r2, #0
 8004168:	d102      	bne.n	8004170 <ETH_SetMACConfig+0x88>
 800416a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416e:	e000      	b.n	8004172 <ETH_SetMACConfig+0x8a>
 8004170:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004172:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	7bdb      	ldrb	r3, [r3, #15]
 8004178:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800417a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004180:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004188:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800418a:	4313      	orrs	r3, r2
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041a2:	2001      	movs	r0, #1
 80041a4:	f7fd fe38 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80041be:	4013      	ands	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d101      	bne.n	80041d6 <ETH_SetMACConfig+0xee>
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	e000      	b.n	80041d8 <ETH_SetMACConfig+0xf0>
 80041d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80041de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80041e6:	2a01      	cmp	r2, #1
 80041e8:	d101      	bne.n	80041ee <ETH_SetMACConfig+0x106>
 80041ea:	2208      	movs	r2, #8
 80041ec:	e000      	b.n	80041f0 <ETH_SetMACConfig+0x108>
 80041ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80041f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80041f8:	2a01      	cmp	r2, #1
 80041fa:	d101      	bne.n	8004200 <ETH_SetMACConfig+0x118>
 80041fc:	2204      	movs	r2, #4
 80041fe:	e000      	b.n	8004202 <ETH_SetMACConfig+0x11a>
 8004200:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004202:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800420a:	2a01      	cmp	r2, #1
 800420c:	d101      	bne.n	8004212 <ETH_SetMACConfig+0x12a>
 800420e:	2202      	movs	r2, #2
 8004210:	e000      	b.n	8004214 <ETH_SetMACConfig+0x12c>
 8004212:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004214:	4313      	orrs	r3, r2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800422c:	2001      	movs	r0, #1
 800422e:	f7fd fdf3 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	ff20810f 	.word	0xff20810f

08004248 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <ETH_SetDMAConfig+0x110>)
 8004262:	4013      	ands	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	7b1b      	ldrb	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <ETH_SetDMAConfig+0x2c>
 800426e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004272:	e000      	b.n	8004276 <ETH_SetDMAConfig+0x2e>
 8004274:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	7b5b      	ldrb	r3, [r3, #13]
 800427a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800427c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	7f52      	ldrb	r2, [r2, #29]
 8004282:	2a00      	cmp	r2, #0
 8004284:	d102      	bne.n	800428c <ETH_SetDMAConfig+0x44>
 8004286:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800428a:	e000      	b.n	800428e <ETH_SetDMAConfig+0x46>
 800428c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800428e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	7b9b      	ldrb	r3, [r3, #14]
 8004294:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004296:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800429c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	7f1b      	ldrb	r3, [r3, #28]
 80042a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80042a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	7f9b      	ldrb	r3, [r3, #30]
 80042aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80042ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80042b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042bc:	4313      	orrs	r3, r2
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	461a      	mov	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042de:	2001      	movs	r0, #1
 80042e0:	f7fd fd9a 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	461a      	mov	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	791b      	ldrb	r3, [r3, #4]
 80042f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004302:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004308:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004310:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004312:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800431a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004320:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800432a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800432e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800433c:	2001      	movs	r0, #1
 800433e:	f7fd fd6b 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	f8de3f23 	.word	0xf8de3f23

0800435c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b0a6      	sub	sp, #152	; 0x98
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004370:	2300      	movs	r3, #0
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800438c:	2300      	movs	r3, #0
 800438e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004398:	2300      	movs	r3, #0
 800439a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80043be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80043c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fe86 	bl	80040e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80043dc:	2301      	movs	r3, #1
 80043de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80043fe:	2300      	movs	r3, #0
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004408:	2301      	movs	r3, #1
 800440a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800440c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004410:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004416:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800441c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004424:	2300      	movs	r3, #0
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004428:	2300      	movs	r3, #0
 800442a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ff08 	bl	8004248 <ETH_SetDMAConfig>
}
 8004438:	bf00      	nop
 800443a:	3798      	adds	r7, #152	; 0x98
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3305      	adds	r3, #5
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	3204      	adds	r2, #4
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <ETH_MACAddressConfig+0x68>)
 8004462:	4413      	add	r3, r2
 8004464:	461a      	mov	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3303      	adds	r3, #3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	061a      	lsls	r2, r3, #24
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3302      	adds	r3, #2
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3301      	adds	r3, #1
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	4313      	orrs	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <ETH_MACAddressConfig+0x6c>)
 8004492:	4413      	add	r3, r2
 8004494:	461a      	mov	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	6013      	str	r3, [r2, #0]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40028040 	.word	0x40028040
 80044ac:	40028044 	.word	0x40028044

080044b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e03e      	b.n	800453c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	3206      	adds	r2, #6
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d80c      	bhi.n	8004520 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68d9      	ldr	r1, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e004      	b.n	800452a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d9bd      	bls.n	80044be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004554:	611a      	str	r2, [r3, #16]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e046      	b.n	80045fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6919      	ldr	r1, [r3, #16]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80045b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	3212      	adds	r2, #18
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d80c      	bhi.n	80045ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6919      	ldr	r1, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e004      	b.n	80045f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d9b5      	bls.n	8004570 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	60da      	str	r2, [r3, #12]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800463c:	b480      	push	{r7}
 800463e:	b08d      	sub	sp, #52	; 0x34
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3318      	adds	r3, #24
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004666:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800467a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800467e:	d007      	beq.n	8004690 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	3304      	adds	r3, #4
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004690:	2302      	movs	r3, #2
 8004692:	e0ff      	b.n	8004894 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	3301      	adds	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4b7d      	ldr	r3, [pc, #500]	; (80048a0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	6852      	ldr	r2, [r2, #4]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004716:	f3bf 8f5f 	dmb	sy
}
 800471a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004728:	e082      	b.n	8004830 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e005      	b.n	8004756 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	3301      	adds	r3, #1
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	2b03      	cmp	r3, #3
 8004760:	d902      	bls.n	8004768 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	3b04      	subs	r3, #4
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004770:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800478a:	d007      	beq.n	800479c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	3304      	adds	r3, #4
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d029      	beq.n	80047f0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ae:	e019      	b.n	80047e4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80047b0:	f3bf 8f5f 	dmb	sy
}
 80047b4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	3301      	adds	r3, #1
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d902      	bls.n	80047d4 <ETH_Prepare_Tx_Descriptors+0x198>
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	3b04      	subs	r3, #4
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047dc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	3301      	adds	r3, #1
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d3e1      	bcc.n	80047b0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	e051      	b.n	8004894 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	3301      	adds	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800480c:	4013      	ands	r3, r2
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	6852      	ldr	r2, [r2, #4]
 8004812:	431a      	orrs	r2, r3
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	3301      	adds	r3, #1
 800481c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800481e:	f3bf 8f5f 	dmb	sy
}
 8004822:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f af78 	bne.w	800472a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e005      	b.n	800485a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	3304      	adds	r3, #4
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800487c:	b672      	cpsid	i
}
 800487e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	4413      	add	r3, r2
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800488e:	b662      	cpsie	i
}
 8004890:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3734      	adds	r7, #52	; 0x34
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	ffffe000 	.word	0xffffe000

080048a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e175      	b.n	8004bb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80048c4:	2201      	movs	r2, #1
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	429a      	cmp	r2, r3
 80048de:	f040 8164 	bne.w	8004baa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d005      	beq.n	80048fa <HAL_GPIO_Init+0x56>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d130      	bne.n	800495c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2203      	movs	r2, #3
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004930:	2201      	movs	r2, #1
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 0201 	and.w	r2, r3, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b03      	cmp	r3, #3
 8004966:	d017      	beq.n	8004998 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2203      	movs	r2, #3
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d123      	bne.n	80049ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	08da      	lsrs	r2, r3, #3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3208      	adds	r2, #8
 80049ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	220f      	movs	r2, #15
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	08da      	lsrs	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3208      	adds	r2, #8
 80049e6:	69b9      	ldr	r1, [r7, #24]
 80049e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2203      	movs	r2, #3
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0203 	and.w	r2, r3, #3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80be 	beq.w	8004baa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	4b66      	ldr	r3, [pc, #408]	; (8004bc8 <HAL_GPIO_Init+0x324>)
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <HAL_GPIO_Init+0x324>)
 8004a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a38:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3a:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_GPIO_Init+0x324>)
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004a46:	4a61      	ldr	r2, [pc, #388]	; (8004bcc <HAL_GPIO_Init+0x328>)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	089b      	lsrs	r3, r3, #2
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	220f      	movs	r2, #15
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <HAL_GPIO_Init+0x32c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d037      	beq.n	8004ae2 <HAL_GPIO_Init+0x23e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a57      	ldr	r2, [pc, #348]	; (8004bd4 <HAL_GPIO_Init+0x330>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_GPIO_Init+0x23a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a56      	ldr	r2, [pc, #344]	; (8004bd8 <HAL_GPIO_Init+0x334>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <HAL_GPIO_Init+0x236>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a55      	ldr	r2, [pc, #340]	; (8004bdc <HAL_GPIO_Init+0x338>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d025      	beq.n	8004ad6 <HAL_GPIO_Init+0x232>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a54      	ldr	r2, [pc, #336]	; (8004be0 <HAL_GPIO_Init+0x33c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01f      	beq.n	8004ad2 <HAL_GPIO_Init+0x22e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a53      	ldr	r2, [pc, #332]	; (8004be4 <HAL_GPIO_Init+0x340>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d019      	beq.n	8004ace <HAL_GPIO_Init+0x22a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a52      	ldr	r2, [pc, #328]	; (8004be8 <HAL_GPIO_Init+0x344>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_GPIO_Init+0x226>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a51      	ldr	r2, [pc, #324]	; (8004bec <HAL_GPIO_Init+0x348>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_GPIO_Init+0x222>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a50      	ldr	r2, [pc, #320]	; (8004bf0 <HAL_GPIO_Init+0x34c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <HAL_GPIO_Init+0x21e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4f      	ldr	r2, [pc, #316]	; (8004bf4 <HAL_GPIO_Init+0x350>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_GPIO_Init+0x21a>
 8004aba:	2309      	movs	r3, #9
 8004abc:	e012      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004abe:	230a      	movs	r3, #10
 8004ac0:	e010      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	e00e      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ac6:	2307      	movs	r3, #7
 8004ac8:	e00c      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004aca:	2306      	movs	r3, #6
 8004acc:	e00a      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ace:	2305      	movs	r3, #5
 8004ad0:	e008      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e006      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e004      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x240>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f002 0203 	and.w	r2, r2, #3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4093      	lsls	r3, r2
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_GPIO_Init+0x328>)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b26:	4a34      	ldr	r2, [pc, #208]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b2c:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b50:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b56:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b7a:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_GPIO_Init+0x354>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	f67f ae86 	bls.w	80048c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3724      	adds	r7, #36	; 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40020400 	.word	0x40020400
 8004bd8:	40020800 	.word	0x40020800
 8004bdc:	40020c00 	.word	0x40020c00
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40021400 	.word	0x40021400
 8004be8:	40021800 	.word	0x40021800
 8004bec:	40021c00 	.word	0x40021c00
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	40022400 	.word	0x40022400
 8004bf8:	40013c00 	.word	0x40013c00

08004bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c0c:	787b      	ldrb	r3, [r7, #1]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c12:	887a      	ldrh	r2, [r7, #2]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c18:	e003      	b.n	8004c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	041a      	lsls	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	619a      	str	r2, [r3, #24]
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c40:	887a      	ldrh	r2, [r7, #2]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4013      	ands	r3, r2
 8004c46:	041a      	lsls	r2, r3, #16
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	400b      	ands	r3, r1
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	619a      	str	r2, [r3, #24]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c7a:	4a05      	ldr	r2, [pc, #20]	; (8004c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f806 	bl	8004c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40013c00 	.word	0x40013c00

08004c94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07f      	b.n	8004dbe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc f918 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	e006      	b.n	8004d34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d104      	bne.n	8004d46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_I2C_Init+0x11c>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69d9      	ldr	r1, [r3, #28]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	02008000 	.word	0x02008000

08004dcc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	460b      	mov	r3, r1
 8004dda:	817b      	strh	r3, [r7, #10]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	f040 80cd 	bne.w	8004f88 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e0c3      	b.n	8004f8a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_I2C_Master_Transmit_DMA+0x44>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e0bc      	b.n	8004f8a <HAL_I2C_Master_Transmit_DMA+0x1be>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2221      	movs	r2, #33	; 0x21
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2210      	movs	r2, #16
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	893a      	ldrh	r2, [r7, #8]
 8004e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a55      	ldr	r2, [pc, #340]	; (8004f94 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a55      	ldr	r2, [pc, #340]	; (8004f98 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2bff      	cmp	r3, #255	; 0xff
 8004e4e:	d906      	bls.n	8004e5e <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e007      	b.n	8004e6e <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d070      	beq.n	8004f58 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	4a46      	ldr	r2, [pc, #280]	; (8004f9c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8004e84:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	4a45      	ldr	r2, [pc, #276]	; (8004fa0 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8004e8c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3328      	adds	r3, #40	; 0x28
 8004eaa:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004eb0:	f7fd ff9c 	bl	8002dec <HAL_DMA_Start_IT>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d138      	bne.n	8004f30 <HAL_I2C_Master_Transmit_DMA+0x164>
 8004ebe:	e013      	b.n	8004ee8 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e050      	b.n	8004f8a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	8979      	ldrh	r1, [r7, #10]
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f001 fd16 	bl	8006928 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f16:	2110      	movs	r1, #16
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f001 fd37 	bl	800698c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e029      	b.n	8004f84 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	f043 0210 	orr.w	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e018      	b.n	8004f8a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	8979      	ldrh	r1, [r7, #10]
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f001 fcda 	bl	8006928 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f001 fd04 	bl	800698c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	ffff0000 	.word	0xffff0000
 8004f98:	08005a59 	.word	0x08005a59
 8004f9c:	080066c7 	.word	0x080066c7
 8004fa0:	08006879 	.word	0x08006879
 8004fa4:	80002000 	.word	0x80002000
 8004fa8:	08005603 	.word	0x08005603

08004fac <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	460b      	mov	r3, r1
 8004fba:	817b      	strh	r3, [r7, #10]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	f040 80cd 	bne.w	8005168 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0c3      	b.n	800516a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_I2C_Master_Receive_DMA+0x44>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0bc      	b.n	800516a <HAL_I2C_Master_Receive_DMA+0x1be>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2222      	movs	r2, #34	; 0x22
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2210      	movs	r2, #16
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	893a      	ldrh	r2, [r7, #8]
 8005018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a55      	ldr	r2, [pc, #340]	; (8005174 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a55      	ldr	r2, [pc, #340]	; (8005178 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005024:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	2bff      	cmp	r3, #255	; 0xff
 800502e:	d906      	bls.n	800503e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005036:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e007      	b.n	800504e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800504c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d070      	beq.n	8005138 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d020      	beq.n	80050a0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	4a46      	ldr	r2, [pc, #280]	; (800517c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	4a45      	ldr	r2, [pc, #276]	; (8005180 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800506c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	2200      	movs	r2, #0
 800507c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3324      	adds	r3, #36	; 0x24
 8005088:	4619      	mov	r1, r3
 800508a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005090:	f7fd feac 	bl	8002dec <HAL_DMA_Start_IT>
 8005094:	4603      	mov	r3, r0
 8005096:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d138      	bne.n	8005110 <HAL_I2C_Master_Receive_DMA+0x164>
 800509e:	e013      	b.n	80050c8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e050      	b.n	800516a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	8979      	ldrh	r1, [r7, #10]
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f001 fc26 	bl	8006928 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80050f6:	2110      	movs	r1, #16
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f001 fc47 	bl	800698c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e029      	b.n	8005164 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005124:	f043 0210 	orr.w	r2, r3, #16
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e018      	b.n	800516a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800513c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	b2da      	uxtb	r2, r3
 8005144:	8979      	ldrh	r1, [r7, #10]
 8005146:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f001 fbea 	bl	8006928 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800515c:	2101      	movs	r1, #1
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f001 fc14 	bl	800698c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	ffff0000 	.word	0xffff0000
 8005178:	08005a59 	.word	0x08005a59
 800517c:	0800679d 	.word	0x0800679d
 8005180:	08006879 	.word	0x08006879
 8005184:	80002400 	.word	0x80002400
 8005188:	08005603 	.word	0x08005603

0800518c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	f040 809b 	bne.w	80052de <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_I2C_Slave_Transmit_DMA+0x28>
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e08f      	b.n	80052e0 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_I2C_Slave_Transmit_DMA+0x42>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e088      	b.n	80052e0 <HAL_I2C_Slave_Transmit_DMA+0x154>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2221      	movs	r2, #33	; 0x21
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a38      	ldr	r2, [pc, #224]	; (80052e8 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a38      	ldr	r2, [pc, #224]	; (80052ec <HAL_I2C_Slave_Transmit_DMA+0x160>)
 800520c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	2b00      	cmp	r3, #0
 8005214:	d020      	beq.n	8005258 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	4a34      	ldr	r2, [pc, #208]	; (80052f4 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8005224:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	2200      	movs	r2, #0
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	2200      	movs	r2, #0
 8005234:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3328      	adds	r3, #40	; 0x28
 8005242:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005248:	f7fd fdd0 	bl	8002dec <HAL_DMA_Start_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d12f      	bne.n	80052b6 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8005256:	e013      	b.n	8005280 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2228      	movs	r2, #40	; 0x28
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e02f      	b.n	80052e0 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800528e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f001 fb75 	bl	800698c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e014      	b.n	80052e0 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2228      	movs	r2, #40	; 0x28
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	f043 0210 	orr.w	r2, r3, #16
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	ffff0000 	.word	0xffff0000
 80052ec:	08005c3f 	.word	0x08005c3f
 80052f0:	0800675d 	.word	0x0800675d
 80052f4:	08006879 	.word	0x08006879

080052f8 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	f040 809b 	bne.w	800544a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_I2C_Slave_Receive_DMA+0x28>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e08f      	b.n	800544c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_I2C_Slave_Receive_DMA+0x42>
 8005336:	2302      	movs	r3, #2
 8005338:	e088      	b.n	800544c <HAL_I2C_Slave_Receive_DMA+0x154>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2222      	movs	r2, #34	; 0x22
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a38      	ldr	r2, [pc, #224]	; (8005454 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a38      	ldr	r2, [pc, #224]	; (8005458 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005378:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	4a35      	ldr	r2, [pc, #212]	; (800545c <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005388:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	4a34      	ldr	r2, [pc, #208]	; (8005460 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005390:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	2200      	movs	r2, #0
 80053a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3324      	adds	r3, #36	; 0x24
 80053ac:	4619      	mov	r1, r3
 80053ae:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80053b4:	f7fd fd1a 	bl	8002dec <HAL_DMA_Start_IT>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d12f      	bne.n	8005422 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80053c2:	e013      	b.n	80053ec <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2228      	movs	r2, #40	; 0x28
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e02f      	b.n	800544c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f001 fabf 	bl	800698c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800541c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e014      	b.n	800544c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2228      	movs	r2, #40	; 0x28
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f043 0210 	orr.w	r2, r3, #16
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	ffff0000 	.word	0xffff0000
 8005458:	08005c3f 	.word	0x08005c3f
 800545c:	08006833 	.word	0x08006833
 8005460:	08006879 	.word	0x08006879

08005464 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	4798      	blx	r3
  }
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d010      	beq.n	80054de <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	09db      	lsrs	r3, r3, #7
 80054c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	0a9b      	lsrs	r3, r3, #10
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d010      	beq.n	800550c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	09db      	lsrs	r3, r3, #7
 80054ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	f043 0208 	orr.w	r2, r3, #8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800550a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	0a5b      	lsrs	r3, r3, #9
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	09db      	lsrs	r3, r3, #7
 800551c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f043 0202 	orr.w	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005538:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 030b 	and.w	r3, r3, #11
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 ff9f 	bl	8006490 <I2C_ITError>
  }
}
 8005552:	bf00      	nop
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
 800558e:	4613      	mov	r3, r2
 8005590:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b088      	sub	sp, #32
 8005606:	af02      	add	r7, sp, #8
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <I2C_Master_ISR_IT+0x1e>
 800561c:	2302      	movs	r3, #2
 800561e:	e114      	b.n	800584a <I2C_Master_ISR_IT+0x248>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00d      	beq.n	800565c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2210      	movs	r2, #16
 8005646:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	f043 0204 	orr.w	r2, r3, #4
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f001 f812 	bl	800667e <I2C_Flush_TXDR>
 800565a:	e0e1      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d023      	beq.n	80056b0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01d      	beq.n	80056b0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0304 	bic.w	r3, r3, #4
 800567a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ae:	e0b7      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01e      	beq.n	80056fa <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d018      	beq.n	80056fa <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f8:	e092      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	09db      	lsrs	r3, r3, #7
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d05d      	beq.n	80057c2 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	099b      	lsrs	r3, r3, #6
 800570a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800570e:	2b00      	cmp	r3, #0
 8005710:	d057      	beq.n	80057c2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d040      	beq.n	800579e <I2C_Master_ISR_IT+0x19c>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d13c      	bne.n	800579e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005730:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	2bff      	cmp	r3, #255	; 0xff
 800573a:	d90e      	bls.n	800575a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	22ff      	movs	r2, #255	; 0xff
 8005740:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	b2da      	uxtb	r2, r3
 8005748:	8a79      	ldrh	r1, [r7, #18]
 800574a:	2300      	movs	r3, #0
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f001 f8e8 	bl	8006928 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005758:	e032      	b.n	80057c0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800576c:	d00b      	beq.n	8005786 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	8a79      	ldrh	r1, [r7, #18]
 800577a:	2000      	movs	r0, #0
 800577c:	9000      	str	r0, [sp, #0]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f001 f8d2 	bl	8006928 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005784:	e01c      	b.n	80057c0 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578a:	b2da      	uxtb	r2, r3
 800578c:	8a79      	ldrh	r1, [r7, #18]
 800578e:	2300      	movs	r3, #0
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f001 f8c6 	bl	8006928 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579c:	e010      	b.n	80057c0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ac:	d003      	beq.n	80057b6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fba9 	bl	8005f06 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057b4:	e034      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80057b6:	2140      	movs	r1, #64	; 0x40
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fe69 	bl	8006490 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057be:	e02f      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
 80057c0:	e02e      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	099b      	lsrs	r3, r3, #6
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d028      	beq.n	8005820 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d022      	beq.n	8005820 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d119      	bne.n	8005818 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f2:	d015      	beq.n	8005820 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057fc:	d108      	bne.n	8005810 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	e007      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fb78 	bl	8005f06 <I2C_ITMasterSeqCplt>
 8005816:	e003      	b.n	8005820 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005818:	2140      	movs	r1, #64	; 0x40
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fe38 	bl	8006490 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fbfe 	bl	800603c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <I2C_Slave_ISR_IT+0x24>
 8005872:	2302      	movs	r3, #2
 8005874:	e0ec      	b.n	8005a50 <I2C_Slave_ISR_IT+0x1fe>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005896:	6939      	ldr	r1, [r7, #16]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fc99 	bl	80061d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04d      	beq.n	8005946 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d047      	beq.n	8005946 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d128      	bne.n	8005912 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b28      	cmp	r3, #40	; 0x28
 80058ca:	d108      	bne.n	80058de <I2C_Slave_ISR_IT+0x8c>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d2:	d104      	bne.n	80058de <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80058d4:	6939      	ldr	r1, [r7, #16]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fd84 	bl	80063e4 <I2C_ITListenCplt>
 80058dc:	e032      	b.n	8005944 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b29      	cmp	r3, #41	; 0x29
 80058e8:	d10e      	bne.n	8005908 <I2C_Slave_ISR_IT+0xb6>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058f0:	d00a      	beq.n	8005908 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 febf 	bl	800667e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fb3d 	bl	8005f80 <I2C_ITSlaveSeqCplt>
 8005906:	e01d      	b.n	8005944 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2210      	movs	r2, #16
 800590e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005910:	e096      	b.n	8005a40 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <I2C_Slave_ISR_IT+0xe4>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005932:	f040 8085 	bne.w	8005a40 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	4619      	mov	r1, r3
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fda7 	bl	8006490 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005942:	e07d      	b.n	8005a40 <I2C_Slave_ISR_IT+0x1ee>
 8005944:	e07c      	b.n	8005a40 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d030      	beq.n	80059b4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	089b      	lsrs	r3, r3, #2
 8005956:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800595a:	2b00      	cmp	r3, #0
 800595c:	d02a      	beq.n	80059b4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d018      	beq.n	800599a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d14f      	bne.n	8005a44 <I2C_Slave_ISR_IT+0x1f2>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059aa:	d04b      	beq.n	8005a44 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fae7 	bl	8005f80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80059b2:	e047      	b.n	8005a44 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	08db      	lsrs	r3, r3, #3
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80059cc:	6939      	ldr	r1, [r7, #16]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa15 	bl	8005dfe <I2C_ITAddrCplt>
 80059d4:	e037      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d031      	beq.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d02b      	beq.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d018      	beq.n	8005a2a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a28:	e00d      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a30:	d002      	beq.n	8005a38 <I2C_Slave_ISR_IT+0x1e6>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 faa1 	bl	8005f80 <I2C_ITSlaveSeqCplt>
 8005a3e:	e002      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005a44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <I2C_Master_ISR_DMA+0x1a>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e0e1      	b.n	8005c36 <I2C_Master_ISR_DMA+0x1de>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005aa6:	2120      	movs	r1, #32
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 ff6f 	bl	800698c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fde5 	bl	800667e <I2C_Flush_TXDR>
 8005ab4:	e0ba      	b.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d072      	beq.n	8005ba8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d06c      	beq.n	8005ba8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d04e      	beq.n	8005b86 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	d906      	bls.n	8005b0e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	22ff      	movs	r2, #255	; 0xff
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e010      	b.n	8005b30 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b20:	d003      	beq.n	8005b2a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e002      	b.n	8005b30 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b2e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	8a79      	ldrh	r1, [r7, #18]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fef2 	bl	8006928 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b22      	cmp	r3, #34	; 0x22
 8005b60:	d108      	bne.n	8005b74 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b72:	e05b      	b.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b84:	e052      	b.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b94:	d003      	beq.n	8005b9e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f9b5 	bl	8005f06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005b9c:	e046      	b.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b9e:	2140      	movs	r1, #64	; 0x40
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fc75 	bl	8006490 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005ba6:	e041      	b.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	099b      	lsrs	r3, r3, #6
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d029      	beq.n	8005c08 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d023      	beq.n	8005c08 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d119      	bne.n	8005bfe <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd8:	d027      	beq.n	8005c2a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005be2:	d108      	bne.n	8005bf6 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005bf4:	e019      	b.n	8005c2a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f985 	bl	8005f06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005bfc:	e015      	b.n	8005c2a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bfe:	2140      	movs	r1, #64	; 0x40
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fc45 	bl	8006490 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c06:	e010      	b.n	8005c2a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fa0a 	bl	800603c <I2C_ITMasterCplt>
 8005c28:	e000      	b.n	8005c2c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005c2a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b088      	sub	sp, #32
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <I2C_Slave_ISR_DMA+0x24>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0c9      	b.n	8005df6 <I2C_Slave_ISR_DMA+0x1b8>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 faa3 	bl	80061d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 809a 	beq.w	8005dcc <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8093 	beq.w	8005dcc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0b9b      	lsrs	r3, r3, #14
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0bdb      	lsrs	r3, r3, #15
 8005cb6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d07f      	beq.n	8005dbe <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	0bdb      	lsrs	r3, r3, #15
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0b9b      	lsrs	r3, r3, #14
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005d02:	2301      	movs	r3, #1
 8005d04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d128      	bne.n	8005d5e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b28      	cmp	r3, #40	; 0x28
 8005d16:	d108      	bne.n	8005d2a <I2C_Slave_ISR_DMA+0xec>
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d1e:	d104      	bne.n	8005d2a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fb5e 	bl	80063e4 <I2C_ITListenCplt>
 8005d28:	e048      	b.n	8005dbc <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b29      	cmp	r3, #41	; 0x29
 8005d34:	d10e      	bne.n	8005d54 <I2C_Slave_ISR_DMA+0x116>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d3c:	d00a      	beq.n	8005d54 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2210      	movs	r2, #16
 8005d44:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fc99 	bl	800667e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f917 	bl	8005f80 <I2C_ITSlaveSeqCplt>
 8005d52:	e033      	b.n	8005dbc <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005d5c:	e034      	b.n	8005dc8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2210      	movs	r2, #16
 8005d64:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d78:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <I2C_Slave_ISR_DMA+0x14a>
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d86:	d11f      	bne.n	8005dc8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	2b21      	cmp	r3, #33	; 0x21
 8005d8c:	d002      	beq.n	8005d94 <I2C_Slave_ISR_DMA+0x156>
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2b29      	cmp	r3, #41	; 0x29
 8005d92:	d103      	bne.n	8005d9c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2221      	movs	r2, #33	; 0x21
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
 8005d9a:	e008      	b.n	8005dae <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	2b22      	cmp	r3, #34	; 0x22
 8005da0:	d002      	beq.n	8005da8 <I2C_Slave_ISR_DMA+0x16a>
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b2a      	cmp	r3, #42	; 0x2a
 8005da6:	d102      	bne.n	8005dae <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2222      	movs	r2, #34	; 0x22
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	4619      	mov	r1, r3
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fb6b 	bl	8006490 <I2C_ITError>
      if (treatdmanack == 1U)
 8005dba:	e005      	b.n	8005dc8 <I2C_Slave_ISR_DMA+0x18a>
 8005dbc:	e004      	b.n	8005dc8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005dc6:	e011      	b.n	8005dec <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005dc8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005dca:	e00f      	b.n	8005dec <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	08db      	lsrs	r3, r3, #3
 8005ddc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f809 	bl	8005dfe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e14:	2b28      	cmp	r3, #40	; 0x28
 8005e16:	d16a      	bne.n	8005eee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	0c1b      	lsrs	r3, r3, #16
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005e36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005e52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d138      	bne.n	8005ece <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	09db      	lsrs	r3, r3, #7
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	89bb      	ldrh	r3, [r7, #12]
 8005e64:	4053      	eors	r3, r2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f003 0306 	and.w	r3, r3, #6
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11c      	bne.n	8005eaa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005e70:	897b      	ldrh	r3, [r7, #10]
 8005e72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d13b      	bne.n	8005efe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2208      	movs	r2, #8
 8005e92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e9c:	89ba      	ldrh	r2, [r7, #12]
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fb6d 	bl	8005582 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ea8:	e029      	b.n	8005efe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fdd4 	bl	8006a60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ec0:	89ba      	ldrh	r2, [r7, #12]
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fb5b 	bl	8005582 <HAL_I2C_AddrCallback>
}
 8005ecc:	e017      	b.n	8005efe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fdc4 	bl	8006a60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ee0:	89ba      	ldrh	r2, [r7, #12]
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fb4b 	bl	8005582 <HAL_I2C_AddrCallback>
}
 8005eec:	e007      	b.n	8005efe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b21      	cmp	r3, #33	; 0x21
 8005f20:	d115      	bne.n	8005f4e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2211      	movs	r2, #17
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f36:	2101      	movs	r1, #1
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fd91 	bl	8006a60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fb07 	bl	800555a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f4c:	e014      	b.n	8005f78 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2212      	movs	r2, #18
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f62:	2102      	movs	r1, #2
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fd7b 	bl	8006a60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f00f fe8c 	bl	8015c90 <HAL_I2C_MasterRxCpltCallback>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	0b9b      	lsrs	r3, r3, #14
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e00d      	b.n	8005fd2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	0bdb      	lsrs	r3, r3, #15
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b29      	cmp	r3, #41	; 0x29
 8005fdc:	d112      	bne.n	8006004 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2228      	movs	r2, #40	; 0x28
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2221      	movs	r2, #33	; 0x21
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fec:	2101      	movs	r1, #1
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fd36 	bl	8006a60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fab6 	bl	800556e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006002:	e017      	b.n	8006034 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b2a      	cmp	r3, #42	; 0x2a
 800600e:	d111      	bne.n	8006034 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2228      	movs	r2, #40	; 0x28
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2222      	movs	r2, #34	; 0x22
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800601e:	2102      	movs	r1, #2
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fd1d 	bl	8006a60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f00f fe1e 	bl	8015c70 <HAL_I2C_SlaveRxCpltCallback>
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2220      	movs	r2, #32
 8006050:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b21      	cmp	r3, #33	; 0x21
 800605c:	d107      	bne.n	800606e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800605e:	2101      	movs	r1, #1
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fcfd 	bl	8006a60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2211      	movs	r2, #17
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
 800606c:	e00c      	b.n	8006088 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b22      	cmp	r3, #34	; 0x22
 8006078:	d106      	bne.n	8006088 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800607a:	2102      	movs	r1, #2
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fcef 	bl	8006a60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2212      	movs	r2, #18
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b4d      	ldr	r3, [pc, #308]	; (80061c8 <I2C_ITMasterCplt+0x18c>)
 8006094:	400b      	ands	r3, r1
 8006096:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <I2C_ITMasterCplt+0x190>)
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2210      	movs	r2, #16
 80060b6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060bc:	f043 0204 	orr.w	r2, r3, #4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b60      	cmp	r3, #96	; 0x60
 80060ce:	d10b      	bne.n	80060e8 <I2C_ITMasterCplt+0xac>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80060e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fac8 	bl	800667e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b60      	cmp	r3, #96	; 0x60
 80060fe:	d002      	beq.n	8006106 <I2C_ITMasterCplt+0xca>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f9bf 	bl	8006490 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006112:	e054      	b.n	80061be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b21      	cmp	r3, #33	; 0x21
 800611e:	d124      	bne.n	800616a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d10b      	bne.n	8006152 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fa31 	bl	80055b2 <HAL_I2C_MemTxCpltCallback>
}
 8006150:	e035      	b.n	80061be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff f9f9 	bl	800555a <HAL_I2C_MasterTxCpltCallback>
}
 8006168:	e029      	b.n	80061be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b22      	cmp	r3, #34	; 0x22
 8006174:	d123      	bne.n	80061be <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d10b      	bne.n	80061a8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fa10 	bl	80055c6 <HAL_I2C_MemRxCpltCallback>
}
 80061a6:	e00a      	b.n	80061be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f00f fd69 	bl	8015c90 <HAL_I2C_MasterRxCpltCallback>
}
 80061be:	bf00      	nop
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	fe00e800 	.word	0xfe00e800
 80061cc:	ffff0000 	.word	0xffff0000

080061d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2220      	movs	r2, #32
 80061f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b21      	cmp	r3, #33	; 0x21
 80061fa:	d002      	beq.n	8006202 <I2C_ITSlaveCplt+0x32>
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b29      	cmp	r3, #41	; 0x29
 8006200:	d108      	bne.n	8006214 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006202:	f248 0101 	movw	r1, #32769	; 0x8001
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fc2a 	bl	8006a60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2221      	movs	r2, #33	; 0x21
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
 8006212:	e00d      	b.n	8006230 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b22      	cmp	r3, #34	; 0x22
 8006218:	d002      	beq.n	8006220 <I2C_ITSlaveCplt+0x50>
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b2a      	cmp	r3, #42	; 0x2a
 800621e:	d107      	bne.n	8006230 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006220:	f248 0102 	movw	r1, #32770	; 0x8002
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc1b 	bl	8006a60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2222      	movs	r2, #34	; 0x22
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800623e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b64      	ldr	r3, [pc, #400]	; (80063dc <I2C_ITSlaveCplt+0x20c>)
 800624c:	400b      	ands	r3, r1
 800624e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fa14 	bl	800667e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	0b9b      	lsrs	r3, r3, #14
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d013      	beq.n	800628a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006270:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	2b00      	cmp	r3, #0
 8006278:	d020      	beq.n	80062bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006288:	e018      	b.n	80062bc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	0bdb      	lsrs	r3, r3, #15
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d012      	beq.n	80062bc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d006      	beq.n	80062bc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	089b      	lsrs	r3, r3, #2
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0304 	bic.w	r3, r3, #4
 80062ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	f043 0204 	orr.w	r2, r3, #4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8a7 	bl	8006490 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b28      	cmp	r3, #40	; 0x28
 800634c:	d141      	bne.n	80063d2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f847 	bl	80063e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006356:	e03c      	b.n	80063d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006360:	d014      	beq.n	800638c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fe0c 	bl	8005f80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <I2C_ITSlaveCplt+0x210>)
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff f90a 	bl	800559e <HAL_I2C_ListenCpltCallback>
}
 800638a:	e022      	b.n	80063d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b22      	cmp	r3, #34	; 0x22
 8006396:	d10e      	bne.n	80063b6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f00f fc5e 	bl	8015c70 <HAL_I2C_SlaveRxCpltCallback>
}
 80063b4:	e00d      	b.n	80063d2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff f8ce 	bl	800556e <HAL_I2C_SlaveTxCpltCallback>
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	fe00e800 	.word	0xfe00e800
 80063e0:	ffff0000 	.word	0xffff0000

080063e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a26      	ldr	r2, [pc, #152]	; (800648c <I2C_ITListenCplt+0xa8>)
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d022      	beq.n	8006462 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	2b00      	cmp	r3, #0
 800643a:	d012      	beq.n	8006462 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	f043 0204 	orr.w	r2, r3, #4
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006462:	f248 0103 	movw	r1, #32771	; 0x8003
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fafa 	bl	8006a60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2210      	movs	r2, #16
 8006472:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff f88e 	bl	800559e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	ffff0000 	.word	0xffff0000

08006490 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <I2C_ITError+0x194>)
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b28      	cmp	r3, #40	; 0x28
 80064c6:	d005      	beq.n	80064d4 <I2C_ITError+0x44>
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b29      	cmp	r3, #41	; 0x29
 80064cc:	d002      	beq.n	80064d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b2a      	cmp	r3, #42	; 0x2a
 80064d2:	d10b      	bne.n	80064ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064d4:	2103      	movs	r1, #3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fac2 	bl	8006a60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2228      	movs	r2, #40	; 0x28
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a50      	ldr	r2, [pc, #320]	; (8006628 <I2C_ITError+0x198>)
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34
 80064ea:	e011      	b.n	8006510 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fab5 	bl	8006a60 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b60      	cmp	r3, #96	; 0x60
 8006500:	d003      	beq.n	800650a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	2b00      	cmp	r3, #0
 800651c:	d039      	beq.n	8006592 <I2C_ITError+0x102>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b11      	cmp	r3, #17
 8006522:	d002      	beq.n	800652a <I2C_ITError+0x9a>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b21      	cmp	r3, #33	; 0x21
 8006528:	d133      	bne.n	8006592 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006538:	d107      	bne.n	800654a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006548:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	4618      	mov	r0, r3
 8006550:	f7fc fec8 	bl	80032e4 <HAL_DMA_GetState>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d017      	beq.n	800658a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	4a33      	ldr	r2, [pc, #204]	; (800662c <I2C_ITError+0x19c>)
 8006560:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	4618      	mov	r0, r3
 8006570:	f7fc fd0c 	bl	8002f8c <HAL_DMA_Abort_IT>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04d      	beq.n	8006616 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006588:	e045      	b.n	8006616 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f850 	bl	8006630 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006590:	e041      	b.n	8006616 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d039      	beq.n	800660e <I2C_ITError+0x17e>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b12      	cmp	r3, #18
 800659e:	d002      	beq.n	80065a6 <I2C_ITError+0x116>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b22      	cmp	r3, #34	; 0x22
 80065a4:	d133      	bne.n	800660e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b4:	d107      	bne.n	80065c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fc fe8a 	bl	80032e4 <HAL_DMA_GetState>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d017      	beq.n	8006606 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	4a14      	ldr	r2, [pc, #80]	; (800662c <I2C_ITError+0x19c>)
 80065dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fcce 	bl	8002f8c <HAL_DMA_Abort_IT>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006604:	e009      	b.n	800661a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f812 	bl	8006630 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800660c:	e005      	b.n	800661a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f80e 	bl	8006630 <I2C_TreatErrorCallback>
  }
}
 8006614:	e002      	b.n	800661c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800661a:	bf00      	nop
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	ffff0000 	.word	0xffff0000
 8006628:	08005853 	.word	0x08005853
 800662c:	080068ed 	.word	0x080068ed

08006630 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b60      	cmp	r3, #96	; 0x60
 8006642:	d10e      	bne.n	8006662 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fe ffc7 	bl	80055ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006660:	e009      	b.n	8006676 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fe ffb2 	bl	80055da <HAL_I2C_ErrorCallback>
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d103      	bne.n	800669c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d007      	beq.n	80066ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	619a      	str	r2, [r3, #24]
  }
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066e2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80066ee:	2120      	movs	r1, #32
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f94b 	bl	800698c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80066f6:	e02d      	b.n	8006754 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670a:	b29b      	uxth	r3, r3
 800670c:	2bff      	cmp	r3, #255	; 0xff
 800670e:	d903      	bls.n	8006718 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	851a      	strh	r2, [r3, #40]	; 0x28
 8006716:	e004      	b.n	8006722 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	4619      	mov	r1, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3328      	adds	r3, #40	; 0x28
 8006732:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006738:	f7fc fb58 	bl	8002dec <HAL_DMA_Start_IT>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006742:	2110      	movs	r1, #16
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff fea3 	bl	8006490 <I2C_ITError>
}
 800674a:	e003      	b.n	8006754 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800674c:	2140      	movs	r1, #64	; 0x40
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f91c 	bl	800698c <I2C_Enable_IRQ>
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006776:	d002      	beq.n	800677e <I2C_DMASlaveTransmitCplt+0x22>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800678c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fbf6 	bl	8005f80 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067b8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80067c4:	2120      	movs	r1, #32
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8e0 	bl	800698c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80067cc:	e02d      	b.n	800682a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80067d6:	441a      	add	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2bff      	cmp	r3, #255	; 0xff
 80067e4:	d903      	bls.n	80067ee <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	22ff      	movs	r2, #255	; 0xff
 80067ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80067ec:	e004      	b.n	80067f8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3324      	adds	r3, #36	; 0x24
 8006802:	4619      	mov	r1, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800680e:	f7fc faed 	bl	8002dec <HAL_DMA_Start_IT>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006818:	2110      	movs	r1, #16
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fe38 	bl	8006490 <I2C_ITError>
}
 8006820:	e003      	b.n	800682a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006822:	2140      	movs	r1, #64	; 0x40
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f8b1 	bl	800698c <I2C_Enable_IRQ>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10e      	bne.n	8006870 <I2C_DMASlaveReceiveCplt+0x3e>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006858:	d00a      	beq.n	8006870 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006868:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fb88 	bl	8005f80 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800689e:	2301      	movs	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80068b6:	2301      	movs	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fc fd20 	bl	8003300 <HAL_DMA_GetError>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d00e      	beq.n	80068e4 <I2C_DMAError+0x6c>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068da:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80068dc:	2110      	movs	r1, #16
 80068de:	68b8      	ldr	r0, [r7, #8]
 80068e0:	f7ff fdd6 	bl	8006490 <I2C_ITError>
  }
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	2200      	movs	r2, #0
 8006908:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	2200      	movs	r2, #0
 8006918:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fe88 	bl	8006630 <I2C_TreatErrorCallback>
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	817b      	strh	r3, [r7, #10]
 8006936:	4613      	mov	r3, r2
 8006938:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800693a:	897b      	ldrh	r3, [r7, #10]
 800693c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006940:	7a7b      	ldrb	r3, [r7, #9]
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006948:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	4313      	orrs	r3, r2
 8006952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006956:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	0d5b      	lsrs	r3, r3, #21
 8006962:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <I2C_TransferConfig+0x60>)
 8006968:	430b      	orrs	r3, r1
 800696a:	43db      	mvns	r3, r3
 800696c:	ea02 0103 	and.w	r1, r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	03ff63ff 	.word	0x03ff63ff

0800698c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	4a2d      	ldr	r2, [pc, #180]	; (8006a58 <I2C_Enable_IRQ+0xcc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80069aa:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <I2C_Enable_IRQ+0xd0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d11d      	bne.n	80069ec <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80069b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da03      	bge.n	80069c0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80069be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80069c0:	887b      	ldrh	r3, [r7, #2]
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d103      	bne.n	80069ce <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80069cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80069ce:	887b      	ldrh	r3, [r7, #2]
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d103      	bne.n	80069dc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d12c      	bne.n	8006a3c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80069ea:	e027      	b.n	8006a3c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80069ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da03      	bge.n	80069fc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80069fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006a0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006a1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a20:	887b      	ldrh	r3, [r7, #2]
 8006a22:	2b10      	cmp	r3, #16
 8006a24:	d103      	bne.n	8006a2e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006a2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a2e:	887b      	ldrh	r3, [r7, #2]
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d103      	bne.n	8006a3c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f043 0320 	orr.w	r3, r3, #32
 8006a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6819      	ldr	r1, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	601a      	str	r2, [r3, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	08005a59 	.word	0x08005a59
 8006a5c:	08005c3f 	.word	0x08005c3f

08006a60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a70:	887b      	ldrh	r3, [r7, #2]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00f      	beq.n	8006a9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006a80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a8e:	2b28      	cmp	r3, #40	; 0x28
 8006a90:	d003      	beq.n	8006a9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006a98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a9a:	887b      	ldrh	r3, [r7, #2]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00f      	beq.n	8006ac4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006aaa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ab8:	2b28      	cmp	r3, #40	; 0x28
 8006aba:	d003      	beq.n	8006ac4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006ac2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da03      	bge.n	8006ad4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006ad2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ad4:	887b      	ldrh	r3, [r7, #2]
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d103      	bne.n	8006ae2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ae2:	887b      	ldrh	r3, [r7, #2]
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d103      	bne.n	8006af0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006af0:	887b      	ldrh	r3, [r7, #2]
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d103      	bne.n	8006afe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	43da      	mvns	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	601a      	str	r2, [r3, #0]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d138      	bne.n	8006ba4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e032      	b.n	8006ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2224      	movs	r2, #36	; 0x24
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0201 	bic.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6819      	ldr	r1, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e000      	b.n	8006ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d139      	bne.n	8006c3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e033      	b.n	8006c3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	; 0x24
 8006be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4c:	b08f      	sub	sp, #60	; 0x3c
 8006c4e:	af0a      	add	r7, sp, #40	; 0x28
 8006c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e116      	b.n	8006e8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fa fce4 	bl	8001644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2203      	movs	r2, #3
 8006c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f003 fd8c 	bl	800a7b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	687e      	ldr	r6, [r7, #4]
 8006ca8:	466d      	mov	r5, sp
 8006caa:	f106 0410 	add.w	r4, r6, #16
 8006cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8006cbe:	1d33      	adds	r3, r6, #4
 8006cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cc2:	6838      	ldr	r0, [r7, #0]
 8006cc4:	f003 fd20 	bl	800a708 <USB_CoreInit>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e0d7      	b.n	8006e8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f003 fd7a 	bl	800a7da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
 8006cea:	e04a      	b.n	8006d82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006cec:	7bfa      	ldrb	r2, [r7, #15]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	333d      	adds	r3, #61	; 0x3d
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	333c      	adds	r3, #60	; 0x3c
 8006d10:	7bfa      	ldrb	r2, [r7, #15]
 8006d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d14:	7bfa      	ldrb	r2, [r7, #15]
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	b298      	uxth	r0, r3
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	3344      	adds	r3, #68	; 0x44
 8006d28:	4602      	mov	r2, r0
 8006d2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d2c:	7bfa      	ldrb	r2, [r7, #15]
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	3340      	adds	r3, #64	; 0x40
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d40:	7bfa      	ldrb	r2, [r7, #15]
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	3348      	adds	r3, #72	; 0x48
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d54:	7bfa      	ldrb	r2, [r7, #15]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	334c      	adds	r3, #76	; 0x4c
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d68:	7bfa      	ldrb	r2, [r7, #15]
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	3354      	adds	r3, #84	; 0x54
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
 8006d82:	7bfa      	ldrb	r2, [r7, #15]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3af      	bcc.n	8006cec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	e044      	b.n	8006e1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d92:	7bfa      	ldrb	r2, [r7, #15]
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006da8:	7bfa      	ldrb	r2, [r7, #15]
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006dba:	7bfa      	ldrb	r2, [r7, #15]
 8006dbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006dbe:	7bfa      	ldrb	r2, [r7, #15]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006dea:	7bfa      	ldrb	r2, [r7, #15]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e00:	7bfa      	ldrb	r2, [r7, #15]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	7bfa      	ldrb	r2, [r7, #15]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d3b5      	bcc.n	8006d92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	687e      	ldr	r6, [r7, #4]
 8006e2e:	466d      	mov	r5, sp
 8006e30:	f106 0410 	add.w	r4, r6, #16
 8006e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e40:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e44:	1d33      	adds	r3, r6, #4
 8006e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e48:	6838      	ldr	r0, [r7, #0]
 8006e4a:	f003 fd13 	bl	800a874 <USB_DevInit>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e014      	b.n	8006e8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d102      	bne.n	8006e7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f80b 	bl	8006e94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f003 fed1 	bl	800ac2a <USB_DevDisconnect>

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006e94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	10000003 	.word	0x10000003

08006edc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a04      	ldr	r2, [pc, #16]	; (8006ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eea:	6013      	str	r3, [r2, #0]
}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40007000 	.word	0x40007000

08006efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e291      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8087 	beq.w	800702e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f20:	4b96      	ldr	r3, [pc, #600]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d00c      	beq.n	8006f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f2c:	4b93      	ldr	r3, [pc, #588]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 030c 	and.w	r3, r3, #12
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d112      	bne.n	8006f5e <HAL_RCC_OscConfig+0x62>
 8006f38:	4b90      	ldr	r3, [pc, #576]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f44:	d10b      	bne.n	8006f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f46:	4b8d      	ldr	r3, [pc, #564]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d06c      	beq.n	800702c <HAL_RCC_OscConfig+0x130>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d168      	bne.n	800702c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e26b      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f66:	d106      	bne.n	8006f76 <HAL_RCC_OscConfig+0x7a>
 8006f68:	4b84      	ldr	r3, [pc, #528]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a83      	ldr	r2, [pc, #524]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e02e      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0x9c>
 8006f7e:	4b7f      	ldr	r3, [pc, #508]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a7e      	ldr	r2, [pc, #504]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b7c      	ldr	r3, [pc, #496]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7b      	ldr	r2, [pc, #492]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e01d      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0xc0>
 8006fa2:	4b76      	ldr	r3, [pc, #472]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a75      	ldr	r2, [pc, #468]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b73      	ldr	r3, [pc, #460]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a72      	ldr	r2, [pc, #456]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006fbc:	4b6f      	ldr	r3, [pc, #444]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6e      	ldr	r2, [pc, #440]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	4b6c      	ldr	r3, [pc, #432]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6b      	ldr	r2, [pc, #428]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d013      	beq.n	8007004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fa ff10 	bl	8001e00 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe4:	f7fa ff0c 	bl	8001e00 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b64      	cmp	r3, #100	; 0x64
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e21f      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	4b61      	ldr	r3, [pc, #388]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCC_OscConfig+0xe8>
 8007002:	e014      	b.n	800702e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fa fefc 	bl	8001e00 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800700c:	f7fa fef8 	bl	8001e00 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e20b      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701e:	4b57      	ldr	r3, [pc, #348]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x110>
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d069      	beq.n	800710e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800703a:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007046:	4b4d      	ldr	r3, [pc, #308]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 030c 	and.w	r3, r3, #12
 800704e:	2b08      	cmp	r3, #8
 8007050:	d11c      	bne.n	800708c <HAL_RCC_OscConfig+0x190>
 8007052:	4b4a      	ldr	r3, [pc, #296]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d116      	bne.n	800708c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_RCC_OscConfig+0x17a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e1df      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007076:	4b41      	ldr	r3, [pc, #260]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	493d      	ldr	r1, [pc, #244]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800708a:	e040      	b.n	800710e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d023      	beq.n	80070dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a38      	ldr	r2, [pc, #224]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fa feae 	bl	8001e00 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fa feaa 	bl	8001e00 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1bd      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ba:	4b30      	ldr	r3, [pc, #192]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c6:	4b2d      	ldr	r3, [pc, #180]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4929      	ldr	r1, [pc, #164]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	600b      	str	r3, [r1, #0]
 80070da:	e018      	b.n	800710e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070dc:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a26      	ldr	r2, [pc, #152]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fa fe8a 	bl	8001e00 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f0:	f7fa fe86 	bl	8001e00 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e199      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d038      	beq.n	800718c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d019      	beq.n	8007156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007122:	4b16      	ldr	r3, [pc, #88]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007128:	f043 0301 	orr.w	r3, r3, #1
 800712c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712e:	f7fa fe67 	bl	8001e00 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007136:	f7fa fe63 	bl	8001e00 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e176      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800714a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x23a>
 8007154:	e01a      	b.n	800718c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	4a08      	ldr	r2, [pc, #32]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007162:	f7fa fe4d 	bl	8001e00 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800716a:	f7fa fe49 	bl	8001e00 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d903      	bls.n	8007180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e15c      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
 800717c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b91      	ldr	r3, [pc, #580]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ee      	bne.n	800716a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a4 	beq.w	80072e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719a:	4b8b      	ldr	r3, [pc, #556]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	4b88      	ldr	r3, [pc, #544]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	4a87      	ldr	r2, [pc, #540]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b0:	6413      	str	r3, [r2, #64]	; 0x40
 80071b2:	4b85      	ldr	r3, [pc, #532]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c2:	4b82      	ldr	r3, [pc, #520]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071ce:	4b7f      	ldr	r3, [pc, #508]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a7e      	ldr	r2, [pc, #504]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071da:	f7fa fe11 	bl	8001e00 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fa fe0d 	bl	8001e00 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b64      	cmp	r3, #100	; 0x64
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e120      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f4:	4b75      	ldr	r3, [pc, #468]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x31a>
 8007208:	4b6f      	ldr	r3, [pc, #444]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720c:	4a6e      	ldr	r2, [pc, #440]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6713      	str	r3, [r2, #112]	; 0x70
 8007214:	e02d      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10c      	bne.n	8007238 <HAL_RCC_OscConfig+0x33c>
 800721e:	4b6a      	ldr	r3, [pc, #424]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	4a69      	ldr	r2, [pc, #420]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	6713      	str	r3, [r2, #112]	; 0x70
 800722a:	4b67      	ldr	r3, [pc, #412]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a66      	ldr	r2, [pc, #408]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007230:	f023 0304 	bic.w	r3, r3, #4
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
 8007236:	e01c      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b05      	cmp	r3, #5
 800723e:	d10c      	bne.n	800725a <HAL_RCC_OscConfig+0x35e>
 8007240:	4b61      	ldr	r3, [pc, #388]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	4a60      	ldr	r2, [pc, #384]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007246:	f043 0304 	orr.w	r3, r3, #4
 800724a:	6713      	str	r3, [r2, #112]	; 0x70
 800724c:	4b5e      	ldr	r3, [pc, #376]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a5d      	ldr	r2, [pc, #372]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
 8007258:	e00b      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 800725a:	4b5b      	ldr	r3, [pc, #364]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a5a      	ldr	r2, [pc, #360]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
 8007266:	4b58      	ldr	r3, [pc, #352]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a57      	ldr	r2, [pc, #348]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d015      	beq.n	80072a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727a:	f7fa fdc1 	bl	8001e00 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007282:	f7fa fdbd 	bl	8001e00 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e0ce      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007298:	4b4b      	ldr	r3, [pc, #300]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ee      	beq.n	8007282 <HAL_RCC_OscConfig+0x386>
 80072a4:	e014      	b.n	80072d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a6:	f7fa fdab 	bl	8001e00 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ac:	e00a      	b.n	80072c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ae:	f7fa fda7 	bl	8001e00 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0b8      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c4:	4b40      	ldr	r3, [pc, #256]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ee      	bne.n	80072ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d105      	bne.n	80072e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072d6:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	4a3b      	ldr	r2, [pc, #236]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80a4 	beq.w	8007434 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072ec:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d06b      	beq.n	80073d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d149      	bne.n	8007394 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007300:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a30      	ldr	r2, [pc, #192]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800730a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fa fd78 	bl	8001e00 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007314:	f7fa fd74 	bl	8001e00 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e087      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007326:	4b28      	ldr	r3, [pc, #160]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	3b01      	subs	r3, #1
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	061b      	lsls	r3, r3, #24
 8007356:	4313      	orrs	r3, r2
 8007358:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800735a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800735e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007360:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736c:	f7fa fd48 	bl	8001e00 <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007374:	f7fa fd44 	bl	8001e00 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e057      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007386:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0f0      	beq.n	8007374 <HAL_RCC_OscConfig+0x478>
 8007392:	e04f      	b.n	8007434 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a0b      	ldr	r2, [pc, #44]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800739e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a0:	f7fa fd2e 	bl	8001e00 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a8:	f7fa fd2a 	bl	8001e00 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e03d      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ba:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <HAL_RCC_OscConfig+0x4cc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x4ac>
 80073c6:	e035      	b.n	8007434 <HAL_RCC_OscConfig+0x538>
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCC_OscConfig+0x544>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d028      	beq.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d121      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d11a      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007400:	4013      	ands	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007406:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007408:	4293      	cmp	r3, r2
 800740a:	d111      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	3b01      	subs	r3, #1
 800741a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d107      	bne.n	8007430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40023800 	.word	0x40023800

08007444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0d0      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b6a      	ldr	r3, [pc, #424]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d910      	bls.n	800748c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b67      	ldr	r3, [pc, #412]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f023 020f 	bic.w	r2, r3, #15
 8007472:	4965      	ldr	r1, [pc, #404]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	4313      	orrs	r3, r2
 8007478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747a:	4b63      	ldr	r3, [pc, #396]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0b8      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d020      	beq.n	80074da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074a4:	4b59      	ldr	r3, [pc, #356]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4a58      	ldr	r2, [pc, #352]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074bc:	4b53      	ldr	r3, [pc, #332]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4a52      	ldr	r2, [pc, #328]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c8:	4b50      	ldr	r3, [pc, #320]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	494d      	ldr	r1, [pc, #308]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d040      	beq.n	8007568 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d107      	bne.n	80074fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ee:	4b47      	ldr	r3, [pc, #284]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d115      	bne.n	8007526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e07f      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007506:	4b41      	ldr	r3, [pc, #260]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e073      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007516:	4b3d      	ldr	r3, [pc, #244]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e06b      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007526:	4b39      	ldr	r3, [pc, #228]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0203 	bic.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4936      	ldr	r1, [pc, #216]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007538:	f7fa fc62 	bl	8001e00 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753e:	e00a      	b.n	8007556 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007540:	f7fa fc5e 	bl	8001e00 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	; 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e053      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	4b2d      	ldr	r3, [pc, #180]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 020c 	and.w	r2, r3, #12
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	429a      	cmp	r2, r3
 8007566:	d1eb      	bne.n	8007540 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007568:	4b27      	ldr	r3, [pc, #156]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d210      	bcs.n	8007598 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 020f 	bic.w	r2, r3, #15
 800757e:	4922      	ldr	r1, [pc, #136]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	4313      	orrs	r3, r2
 8007584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007586:	4b20      	ldr	r3, [pc, #128]	; (8007608 <HAL_RCC_ClockConfig+0x1c4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d001      	beq.n	8007598 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e032      	b.n	80075fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075a4:	4b19      	ldr	r3, [pc, #100]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4916      	ldr	r1, [pc, #88]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075c2:	4b12      	ldr	r3, [pc, #72]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	490e      	ldr	r1, [pc, #56]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075d6:	f000 f821 	bl	800761c <HAL_RCC_GetSysClockFreq>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	490a      	ldr	r1, [pc, #40]	; (8007610 <HAL_RCC_ClockConfig+0x1cc>)
 80075e8:	5ccb      	ldrb	r3, [r1, r3]
 80075ea:	fa22 f303 	lsr.w	r3, r2, r3
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <HAL_RCC_ClockConfig+0x1d0>)
 80075f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <HAL_RCC_ClockConfig+0x1d4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fa fbbe 	bl	8001d78 <HAL_InitTick>

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40023c00 	.word	0x40023c00
 800760c:	40023800 	.word	0x40023800
 8007610:	0801a80c 	.word	0x0801a80c
 8007614:	20000000 	.word	0x20000000
 8007618:	20000004 	.word	0x20000004

0800761c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800761c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007620:	b094      	sub	sp, #80	; 0x50
 8007622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	647b      	str	r3, [r7, #68]	; 0x44
 8007628:	2300      	movs	r3, #0
 800762a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762c:	2300      	movs	r3, #0
 800762e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007634:	4b79      	ldr	r3, [pc, #484]	; (800781c <HAL_RCC_GetSysClockFreq+0x200>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 030c 	and.w	r3, r3, #12
 800763c:	2b08      	cmp	r3, #8
 800763e:	d00d      	beq.n	800765c <HAL_RCC_GetSysClockFreq+0x40>
 8007640:	2b08      	cmp	r3, #8
 8007642:	f200 80e1 	bhi.w	8007808 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0x34>
 800764a:	2b04      	cmp	r3, #4
 800764c:	d003      	beq.n	8007656 <HAL_RCC_GetSysClockFreq+0x3a>
 800764e:	e0db      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007650:	4b73      	ldr	r3, [pc, #460]	; (8007820 <HAL_RCC_GetSysClockFreq+0x204>)
 8007652:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007654:	e0db      	b.n	800780e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007656:	4b73      	ldr	r3, [pc, #460]	; (8007824 <HAL_RCC_GetSysClockFreq+0x208>)
 8007658:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800765a:	e0d8      	b.n	800780e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800765c:	4b6f      	ldr	r3, [pc, #444]	; (800781c <HAL_RCC_GetSysClockFreq+0x200>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007666:	4b6d      	ldr	r3, [pc, #436]	; (800781c <HAL_RCC_GetSysClockFreq+0x200>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d063      	beq.n	800773a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007672:	4b6a      	ldr	r3, [pc, #424]	; (800781c <HAL_RCC_GetSysClockFreq+0x200>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	2200      	movs	r2, #0
 800767a:	63bb      	str	r3, [r7, #56]	; 0x38
 800767c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007684:	633b      	str	r3, [r7, #48]	; 0x30
 8007686:	2300      	movs	r3, #0
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
 800768a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800768e:	4622      	mov	r2, r4
 8007690:	462b      	mov	r3, r5
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f04f 0100 	mov.w	r1, #0
 800769a:	0159      	lsls	r1, r3, #5
 800769c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a0:	0150      	lsls	r0, r2, #5
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4621      	mov	r1, r4
 80076a8:	1a51      	subs	r1, r2, r1
 80076aa:	6139      	str	r1, [r7, #16]
 80076ac:	4629      	mov	r1, r5
 80076ae:	eb63 0301 	sbc.w	r3, r3, r1
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c0:	4659      	mov	r1, fp
 80076c2:	018b      	lsls	r3, r1, #6
 80076c4:	4651      	mov	r1, sl
 80076c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076ca:	4651      	mov	r1, sl
 80076cc:	018a      	lsls	r2, r1, #6
 80076ce:	4651      	mov	r1, sl
 80076d0:	ebb2 0801 	subs.w	r8, r2, r1
 80076d4:	4659      	mov	r1, fp
 80076d6:	eb63 0901 	sbc.w	r9, r3, r1
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ee:	4690      	mov	r8, r2
 80076f0:	4699      	mov	r9, r3
 80076f2:	4623      	mov	r3, r4
 80076f4:	eb18 0303 	adds.w	r3, r8, r3
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	462b      	mov	r3, r5
 80076fc:	eb49 0303 	adc.w	r3, r9, r3
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800770e:	4629      	mov	r1, r5
 8007710:	024b      	lsls	r3, r1, #9
 8007712:	4621      	mov	r1, r4
 8007714:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007718:	4621      	mov	r1, r4
 800771a:	024a      	lsls	r2, r1, #9
 800771c:	4610      	mov	r0, r2
 800771e:	4619      	mov	r1, r3
 8007720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007722:	2200      	movs	r2, #0
 8007724:	62bb      	str	r3, [r7, #40]	; 0x28
 8007726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800772c:	f7f8 fdc0 	bl	80002b0 <__aeabi_uldivmod>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4613      	mov	r3, r2
 8007736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007738:	e058      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800773a:	4b38      	ldr	r3, [pc, #224]	; (800781c <HAL_RCC_GetSysClockFreq+0x200>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	099b      	lsrs	r3, r3, #6
 8007740:	2200      	movs	r2, #0
 8007742:	4618      	mov	r0, r3
 8007744:	4611      	mov	r1, r2
 8007746:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800774a:	623b      	str	r3, [r7, #32]
 800774c:	2300      	movs	r3, #0
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
 8007750:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	f04f 0000 	mov.w	r0, #0
 800775c:	f04f 0100 	mov.w	r1, #0
 8007760:	0159      	lsls	r1, r3, #5
 8007762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007766:	0150      	lsls	r0, r2, #5
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4641      	mov	r1, r8
 800776e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007772:	4649      	mov	r1, r9
 8007774:	eb63 0b01 	sbc.w	fp, r3, r1
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007784:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007788:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800778c:	ebb2 040a 	subs.w	r4, r2, sl
 8007790:	eb63 050b 	sbc.w	r5, r3, fp
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	00eb      	lsls	r3, r5, #3
 800779e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077a2:	00e2      	lsls	r2, r4, #3
 80077a4:	4614      	mov	r4, r2
 80077a6:	461d      	mov	r5, r3
 80077a8:	4643      	mov	r3, r8
 80077aa:	18e3      	adds	r3, r4, r3
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	464b      	mov	r3, r9
 80077b0:	eb45 0303 	adc.w	r3, r5, r3
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077c2:	4629      	mov	r1, r5
 80077c4:	028b      	lsls	r3, r1, #10
 80077c6:	4621      	mov	r1, r4
 80077c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077cc:	4621      	mov	r1, r4
 80077ce:	028a      	lsls	r2, r1, #10
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d6:	2200      	movs	r2, #0
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	61fa      	str	r2, [r7, #28]
 80077dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e0:	f7f8 fd66 	bl	80002b0 <__aeabi_uldivmod>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4613      	mov	r3, r2
 80077ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_RCC_GetSysClockFreq+0x200>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	3301      	adds	r3, #1
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80077fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007806:	e002      	b.n	800780e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_RCC_GetSysClockFreq+0x204>)
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800780c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800780e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007810:	4618      	mov	r0, r3
 8007812:	3750      	adds	r7, #80	; 0x50
 8007814:	46bd      	mov	sp, r7
 8007816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800781a:	bf00      	nop
 800781c:	40023800 	.word	0x40023800
 8007820:	00f42400 	.word	0x00f42400
 8007824:	007a1200 	.word	0x007a1200

08007828 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <HAL_RCC_GetHCLKFreq+0x14>)
 800782e:	681b      	ldr	r3, [r3, #0]
}
 8007830:	4618      	mov	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000000 	.word	0x20000000

08007840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007844:	f7ff fff0 	bl	8007828 <HAL_RCC_GetHCLKFreq>
 8007848:	4602      	mov	r2, r0
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	0a9b      	lsrs	r3, r3, #10
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	4903      	ldr	r1, [pc, #12]	; (8007864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007856:	5ccb      	ldrb	r3, [r1, r3]
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800785c:	4618      	mov	r0, r3
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40023800 	.word	0x40023800
 8007864:	0801a81c 	.word	0x0801a81c

08007868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800786c:	f7ff ffdc 	bl	8007828 <HAL_RCC_GetHCLKFreq>
 8007870:	4602      	mov	r2, r0
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	0b5b      	lsrs	r3, r3, #13
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	4903      	ldr	r1, [pc, #12]	; (800788c <HAL_RCC_GetPCLK2Freq+0x24>)
 800787e:	5ccb      	ldrb	r3, [r1, r3]
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007884:	4618      	mov	r0, r3
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40023800 	.word	0x40023800
 800788c:	0801a81c 	.word	0x0801a81c

08007890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078b8:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4a68      	ldr	r2, [pc, #416]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078c2:	6093      	str	r3, [r2, #8]
 80078c4:	4b66      	ldr	r3, [pc, #408]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	4964      	ldr	r1, [pc, #400]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078da:	2301      	movs	r3, #1
 80078dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d017      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ea:	4b5d      	ldr	r3, [pc, #372]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f8:	4959      	ldr	r1, [pc, #356]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007908:	d101      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800790a:	2301      	movs	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007916:	2301      	movs	r3, #1
 8007918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d017      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007926:	4b4e      	ldr	r3, [pc, #312]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800792c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	494a      	ldr	r1, [pc, #296]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007936:	4313      	orrs	r3, r2
 8007938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007944:	d101      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007946:	2301      	movs	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007952:	2301      	movs	r3, #1
 8007954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 808b 	beq.w	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007974:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	4a39      	ldr	r2, [pc, #228]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797e:	6413      	str	r3, [r2, #64]	; 0x40
 8007980:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800798c:	4b35      	ldr	r3, [pc, #212]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a34      	ldr	r2, [pc, #208]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007998:	f7fa fa32 	bl	8001e00 <HAL_GetTick>
 800799c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a0:	f7fa fa2e 	bl	8001e00 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b64      	cmp	r3, #100	; 0x64
 80079ac:	d901      	bls.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e357      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079b2:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0f0      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079be:	4b28      	ldr	r3, [pc, #160]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d035      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d02e      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079e6:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079fe:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d114      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fa f9f6 	bl	8001e00 <HAL_GetTick>
 8007a14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a16:	e00a      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a18:	f7fa f9f2 	bl	8001e00 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e319      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ee      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a46:	d111      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a56:	400b      	ands	r3, r1
 8007a58:	4901      	ldr	r1, [pc, #4]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	608b      	str	r3, [r1, #8]
 8007a5e:	e00b      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a60:	40023800 	.word	0x40023800
 8007a64:	40007000 	.word	0x40007000
 8007a68:	0ffffcff 	.word	0x0ffffcff
 8007a6c:	4baa      	ldr	r3, [pc, #680]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4aa9      	ldr	r2, [pc, #676]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a76:	6093      	str	r3, [r2, #8]
 8007a78:	4ba7      	ldr	r3, [pc, #668]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a84:	49a4      	ldr	r1, [pc, #656]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a96:	4ba0      	ldr	r3, [pc, #640]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9c:	4a9e      	ldr	r2, [pc, #632]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007aa6:	4b9c      	ldr	r3, [pc, #624]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	4999      	ldr	r1, [pc, #612]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ac4:	4b94      	ldr	r3, [pc, #592]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad2:	4991      	ldr	r1, [pc, #580]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ae6:	4b8c      	ldr	r3, [pc, #560]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af4:	4988      	ldr	r1, [pc, #544]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b08:	4b83      	ldr	r3, [pc, #524]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	4980      	ldr	r1, [pc, #512]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b2a:	4b7b      	ldr	r3, [pc, #492]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b38:	4977      	ldr	r1, [pc, #476]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b4c:	4b72      	ldr	r3, [pc, #456]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b52:	f023 0203 	bic.w	r2, r3, #3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	496f      	ldr	r1, [pc, #444]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b6e:	4b6a      	ldr	r3, [pc, #424]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b74:	f023 020c 	bic.w	r2, r3, #12
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7c:	4966      	ldr	r1, [pc, #408]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b90:	4b61      	ldr	r3, [pc, #388]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	495e      	ldr	r1, [pc, #376]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bb2:	4b59      	ldr	r3, [pc, #356]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc0:	4955      	ldr	r1, [pc, #340]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bd4:	4b50      	ldr	r3, [pc, #320]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	494d      	ldr	r1, [pc, #308]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007bf6:	4b48      	ldr	r3, [pc, #288]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c04:	4944      	ldr	r1, [pc, #272]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c18:	4b3f      	ldr	r3, [pc, #252]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c26:	493c      	ldr	r1, [pc, #240]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c3a:	4b37      	ldr	r3, [pc, #220]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c48:	4933      	ldr	r1, [pc, #204]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c5c:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c6a:	492b      	ldr	r1, [pc, #172]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c7e:	4b26      	ldr	r3, [pc, #152]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8c:	4922      	ldr	r1, [pc, #136]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ccc:	4912      	ldr	r1, [pc, #72]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ce0:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf0:	4909      	ldr	r1, [pc, #36]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d006      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80d9 	beq.w	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a01      	ldr	r2, [pc, #4]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d16:	e001      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d1e:	f7fa f86f 	bl	8001e00 <HAL_GetTick>
 8007d22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d24:	e008      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d26:	f7fa f86b 	bl	8001e00 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b64      	cmp	r3, #100	; 0x64
 8007d32:	d901      	bls.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e194      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d38:	4b6c      	ldr	r3, [pc, #432]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f0      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d021      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11d      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d58:	4b64      	ldr	r3, [pc, #400]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5e:	0c1b      	lsrs	r3, r3, #16
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d66:	4b61      	ldr	r3, [pc, #388]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6c:	0e1b      	lsrs	r3, r3, #24
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	019a      	lsls	r2, r3, #6
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	061b      	lsls	r3, r3, #24
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	071b      	lsls	r3, r3, #28
 8007d8c:	4957      	ldr	r1, [pc, #348]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007da8:	d00a      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d02e      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dbe:	d129      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007dc0:	4b4a      	ldr	r3, [pc, #296]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	f003 0303 	and.w	r3, r3, #3
 8007dcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dce:	4b47      	ldr	r3, [pc, #284]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd4:	0f1b      	lsrs	r3, r3, #28
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	019a      	lsls	r2, r3, #6
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	041b      	lsls	r3, r3, #16
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	431a      	orrs	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	071b      	lsls	r3, r3, #28
 8007df4:	493d      	ldr	r1, [pc, #244]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007dfc:	4b3b      	ldr	r3, [pc, #236]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e02:	f023 021f 	bic.w	r2, r3, #31
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4937      	ldr	r1, [pc, #220]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01d      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e20:	4b32      	ldr	r3, [pc, #200]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e26:	0e1b      	lsrs	r3, r3, #24
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e2e:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e34:	0f1b      	lsrs	r3, r3, #28
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	019a      	lsls	r2, r3, #6
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	061b      	lsls	r3, r3, #24
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	071b      	lsls	r3, r3, #28
 8007e54:	4925      	ldr	r1, [pc, #148]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d011      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	019a      	lsls	r2, r3, #6
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	041b      	lsls	r3, r3, #16
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	071b      	lsls	r3, r3, #28
 8007e84:	4919      	ldr	r1, [pc, #100]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a16      	ldr	r2, [pc, #88]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e98:	f7f9 ffb2 	bl	8001e00 <HAL_GetTick>
 8007e9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ea0:	f7f9 ffae 	bl	8001e00 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b64      	cmp	r3, #100	; 0x64
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e0d7      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	f040 80cd 	bne.w	8008060 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a08      	ldr	r2, [pc, #32]	; (8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed2:	f7f9 ff95 	bl	8001e00 <HAL_GetTick>
 8007ed6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ed8:	e00a      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007eda:	f7f9 ff91 	bl	8001e00 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b64      	cmp	r3, #100	; 0x64
 8007ee6:	d903      	bls.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e0ba      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007eec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ef0:	4b5e      	ldr	r3, [pc, #376]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efc:	d0ed      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d02e      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d12a      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f26:	4b51      	ldr	r3, [pc, #324]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f34:	4b4d      	ldr	r3, [pc, #308]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3a:	0f1b      	lsrs	r3, r3, #28
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	019a      	lsls	r2, r3, #6
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	041b      	lsls	r3, r3, #16
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	061b      	lsls	r3, r3, #24
 8007f54:	431a      	orrs	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	071b      	lsls	r3, r3, #28
 8007f5a:	4944      	ldr	r1, [pc, #272]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f62:	4b42      	ldr	r3, [pc, #264]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	3b01      	subs	r3, #1
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	493d      	ldr	r1, [pc, #244]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d022      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f90:	d11d      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f92:	4b36      	ldr	r3, [pc, #216]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f98:	0e1b      	lsrs	r3, r3, #24
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fa0:	4b32      	ldr	r3, [pc, #200]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa6:	0f1b      	lsrs	r3, r3, #28
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	019a      	lsls	r2, r3, #6
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	061b      	lsls	r3, r3, #24
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	071b      	lsls	r3, r3, #28
 8007fc6:	4929      	ldr	r1, [pc, #164]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d028      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fda:	4b24      	ldr	r3, [pc, #144]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	019a      	lsls	r2, r3, #6
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	041b      	lsls	r3, r3, #16
 8008000:	431a      	orrs	r2, r3
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	071b      	lsls	r3, r3, #28
 800800e:	4917      	ldr	r1, [pc, #92]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008010:	4313      	orrs	r3, r2
 8008012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	4911      	ldr	r1, [pc, #68]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800802c:	4b0f      	ldr	r3, [pc, #60]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a0e      	ldr	r2, [pc, #56]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008038:	f7f9 fee2 	bl	8001e00 <HAL_GetTick>
 800803c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800803e:	e008      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008040:	f7f9 fede 	bl	8001e00 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2b64      	cmp	r3, #100	; 0x64
 800804c:	d901      	bls.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e007      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805e:	d1ef      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40023800 	.word	0x40023800

08008070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e09d      	b.n	80081be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008092:	d009      	beq.n	80080a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	61da      	str	r2, [r3, #28]
 800809a:	e005      	b.n	80080a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7f9 f8b4 	bl	8001230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080e8:	d902      	bls.n	80080f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e002      	b.n	80080f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80080f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80080fe:	d007      	beq.n	8008110 <HAL_SPI_Init+0xa0>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008108:	d002      	beq.n	8008110 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	ea42 0103 	orr.w	r1, r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f003 0204 	and.w	r2, r3, #4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800818c:	ea42 0103 	orr.w	r1, r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	099b      	lsrs	r3, r3, #6
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10f      	bne.n	800820c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	099b      	lsrs	r3, r3, #6
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
    return;
 800820a:	e0d7      	b.n	80083bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00a      	beq.n	800822e <HAL_SPI_IRQHandler+0x66>
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	09db      	lsrs	r3, r3, #7
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
    return;
 800822c:	e0c6      	b.n	80083bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	095b      	lsrs	r3, r3, #5
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10c      	bne.n	8008254 <HAL_SPI_IRQHandler+0x8c>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	099b      	lsrs	r3, r3, #6
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	0a1b      	lsrs	r3, r3, #8
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80b4 	beq.w	80083bc <HAL_SPI_IRQHandler+0x1f4>
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80ad 	beq.w	80083bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	099b      	lsrs	r3, r3, #6
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d023      	beq.n	80082b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b03      	cmp	r3, #3
 8008278:	d011      	beq.n	800829e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827e:	f043 0204 	orr.w	r2, r3, #4
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	617b      	str	r3, [r7, #20]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	e00b      	b.n	80082b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800829e:	2300      	movs	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	693b      	ldr	r3, [r7, #16]
        return;
 80082b4:	e082      	b.n	80083bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d014      	beq.n	80082ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c6:	f043 0201 	orr.w	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00c      	beq.n	8008312 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fc:	f043 0208 	orr.w	r2, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008304:	2300      	movs	r3, #0
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	60bb      	str	r3, [r7, #8]
 8008310:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04f      	beq.n	80083ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008328:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d104      	bne.n	8008346 <HAL_SPI_IRQHandler+0x17e>
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d034      	beq.n	80083b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0203 	bic.w	r2, r2, #3
 8008354:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835a:	2b00      	cmp	r3, #0
 800835c:	d011      	beq.n	8008382 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	4a18      	ldr	r2, [pc, #96]	; (80083c4 <HAL_SPI_IRQHandler+0x1fc>)
 8008364:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836a:	4618      	mov	r0, r3
 800836c:	f7fa fe0e 	bl	8002f8c <HAL_DMA_Abort_IT>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	2b00      	cmp	r3, #0
 8008388:	d016      	beq.n	80083b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838e:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <HAL_SPI_IRQHandler+0x1fc>)
 8008390:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	4618      	mov	r0, r3
 8008398:	f7fa fdf8 	bl	8002f8c <HAL_DMA_Abort_IT>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80083ae:	e003      	b.n	80083b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f809 	bl	80083c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083b6:	e000      	b.n	80083ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80083b8:	bf00      	nop
    return;
 80083ba:	bf00      	nop
  }
}
 80083bc:	3720      	adds	r7, #32
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	080083dd 	.word	0x080083dd

080083c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7ff ffe5 	bl	80083c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e049      	b.n	80084ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d106      	bne.n	8008432 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7f8 ffc1 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f000 fabf 	bl	80089c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d001      	beq.n	80084cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e054      	b.n	8008576 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0201 	orr.w	r2, r2, #1
 80084e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a26      	ldr	r2, [pc, #152]	; (8008584 <HAL_TIM_Base_Start_IT+0xd0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d022      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f6:	d01d      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a22      	ldr	r2, [pc, #136]	; (8008588 <HAL_TIM_Base_Start_IT+0xd4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d018      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a21      	ldr	r2, [pc, #132]	; (800858c <HAL_TIM_Base_Start_IT+0xd8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d013      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1f      	ldr	r2, [pc, #124]	; (8008590 <HAL_TIM_Base_Start_IT+0xdc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00e      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <HAL_TIM_Base_Start_IT+0xe0>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d009      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1c      	ldr	r2, [pc, #112]	; (8008598 <HAL_TIM_Base_Start_IT+0xe4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d004      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x80>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1b      	ldr	r2, [pc, #108]	; (800859c <HAL_TIM_Base_Start_IT+0xe8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d115      	bne.n	8008560 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	4b19      	ldr	r3, [pc, #100]	; (80085a0 <HAL_TIM_Base_Start_IT+0xec>)
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b06      	cmp	r3, #6
 8008544:	d015      	beq.n	8008572 <HAL_TIM_Base_Start_IT+0xbe>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800854c:	d011      	beq.n	8008572 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f042 0201 	orr.w	r2, r2, #1
 800855c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855e:	e008      	b.n	8008572 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0201 	orr.w	r2, r2, #1
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	e000      	b.n	8008574 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40010000 	.word	0x40010000
 8008588:	40000400 	.word	0x40000400
 800858c:	40000800 	.word	0x40000800
 8008590:	40000c00 	.word	0x40000c00
 8008594:	40010400 	.word	0x40010400
 8008598:	40014000 	.word	0x40014000
 800859c:	40001800 	.word	0x40001800
 80085a0:	00010007 	.word	0x00010007

080085a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d122      	bne.n	8008600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d11b      	bne.n	8008600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0202 	mvn.w	r2, #2
 80085d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f9d0 	bl	800898c <HAL_TIM_IC_CaptureCallback>
 80085ec:	e005      	b.n	80085fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f9c2 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9d3 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b04      	cmp	r3, #4
 800860c:	d122      	bne.n	8008654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b04      	cmp	r3, #4
 800861a:	d11b      	bne.n	8008654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f06f 0204 	mvn.w	r2, #4
 8008624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2202      	movs	r2, #2
 800862a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9a6 	bl	800898c <HAL_TIM_IC_CaptureCallback>
 8008640:	e005      	b.n	800864e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f998 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9a9 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b08      	cmp	r3, #8
 8008660:	d122      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0308 	and.w	r3, r3, #8
 800866c:	2b08      	cmp	r3, #8
 800866e:	d11b      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0208 	mvn.w	r2, #8
 8008678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2204      	movs	r2, #4
 800867e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f97c 	bl	800898c <HAL_TIM_IC_CaptureCallback>
 8008694:	e005      	b.n	80086a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f96e 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f97f 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0310 	and.w	r3, r3, #16
 80086b2:	2b10      	cmp	r3, #16
 80086b4:	d122      	bne.n	80086fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d11b      	bne.n	80086fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0210 	mvn.w	r2, #16
 80086cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2208      	movs	r2, #8
 80086d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f952 	bl	800898c <HAL_TIM_IC_CaptureCallback>
 80086e8:	e005      	b.n	80086f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f944 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f955 	bl	80089a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b01      	cmp	r3, #1
 8008708:	d10e      	bne.n	8008728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b01      	cmp	r3, #1
 8008716:	d107      	bne.n	8008728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f06f 0201 	mvn.w	r2, #1
 8008720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f00d fad4 	bl	8015cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d10e      	bne.n	8008754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008740:	2b80      	cmp	r3, #128	; 0x80
 8008742:	d107      	bne.n	8008754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800874c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fb0c 	bl	8008d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008762:	d10e      	bne.n	8008782 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b80      	cmp	r3, #128	; 0x80
 8008770:	d107      	bne.n	8008782 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800877a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 faff 	bl	8008d80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878c:	2b40      	cmp	r3, #64	; 0x40
 800878e:	d10e      	bne.n	80087ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879a:	2b40      	cmp	r3, #64	; 0x40
 800879c:	d107      	bne.n	80087ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f903 	bl	80089b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d10e      	bne.n	80087da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d107      	bne.n	80087da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f06f 0220 	mvn.w	r2, #32
 80087d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fabf 	bl	8008d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_TIM_ConfigClockSource+0x1c>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e0b4      	b.n	800896a <HAL_TIM_ConfigClockSource+0x186>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	4b56      	ldr	r3, [pc, #344]	; (8008974 <HAL_TIM_ConfigClockSource+0x190>)
 800881c:	4013      	ands	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008838:	d03e      	beq.n	80088b8 <HAL_TIM_ConfigClockSource+0xd4>
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883e:	f200 8087 	bhi.w	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008846:	f000 8086 	beq.w	8008956 <HAL_TIM_ConfigClockSource+0x172>
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	d87f      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008850:	2b70      	cmp	r3, #112	; 0x70
 8008852:	d01a      	beq.n	800888a <HAL_TIM_ConfigClockSource+0xa6>
 8008854:	2b70      	cmp	r3, #112	; 0x70
 8008856:	d87b      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008858:	2b60      	cmp	r3, #96	; 0x60
 800885a:	d050      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0x11a>
 800885c:	2b60      	cmp	r3, #96	; 0x60
 800885e:	d877      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008860:	2b50      	cmp	r3, #80	; 0x50
 8008862:	d03c      	beq.n	80088de <HAL_TIM_ConfigClockSource+0xfa>
 8008864:	2b50      	cmp	r3, #80	; 0x50
 8008866:	d873      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d058      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x13a>
 800886c:	2b40      	cmp	r3, #64	; 0x40
 800886e:	d86f      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008870:	2b30      	cmp	r3, #48	; 0x30
 8008872:	d064      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15a>
 8008874:	2b30      	cmp	r3, #48	; 0x30
 8008876:	d86b      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008878:	2b20      	cmp	r3, #32
 800887a:	d060      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15a>
 800887c:	2b20      	cmp	r3, #32
 800887e:	d867      	bhi.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d05c      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15a>
 8008884:	2b10      	cmp	r3, #16
 8008886:	d05a      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x15a>
 8008888:	e062      	b.n	8008950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	6899      	ldr	r1, [r3, #8]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f000 f9af 	bl	8008bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	609a      	str	r2, [r3, #8]
      break;
 80088b6:	e04f      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6899      	ldr	r1, [r3, #8]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f000 f998 	bl	8008bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088da:	609a      	str	r2, [r3, #8]
      break;
 80088dc:	e03c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	6859      	ldr	r1, [r3, #4]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f000 f90c 	bl	8008b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2150      	movs	r1, #80	; 0x50
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f965 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 80088fc:	e02c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	6859      	ldr	r1, [r3, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	461a      	mov	r2, r3
 800890c:	f000 f92b 	bl	8008b66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2160      	movs	r1, #96	; 0x60
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f955 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 800891c:	e01c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	461a      	mov	r2, r3
 800892c:	f000 f8ec 	bl	8008b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2140      	movs	r1, #64	; 0x40
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f945 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 800893c:	e00c      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	4610      	mov	r0, r2
 800894a:	f000 f93c 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 800894e:	e003      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
      break;
 8008954:	e000      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	fffeff88 	.word	0xfffeff88

08008978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a40      	ldr	r2, [pc, #256]	; (8008adc <TIM_Base_SetConfig+0x114>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d013      	beq.n	8008a08 <TIM_Base_SetConfig+0x40>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e6:	d00f      	beq.n	8008a08 <TIM_Base_SetConfig+0x40>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a3d      	ldr	r2, [pc, #244]	; (8008ae0 <TIM_Base_SetConfig+0x118>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00b      	beq.n	8008a08 <TIM_Base_SetConfig+0x40>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a3c      	ldr	r2, [pc, #240]	; (8008ae4 <TIM_Base_SetConfig+0x11c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d007      	beq.n	8008a08 <TIM_Base_SetConfig+0x40>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a3b      	ldr	r2, [pc, #236]	; (8008ae8 <TIM_Base_SetConfig+0x120>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_Base_SetConfig+0x40>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a3a      	ldr	r2, [pc, #232]	; (8008aec <TIM_Base_SetConfig+0x124>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d108      	bne.n	8008a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2f      	ldr	r2, [pc, #188]	; (8008adc <TIM_Base_SetConfig+0x114>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d02b      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a28:	d027      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2c      	ldr	r2, [pc, #176]	; (8008ae0 <TIM_Base_SetConfig+0x118>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d023      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a2b      	ldr	r2, [pc, #172]	; (8008ae4 <TIM_Base_SetConfig+0x11c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01f      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a2a      	ldr	r2, [pc, #168]	; (8008ae8 <TIM_Base_SetConfig+0x120>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d01b      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a29      	ldr	r2, [pc, #164]	; (8008aec <TIM_Base_SetConfig+0x124>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d017      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a28      	ldr	r2, [pc, #160]	; (8008af0 <TIM_Base_SetConfig+0x128>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <TIM_Base_SetConfig+0x12c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00f      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a26      	ldr	r2, [pc, #152]	; (8008af8 <TIM_Base_SetConfig+0x130>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00b      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a25      	ldr	r2, [pc, #148]	; (8008afc <TIM_Base_SetConfig+0x134>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d007      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a24      	ldr	r2, [pc, #144]	; (8008b00 <TIM_Base_SetConfig+0x138>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_Base_SetConfig+0xb2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a23      	ldr	r2, [pc, #140]	; (8008b04 <TIM_Base_SetConfig+0x13c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d108      	bne.n	8008a8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <TIM_Base_SetConfig+0x114>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d003      	beq.n	8008ac0 <TIM_Base_SetConfig+0xf8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a0c      	ldr	r2, [pc, #48]	; (8008aec <TIM_Base_SetConfig+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d103      	bne.n	8008ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	615a      	str	r2, [r3, #20]
}
 8008ace:	bf00      	nop
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40010000 	.word	0x40010000
 8008ae0:	40000400 	.word	0x40000400
 8008ae4:	40000800 	.word	0x40000800
 8008ae8:	40000c00 	.word	0x40000c00
 8008aec:	40010400 	.word	0x40010400
 8008af0:	40014000 	.word	0x40014000
 8008af4:	40014400 	.word	0x40014400
 8008af8:	40014800 	.word	0x40014800
 8008afc:	40001800 	.word	0x40001800
 8008b00:	40001c00 	.word	0x40001c00
 8008b04:	40002000 	.word	0x40002000

08008b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f023 030a 	bic.w	r3, r3, #10
 8008b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b087      	sub	sp, #28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f023 0210 	bic.w	r2, r3, #16
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f043 0307 	orr.w	r3, r3, #7
 8008be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	609a      	str	r2, [r3, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	021a      	lsls	r2, r3, #8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e06d      	b.n	8008d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a30      	ldr	r2, [pc, #192]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a2f      	ldr	r2, [pc, #188]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d108      	bne.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a20      	ldr	r2, [pc, #128]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d022      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc6:	d01d      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d018      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d013      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1a      	ldr	r2, [pc, #104]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00e      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a15      	ldr	r2, [pc, #84]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d009      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d10c      	bne.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400
 8008d44:	40000400 	.word	0x40000400
 8008d48:	40000800 	.word	0x40000800
 8008d4c:	40000c00 	.word	0x40000c00
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40001800 	.word	0x40001800

08008d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e040      	b.n	8008e28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7f8 fb20 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2224      	movs	r2, #36	; 0x24
 8008dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0201 	bic.w	r2, r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fd08 	bl	80097e8 <UART_SetConfig>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e022      	b.n	8008e28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 ff60 	bl	8009cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0201 	orr.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 ffe7 	bl	8009df4 <UART_CheckIdleState>
 8008e26:	4603      	mov	r3, r0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	; 0x28
 8008e34:	af02      	add	r7, sp, #8
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d171      	bne.n	8008f2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <HAL_UART_Transmit+0x24>
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e06a      	b.n	8008f2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2221      	movs	r2, #33	; 0x21
 8008e64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e66:	f7f8 ffcb 	bl	8001e00 <HAL_GetTick>
 8008e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	88fa      	ldrh	r2, [r7, #6]
 8008e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e84:	d108      	bne.n	8008e98 <HAL_UART_Transmit+0x68>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d104      	bne.n	8008e98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	e003      	b.n	8008ea0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ea0:	e02c      	b.n	8008efc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2180      	movs	r1, #128	; 0x80
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 ffd8 	bl	8009e62 <UART_WaitOnFlagUntilTimeout>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e038      	b.n	8008f2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ed0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	e007      	b.n	8008eea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1cc      	bne.n	8008ea2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2140      	movs	r1, #64	; 0x40
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 ffa5 	bl	8009e62 <UART_WaitOnFlagUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e005      	b.n	8008f2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e000      	b.n	8008f2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008f2c:	2302      	movs	r3, #2
  }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b08a      	sub	sp, #40	; 0x28
 8008f3a:	af02      	add	r7, sp, #8
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	f040 80b1 	bne.w	80090b4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <HAL_UART_Receive+0x28>
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e0a9      	b.n	80090b6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2222      	movs	r2, #34	; 0x22
 8008f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f78:	f7f8 ff42 	bl	8001e00 <HAL_GetTick>
 8008f7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	88fa      	ldrh	r2, [r7, #6]
 8008f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f96:	d10e      	bne.n	8008fb6 <HAL_UART_Receive+0x80>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d105      	bne.n	8008fac <HAL_UART_Receive+0x76>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008faa:	e02d      	b.n	8009008 <HAL_UART_Receive+0xd2>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fb4:	e028      	b.n	8009008 <HAL_UART_Receive+0xd2>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10d      	bne.n	8008fda <HAL_UART_Receive+0xa4>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <HAL_UART_Receive+0x9a>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	22ff      	movs	r2, #255	; 0xff
 8008fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fce:	e01b      	b.n	8009008 <HAL_UART_Receive+0xd2>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	227f      	movs	r2, #127	; 0x7f
 8008fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fd8:	e016      	b.n	8009008 <HAL_UART_Receive+0xd2>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fe2:	d10d      	bne.n	8009000 <HAL_UART_Receive+0xca>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_UART_Receive+0xc0>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	227f      	movs	r2, #127	; 0x7f
 8008ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ff4:	e008      	b.n	8009008 <HAL_UART_Receive+0xd2>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	223f      	movs	r2, #63	; 0x3f
 8008ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ffe:	e003      	b.n	8009008 <HAL_UART_Receive+0xd2>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800900e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009018:	d108      	bne.n	800902c <HAL_UART_Receive+0xf6>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	e003      	b.n	8009034 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009034:	e032      	b.n	800909c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2200      	movs	r2, #0
 800903e:	2120      	movs	r1, #32
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 ff0e 	bl	8009e62 <UART_WaitOnFlagUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e032      	b.n	80090b6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10c      	bne.n	8009070 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	b29a      	uxth	r2, r3
 800905e:	8a7b      	ldrh	r3, [r7, #18]
 8009060:	4013      	ands	r3, r2
 8009062:	b29a      	uxth	r2, r3
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	3302      	adds	r3, #2
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e00c      	b.n	800908a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	b2da      	uxtb	r2, r3
 8009078:	8a7b      	ldrh	r3, [r7, #18]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	4013      	ands	r3, r2
 800907e:	b2da      	uxtb	r2, r3
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	3301      	adds	r3, #1
 8009088:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009090:	b29b      	uxth	r3, r3
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1c6      	bne.n	8009036 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	e000      	b.n	80090b6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80090b4:	2302      	movs	r3, #2
  }
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3720      	adds	r7, #32
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b08b      	sub	sp, #44	; 0x2c
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d147      	bne.n	8009166 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <HAL_UART_Transmit_IT+0x22>
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e040      	b.n	8009168 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2221      	movs	r2, #33	; 0x21
 800910e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009118:	d107      	bne.n	800912a <HAL_UART_Transmit_IT+0x6a>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d103      	bne.n	800912a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4a13      	ldr	r2, [pc, #76]	; (8009174 <HAL_UART_Transmit_IT+0xb4>)
 8009126:	66da      	str	r2, [r3, #108]	; 0x6c
 8009128:	e002      	b.n	8009130 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4a12      	ldr	r2, [pc, #72]	; (8009178 <HAL_UART_Transmit_IT+0xb8>)
 800912e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	613b      	str	r3, [r7, #16]
   return(result);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	623b      	str	r3, [r7, #32]
 8009150:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	69f9      	ldr	r1, [r7, #28]
 8009154:	6a3a      	ldr	r2, [r7, #32]
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	61bb      	str	r3, [r7, #24]
   return(result);
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e6      	bne.n	8009130 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	e000      	b.n	8009168 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009166:	2302      	movs	r3, #2
  }
}
 8009168:	4618      	mov	r0, r3
 800916a:	372c      	adds	r7, #44	; 0x2c
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	0800a327 	.word	0x0800a327
 8009178:	0800a271 	.word	0x0800a271

0800917c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009190:	2b20      	cmp	r3, #32
 8009192:	d132      	bne.n	80091fa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <HAL_UART_Receive_IT+0x24>
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e02b      	b.n	80091fc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d018      	beq.n	80091ea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	613b      	str	r3, [r7, #16]
   return(result);
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	623b      	str	r3, [r7, #32]
 80091d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	69f9      	ldr	r1, [r7, #28]
 80091dc:	6a3a      	ldr	r2, [r7, #32]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e6      	bne.n	80091b8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	461a      	mov	r2, r3
 80091ee:	68b9      	ldr	r1, [r7, #8]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fefd 	bl	8009ff0 <UART_Start_Receive_IT>
 80091f6:	4603      	mov	r3, r0
 80091f8:	e000      	b.n	80091fc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3728      	adds	r7, #40	; 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b0ba      	sub	sp, #232	; 0xe8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800922a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800922e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009232:	4013      	ands	r3, r2
 8009234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d115      	bne.n	800926c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00f      	beq.n	800926c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800924c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8297 	beq.w	8009790 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
      }
      return;
 800926a:	e291      	b.n	8009790 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800926c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 8117 	beq.w	80094a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009282:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009286:	4b85      	ldr	r3, [pc, #532]	; (800949c <HAL_UART_IRQHandler+0x298>)
 8009288:	4013      	ands	r3, r2
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 810a 	beq.w	80094a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d011      	beq.n	80092c0 <HAL_UART_IRQHandler+0xbc>
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2201      	movs	r2, #1
 80092ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b6:	f043 0201 	orr.w	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d011      	beq.n	80092f0 <HAL_UART_IRQHandler+0xec>
 80092cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2202      	movs	r2, #2
 80092de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e6:	f043 0204 	orr.w	r2, r3, #4
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d011      	beq.n	8009320 <HAL_UART_IRQHandler+0x11c>
 80092fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2204      	movs	r2, #4
 800930e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009316:	f043 0202 	orr.w	r2, r3, #2
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	f003 0308 	and.w	r3, r3, #8
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800933c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2208      	movs	r2, #8
 800934a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009352:	f043 0208 	orr.w	r2, r3, #8
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800935c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009364:	2b00      	cmp	r3, #0
 8009366:	d012      	beq.n	800938e <HAL_UART_IRQHandler+0x18a>
 8009368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00c      	beq.n	800938e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800937c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009384:	f043 0220 	orr.w	r2, r3, #32
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 81fd 	beq.w	8009794 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800939a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00d      	beq.n	80093c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d6:	2b40      	cmp	r3, #64	; 0x40
 80093d8:	d005      	beq.n	80093e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d04f      	beq.n	8009486 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fec8 	bl	800a17c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b40      	cmp	r3, #64	; 0x40
 80093f8:	d141      	bne.n	800947e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3308      	adds	r3, #8
 8009422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800942a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800943e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1d9      	bne.n	80093fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944a:	2b00      	cmp	r3, #0
 800944c:	d013      	beq.n	8009476 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009452:	4a13      	ldr	r2, [pc, #76]	; (80094a0 <HAL_UART_IRQHandler+0x29c>)
 8009454:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945a:	4618      	mov	r0, r3
 800945c:	f7f9 fd96 	bl	8002f8c <HAL_DMA_Abort_IT>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d017      	beq.n	8009496 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009474:	e00f      	b.n	8009496 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f9a0 	bl	80097bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947c:	e00b      	b.n	8009496 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f99c 	bl	80097bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009484:	e007      	b.n	8009496 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f998 	bl	80097bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009494:	e17e      	b.n	8009794 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009496:	bf00      	nop
    return;
 8009498:	e17c      	b.n	8009794 <HAL_UART_IRQHandler+0x590>
 800949a:	bf00      	nop
 800949c:	04000120 	.word	0x04000120
 80094a0:	0800a245 	.word	0x0800a245

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	f040 814c 	bne.w	8009746 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b2:	f003 0310 	and.w	r3, r3, #16
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 8145 	beq.w	8009746 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 813e 	beq.w	8009746 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2210      	movs	r2, #16
 80094d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	f040 80b6 	bne.w	800964e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8150 	beq.w	8009798 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009502:	429a      	cmp	r2, r3
 8009504:	f080 8148 	bcs.w	8009798 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800950e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800951c:	f000 8086 	beq.w	800962c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800953c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800954a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800954e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1da      	bne.n	8009520 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800957a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800957c:	f023 0301 	bic.w	r3, r3, #1
 8009580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800958e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800959a:	e841 2300 	strex	r3, r2, [r1]
 800959e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e1      	bne.n	800956a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3308      	adds	r3, #8
 80095ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095d2:	e841 2300 	strex	r3, r2, [r1]
 80095d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e3      	bne.n	80095a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fc:	f023 0310 	bic.w	r3, r3, #16
 8009600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800960e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009610:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e4      	bne.n	80095ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009626:	4618      	mov	r0, r3
 8009628:	f7f9 fc40 	bl	8002eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800963e:	b29b      	uxth	r3, r3
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	b29b      	uxth	r3, r3
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f8c2 	bl	80097d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800964c:	e0a4      	b.n	8009798 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800965a:	b29b      	uxth	r3, r3
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009668:	b29b      	uxth	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 8096 	beq.w	800979c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 8091 	beq.w	800979c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800968e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800969c:	647b      	str	r3, [r7, #68]	; 0x44
 800969e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e4      	bne.n	800967a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	623b      	str	r3, [r7, #32]
   return(result);
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096d4:	633a      	str	r2, [r7, #48]	; 0x30
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e3      	bne.n	80096b0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	60fb      	str	r3, [r7, #12]
   return(result);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f023 0310 	bic.w	r3, r3, #16
 8009710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800971e:	61fb      	str	r3, [r7, #28]
 8009720:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	69b9      	ldr	r1, [r7, #24]
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	617b      	str	r3, [r7, #20]
   return(result);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e4      	bne.n	80096fc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2202      	movs	r2, #2
 8009736:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f846 	bl	80097d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009744:	e02a      	b.n	800979c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00e      	beq.n	8009770 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975a:	2b00      	cmp	r3, #0
 800975c:	d008      	beq.n	8009770 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01c      	beq.n	80097a0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
    }
    return;
 800976e:	e017      	b.n	80097a0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d012      	beq.n	80097a2 <HAL_UART_IRQHandler+0x59e>
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00c      	beq.n	80097a2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fe2c 	bl	800a3e6 <UART_EndTransmit_IT>
    return;
 800978e:	e008      	b.n	80097a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009790:	bf00      	nop
 8009792:	e006      	b.n	80097a2 <HAL_UART_IRQHandler+0x59e>
    return;
 8009794:	bf00      	nop
 8009796:	e004      	b.n	80097a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009798:	bf00      	nop
 800979a:	e002      	b.n	80097a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <HAL_UART_IRQHandler+0x59e>
    return;
 80097a0:	bf00      	nop
  }

}
 80097a2:	37e8      	adds	r7, #232	; 0xe8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4ba6      	ldr	r3, [pc, #664]	; (8009aac <UART_SetConfig+0x2c4>)
 8009814:	4013      	ands	r3, r2
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	6812      	ldr	r2, [r2, #0]
 800981a:	6979      	ldr	r1, [r7, #20]
 800981c:	430b      	orrs	r3, r1
 800981e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	430a      	orrs	r2, r1
 8009858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a94      	ldr	r2, [pc, #592]	; (8009ab0 <UART_SetConfig+0x2c8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d120      	bne.n	80098a6 <UART_SetConfig+0xbe>
 8009864:	4b93      	ldr	r3, [pc, #588]	; (8009ab4 <UART_SetConfig+0x2cc>)
 8009866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b03      	cmp	r3, #3
 8009870:	d816      	bhi.n	80098a0 <UART_SetConfig+0xb8>
 8009872:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <UART_SetConfig+0x90>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	08009889 	.word	0x08009889
 800987c:	08009895 	.word	0x08009895
 8009880:	0800988f 	.word	0x0800988f
 8009884:	0800989b 	.word	0x0800989b
 8009888:	2301      	movs	r3, #1
 800988a:	77fb      	strb	r3, [r7, #31]
 800988c:	e150      	b.n	8009b30 <UART_SetConfig+0x348>
 800988e:	2302      	movs	r3, #2
 8009890:	77fb      	strb	r3, [r7, #31]
 8009892:	e14d      	b.n	8009b30 <UART_SetConfig+0x348>
 8009894:	2304      	movs	r3, #4
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	e14a      	b.n	8009b30 <UART_SetConfig+0x348>
 800989a:	2308      	movs	r3, #8
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e147      	b.n	8009b30 <UART_SetConfig+0x348>
 80098a0:	2310      	movs	r3, #16
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e144      	b.n	8009b30 <UART_SetConfig+0x348>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a83      	ldr	r2, [pc, #524]	; (8009ab8 <UART_SetConfig+0x2d0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d132      	bne.n	8009916 <UART_SetConfig+0x12e>
 80098b0:	4b80      	ldr	r3, [pc, #512]	; (8009ab4 <UART_SetConfig+0x2cc>)
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b6:	f003 030c 	and.w	r3, r3, #12
 80098ba:	2b0c      	cmp	r3, #12
 80098bc:	d828      	bhi.n	8009910 <UART_SetConfig+0x128>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0xdc>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098f9 	.word	0x080098f9
 80098c8:	08009911 	.word	0x08009911
 80098cc:	08009911 	.word	0x08009911
 80098d0:	08009911 	.word	0x08009911
 80098d4:	08009905 	.word	0x08009905
 80098d8:	08009911 	.word	0x08009911
 80098dc:	08009911 	.word	0x08009911
 80098e0:	08009911 	.word	0x08009911
 80098e4:	080098ff 	.word	0x080098ff
 80098e8:	08009911 	.word	0x08009911
 80098ec:	08009911 	.word	0x08009911
 80098f0:	08009911 	.word	0x08009911
 80098f4:	0800990b 	.word	0x0800990b
 80098f8:	2300      	movs	r3, #0
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e118      	b.n	8009b30 <UART_SetConfig+0x348>
 80098fe:	2302      	movs	r3, #2
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e115      	b.n	8009b30 <UART_SetConfig+0x348>
 8009904:	2304      	movs	r3, #4
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e112      	b.n	8009b30 <UART_SetConfig+0x348>
 800990a:	2308      	movs	r3, #8
 800990c:	77fb      	strb	r3, [r7, #31]
 800990e:	e10f      	b.n	8009b30 <UART_SetConfig+0x348>
 8009910:	2310      	movs	r3, #16
 8009912:	77fb      	strb	r3, [r7, #31]
 8009914:	e10c      	b.n	8009b30 <UART_SetConfig+0x348>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a68      	ldr	r2, [pc, #416]	; (8009abc <UART_SetConfig+0x2d4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d120      	bne.n	8009962 <UART_SetConfig+0x17a>
 8009920:	4b64      	ldr	r3, [pc, #400]	; (8009ab4 <UART_SetConfig+0x2cc>)
 8009922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800992a:	2b30      	cmp	r3, #48	; 0x30
 800992c:	d013      	beq.n	8009956 <UART_SetConfig+0x16e>
 800992e:	2b30      	cmp	r3, #48	; 0x30
 8009930:	d814      	bhi.n	800995c <UART_SetConfig+0x174>
 8009932:	2b20      	cmp	r3, #32
 8009934:	d009      	beq.n	800994a <UART_SetConfig+0x162>
 8009936:	2b20      	cmp	r3, #32
 8009938:	d810      	bhi.n	800995c <UART_SetConfig+0x174>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <UART_SetConfig+0x15c>
 800993e:	2b10      	cmp	r3, #16
 8009940:	d006      	beq.n	8009950 <UART_SetConfig+0x168>
 8009942:	e00b      	b.n	800995c <UART_SetConfig+0x174>
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e0f2      	b.n	8009b30 <UART_SetConfig+0x348>
 800994a:	2302      	movs	r3, #2
 800994c:	77fb      	strb	r3, [r7, #31]
 800994e:	e0ef      	b.n	8009b30 <UART_SetConfig+0x348>
 8009950:	2304      	movs	r3, #4
 8009952:	77fb      	strb	r3, [r7, #31]
 8009954:	e0ec      	b.n	8009b30 <UART_SetConfig+0x348>
 8009956:	2308      	movs	r3, #8
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e0e9      	b.n	8009b30 <UART_SetConfig+0x348>
 800995c:	2310      	movs	r3, #16
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e0e6      	b.n	8009b30 <UART_SetConfig+0x348>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a56      	ldr	r2, [pc, #344]	; (8009ac0 <UART_SetConfig+0x2d8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d120      	bne.n	80099ae <UART_SetConfig+0x1c6>
 800996c:	4b51      	ldr	r3, [pc, #324]	; (8009ab4 <UART_SetConfig+0x2cc>)
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009976:	2bc0      	cmp	r3, #192	; 0xc0
 8009978:	d013      	beq.n	80099a2 <UART_SetConfig+0x1ba>
 800997a:	2bc0      	cmp	r3, #192	; 0xc0
 800997c:	d814      	bhi.n	80099a8 <UART_SetConfig+0x1c0>
 800997e:	2b80      	cmp	r3, #128	; 0x80
 8009980:	d009      	beq.n	8009996 <UART_SetConfig+0x1ae>
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d810      	bhi.n	80099a8 <UART_SetConfig+0x1c0>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <UART_SetConfig+0x1a8>
 800998a:	2b40      	cmp	r3, #64	; 0x40
 800998c:	d006      	beq.n	800999c <UART_SetConfig+0x1b4>
 800998e:	e00b      	b.n	80099a8 <UART_SetConfig+0x1c0>
 8009990:	2300      	movs	r3, #0
 8009992:	77fb      	strb	r3, [r7, #31]
 8009994:	e0cc      	b.n	8009b30 <UART_SetConfig+0x348>
 8009996:	2302      	movs	r3, #2
 8009998:	77fb      	strb	r3, [r7, #31]
 800999a:	e0c9      	b.n	8009b30 <UART_SetConfig+0x348>
 800999c:	2304      	movs	r3, #4
 800999e:	77fb      	strb	r3, [r7, #31]
 80099a0:	e0c6      	b.n	8009b30 <UART_SetConfig+0x348>
 80099a2:	2308      	movs	r3, #8
 80099a4:	77fb      	strb	r3, [r7, #31]
 80099a6:	e0c3      	b.n	8009b30 <UART_SetConfig+0x348>
 80099a8:	2310      	movs	r3, #16
 80099aa:	77fb      	strb	r3, [r7, #31]
 80099ac:	e0c0      	b.n	8009b30 <UART_SetConfig+0x348>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a44      	ldr	r2, [pc, #272]	; (8009ac4 <UART_SetConfig+0x2dc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d125      	bne.n	8009a04 <UART_SetConfig+0x21c>
 80099b8:	4b3e      	ldr	r3, [pc, #248]	; (8009ab4 <UART_SetConfig+0x2cc>)
 80099ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c6:	d017      	beq.n	80099f8 <UART_SetConfig+0x210>
 80099c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099cc:	d817      	bhi.n	80099fe <UART_SetConfig+0x216>
 80099ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d2:	d00b      	beq.n	80099ec <UART_SetConfig+0x204>
 80099d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d8:	d811      	bhi.n	80099fe <UART_SetConfig+0x216>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <UART_SetConfig+0x1fe>
 80099de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e2:	d006      	beq.n	80099f2 <UART_SetConfig+0x20a>
 80099e4:	e00b      	b.n	80099fe <UART_SetConfig+0x216>
 80099e6:	2300      	movs	r3, #0
 80099e8:	77fb      	strb	r3, [r7, #31]
 80099ea:	e0a1      	b.n	8009b30 <UART_SetConfig+0x348>
 80099ec:	2302      	movs	r3, #2
 80099ee:	77fb      	strb	r3, [r7, #31]
 80099f0:	e09e      	b.n	8009b30 <UART_SetConfig+0x348>
 80099f2:	2304      	movs	r3, #4
 80099f4:	77fb      	strb	r3, [r7, #31]
 80099f6:	e09b      	b.n	8009b30 <UART_SetConfig+0x348>
 80099f8:	2308      	movs	r3, #8
 80099fa:	77fb      	strb	r3, [r7, #31]
 80099fc:	e098      	b.n	8009b30 <UART_SetConfig+0x348>
 80099fe:	2310      	movs	r3, #16
 8009a00:	77fb      	strb	r3, [r7, #31]
 8009a02:	e095      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a2f      	ldr	r2, [pc, #188]	; (8009ac8 <UART_SetConfig+0x2e0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d125      	bne.n	8009a5a <UART_SetConfig+0x272>
 8009a0e:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <UART_SetConfig+0x2cc>)
 8009a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a1c:	d017      	beq.n	8009a4e <UART_SetConfig+0x266>
 8009a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a22:	d817      	bhi.n	8009a54 <UART_SetConfig+0x26c>
 8009a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a28:	d00b      	beq.n	8009a42 <UART_SetConfig+0x25a>
 8009a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a2e:	d811      	bhi.n	8009a54 <UART_SetConfig+0x26c>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <UART_SetConfig+0x254>
 8009a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a38:	d006      	beq.n	8009a48 <UART_SetConfig+0x260>
 8009a3a:	e00b      	b.n	8009a54 <UART_SetConfig+0x26c>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	77fb      	strb	r3, [r7, #31]
 8009a40:	e076      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a42:	2302      	movs	r3, #2
 8009a44:	77fb      	strb	r3, [r7, #31]
 8009a46:	e073      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a48:	2304      	movs	r3, #4
 8009a4a:	77fb      	strb	r3, [r7, #31]
 8009a4c:	e070      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a4e:	2308      	movs	r3, #8
 8009a50:	77fb      	strb	r3, [r7, #31]
 8009a52:	e06d      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a54:	2310      	movs	r3, #16
 8009a56:	77fb      	strb	r3, [r7, #31]
 8009a58:	e06a      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a1b      	ldr	r2, [pc, #108]	; (8009acc <UART_SetConfig+0x2e4>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d138      	bne.n	8009ad6 <UART_SetConfig+0x2ee>
 8009a64:	4b13      	ldr	r3, [pc, #76]	; (8009ab4 <UART_SetConfig+0x2cc>)
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a72:	d017      	beq.n	8009aa4 <UART_SetConfig+0x2bc>
 8009a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a78:	d82a      	bhi.n	8009ad0 <UART_SetConfig+0x2e8>
 8009a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a7e:	d00b      	beq.n	8009a98 <UART_SetConfig+0x2b0>
 8009a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a84:	d824      	bhi.n	8009ad0 <UART_SetConfig+0x2e8>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <UART_SetConfig+0x2aa>
 8009a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a8e:	d006      	beq.n	8009a9e <UART_SetConfig+0x2b6>
 8009a90:	e01e      	b.n	8009ad0 <UART_SetConfig+0x2e8>
 8009a92:	2300      	movs	r3, #0
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	e04b      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	77fb      	strb	r3, [r7, #31]
 8009a9c:	e048      	b.n	8009b30 <UART_SetConfig+0x348>
 8009a9e:	2304      	movs	r3, #4
 8009aa0:	77fb      	strb	r3, [r7, #31]
 8009aa2:	e045      	b.n	8009b30 <UART_SetConfig+0x348>
 8009aa4:	2308      	movs	r3, #8
 8009aa6:	77fb      	strb	r3, [r7, #31]
 8009aa8:	e042      	b.n	8009b30 <UART_SetConfig+0x348>
 8009aaa:	bf00      	nop
 8009aac:	efff69f3 	.word	0xefff69f3
 8009ab0:	40011000 	.word	0x40011000
 8009ab4:	40023800 	.word	0x40023800
 8009ab8:	40004400 	.word	0x40004400
 8009abc:	40004800 	.word	0x40004800
 8009ac0:	40004c00 	.word	0x40004c00
 8009ac4:	40005000 	.word	0x40005000
 8009ac8:	40011400 	.word	0x40011400
 8009acc:	40007800 	.word	0x40007800
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e02c      	b.n	8009b30 <UART_SetConfig+0x348>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a72      	ldr	r2, [pc, #456]	; (8009ca4 <UART_SetConfig+0x4bc>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d125      	bne.n	8009b2c <UART_SetConfig+0x344>
 8009ae0:	4b71      	ldr	r3, [pc, #452]	; (8009ca8 <UART_SetConfig+0x4c0>)
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009aea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009aee:	d017      	beq.n	8009b20 <UART_SetConfig+0x338>
 8009af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009af4:	d817      	bhi.n	8009b26 <UART_SetConfig+0x33e>
 8009af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009afa:	d00b      	beq.n	8009b14 <UART_SetConfig+0x32c>
 8009afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b00:	d811      	bhi.n	8009b26 <UART_SetConfig+0x33e>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <UART_SetConfig+0x326>
 8009b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b0a:	d006      	beq.n	8009b1a <UART_SetConfig+0x332>
 8009b0c:	e00b      	b.n	8009b26 <UART_SetConfig+0x33e>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	77fb      	strb	r3, [r7, #31]
 8009b12:	e00d      	b.n	8009b30 <UART_SetConfig+0x348>
 8009b14:	2302      	movs	r3, #2
 8009b16:	77fb      	strb	r3, [r7, #31]
 8009b18:	e00a      	b.n	8009b30 <UART_SetConfig+0x348>
 8009b1a:	2304      	movs	r3, #4
 8009b1c:	77fb      	strb	r3, [r7, #31]
 8009b1e:	e007      	b.n	8009b30 <UART_SetConfig+0x348>
 8009b20:	2308      	movs	r3, #8
 8009b22:	77fb      	strb	r3, [r7, #31]
 8009b24:	e004      	b.n	8009b30 <UART_SetConfig+0x348>
 8009b26:	2310      	movs	r3, #16
 8009b28:	77fb      	strb	r3, [r7, #31]
 8009b2a:	e001      	b.n	8009b30 <UART_SetConfig+0x348>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b38:	d15b      	bne.n	8009bf2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009b3a:	7ffb      	ldrb	r3, [r7, #31]
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d828      	bhi.n	8009b92 <UART_SetConfig+0x3aa>
 8009b40:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <UART_SetConfig+0x360>)
 8009b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b46:	bf00      	nop
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b75 	.word	0x08009b75
 8009b50:	08009b7d 	.word	0x08009b7d
 8009b54:	08009b93 	.word	0x08009b93
 8009b58:	08009b83 	.word	0x08009b83
 8009b5c:	08009b93 	.word	0x08009b93
 8009b60:	08009b93 	.word	0x08009b93
 8009b64:	08009b93 	.word	0x08009b93
 8009b68:	08009b8b 	.word	0x08009b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b6c:	f7fd fe68 	bl	8007840 <HAL_RCC_GetPCLK1Freq>
 8009b70:	61b8      	str	r0, [r7, #24]
        break;
 8009b72:	e013      	b.n	8009b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b74:	f7fd fe78 	bl	8007868 <HAL_RCC_GetPCLK2Freq>
 8009b78:	61b8      	str	r0, [r7, #24]
        break;
 8009b7a:	e00f      	b.n	8009b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b7c:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <UART_SetConfig+0x4c4>)
 8009b7e:	61bb      	str	r3, [r7, #24]
        break;
 8009b80:	e00c      	b.n	8009b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b82:	f7fd fd4b 	bl	800761c <HAL_RCC_GetSysClockFreq>
 8009b86:	61b8      	str	r0, [r7, #24]
        break;
 8009b88:	e008      	b.n	8009b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b8e:	61bb      	str	r3, [r7, #24]
        break;
 8009b90:	e004      	b.n	8009b9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	77bb      	strb	r3, [r7, #30]
        break;
 8009b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d074      	beq.n	8009c8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	005a      	lsls	r2, r3, #1
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	441a      	add	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	d916      	bls.n	8009bec <UART_SetConfig+0x404>
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bc4:	d212      	bcs.n	8009bec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f023 030f 	bic.w	r3, r3, #15
 8009bce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	89fa      	ldrh	r2, [r7, #14]
 8009be8:	60da      	str	r2, [r3, #12]
 8009bea:	e04f      	b.n	8009c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	77bb      	strb	r3, [r7, #30]
 8009bf0:	e04c      	b.n	8009c8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bf2:	7ffb      	ldrb	r3, [r7, #31]
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d828      	bhi.n	8009c4a <UART_SetConfig+0x462>
 8009bf8:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <UART_SetConfig+0x418>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c25 	.word	0x08009c25
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c35 	.word	0x08009c35
 8009c0c:	08009c4b 	.word	0x08009c4b
 8009c10:	08009c3b 	.word	0x08009c3b
 8009c14:	08009c4b 	.word	0x08009c4b
 8009c18:	08009c4b 	.word	0x08009c4b
 8009c1c:	08009c4b 	.word	0x08009c4b
 8009c20:	08009c43 	.word	0x08009c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c24:	f7fd fe0c 	bl	8007840 <HAL_RCC_GetPCLK1Freq>
 8009c28:	61b8      	str	r0, [r7, #24]
        break;
 8009c2a:	e013      	b.n	8009c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c2c:	f7fd fe1c 	bl	8007868 <HAL_RCC_GetPCLK2Freq>
 8009c30:	61b8      	str	r0, [r7, #24]
        break;
 8009c32:	e00f      	b.n	8009c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c34:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <UART_SetConfig+0x4c4>)
 8009c36:	61bb      	str	r3, [r7, #24]
        break;
 8009c38:	e00c      	b.n	8009c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c3a:	f7fd fcef 	bl	800761c <HAL_RCC_GetSysClockFreq>
 8009c3e:	61b8      	str	r0, [r7, #24]
        break;
 8009c40:	e008      	b.n	8009c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c46:	61bb      	str	r3, [r7, #24]
        break;
 8009c48:	e004      	b.n	8009c54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	77bb      	strb	r3, [r7, #30]
        break;
 8009c52:	bf00      	nop
    }

    if (pclk != 0U)
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d018      	beq.n	8009c8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	085a      	lsrs	r2, r3, #1
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	441a      	add	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b0f      	cmp	r3, #15
 8009c72:	d909      	bls.n	8009c88 <UART_SetConfig+0x4a0>
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7a:	d205      	bcs.n	8009c88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60da      	str	r2, [r3, #12]
 8009c86:	e001      	b.n	8009c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009c98:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3720      	adds	r7, #32
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	40007c00 	.word	0x40007c00
 8009ca8:	40023800 	.word	0x40023800
 8009cac:	00f42400 	.word	0x00f42400

08009cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00a      	beq.n	8009cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	f003 0310 	and.w	r3, r3, #16
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00a      	beq.n	8009d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dae:	d10a      	bne.n	8009dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	605a      	str	r2, [r3, #4]
  }
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e04:	f7f7 fffc 	bl	8001e00 <HAL_GetTick>
 8009e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0308 	and.w	r3, r3, #8
 8009e14:	2b08      	cmp	r3, #8
 8009e16:	d10e      	bne.n	8009e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f81b 	bl	8009e62 <UART_WaitOnFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e011      	b.n	8009e5a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b09c      	sub	sp, #112	; 0x70
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e72:	e0a7      	b.n	8009fc4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	f000 80a3 	beq.w	8009fc4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e7e:	f7f7 ffbf 	bl	8001e00 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <UART_WaitOnFlagUntilTimeout+0x32>
 8009e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d13f      	bne.n	8009f14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009eb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009eb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e6      	bne.n	8009e94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	f023 0301 	bic.w	r3, r3, #1
 8009edc:	663b      	str	r3, [r7, #96]	; 0x60
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ee6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e5      	bne.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2220      	movs	r2, #32
 8009efe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e068      	b.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0304 	and.w	r3, r3, #4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d050      	beq.n	8009fc4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f30:	d148      	bne.n	8009fc4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e6      	bne.n	8009f3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f8e:	623a      	str	r2, [r7, #32]
 8009f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	69f9      	ldr	r1, [r7, #28]
 8009f94:	6a3a      	ldr	r2, [r7, #32]
 8009f96:	e841 2300 	strex	r3, r2, [r1]
 8009f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1e5      	bne.n	8009f6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e010      	b.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69da      	ldr	r2, [r3, #28]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	bf0c      	ite	eq
 8009fd4:	2301      	moveq	r3, #1
 8009fd6:	2300      	movne	r3, #0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	f43f af48 	beq.w	8009e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3770      	adds	r7, #112	; 0x70
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b097      	sub	sp, #92	; 0x5c
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	88fa      	ldrh	r2, [r7, #6]
 800a008:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	88fa      	ldrh	r2, [r7, #6]
 800a010:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a022:	d10e      	bne.n	800a042 <UART_Start_Receive_IT+0x52>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d105      	bne.n	800a038 <UART_Start_Receive_IT+0x48>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a032:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a036:	e02d      	b.n	800a094 <UART_Start_Receive_IT+0xa4>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	22ff      	movs	r2, #255	; 0xff
 800a03c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a040:	e028      	b.n	800a094 <UART_Start_Receive_IT+0xa4>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10d      	bne.n	800a066 <UART_Start_Receive_IT+0x76>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d104      	bne.n	800a05c <UART_Start_Receive_IT+0x6c>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	22ff      	movs	r2, #255	; 0xff
 800a056:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a05a:	e01b      	b.n	800a094 <UART_Start_Receive_IT+0xa4>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	227f      	movs	r2, #127	; 0x7f
 800a060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a064:	e016      	b.n	800a094 <UART_Start_Receive_IT+0xa4>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a06e:	d10d      	bne.n	800a08c <UART_Start_Receive_IT+0x9c>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d104      	bne.n	800a082 <UART_Start_Receive_IT+0x92>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	227f      	movs	r2, #127	; 0x7f
 800a07c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a080:	e008      	b.n	800a094 <UART_Start_Receive_IT+0xa4>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	223f      	movs	r2, #63	; 0x3f
 800a086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a08a:	e003      	b.n	800a094 <UART_Start_Receive_IT+0xa4>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2222      	movs	r2, #34	; 0x22
 800a0a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	f043 0301 	orr.w	r3, r3, #1
 800a0ba:	657b      	str	r3, [r7, #84]	; 0x54
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0c4:	64ba      	str	r2, [r7, #72]	; 0x48
 800a0c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e5      	bne.n	800a0a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	d107      	bne.n	800a0f2 <UART_Start_Receive_IT+0x102>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4a21      	ldr	r2, [pc, #132]	; (800a174 <UART_Start_Receive_IT+0x184>)
 800a0ee:	669a      	str	r2, [r3, #104]	; 0x68
 800a0f0:	e002      	b.n	800a0f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4a20      	ldr	r2, [pc, #128]	; (800a178 <UART_Start_Receive_IT+0x188>)
 800a0f6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d019      	beq.n	800a134 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a114:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
 800a120:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e6      	bne.n	800a100 <UART_Start_Receive_IT+0x110>
 800a132:	e018      	b.n	800a166 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	613b      	str	r3, [r7, #16]
   return(result);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f043 0320 	orr.w	r3, r3, #32
 800a148:	653b      	str	r3, [r7, #80]	; 0x50
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a152:	623b      	str	r3, [r7, #32]
 800a154:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	69f9      	ldr	r1, [r7, #28]
 800a158:	6a3a      	ldr	r2, [r7, #32]
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e6      	bne.n	800a134 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	375c      	adds	r7, #92	; 0x5c
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	0800a5a1 	.word	0x0800a5a1
 800a178:	0800a43b 	.word	0x0800a43b

0800a17c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b095      	sub	sp, #84	; 0x54
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a1a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e6      	bne.n	800a184 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e5      	bne.n	800a1b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d118      	bne.n	800a224 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f023 0310 	bic.w	r3, r3, #16
 800a206:	647b      	str	r3, [r7, #68]	; 0x44
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6979      	ldr	r1, [r7, #20]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	613b      	str	r3, [r7, #16]
   return(result);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e6      	bne.n	800a1f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2220      	movs	r2, #32
 800a228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a238:	bf00      	nop
 800a23a:	3754      	adds	r7, #84	; 0x54
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff faaa 	bl	80097bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a270:	b480      	push	{r7}
 800a272:	b08f      	sub	sp, #60	; 0x3c
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a27c:	2b21      	cmp	r3, #33	; 0x21
 800a27e:	d14c      	bne.n	800a31a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a286:	b29b      	uxth	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d132      	bne.n	800a2f2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	61fb      	str	r3, [r7, #28]
   return(result);
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e6      	bne.n	800a28c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d2:	633b      	str	r3, [r7, #48]	; 0x30
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e0:	6979      	ldr	r1, [r7, #20]
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	e841 2300 	strex	r3, r2, [r1]
 800a2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1e6      	bne.n	800a2be <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a2f0:	e013      	b.n	800a31a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f6:	781a      	ldrb	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	b29a      	uxth	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a31a:	bf00      	nop
 800a31c:	373c      	adds	r7, #60	; 0x3c
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a326:	b480      	push	{r7}
 800a328:	b091      	sub	sp, #68	; 0x44
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a332:	2b21      	cmp	r3, #33	; 0x21
 800a334:	d151      	bne.n	800a3da <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d132      	bne.n	800a3a8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	623b      	str	r3, [r7, #32]
   return(result);
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a356:	63bb      	str	r3, [r7, #56]	; 0x38
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	633b      	str	r3, [r7, #48]	; 0x30
 800a362:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e6      	bne.n	800a342 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	60fb      	str	r3, [r7, #12]
   return(result);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a388:	637b      	str	r3, [r7, #52]	; 0x34
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a392:	61fb      	str	r3, [r7, #28]
 800a394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	69b9      	ldr	r1, [r7, #24]
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e6      	bne.n	800a374 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a3a6:	e018      	b.n	800a3da <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c2:	1c9a      	adds	r2, r3, #2
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a3da:	bf00      	nop
 800a3dc:	3744      	adds	r7, #68	; 0x44
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a402:	61fb      	str	r3, [r7, #28]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	461a      	mov	r2, r3
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6979      	ldr	r1, [r7, #20]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	613b      	str	r3, [r7, #16]
   return(result);
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e6      	bne.n	800a3ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2220      	movs	r2, #32
 800a424:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff f9bb 	bl	80097a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a432:	bf00      	nop
 800a434:	3720      	adds	r7, #32
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b096      	sub	sp, #88	; 0x58
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a448:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a452:	2b22      	cmp	r3, #34	; 0x22
 800a454:	f040 8098 	bne.w	800a588 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a462:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a466:	b2d9      	uxtb	r1, r3
 800a468:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a472:	400a      	ands	r2, r1
 800a474:	b2d2      	uxtb	r2, r2
 800a476:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d17b      	bne.n	800a598 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4be:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e6      	bne.n	800a4a0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	f023 0301 	bic.w	r3, r3, #1
 800a4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4f2:	633a      	str	r2, [r7, #48]	; 0x30
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e5      	bne.n	800a4d2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2220      	movs	r2, #32
 800a50a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d12e      	bne.n	800a580 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	60fb      	str	r3, [r7, #12]
   return(result);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f023 0310 	bic.w	r3, r3, #16
 800a53c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	69b9      	ldr	r1, [r7, #24]
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	617b      	str	r3, [r7, #20]
   return(result);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e6      	bne.n	800a528 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b10      	cmp	r3, #16
 800a566:	d103      	bne.n	800a570 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2210      	movs	r2, #16
 800a56e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff f929 	bl	80097d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a57e:	e00b      	b.n	800a598 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f00b fb55 	bl	8015c30 <HAL_UART_RxCpltCallback>
}
 800a586:	e007      	b.n	800a598 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0208 	orr.w	r2, r2, #8
 800a596:	619a      	str	r2, [r3, #24]
}
 800a598:	bf00      	nop
 800a59a:	3758      	adds	r7, #88	; 0x58
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b096      	sub	sp, #88	; 0x58
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5b8:	2b22      	cmp	r3, #34	; 0x22
 800a5ba:	f040 8098 	bne.w	800a6ee <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a5ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a5d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e2:	1c9a      	adds	r2, r3, #2
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d17b      	bne.n	800a6fe <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60e:	e853 3f00 	ldrex	r3, [r3]
 800a612:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a61a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	461a      	mov	r2, r3
 800a622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a624:	643b      	str	r3, [r7, #64]	; 0x40
 800a626:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a628:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a62a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a62c:	e841 2300 	strex	r3, r2, [r1]
 800a630:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1e6      	bne.n	800a606 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3308      	adds	r3, #8
 800a63e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	e853 3f00 	ldrex	r3, [r3]
 800a646:	61fb      	str	r3, [r7, #28]
   return(result);
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f023 0301 	bic.w	r3, r3, #1
 800a64e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a658:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a660:	e841 2300 	strex	r3, r2, [r1]
 800a664:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1e5      	bne.n	800a638 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2220      	movs	r2, #32
 800a670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a684:	2b01      	cmp	r3, #1
 800a686:	d12e      	bne.n	800a6e6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e853 3f00 	ldrex	r3, [r3]
 800a69a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f023 0310 	bic.w	r3, r3, #16
 800a6a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6979      	ldr	r1, [r7, #20]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e6      	bne.n	800a68e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	2b10      	cmp	r3, #16
 800a6cc:	d103      	bne.n	800a6d6 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2210      	movs	r2, #16
 800a6d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff f876 	bl	80097d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6e4:	e00b      	b.n	800a6fe <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f00b faa2 	bl	8015c30 <HAL_UART_RxCpltCallback>
}
 800a6ec:	e007      	b.n	800a6fe <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0208 	orr.w	r2, r2, #8
 800a6fc:	619a      	str	r2, [r3, #24]
}
 800a6fe:	bf00      	nop
 800a700:	3758      	adds	r7, #88	; 0x58
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a708:	b084      	sub	sp, #16
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	f107 001c 	add.w	r0, r7, #28
 800a716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d120      	bne.n	800a762 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	4b20      	ldr	r3, [pc, #128]	; (800a7b4 <USB_CoreInit+0xac>)
 800a732:	4013      	ands	r3, r2
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a746:	2b01      	cmp	r3, #1
 800a748:	d105      	bne.n	800a756 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fa96 	bl	800ac88 <USB_CoreReset>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
 800a760:	e010      	b.n	800a784 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa8a 	bl	800ac88 <USB_CoreReset>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	2b01      	cmp	r3, #1
 800a788:	d10b      	bne.n	800a7a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f043 0206 	orr.w	r2, r3, #6
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f043 0220 	orr.w	r2, r3, #32
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7ae:	b004      	add	sp, #16
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	ffbdffbf 	.word	0xffbdffbf

0800a7b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f023 0201 	bic.w	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d115      	bne.n	800a828 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a808:	2001      	movs	r0, #1
 800a80a:	f7f7 fb05 	bl	8001e18 <HAL_Delay>
      ms++;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3301      	adds	r3, #1
 800a812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fa29 	bl	800ac6c <USB_GetMode>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d01e      	beq.n	800a85e <USB_SetCurrentMode+0x84>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b31      	cmp	r3, #49	; 0x31
 800a824:	d9f0      	bls.n	800a808 <USB_SetCurrentMode+0x2e>
 800a826:	e01a      	b.n	800a85e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a828:	78fb      	ldrb	r3, [r7, #3]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d115      	bne.n	800a85a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a83a:	2001      	movs	r0, #1
 800a83c:	f7f7 faec 	bl	8001e18 <HAL_Delay>
      ms++;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3301      	adds	r3, #1
 800a844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fa10 	bl	800ac6c <USB_GetMode>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <USB_SetCurrentMode+0x84>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b31      	cmp	r3, #49	; 0x31
 800a856:	d9f0      	bls.n	800a83a <USB_SetCurrentMode+0x60>
 800a858:	e001      	b.n	800a85e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e005      	b.n	800a86a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b32      	cmp	r3, #50	; 0x32
 800a862:	d101      	bne.n	800a868 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a874:	b084      	sub	sp, #16
 800a876:	b580      	push	{r7, lr}
 800a878:	b086      	sub	sp, #24
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a88e:	2300      	movs	r3, #0
 800a890:	613b      	str	r3, [r7, #16]
 800a892:	e009      	b.n	800a8a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	3340      	adds	r3, #64	; 0x40
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2b0e      	cmp	r3, #14
 800a8ac:	d9f2      	bls.n	800a894 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11c      	bne.n	800a8ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8c2:	f043 0302 	orr.w	r3, r3, #2
 800a8c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e005      	b.n	800a8fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a900:	461a      	mov	r2, r3
 800a902:	2300      	movs	r3, #0
 800a904:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90c:	4619      	mov	r1, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a914:	461a      	mov	r2, r3
 800a916:	680b      	ldr	r3, [r1, #0]
 800a918:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10c      	bne.n	800a93a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a926:	2100      	movs	r1, #0
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f965 	bl	800abf8 <USB_SetDevSpeed>
 800a92e:	e008      	b.n	800a942 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a930:	2101      	movs	r1, #1
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f960 	bl	800abf8 <USB_SetDevSpeed>
 800a938:	e003      	b.n	800a942 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a93a:	2103      	movs	r1, #3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f95b 	bl	800abf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a942:	2110      	movs	r1, #16
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f8f3 	bl	800ab30 <USB_FlushTxFifo>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f91f 	bl	800ab98 <USB_FlushRxFifo>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96a:	461a      	mov	r2, r3
 800a96c:	2300      	movs	r3, #0
 800a96e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	461a      	mov	r2, r3
 800a978:	2300      	movs	r3, #0
 800a97a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a982:	461a      	mov	r2, r3
 800a984:	2300      	movs	r3, #0
 800a986:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a988:	2300      	movs	r3, #0
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	e043      	b.n	800aa16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9a4:	d118      	bne.n	800a9d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	e013      	b.n	800a9ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	e008      	b.n	800a9ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa08:	461a      	mov	r2, r3
 800aa0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	3301      	adds	r3, #1
 800aa14:	613b      	str	r3, [r7, #16]
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d3b7      	bcc.n	800a98e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
 800aa22:	e043      	b.n	800aaac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa3a:	d118      	bne.n	800aa6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	e013      	b.n	800aa80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa64:	461a      	mov	r2, r3
 800aa66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	e008      	b.n	800aa80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	2300      	movs	r3, #0
 800aa90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	613b      	str	r3, [r7, #16]
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d3b7      	bcc.n	800aa24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aac6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aad4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	f043 0210 	orr.w	r2, r3, #16
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	699a      	ldr	r2, [r3, #24]
 800aaec:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <USB_DevInit+0x2b4>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d005      	beq.n	800ab06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	f043 0208 	orr.w	r2, r3, #8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d105      	bne.n	800ab18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <USB_DevInit+0x2b8>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab24:	b004      	add	sp, #16
 800ab26:	4770      	bx	lr
 800ab28:	803c3800 	.word	0x803c3800
 800ab2c:	40000004 	.word	0x40000004

0800ab30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4a13      	ldr	r2, [pc, #76]	; (800ab94 <USB_FlushTxFifo+0x64>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d901      	bls.n	800ab50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e01b      	b.n	800ab88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	daf2      	bge.n	800ab3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	019b      	lsls	r3, r3, #6
 800ab60:	f043 0220 	orr.w	r2, r3, #32
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a08      	ldr	r2, [pc, #32]	; (800ab94 <USB_FlushTxFifo+0x64>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d901      	bls.n	800ab7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e006      	b.n	800ab88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f003 0320 	and.w	r3, r3, #32
 800ab82:	2b20      	cmp	r3, #32
 800ab84:	d0f0      	beq.n	800ab68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	00030d40 	.word	0x00030d40

0800ab98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3301      	adds	r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4a11      	ldr	r2, [pc, #68]	; (800abf4 <USB_FlushRxFifo+0x5c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d901      	bls.n	800abb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e018      	b.n	800abe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	daf2      	bge.n	800aba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2210      	movs	r2, #16
 800abc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3301      	adds	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4a08      	ldr	r2, [pc, #32]	; (800abf4 <USB_FlushRxFifo+0x5c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d901      	bls.n	800abda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e006      	b.n	800abe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	f003 0310 	and.w	r3, r3, #16
 800abe2:	2b10      	cmp	r3, #16
 800abe4:	d0f0      	beq.n	800abc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	00030d40 	.word	0x00030d40

0800abf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	68f9      	ldr	r1, [r7, #12]
 800ac14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac44:	f023 0303 	bic.w	r3, r3, #3
 800ac48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac58:	f043 0302 	orr.w	r3, r3, #2
 800ac5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	f003 0301 	and.w	r3, r3, #1
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3301      	adds	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	4a13      	ldr	r2, [pc, #76]	; (800acec <USB_CoreReset+0x64>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d901      	bls.n	800aca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e01b      	b.n	800acde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	daf2      	bge.n	800ac94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f043 0201 	orr.w	r2, r3, #1
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4a09      	ldr	r2, [pc, #36]	; (800acec <USB_CoreReset+0x64>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d901      	bls.n	800acd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e006      	b.n	800acde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d0f0      	beq.n	800acbe <USB_CoreReset+0x36>

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	00030d40 	.word	0x00030d40

0800acf0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800acf6:	4b8d      	ldr	r3, [pc, #564]	; (800af2c <MX_LWIP_Init+0x23c>)
 800acf8:	22c0      	movs	r2, #192	; 0xc0
 800acfa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800acfc:	4b8b      	ldr	r3, [pc, #556]	; (800af2c <MX_LWIP_Init+0x23c>)
 800acfe:	22a8      	movs	r2, #168	; 0xa8
 800ad00:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ad02:	4b8a      	ldr	r3, [pc, #552]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad04:	2201      	movs	r2, #1
 800ad06:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 800ad08:	4b88      	ldr	r3, [pc, #544]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad0a:	224d      	movs	r2, #77	; 0x4d
 800ad0c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ad0e:	4b88      	ldr	r3, [pc, #544]	; (800af30 <MX_LWIP_Init+0x240>)
 800ad10:	22ff      	movs	r2, #255	; 0xff
 800ad12:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ad14:	4b86      	ldr	r3, [pc, #536]	; (800af30 <MX_LWIP_Init+0x240>)
 800ad16:	22ff      	movs	r2, #255	; 0xff
 800ad18:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ad1a:	4b85      	ldr	r3, [pc, #532]	; (800af30 <MX_LWIP_Init+0x240>)
 800ad1c:	22ff      	movs	r2, #255	; 0xff
 800ad1e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ad20:	4b83      	ldr	r3, [pc, #524]	; (800af30 <MX_LWIP_Init+0x240>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ad26:	4b83      	ldr	r3, [pc, #524]	; (800af34 <MX_LWIP_Init+0x244>)
 800ad28:	22c0      	movs	r2, #192	; 0xc0
 800ad2a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ad2c:	4b81      	ldr	r3, [pc, #516]	; (800af34 <MX_LWIP_Init+0x244>)
 800ad2e:	22a8      	movs	r2, #168	; 0xa8
 800ad30:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ad32:	4b80      	ldr	r3, [pc, #512]	; (800af34 <MX_LWIP_Init+0x244>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800ad38:	4b7e      	ldr	r3, [pc, #504]	; (800af34 <MX_LWIP_Init+0x244>)
 800ad3a:	2264      	movs	r2, #100	; 0x64
 800ad3c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ad3e:	f000 fd25 	bl	800b78c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ad42:	4b7a      	ldr	r3, [pc, #488]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	061a      	lsls	r2, r3, #24
 800ad48:	4b78      	ldr	r3, [pc, #480]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad4a:	785b      	ldrb	r3, [r3, #1]
 800ad4c:	041b      	lsls	r3, r3, #16
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	4b76      	ldr	r3, [pc, #472]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad52:	789b      	ldrb	r3, [r3, #2]
 800ad54:	021b      	lsls	r3, r3, #8
 800ad56:	4313      	orrs	r3, r2
 800ad58:	4a74      	ldr	r2, [pc, #464]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad5a:	78d2      	ldrb	r2, [r2, #3]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	061a      	lsls	r2, r3, #24
 800ad60:	4b72      	ldr	r3, [pc, #456]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	0619      	lsls	r1, r3, #24
 800ad66:	4b71      	ldr	r3, [pc, #452]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad68:	785b      	ldrb	r3, [r3, #1]
 800ad6a:	041b      	lsls	r3, r3, #16
 800ad6c:	4319      	orrs	r1, r3
 800ad6e:	4b6f      	ldr	r3, [pc, #444]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad70:	789b      	ldrb	r3, [r3, #2]
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	430b      	orrs	r3, r1
 800ad76:	496d      	ldr	r1, [pc, #436]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad78:	78c9      	ldrb	r1, [r1, #3]
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad82:	431a      	orrs	r2, r3
 800ad84:	4b69      	ldr	r3, [pc, #420]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	0619      	lsls	r1, r3, #24
 800ad8a:	4b68      	ldr	r3, [pc, #416]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	041b      	lsls	r3, r3, #16
 800ad90:	4319      	orrs	r1, r3
 800ad92:	4b66      	ldr	r3, [pc, #408]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad94:	789b      	ldrb	r3, [r3, #2]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	4964      	ldr	r1, [pc, #400]	; (800af2c <MX_LWIP_Init+0x23c>)
 800ad9c:	78c9      	ldrb	r1, [r1, #3]
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ada6:	431a      	orrs	r2, r3
 800ada8:	4b60      	ldr	r3, [pc, #384]	; (800af2c <MX_LWIP_Init+0x23c>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	0619      	lsls	r1, r3, #24
 800adae:	4b5f      	ldr	r3, [pc, #380]	; (800af2c <MX_LWIP_Init+0x23c>)
 800adb0:	785b      	ldrb	r3, [r3, #1]
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	4319      	orrs	r1, r3
 800adb6:	4b5d      	ldr	r3, [pc, #372]	; (800af2c <MX_LWIP_Init+0x23c>)
 800adb8:	789b      	ldrb	r3, [r3, #2]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	430b      	orrs	r3, r1
 800adbe:	495b      	ldr	r1, [pc, #364]	; (800af2c <MX_LWIP_Init+0x23c>)
 800adc0:	78c9      	ldrb	r1, [r1, #3]
 800adc2:	430b      	orrs	r3, r1
 800adc4:	0e1b      	lsrs	r3, r3, #24
 800adc6:	4313      	orrs	r3, r2
 800adc8:	4a5b      	ldr	r2, [pc, #364]	; (800af38 <MX_LWIP_Init+0x248>)
 800adca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800adcc:	4b58      	ldr	r3, [pc, #352]	; (800af30 <MX_LWIP_Init+0x240>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	061a      	lsls	r2, r3, #24
 800add2:	4b57      	ldr	r3, [pc, #348]	; (800af30 <MX_LWIP_Init+0x240>)
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	041b      	lsls	r3, r3, #16
 800add8:	431a      	orrs	r2, r3
 800adda:	4b55      	ldr	r3, [pc, #340]	; (800af30 <MX_LWIP_Init+0x240>)
 800addc:	789b      	ldrb	r3, [r3, #2]
 800adde:	021b      	lsls	r3, r3, #8
 800ade0:	4313      	orrs	r3, r2
 800ade2:	4a53      	ldr	r2, [pc, #332]	; (800af30 <MX_LWIP_Init+0x240>)
 800ade4:	78d2      	ldrb	r2, [r2, #3]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	061a      	lsls	r2, r3, #24
 800adea:	4b51      	ldr	r3, [pc, #324]	; (800af30 <MX_LWIP_Init+0x240>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	0619      	lsls	r1, r3, #24
 800adf0:	4b4f      	ldr	r3, [pc, #316]	; (800af30 <MX_LWIP_Init+0x240>)
 800adf2:	785b      	ldrb	r3, [r3, #1]
 800adf4:	041b      	lsls	r3, r3, #16
 800adf6:	4319      	orrs	r1, r3
 800adf8:	4b4d      	ldr	r3, [pc, #308]	; (800af30 <MX_LWIP_Init+0x240>)
 800adfa:	789b      	ldrb	r3, [r3, #2]
 800adfc:	021b      	lsls	r3, r3, #8
 800adfe:	430b      	orrs	r3, r1
 800ae00:	494b      	ldr	r1, [pc, #300]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae02:	78c9      	ldrb	r1, [r1, #3]
 800ae04:	430b      	orrs	r3, r1
 800ae06:	021b      	lsls	r3, r3, #8
 800ae08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae0c:	431a      	orrs	r2, r3
 800ae0e:	4b48      	ldr	r3, [pc, #288]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	0619      	lsls	r1, r3, #24
 800ae14:	4b46      	ldr	r3, [pc, #280]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	041b      	lsls	r3, r3, #16
 800ae1a:	4319      	orrs	r1, r3
 800ae1c:	4b44      	ldr	r3, [pc, #272]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae1e:	789b      	ldrb	r3, [r3, #2]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	430b      	orrs	r3, r1
 800ae24:	4942      	ldr	r1, [pc, #264]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae26:	78c9      	ldrb	r1, [r1, #3]
 800ae28:	430b      	orrs	r3, r1
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae30:	431a      	orrs	r2, r3
 800ae32:	4b3f      	ldr	r3, [pc, #252]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	0619      	lsls	r1, r3, #24
 800ae38:	4b3d      	ldr	r3, [pc, #244]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	041b      	lsls	r3, r3, #16
 800ae3e:	4319      	orrs	r1, r3
 800ae40:	4b3b      	ldr	r3, [pc, #236]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae42:	789b      	ldrb	r3, [r3, #2]
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	430b      	orrs	r3, r1
 800ae48:	4939      	ldr	r1, [pc, #228]	; (800af30 <MX_LWIP_Init+0x240>)
 800ae4a:	78c9      	ldrb	r1, [r1, #3]
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	0e1b      	lsrs	r3, r3, #24
 800ae50:	4313      	orrs	r3, r2
 800ae52:	4a3a      	ldr	r2, [pc, #232]	; (800af3c <MX_LWIP_Init+0x24c>)
 800ae54:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ae56:	4b37      	ldr	r3, [pc, #220]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	061a      	lsls	r2, r3, #24
 800ae5c:	4b35      	ldr	r3, [pc, #212]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae5e:	785b      	ldrb	r3, [r3, #1]
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	431a      	orrs	r2, r3
 800ae64:	4b33      	ldr	r3, [pc, #204]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae66:	789b      	ldrb	r3, [r3, #2]
 800ae68:	021b      	lsls	r3, r3, #8
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	4a31      	ldr	r2, [pc, #196]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae6e:	78d2      	ldrb	r2, [r2, #3]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	061a      	lsls	r2, r3, #24
 800ae74:	4b2f      	ldr	r3, [pc, #188]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	0619      	lsls	r1, r3, #24
 800ae7a:	4b2e      	ldr	r3, [pc, #184]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	041b      	lsls	r3, r3, #16
 800ae80:	4319      	orrs	r1, r3
 800ae82:	4b2c      	ldr	r3, [pc, #176]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae84:	789b      	ldrb	r3, [r3, #2]
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	492a      	ldr	r1, [pc, #168]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae8c:	78c9      	ldrb	r1, [r1, #3]
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	021b      	lsls	r3, r3, #8
 800ae92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae96:	431a      	orrs	r2, r3
 800ae98:	4b26      	ldr	r3, [pc, #152]	; (800af34 <MX_LWIP_Init+0x244>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	0619      	lsls	r1, r3, #24
 800ae9e:	4b25      	ldr	r3, [pc, #148]	; (800af34 <MX_LWIP_Init+0x244>)
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	041b      	lsls	r3, r3, #16
 800aea4:	4319      	orrs	r1, r3
 800aea6:	4b23      	ldr	r3, [pc, #140]	; (800af34 <MX_LWIP_Init+0x244>)
 800aea8:	789b      	ldrb	r3, [r3, #2]
 800aeaa:	021b      	lsls	r3, r3, #8
 800aeac:	430b      	orrs	r3, r1
 800aeae:	4921      	ldr	r1, [pc, #132]	; (800af34 <MX_LWIP_Init+0x244>)
 800aeb0:	78c9      	ldrb	r1, [r1, #3]
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	0a1b      	lsrs	r3, r3, #8
 800aeb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aeba:	431a      	orrs	r2, r3
 800aebc:	4b1d      	ldr	r3, [pc, #116]	; (800af34 <MX_LWIP_Init+0x244>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	0619      	lsls	r1, r3, #24
 800aec2:	4b1c      	ldr	r3, [pc, #112]	; (800af34 <MX_LWIP_Init+0x244>)
 800aec4:	785b      	ldrb	r3, [r3, #1]
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	4319      	orrs	r1, r3
 800aeca:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <MX_LWIP_Init+0x244>)
 800aecc:	789b      	ldrb	r3, [r3, #2]
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	430b      	orrs	r3, r1
 800aed2:	4918      	ldr	r1, [pc, #96]	; (800af34 <MX_LWIP_Init+0x244>)
 800aed4:	78c9      	ldrb	r1, [r1, #3]
 800aed6:	430b      	orrs	r3, r1
 800aed8:	0e1b      	lsrs	r3, r3, #24
 800aeda:	4313      	orrs	r3, r2
 800aedc:	4a18      	ldr	r2, [pc, #96]	; (800af40 <MX_LWIP_Init+0x250>)
 800aede:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800aee0:	4b18      	ldr	r3, [pc, #96]	; (800af44 <MX_LWIP_Init+0x254>)
 800aee2:	9302      	str	r3, [sp, #8]
 800aee4:	4b18      	ldr	r3, [pc, #96]	; (800af48 <MX_LWIP_Init+0x258>)
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	2300      	movs	r3, #0
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	4b14      	ldr	r3, [pc, #80]	; (800af40 <MX_LWIP_Init+0x250>)
 800aeee:	4a13      	ldr	r2, [pc, #76]	; (800af3c <MX_LWIP_Init+0x24c>)
 800aef0:	4911      	ldr	r1, [pc, #68]	; (800af38 <MX_LWIP_Init+0x248>)
 800aef2:	4816      	ldr	r0, [pc, #88]	; (800af4c <MX_LWIP_Init+0x25c>)
 800aef4:	f001 f936 	bl	800c164 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800aef8:	4814      	ldr	r0, [pc, #80]	; (800af4c <MX_LWIP_Init+0x25c>)
 800aefa:	f001 fae5 	bl	800c4c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <MX_LWIP_Init+0x25c>)
 800af00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af04:	089b      	lsrs	r3, r3, #2
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d003      	beq.n	800af18 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800af10:	480e      	ldr	r0, [pc, #56]	; (800af4c <MX_LWIP_Init+0x25c>)
 800af12:	f001 fae9 	bl	800c4e8 <netif_set_up>
 800af16:	e002      	b.n	800af1e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800af18:	480c      	ldr	r0, [pc, #48]	; (800af4c <MX_LWIP_Init+0x25c>)
 800af1a:	f001 fb51 	bl	800c5c0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800af1e:	490c      	ldr	r1, [pc, #48]	; (800af50 <MX_LWIP_Init+0x260>)
 800af20:	480a      	ldr	r0, [pc, #40]	; (800af4c <MX_LWIP_Init+0x25c>)
 800af22:	f001 fbe3 	bl	800c6ec <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800af26:	bf00      	nop
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000c6c 	.word	0x20000c6c
 800af30:	20000c70 	.word	0x20000c70
 800af34:	20000c74 	.word	0x20000c74
 800af38:	20000c60 	.word	0x20000c60
 800af3c:	20000c64 	.word	0x20000c64
 800af40:	20000c68 	.word	0x20000c68
 800af44:	08015981 	.word	0x08015981
 800af48:	0800b269 	.word	0x0800b269
 800af4c:	20000c2c 	.word	0x20000c2c
 800af50:	0800af55 	.word	0x0800af55

0800af54 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <SCB_InvalidateDCache_by_Addr>:
{
 800af68:	b480      	push	{r7}
 800af6a:	b087      	sub	sp, #28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800af7a:	2320      	movs	r3, #32
 800af7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800af7e:	f3bf 8f4f 	dsb	sy
}
 800af82:	bf00      	nop
    while (op_size > 0) {
 800af84:	e00b      	b.n	800af9e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800af86:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <SCB_InvalidateDCache_by_Addr+0x54>)
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	4413      	add	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dcf0      	bgt.n	800af86 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800afa4:	f3bf 8f4f 	dsb	sy
}
 800afa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800afaa:	f3bf 8f6f 	isb	sy
}
 800afae:	bf00      	nop
}
 800afb0:	bf00      	nop
 800afb2:	371c      	adds	r7, #28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	e000ed00 	.word	0xe000ed00

0800afc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800afcc:	4b40      	ldr	r3, [pc, #256]	; (800b0d0 <low_level_init+0x110>)
 800afce:	4a41      	ldr	r2, [pc, #260]	; (800b0d4 <low_level_init+0x114>)
 800afd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800afd2:	2300      	movs	r3, #0
 800afd4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800afd6:	2380      	movs	r3, #128	; 0x80
 800afd8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800afda:	23e1      	movs	r3, #225	; 0xe1
 800afdc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800afde:	2300      	movs	r3, #0
 800afe0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800afe2:	2300      	movs	r3, #0
 800afe4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800afe6:	2300      	movs	r3, #0
 800afe8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800afea:	4a39      	ldr	r2, [pc, #228]	; (800b0d0 <low_level_init+0x110>)
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800aff2:	4b37      	ldr	r3, [pc, #220]	; (800b0d0 <low_level_init+0x110>)
 800aff4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800aff8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800affa:	4b35      	ldr	r3, [pc, #212]	; (800b0d0 <low_level_init+0x110>)
 800affc:	4a36      	ldr	r2, [pc, #216]	; (800b0d8 <low_level_init+0x118>)
 800affe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b000:	4b33      	ldr	r3, [pc, #204]	; (800b0d0 <low_level_init+0x110>)
 800b002:	4a36      	ldr	r2, [pc, #216]	; (800b0dc <low_level_init+0x11c>)
 800b004:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b006:	4b32      	ldr	r3, [pc, #200]	; (800b0d0 <low_level_init+0x110>)
 800b008:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b00c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b00e:	4830      	ldr	r0, [pc, #192]	; (800b0d0 <low_level_init+0x110>)
 800b010:	f7f8 fa62 	bl	80034d8 <HAL_ETH_Init>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b018:	2238      	movs	r2, #56	; 0x38
 800b01a:	2100      	movs	r1, #0
 800b01c:	4830      	ldr	r0, [pc, #192]	; (800b0e0 <low_level_init+0x120>)
 800b01e:	f00b fd39 	bl	8016a94 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b022:	4b2f      	ldr	r3, [pc, #188]	; (800b0e0 <low_level_init+0x120>)
 800b024:	2221      	movs	r2, #33	; 0x21
 800b026:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b028:	4b2d      	ldr	r3, [pc, #180]	; (800b0e0 <low_level_init+0x120>)
 800b02a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b02e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b030:	4b2b      	ldr	r3, [pc, #172]	; (800b0e0 <low_level_init+0x120>)
 800b032:	2200      	movs	r2, #0
 800b034:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b036:	482b      	ldr	r0, [pc, #172]	; (800b0e4 <low_level_init+0x124>)
 800b038:	f000 ff5c 	bl	800bef4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2206      	movs	r2, #6
 800b040:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b044:	4b22      	ldr	r3, [pc, #136]	; (800b0d0 <low_level_init+0x110>)
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	781a      	ldrb	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b050:	4b1f      	ldr	r3, [pc, #124]	; (800b0d0 <low_level_init+0x110>)
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	785a      	ldrb	r2, [r3, #1]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b05c:	4b1c      	ldr	r3, [pc, #112]	; (800b0d0 <low_level_init+0x110>)
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	789a      	ldrb	r2, [r3, #2]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b068:	4b19      	ldr	r3, [pc, #100]	; (800b0d0 <low_level_init+0x110>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	78da      	ldrb	r2, [r3, #3]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b074:	4b16      	ldr	r3, [pc, #88]	; (800b0d0 <low_level_init+0x110>)
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	791a      	ldrb	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b080:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <low_level_init+0x110>)
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	795a      	ldrb	r2, [r3, #5]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b092:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b09a:	f043 030a 	orr.w	r3, r3, #10
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b0a6:	4910      	ldr	r1, [pc, #64]	; (800b0e8 <low_level_init+0x128>)
 800b0a8:	4810      	ldr	r0, [pc, #64]	; (800b0ec <low_level_init+0x12c>)
 800b0aa:	f7f6 fcf6 	bl	8001a9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b0ae:	480f      	ldr	r0, [pc, #60]	; (800b0ec <low_level_init+0x12c>)
 800b0b0:	f7f6 fd25 	bl	8001afe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d103      	bne.n	800b0c2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fa3a 	bl	800b534 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b0c0:	e001      	b.n	800b0c6 <low_level_init+0x106>
    Error_Handler();
 800b0c2:	f7f5 fe67 	bl	8000d94 <Error_Handler>
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20005604 	.word	0x20005604
 800b0d4:	40028000 	.word	0x40028000
 800b0d8:	20000130 	.word	0x20000130
 800b0dc:	20000090 	.word	0x20000090
 800b0e0:	200056b4 	.word	0x200056b4
 800b0e4:	0801a82c 	.word	0x0801a82c
 800b0e8:	2000000c 	.word	0x2000000c
 800b0ec:	200056ec 	.word	0x200056ec

0800b0f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b092      	sub	sp, #72	; 0x48
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b108:	f107 030c 	add.w	r3, r7, #12
 800b10c:	2230      	movs	r2, #48	; 0x30
 800b10e:	2100      	movs	r1, #0
 800b110:	4618      	mov	r0, r3
 800b112:	f00b fcbf 	bl	8016a94 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b116:	f107 030c 	add.w	r3, r7, #12
 800b11a:	2230      	movs	r2, #48	; 0x30
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f00b fcb8 	bl	8016a94 <memset>

  for(q = p; q != NULL; q = q->next)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	643b      	str	r3, [r7, #64]	; 0x40
 800b128:	e045      	b.n	800b1b6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d902      	bls.n	800b136 <low_level_output+0x46>
      return ERR_IF;
 800b130:	f06f 030b 	mvn.w	r3, #11
 800b134:	e055      	b.n	800b1e2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b138:	6859      	ldr	r1, [r3, #4]
 800b13a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b13c:	4613      	mov	r3, r2
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	3348      	adds	r3, #72	; 0x48
 800b146:	443b      	add	r3, r7
 800b148:	3b3c      	subs	r3, #60	; 0x3c
 800b14a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b14e:	895b      	ldrh	r3, [r3, #10]
 800b150:	4619      	mov	r1, r3
 800b152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b154:	4613      	mov	r3, r2
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	3348      	adds	r3, #72	; 0x48
 800b15e:	443b      	add	r3, r7
 800b160:	3b38      	subs	r3, #56	; 0x38
 800b162:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b166:	2b00      	cmp	r3, #0
 800b168:	d011      	beq.n	800b18e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b16a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	f107 000c 	add.w	r0, r7, #12
 800b172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b174:	460b      	mov	r3, r1
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	440b      	add	r3, r1
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	18c1      	adds	r1, r0, r3
 800b17e:	4613      	mov	r3, r2
 800b180:	005b      	lsls	r3, r3, #1
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	3348      	adds	r3, #72	; 0x48
 800b188:	443b      	add	r3, r7
 800b18a:	3b34      	subs	r3, #52	; 0x34
 800b18c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d109      	bne.n	800b1aa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b198:	4613      	mov	r3, r2
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	3348      	adds	r3, #72	; 0x48
 800b1a2:	443b      	add	r3, r7
 800b1a4:	3b34      	subs	r3, #52	; 0x34
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b1aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1b6      	bne.n	800b12a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	891b      	ldrh	r3, [r3, #8]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <low_level_output+0xfc>)
 800b1c4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b1c6:	4a09      	ldr	r2, [pc, #36]	; (800b1ec <low_level_output+0xfc>)
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b1ce:	4a07      	ldr	r2, [pc, #28]	; (800b1ec <low_level_output+0xfc>)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b1d4:	2214      	movs	r2, #20
 800b1d6:	4905      	ldr	r1, [pc, #20]	; (800b1ec <low_level_output+0xfc>)
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <low_level_output+0x100>)
 800b1da:	f7f8 fab1 	bl	8003740 <HAL_ETH_Transmit>

  return errval;
 800b1de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3748      	adds	r7, #72	; 0x48
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200056b4 	.word	0x200056b4
 800b1f0:	20005604 	.word	0x20005604

0800b1f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <low_level_input+0x2c>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d105      	bne.n	800b214 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b208:	f107 030c 	add.w	r3, r7, #12
 800b20c:	4619      	mov	r1, r3
 800b20e:	4805      	ldr	r0, [pc, #20]	; (800b224 <low_level_input+0x30>)
 800b210:	f7f8 fb2a 	bl	8003868 <HAL_ETH_ReadData>
  }

  return p;
 800b214:	68fb      	ldr	r3, [r7, #12]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20005600 	.word	0x20005600
 800b224:	20005604 	.word	0x20005604

0800b228 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff ffdd 	bl	800b1f4 <low_level_input>
 800b23a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	4798      	blx	r3
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f001 fdca 	bl	800cdec <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1ea      	bne.n	800b234 <ethernetif_input+0xc>
}
 800b25e:	bf00      	nop
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <ethernetif_init+0x1c>
 800b276:	4b0e      	ldr	r3, [pc, #56]	; (800b2b0 <ethernetif_init+0x48>)
 800b278:	f240 127b 	movw	r2, #379	; 0x17b
 800b27c:	490d      	ldr	r1, [pc, #52]	; (800b2b4 <ethernetif_init+0x4c>)
 800b27e:	480e      	ldr	r0, [pc, #56]	; (800b2b8 <ethernetif_init+0x50>)
 800b280:	f00b fc10 	bl	8016aa4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2273      	movs	r2, #115	; 0x73
 800b288:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2274      	movs	r2, #116	; 0x74
 800b290:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a09      	ldr	r2, [pc, #36]	; (800b2bc <ethernetif_init+0x54>)
 800b298:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <ethernetif_init+0x58>)
 800b29e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff fe8d 	bl	800afc0 <low_level_init>

  return ERR_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	08017c48 	.word	0x08017c48
 800b2b4:	08017c64 	.word	0x08017c64
 800b2b8:	08017c74 	.word	0x08017c74
 800b2bc:	08013d19 	.word	0x08013d19
 800b2c0:	0800b0f1 	.word	0x0800b0f1

0800b2c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b2d0:	68f9      	ldr	r1, [r7, #12]
 800b2d2:	4807      	ldr	r0, [pc, #28]	; (800b2f0 <pbuf_free_custom+0x2c>)
 800b2d4:	f000 fef0 	bl	800c0b8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b2d8:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <pbuf_free_custom+0x30>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d102      	bne.n	800b2e6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b2e0:	4b04      	ldr	r3, [pc, #16]	; (800b2f4 <pbuf_free_custom+0x30>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	0801a82c 	.word	0x0801a82c
 800b2f4:	20005600 	.word	0x20005600

0800b2f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b2fc:	f7f6 fd80 	bl	8001e00 <HAL_GetTick>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	bd80      	pop	{r7, pc}
	...

0800b308 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08e      	sub	sp, #56	; 0x38
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	605a      	str	r2, [r3, #4]
 800b31a:	609a      	str	r2, [r3, #8]
 800b31c:	60da      	str	r2, [r3, #12]
 800b31e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a56      	ldr	r2, [pc, #344]	; (800b480 <HAL_ETH_MspInit+0x178>)
 800b326:	4293      	cmp	r3, r2
 800b328:	f040 80a6 	bne.w	800b478 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b32c:	4b55      	ldr	r3, [pc, #340]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b330:	4a54      	ldr	r2, [pc, #336]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b336:	6313      	str	r3, [r2, #48]	; 0x30
 800b338:	4b52      	ldr	r3, [pc, #328]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b340:	623b      	str	r3, [r7, #32]
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	4b4f      	ldr	r3, [pc, #316]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b348:	4a4e      	ldr	r2, [pc, #312]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b34a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b34e:	6313      	str	r3, [r2, #48]	; 0x30
 800b350:	4b4c      	ldr	r3, [pc, #304]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b358:	61fb      	str	r3, [r7, #28]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4b49      	ldr	r3, [pc, #292]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b360:	4a48      	ldr	r2, [pc, #288]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b366:	6313      	str	r3, [r2, #48]	; 0x30
 800b368:	4b46      	ldr	r3, [pc, #280]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b374:	4b43      	ldr	r3, [pc, #268]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b378:	4a42      	ldr	r2, [pc, #264]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b37a:	f043 0304 	orr.w	r3, r3, #4
 800b37e:	6313      	str	r3, [r2, #48]	; 0x30
 800b380:	4b40      	ldr	r3, [pc, #256]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	617b      	str	r3, [r7, #20]
 800b38a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b38c:	4b3d      	ldr	r3, [pc, #244]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b390:	4a3c      	ldr	r2, [pc, #240]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b392:	f043 0301 	orr.w	r3, r3, #1
 800b396:	6313      	str	r3, [r2, #48]	; 0x30
 800b398:	4b3a      	ldr	r3, [pc, #232]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	613b      	str	r3, [r7, #16]
 800b3a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3a4:	4b37      	ldr	r3, [pc, #220]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a8:	4a36      	ldr	r2, [pc, #216]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b3aa:	f043 0302 	orr.w	r3, r3, #2
 800b3ae:	6313      	str	r3, [r2, #48]	; 0x30
 800b3b0:	4b34      	ldr	r3, [pc, #208]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3bc:	4b31      	ldr	r3, [pc, #196]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	4a30      	ldr	r2, [pc, #192]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c6:	6313      	str	r3, [r2, #48]	; 0x30
 800b3c8:	4b2e      	ldr	r3, [pc, #184]	; (800b484 <HAL_ETH_MspInit+0x17c>)
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d0:	60bb      	str	r3, [r7, #8]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b3d4:	2332      	movs	r3, #50	; 0x32
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b3e4:	230b      	movs	r3, #11
 800b3e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4826      	ldr	r0, [pc, #152]	; (800b488 <HAL_ETH_MspInit+0x180>)
 800b3f0:	f7f9 fa58 	bl	80048a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b3f4:	2386      	movs	r3, #134	; 0x86
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b400:	2303      	movs	r3, #3
 800b402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b404:	230b      	movs	r3, #11
 800b406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b40c:	4619      	mov	r1, r3
 800b40e:	481f      	ldr	r0, [pc, #124]	; (800b48c <HAL_ETH_MspInit+0x184>)
 800b410:	f7f9 fa48 	bl	80048a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b41a:	2302      	movs	r3, #2
 800b41c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b422:	2303      	movs	r3, #3
 800b424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b426:	230b      	movs	r3, #11
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b42e:	4619      	mov	r1, r3
 800b430:	4817      	ldr	r0, [pc, #92]	; (800b490 <HAL_ETH_MspInit+0x188>)
 800b432:	f7f9 fa37 	bl	80048a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43c:	2302      	movs	r3, #2
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b440:	2300      	movs	r3, #0
 800b442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b444:	2303      	movs	r3, #3
 800b446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b448:	230b      	movs	r3, #11
 800b44a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b450:	4619      	mov	r1, r3
 800b452:	4810      	ldr	r0, [pc, #64]	; (800b494 <HAL_ETH_MspInit+0x18c>)
 800b454:	f7f9 fa26 	bl	80048a4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800b458:	2200      	movs	r2, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	203d      	movs	r0, #61	; 0x3d
 800b45e:	f7f7 fb02 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b462:	203d      	movs	r0, #61	; 0x3d
 800b464:	f7f7 fb1b 	bl	8002a9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800b468:	2200      	movs	r2, #0
 800b46a:	2100      	movs	r1, #0
 800b46c:	203e      	movs	r0, #62	; 0x3e
 800b46e:	f7f7 fafa 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800b472:	203e      	movs	r0, #62	; 0x3e
 800b474:	f7f7 fb13 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b478:	bf00      	nop
 800b47a:	3738      	adds	r7, #56	; 0x38
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	40028000 	.word	0x40028000
 800b484:	40023800 	.word	0x40023800
 800b488:	40020800 	.word	0x40020800
 800b48c:	40020000 	.word	0x40020000
 800b490:	40020400 	.word	0x40020400
 800b494:	40021800 	.word	0x40021800

0800b498 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b49c:	4802      	ldr	r0, [pc, #8]	; (800b4a8 <ETH_PHY_IO_Init+0x10>)
 800b49e:	f7f8 fda7 	bl	8003ff0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20005604 	.word	0x20005604

0800b4ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	af00      	add	r7, sp, #0
  return 0;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	68f9      	ldr	r1, [r7, #12]
 800b4ce:	4807      	ldr	r0, [pc, #28]	; (800b4ec <ETH_PHY_IO_ReadReg+0x30>)
 800b4d0:	f7f8 fbf6 	bl	8003cc0 <HAL_ETH_ReadPHYRegister>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b4da:	f04f 33ff 	mov.w	r3, #4294967295
 800b4de:	e000      	b.n	800b4e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20005604 	.word	0x20005604

0800b4f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	68f9      	ldr	r1, [r7, #12]
 800b502:	4807      	ldr	r0, [pc, #28]	; (800b520 <ETH_PHY_IO_WriteReg+0x30>)
 800b504:	f7f8 fc27 	bl	8003d56 <HAL_ETH_WritePHYRegister>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b50e:	f04f 33ff 	mov.w	r3, #4294967295
 800b512:	e000      	b.n	800b516 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20005604 	.word	0x20005604

0800b524 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b528:	f7f6 fc6a 	bl	8001e00 <HAL_GetTick>
 800b52c:	4603      	mov	r3, r0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	bd80      	pop	{r7, pc}
	...

0800b534 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b0a0      	sub	sp, #128	; 0x80
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b53c:	f107 030c 	add.w	r3, r7, #12
 800b540:	2264      	movs	r2, #100	; 0x64
 800b542:	2100      	movs	r1, #0
 800b544:	4618      	mov	r0, r3
 800b546:	f00b faa5 	bl	8016a94 <memset>
  int32_t PHYLinkState = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b552:	2300      	movs	r3, #0
 800b554:	67bb      	str	r3, [r7, #120]	; 0x78
 800b556:	2300      	movs	r3, #0
 800b558:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b55a:	483a      	ldr	r0, [pc, #232]	; (800b644 <ethernet_link_check_state+0x110>)
 800b55c:	f7f6 fb77 	bl	8001c4e <LAN8742_GetLinkState>
 800b560:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b568:	089b      	lsrs	r3, r3, #2
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00c      	beq.n	800b58e <ethernet_link_check_state+0x5a>
 800b574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b576:	2b01      	cmp	r3, #1
 800b578:	dc09      	bgt.n	800b58e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800b57a:	4833      	ldr	r0, [pc, #204]	; (800b648 <ethernet_link_check_state+0x114>)
 800b57c:	f7f8 f887 	bl	800368e <HAL_ETH_Stop>
    netif_set_down(netif);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 f81d 	bl	800c5c0 <netif_set_down>
    netif_set_link_down(netif);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f001 f880 	bl	800c68c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800b58c:	e055      	b.n	800b63a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d14e      	bne.n	800b63a <ethernet_link_check_state+0x106>
 800b59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	dd4b      	ble.n	800b63a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800b5a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5a4:	3b02      	subs	r3, #2
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d82a      	bhi.n	800b600 <ethernet_link_check_state+0xcc>
 800b5aa:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <ethernet_link_check_state+0x7c>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5d3 	.word	0x0800b5d3
 800b5b8:	0800b5e3 	.word	0x0800b5e3
 800b5bc:	0800b5f3 	.word	0x0800b5f3
      duplex = ETH_FULLDUPLEX_MODE;
 800b5c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b5c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b5d0:	e017      	b.n	800b602 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b5d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b5e0:	e00f      	b.n	800b602 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800b5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5e6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b5f0:	e007      	b.n	800b602 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b5fe:	e000      	b.n	800b602 <ethernet_link_check_state+0xce>
      break;
 800b600:	bf00      	nop
    if(linkchanged)
 800b602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d018      	beq.n	800b63a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b608:	f107 030c 	add.w	r3, r7, #12
 800b60c:	4619      	mov	r1, r3
 800b60e:	480e      	ldr	r0, [pc, #56]	; (800b648 <ethernet_link_check_state+0x114>)
 800b610:	f7f8 fbea 	bl	8003de8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800b618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b61a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b61c:	f107 030c 	add.w	r3, r7, #12
 800b620:	4619      	mov	r1, r3
 800b622:	4809      	ldr	r0, [pc, #36]	; (800b648 <ethernet_link_check_state+0x114>)
 800b624:	f7f8 fcca 	bl	8003fbc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b628:	4807      	ldr	r0, [pc, #28]	; (800b648 <ethernet_link_check_state+0x114>)
 800b62a:	f7f7 ffd1 	bl	80035d0 <HAL_ETH_Start>
      netif_set_up(netif);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 ff5a 	bl	800c4e8 <netif_set_up>
      netif_set_link_up(netif);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fff5 	bl	800c624 <netif_set_link_up>
}
 800b63a:	bf00      	nop
 800b63c:	3780      	adds	r7, #128	; 0x80
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	200056ec 	.word	0x200056ec
 800b648:	20005604 	.word	0x20005604

0800b64c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af02      	add	r7, sp, #8
 800b652:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b654:	4812      	ldr	r0, [pc, #72]	; (800b6a0 <HAL_ETH_RxAllocateCallback+0x54>)
 800b656:	f000 fcc1 	bl	800bfdc <memp_malloc_pool>
 800b65a:	60f8      	str	r0, [r7, #12]
  if (p)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d014      	beq.n	800b68c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f103 0220 	add.w	r2, r3, #32
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a0d      	ldr	r2, [pc, #52]	; (800b6a4 <HAL_ETH_RxAllocateCallback+0x58>)
 800b670:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b67a:	9201      	str	r2, [sp, #4]
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2241      	movs	r2, #65	; 0x41
 800b682:	2100      	movs	r1, #0
 800b684:	2000      	movs	r0, #0
 800b686:	f001 f9f7 	bl	800ca78 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b68a:	e005      	b.n	800b698 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b68c:	4b06      	ldr	r3, [pc, #24]	; (800b6a8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b68e:	2201      	movs	r2, #1
 800b690:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
}
 800b698:	bf00      	nop
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	0801a82c 	.word	0x0801a82c
 800b6a4:	0800b2c5 	.word	0x0800b2c5
 800b6a8:	20005600 	.word	0x20005600

0800b6ac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3b20      	subs	r3, #32
 800b6ca:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	887a      	ldrh	r2, [r7, #2]
 800b6dc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d103      	bne.n	800b6ee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	69fa      	ldr	r2, [r7, #28]
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	e003      	b.n	800b6f6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	69fa      	ldr	r2, [r7, #28]
 800b6f4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	69fa      	ldr	r2, [r7, #28]
 800b6fa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e009      	b.n	800b718 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	891a      	ldrh	r2, [r3, #8]
 800b708:	887b      	ldrh	r3, [r7, #2]
 800b70a:	4413      	add	r3, r2
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1f2      	bne.n	800b704 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b71e:	887b      	ldrh	r3, [r7, #2]
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fc20 	bl	800af68 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b728:	bf00      	nop
 800b72a:	3720      	adds	r7, #32
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b73a:	88fb      	ldrh	r3, [r7, #6]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	b21a      	sxth	r2, r3
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	0a1b      	lsrs	r3, r3, #8
 800b744:	b29b      	uxth	r3, r3
 800b746:	b21b      	sxth	r3, r3
 800b748:	4313      	orrs	r3, r2
 800b74a:	b21b      	sxth	r3, r3
 800b74c:	b29b      	uxth	r3, r3
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	061a      	lsls	r2, r3, #24
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	021b      	lsls	r3, r3, #8
 800b76a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	0a1b      	lsrs	r3, r3, #8
 800b774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b778:	431a      	orrs	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	0e1b      	lsrs	r3, r3, #24
 800b77e:	4313      	orrs	r3, r2
}
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b796:	f000 f8d5 	bl	800b944 <mem_init>
  memp_init();
 800b79a:	f000 fbdb 	bl	800bf54 <memp_init>
  pbuf_init();
  netif_init();
 800b79e:	f000 fcd9 	bl	800c154 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b7a2:	f007 f8f9 	bl	8012998 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b7a6:	f001 fe51 	bl	800d44c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b7aa:	f007 f86b 	bl	8012884 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b7ae:	bf00      	nop
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b7c2:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <ptr_to_mem+0x20>)
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	88fb      	ldrh	r3, [r7, #6]
 800b7c8:	4413      	add	r3, r2
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20005d78 	.word	0x20005d78

0800b7dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b7e4:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <mem_to_ptr+0x20>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	b29b      	uxth	r3, r3
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	20005d78 	.word	0x20005d78

0800b800 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b800:	b590      	push	{r4, r7, lr}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b808:	4b45      	ldr	r3, [pc, #276]	; (800b920 <plug_holes+0x120>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d206      	bcs.n	800b820 <plug_holes+0x20>
 800b812:	4b44      	ldr	r3, [pc, #272]	; (800b924 <plug_holes+0x124>)
 800b814:	f240 12df 	movw	r2, #479	; 0x1df
 800b818:	4943      	ldr	r1, [pc, #268]	; (800b928 <plug_holes+0x128>)
 800b81a:	4844      	ldr	r0, [pc, #272]	; (800b92c <plug_holes+0x12c>)
 800b81c:	f00b f942 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b820:	4b43      	ldr	r3, [pc, #268]	; (800b930 <plug_holes+0x130>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d306      	bcc.n	800b838 <plug_holes+0x38>
 800b82a:	4b3e      	ldr	r3, [pc, #248]	; (800b924 <plug_holes+0x124>)
 800b82c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b830:	4940      	ldr	r1, [pc, #256]	; (800b934 <plug_holes+0x134>)
 800b832:	483e      	ldr	r0, [pc, #248]	; (800b92c <plug_holes+0x12c>)
 800b834:	f00b f936 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	791b      	ldrb	r3, [r3, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <plug_holes+0x4e>
 800b840:	4b38      	ldr	r3, [pc, #224]	; (800b924 <plug_holes+0x124>)
 800b842:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b846:	493c      	ldr	r1, [pc, #240]	; (800b938 <plug_holes+0x138>)
 800b848:	4838      	ldr	r0, [pc, #224]	; (800b92c <plug_holes+0x12c>)
 800b84a:	f00b f92b 	bl	8016aa4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	881b      	ldrh	r3, [r3, #0]
 800b852:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b856:	d906      	bls.n	800b866 <plug_holes+0x66>
 800b858:	4b32      	ldr	r3, [pc, #200]	; (800b924 <plug_holes+0x124>)
 800b85a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b85e:	4937      	ldr	r1, [pc, #220]	; (800b93c <plug_holes+0x13c>)
 800b860:	4832      	ldr	r0, [pc, #200]	; (800b92c <plug_holes+0x12c>)
 800b862:	f00b f91f 	bl	8016aa4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff ffa4 	bl	800b7b8 <ptr_to_mem>
 800b870:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	429a      	cmp	r2, r3
 800b878:	d024      	beq.n	800b8c4 <plug_holes+0xc4>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	791b      	ldrb	r3, [r3, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d120      	bne.n	800b8c4 <plug_holes+0xc4>
 800b882:	4b2b      	ldr	r3, [pc, #172]	; (800b930 <plug_holes+0x130>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d01b      	beq.n	800b8c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b88c:	4b2c      	ldr	r3, [pc, #176]	; (800b940 <plug_holes+0x140>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	429a      	cmp	r2, r3
 800b894:	d102      	bne.n	800b89c <plug_holes+0x9c>
      lfree = mem;
 800b896:	4a2a      	ldr	r2, [pc, #168]	; (800b940 <plug_holes+0x140>)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	881a      	ldrh	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ac:	d00a      	beq.n	800b8c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ff80 	bl	800b7b8 <ptr_to_mem>
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff ff8e 	bl	800b7dc <mem_to_ptr>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	885b      	ldrh	r3, [r3, #2]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff ff75 	bl	800b7b8 <ptr_to_mem>
 800b8ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d01f      	beq.n	800b918 <plug_holes+0x118>
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	791b      	ldrb	r3, [r3, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11b      	bne.n	800b918 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b8e0:	4b17      	ldr	r3, [pc, #92]	; (800b940 <plug_holes+0x140>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d102      	bne.n	800b8f0 <plug_holes+0xf0>
      lfree = pmem;
 800b8ea:	4a15      	ldr	r2, [pc, #84]	; (800b940 <plug_holes+0x140>)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	881a      	ldrh	r2, [r3, #0]
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b900:	d00a      	beq.n	800b918 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff ff56 	bl	800b7b8 <ptr_to_mem>
 800b90c:	4604      	mov	r4, r0
 800b90e:	68b8      	ldr	r0, [r7, #8]
 800b910:	f7ff ff64 	bl	800b7dc <mem_to_ptr>
 800b914:	4603      	mov	r3, r0
 800b916:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b918:	bf00      	nop
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd90      	pop	{r4, r7, pc}
 800b920:	20005d78 	.word	0x20005d78
 800b924:	08017c9c 	.word	0x08017c9c
 800b928:	08017ccc 	.word	0x08017ccc
 800b92c:	08017ce4 	.word	0x08017ce4
 800b930:	20005d7c 	.word	0x20005d7c
 800b934:	08017d0c 	.word	0x08017d0c
 800b938:	08017d28 	.word	0x08017d28
 800b93c:	08017d44 	.word	0x08017d44
 800b940:	20005d80 	.word	0x20005d80

0800b944 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b94a:	4b18      	ldr	r3, [pc, #96]	; (800b9ac <mem_init+0x68>)
 800b94c:	3303      	adds	r3, #3
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	461a      	mov	r2, r3
 800b954:	4b16      	ldr	r3, [pc, #88]	; (800b9b0 <mem_init+0x6c>)
 800b956:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b958:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <mem_init+0x6c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b964:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b972:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b976:	f7ff ff1f 	bl	800b7b8 <ptr_to_mem>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4a0d      	ldr	r2, [pc, #52]	; (800b9b4 <mem_init+0x70>)
 800b97e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <mem_init+0x70>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2201      	movs	r2, #1
 800b986:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <mem_init+0x70>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b990:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <mem_init+0x70>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b99a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b99c:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <mem_init+0x6c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a05      	ldr	r2, [pc, #20]	; (800b9b8 <mem_init+0x74>)
 800b9a2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	20005724 	.word	0x20005724
 800b9b0:	20005d78 	.word	0x20005d78
 800b9b4:	20005d7c 	.word	0x20005d7c
 800b9b8:	20005d80 	.word	0x20005d80

0800b9bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff09 	bl	800b7dc <mem_to_ptr>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fef0 	bl	800b7b8 <ptr_to_mem>
 800b9d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	885b      	ldrh	r3, [r3, #2]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff feea 	bl	800b7b8 <ptr_to_mem>
 800b9e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9ee:	d818      	bhi.n	800ba22 <mem_link_valid+0x66>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	885b      	ldrh	r3, [r3, #2]
 800b9f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9f8:	d813      	bhi.n	800ba22 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9fe:	8afa      	ldrh	r2, [r7, #22]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d004      	beq.n	800ba0e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	8afa      	ldrh	r2, [r7, #22]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d109      	bne.n	800ba22 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba0e:	4b08      	ldr	r3, [pc, #32]	; (800ba30 <mem_link_valid+0x74>)
 800ba10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d006      	beq.n	800ba26 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	885b      	ldrh	r3, [r3, #2]
 800ba1c:	8afa      	ldrh	r2, [r7, #22]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d001      	beq.n	800ba26 <mem_link_valid+0x6a>
    return 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e000      	b.n	800ba28 <mem_link_valid+0x6c>
  }
  return 1;
 800ba26:	2301      	movs	r3, #1
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	20005d7c 	.word	0x20005d7c

0800ba34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d04c      	beq.n	800badc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f003 0303 	and.w	r3, r3, #3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d007      	beq.n	800ba5c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ba4c:	4b25      	ldr	r3, [pc, #148]	; (800bae4 <mem_free+0xb0>)
 800ba4e:	f240 2273 	movw	r2, #627	; 0x273
 800ba52:	4925      	ldr	r1, [pc, #148]	; (800bae8 <mem_free+0xb4>)
 800ba54:	4825      	ldr	r0, [pc, #148]	; (800baec <mem_free+0xb8>)
 800ba56:	f00b f825 	bl	8016aa4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ba5a:	e040      	b.n	800bade <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3b08      	subs	r3, #8
 800ba60:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ba62:	4b23      	ldr	r3, [pc, #140]	; (800baf0 <mem_free+0xbc>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d306      	bcc.n	800ba7a <mem_free+0x46>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f103 020c 	add.w	r2, r3, #12
 800ba72:	4b20      	ldr	r3, [pc, #128]	; (800baf4 <mem_free+0xc0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d907      	bls.n	800ba8a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ba7a:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <mem_free+0xb0>)
 800ba7c:	f240 227f 	movw	r2, #639	; 0x27f
 800ba80:	491d      	ldr	r1, [pc, #116]	; (800baf8 <mem_free+0xc4>)
 800ba82:	481a      	ldr	r0, [pc, #104]	; (800baec <mem_free+0xb8>)
 800ba84:	f00b f80e 	bl	8016aa4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ba88:	e029      	b.n	800bade <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	791b      	ldrb	r3, [r3, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d107      	bne.n	800baa2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ba92:	4b14      	ldr	r3, [pc, #80]	; (800bae4 <mem_free+0xb0>)
 800ba94:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ba98:	4918      	ldr	r1, [pc, #96]	; (800bafc <mem_free+0xc8>)
 800ba9a:	4814      	ldr	r0, [pc, #80]	; (800baec <mem_free+0xb8>)
 800ba9c:	f00b f802 	bl	8016aa4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800baa0:	e01d      	b.n	800bade <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff ff8a 	bl	800b9bc <mem_link_valid>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d107      	bne.n	800babe <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800baae:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <mem_free+0xb0>)
 800bab0:	f240 2295 	movw	r2, #661	; 0x295
 800bab4:	4912      	ldr	r1, [pc, #72]	; (800bb00 <mem_free+0xcc>)
 800bab6:	480d      	ldr	r0, [pc, #52]	; (800baec <mem_free+0xb8>)
 800bab8:	f00a fff4 	bl	8016aa4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800babc:	e00f      	b.n	800bade <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bac4:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <mem_free+0xd0>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d202      	bcs.n	800bad4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bace:	4a0d      	ldr	r2, [pc, #52]	; (800bb04 <mem_free+0xd0>)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff fe93 	bl	800b800 <plug_holes>
 800bada:	e000      	b.n	800bade <mem_free+0xaa>
    return;
 800badc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	08017c9c 	.word	0x08017c9c
 800bae8:	08017d70 	.word	0x08017d70
 800baec:	08017ce4 	.word	0x08017ce4
 800baf0:	20005d78 	.word	0x20005d78
 800baf4:	20005d7c 	.word	0x20005d7c
 800baf8:	08017d94 	.word	0x08017d94
 800bafc:	08017db0 	.word	0x08017db0
 800bb00:	08017dd8 	.word	0x08017dd8
 800bb04:	20005d80 	.word	0x20005d80

0800bb08 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	460b      	mov	r3, r1
 800bb12:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb14:	887b      	ldrh	r3, [r7, #2]
 800bb16:	3303      	adds	r3, #3
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	f023 0303 	bic.w	r3, r3, #3
 800bb1e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb20:	8bfb      	ldrh	r3, [r7, #30]
 800bb22:	2b0b      	cmp	r3, #11
 800bb24:	d801      	bhi.n	800bb2a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb26:	230c      	movs	r3, #12
 800bb28:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb2a:	8bfb      	ldrh	r3, [r7, #30]
 800bb2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb30:	d803      	bhi.n	800bb3a <mem_trim+0x32>
 800bb32:	8bfa      	ldrh	r2, [r7, #30]
 800bb34:	887b      	ldrh	r3, [r7, #2]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d201      	bcs.n	800bb3e <mem_trim+0x36>
    return NULL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e0cc      	b.n	800bcd8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb3e:	4b68      	ldr	r3, [pc, #416]	; (800bce0 <mem_trim+0x1d8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d304      	bcc.n	800bb52 <mem_trim+0x4a>
 800bb48:	4b66      	ldr	r3, [pc, #408]	; (800bce4 <mem_trim+0x1dc>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d306      	bcc.n	800bb60 <mem_trim+0x58>
 800bb52:	4b65      	ldr	r3, [pc, #404]	; (800bce8 <mem_trim+0x1e0>)
 800bb54:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bb58:	4964      	ldr	r1, [pc, #400]	; (800bcec <mem_trim+0x1e4>)
 800bb5a:	4865      	ldr	r0, [pc, #404]	; (800bcf0 <mem_trim+0x1e8>)
 800bb5c:	f00a ffa2 	bl	8016aa4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb60:	4b5f      	ldr	r3, [pc, #380]	; (800bce0 <mem_trim+0x1d8>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d304      	bcc.n	800bb74 <mem_trim+0x6c>
 800bb6a:	4b5e      	ldr	r3, [pc, #376]	; (800bce4 <mem_trim+0x1dc>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d301      	bcc.n	800bb78 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	e0af      	b.n	800bcd8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3b08      	subs	r3, #8
 800bb7c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bb7e:	69b8      	ldr	r0, [r7, #24]
 800bb80:	f7ff fe2c 	bl	800b7dc <mem_to_ptr>
 800bb84:	4603      	mov	r3, r0
 800bb86:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	881a      	ldrh	r2, [r3, #0]
 800bb8c:	8afb      	ldrh	r3, [r7, #22]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	3b08      	subs	r3, #8
 800bb94:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bb96:	8bfa      	ldrh	r2, [r7, #30]
 800bb98:	8abb      	ldrh	r3, [r7, #20]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d906      	bls.n	800bbac <mem_trim+0xa4>
 800bb9e:	4b52      	ldr	r3, [pc, #328]	; (800bce8 <mem_trim+0x1e0>)
 800bba0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bba4:	4953      	ldr	r1, [pc, #332]	; (800bcf4 <mem_trim+0x1ec>)
 800bba6:	4852      	ldr	r0, [pc, #328]	; (800bcf0 <mem_trim+0x1e8>)
 800bba8:	f00a ff7c 	bl	8016aa4 <iprintf>
  if (newsize > size) {
 800bbac:	8bfa      	ldrh	r2, [r7, #30]
 800bbae:	8abb      	ldrh	r3, [r7, #20]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d901      	bls.n	800bbb8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e08f      	b.n	800bcd8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800bbb8:	8bfa      	ldrh	r2, [r7, #30]
 800bbba:	8abb      	ldrh	r3, [r7, #20]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d101      	bne.n	800bbc4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	e089      	b.n	800bcd8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff fdf5 	bl	800b7b8 <ptr_to_mem>
 800bbce:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	791b      	ldrb	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d13f      	bne.n	800bc58 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbe0:	d106      	bne.n	800bbf0 <mem_trim+0xe8>
 800bbe2:	4b41      	ldr	r3, [pc, #260]	; (800bce8 <mem_trim+0x1e0>)
 800bbe4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bbe8:	4943      	ldr	r1, [pc, #268]	; (800bcf8 <mem_trim+0x1f0>)
 800bbea:	4841      	ldr	r0, [pc, #260]	; (800bcf0 <mem_trim+0x1e8>)
 800bbec:	f00a ff5a 	bl	8016aa4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bbf6:	8afa      	ldrh	r2, [r7, #22]
 800bbf8:	8bfb      	ldrh	r3, [r7, #30]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3308      	adds	r3, #8
 800bc00:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc02:	4b3e      	ldr	r3, [pc, #248]	; (800bcfc <mem_trim+0x1f4>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d106      	bne.n	800bc1a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800bc0c:	89fb      	ldrh	r3, [r7, #14]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7ff fdd2 	bl	800b7b8 <ptr_to_mem>
 800bc14:	4603      	mov	r3, r0
 800bc16:	4a39      	ldr	r2, [pc, #228]	; (800bcfc <mem_trim+0x1f4>)
 800bc18:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc1a:	89fb      	ldrh	r3, [r7, #14]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fdcb 	bl	800b7b8 <ptr_to_mem>
 800bc22:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2200      	movs	r2, #0
 800bc28:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	89ba      	ldrh	r2, [r7, #12]
 800bc2e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	8afa      	ldrh	r2, [r7, #22]
 800bc34:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	89fa      	ldrh	r2, [r7, #14]
 800bc3a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc44:	d047      	beq.n	800bcd6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff fdb4 	bl	800b7b8 <ptr_to_mem>
 800bc50:	4602      	mov	r2, r0
 800bc52:	89fb      	ldrh	r3, [r7, #14]
 800bc54:	8053      	strh	r3, [r2, #2]
 800bc56:	e03e      	b.n	800bcd6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bc58:	8bfb      	ldrh	r3, [r7, #30]
 800bc5a:	f103 0214 	add.w	r2, r3, #20
 800bc5e:	8abb      	ldrh	r3, [r7, #20]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d838      	bhi.n	800bcd6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc64:	8afa      	ldrh	r2, [r7, #22]
 800bc66:	8bfb      	ldrh	r3, [r7, #30]
 800bc68:	4413      	add	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc78:	d106      	bne.n	800bc88 <mem_trim+0x180>
 800bc7a:	4b1b      	ldr	r3, [pc, #108]	; (800bce8 <mem_trim+0x1e0>)
 800bc7c:	f240 3216 	movw	r2, #790	; 0x316
 800bc80:	491d      	ldr	r1, [pc, #116]	; (800bcf8 <mem_trim+0x1f0>)
 800bc82:	481b      	ldr	r0, [pc, #108]	; (800bcf0 <mem_trim+0x1e8>)
 800bc84:	f00a ff0e 	bl	8016aa4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bc88:	89fb      	ldrh	r3, [r7, #14]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fd94 	bl	800b7b8 <ptr_to_mem>
 800bc90:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bc92:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <mem_trim+0x1f4>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d202      	bcs.n	800bca2 <mem_trim+0x19a>
      lfree = mem2;
 800bc9c:	4a17      	ldr	r2, [pc, #92]	; (800bcfc <mem_trim+0x1f4>)
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2200      	movs	r2, #0
 800bca6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	881a      	ldrh	r2, [r3, #0]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	8afa      	ldrh	r2, [r7, #22]
 800bcb4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	89fa      	ldrh	r2, [r7, #14]
 800bcba:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcc4:	d007      	beq.n	800bcd6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff fd74 	bl	800b7b8 <ptr_to_mem>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	89fb      	ldrh	r3, [r7, #14]
 800bcd4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800bcd6:	687b      	ldr	r3, [r7, #4]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3720      	adds	r7, #32
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20005d78 	.word	0x20005d78
 800bce4:	20005d7c 	.word	0x20005d7c
 800bce8:	08017c9c 	.word	0x08017c9c
 800bcec:	08017e0c 	.word	0x08017e0c
 800bcf0:	08017ce4 	.word	0x08017ce4
 800bcf4:	08017e24 	.word	0x08017e24
 800bcf8:	08017e44 	.word	0x08017e44
 800bcfc:	20005d80 	.word	0x20005d80

0800bd00 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <mem_malloc+0x14>
    return NULL;
 800bd10:	2300      	movs	r3, #0
 800bd12:	e0d9      	b.n	800bec8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd14:	88fb      	ldrh	r3, [r7, #6]
 800bd16:	3303      	adds	r3, #3
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	f023 0303 	bic.w	r3, r3, #3
 800bd1e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd20:	8bbb      	ldrh	r3, [r7, #28]
 800bd22:	2b0b      	cmp	r3, #11
 800bd24:	d801      	bhi.n	800bd2a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd26:	230c      	movs	r3, #12
 800bd28:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd2a:	8bbb      	ldrh	r3, [r7, #28]
 800bd2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd30:	d803      	bhi.n	800bd3a <mem_malloc+0x3a>
 800bd32:	8bba      	ldrh	r2, [r7, #28]
 800bd34:	88fb      	ldrh	r3, [r7, #6]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d201      	bcs.n	800bd3e <mem_malloc+0x3e>
    return NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e0c4      	b.n	800bec8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd3e:	4b64      	ldr	r3, [pc, #400]	; (800bed0 <mem_malloc+0x1d0>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff fd4a 	bl	800b7dc <mem_to_ptr>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	83fb      	strh	r3, [r7, #30]
 800bd4c:	e0b4      	b.n	800beb8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bd4e:	8bfb      	ldrh	r3, [r7, #30]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff fd31 	bl	800b7b8 <ptr_to_mem>
 800bd56:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	791b      	ldrb	r3, [r3, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f040 80a4 	bne.w	800beaa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	8bfb      	ldrh	r3, [r7, #30]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	f1a3 0208 	sub.w	r2, r3, #8
 800bd70:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bd72:	429a      	cmp	r2, r3
 800bd74:	f0c0 8099 	bcc.w	800beaa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	8bfb      	ldrh	r3, [r7, #30]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	f1a3 0208 	sub.w	r2, r3, #8
 800bd86:	8bbb      	ldrh	r3, [r7, #28]
 800bd88:	3314      	adds	r3, #20
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d333      	bcc.n	800bdf6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bd8e:	8bfa      	ldrh	r2, [r7, #30]
 800bd90:	8bbb      	ldrh	r3, [r7, #28]
 800bd92:	4413      	add	r3, r2
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	3308      	adds	r3, #8
 800bd98:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bd9a:	8a7b      	ldrh	r3, [r7, #18]
 800bd9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bda0:	d106      	bne.n	800bdb0 <mem_malloc+0xb0>
 800bda2:	4b4c      	ldr	r3, [pc, #304]	; (800bed4 <mem_malloc+0x1d4>)
 800bda4:	f240 3287 	movw	r2, #903	; 0x387
 800bda8:	494b      	ldr	r1, [pc, #300]	; (800bed8 <mem_malloc+0x1d8>)
 800bdaa:	484c      	ldr	r0, [pc, #304]	; (800bedc <mem_malloc+0x1dc>)
 800bdac:	f00a fe7a 	bl	8016aa4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bdb0:	8a7b      	ldrh	r3, [r7, #18]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fd00 	bl	800b7b8 <ptr_to_mem>
 800bdb8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	881a      	ldrh	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8bfa      	ldrh	r2, [r7, #30]
 800bdcc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	8a7a      	ldrh	r2, [r7, #18]
 800bdd2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bde2:	d00b      	beq.n	800bdfc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff fce5 	bl	800b7b8 <ptr_to_mem>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	8a7b      	ldrh	r3, [r7, #18]
 800bdf2:	8053      	strh	r3, [r2, #2]
 800bdf4:	e002      	b.n	800bdfc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bdfc:	4b34      	ldr	r3, [pc, #208]	; (800bed0 <mem_malloc+0x1d0>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	429a      	cmp	r2, r3
 800be04:	d127      	bne.n	800be56 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800be06:	4b32      	ldr	r3, [pc, #200]	; (800bed0 <mem_malloc+0x1d0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be0c:	e005      	b.n	800be1a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff fcd0 	bl	800b7b8 <ptr_to_mem>
 800be18:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	791b      	ldrb	r3, [r3, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d004      	beq.n	800be2c <mem_malloc+0x12c>
 800be22:	4b2f      	ldr	r3, [pc, #188]	; (800bee0 <mem_malloc+0x1e0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d1f0      	bne.n	800be0e <mem_malloc+0x10e>
          }
          lfree = cur;
 800be2c:	4a28      	ldr	r2, [pc, #160]	; (800bed0 <mem_malloc+0x1d0>)
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be32:	4b27      	ldr	r3, [pc, #156]	; (800bed0 <mem_malloc+0x1d0>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <mem_malloc+0x1e0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d00b      	beq.n	800be56 <mem_malloc+0x156>
 800be3e:	4b24      	ldr	r3, [pc, #144]	; (800bed0 <mem_malloc+0x1d0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	791b      	ldrb	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d006      	beq.n	800be56 <mem_malloc+0x156>
 800be48:	4b22      	ldr	r3, [pc, #136]	; (800bed4 <mem_malloc+0x1d4>)
 800be4a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800be4e:	4925      	ldr	r1, [pc, #148]	; (800bee4 <mem_malloc+0x1e4>)
 800be50:	4822      	ldr	r0, [pc, #136]	; (800bedc <mem_malloc+0x1dc>)
 800be52:	f00a fe27 	bl	8016aa4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800be56:	8bba      	ldrh	r2, [r7, #28]
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4413      	add	r3, r2
 800be5c:	3308      	adds	r3, #8
 800be5e:	4a20      	ldr	r2, [pc, #128]	; (800bee0 <mem_malloc+0x1e0>)
 800be60:	6812      	ldr	r2, [r2, #0]
 800be62:	4293      	cmp	r3, r2
 800be64:	d906      	bls.n	800be74 <mem_malloc+0x174>
 800be66:	4b1b      	ldr	r3, [pc, #108]	; (800bed4 <mem_malloc+0x1d4>)
 800be68:	f240 32b9 	movw	r2, #953	; 0x3b9
 800be6c:	491e      	ldr	r1, [pc, #120]	; (800bee8 <mem_malloc+0x1e8>)
 800be6e:	481b      	ldr	r0, [pc, #108]	; (800bedc <mem_malloc+0x1dc>)
 800be70:	f00a fe18 	bl	8016aa4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	f003 0303 	and.w	r3, r3, #3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d006      	beq.n	800be8c <mem_malloc+0x18c>
 800be7e:	4b15      	ldr	r3, [pc, #84]	; (800bed4 <mem_malloc+0x1d4>)
 800be80:	f240 32bb 	movw	r2, #955	; 0x3bb
 800be84:	4919      	ldr	r1, [pc, #100]	; (800beec <mem_malloc+0x1ec>)
 800be86:	4815      	ldr	r0, [pc, #84]	; (800bedc <mem_malloc+0x1dc>)
 800be88:	f00a fe0c 	bl	8016aa4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	f003 0303 	and.w	r3, r3, #3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d006      	beq.n	800bea4 <mem_malloc+0x1a4>
 800be96:	4b0f      	ldr	r3, [pc, #60]	; (800bed4 <mem_malloc+0x1d4>)
 800be98:	f240 32bd 	movw	r2, #957	; 0x3bd
 800be9c:	4914      	ldr	r1, [pc, #80]	; (800bef0 <mem_malloc+0x1f0>)
 800be9e:	480f      	ldr	r0, [pc, #60]	; (800bedc <mem_malloc+0x1dc>)
 800bea0:	f00a fe00 	bl	8016aa4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	3308      	adds	r3, #8
 800bea8:	e00e      	b.n	800bec8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800beaa:	8bfb      	ldrh	r3, [r7, #30]
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff fc83 	bl	800b7b8 <ptr_to_mem>
 800beb2:	4603      	mov	r3, r0
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800beb8:	8bfa      	ldrh	r2, [r7, #30]
 800beba:	8bbb      	ldrh	r3, [r7, #28]
 800bebc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bec0:	429a      	cmp	r2, r3
 800bec2:	f4ff af44 	bcc.w	800bd4e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20005d80 	.word	0x20005d80
 800bed4:	08017c9c 	.word	0x08017c9c
 800bed8:	08017e44 	.word	0x08017e44
 800bedc:	08017ce4 	.word	0x08017ce4
 800bee0:	20005d7c 	.word	0x20005d7c
 800bee4:	08017e58 	.word	0x08017e58
 800bee8:	08017e74 	.word	0x08017e74
 800beec:	08017ea4 	.word	0x08017ea4
 800bef0:	08017ed4 	.word	0x08017ed4

0800bef4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	3303      	adds	r3, #3
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	e011      	b.n	800bf3a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	4413      	add	r3, r2
 800bf32:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3301      	adds	r3, #1
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	885b      	ldrh	r3, [r3, #2]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4293      	cmp	r3, r2
 800bf44:	dbe7      	blt.n	800bf16 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bf46:	bf00      	nop
 800bf48:	bf00      	nop
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	80fb      	strh	r3, [r7, #6]
 800bf5e:	e009      	b.n	800bf74 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bf60:	88fb      	ldrh	r3, [r7, #6]
 800bf62:	4a08      	ldr	r2, [pc, #32]	; (800bf84 <memp_init+0x30>)
 800bf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff ffc3 	bl	800bef4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf6e:	88fb      	ldrh	r3, [r7, #6]
 800bf70:	3301      	adds	r3, #1
 800bf72:	80fb      	strh	r3, [r7, #6]
 800bf74:	88fb      	ldrh	r3, [r7, #6]
 800bf76:	2b08      	cmp	r3, #8
 800bf78:	d9f2      	bls.n	800bf60 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	0801a8a4 	.word	0x0801a8a4

0800bf88 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d012      	beq.n	800bfc4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	6812      	ldr	r2, [r2, #0]
 800bfa6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f003 0303 	and.w	r3, r3, #3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d006      	beq.n	800bfc0 <do_memp_malloc_pool+0x38>
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <do_memp_malloc_pool+0x48>)
 800bfb4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bfb8:	4906      	ldr	r1, [pc, #24]	; (800bfd4 <do_memp_malloc_pool+0x4c>)
 800bfba:	4807      	ldr	r0, [pc, #28]	; (800bfd8 <do_memp_malloc_pool+0x50>)
 800bfbc:	f00a fd72 	bl	8016aa4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	e000      	b.n	800bfc6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	08017ef8 	.word	0x08017ef8
 800bfd4:	08017f28 	.word	0x08017f28
 800bfd8:	08017f4c 	.word	0x08017f4c

0800bfdc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <memp_malloc_pool+0x1c>
 800bfea:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <memp_malloc_pool+0x38>)
 800bfec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bff0:	4909      	ldr	r1, [pc, #36]	; (800c018 <memp_malloc_pool+0x3c>)
 800bff2:	480a      	ldr	r0, [pc, #40]	; (800c01c <memp_malloc_pool+0x40>)
 800bff4:	f00a fd56 	bl	8016aa4 <iprintf>
  if (desc == NULL) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <memp_malloc_pool+0x26>
    return NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	e003      	b.n	800c00a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff ffc0 	bl	800bf88 <do_memp_malloc_pool>
 800c008:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	08017ef8 	.word	0x08017ef8
 800c018:	08017f74 	.word	0x08017f74
 800c01c:	08017f4c 	.word	0x08017f4c

0800c020 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	2b08      	cmp	r3, #8
 800c02e:	d908      	bls.n	800c042 <memp_malloc+0x22>
 800c030:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <memp_malloc+0x3c>)
 800c032:	f240 1257 	movw	r2, #343	; 0x157
 800c036:	490a      	ldr	r1, [pc, #40]	; (800c060 <memp_malloc+0x40>)
 800c038:	480a      	ldr	r0, [pc, #40]	; (800c064 <memp_malloc+0x44>)
 800c03a:	f00a fd33 	bl	8016aa4 <iprintf>
 800c03e:	2300      	movs	r3, #0
 800c040:	e008      	b.n	800c054 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	4a08      	ldr	r2, [pc, #32]	; (800c068 <memp_malloc+0x48>)
 800c046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff ff9c 	bl	800bf88 <do_memp_malloc_pool>
 800c050:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c052:	68fb      	ldr	r3, [r7, #12]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	08017ef8 	.word	0x08017ef8
 800c060:	08017f88 	.word	0x08017f88
 800c064:	08017f4c 	.word	0x08017f4c
 800c068:	0801a8a4 	.word	0x0801a8a4

0800c06c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <do_memp_free_pool+0x22>
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <do_memp_free_pool+0x40>)
 800c082:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c086:	490a      	ldr	r1, [pc, #40]	; (800c0b0 <do_memp_free_pool+0x44>)
 800c088:	480a      	ldr	r0, [pc, #40]	; (800c0b4 <do_memp_free_pool+0x48>)
 800c08a:	f00a fd0b 	bl	8016aa4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c0a4:	bf00      	nop
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	08017ef8 	.word	0x08017ef8
 800c0b0:	08017fa8 	.word	0x08017fa8
 800c0b4:	08017f4c 	.word	0x08017f4c

0800c0b8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d106      	bne.n	800c0d6 <memp_free_pool+0x1e>
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <memp_free_pool+0x3c>)
 800c0ca:	f240 1295 	movw	r2, #405	; 0x195
 800c0ce:	490a      	ldr	r1, [pc, #40]	; (800c0f8 <memp_free_pool+0x40>)
 800c0d0:	480a      	ldr	r0, [pc, #40]	; (800c0fc <memp_free_pool+0x44>)
 800c0d2:	f00a fce7 	bl	8016aa4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <memp_free_pool+0x34>
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d004      	beq.n	800c0ec <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7ff ffc1 	bl	800c06c <do_memp_free_pool>
 800c0ea:	e000      	b.n	800c0ee <memp_free_pool+0x36>
    return;
 800c0ec:	bf00      	nop
}
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	08017ef8 	.word	0x08017ef8
 800c0f8:	08017f74 	.word	0x08017f74
 800c0fc:	08017f4c 	.word	0x08017f4c

0800c100 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	6039      	str	r1, [r7, #0]
 800c10a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	2b08      	cmp	r3, #8
 800c110:	d907      	bls.n	800c122 <memp_free+0x22>
 800c112:	4b0c      	ldr	r3, [pc, #48]	; (800c144 <memp_free+0x44>)
 800c114:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c118:	490b      	ldr	r1, [pc, #44]	; (800c148 <memp_free+0x48>)
 800c11a:	480c      	ldr	r0, [pc, #48]	; (800c14c <memp_free+0x4c>)
 800c11c:	f00a fcc2 	bl	8016aa4 <iprintf>
 800c120:	e00c      	b.n	800c13c <memp_free+0x3c>

  if (mem == NULL) {
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d008      	beq.n	800c13a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	4a09      	ldr	r2, [pc, #36]	; (800c150 <memp_free+0x50>)
 800c12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff ff9a 	bl	800c06c <do_memp_free_pool>
 800c138:	e000      	b.n	800c13c <memp_free+0x3c>
    return;
 800c13a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	08017ef8 	.word	0x08017ef8
 800c148:	08017fc8 	.word	0x08017fc8
 800c14c:	08017f4c 	.word	0x08017f4c
 800c150:	0801a8a4 	.word	0x0801a8a4

0800c154 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c154:	b480      	push	{r7}
 800c156:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c158:	bf00      	nop
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
	...

0800c164 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d108      	bne.n	800c18a <netif_add+0x26>
 800c178:	4b57      	ldr	r3, [pc, #348]	; (800c2d8 <netif_add+0x174>)
 800c17a:	f240 1227 	movw	r2, #295	; 0x127
 800c17e:	4957      	ldr	r1, [pc, #348]	; (800c2dc <netif_add+0x178>)
 800c180:	4857      	ldr	r0, [pc, #348]	; (800c2e0 <netif_add+0x17c>)
 800c182:	f00a fc8f 	bl	8016aa4 <iprintf>
 800c186:	2300      	movs	r3, #0
 800c188:	e0a2      	b.n	800c2d0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d108      	bne.n	800c1a2 <netif_add+0x3e>
 800c190:	4b51      	ldr	r3, [pc, #324]	; (800c2d8 <netif_add+0x174>)
 800c192:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c196:	4953      	ldr	r1, [pc, #332]	; (800c2e4 <netif_add+0x180>)
 800c198:	4851      	ldr	r0, [pc, #324]	; (800c2e0 <netif_add+0x17c>)
 800c19a:	f00a fc83 	bl	8016aa4 <iprintf>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e096      	b.n	800c2d0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c1a8:	4b4f      	ldr	r3, [pc, #316]	; (800c2e8 <netif_add+0x184>)
 800c1aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c1b2:	4b4d      	ldr	r3, [pc, #308]	; (800c2e8 <netif_add+0x184>)
 800c1b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c1bc:	4b4a      	ldr	r3, [pc, #296]	; (800c2e8 <netif_add+0x184>)
 800c1be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	4a45      	ldr	r2, [pc, #276]	; (800c2ec <netif_add+0x188>)
 800c1d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6a3a      	ldr	r2, [r7, #32]
 800c1f0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c1f2:	4b3f      	ldr	r3, [pc, #252]	; (800c2f0 <netif_add+0x18c>)
 800c1f4:	781a      	ldrb	r2, [r3, #0]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c200:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f000 f913 	bl	800c434 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	4798      	blx	r3
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <netif_add+0xba>
    return NULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	e058      	b.n	800c2d0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c224:	2bff      	cmp	r3, #255	; 0xff
 800c226:	d103      	bne.n	800c230 <netif_add+0xcc>
        netif->num = 0;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c234:	4b2f      	ldr	r3, [pc, #188]	; (800c2f4 <netif_add+0x190>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	e02b      	b.n	800c294 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	429a      	cmp	r2, r3
 800c242:	d106      	bne.n	800c252 <netif_add+0xee>
 800c244:	4b24      	ldr	r3, [pc, #144]	; (800c2d8 <netif_add+0x174>)
 800c246:	f240 128b 	movw	r2, #395	; 0x18b
 800c24a:	492b      	ldr	r1, [pc, #172]	; (800c2f8 <netif_add+0x194>)
 800c24c:	4824      	ldr	r0, [pc, #144]	; (800c2e0 <netif_add+0x17c>)
 800c24e:	f00a fc29 	bl	8016aa4 <iprintf>
        num_netifs++;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	3301      	adds	r3, #1
 800c256:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	2bff      	cmp	r3, #255	; 0xff
 800c25c:	dd06      	ble.n	800c26c <netif_add+0x108>
 800c25e:	4b1e      	ldr	r3, [pc, #120]	; (800c2d8 <netif_add+0x174>)
 800c260:	f240 128d 	movw	r2, #397	; 0x18d
 800c264:	4925      	ldr	r1, [pc, #148]	; (800c2fc <netif_add+0x198>)
 800c266:	481e      	ldr	r0, [pc, #120]	; (800c2e0 <netif_add+0x17c>)
 800c268:	f00a fc1c 	bl	8016aa4 <iprintf>
        if (netif2->num == netif->num) {
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c278:	429a      	cmp	r2, r3
 800c27a:	d108      	bne.n	800c28e <netif_add+0x12a>
          netif->num++;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c282:	3301      	adds	r3, #1
 800c284:	b2da      	uxtb	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c28c:	e005      	b.n	800c29a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1d0      	bne.n	800c23c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1be      	bne.n	800c21e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2a6:	2bfe      	cmp	r3, #254	; 0xfe
 800c2a8:	d103      	bne.n	800c2b2 <netif_add+0x14e>
    netif_num = 0;
 800c2aa:	4b11      	ldr	r3, [pc, #68]	; (800c2f0 <netif_add+0x18c>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	701a      	strb	r2, [r3, #0]
 800c2b0:	e006      	b.n	800c2c0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <netif_add+0x18c>)
 800c2be:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <netif_add+0x190>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c2c8:	4a0a      	ldr	r2, [pc, #40]	; (800c2f4 <netif_add+0x190>)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	08017fe4 	.word	0x08017fe4
 800c2dc:	08018078 	.word	0x08018078
 800c2e0:	08018034 	.word	0x08018034
 800c2e4:	08018094 	.word	0x08018094
 800c2e8:	0801a908 	.word	0x0801a908
 800c2ec:	0800c70f 	.word	0x0800c70f
 800c2f0:	20008c78 	.word	0x20008c78
 800c2f4:	20008c70 	.word	0x20008c70
 800c2f8:	080180b8 	.word	0x080180b8
 800c2fc:	080180cc 	.word	0x080180cc

0800c300 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f002 fbe5 	bl	800eadc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f007 f883 	bl	8013420 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d106      	bne.n	800c344 <netif_do_set_ipaddr+0x20>
 800c336:	4b1d      	ldr	r3, [pc, #116]	; (800c3ac <netif_do_set_ipaddr+0x88>)
 800c338:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c33c:	491c      	ldr	r1, [pc, #112]	; (800c3b0 <netif_do_set_ipaddr+0x8c>)
 800c33e:	481d      	ldr	r0, [pc, #116]	; (800c3b4 <netif_do_set_ipaddr+0x90>)
 800c340:	f00a fbb0 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d106      	bne.n	800c358 <netif_do_set_ipaddr+0x34>
 800c34a:	4b18      	ldr	r3, [pc, #96]	; (800c3ac <netif_do_set_ipaddr+0x88>)
 800c34c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c350:	4917      	ldr	r1, [pc, #92]	; (800c3b0 <netif_do_set_ipaddr+0x8c>)
 800c352:	4818      	ldr	r0, [pc, #96]	; (800c3b4 <netif_do_set_ipaddr+0x90>)
 800c354:	f00a fba6 	bl	8016aa4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3304      	adds	r3, #4
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	429a      	cmp	r2, r3
 800c364:	d01c      	beq.n	800c3a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3304      	adds	r3, #4
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c376:	f107 0314 	add.w	r3, r7, #20
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff ffbf 	bl	800c300 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <netif_do_set_ipaddr+0x6a>
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	e000      	b.n	800c390 <netif_do_set_ipaddr+0x6c>
 800c38e:	2300      	movs	r3, #0
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c394:	2101      	movs	r1, #1
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f000 f8d2 	bl	800c540 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c39c:	2301      	movs	r3, #1
 800c39e:	e000      	b.n	800c3a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	08017fe4 	.word	0x08017fe4
 800c3b0:	080180fc 	.word	0x080180fc
 800c3b4:	08018034 	.word	0x08018034

0800c3b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d00a      	beq.n	800c3e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <netif_do_set_netmask+0x26>
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	e000      	b.n	800c3e0 <netif_do_set_netmask+0x28>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e000      	b.n	800c3ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b085      	sub	sp, #20
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	330c      	adds	r3, #12
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d00a      	beq.n	800c426 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d002      	beq.n	800c41c <netif_do_set_gw+0x26>
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	e000      	b.n	800c41e <netif_do_set_gw+0x28>
 800c41c:	2300      	movs	r3, #0
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b088      	sub	sp, #32
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c446:	2300      	movs	r3, #0
 800c448:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c450:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <netif_set_addr+0x90>)
 800c452:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c45a:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <netif_set_addr+0x90>)
 800c45c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c464:	4b17      	ldr	r3, [pc, #92]	; (800c4c4 <netif_set_addr+0x90>)
 800c466:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <netif_set_addr+0x42>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <netif_set_addr+0x46>
 800c476:	2301      	movs	r3, #1
 800c478:	e000      	b.n	800c47c <netif_set_addr+0x48>
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d006      	beq.n	800c492 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c484:	f107 0310 	add.w	r3, r7, #16
 800c488:	461a      	mov	r2, r3
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f7ff ff49 	bl	800c324 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f7ff ff8e 	bl	800c3b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c49c:	69ba      	ldr	r2, [r7, #24]
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f7ff ffa8 	bl	800c3f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d106      	bne.n	800c4ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4ac:	f107 0310 	add.w	r3, r7, #16
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	68b9      	ldr	r1, [r7, #8]
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f7ff ff35 	bl	800c324 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c4ba:	bf00      	nop
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	0801a908 	.word	0x0801a908

0800c4c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4d0:	4a04      	ldr	r2, [pc, #16]	; (800c4e4 <netif_set_default+0x1c>)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c4d6:	bf00      	nop
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	20008c74 	.word	0x20008c74

0800c4e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d107      	bne.n	800c506 <netif_set_up+0x1e>
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <netif_set_up+0x4c>)
 800c4f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c4fc:	490e      	ldr	r1, [pc, #56]	; (800c538 <netif_set_up+0x50>)
 800c4fe:	480f      	ldr	r0, [pc, #60]	; (800c53c <netif_set_up+0x54>)
 800c500:	f00a fad0 	bl	8016aa4 <iprintf>
 800c504:	e013      	b.n	800c52e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10c      	bne.n	800c52e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c51a:	f043 0301 	orr.w	r3, r3, #1
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c526:	2103      	movs	r1, #3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f809 	bl	800c540 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	08017fe4 	.word	0x08017fe4
 800c538:	0801816c 	.word	0x0801816c
 800c53c:	08018034 	.word	0x08018034

0800c540 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d106      	bne.n	800c560 <netif_issue_reports+0x20>
 800c552:	4b18      	ldr	r3, [pc, #96]	; (800c5b4 <netif_issue_reports+0x74>)
 800c554:	f240 326d 	movw	r2, #877	; 0x36d
 800c558:	4917      	ldr	r1, [pc, #92]	; (800c5b8 <netif_issue_reports+0x78>)
 800c55a:	4818      	ldr	r0, [pc, #96]	; (800c5bc <netif_issue_reports+0x7c>)
 800c55c:	f00a faa2 	bl	8016aa4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c566:	f003 0304 	and.w	r3, r3, #4
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d01e      	beq.n	800c5ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c574:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d017      	beq.n	800c5ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c57c:	78fb      	ldrb	r3, [r7, #3]
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	d013      	beq.n	800c5ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3304      	adds	r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00e      	beq.n	800c5ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c596:	f003 0308 	and.w	r3, r3, #8
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d007      	beq.n	800c5ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f007 fea5 	bl	80142f4 <etharp_request>
 800c5aa:	e000      	b.n	800c5ae <netif_issue_reports+0x6e>
    return;
 800c5ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	08017fe4 	.word	0x08017fe4
 800c5b8:	08018188 	.word	0x08018188
 800c5bc:	08018034 	.word	0x08018034

0800c5c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d107      	bne.n	800c5de <netif_set_down+0x1e>
 800c5ce:	4b12      	ldr	r3, [pc, #72]	; (800c618 <netif_set_down+0x58>)
 800c5d0:	f240 329b 	movw	r2, #923	; 0x39b
 800c5d4:	4911      	ldr	r1, [pc, #68]	; (800c61c <netif_set_down+0x5c>)
 800c5d6:	4812      	ldr	r0, [pc, #72]	; (800c620 <netif_set_down+0x60>)
 800c5d8:	f00a fa64 	bl	8016aa4 <iprintf>
 800c5dc:	e019      	b.n	800c612 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d012      	beq.n	800c612 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5f2:	f023 0301 	bic.w	r3, r3, #1
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c604:	f003 0308 	and.w	r3, r3, #8
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f007 fa2f 	bl	8013a70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	08017fe4 	.word	0x08017fe4
 800c61c:	080181ac 	.word	0x080181ac
 800c620:	08018034 	.word	0x08018034

0800c624 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d107      	bne.n	800c642 <netif_set_link_up+0x1e>
 800c632:	4b13      	ldr	r3, [pc, #76]	; (800c680 <netif_set_link_up+0x5c>)
 800c634:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c638:	4912      	ldr	r1, [pc, #72]	; (800c684 <netif_set_link_up+0x60>)
 800c63a:	4813      	ldr	r0, [pc, #76]	; (800c688 <netif_set_link_up+0x64>)
 800c63c:	f00a fa32 	bl	8016aa4 <iprintf>
 800c640:	e01b      	b.n	800c67a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c648:	f003 0304 	and.w	r3, r3, #4
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d114      	bne.n	800c67a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c656:	f043 0304 	orr.w	r3, r3, #4
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c662:	2103      	movs	r1, #3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7ff ff6b 	bl	800c540 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <netif_set_link_up+0x56>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	69db      	ldr	r3, [r3, #28]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	08017fe4 	.word	0x08017fe4
 800c684:	080181cc 	.word	0x080181cc
 800c688:	08018034 	.word	0x08018034

0800c68c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d107      	bne.n	800c6aa <netif_set_link_down+0x1e>
 800c69a:	4b11      	ldr	r3, [pc, #68]	; (800c6e0 <netif_set_link_down+0x54>)
 800c69c:	f240 4206 	movw	r2, #1030	; 0x406
 800c6a0:	4910      	ldr	r1, [pc, #64]	; (800c6e4 <netif_set_link_down+0x58>)
 800c6a2:	4811      	ldr	r0, [pc, #68]	; (800c6e8 <netif_set_link_down+0x5c>)
 800c6a4:	f00a f9fe 	bl	8016aa4 <iprintf>
 800c6a8:	e017      	b.n	800c6da <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6b0:	f003 0304 	and.w	r3, r3, #4
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d010      	beq.n	800c6da <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6be:	f023 0304 	bic.w	r3, r3, #4
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <netif_set_link_down+0x4e>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69db      	ldr	r3, [r3, #28]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	08017fe4 	.word	0x08017fe4
 800c6e4:	080181f0 	.word	0x080181f0
 800c6e8:	08018034 	.word	0x08018034

0800c6ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	61da      	str	r2, [r3, #28]
  }
}
 800c702:	bf00      	nop
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c70e:	b480      	push	{r7}
 800c710:	b085      	sub	sp, #20
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	60b9      	str	r1, [r7, #8]
 800c718:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c71a:	f06f 030b 	mvn.w	r3, #11
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
	...

0800c72c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d013      	beq.n	800c764 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <netif_get_by_index+0x48>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60fb      	str	r3, [r7, #12]
 800c742:	e00c      	b.n	800c75e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c74a:	3301      	adds	r3, #1
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	79fa      	ldrb	r2, [r7, #7]
 800c750:	429a      	cmp	r2, r3
 800c752:	d101      	bne.n	800c758 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	e006      	b.n	800c766 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60fb      	str	r3, [r7, #12]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1ef      	bne.n	800c744 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3714      	adds	r7, #20
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20008c70 	.word	0x20008c70

0800c778 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <pbuf_free_ooseq+0x38>)
 800c780:	2200      	movs	r2, #0
 800c782:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c784:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <pbuf_free_ooseq+0x3c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	607b      	str	r3, [r7, #4]
 800c78a:	e00a      	b.n	800c7a2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f002 f9df 	bl	800eb58 <tcp_free_ooseq>
      return;
 800c79a:	e005      	b.n	800c7a8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	607b      	str	r3, [r7, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1f1      	bne.n	800c78c <pbuf_free_ooseq+0x14>
    }
  }
}
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20008c79 	.word	0x20008c79
 800c7b4:	20008c88 	.word	0x20008c88

0800c7b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c7bc:	4b03      	ldr	r3, [pc, #12]	; (800c7cc <pbuf_pool_is_empty+0x14>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c7c2:	bf00      	nop
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	20008c79 	.word	0x20008c79

0800c7d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	4611      	mov	r1, r2
 800c7dc:	461a      	mov	r2, r3
 800c7de:	460b      	mov	r3, r1
 800c7e0:	80fb      	strh	r3, [r7, #6]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	88fa      	ldrh	r2, [r7, #6]
 800c7f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	88ba      	ldrh	r2, [r7, #4]
 800c7fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c7fe:	8b3b      	ldrh	r3, [r7, #24]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	7f3a      	ldrb	r2, [r7, #28]
 800c80a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2201      	movs	r2, #1
 800c810:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2200      	movs	r2, #0
 800c816:	73da      	strb	r2, [r3, #15]
}
 800c818:	bf00      	nop
 800c81a:	3714      	adds	r7, #20
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08c      	sub	sp, #48	; 0x30
 800c828:	af02      	add	r7, sp, #8
 800c82a:	4603      	mov	r3, r0
 800c82c:	71fb      	strb	r3, [r7, #7]
 800c82e:	460b      	mov	r3, r1
 800c830:	80bb      	strh	r3, [r7, #4]
 800c832:	4613      	mov	r3, r2
 800c834:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c83a:	887b      	ldrh	r3, [r7, #2]
 800c83c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c840:	d07f      	beq.n	800c942 <pbuf_alloc+0x11e>
 800c842:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c846:	f300 80c8 	bgt.w	800c9da <pbuf_alloc+0x1b6>
 800c84a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c84e:	d010      	beq.n	800c872 <pbuf_alloc+0x4e>
 800c850:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c854:	f300 80c1 	bgt.w	800c9da <pbuf_alloc+0x1b6>
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d002      	beq.n	800c862 <pbuf_alloc+0x3e>
 800c85c:	2b41      	cmp	r3, #65	; 0x41
 800c85e:	f040 80bc 	bne.w	800c9da <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c862:	887a      	ldrh	r2, [r7, #2]
 800c864:	88bb      	ldrh	r3, [r7, #4]
 800c866:	4619      	mov	r1, r3
 800c868:	2000      	movs	r0, #0
 800c86a:	f000 f8d1 	bl	800ca10 <pbuf_alloc_reference>
 800c86e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c870:	e0bd      	b.n	800c9ee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c87a:	88bb      	ldrh	r3, [r7, #4]
 800c87c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c87e:	2008      	movs	r0, #8
 800c880:	f7ff fbce 	bl	800c020 <memp_malloc>
 800c884:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d109      	bne.n	800c8a0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c88c:	f7ff ff94 	bl	800c7b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <pbuf_alloc+0x78>
            pbuf_free(p);
 800c896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c898:	f000 faa8 	bl	800cdec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c89c:	2300      	movs	r3, #0
 800c89e:	e0a7      	b.n	800c9f0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8a2:	3303      	adds	r3, #3
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	f023 0303 	bic.w	r3, r3, #3
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	8b7a      	ldrh	r2, [r7, #26]
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	bf28      	it	cs
 800c8b8:	4613      	movcs	r3, r2
 800c8ba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c8bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8be:	3310      	adds	r3, #16
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	89f9      	ldrh	r1, [r7, #14]
 800c8ce:	8b7a      	ldrh	r2, [r7, #26]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	887b      	ldrh	r3, [r7, #2]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4601      	mov	r1, r0
 800c8dc:	6938      	ldr	r0, [r7, #16]
 800c8de:	f7ff ff77 	bl	800c7d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d006      	beq.n	800c8fc <pbuf_alloc+0xd8>
 800c8ee:	4b42      	ldr	r3, [pc, #264]	; (800c9f8 <pbuf_alloc+0x1d4>)
 800c8f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8f4:	4941      	ldr	r1, [pc, #260]	; (800c9fc <pbuf_alloc+0x1d8>)
 800c8f6:	4842      	ldr	r0, [pc, #264]	; (800ca00 <pbuf_alloc+0x1dc>)
 800c8f8:	f00a f8d4 	bl	8016aa4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c8fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8fe:	3303      	adds	r3, #3
 800c900:	f023 0303 	bic.w	r3, r3, #3
 800c904:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c908:	d106      	bne.n	800c918 <pbuf_alloc+0xf4>
 800c90a:	4b3b      	ldr	r3, [pc, #236]	; (800c9f8 <pbuf_alloc+0x1d4>)
 800c90c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c910:	493c      	ldr	r1, [pc, #240]	; (800ca04 <pbuf_alloc+0x1e0>)
 800c912:	483b      	ldr	r0, [pc, #236]	; (800ca00 <pbuf_alloc+0x1dc>)
 800c914:	f00a f8c6 	bl	8016aa4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d102      	bne.n	800c924 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
 800c922:	e002      	b.n	800c92a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c92e:	8b7a      	ldrh	r2, [r7, #26]
 800c930:	89fb      	ldrh	r3, [r7, #14]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c93a:	8b7b      	ldrh	r3, [r7, #26]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d19e      	bne.n	800c87e <pbuf_alloc+0x5a>
      break;
 800c940:	e055      	b.n	800c9ee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c944:	3303      	adds	r3, #3
 800c946:	b29b      	uxth	r3, r3
 800c948:	f023 0303 	bic.w	r3, r3, #3
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	88bb      	ldrh	r3, [r7, #4]
 800c950:	3303      	adds	r3, #3
 800c952:	b29b      	uxth	r3, r3
 800c954:	f023 0303 	bic.w	r3, r3, #3
 800c958:	b29b      	uxth	r3, r3
 800c95a:	4413      	add	r3, r2
 800c95c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c95e:	8b3b      	ldrh	r3, [r7, #24]
 800c960:	3310      	adds	r3, #16
 800c962:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c964:	8b3a      	ldrh	r2, [r7, #24]
 800c966:	88bb      	ldrh	r3, [r7, #4]
 800c968:	3303      	adds	r3, #3
 800c96a:	f023 0303 	bic.w	r3, r3, #3
 800c96e:	429a      	cmp	r2, r3
 800c970:	d306      	bcc.n	800c980 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c972:	8afa      	ldrh	r2, [r7, #22]
 800c974:	88bb      	ldrh	r3, [r7, #4]
 800c976:	3303      	adds	r3, #3
 800c978:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d201      	bcs.n	800c984 <pbuf_alloc+0x160>
        return NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	e035      	b.n	800c9f0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c984:	8afb      	ldrh	r3, [r7, #22]
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff f9ba 	bl	800bd00 <mem_malloc>
 800c98c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <pbuf_alloc+0x174>
        return NULL;
 800c994:	2300      	movs	r3, #0
 800c996:	e02b      	b.n	800c9f0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c99a:	3310      	adds	r3, #16
 800c99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c99e:	4413      	add	r3, r2
 800c9a0:	3303      	adds	r3, #3
 800c9a2:	f023 0303 	bic.w	r3, r3, #3
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	88b9      	ldrh	r1, [r7, #4]
 800c9aa:	88ba      	ldrh	r2, [r7, #4]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	887b      	ldrh	r3, [r7, #2]
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ba:	f7ff ff09 	bl	800c7d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f003 0303 	and.w	r3, r3, #3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d010      	beq.n	800c9ec <pbuf_alloc+0x1c8>
 800c9ca:	4b0b      	ldr	r3, [pc, #44]	; (800c9f8 <pbuf_alloc+0x1d4>)
 800c9cc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c9d0:	490d      	ldr	r1, [pc, #52]	; (800ca08 <pbuf_alloc+0x1e4>)
 800c9d2:	480b      	ldr	r0, [pc, #44]	; (800ca00 <pbuf_alloc+0x1dc>)
 800c9d4:	f00a f866 	bl	8016aa4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c9d8:	e008      	b.n	800c9ec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <pbuf_alloc+0x1d4>)
 800c9dc:	f240 1227 	movw	r2, #295	; 0x127
 800c9e0:	490a      	ldr	r1, [pc, #40]	; (800ca0c <pbuf_alloc+0x1e8>)
 800c9e2:	4807      	ldr	r0, [pc, #28]	; (800ca00 <pbuf_alloc+0x1dc>)
 800c9e4:	f00a f85e 	bl	8016aa4 <iprintf>
      return NULL;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e001      	b.n	800c9f0 <pbuf_alloc+0x1cc>
      break;
 800c9ec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3728      	adds	r7, #40	; 0x28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	08018214 	.word	0x08018214
 800c9fc:	08018244 	.word	0x08018244
 800ca00:	08018274 	.word	0x08018274
 800ca04:	0801829c 	.word	0x0801829c
 800ca08:	080182d0 	.word	0x080182d0
 800ca0c:	080182fc 	.word	0x080182fc

0800ca10 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af02      	add	r7, sp, #8
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	807b      	strh	r3, [r7, #2]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca20:	883b      	ldrh	r3, [r7, #0]
 800ca22:	2b41      	cmp	r3, #65	; 0x41
 800ca24:	d009      	beq.n	800ca3a <pbuf_alloc_reference+0x2a>
 800ca26:	883b      	ldrh	r3, [r7, #0]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d006      	beq.n	800ca3a <pbuf_alloc_reference+0x2a>
 800ca2c:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <pbuf_alloc_reference+0x5c>)
 800ca2e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca32:	490f      	ldr	r1, [pc, #60]	; (800ca70 <pbuf_alloc_reference+0x60>)
 800ca34:	480f      	ldr	r0, [pc, #60]	; (800ca74 <pbuf_alloc_reference+0x64>)
 800ca36:	f00a f835 	bl	8016aa4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca3a:	2007      	movs	r0, #7
 800ca3c:	f7ff faf0 	bl	800c020 <memp_malloc>
 800ca40:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d101      	bne.n	800ca4c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e00b      	b.n	800ca64 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ca4c:	8879      	ldrh	r1, [r7, #2]
 800ca4e:	887a      	ldrh	r2, [r7, #2]
 800ca50:	2300      	movs	r3, #0
 800ca52:	9301      	str	r3, [sp, #4]
 800ca54:	883b      	ldrh	r3, [r7, #0]
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f7ff feb7 	bl	800c7d0 <pbuf_init_alloced_pbuf>
  return p;
 800ca62:	68fb      	ldr	r3, [r7, #12]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	08018214 	.word	0x08018214
 800ca70:	08018318 	.word	0x08018318
 800ca74:	08018274 	.word	0x08018274

0800ca78 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b088      	sub	sp, #32
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	607b      	str	r3, [r7, #4]
 800ca80:	4603      	mov	r3, r0
 800ca82:	73fb      	strb	r3, [r7, #15]
 800ca84:	460b      	mov	r3, r1
 800ca86:	81bb      	strh	r3, [r7, #12]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca90:	8a7b      	ldrh	r3, [r7, #18]
 800ca92:	3303      	adds	r3, #3
 800ca94:	f023 0203 	bic.w	r2, r3, #3
 800ca98:	89bb      	ldrh	r3, [r7, #12]
 800ca9a:	441a      	add	r2, r3
 800ca9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d901      	bls.n	800caa6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e018      	b.n	800cad8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800caa6:	6a3b      	ldr	r3, [r7, #32]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d007      	beq.n	800cabc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800caac:	8a7b      	ldrh	r3, [r7, #18]
 800caae:	3303      	adds	r3, #3
 800cab0:	f023 0303 	bic.w	r3, r3, #3
 800cab4:	6a3a      	ldr	r2, [r7, #32]
 800cab6:	4413      	add	r3, r2
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	e001      	b.n	800cac0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	89b9      	ldrh	r1, [r7, #12]
 800cac4:	89ba      	ldrh	r2, [r7, #12]
 800cac6:	2302      	movs	r3, #2
 800cac8:	9301      	str	r3, [sp, #4]
 800caca:	897b      	ldrh	r3, [r7, #10]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	460b      	mov	r3, r1
 800cad0:	6979      	ldr	r1, [r7, #20]
 800cad2:	f7ff fe7d 	bl	800c7d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cad6:	687b      	ldr	r3, [r7, #4]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <pbuf_realloc+0x20>
 800caf2:	4b3a      	ldr	r3, [pc, #232]	; (800cbdc <pbuf_realloc+0xfc>)
 800caf4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800caf8:	4939      	ldr	r1, [pc, #228]	; (800cbe0 <pbuf_realloc+0x100>)
 800cafa:	483a      	ldr	r0, [pc, #232]	; (800cbe4 <pbuf_realloc+0x104>)
 800cafc:	f009 ffd2 	bl	8016aa4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	891b      	ldrh	r3, [r3, #8]
 800cb04:	887a      	ldrh	r2, [r7, #2]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d263      	bcs.n	800cbd2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	891a      	ldrh	r2, [r3, #8]
 800cb0e:	887b      	ldrh	r3, [r7, #2]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb14:	887b      	ldrh	r3, [r7, #2]
 800cb16:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb1c:	e018      	b.n	800cb50 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	895b      	ldrh	r3, [r3, #10]
 800cb22:	897a      	ldrh	r2, [r7, #10]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	891a      	ldrh	r2, [r3, #8]
 800cb2c:	893b      	ldrh	r3, [r7, #8]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d106      	bne.n	800cb50 <pbuf_realloc+0x70>
 800cb42:	4b26      	ldr	r3, [pc, #152]	; (800cbdc <pbuf_realloc+0xfc>)
 800cb44:	f240 12af 	movw	r2, #431	; 0x1af
 800cb48:	4927      	ldr	r1, [pc, #156]	; (800cbe8 <pbuf_realloc+0x108>)
 800cb4a:	4826      	ldr	r0, [pc, #152]	; (800cbe4 <pbuf_realloc+0x104>)
 800cb4c:	f009 ffaa 	bl	8016aa4 <iprintf>
  while (rem_len > q->len) {
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	895b      	ldrh	r3, [r3, #10]
 800cb54:	897a      	ldrh	r2, [r7, #10]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d8e1      	bhi.n	800cb1e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	7b1b      	ldrb	r3, [r3, #12]
 800cb5e:	f003 030f 	and.w	r3, r3, #15
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d121      	bne.n	800cbaa <pbuf_realloc+0xca>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	895b      	ldrh	r3, [r3, #10]
 800cb6a:	897a      	ldrh	r2, [r7, #10]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d01c      	beq.n	800cbaa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	7b5b      	ldrb	r3, [r3, #13]
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d116      	bne.n	800cbaa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	897b      	ldrh	r3, [r7, #10]
 800cb88:	4413      	add	r3, r2
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f7fe ffba 	bl	800bb08 <mem_trim>
 800cb94:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d106      	bne.n	800cbaa <pbuf_realloc+0xca>
 800cb9c:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <pbuf_realloc+0xfc>)
 800cb9e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cba2:	4912      	ldr	r1, [pc, #72]	; (800cbec <pbuf_realloc+0x10c>)
 800cba4:	480f      	ldr	r0, [pc, #60]	; (800cbe4 <pbuf_realloc+0x104>)
 800cba6:	f009 ff7d 	bl	8016aa4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	897a      	ldrh	r2, [r7, #10]
 800cbae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	895a      	ldrh	r2, [r3, #10]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d004      	beq.n	800cbca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 f911 	bl	800cdec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	e000      	b.n	800cbd4 <pbuf_realloc+0xf4>
    return;
 800cbd2:	bf00      	nop

}
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	08018214 	.word	0x08018214
 800cbe0:	0801832c 	.word	0x0801832c
 800cbe4:	08018274 	.word	0x08018274
 800cbe8:	08018344 	.word	0x08018344
 800cbec:	0801835c 	.word	0x0801835c

0800cbf0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <pbuf_add_header_impl+0x22>
 800cc04:	4b2b      	ldr	r3, [pc, #172]	; (800ccb4 <pbuf_add_header_impl+0xc4>)
 800cc06:	f240 12df 	movw	r2, #479	; 0x1df
 800cc0a:	492b      	ldr	r1, [pc, #172]	; (800ccb8 <pbuf_add_header_impl+0xc8>)
 800cc0c:	482b      	ldr	r0, [pc, #172]	; (800ccbc <pbuf_add_header_impl+0xcc>)
 800cc0e:	f009 ff49 	bl	8016aa4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d003      	beq.n	800cc20 <pbuf_add_header_impl+0x30>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc1e:	d301      	bcc.n	800cc24 <pbuf_add_header_impl+0x34>
    return 1;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e043      	b.n	800ccac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <pbuf_add_header_impl+0x3e>
    return 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e03e      	b.n	800ccac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	891a      	ldrh	r2, [r3, #8]
 800cc36:	8a7b      	ldrh	r3, [r7, #18]
 800cc38:	4413      	add	r3, r2
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	8a7a      	ldrh	r2, [r7, #18]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d901      	bls.n	800cc46 <pbuf_add_header_impl+0x56>
    return 1;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e032      	b.n	800ccac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7b1b      	ldrb	r3, [r3, #12]
 800cc4a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cc4c:	8a3b      	ldrh	r3, [r7, #16]
 800cc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00c      	beq.n	800cc70 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	425b      	negs	r3, r3
 800cc5e:	4413      	add	r3, r2
 800cc60:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3310      	adds	r3, #16
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d20d      	bcs.n	800cc88 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e01d      	b.n	800ccac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d006      	beq.n	800cc84 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685a      	ldr	r2, [r3, #4]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	425b      	negs	r3, r3
 800cc7e:	4413      	add	r3, r2
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	e001      	b.n	800cc88 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e011      	b.n	800ccac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	895a      	ldrh	r2, [r3, #10]
 800cc92:	8a7b      	ldrh	r3, [r7, #18]
 800cc94:	4413      	add	r3, r2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	891a      	ldrh	r2, [r3, #8]
 800cca0:	8a7b      	ldrh	r3, [r7, #18]
 800cca2:	4413      	add	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	811a      	strh	r2, [r3, #8]


  return 0;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	08018214 	.word	0x08018214
 800ccb8:	08018378 	.word	0x08018378
 800ccbc:	08018274 	.word	0x08018274

0800ccc0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ccca:	2200      	movs	r2, #0
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff ff8e 	bl	800cbf0 <pbuf_add_header_impl>
 800ccd4:	4603      	mov	r3, r0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d106      	bne.n	800ccfe <pbuf_remove_header+0x1e>
 800ccf0:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <pbuf_remove_header+0x94>)
 800ccf2:	f240 224b 	movw	r2, #587	; 0x24b
 800ccf6:	4920      	ldr	r1, [pc, #128]	; (800cd78 <pbuf_remove_header+0x98>)
 800ccf8:	4820      	ldr	r0, [pc, #128]	; (800cd7c <pbuf_remove_header+0x9c>)
 800ccfa:	f009 fed3 	bl	8016aa4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d003      	beq.n	800cd0c <pbuf_remove_header+0x2c>
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd0a:	d301      	bcc.n	800cd10 <pbuf_remove_header+0x30>
    return 1;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e02c      	b.n	800cd6a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <pbuf_remove_header+0x3a>
    return 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e027      	b.n	800cd6a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	895b      	ldrh	r3, [r3, #10]
 800cd22:	89fa      	ldrh	r2, [r7, #14]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d908      	bls.n	800cd3a <pbuf_remove_header+0x5a>
 800cd28:	4b12      	ldr	r3, [pc, #72]	; (800cd74 <pbuf_remove_header+0x94>)
 800cd2a:	f240 2255 	movw	r2, #597	; 0x255
 800cd2e:	4914      	ldr	r1, [pc, #80]	; (800cd80 <pbuf_remove_header+0xa0>)
 800cd30:	4812      	ldr	r0, [pc, #72]	; (800cd7c <pbuf_remove_header+0x9c>)
 800cd32:	f009 feb7 	bl	8016aa4 <iprintf>
 800cd36:	2301      	movs	r3, #1
 800cd38:	e017      	b.n	800cd6a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685a      	ldr	r2, [r3, #4]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	441a      	add	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	895a      	ldrh	r2, [r3, #10]
 800cd50:	89fb      	ldrh	r3, [r7, #14]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	891a      	ldrh	r2, [r3, #8]
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	08018214 	.word	0x08018214
 800cd78:	08018378 	.word	0x08018378
 800cd7c:	08018274 	.word	0x08018274
 800cd80:	08018384 	.word	0x08018384

0800cd84 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	807b      	strh	r3, [r7, #2]
 800cd90:	4613      	mov	r3, r2
 800cd92:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cd94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	da08      	bge.n	800cdae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cd9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cda0:	425b      	negs	r3, r3
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff ff9b 	bl	800cce0 <pbuf_remove_header>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	e007      	b.n	800cdbe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cdae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdb2:	787a      	ldrb	r2, [r7, #1]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff ff1a 	bl	800cbf0 <pbuf_add_header_impl>
 800cdbc:	4603      	mov	r3, r0
  }
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cdd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff ffd2 	bl	800cd84 <pbuf_header_impl>
 800cde0:	4603      	mov	r3, r0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
	...

0800cdec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10b      	bne.n	800ce12 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d106      	bne.n	800ce0e <pbuf_free+0x22>
 800ce00:	4b38      	ldr	r3, [pc, #224]	; (800cee4 <pbuf_free+0xf8>)
 800ce02:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ce06:	4938      	ldr	r1, [pc, #224]	; (800cee8 <pbuf_free+0xfc>)
 800ce08:	4838      	ldr	r0, [pc, #224]	; (800ceec <pbuf_free+0x100>)
 800ce0a:	f009 fe4b 	bl	8016aa4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e063      	b.n	800ceda <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce16:	e05c      	b.n	800ced2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	7b9b      	ldrb	r3, [r3, #14]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d106      	bne.n	800ce2e <pbuf_free+0x42>
 800ce20:	4b30      	ldr	r3, [pc, #192]	; (800cee4 <pbuf_free+0xf8>)
 800ce22:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ce26:	4932      	ldr	r1, [pc, #200]	; (800cef0 <pbuf_free+0x104>)
 800ce28:	4830      	ldr	r0, [pc, #192]	; (800ceec <pbuf_free+0x100>)
 800ce2a:	f009 fe3b 	bl	8016aa4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	7b9b      	ldrb	r3, [r3, #14]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	739a      	strb	r2, [r3, #14]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7b9b      	ldrb	r3, [r3, #14]
 800ce3e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ce40:	7dbb      	ldrb	r3, [r7, #22]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d143      	bne.n	800cece <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	7b1b      	ldrb	r3, [r3, #12]
 800ce50:	f003 030f 	and.w	r3, r3, #15
 800ce54:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7b5b      	ldrb	r3, [r3, #13]
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d011      	beq.n	800ce86 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d106      	bne.n	800ce7c <pbuf_free+0x90>
 800ce6e:	4b1d      	ldr	r3, [pc, #116]	; (800cee4 <pbuf_free+0xf8>)
 800ce70:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ce74:	491f      	ldr	r1, [pc, #124]	; (800cef4 <pbuf_free+0x108>)
 800ce76:	481d      	ldr	r0, [pc, #116]	; (800ceec <pbuf_free+0x100>)
 800ce78:	f009 fe14 	bl	8016aa4 <iprintf>
        pc->custom_free_function(p);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	4798      	blx	r3
 800ce84:	e01d      	b.n	800cec2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d104      	bne.n	800ce96 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	2008      	movs	r0, #8
 800ce90:	f7ff f936 	bl	800c100 <memp_free>
 800ce94:	e015      	b.n	800cec2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d104      	bne.n	800cea6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	2007      	movs	r0, #7
 800cea0:	f7ff f92e 	bl	800c100 <memp_free>
 800cea4:	e00d      	b.n	800cec2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <pbuf_free+0xc8>
          mem_free(p);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7fe fdc1 	bl	800ba34 <mem_free>
 800ceb2:	e006      	b.n	800cec2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ceb4:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <pbuf_free+0xf8>)
 800ceb6:	f240 320f 	movw	r2, #783	; 0x30f
 800ceba:	490f      	ldr	r1, [pc, #60]	; (800cef8 <pbuf_free+0x10c>)
 800cebc:	480b      	ldr	r0, [pc, #44]	; (800ceec <pbuf_free+0x100>)
 800cebe:	f009 fdf1 	bl	8016aa4 <iprintf>
        }
      }
      count++;
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	3301      	adds	r3, #1
 800cec6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	e001      	b.n	800ced2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d19f      	bne.n	800ce18 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	08018214 	.word	0x08018214
 800cee8:	08018378 	.word	0x08018378
 800ceec:	08018274 	.word	0x08018274
 800cef0:	080183a4 	.word	0x080183a4
 800cef4:	080183bc 	.word	0x080183bc
 800cef8:	080183e0 	.word	0x080183e0

0800cefc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf08:	e005      	b.n	800cf16 <pbuf_clen+0x1a>
    ++len;
 800cf0a:	89fb      	ldrh	r3, [r7, #14]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1f6      	bne.n	800cf0a <pbuf_clen+0xe>
  }
  return len;
 800cf1c:	89fb      	ldrh	r3, [r7, #14]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3714      	adds	r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
	...

0800cf2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d010      	beq.n	800cf5c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	7b9b      	ldrb	r3, [r3, #14]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7b9b      	ldrb	r3, [r3, #14]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d106      	bne.n	800cf5c <pbuf_ref+0x30>
 800cf4e:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <pbuf_ref+0x38>)
 800cf50:	f240 3242 	movw	r2, #834	; 0x342
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <pbuf_ref+0x3c>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <pbuf_ref+0x40>)
 800cf58:	f009 fda4 	bl	8016aa4 <iprintf>
  }
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	08018214 	.word	0x08018214
 800cf68:	080183f4 	.word	0x080183f4
 800cf6c:	08018274 	.word	0x08018274

0800cf70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <pbuf_cat+0x16>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d107      	bne.n	800cf96 <pbuf_cat+0x26>
 800cf86:	4b20      	ldr	r3, [pc, #128]	; (800d008 <pbuf_cat+0x98>)
 800cf88:	f240 3259 	movw	r2, #857	; 0x359
 800cf8c:	491f      	ldr	r1, [pc, #124]	; (800d00c <pbuf_cat+0x9c>)
 800cf8e:	4820      	ldr	r0, [pc, #128]	; (800d010 <pbuf_cat+0xa0>)
 800cf90:	f009 fd88 	bl	8016aa4 <iprintf>
 800cf94:	e034      	b.n	800d000 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	e00a      	b.n	800cfb2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	891a      	ldrh	r2, [r3, #8]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	891b      	ldrh	r3, [r3, #8]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	60fb      	str	r3, [r7, #12]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f0      	bne.n	800cf9c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	891a      	ldrh	r2, [r3, #8]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	895b      	ldrh	r3, [r3, #10]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d006      	beq.n	800cfd4 <pbuf_cat+0x64>
 800cfc6:	4b10      	ldr	r3, [pc, #64]	; (800d008 <pbuf_cat+0x98>)
 800cfc8:	f240 3262 	movw	r2, #866	; 0x362
 800cfcc:	4911      	ldr	r1, [pc, #68]	; (800d014 <pbuf_cat+0xa4>)
 800cfce:	4810      	ldr	r0, [pc, #64]	; (800d010 <pbuf_cat+0xa0>)
 800cfd0:	f009 fd68 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d006      	beq.n	800cfea <pbuf_cat+0x7a>
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <pbuf_cat+0x98>)
 800cfde:	f240 3263 	movw	r2, #867	; 0x363
 800cfe2:	490d      	ldr	r1, [pc, #52]	; (800d018 <pbuf_cat+0xa8>)
 800cfe4:	480a      	ldr	r0, [pc, #40]	; (800d010 <pbuf_cat+0xa0>)
 800cfe6:	f009 fd5d 	bl	8016aa4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	891a      	ldrh	r2, [r3, #8]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	891b      	ldrh	r3, [r3, #8]
 800cff2:	4413      	add	r3, r2
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	08018214 	.word	0x08018214
 800d00c:	08018408 	.word	0x08018408
 800d010:	08018274 	.word	0x08018274
 800d014:	08018440 	.word	0x08018440
 800d018:	08018470 	.word	0x08018470

0800d01c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7ff ffa1 	bl	800cf70 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d02e:	6838      	ldr	r0, [r7, #0]
 800d030:	f7ff ff7c 	bl	800cf2c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d034:	bf00      	nop
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d008      	beq.n	800d066 <pbuf_copy+0x2a>
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d005      	beq.n	800d066 <pbuf_copy+0x2a>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	891a      	ldrh	r2, [r3, #8]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	891b      	ldrh	r3, [r3, #8]
 800d062:	429a      	cmp	r2, r3
 800d064:	d209      	bcs.n	800d07a <pbuf_copy+0x3e>
 800d066:	4b57      	ldr	r3, [pc, #348]	; (800d1c4 <pbuf_copy+0x188>)
 800d068:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d06c:	4956      	ldr	r1, [pc, #344]	; (800d1c8 <pbuf_copy+0x18c>)
 800d06e:	4857      	ldr	r0, [pc, #348]	; (800d1cc <pbuf_copy+0x190>)
 800d070:	f009 fd18 	bl	8016aa4 <iprintf>
 800d074:	f06f 030f 	mvn.w	r3, #15
 800d078:	e09f      	b.n	800d1ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	895b      	ldrh	r3, [r3, #10]
 800d07e:	461a      	mov	r2, r3
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	1ad2      	subs	r2, r2, r3
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	895b      	ldrh	r3, [r3, #10]
 800d088:	4619      	mov	r1, r3
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	1acb      	subs	r3, r1, r3
 800d08e:	429a      	cmp	r2, r3
 800d090:	d306      	bcc.n	800d0a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	895b      	ldrh	r3, [r3, #10]
 800d096:	461a      	mov	r2, r3
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	60fb      	str	r3, [r7, #12]
 800d09e:	e005      	b.n	800d0ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	18d0      	adds	r0, r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	f009 fcda 	bl	8016a78 <memcpy>
    offset_to += len;
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d906      	bls.n	800d0ee <pbuf_copy+0xb2>
 800d0e0:	4b38      	ldr	r3, [pc, #224]	; (800d1c4 <pbuf_copy+0x188>)
 800d0e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d0e6:	493a      	ldr	r1, [pc, #232]	; (800d1d0 <pbuf_copy+0x194>)
 800d0e8:	4838      	ldr	r0, [pc, #224]	; (800d1cc <pbuf_copy+0x190>)
 800d0ea:	f009 fcdb 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	895b      	ldrh	r3, [r3, #10]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d906      	bls.n	800d108 <pbuf_copy+0xcc>
 800d0fa:	4b32      	ldr	r3, [pc, #200]	; (800d1c4 <pbuf_copy+0x188>)
 800d0fc:	f240 32da 	movw	r2, #986	; 0x3da
 800d100:	4934      	ldr	r1, [pc, #208]	; (800d1d4 <pbuf_copy+0x198>)
 800d102:	4832      	ldr	r0, [pc, #200]	; (800d1cc <pbuf_copy+0x190>)
 800d104:	f009 fcce 	bl	8016aa4 <iprintf>
    if (offset_from >= p_from->len) {
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	895b      	ldrh	r3, [r3, #10]
 800d10c:	461a      	mov	r2, r3
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	4293      	cmp	r3, r2
 800d112:	d304      	bcc.n	800d11e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	895b      	ldrh	r3, [r3, #10]
 800d122:	461a      	mov	r2, r3
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	4293      	cmp	r3, r2
 800d128:	d114      	bne.n	800d154 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10c      	bne.n	800d154 <pbuf_copy+0x118>
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d009      	beq.n	800d154 <pbuf_copy+0x118>
 800d140:	4b20      	ldr	r3, [pc, #128]	; (800d1c4 <pbuf_copy+0x188>)
 800d142:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d146:	4924      	ldr	r1, [pc, #144]	; (800d1d8 <pbuf_copy+0x19c>)
 800d148:	4820      	ldr	r0, [pc, #128]	; (800d1cc <pbuf_copy+0x190>)
 800d14a:	f009 fcab 	bl	8016aa4 <iprintf>
 800d14e:	f06f 030f 	mvn.w	r3, #15
 800d152:	e032      	b.n	800d1ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d013      	beq.n	800d182 <pbuf_copy+0x146>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	895a      	ldrh	r2, [r3, #10]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	891b      	ldrh	r3, [r3, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d10d      	bne.n	800d182 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d009      	beq.n	800d182 <pbuf_copy+0x146>
 800d16e:	4b15      	ldr	r3, [pc, #84]	; (800d1c4 <pbuf_copy+0x188>)
 800d170:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d174:	4919      	ldr	r1, [pc, #100]	; (800d1dc <pbuf_copy+0x1a0>)
 800d176:	4815      	ldr	r0, [pc, #84]	; (800d1cc <pbuf_copy+0x190>)
 800d178:	f009 fc94 	bl	8016aa4 <iprintf>
 800d17c:	f06f 0305 	mvn.w	r3, #5
 800d180:	e01b      	b.n	800d1ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d013      	beq.n	800d1b0 <pbuf_copy+0x174>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	895a      	ldrh	r2, [r3, #10]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	891b      	ldrh	r3, [r3, #8]
 800d190:	429a      	cmp	r2, r3
 800d192:	d10d      	bne.n	800d1b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d009      	beq.n	800d1b0 <pbuf_copy+0x174>
 800d19c:	4b09      	ldr	r3, [pc, #36]	; (800d1c4 <pbuf_copy+0x188>)
 800d19e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d1a2:	490e      	ldr	r1, [pc, #56]	; (800d1dc <pbuf_copy+0x1a0>)
 800d1a4:	4809      	ldr	r0, [pc, #36]	; (800d1cc <pbuf_copy+0x190>)
 800d1a6:	f009 fc7d 	bl	8016aa4 <iprintf>
 800d1aa:	f06f 0305 	mvn.w	r3, #5
 800d1ae:	e004      	b.n	800d1ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f47f af61 	bne.w	800d07a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	08018214 	.word	0x08018214
 800d1c8:	080184bc 	.word	0x080184bc
 800d1cc:	08018274 	.word	0x08018274
 800d1d0:	080184ec 	.word	0x080184ec
 800d1d4:	08018504 	.word	0x08018504
 800d1d8:	08018520 	.word	0x08018520
 800d1dc:	08018530 	.word	0x08018530

0800d1e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	80fb      	strh	r3, [r7, #6]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d108      	bne.n	800d216 <pbuf_copy_partial+0x36>
 800d204:	4b2b      	ldr	r3, [pc, #172]	; (800d2b4 <pbuf_copy_partial+0xd4>)
 800d206:	f240 420a 	movw	r2, #1034	; 0x40a
 800d20a:	492b      	ldr	r1, [pc, #172]	; (800d2b8 <pbuf_copy_partial+0xd8>)
 800d20c:	482b      	ldr	r0, [pc, #172]	; (800d2bc <pbuf_copy_partial+0xdc>)
 800d20e:	f009 fc49 	bl	8016aa4 <iprintf>
 800d212:	2300      	movs	r3, #0
 800d214:	e04a      	b.n	800d2ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d108      	bne.n	800d22e <pbuf_copy_partial+0x4e>
 800d21c:	4b25      	ldr	r3, [pc, #148]	; (800d2b4 <pbuf_copy_partial+0xd4>)
 800d21e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d222:	4927      	ldr	r1, [pc, #156]	; (800d2c0 <pbuf_copy_partial+0xe0>)
 800d224:	4825      	ldr	r0, [pc, #148]	; (800d2bc <pbuf_copy_partial+0xdc>)
 800d226:	f009 fc3d 	bl	8016aa4 <iprintf>
 800d22a:	2300      	movs	r3, #0
 800d22c:	e03e      	b.n	800d2ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	61fb      	str	r3, [r7, #28]
 800d232:	e034      	b.n	800d29e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d234:	88bb      	ldrh	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <pbuf_copy_partial+0x70>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	895b      	ldrh	r3, [r3, #10]
 800d23e:	88ba      	ldrh	r2, [r7, #4]
 800d240:	429a      	cmp	r2, r3
 800d242:	d305      	bcc.n	800d250 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	895b      	ldrh	r3, [r3, #10]
 800d248:	88ba      	ldrh	r2, [r7, #4]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	80bb      	strh	r3, [r7, #4]
 800d24e:	e023      	b.n	800d298 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	895a      	ldrh	r2, [r3, #10]
 800d254:	88bb      	ldrh	r3, [r7, #4]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d25a:	8b3a      	ldrh	r2, [r7, #24]
 800d25c:	88fb      	ldrh	r3, [r7, #6]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d901      	bls.n	800d266 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d262:	88fb      	ldrh	r3, [r7, #6]
 800d264:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d266:	8b7b      	ldrh	r3, [r7, #26]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	18d0      	adds	r0, r2, r3
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	88bb      	ldrh	r3, [r7, #4]
 800d272:	4413      	add	r3, r2
 800d274:	8b3a      	ldrh	r2, [r7, #24]
 800d276:	4619      	mov	r1, r3
 800d278:	f009 fbfe 	bl	8016a78 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d27c:	8afa      	ldrh	r2, [r7, #22]
 800d27e:	8b3b      	ldrh	r3, [r7, #24]
 800d280:	4413      	add	r3, r2
 800d282:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d284:	8b7a      	ldrh	r2, [r7, #26]
 800d286:	8b3b      	ldrh	r3, [r7, #24]
 800d288:	4413      	add	r3, r2
 800d28a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d28c:	88fa      	ldrh	r2, [r7, #6]
 800d28e:	8b3b      	ldrh	r3, [r7, #24]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	61fb      	str	r3, [r7, #28]
 800d29e:	88fb      	ldrh	r3, [r7, #6]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <pbuf_copy_partial+0xca>
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1c4      	bne.n	800d234 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d2aa:	8afb      	ldrh	r3, [r7, #22]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	08018214 	.word	0x08018214
 800d2b8:	0801855c 	.word	0x0801855c
 800d2bc:	08018274 	.word	0x08018274
 800d2c0:	0801857c 	.word	0x0801857c

0800d2c4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d2d2:	88fb      	ldrh	r3, [r7, #6]
 800d2d4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d109      	bne.n	800d2f4 <pbuf_take+0x30>
 800d2e0:	4b3a      	ldr	r3, [pc, #232]	; (800d3cc <pbuf_take+0x108>)
 800d2e2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d2e6:	493a      	ldr	r1, [pc, #232]	; (800d3d0 <pbuf_take+0x10c>)
 800d2e8:	483a      	ldr	r0, [pc, #232]	; (800d3d4 <pbuf_take+0x110>)
 800d2ea:	f009 fbdb 	bl	8016aa4 <iprintf>
 800d2ee:	f06f 030f 	mvn.w	r3, #15
 800d2f2:	e067      	b.n	800d3c4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d109      	bne.n	800d30e <pbuf_take+0x4a>
 800d2fa:	4b34      	ldr	r3, [pc, #208]	; (800d3cc <pbuf_take+0x108>)
 800d2fc:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d300:	4935      	ldr	r1, [pc, #212]	; (800d3d8 <pbuf_take+0x114>)
 800d302:	4834      	ldr	r0, [pc, #208]	; (800d3d4 <pbuf_take+0x110>)
 800d304:	f009 fbce 	bl	8016aa4 <iprintf>
 800d308:	f06f 030f 	mvn.w	r3, #15
 800d30c:	e05a      	b.n	800d3c4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	891b      	ldrh	r3, [r3, #8]
 800d312:	88fa      	ldrh	r2, [r7, #6]
 800d314:	429a      	cmp	r2, r3
 800d316:	d909      	bls.n	800d32c <pbuf_take+0x68>
 800d318:	4b2c      	ldr	r3, [pc, #176]	; (800d3cc <pbuf_take+0x108>)
 800d31a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d31e:	492f      	ldr	r1, [pc, #188]	; (800d3dc <pbuf_take+0x118>)
 800d320:	482c      	ldr	r0, [pc, #176]	; (800d3d4 <pbuf_take+0x110>)
 800d322:	f009 fbbf 	bl	8016aa4 <iprintf>
 800d326:	f04f 33ff 	mov.w	r3, #4294967295
 800d32a:	e04b      	b.n	800d3c4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d007      	beq.n	800d342 <pbuf_take+0x7e>
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d004      	beq.n	800d342 <pbuf_take+0x7e>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	891b      	ldrh	r3, [r3, #8]
 800d33c:	88fa      	ldrh	r2, [r7, #6]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d902      	bls.n	800d348 <pbuf_take+0x84>
    return ERR_ARG;
 800d342:	f06f 030f 	mvn.w	r3, #15
 800d346:	e03d      	b.n	800d3c4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	61fb      	str	r3, [r7, #28]
 800d34c:	e028      	b.n	800d3a0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d106      	bne.n	800d362 <pbuf_take+0x9e>
 800d354:	4b1d      	ldr	r3, [pc, #116]	; (800d3cc <pbuf_take+0x108>)
 800d356:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d35a:	4921      	ldr	r1, [pc, #132]	; (800d3e0 <pbuf_take+0x11c>)
 800d35c:	481d      	ldr	r0, [pc, #116]	; (800d3d4 <pbuf_take+0x110>)
 800d35e:	f009 fba1 	bl	8016aa4 <iprintf>
    buf_copy_len = total_copy_len;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	895b      	ldrh	r3, [r3, #10]
 800d36a:	461a      	mov	r2, r3
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	4293      	cmp	r3, r2
 800d370:	d902      	bls.n	800d378 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	895b      	ldrh	r3, [r3, #10]
 800d376:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	6858      	ldr	r0, [r3, #4]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	4413      	add	r3, r2
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	4619      	mov	r1, r3
 800d386:	f009 fb77 	bl	8016a78 <memcpy>
    total_copy_len -= buf_copy_len;
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	4413      	add	r3, r2
 800d398:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	61fb      	str	r3, [r7, #28]
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1d3      	bne.n	800d34e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d103      	bne.n	800d3b4 <pbuf_take+0xf0>
 800d3ac:	88fb      	ldrh	r3, [r7, #6]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d006      	beq.n	800d3c2 <pbuf_take+0xfe>
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <pbuf_take+0x108>)
 800d3b6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d3ba:	490a      	ldr	r1, [pc, #40]	; (800d3e4 <pbuf_take+0x120>)
 800d3bc:	4805      	ldr	r0, [pc, #20]	; (800d3d4 <pbuf_take+0x110>)
 800d3be:	f009 fb71 	bl	8016aa4 <iprintf>
  return ERR_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3720      	adds	r7, #32
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	08018214 	.word	0x08018214
 800d3d0:	080185ec 	.word	0x080185ec
 800d3d4:	08018274 	.word	0x08018274
 800d3d8:	08018604 	.word	0x08018604
 800d3dc:	08018620 	.word	0x08018620
 800d3e0:	08018640 	.word	0x08018640
 800d3e4:	08018658 	.word	0x08018658

0800d3e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	603a      	str	r2, [r7, #0]
 800d3f2:	71fb      	strb	r3, [r7, #7]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	8919      	ldrh	r1, [r3, #8]
 800d3fc:	88ba      	ldrh	r2, [r7, #4]
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff fa0f 	bl	800c824 <pbuf_alloc>
 800d406:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <pbuf_clone+0x2a>
    return NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	e011      	b.n	800d436 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d412:	6839      	ldr	r1, [r7, #0]
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff fe11 	bl	800d03c <pbuf_copy>
 800d41a:	4603      	mov	r3, r0
 800d41c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d41e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d006      	beq.n	800d434 <pbuf_clone+0x4c>
 800d426:	4b06      	ldr	r3, [pc, #24]	; (800d440 <pbuf_clone+0x58>)
 800d428:	f240 5224 	movw	r2, #1316	; 0x524
 800d42c:	4905      	ldr	r1, [pc, #20]	; (800d444 <pbuf_clone+0x5c>)
 800d42e:	4806      	ldr	r0, [pc, #24]	; (800d448 <pbuf_clone+0x60>)
 800d430:	f009 fb38 	bl	8016aa4 <iprintf>
  return q;
 800d434:	68fb      	ldr	r3, [r7, #12]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	08018214 	.word	0x08018214
 800d444:	08018688 	.word	0x08018688
 800d448:	08018274 	.word	0x08018274

0800d44c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d450:	f009 fbb6 	bl	8016bc0 <rand>
 800d454:	4603      	mov	r3, r0
 800d456:	b29b      	uxth	r3, r3
 800d458:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d462:	b29a      	uxth	r2, r3
 800d464:	4b01      	ldr	r3, [pc, #4]	; (800d46c <tcp_init+0x20>)
 800d466:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d468:	bf00      	nop
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20000020 	.word	0x20000020

0800d470 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	7d1b      	ldrb	r3, [r3, #20]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d105      	bne.n	800d48c <tcp_free+0x1c>
 800d480:	4b06      	ldr	r3, [pc, #24]	; (800d49c <tcp_free+0x2c>)
 800d482:	22d4      	movs	r2, #212	; 0xd4
 800d484:	4906      	ldr	r1, [pc, #24]	; (800d4a0 <tcp_free+0x30>)
 800d486:	4807      	ldr	r0, [pc, #28]	; (800d4a4 <tcp_free+0x34>)
 800d488:	f009 fb0c 	bl	8016aa4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	2001      	movs	r0, #1
 800d490:	f7fe fe36 	bl	800c100 <memp_free>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	08018714 	.word	0x08018714
 800d4a0:	08018744 	.word	0x08018744
 800d4a4:	08018758 	.word	0x08018758

0800d4a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	7d1b      	ldrb	r3, [r3, #20]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d105      	bne.n	800d4c4 <tcp_free_listen+0x1c>
 800d4b8:	4b06      	ldr	r3, [pc, #24]	; (800d4d4 <tcp_free_listen+0x2c>)
 800d4ba:	22df      	movs	r2, #223	; 0xdf
 800d4bc:	4906      	ldr	r1, [pc, #24]	; (800d4d8 <tcp_free_listen+0x30>)
 800d4be:	4807      	ldr	r0, [pc, #28]	; (800d4dc <tcp_free_listen+0x34>)
 800d4c0:	f009 faf0 	bl	8016aa4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	2002      	movs	r0, #2
 800d4c8:	f7fe fe1a 	bl	800c100 <memp_free>
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	08018714 	.word	0x08018714
 800d4d8:	08018780 	.word	0x08018780
 800d4dc:	08018758 	.word	0x08018758

0800d4e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d4e4:	f000 fea2 	bl	800e22c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d4e8:	4b07      	ldr	r3, [pc, #28]	; (800d508 <tcp_tmr+0x28>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	4b05      	ldr	r3, [pc, #20]	; (800d508 <tcp_tmr+0x28>)
 800d4f2:	701a      	strb	r2, [r3, #0]
 800d4f4:	4b04      	ldr	r3, [pc, #16]	; (800d508 <tcp_tmr+0x28>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d500:	f000 fb54 	bl	800dbac <tcp_slowtmr>
  }
}
 800d504:	bf00      	nop
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20008c91 	.word	0x20008c91

0800d50c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d105      	bne.n	800d528 <tcp_remove_listener+0x1c>
 800d51c:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <tcp_remove_listener+0x48>)
 800d51e:	22ff      	movs	r2, #255	; 0xff
 800d520:	490d      	ldr	r1, [pc, #52]	; (800d558 <tcp_remove_listener+0x4c>)
 800d522:	480e      	ldr	r0, [pc, #56]	; (800d55c <tcp_remove_listener+0x50>)
 800d524:	f009 fabe 	bl	8016aa4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	e00a      	b.n	800d544 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	429a      	cmp	r2, r3
 800d536:	d102      	bne.n	800d53e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1f1      	bne.n	800d52e <tcp_remove_listener+0x22>
    }
  }
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	08018714 	.word	0x08018714
 800d558:	0801879c 	.word	0x0801879c
 800d55c:	08018758 	.word	0x08018758

0800d560 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <tcp_listen_closed+0x1c>
 800d56e:	4b14      	ldr	r3, [pc, #80]	; (800d5c0 <tcp_listen_closed+0x60>)
 800d570:	f240 1211 	movw	r2, #273	; 0x111
 800d574:	4913      	ldr	r1, [pc, #76]	; (800d5c4 <tcp_listen_closed+0x64>)
 800d576:	4814      	ldr	r0, [pc, #80]	; (800d5c8 <tcp_listen_closed+0x68>)
 800d578:	f009 fa94 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	7d1b      	ldrb	r3, [r3, #20]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d006      	beq.n	800d592 <tcp_listen_closed+0x32>
 800d584:	4b0e      	ldr	r3, [pc, #56]	; (800d5c0 <tcp_listen_closed+0x60>)
 800d586:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d58a:	4910      	ldr	r1, [pc, #64]	; (800d5cc <tcp_listen_closed+0x6c>)
 800d58c:	480e      	ldr	r0, [pc, #56]	; (800d5c8 <tcp_listen_closed+0x68>)
 800d58e:	f009 fa89 	bl	8016aa4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d592:	2301      	movs	r3, #1
 800d594:	60fb      	str	r3, [r7, #12]
 800d596:	e00b      	b.n	800d5b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d598:	4a0d      	ldr	r2, [pc, #52]	; (800d5d0 <tcp_listen_closed+0x70>)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6879      	ldr	r1, [r7, #4]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff ffb1 	bl	800d50c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d9f0      	bls.n	800d598 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	08018714 	.word	0x08018714
 800d5c4:	080187c4 	.word	0x080187c4
 800d5c8:	08018758 	.word	0x08018758
 800d5cc:	080187d0 	.word	0x080187d0
 800d5d0:	0801a8e0 	.word	0x0801a8e0

0800d5d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d5d4:	b5b0      	push	{r4, r5, r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af04      	add	r7, sp, #16
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d106      	bne.n	800d5f4 <tcp_close_shutdown+0x20>
 800d5e6:	4b63      	ldr	r3, [pc, #396]	; (800d774 <tcp_close_shutdown+0x1a0>)
 800d5e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d5ec:	4962      	ldr	r1, [pc, #392]	; (800d778 <tcp_close_shutdown+0x1a4>)
 800d5ee:	4863      	ldr	r0, [pc, #396]	; (800d77c <tcp_close_shutdown+0x1a8>)
 800d5f0:	f009 fa58 	bl	8016aa4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d5f4:	78fb      	ldrb	r3, [r7, #3]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d066      	beq.n	800d6c8 <tcp_close_shutdown+0xf4>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7d1b      	ldrb	r3, [r3, #20]
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d003      	beq.n	800d60a <tcp_close_shutdown+0x36>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7d1b      	ldrb	r3, [r3, #20]
 800d606:	2b07      	cmp	r3, #7
 800d608:	d15e      	bne.n	800d6c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d104      	bne.n	800d61c <tcp_close_shutdown+0x48>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d616:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d61a:	d055      	beq.n	800d6c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	8b5b      	ldrh	r3, [r3, #26]
 800d620:	f003 0310 	and.w	r3, r3, #16
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <tcp_close_shutdown+0x62>
 800d628:	4b52      	ldr	r3, [pc, #328]	; (800d774 <tcp_close_shutdown+0x1a0>)
 800d62a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d62e:	4954      	ldr	r1, [pc, #336]	; (800d780 <tcp_close_shutdown+0x1ac>)
 800d630:	4852      	ldr	r0, [pc, #328]	; (800d77c <tcp_close_shutdown+0x1a8>)
 800d632:	f009 fa37 	bl	8016aa4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d63e:	687d      	ldr	r5, [r7, #4]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	3304      	adds	r3, #4
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	8ad2      	ldrh	r2, [r2, #22]
 800d648:	6879      	ldr	r1, [r7, #4]
 800d64a:	8b09      	ldrh	r1, [r1, #24]
 800d64c:	9102      	str	r1, [sp, #8]
 800d64e:	9201      	str	r2, [sp, #4]
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	462b      	mov	r3, r5
 800d654:	4622      	mov	r2, r4
 800d656:	4601      	mov	r1, r0
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f004 fe91 	bl	8012380 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f001 f8c6 	bl	800e7f0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d664:	4b47      	ldr	r3, [pc, #284]	; (800d784 <tcp_close_shutdown+0x1b0>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d105      	bne.n	800d67a <tcp_close_shutdown+0xa6>
 800d66e:	4b45      	ldr	r3, [pc, #276]	; (800d784 <tcp_close_shutdown+0x1b0>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	4a43      	ldr	r2, [pc, #268]	; (800d784 <tcp_close_shutdown+0x1b0>)
 800d676:	6013      	str	r3, [r2, #0]
 800d678:	e013      	b.n	800d6a2 <tcp_close_shutdown+0xce>
 800d67a:	4b42      	ldr	r3, [pc, #264]	; (800d784 <tcp_close_shutdown+0x1b0>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	60fb      	str	r3, [r7, #12]
 800d680:	e00c      	b.n	800d69c <tcp_close_shutdown+0xc8>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d104      	bne.n	800d696 <tcp_close_shutdown+0xc2>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	68da      	ldr	r2, [r3, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	60da      	str	r2, [r3, #12]
 800d694:	e005      	b.n	800d6a2 <tcp_close_shutdown+0xce>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1ef      	bne.n	800d682 <tcp_close_shutdown+0xae>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	60da      	str	r2, [r3, #12]
 800d6a8:	4b37      	ldr	r3, [pc, #220]	; (800d788 <tcp_close_shutdown+0x1b4>)
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d6ae:	4b37      	ldr	r3, [pc, #220]	; (800d78c <tcp_close_shutdown+0x1b8>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d102      	bne.n	800d6be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d6b8:	f003 fd5e 	bl	8011178 <tcp_trigger_input_pcb_close>
 800d6bc:	e002      	b.n	800d6c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f7ff fed6 	bl	800d470 <tcp_free>
      }
      return ERR_OK;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e050      	b.n	800d76a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d03b      	beq.n	800d748 <tcp_close_shutdown+0x174>
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	dc44      	bgt.n	800d75e <tcp_close_shutdown+0x18a>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <tcp_close_shutdown+0x10a>
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d02a      	beq.n	800d732 <tcp_close_shutdown+0x15e>
 800d6dc:	e03f      	b.n	800d75e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	8adb      	ldrh	r3, [r3, #22]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d021      	beq.n	800d72a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6e6:	4b2a      	ldr	r3, [pc, #168]	; (800d790 <tcp_close_shutdown+0x1bc>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d105      	bne.n	800d6fc <tcp_close_shutdown+0x128>
 800d6f0:	4b27      	ldr	r3, [pc, #156]	; (800d790 <tcp_close_shutdown+0x1bc>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	4a26      	ldr	r2, [pc, #152]	; (800d790 <tcp_close_shutdown+0x1bc>)
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	e013      	b.n	800d724 <tcp_close_shutdown+0x150>
 800d6fc:	4b24      	ldr	r3, [pc, #144]	; (800d790 <tcp_close_shutdown+0x1bc>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60bb      	str	r3, [r7, #8]
 800d702:	e00c      	b.n	800d71e <tcp_close_shutdown+0x14a>
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d104      	bne.n	800d718 <tcp_close_shutdown+0x144>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68da      	ldr	r2, [r3, #12]
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	60da      	str	r2, [r3, #12]
 800d716:	e005      	b.n	800d724 <tcp_close_shutdown+0x150>
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	60bb      	str	r3, [r7, #8]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1ef      	bne.n	800d704 <tcp_close_shutdown+0x130>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fea0 	bl	800d470 <tcp_free>
      break;
 800d730:	e01a      	b.n	800d768 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff ff14 	bl	800d560 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	4816      	ldr	r0, [pc, #88]	; (800d794 <tcp_close_shutdown+0x1c0>)
 800d73c:	f001 f8a8 	bl	800e890 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff feb1 	bl	800d4a8 <tcp_free_listen>
      break;
 800d746:	e00f      	b.n	800d768 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	480e      	ldr	r0, [pc, #56]	; (800d784 <tcp_close_shutdown+0x1b0>)
 800d74c:	f001 f8a0 	bl	800e890 <tcp_pcb_remove>
 800d750:	4b0d      	ldr	r3, [pc, #52]	; (800d788 <tcp_close_shutdown+0x1b4>)
 800d752:	2201      	movs	r2, #1
 800d754:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff fe8a 	bl	800d470 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d75c:	e004      	b.n	800d768 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f81a 	bl	800d798 <tcp_close_shutdown_fin>
 800d764:	4603      	mov	r3, r0
 800d766:	e000      	b.n	800d76a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bdb0      	pop	{r4, r5, r7, pc}
 800d772:	bf00      	nop
 800d774:	08018714 	.word	0x08018714
 800d778:	080187e8 	.word	0x080187e8
 800d77c:	08018758 	.word	0x08018758
 800d780:	08018808 	.word	0x08018808
 800d784:	20008c88 	.word	0x20008c88
 800d788:	20008c90 	.word	0x20008c90
 800d78c:	20008cc8 	.word	0x20008cc8
 800d790:	20008c80 	.word	0x20008c80
 800d794:	20008c84 	.word	0x20008c84

0800d798 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d106      	bne.n	800d7b4 <tcp_close_shutdown_fin+0x1c>
 800d7a6:	4b2e      	ldr	r3, [pc, #184]	; (800d860 <tcp_close_shutdown_fin+0xc8>)
 800d7a8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d7ac:	492d      	ldr	r1, [pc, #180]	; (800d864 <tcp_close_shutdown_fin+0xcc>)
 800d7ae:	482e      	ldr	r0, [pc, #184]	; (800d868 <tcp_close_shutdown_fin+0xd0>)
 800d7b0:	f009 f978 	bl	8016aa4 <iprintf>

  switch (pcb->state) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7d1b      	ldrb	r3, [r3, #20]
 800d7b8:	2b07      	cmp	r3, #7
 800d7ba:	d020      	beq.n	800d7fe <tcp_close_shutdown_fin+0x66>
 800d7bc:	2b07      	cmp	r3, #7
 800d7be:	dc2b      	bgt.n	800d818 <tcp_close_shutdown_fin+0x80>
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d002      	beq.n	800d7ca <tcp_close_shutdown_fin+0x32>
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d00d      	beq.n	800d7e4 <tcp_close_shutdown_fin+0x4c>
 800d7c8:	e026      	b.n	800d818 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f003 fee6 	bl	801159c <tcp_send_fin>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d11f      	bne.n	800d81c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2205      	movs	r2, #5
 800d7e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7e2:	e01b      	b.n	800d81c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f003 fed9 	bl	801159c <tcp_send_fin>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d114      	bne.n	800d820 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2205      	movs	r2, #5
 800d7fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7fc:	e010      	b.n	800d820 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f003 fecc 	bl	801159c <tcp_send_fin>
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d109      	bne.n	800d824 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2209      	movs	r2, #9
 800d814:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d816:	e005      	b.n	800d824 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	e01c      	b.n	800d856 <tcp_close_shutdown_fin+0xbe>
      break;
 800d81c:	bf00      	nop
 800d81e:	e002      	b.n	800d826 <tcp_close_shutdown_fin+0x8e>
      break;
 800d820:	bf00      	nop
 800d822:	e000      	b.n	800d826 <tcp_close_shutdown_fin+0x8e>
      break;
 800d824:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d103      	bne.n	800d836 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f003 fff2 	bl	8011818 <tcp_output>
 800d834:	e00d      	b.n	800d852 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d108      	bne.n	800d852 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	8b5b      	ldrh	r3, [r3, #26]
 800d844:	f043 0308 	orr.w	r3, r3, #8
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	e001      	b.n	800d856 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	08018714 	.word	0x08018714
 800d864:	080187c4 	.word	0x080187c4
 800d868:	08018758 	.word	0x08018758

0800d86c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d109      	bne.n	800d88e <tcp_close+0x22>
 800d87a:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <tcp_close+0x4c>)
 800d87c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d880:	490e      	ldr	r1, [pc, #56]	; (800d8bc <tcp_close+0x50>)
 800d882:	480f      	ldr	r0, [pc, #60]	; (800d8c0 <tcp_close+0x54>)
 800d884:	f009 f90e 	bl	8016aa4 <iprintf>
 800d888:	f06f 030f 	mvn.w	r3, #15
 800d88c:	e00f      	b.n	800d8ae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	7d1b      	ldrb	r3, [r3, #20]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d006      	beq.n	800d8a4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	8b5b      	ldrh	r3, [r3, #26]
 800d89a:	f043 0310 	orr.w	r3, r3, #16
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff fe94 	bl	800d5d4 <tcp_close_shutdown>
 800d8ac:	4603      	mov	r3, r0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	08018714 	.word	0x08018714
 800d8bc:	08018824 	.word	0x08018824
 800d8c0:	08018758 	.word	0x08018758

0800d8c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08e      	sub	sp, #56	; 0x38
 800d8c8:	af04      	add	r7, sp, #16
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d107      	bne.n	800d8e4 <tcp_abandon+0x20>
 800d8d4:	4b52      	ldr	r3, [pc, #328]	; (800da20 <tcp_abandon+0x15c>)
 800d8d6:	f240 223d 	movw	r2, #573	; 0x23d
 800d8da:	4952      	ldr	r1, [pc, #328]	; (800da24 <tcp_abandon+0x160>)
 800d8dc:	4852      	ldr	r0, [pc, #328]	; (800da28 <tcp_abandon+0x164>)
 800d8de:	f009 f8e1 	bl	8016aa4 <iprintf>
 800d8e2:	e099      	b.n	800da18 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d106      	bne.n	800d8fa <tcp_abandon+0x36>
 800d8ec:	4b4c      	ldr	r3, [pc, #304]	; (800da20 <tcp_abandon+0x15c>)
 800d8ee:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d8f2:	494e      	ldr	r1, [pc, #312]	; (800da2c <tcp_abandon+0x168>)
 800d8f4:	484c      	ldr	r0, [pc, #304]	; (800da28 <tcp_abandon+0x164>)
 800d8f6:	f009 f8d5 	bl	8016aa4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7d1b      	ldrb	r3, [r3, #20]
 800d8fe:	2b0a      	cmp	r3, #10
 800d900:	d107      	bne.n	800d912 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	484a      	ldr	r0, [pc, #296]	; (800da30 <tcp_abandon+0x16c>)
 800d906:	f000 ffc3 	bl	800e890 <tcp_pcb_remove>
    tcp_free(pcb);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7ff fdb0 	bl	800d470 <tcp_free>
 800d910:	e082      	b.n	800da18 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d91e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d924:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d92c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	7d1b      	ldrb	r3, [r3, #20]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d126      	bne.n	800d98a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	8adb      	ldrh	r3, [r3, #22]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d02e      	beq.n	800d9a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d944:	4b3b      	ldr	r3, [pc, #236]	; (800da34 <tcp_abandon+0x170>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d105      	bne.n	800d95a <tcp_abandon+0x96>
 800d94e:	4b39      	ldr	r3, [pc, #228]	; (800da34 <tcp_abandon+0x170>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	4a37      	ldr	r2, [pc, #220]	; (800da34 <tcp_abandon+0x170>)
 800d956:	6013      	str	r3, [r2, #0]
 800d958:	e013      	b.n	800d982 <tcp_abandon+0xbe>
 800d95a:	4b36      	ldr	r3, [pc, #216]	; (800da34 <tcp_abandon+0x170>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	61fb      	str	r3, [r7, #28]
 800d960:	e00c      	b.n	800d97c <tcp_abandon+0xb8>
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d104      	bne.n	800d976 <tcp_abandon+0xb2>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	60da      	str	r2, [r3, #12]
 800d974:	e005      	b.n	800d982 <tcp_abandon+0xbe>
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	61fb      	str	r3, [r7, #28]
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1ef      	bne.n	800d962 <tcp_abandon+0x9e>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	60da      	str	r2, [r3, #12]
 800d988:	e00b      	b.n	800d9a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	8adb      	ldrh	r3, [r3, #22]
 800d992:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d994:	6879      	ldr	r1, [r7, #4]
 800d996:	4828      	ldr	r0, [pc, #160]	; (800da38 <tcp_abandon+0x174>)
 800d998:	f000 ff7a 	bl	800e890 <tcp_pcb_remove>
 800d99c:	4b27      	ldr	r3, [pc, #156]	; (800da3c <tcp_abandon+0x178>)
 800d99e:	2201      	movs	r2, #1
 800d9a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d004      	beq.n	800d9b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 fd1c 	bl	800e3ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 fd13 	bl	800e3ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d004      	beq.n	800d9d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 fd0a 	bl	800e3ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00e      	beq.n	800d9fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d9de:	6879      	ldr	r1, [r7, #4]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	8b12      	ldrh	r2, [r2, #24]
 800d9e8:	9202      	str	r2, [sp, #8]
 800d9ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d9ec:	9201      	str	r2, [sp, #4]
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	69b9      	ldr	r1, [r7, #24]
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f004 fcc2 	bl	8012380 <tcp_rst>
    }
    last_state = pcb->state;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
 800da00:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff fd34 	bl	800d470 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d004      	beq.n	800da18 <tcp_abandon+0x154>
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	f06f 010c 	mvn.w	r1, #12
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	4798      	blx	r3
  }
}
 800da18:	3728      	adds	r7, #40	; 0x28
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	08018714 	.word	0x08018714
 800da24:	08018858 	.word	0x08018858
 800da28:	08018758 	.word	0x08018758
 800da2c:	08018874 	.word	0x08018874
 800da30:	20008c8c 	.word	0x20008c8c
 800da34:	20008c80 	.word	0x20008c80
 800da38:	20008c88 	.word	0x20008c88
 800da3c:	20008c90 	.word	0x20008c90

0800da40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800da48:	2101      	movs	r1, #1
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff ff3a 	bl	800d8c4 <tcp_abandon>
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d106      	bne.n	800da74 <tcp_update_rcv_ann_wnd+0x1c>
 800da66:	4b25      	ldr	r3, [pc, #148]	; (800dafc <tcp_update_rcv_ann_wnd+0xa4>)
 800da68:	f240 32a6 	movw	r2, #934	; 0x3a6
 800da6c:	4924      	ldr	r1, [pc, #144]	; (800db00 <tcp_update_rcv_ann_wnd+0xa8>)
 800da6e:	4825      	ldr	r0, [pc, #148]	; (800db04 <tcp_update_rcv_ann_wnd+0xac>)
 800da70:	f009 f818 	bl	8016aa4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800da7c:	4413      	add	r3, r2
 800da7e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800da88:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800da8c:	bf28      	it	cs
 800da8e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800da92:	b292      	uxth	r2, r2
 800da94:	4413      	add	r3, r2
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	db08      	blt.n	800dab0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	e020      	b.n	800daf2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	1ad3      	subs	r3, r2, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	dd03      	ble.n	800dac6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dac4:	e014      	b.n	800daf0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad8:	d306      	bcc.n	800dae8 <tcp_update_rcv_ann_wnd+0x90>
 800dada:	4b08      	ldr	r3, [pc, #32]	; (800dafc <tcp_update_rcv_ann_wnd+0xa4>)
 800dadc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dae0:	4909      	ldr	r1, [pc, #36]	; (800db08 <tcp_update_rcv_ann_wnd+0xb0>)
 800dae2:	4808      	ldr	r0, [pc, #32]	; (800db04 <tcp_update_rcv_ann_wnd+0xac>)
 800dae4:	f008 ffde 	bl	8016aa4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	b29a      	uxth	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800daf0:	2300      	movs	r3, #0
  }
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	08018714 	.word	0x08018714
 800db00:	08018970 	.word	0x08018970
 800db04:	08018758 	.word	0x08018758
 800db08:	08018994 	.word	0x08018994

0800db0c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d107      	bne.n	800db2e <tcp_recved+0x22>
 800db1e:	4b1f      	ldr	r3, [pc, #124]	; (800db9c <tcp_recved+0x90>)
 800db20:	f240 32cf 	movw	r2, #975	; 0x3cf
 800db24:	491e      	ldr	r1, [pc, #120]	; (800dba0 <tcp_recved+0x94>)
 800db26:	481f      	ldr	r0, [pc, #124]	; (800dba4 <tcp_recved+0x98>)
 800db28:	f008 ffbc 	bl	8016aa4 <iprintf>
 800db2c:	e032      	b.n	800db94 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	7d1b      	ldrb	r3, [r3, #20]
 800db32:	2b01      	cmp	r3, #1
 800db34:	d106      	bne.n	800db44 <tcp_recved+0x38>
 800db36:	4b19      	ldr	r3, [pc, #100]	; (800db9c <tcp_recved+0x90>)
 800db38:	f240 32d2 	movw	r2, #978	; 0x3d2
 800db3c:	491a      	ldr	r1, [pc, #104]	; (800dba8 <tcp_recved+0x9c>)
 800db3e:	4819      	ldr	r0, [pc, #100]	; (800dba4 <tcp_recved+0x98>)
 800db40:	f008 ffb0 	bl	8016aa4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db48:	887b      	ldrh	r3, [r7, #2]
 800db4a:	4413      	add	r3, r2
 800db4c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800db4e:	89fb      	ldrh	r3, [r7, #14]
 800db50:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db54:	d804      	bhi.n	800db60 <tcp_recved+0x54>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db5a:	89fa      	ldrh	r2, [r7, #14]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d204      	bcs.n	800db6a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800db66:	851a      	strh	r2, [r3, #40]	; 0x28
 800db68:	e002      	b.n	800db70 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	89fa      	ldrh	r2, [r7, #14]
 800db6e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff ff71 	bl	800da58 <tcp_update_rcv_ann_wnd>
 800db76:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800db7e:	d309      	bcc.n	800db94 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8b5b      	ldrh	r3, [r3, #26]
 800db84:	f043 0302 	orr.w	r3, r3, #2
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f003 fe42 	bl	8011818 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	08018714 	.word	0x08018714
 800dba0:	080189b0 	.word	0x080189b0
 800dba4:	08018758 	.word	0x08018758
 800dba8:	080189c8 	.word	0x080189c8

0800dbac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dbac:	b5b0      	push	{r4, r5, r7, lr}
 800dbae:	b090      	sub	sp, #64	; 0x40
 800dbb0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dbb8:	4b94      	ldr	r3, [pc, #592]	; (800de0c <tcp_slowtmr+0x260>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	4a93      	ldr	r2, [pc, #588]	; (800de0c <tcp_slowtmr+0x260>)
 800dbc0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dbc2:	4b93      	ldr	r3, [pc, #588]	; (800de10 <tcp_slowtmr+0x264>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	4b91      	ldr	r3, [pc, #580]	; (800de10 <tcp_slowtmr+0x264>)
 800dbcc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dbd2:	4b90      	ldr	r3, [pc, #576]	; (800de14 <tcp_slowtmr+0x268>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dbd8:	e29d      	b.n	800e116 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	7d1b      	ldrb	r3, [r3, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d106      	bne.n	800dbf0 <tcp_slowtmr+0x44>
 800dbe2:	4b8d      	ldr	r3, [pc, #564]	; (800de18 <tcp_slowtmr+0x26c>)
 800dbe4:	f240 42be 	movw	r2, #1214	; 0x4be
 800dbe8:	498c      	ldr	r1, [pc, #560]	; (800de1c <tcp_slowtmr+0x270>)
 800dbea:	488d      	ldr	r0, [pc, #564]	; (800de20 <tcp_slowtmr+0x274>)
 800dbec:	f008 ff5a 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	7d1b      	ldrb	r3, [r3, #20]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d106      	bne.n	800dc06 <tcp_slowtmr+0x5a>
 800dbf8:	4b87      	ldr	r3, [pc, #540]	; (800de18 <tcp_slowtmr+0x26c>)
 800dbfa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dbfe:	4989      	ldr	r1, [pc, #548]	; (800de24 <tcp_slowtmr+0x278>)
 800dc00:	4887      	ldr	r0, [pc, #540]	; (800de20 <tcp_slowtmr+0x274>)
 800dc02:	f008 ff4f 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc08:	7d1b      	ldrb	r3, [r3, #20]
 800dc0a:	2b0a      	cmp	r3, #10
 800dc0c:	d106      	bne.n	800dc1c <tcp_slowtmr+0x70>
 800dc0e:	4b82      	ldr	r3, [pc, #520]	; (800de18 <tcp_slowtmr+0x26c>)
 800dc10:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dc14:	4984      	ldr	r1, [pc, #528]	; (800de28 <tcp_slowtmr+0x27c>)
 800dc16:	4882      	ldr	r0, [pc, #520]	; (800de20 <tcp_slowtmr+0x274>)
 800dc18:	f008 ff44 	bl	8016aa4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	7f9a      	ldrb	r2, [r3, #30]
 800dc20:	4b7b      	ldr	r3, [pc, #492]	; (800de10 <tcp_slowtmr+0x264>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d105      	bne.n	800dc34 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dc32:	e270      	b.n	800e116 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dc34:	4b76      	ldr	r3, [pc, #472]	; (800de10 <tcp_slowtmr+0x264>)
 800dc36:	781a      	ldrb	r2, [r3, #0]
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	7d1b      	ldrb	r3, [r3, #20]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d10a      	bne.n	800dc66 <tcp_slowtmr+0xba>
 800dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	d905      	bls.n	800dc66 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dc5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc5e:	3301      	adds	r3, #1
 800dc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc64:	e11e      	b.n	800dea4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc6c:	2b0b      	cmp	r3, #11
 800dc6e:	d905      	bls.n	800dc7c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc74:	3301      	adds	r3, #1
 800dc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc7a:	e113      	b.n	800dea4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d075      	beq.n	800dd72 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <tcp_slowtmr+0xf0>
 800dc8e:	4b62      	ldr	r3, [pc, #392]	; (800de18 <tcp_slowtmr+0x26c>)
 800dc90:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dc94:	4965      	ldr	r1, [pc, #404]	; (800de2c <tcp_slowtmr+0x280>)
 800dc96:	4862      	ldr	r0, [pc, #392]	; (800de20 <tcp_slowtmr+0x274>)
 800dc98:	f008 ff04 	bl	8016aa4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <tcp_slowtmr+0x106>
 800dca4:	4b5c      	ldr	r3, [pc, #368]	; (800de18 <tcp_slowtmr+0x26c>)
 800dca6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dcaa:	4961      	ldr	r1, [pc, #388]	; (800de30 <tcp_slowtmr+0x284>)
 800dcac:	485c      	ldr	r0, [pc, #368]	; (800de20 <tcp_slowtmr+0x274>)
 800dcae:	f008 fef9 	bl	8016aa4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dcb8:	2b0b      	cmp	r3, #11
 800dcba:	d905      	bls.n	800dcc8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dcbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcc6:	e0ed      	b.n	800dea4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	4a58      	ldr	r2, [pc, #352]	; (800de34 <tcp_slowtmr+0x288>)
 800dcd2:	5cd3      	ldrb	r3, [r2, r3]
 800dcd4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dcdc:	7c7a      	ldrb	r2, [r7, #17]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d907      	bls.n	800dcf2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dce8:	3301      	adds	r3, #1
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dcf8:	7c7a      	ldrb	r2, [r7, #17]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	f200 80d2 	bhi.w	800dea4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dd00:	2301      	movs	r3, #1
 800dd02:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d108      	bne.n	800dd20 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd10:	f004 fc2a 	bl	8012568 <tcp_zero_window_probe>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d014      	beq.n	800dd44 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	623b      	str	r3, [r7, #32]
 800dd1e:	e011      	b.n	800dd44 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd26:	4619      	mov	r1, r3
 800dd28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd2a:	f003 faef 	bl	801130c <tcp_split_unsent_seg>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dd34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd36:	f003 fd6f 	bl	8011818 <tcp_output>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 80ac 	beq.w	800dea4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd5a:	2b06      	cmp	r3, #6
 800dd5c:	f200 80a2 	bhi.w	800dea4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd66:	3301      	adds	r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800dd70:	e098      	b.n	800dea4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	db0f      	blt.n	800dd9c <tcp_slowtmr+0x1f0>
 800dd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd82:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d008      	beq.n	800dd9c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800dd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3301      	adds	r3, #1
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	b21a      	sxth	r2, r3
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	db7b      	blt.n	800dea4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ddac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddae:	f004 f825 	bl	8011dfc <tcp_rexmit_rto_prepare>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d007      	beq.n	800ddc8 <tcp_slowtmr+0x21c>
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d171      	bne.n	800dea4 <tcp_slowtmr+0x2f8>
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d06d      	beq.n	800dea4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	7d1b      	ldrb	r3, [r3, #20]
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d03a      	beq.n	800de46 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddd6:	2b0c      	cmp	r3, #12
 800ddd8:	bf28      	it	cs
 800ddda:	230c      	movcs	r3, #12
 800dddc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dde4:	10db      	asrs	r3, r3, #3
 800dde6:	b21b      	sxth	r3, r3
 800dde8:	461a      	mov	r2, r3
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ddf0:	4413      	add	r3, r2
 800ddf2:	7efa      	ldrb	r2, [r7, #27]
 800ddf4:	4910      	ldr	r1, [pc, #64]	; (800de38 <tcp_slowtmr+0x28c>)
 800ddf6:	5c8a      	ldrb	r2, [r1, r2]
 800ddf8:	4093      	lsls	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800de02:	4293      	cmp	r3, r2
 800de04:	dc1a      	bgt.n	800de3c <tcp_slowtmr+0x290>
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	b21a      	sxth	r2, r3
 800de0a:	e019      	b.n	800de40 <tcp_slowtmr+0x294>
 800de0c:	20008c7c 	.word	0x20008c7c
 800de10:	20008c92 	.word	0x20008c92
 800de14:	20008c88 	.word	0x20008c88
 800de18:	08018714 	.word	0x08018714
 800de1c:	08018a58 	.word	0x08018a58
 800de20:	08018758 	.word	0x08018758
 800de24:	08018a84 	.word	0x08018a84
 800de28:	08018ab0 	.word	0x08018ab0
 800de2c:	08018ae0 	.word	0x08018ae0
 800de30:	08018b14 	.word	0x08018b14
 800de34:	0801a8d8 	.word	0x0801a8d8
 800de38:	0801a8c8 	.word	0x0801a8c8
 800de3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	2200      	movs	r2, #0
 800de4a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de58:	4293      	cmp	r3, r2
 800de5a:	bf28      	it	cs
 800de5c:	4613      	movcs	r3, r2
 800de5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800de60:	8a7b      	ldrh	r3, [r7, #18]
 800de62:	085b      	lsrs	r3, r3, #1
 800de64:	b29a      	uxth	r2, r3
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800de6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	b29b      	uxth	r3, r3
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d206      	bcs.n	800de8c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	b29a      	uxth	r2, r3
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800de96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de98:	2200      	movs	r2, #0
 800de9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800de9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dea0:	f004 f81c 	bl	8011edc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	7d1b      	ldrb	r3, [r3, #20]
 800dea8:	2b06      	cmp	r3, #6
 800deaa:	d111      	bne.n	800ded0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	8b5b      	ldrh	r3, [r3, #26]
 800deb0:	f003 0310 	and.w	r3, r3, #16
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deb8:	4b9c      	ldr	r3, [pc, #624]	; (800e12c <tcp_slowtmr+0x580>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	2b28      	cmp	r3, #40	; 0x28
 800dec4:	d904      	bls.n	800ded0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deca:	3301      	adds	r3, #1
 800decc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	7a5b      	ldrb	r3, [r3, #9]
 800ded4:	f003 0308 	and.w	r3, r3, #8
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d04a      	beq.n	800df72 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dede:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d003      	beq.n	800deec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dee8:	2b07      	cmp	r3, #7
 800deea:	d142      	bne.n	800df72 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deec:	4b8f      	ldr	r3, [pc, #572]	; (800e12c <tcp_slowtmr+0x580>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800def6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800defc:	4b8c      	ldr	r3, [pc, #560]	; (800e130 <tcp_slowtmr+0x584>)
 800defe:	440b      	add	r3, r1
 800df00:	498c      	ldr	r1, [pc, #560]	; (800e134 <tcp_slowtmr+0x588>)
 800df02:	fba1 1303 	umull	r1, r3, r1, r3
 800df06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df08:	429a      	cmp	r2, r3
 800df0a:	d90a      	bls.n	800df22 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800df0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df10:	3301      	adds	r3, #1
 800df12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800df16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df1a:	3301      	adds	r3, #1
 800df1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df20:	e027      	b.n	800df72 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df22:	4b82      	ldr	r3, [pc, #520]	; (800e12c <tcp_slowtmr+0x580>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df28:	6a1b      	ldr	r3, [r3, #32]
 800df2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800df38:	4618      	mov	r0, r3
 800df3a:	4b7f      	ldr	r3, [pc, #508]	; (800e138 <tcp_slowtmr+0x58c>)
 800df3c:	fb00 f303 	mul.w	r3, r0, r3
 800df40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800df42:	497c      	ldr	r1, [pc, #496]	; (800e134 <tcp_slowtmr+0x588>)
 800df44:	fba1 1303 	umull	r1, r3, r1, r3
 800df48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d911      	bls.n	800df72 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800df4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df50:	f004 faca 	bl	80124e8 <tcp_keepalive>
 800df54:	4603      	mov	r3, r0
 800df56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800df5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d107      	bne.n	800df72 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800df68:	3301      	adds	r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df76:	2b00      	cmp	r3, #0
 800df78:	d011      	beq.n	800df9e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800df7a:	4b6c      	ldr	r3, [pc, #432]	; (800e12c <tcp_slowtmr+0x580>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	1ad2      	subs	r2, r2, r3
 800df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800df8a:	4619      	mov	r1, r3
 800df8c:	460b      	mov	r3, r1
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	440b      	add	r3, r1
 800df92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800df94:	429a      	cmp	r2, r3
 800df96:	d302      	bcc.n	800df9e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800df98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df9a:	f000 fddd 	bl	800eb58 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800df9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa0:	7d1b      	ldrb	r3, [r3, #20]
 800dfa2:	2b03      	cmp	r3, #3
 800dfa4:	d10b      	bne.n	800dfbe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfa6:	4b61      	ldr	r3, [pc, #388]	; (800e12c <tcp_slowtmr+0x580>)
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	2b28      	cmp	r3, #40	; 0x28
 800dfb2:	d904      	bls.n	800dfbe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb8:	3301      	adds	r3, #1
 800dfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	7d1b      	ldrb	r3, [r3, #20]
 800dfc2:	2b09      	cmp	r3, #9
 800dfc4:	d10b      	bne.n	800dfde <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dfc6:	4b59      	ldr	r3, [pc, #356]	; (800e12c <tcp_slowtmr+0x580>)
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	2bf0      	cmp	r3, #240	; 0xf0
 800dfd2:	d904      	bls.n	800dfde <tcp_slowtmr+0x432>
        ++pcb_remove;
 800dfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfd8:	3301      	adds	r3, #1
 800dfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dfde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d060      	beq.n	800e0a8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dfee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dff0:	f000 fbfe 	bl	800e7f0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d010      	beq.n	800e01c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dffa:	4b50      	ldr	r3, [pc, #320]	; (800e13c <tcp_slowtmr+0x590>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e000:	429a      	cmp	r2, r3
 800e002:	d106      	bne.n	800e012 <tcp_slowtmr+0x466>
 800e004:	4b4e      	ldr	r3, [pc, #312]	; (800e140 <tcp_slowtmr+0x594>)
 800e006:	f240 526d 	movw	r2, #1389	; 0x56d
 800e00a:	494e      	ldr	r1, [pc, #312]	; (800e144 <tcp_slowtmr+0x598>)
 800e00c:	484e      	ldr	r0, [pc, #312]	; (800e148 <tcp_slowtmr+0x59c>)
 800e00e:	f008 fd49 	bl	8016aa4 <iprintf>
        prev->next = pcb->next;
 800e012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	e00f      	b.n	800e03c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e01c:	4b47      	ldr	r3, [pc, #284]	; (800e13c <tcp_slowtmr+0x590>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e022:	429a      	cmp	r2, r3
 800e024:	d006      	beq.n	800e034 <tcp_slowtmr+0x488>
 800e026:	4b46      	ldr	r3, [pc, #280]	; (800e140 <tcp_slowtmr+0x594>)
 800e028:	f240 5271 	movw	r2, #1393	; 0x571
 800e02c:	4947      	ldr	r1, [pc, #284]	; (800e14c <tcp_slowtmr+0x5a0>)
 800e02e:	4846      	ldr	r0, [pc, #280]	; (800e148 <tcp_slowtmr+0x59c>)
 800e030:	f008 fd38 	bl	8016aa4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	4a40      	ldr	r2, [pc, #256]	; (800e13c <tcp_slowtmr+0x590>)
 800e03a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e03c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e040:	2b00      	cmp	r3, #0
 800e042:	d013      	beq.n	800e06c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e04c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e050:	3304      	adds	r3, #4
 800e052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e054:	8ad2      	ldrh	r2, [r2, #22]
 800e056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e058:	8b09      	ldrh	r1, [r1, #24]
 800e05a:	9102      	str	r1, [sp, #8]
 800e05c:	9201      	str	r2, [sp, #4]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	462b      	mov	r3, r5
 800e062:	4622      	mov	r2, r4
 800e064:	4601      	mov	r1, r0
 800e066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e068:	f004 f98a 	bl	8012380 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	691b      	ldr	r3, [r3, #16]
 800e070:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e082:	6838      	ldr	r0, [r7, #0]
 800e084:	f7ff f9f4 	bl	800d470 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e088:	4b31      	ldr	r3, [pc, #196]	; (800e150 <tcp_slowtmr+0x5a4>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d004      	beq.n	800e09e <tcp_slowtmr+0x4f2>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f06f 010c 	mvn.w	r1, #12
 800e09a:	68b8      	ldr	r0, [r7, #8]
 800e09c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e09e:	4b2c      	ldr	r3, [pc, #176]	; (800e150 <tcp_slowtmr+0x5a4>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d037      	beq.n	800e116 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e0a6:	e592      	b.n	800dbce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	7f1b      	ldrb	r3, [r3, #28]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c0:	7f1a      	ldrb	r2, [r3, #28]
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	7f5b      	ldrb	r3, [r3, #29]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d325      	bcc.n	800e116 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e0d0:	4b1f      	ldr	r3, [pc, #124]	; (800e150 <tcp_slowtmr+0x5a4>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <tcp_slowtmr+0x54c>
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0e8:	6912      	ldr	r2, [r2, #16]
 800e0ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e0f6:	e002      	b.n	800e0fe <tcp_slowtmr+0x552>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e0fe:	4b14      	ldr	r3, [pc, #80]	; (800e150 <tcp_slowtmr+0x5a4>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d000      	beq.n	800e108 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e106:	e562      	b.n	800dbce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e108:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e112:	f003 fb81 	bl	8011818 <tcp_output>
  while (pcb != NULL) {
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f47f ad5e 	bne.w	800dbda <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e11e:	2300      	movs	r3, #0
 800e120:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <tcp_slowtmr+0x5a8>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e128:	e069      	b.n	800e1fe <tcp_slowtmr+0x652>
 800e12a:	bf00      	nop
 800e12c:	20008c7c 	.word	0x20008c7c
 800e130:	000a4cb8 	.word	0x000a4cb8
 800e134:	10624dd3 	.word	0x10624dd3
 800e138:	000124f8 	.word	0x000124f8
 800e13c:	20008c88 	.word	0x20008c88
 800e140:	08018714 	.word	0x08018714
 800e144:	08018b4c 	.word	0x08018b4c
 800e148:	08018758 	.word	0x08018758
 800e14c:	08018b78 	.word	0x08018b78
 800e150:	20008c90 	.word	0x20008c90
 800e154:	20008c8c 	.word	0x20008c8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	7d1b      	ldrb	r3, [r3, #20]
 800e15c:	2b0a      	cmp	r3, #10
 800e15e:	d006      	beq.n	800e16e <tcp_slowtmr+0x5c2>
 800e160:	4b2b      	ldr	r3, [pc, #172]	; (800e210 <tcp_slowtmr+0x664>)
 800e162:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e166:	492b      	ldr	r1, [pc, #172]	; (800e214 <tcp_slowtmr+0x668>)
 800e168:	482b      	ldr	r0, [pc, #172]	; (800e218 <tcp_slowtmr+0x66c>)
 800e16a:	f008 fc9b 	bl	8016aa4 <iprintf>
    pcb_remove = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e174:	4b29      	ldr	r3, [pc, #164]	; (800e21c <tcp_slowtmr+0x670>)
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	6a1b      	ldr	r3, [r3, #32]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	2bf0      	cmp	r3, #240	; 0xf0
 800e180:	d904      	bls.n	800e18c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e186:	3301      	adds	r3, #1
 800e188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e190:	2b00      	cmp	r3, #0
 800e192:	d02f      	beq.n	800e1f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e196:	f000 fb2b 	bl	800e7f0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d010      	beq.n	800e1c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e1a0:	4b1f      	ldr	r3, [pc, #124]	; (800e220 <tcp_slowtmr+0x674>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d106      	bne.n	800e1b8 <tcp_slowtmr+0x60c>
 800e1aa:	4b19      	ldr	r3, [pc, #100]	; (800e210 <tcp_slowtmr+0x664>)
 800e1ac:	f240 52af 	movw	r2, #1455	; 0x5af
 800e1b0:	491c      	ldr	r1, [pc, #112]	; (800e224 <tcp_slowtmr+0x678>)
 800e1b2:	4819      	ldr	r0, [pc, #100]	; (800e218 <tcp_slowtmr+0x66c>)
 800e1b4:	f008 fc76 	bl	8016aa4 <iprintf>
        prev->next = pcb->next;
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	68da      	ldr	r2, [r3, #12]
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1be:	60da      	str	r2, [r3, #12]
 800e1c0:	e00f      	b.n	800e1e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e1c2:	4b17      	ldr	r3, [pc, #92]	; (800e220 <tcp_slowtmr+0x674>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d006      	beq.n	800e1da <tcp_slowtmr+0x62e>
 800e1cc:	4b10      	ldr	r3, [pc, #64]	; (800e210 <tcp_slowtmr+0x664>)
 800e1ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e1d2:	4915      	ldr	r1, [pc, #84]	; (800e228 <tcp_slowtmr+0x67c>)
 800e1d4:	4810      	ldr	r0, [pc, #64]	; (800e218 <tcp_slowtmr+0x66c>)
 800e1d6:	f008 fc65 	bl	8016aa4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	4a10      	ldr	r2, [pc, #64]	; (800e220 <tcp_slowtmr+0x674>)
 800e1e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e1ec:	69f8      	ldr	r0, [r7, #28]
 800e1ee:	f7ff f93f 	bl	800d470 <tcp_free>
 800e1f2:	e004      	b.n	800e1fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1a9      	bne.n	800e158 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop
 800e208:	3730      	adds	r7, #48	; 0x30
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bdb0      	pop	{r4, r5, r7, pc}
 800e20e:	bf00      	nop
 800e210:	08018714 	.word	0x08018714
 800e214:	08018ba4 	.word	0x08018ba4
 800e218:	08018758 	.word	0x08018758
 800e21c:	20008c7c 	.word	0x20008c7c
 800e220:	20008c8c 	.word	0x20008c8c
 800e224:	08018bd4 	.word	0x08018bd4
 800e228:	08018bfc 	.word	0x08018bfc

0800e22c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e232:	4b2d      	ldr	r3, [pc, #180]	; (800e2e8 <tcp_fasttmr+0xbc>)
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	3301      	adds	r3, #1
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	4b2b      	ldr	r3, [pc, #172]	; (800e2e8 <tcp_fasttmr+0xbc>)
 800e23c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e23e:	4b2b      	ldr	r3, [pc, #172]	; (800e2ec <tcp_fasttmr+0xc0>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e244:	e048      	b.n	800e2d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	7f9a      	ldrb	r2, [r3, #30]
 800e24a:	4b27      	ldr	r3, [pc, #156]	; (800e2e8 <tcp_fasttmr+0xbc>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d03f      	beq.n	800e2d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e252:	4b25      	ldr	r3, [pc, #148]	; (800e2e8 <tcp_fasttmr+0xbc>)
 800e254:	781a      	ldrb	r2, [r3, #0]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8b5b      	ldrh	r3, [r3, #26]
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	2b00      	cmp	r3, #0
 800e264:	d010      	beq.n	800e288 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	8b5b      	ldrh	r3, [r3, #26]
 800e26a:	f043 0302 	orr.w	r3, r3, #2
 800e26e:	b29a      	uxth	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f003 facf 	bl	8011818 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8b5b      	ldrh	r3, [r3, #26]
 800e27e:	f023 0303 	bic.w	r3, r3, #3
 800e282:	b29a      	uxth	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	8b5b      	ldrh	r3, [r3, #26]
 800e28c:	f003 0308 	and.w	r3, r3, #8
 800e290:	2b00      	cmp	r3, #0
 800e292:	d009      	beq.n	800e2a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	8b5b      	ldrh	r3, [r3, #26]
 800e298:	f023 0308 	bic.w	r3, r3, #8
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff fa78 	bl	800d798 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00a      	beq.n	800e2cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e2b6:	4b0e      	ldr	r3, [pc, #56]	; (800e2f0 <tcp_fasttmr+0xc4>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f819 	bl	800e2f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e2c2:	4b0b      	ldr	r3, [pc, #44]	; (800e2f0 <tcp_fasttmr+0xc4>)
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d000      	beq.n	800e2cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e2ca:	e7b8      	b.n	800e23e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	607b      	str	r3, [r7, #4]
 800e2d0:	e002      	b.n	800e2d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1b3      	bne.n	800e246 <tcp_fasttmr+0x1a>
    }
  }
}
 800e2de:	bf00      	nop
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20008c92 	.word	0x20008c92
 800e2ec:	20008c88 	.word	0x20008c88
 800e2f0:	20008c90 	.word	0x20008c90

0800e2f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d109      	bne.n	800e316 <tcp_process_refused_data+0x22>
 800e302:	4b37      	ldr	r3, [pc, #220]	; (800e3e0 <tcp_process_refused_data+0xec>)
 800e304:	f240 6209 	movw	r2, #1545	; 0x609
 800e308:	4936      	ldr	r1, [pc, #216]	; (800e3e4 <tcp_process_refused_data+0xf0>)
 800e30a:	4837      	ldr	r0, [pc, #220]	; (800e3e8 <tcp_process_refused_data+0xf4>)
 800e30c:	f008 fbca 	bl	8016aa4 <iprintf>
 800e310:	f06f 030f 	mvn.w	r3, #15
 800e314:	e060      	b.n	800e3d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e31a:	7b5b      	ldrb	r3, [r3, #13]
 800e31c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e322:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00b      	beq.n	800e34c <tcp_process_refused_data+0x58>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6918      	ldr	r0, [r3, #16]
 800e33e:	2300      	movs	r3, #0
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	47a0      	blx	r4
 800e346:	4603      	mov	r3, r0
 800e348:	73fb      	strb	r3, [r7, #15]
 800e34a:	e007      	b.n	800e35c <tcp_process_refused_data+0x68>
 800e34c:	2300      	movs	r3, #0
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	6879      	ldr	r1, [r7, #4]
 800e352:	2000      	movs	r0, #0
 800e354:	f000 f8a4 	bl	800e4a0 <tcp_recv_null>
 800e358:	4603      	mov	r3, r0
 800e35a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d12a      	bne.n	800e3ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	f003 0320 	and.w	r3, r3, #32
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d033      	beq.n	800e3d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e372:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e376:	d005      	beq.n	800e384 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e37c:	3301      	adds	r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <tcp_process_refused_data+0xb2>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6918      	ldr	r0, [r3, #16]
 800e398:	2300      	movs	r3, #0
 800e39a:	2200      	movs	r2, #0
 800e39c:	6879      	ldr	r1, [r7, #4]
 800e39e:	47a0      	blx	r4
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
 800e3a4:	e001      	b.n	800e3aa <tcp_process_refused_data+0xb6>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3ae:	f113 0f0d 	cmn.w	r3, #13
 800e3b2:	d110      	bne.n	800e3d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e3b4:	f06f 030c 	mvn.w	r3, #12
 800e3b8:	e00e      	b.n	800e3d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3be:	f113 0f0d 	cmn.w	r3, #13
 800e3c2:	d102      	bne.n	800e3ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e3c4:	f06f 030c 	mvn.w	r3, #12
 800e3c8:	e006      	b.n	800e3d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e3d0:	f06f 0304 	mvn.w	r3, #4
 800e3d4:	e000      	b.n	800e3d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd90      	pop	{r4, r7, pc}
 800e3e0:	08018714 	.word	0x08018714
 800e3e4:	08018c24 	.word	0x08018c24
 800e3e8:	08018758 	.word	0x08018758

0800e3ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e3f4:	e007      	b.n	800e406 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f80a 	bl	800e416 <tcp_seg_free>
    seg = next;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1f4      	bne.n	800e3f6 <tcp_segs_free+0xa>
  }
}
 800e40c:	bf00      	nop
 800e40e:	bf00      	nop
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00c      	beq.n	800e43e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d004      	beq.n	800e436 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	f7fe fcdb 	bl	800cdec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	2003      	movs	r0, #3
 800e43a:	f7fd fe61 	bl	800c100 <memp_free>
  }
}
 800e43e:	bf00      	nop
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <tcp_seg_copy+0x1c>
 800e456:	4b0f      	ldr	r3, [pc, #60]	; (800e494 <tcp_seg_copy+0x4c>)
 800e458:	f240 6282 	movw	r2, #1666	; 0x682
 800e45c:	490e      	ldr	r1, [pc, #56]	; (800e498 <tcp_seg_copy+0x50>)
 800e45e:	480f      	ldr	r0, [pc, #60]	; (800e49c <tcp_seg_copy+0x54>)
 800e460:	f008 fb20 	bl	8016aa4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e464:	2003      	movs	r0, #3
 800e466:	f7fd fddb 	bl	800c020 <memp_malloc>
 800e46a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <tcp_seg_copy+0x2e>
    return NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	e00a      	b.n	800e48c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e476:	2210      	movs	r2, #16
 800e478:	6879      	ldr	r1, [r7, #4]
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f008 fafc 	bl	8016a78 <memcpy>
  pbuf_ref(cseg->p);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fd51 	bl	800cf2c <pbuf_ref>
  return cseg;
 800e48a:	68fb      	ldr	r3, [r7, #12]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	08018714 	.word	0x08018714
 800e498:	08018c68 	.word	0x08018c68
 800e49c:	08018758 	.word	0x08018758

0800e4a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d109      	bne.n	800e4c8 <tcp_recv_null+0x28>
 800e4b4:	4b12      	ldr	r3, [pc, #72]	; (800e500 <tcp_recv_null+0x60>)
 800e4b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e4ba:	4912      	ldr	r1, [pc, #72]	; (800e504 <tcp_recv_null+0x64>)
 800e4bc:	4812      	ldr	r0, [pc, #72]	; (800e508 <tcp_recv_null+0x68>)
 800e4be:	f008 faf1 	bl	8016aa4 <iprintf>
 800e4c2:	f06f 030f 	mvn.w	r3, #15
 800e4c6:	e016      	b.n	800e4f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d009      	beq.n	800e4e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	891b      	ldrh	r3, [r3, #8]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	68b8      	ldr	r0, [r7, #8]
 800e4d6:	f7ff fb19 	bl	800db0c <tcp_recved>
    pbuf_free(p);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7fe fc86 	bl	800cdec <pbuf_free>
 800e4e0:	e008      	b.n	800e4f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e4e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d104      	bne.n	800e4f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e4ea:	68b8      	ldr	r0, [r7, #8]
 800e4ec:	f7ff f9be 	bl	800d86c <tcp_close>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	e000      	b.n	800e4f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	08018714 	.word	0x08018714
 800e504:	08018c84 	.word	0x08018c84
 800e508:	08018758 	.word	0x08018758

0800e50c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	4603      	mov	r3, r0
 800e514:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	db01      	blt.n	800e522 <tcp_kill_prio+0x16>
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	e000      	b.n	800e524 <tcp_kill_prio+0x18>
 800e522:	237f      	movs	r3, #127	; 0x7f
 800e524:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e526:	7afb      	ldrb	r3, [r7, #11]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d034      	beq.n	800e596 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e52c:	7afb      	ldrb	r3, [r7, #11]
 800e52e:	3b01      	subs	r3, #1
 800e530:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e536:	2300      	movs	r3, #0
 800e538:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e53a:	4b19      	ldr	r3, [pc, #100]	; (800e5a0 <tcp_kill_prio+0x94>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	e01f      	b.n	800e582 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	7d5b      	ldrb	r3, [r3, #21]
 800e546:	7afa      	ldrb	r2, [r7, #11]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d80c      	bhi.n	800e566 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e550:	7afa      	ldrb	r2, [r7, #11]
 800e552:	429a      	cmp	r2, r3
 800e554:	d112      	bne.n	800e57c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <tcp_kill_prio+0x98>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	429a      	cmp	r2, r3
 800e564:	d80a      	bhi.n	800e57c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e566:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <tcp_kill_prio+0x98>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	7d5b      	ldrb	r3, [r3, #21]
 800e57a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	617b      	str	r3, [r7, #20]
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1dc      	bne.n	800e542 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d004      	beq.n	800e598 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e58e:	6938      	ldr	r0, [r7, #16]
 800e590:	f7ff fa56 	bl	800da40 <tcp_abort>
 800e594:	e000      	b.n	800e598 <tcp_kill_prio+0x8c>
    return;
 800e596:	bf00      	nop
  }
}
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20008c88 	.word	0x20008c88
 800e5a4:	20008c7c 	.word	0x20008c7c

0800e5a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d009      	beq.n	800e5cc <tcp_kill_state+0x24>
 800e5b8:	79fb      	ldrb	r3, [r7, #7]
 800e5ba:	2b09      	cmp	r3, #9
 800e5bc:	d006      	beq.n	800e5cc <tcp_kill_state+0x24>
 800e5be:	4b1a      	ldr	r3, [pc, #104]	; (800e628 <tcp_kill_state+0x80>)
 800e5c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e5c4:	4919      	ldr	r1, [pc, #100]	; (800e62c <tcp_kill_state+0x84>)
 800e5c6:	481a      	ldr	r0, [pc, #104]	; (800e630 <tcp_kill_state+0x88>)
 800e5c8:	f008 fa6c 	bl	8016aa4 <iprintf>

  inactivity = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5d4:	4b17      	ldr	r3, [pc, #92]	; (800e634 <tcp_kill_state+0x8c>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	617b      	str	r3, [r7, #20]
 800e5da:	e017      	b.n	800e60c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
 800e5e0:	79fa      	ldrb	r2, [r7, #7]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d10f      	bne.n	800e606 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e5e6:	4b14      	ldr	r3, [pc, #80]	; (800e638 <tcp_kill_state+0x90>)
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	6a1b      	ldr	r3, [r3, #32]
 800e5ee:	1ad3      	subs	r3, r2, r3
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d807      	bhi.n	800e606 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e5f6:	4b10      	ldr	r3, [pc, #64]	; (800e638 <tcp_kill_state+0x90>)
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	6a1b      	ldr	r3, [r3, #32]
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	617b      	str	r3, [r7, #20]
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1e4      	bne.n	800e5dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e618:	2100      	movs	r1, #0
 800e61a:	6938      	ldr	r0, [r7, #16]
 800e61c:	f7ff f952 	bl	800d8c4 <tcp_abandon>
  }
}
 800e620:	bf00      	nop
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	08018714 	.word	0x08018714
 800e62c:	08018ca0 	.word	0x08018ca0
 800e630:	08018758 	.word	0x08018758
 800e634:	20008c88 	.word	0x20008c88
 800e638:	20008c7c 	.word	0x20008c7c

0800e63c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e64a:	4b12      	ldr	r3, [pc, #72]	; (800e694 <tcp_kill_timewait+0x58>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	e012      	b.n	800e678 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e652:	4b11      	ldr	r3, [pc, #68]	; (800e698 <tcp_kill_timewait+0x5c>)
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d807      	bhi.n	800e672 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e662:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <tcp_kill_timewait+0x5c>)
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6a1b      	ldr	r3, [r3, #32]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	60fb      	str	r3, [r7, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1e9      	bne.n	800e652 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e684:	68b8      	ldr	r0, [r7, #8]
 800e686:	f7ff f9db 	bl	800da40 <tcp_abort>
  }
}
 800e68a:	bf00      	nop
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	20008c8c 	.word	0x20008c8c
 800e698:	20008c7c 	.word	0x20008c7c

0800e69c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e6a2:	4b10      	ldr	r3, [pc, #64]	; (800e6e4 <tcp_handle_closepend+0x48>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e6a8:	e014      	b.n	800e6d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	8b5b      	ldrh	r3, [r3, #26]
 800e6b4:	f003 0308 	and.w	r3, r3, #8
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d009      	beq.n	800e6d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	8b5b      	ldrh	r3, [r3, #26]
 800e6c0:	f023 0308 	bic.w	r3, r3, #8
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff f864 	bl	800d798 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1e7      	bne.n	800e6aa <tcp_handle_closepend+0xe>
  }
}
 800e6da:	bf00      	nop
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	20008c88 	.word	0x20008c88

0800e6e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6f2:	2001      	movs	r0, #1
 800e6f4:	f7fd fc94 	bl	800c020 <memp_malloc>
 800e6f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d126      	bne.n	800e74e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e700:	f7ff ffcc 	bl	800e69c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e704:	f7ff ff9a 	bl	800e63c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e708:	2001      	movs	r0, #1
 800e70a:	f7fd fc89 	bl	800c020 <memp_malloc>
 800e70e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d11b      	bne.n	800e74e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e716:	2009      	movs	r0, #9
 800e718:	f7ff ff46 	bl	800e5a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e71c:	2001      	movs	r0, #1
 800e71e:	f7fd fc7f 	bl	800c020 <memp_malloc>
 800e722:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d111      	bne.n	800e74e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e72a:	2008      	movs	r0, #8
 800e72c:	f7ff ff3c 	bl	800e5a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e730:	2001      	movs	r0, #1
 800e732:	f7fd fc75 	bl	800c020 <memp_malloc>
 800e736:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d107      	bne.n	800e74e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff fee3 	bl	800e50c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e746:	2001      	movs	r0, #1
 800e748:	f7fd fc6a 	bl	800c020 <memp_malloc>
 800e74c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d03f      	beq.n	800e7d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e754:	229c      	movs	r2, #156	; 0x9c
 800e756:	2100      	movs	r1, #0
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f008 f99b 	bl	8016a94 <memset>
    pcb->prio = prio;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	79fa      	ldrb	r2, [r7, #7]
 800e762:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e76a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e774:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	22ff      	movs	r2, #255	; 0xff
 800e782:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e78a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2206      	movs	r2, #6
 800e790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2206      	movs	r2, #6
 800e798:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e7aa:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <tcp_alloc+0xf8>)
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e7b2:	4b0c      	ldr	r3, [pc, #48]	; (800e7e4 <tcp_alloc+0xfc>)
 800e7b4:	781a      	ldrb	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e7c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	4a08      	ldr	r2, [pc, #32]	; (800e7e8 <tcp_alloc+0x100>)
 800e7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <tcp_alloc+0x104>)
 800e7d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	20008c7c 	.word	0x20008c7c
 800e7e4:	20008c92 	.word	0x20008c92
 800e7e8:	0800e4a1 	.word	0x0800e4a1
 800e7ec:	006ddd00 	.word	0x006ddd00

0800e7f0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d107      	bne.n	800e80e <tcp_pcb_purge+0x1e>
 800e7fe:	4b21      	ldr	r3, [pc, #132]	; (800e884 <tcp_pcb_purge+0x94>)
 800e800:	f640 0251 	movw	r2, #2129	; 0x851
 800e804:	4920      	ldr	r1, [pc, #128]	; (800e888 <tcp_pcb_purge+0x98>)
 800e806:	4821      	ldr	r0, [pc, #132]	; (800e88c <tcp_pcb_purge+0x9c>)
 800e808:	f008 f94c 	bl	8016aa4 <iprintf>
 800e80c:	e037      	b.n	800e87e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	7d1b      	ldrb	r3, [r3, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d033      	beq.n	800e87e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e81a:	2b0a      	cmp	r3, #10
 800e81c:	d02f      	beq.n	800e87e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e822:	2b01      	cmp	r3, #1
 800e824:	d02b      	beq.n	800e87e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d007      	beq.n	800e83e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e832:	4618      	mov	r0, r3
 800e834:	f7fe fada 	bl	800cdec <pbuf_free>
      pcb->refused_data = NULL;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e842:	2b00      	cmp	r3, #0
 800e844:	d002      	beq.n	800e84c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f986 	bl	800eb58 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e852:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff fdc7 	bl	800e3ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e862:	4618      	mov	r0, r3
 800e864:	f7ff fdc2 	bl	800e3ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	08018714 	.word	0x08018714
 800e888:	08018d60 	.word	0x08018d60
 800e88c:	08018758 	.word	0x08018758

0800e890 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d106      	bne.n	800e8ae <tcp_pcb_remove+0x1e>
 800e8a0:	4b3e      	ldr	r3, [pc, #248]	; (800e99c <tcp_pcb_remove+0x10c>)
 800e8a2:	f640 0283 	movw	r2, #2179	; 0x883
 800e8a6:	493e      	ldr	r1, [pc, #248]	; (800e9a0 <tcp_pcb_remove+0x110>)
 800e8a8:	483e      	ldr	r0, [pc, #248]	; (800e9a4 <tcp_pcb_remove+0x114>)
 800e8aa:	f008 f8fb 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d106      	bne.n	800e8c2 <tcp_pcb_remove+0x32>
 800e8b4:	4b39      	ldr	r3, [pc, #228]	; (800e99c <tcp_pcb_remove+0x10c>)
 800e8b6:	f640 0284 	movw	r2, #2180	; 0x884
 800e8ba:	493b      	ldr	r1, [pc, #236]	; (800e9a8 <tcp_pcb_remove+0x118>)
 800e8bc:	4839      	ldr	r0, [pc, #228]	; (800e9a4 <tcp_pcb_remove+0x114>)
 800e8be:	f008 f8f1 	bl	8016aa4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d105      	bne.n	800e8d8 <tcp_pcb_remove+0x48>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68da      	ldr	r2, [r3, #12]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	601a      	str	r2, [r3, #0]
 800e8d6:	e013      	b.n	800e900 <tcp_pcb_remove+0x70>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e00c      	b.n	800e8fa <tcp_pcb_remove+0x6a>
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	683a      	ldr	r2, [r7, #0]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d104      	bne.n	800e8f4 <tcp_pcb_remove+0x64>
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	68da      	ldr	r2, [r3, #12]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	60da      	str	r2, [r3, #12]
 800e8f2:	e005      	b.n	800e900 <tcp_pcb_remove+0x70>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	60fb      	str	r3, [r7, #12]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1ef      	bne.n	800e8e0 <tcp_pcb_remove+0x50>
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2200      	movs	r2, #0
 800e904:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e906:	6838      	ldr	r0, [r7, #0]
 800e908:	f7ff ff72 	bl	800e7f0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	7d1b      	ldrb	r3, [r3, #20]
 800e910:	2b0a      	cmp	r3, #10
 800e912:	d013      	beq.n	800e93c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d00f      	beq.n	800e93c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	8b5b      	ldrh	r3, [r3, #26]
 800e920:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e924:	2b00      	cmp	r3, #0
 800e926:	d009      	beq.n	800e93c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	8b5b      	ldrh	r3, [r3, #26]
 800e92c:	f043 0302 	orr.w	r3, r3, #2
 800e930:	b29a      	uxth	r2, r3
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e936:	6838      	ldr	r0, [r7, #0]
 800e938:	f002 ff6e 	bl	8011818 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	7d1b      	ldrb	r3, [r3, #20]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d020      	beq.n	800e986 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d006      	beq.n	800e95a <tcp_pcb_remove+0xca>
 800e94c:	4b13      	ldr	r3, [pc, #76]	; (800e99c <tcp_pcb_remove+0x10c>)
 800e94e:	f640 0293 	movw	r2, #2195	; 0x893
 800e952:	4916      	ldr	r1, [pc, #88]	; (800e9ac <tcp_pcb_remove+0x11c>)
 800e954:	4813      	ldr	r0, [pc, #76]	; (800e9a4 <tcp_pcb_remove+0x114>)
 800e956:	f008 f8a5 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d006      	beq.n	800e970 <tcp_pcb_remove+0xe0>
 800e962:	4b0e      	ldr	r3, [pc, #56]	; (800e99c <tcp_pcb_remove+0x10c>)
 800e964:	f640 0294 	movw	r2, #2196	; 0x894
 800e968:	4911      	ldr	r1, [pc, #68]	; (800e9b0 <tcp_pcb_remove+0x120>)
 800e96a:	480e      	ldr	r0, [pc, #56]	; (800e9a4 <tcp_pcb_remove+0x114>)
 800e96c:	f008 f89a 	bl	8016aa4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e974:	2b00      	cmp	r3, #0
 800e976:	d006      	beq.n	800e986 <tcp_pcb_remove+0xf6>
 800e978:	4b08      	ldr	r3, [pc, #32]	; (800e99c <tcp_pcb_remove+0x10c>)
 800e97a:	f640 0296 	movw	r2, #2198	; 0x896
 800e97e:	490d      	ldr	r1, [pc, #52]	; (800e9b4 <tcp_pcb_remove+0x124>)
 800e980:	4808      	ldr	r0, [pc, #32]	; (800e9a4 <tcp_pcb_remove+0x114>)
 800e982:	f008 f88f 	bl	8016aa4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2200      	movs	r2, #0
 800e98a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2200      	movs	r2, #0
 800e990:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e992:	bf00      	nop
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	08018714 	.word	0x08018714
 800e9a0:	08018d7c 	.word	0x08018d7c
 800e9a4:	08018758 	.word	0x08018758
 800e9a8:	08018d98 	.word	0x08018d98
 800e9ac:	08018db8 	.word	0x08018db8
 800e9b0:	08018dd0 	.word	0x08018dd0
 800e9b4:	08018dec 	.word	0x08018dec

0800e9b8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d106      	bne.n	800e9d4 <tcp_next_iss+0x1c>
 800e9c6:	4b0a      	ldr	r3, [pc, #40]	; (800e9f0 <tcp_next_iss+0x38>)
 800e9c8:	f640 02af 	movw	r2, #2223	; 0x8af
 800e9cc:	4909      	ldr	r1, [pc, #36]	; (800e9f4 <tcp_next_iss+0x3c>)
 800e9ce:	480a      	ldr	r0, [pc, #40]	; (800e9f8 <tcp_next_iss+0x40>)
 800e9d0:	f008 f868 	bl	8016aa4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e9d4:	4b09      	ldr	r3, [pc, #36]	; (800e9fc <tcp_next_iss+0x44>)
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <tcp_next_iss+0x48>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4413      	add	r3, r2
 800e9de:	4a07      	ldr	r2, [pc, #28]	; (800e9fc <tcp_next_iss+0x44>)
 800e9e0:	6013      	str	r3, [r2, #0]
  return iss;
 800e9e2:	4b06      	ldr	r3, [pc, #24]	; (800e9fc <tcp_next_iss+0x44>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3708      	adds	r7, #8
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	08018714 	.word	0x08018714
 800e9f4:	08018e04 	.word	0x08018e04
 800e9f8:	08018758 	.word	0x08018758
 800e9fc:	20000024 	.word	0x20000024
 800ea00:	20008c7c 	.word	0x20008c7c

0800ea04 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
 800ea10:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d106      	bne.n	800ea26 <tcp_eff_send_mss_netif+0x22>
 800ea18:	4b14      	ldr	r3, [pc, #80]	; (800ea6c <tcp_eff_send_mss_netif+0x68>)
 800ea1a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ea1e:	4914      	ldr	r1, [pc, #80]	; (800ea70 <tcp_eff_send_mss_netif+0x6c>)
 800ea20:	4814      	ldr	r0, [pc, #80]	; (800ea74 <tcp_eff_send_mss_netif+0x70>)
 800ea22:	f008 f83f 	bl	8016aa4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ea2c:	89fb      	ldrh	r3, [r7, #14]
 800ea2e:	e019      	b.n	800ea64 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea34:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ea36:	8afb      	ldrh	r3, [r7, #22]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d012      	beq.n	800ea62 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ea3c:	2328      	movs	r3, #40	; 0x28
 800ea3e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ea40:	8afa      	ldrh	r2, [r7, #22]
 800ea42:	8abb      	ldrh	r3, [r7, #20]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d904      	bls.n	800ea52 <tcp_eff_send_mss_netif+0x4e>
 800ea48:	8afa      	ldrh	r2, [r7, #22]
 800ea4a:	8abb      	ldrh	r3, [r7, #20]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	e000      	b.n	800ea54 <tcp_eff_send_mss_netif+0x50>
 800ea52:	2300      	movs	r3, #0
 800ea54:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ea56:	8a7a      	ldrh	r2, [r7, #18]
 800ea58:	89fb      	ldrh	r3, [r7, #14]
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	bf28      	it	cs
 800ea5e:	4613      	movcs	r3, r2
 800ea60:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ea62:	89fb      	ldrh	r3, [r7, #14]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	08018714 	.word	0x08018714
 800ea70:	08018e20 	.word	0x08018e20
 800ea74:	08018758 	.word	0x08018758

0800ea78 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d119      	bne.n	800eac0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ea8c:	4b10      	ldr	r3, [pc, #64]	; (800ead0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ea8e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ea92:	4910      	ldr	r1, [pc, #64]	; (800ead4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ea94:	4810      	ldr	r0, [pc, #64]	; (800ead8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ea96:	f008 f805 	bl	8016aa4 <iprintf>

  while (pcb != NULL) {
 800ea9a:	e011      	b.n	800eac0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d108      	bne.n	800eaba <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f7fe ffc6 	bl	800da40 <tcp_abort>
      pcb = next;
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	e002      	b.n	800eac0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1ea      	bne.n	800ea9c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800eac6:	bf00      	nop
 800eac8:	bf00      	nop
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	08018714 	.word	0x08018714
 800ead4:	08018e48 	.word	0x08018e48
 800ead8:	08018758 	.word	0x08018758

0800eadc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d02a      	beq.n	800eb42 <tcp_netif_ip_addr_changed+0x66>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d026      	beq.n	800eb42 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eaf4:	4b15      	ldr	r3, [pc, #84]	; (800eb4c <tcp_netif_ip_addr_changed+0x70>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7ff ffbc 	bl	800ea78 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eb00:	4b13      	ldr	r3, [pc, #76]	; (800eb50 <tcp_netif_ip_addr_changed+0x74>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4619      	mov	r1, r3
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7ff ffb6 	bl	800ea78 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d017      	beq.n	800eb42 <tcp_netif_ip_addr_changed+0x66>
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d013      	beq.n	800eb42 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb1a:	4b0e      	ldr	r3, [pc, #56]	; (800eb54 <tcp_netif_ip_addr_changed+0x78>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e00c      	b.n	800eb3c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d103      	bne.n	800eb36 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1ef      	bne.n	800eb22 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eb42:	bf00      	nop
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20008c88 	.word	0x20008c88
 800eb50:	20008c80 	.word	0x20008c80
 800eb54:	20008c84 	.word	0x20008c84

0800eb58 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d007      	beq.n	800eb78 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7ff fc3d 	bl	800e3ec <tcp_segs_free>
    pcb->ooseq = NULL;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eb80:	b590      	push	{r4, r7, lr}
 800eb82:	b08d      	sub	sp, #52	; 0x34
 800eb84:	af04      	add	r7, sp, #16
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d105      	bne.n	800eb9c <tcp_input+0x1c>
 800eb90:	4b9b      	ldr	r3, [pc, #620]	; (800ee00 <tcp_input+0x280>)
 800eb92:	2283      	movs	r2, #131	; 0x83
 800eb94:	499b      	ldr	r1, [pc, #620]	; (800ee04 <tcp_input+0x284>)
 800eb96:	489c      	ldr	r0, [pc, #624]	; (800ee08 <tcp_input+0x288>)
 800eb98:	f007 ff84 	bl	8016aa4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	4a9a      	ldr	r2, [pc, #616]	; (800ee0c <tcp_input+0x28c>)
 800eba2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	895b      	ldrh	r3, [r3, #10]
 800eba8:	2b13      	cmp	r3, #19
 800ebaa:	f240 83d1 	bls.w	800f350 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ebae:	4b98      	ldr	r3, [pc, #608]	; (800ee10 <tcp_input+0x290>)
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	4a97      	ldr	r2, [pc, #604]	; (800ee10 <tcp_input+0x290>)
 800ebb4:	6812      	ldr	r2, [r2, #0]
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f005 ffd1 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f040 83c7 	bne.w	800f354 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ebc6:	4b92      	ldr	r3, [pc, #584]	; (800ee10 <tcp_input+0x290>)
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ebce:	2be0      	cmp	r3, #224	; 0xe0
 800ebd0:	f000 83c0 	beq.w	800f354 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ebd4:	4b8d      	ldr	r3, [pc, #564]	; (800ee0c <tcp_input+0x28c>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	899b      	ldrh	r3, [r3, #12]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fc fda7 	bl	800b730 <lwip_htons>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	0b1b      	lsrs	r3, r3, #12
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ebee:	7cbb      	ldrb	r3, [r7, #18]
 800ebf0:	2b13      	cmp	r3, #19
 800ebf2:	f240 83b1 	bls.w	800f358 <tcp_input+0x7d8>
 800ebf6:	7cbb      	ldrb	r3, [r7, #18]
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	891b      	ldrh	r3, [r3, #8]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	f200 83aa 	bhi.w	800f358 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ec04:	7cbb      	ldrb	r3, [r7, #18]
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	3b14      	subs	r3, #20
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	4b81      	ldr	r3, [pc, #516]	; (800ee14 <tcp_input+0x294>)
 800ec0e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ec10:	4b81      	ldr	r3, [pc, #516]	; (800ee18 <tcp_input+0x298>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	895a      	ldrh	r2, [r3, #10]
 800ec1a:	7cbb      	ldrb	r3, [r7, #18]
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d309      	bcc.n	800ec36 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ec22:	4b7c      	ldr	r3, [pc, #496]	; (800ee14 <tcp_input+0x294>)
 800ec24:	881a      	ldrh	r2, [r3, #0]
 800ec26:	4b7d      	ldr	r3, [pc, #500]	; (800ee1c <tcp_input+0x29c>)
 800ec28:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec2a:	7cbb      	ldrb	r3, [r7, #18]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7fe f856 	bl	800cce0 <pbuf_remove_header>
 800ec34:	e04e      	b.n	800ecd4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d105      	bne.n	800ec4a <tcp_input+0xca>
 800ec3e:	4b70      	ldr	r3, [pc, #448]	; (800ee00 <tcp_input+0x280>)
 800ec40:	22c2      	movs	r2, #194	; 0xc2
 800ec42:	4977      	ldr	r1, [pc, #476]	; (800ee20 <tcp_input+0x2a0>)
 800ec44:	4870      	ldr	r0, [pc, #448]	; (800ee08 <tcp_input+0x288>)
 800ec46:	f007 ff2d 	bl	8016aa4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ec4a:	2114      	movs	r1, #20
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7fe f847 	bl	800cce0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	895a      	ldrh	r2, [r3, #10]
 800ec56:	4b71      	ldr	r3, [pc, #452]	; (800ee1c <tcp_input+0x29c>)
 800ec58:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ec5a:	4b6e      	ldr	r3, [pc, #440]	; (800ee14 <tcp_input+0x294>)
 800ec5c:	881a      	ldrh	r2, [r3, #0]
 800ec5e:	4b6f      	ldr	r3, [pc, #444]	; (800ee1c <tcp_input+0x29c>)
 800ec60:	881b      	ldrh	r3, [r3, #0]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ec66:	4b6d      	ldr	r3, [pc, #436]	; (800ee1c <tcp_input+0x29c>)
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7fe f837 	bl	800cce0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	895b      	ldrh	r3, [r3, #10]
 800ec78:	8a3a      	ldrh	r2, [r7, #16]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	f200 836e 	bhi.w	800f35c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	4a64      	ldr	r2, [pc, #400]	; (800ee18 <tcp_input+0x298>)
 800ec88:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	8a3a      	ldrh	r2, [r7, #16]
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe f824 	bl	800cce0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	891a      	ldrh	r2, [r3, #8]
 800ec9c:	8a3b      	ldrh	r3, [r7, #16]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	895b      	ldrh	r3, [r3, #10]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d005      	beq.n	800ecba <tcp_input+0x13a>
 800ecae:	4b54      	ldr	r3, [pc, #336]	; (800ee00 <tcp_input+0x280>)
 800ecb0:	22df      	movs	r2, #223	; 0xdf
 800ecb2:	495c      	ldr	r1, [pc, #368]	; (800ee24 <tcp_input+0x2a4>)
 800ecb4:	4854      	ldr	r0, [pc, #336]	; (800ee08 <tcp_input+0x288>)
 800ecb6:	f007 fef5 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	891a      	ldrh	r2, [r3, #8]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	891b      	ldrh	r3, [r3, #8]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d005      	beq.n	800ecd4 <tcp_input+0x154>
 800ecc8:	4b4d      	ldr	r3, [pc, #308]	; (800ee00 <tcp_input+0x280>)
 800ecca:	22e0      	movs	r2, #224	; 0xe0
 800eccc:	4956      	ldr	r1, [pc, #344]	; (800ee28 <tcp_input+0x2a8>)
 800ecce:	484e      	ldr	r0, [pc, #312]	; (800ee08 <tcp_input+0x288>)
 800ecd0:	f007 fee8 	bl	8016aa4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ecd4:	4b4d      	ldr	r3, [pc, #308]	; (800ee0c <tcp_input+0x28c>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	4a4b      	ldr	r2, [pc, #300]	; (800ee0c <tcp_input+0x28c>)
 800ecde:	6814      	ldr	r4, [r2, #0]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fc fd25 	bl	800b730 <lwip_htons>
 800ece6:	4603      	mov	r3, r0
 800ece8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ecea:	4b48      	ldr	r3, [pc, #288]	; (800ee0c <tcp_input+0x28c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	885b      	ldrh	r3, [r3, #2]
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	4a46      	ldr	r2, [pc, #280]	; (800ee0c <tcp_input+0x28c>)
 800ecf4:	6814      	ldr	r4, [r2, #0]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fc fd1a 	bl	800b730 <lwip_htons>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ed00:	4b42      	ldr	r3, [pc, #264]	; (800ee0c <tcp_input+0x28c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	4a41      	ldr	r2, [pc, #260]	; (800ee0c <tcp_input+0x28c>)
 800ed08:	6814      	ldr	r4, [r2, #0]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fc fd25 	bl	800b75a <lwip_htonl>
 800ed10:	4603      	mov	r3, r0
 800ed12:	6063      	str	r3, [r4, #4]
 800ed14:	6863      	ldr	r3, [r4, #4]
 800ed16:	4a45      	ldr	r2, [pc, #276]	; (800ee2c <tcp_input+0x2ac>)
 800ed18:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ed1a:	4b3c      	ldr	r3, [pc, #240]	; (800ee0c <tcp_input+0x28c>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	4a3a      	ldr	r2, [pc, #232]	; (800ee0c <tcp_input+0x28c>)
 800ed22:	6814      	ldr	r4, [r2, #0]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fc fd18 	bl	800b75a <lwip_htonl>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	60a3      	str	r3, [r4, #8]
 800ed2e:	68a3      	ldr	r3, [r4, #8]
 800ed30:	4a3f      	ldr	r2, [pc, #252]	; (800ee30 <tcp_input+0x2b0>)
 800ed32:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ed34:	4b35      	ldr	r3, [pc, #212]	; (800ee0c <tcp_input+0x28c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	89db      	ldrh	r3, [r3, #14]
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	4a33      	ldr	r2, [pc, #204]	; (800ee0c <tcp_input+0x28c>)
 800ed3e:	6814      	ldr	r4, [r2, #0]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fc fcf5 	bl	800b730 <lwip_htons>
 800ed46:	4603      	mov	r3, r0
 800ed48:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ed4a:	4b30      	ldr	r3, [pc, #192]	; (800ee0c <tcp_input+0x28c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	899b      	ldrh	r3, [r3, #12]
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fc fcec 	bl	800b730 <lwip_htons>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	4b34      	ldr	r3, [pc, #208]	; (800ee34 <tcp_input+0x2b4>)
 800ed64:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	891a      	ldrh	r2, [r3, #8]
 800ed6a:	4b33      	ldr	r3, [pc, #204]	; (800ee38 <tcp_input+0x2b8>)
 800ed6c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ed6e:	4b31      	ldr	r3, [pc, #196]	; (800ee34 <tcp_input+0x2b4>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	f003 0303 	and.w	r3, r3, #3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00c      	beq.n	800ed94 <tcp_input+0x214>
    tcplen++;
 800ed7a:	4b2f      	ldr	r3, [pc, #188]	; (800ee38 <tcp_input+0x2b8>)
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	4b2d      	ldr	r3, [pc, #180]	; (800ee38 <tcp_input+0x2b8>)
 800ed84:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	891a      	ldrh	r2, [r3, #8]
 800ed8a:	4b2b      	ldr	r3, [pc, #172]	; (800ee38 <tcp_input+0x2b8>)
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	f200 82e6 	bhi.w	800f360 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed98:	4b28      	ldr	r3, [pc, #160]	; (800ee3c <tcp_input+0x2bc>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	61fb      	str	r3, [r7, #28]
 800ed9e:	e09d      	b.n	800eedc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	7d1b      	ldrb	r3, [r3, #20]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d105      	bne.n	800edb4 <tcp_input+0x234>
 800eda8:	4b15      	ldr	r3, [pc, #84]	; (800ee00 <tcp_input+0x280>)
 800edaa:	22fb      	movs	r2, #251	; 0xfb
 800edac:	4924      	ldr	r1, [pc, #144]	; (800ee40 <tcp_input+0x2c0>)
 800edae:	4816      	ldr	r0, [pc, #88]	; (800ee08 <tcp_input+0x288>)
 800edb0:	f007 fe78 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	7d1b      	ldrb	r3, [r3, #20]
 800edb8:	2b0a      	cmp	r3, #10
 800edba:	d105      	bne.n	800edc8 <tcp_input+0x248>
 800edbc:	4b10      	ldr	r3, [pc, #64]	; (800ee00 <tcp_input+0x280>)
 800edbe:	22fc      	movs	r2, #252	; 0xfc
 800edc0:	4920      	ldr	r1, [pc, #128]	; (800ee44 <tcp_input+0x2c4>)
 800edc2:	4811      	ldr	r0, [pc, #68]	; (800ee08 <tcp_input+0x288>)
 800edc4:	f007 fe6e 	bl	8016aa4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	7d1b      	ldrb	r3, [r3, #20]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d105      	bne.n	800eddc <tcp_input+0x25c>
 800edd0:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <tcp_input+0x280>)
 800edd2:	22fd      	movs	r2, #253	; 0xfd
 800edd4:	491c      	ldr	r1, [pc, #112]	; (800ee48 <tcp_input+0x2c8>)
 800edd6:	480c      	ldr	r0, [pc, #48]	; (800ee08 <tcp_input+0x288>)
 800edd8:	f007 fe64 	bl	8016aa4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	7a1b      	ldrb	r3, [r3, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d033      	beq.n	800ee4c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	7a1a      	ldrb	r2, [r3, #8]
 800ede8:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <tcp_input+0x290>)
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800edf0:	3301      	adds	r3, #1
 800edf2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d029      	beq.n	800ee4c <tcp_input+0x2cc>
      prev = pcb;
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	61bb      	str	r3, [r7, #24]
      continue;
 800edfc:	e06b      	b.n	800eed6 <tcp_input+0x356>
 800edfe:	bf00      	nop
 800ee00:	08018e7c 	.word	0x08018e7c
 800ee04:	08018eb0 	.word	0x08018eb0
 800ee08:	08018ec8 	.word	0x08018ec8
 800ee0c:	20008ca4 	.word	0x20008ca4
 800ee10:	2000570c 	.word	0x2000570c
 800ee14:	20008ca8 	.word	0x20008ca8
 800ee18:	20008cac 	.word	0x20008cac
 800ee1c:	20008caa 	.word	0x20008caa
 800ee20:	08018ef0 	.word	0x08018ef0
 800ee24:	08018f00 	.word	0x08018f00
 800ee28:	08018f0c 	.word	0x08018f0c
 800ee2c:	20008cb4 	.word	0x20008cb4
 800ee30:	20008cb8 	.word	0x20008cb8
 800ee34:	20008cc0 	.word	0x20008cc0
 800ee38:	20008cbe 	.word	0x20008cbe
 800ee3c:	20008c88 	.word	0x20008c88
 800ee40:	08018f2c 	.word	0x08018f2c
 800ee44:	08018f54 	.word	0x08018f54
 800ee48:	08018f80 	.word	0x08018f80
    }

    if (pcb->remote_port == tcphdr->src &&
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	8b1a      	ldrh	r2, [r3, #24]
 800ee50:	4b72      	ldr	r3, [pc, #456]	; (800f01c <tcp_input+0x49c>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d13a      	bne.n	800eed2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	8ada      	ldrh	r2, [r3, #22]
 800ee60:	4b6e      	ldr	r3, [pc, #440]	; (800f01c <tcp_input+0x49c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	885b      	ldrh	r3, [r3, #2]
 800ee66:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d132      	bne.n	800eed2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	4b6b      	ldr	r3, [pc, #428]	; (800f020 <tcp_input+0x4a0>)
 800ee72:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d12c      	bne.n	800eed2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	4b68      	ldr	r3, [pc, #416]	; (800f020 <tcp_input+0x4a0>)
 800ee7e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d126      	bne.n	800eed2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	69fa      	ldr	r2, [r7, #28]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d106      	bne.n	800ee9c <tcp_input+0x31c>
 800ee8e:	4b65      	ldr	r3, [pc, #404]	; (800f024 <tcp_input+0x4a4>)
 800ee90:	f240 120d 	movw	r2, #269	; 0x10d
 800ee94:	4964      	ldr	r1, [pc, #400]	; (800f028 <tcp_input+0x4a8>)
 800ee96:	4865      	ldr	r0, [pc, #404]	; (800f02c <tcp_input+0x4ac>)
 800ee98:	f007 fe04 	bl	8016aa4 <iprintf>
      if (prev != NULL) {
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00a      	beq.n	800eeb8 <tcp_input+0x338>
        prev->next = pcb->next;
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	68da      	ldr	r2, [r3, #12]
 800eea6:	69bb      	ldr	r3, [r7, #24]
 800eea8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800eeaa:	4b61      	ldr	r3, [pc, #388]	; (800f030 <tcp_input+0x4b0>)
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800eeb2:	4a5f      	ldr	r2, [pc, #380]	; (800f030 <tcp_input+0x4b0>)
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	69fa      	ldr	r2, [r7, #28]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d111      	bne.n	800eee6 <tcp_input+0x366>
 800eec2:	4b58      	ldr	r3, [pc, #352]	; (800f024 <tcp_input+0x4a4>)
 800eec4:	f240 1215 	movw	r2, #277	; 0x115
 800eec8:	495a      	ldr	r1, [pc, #360]	; (800f034 <tcp_input+0x4b4>)
 800eeca:	4858      	ldr	r0, [pc, #352]	; (800f02c <tcp_input+0x4ac>)
 800eecc:	f007 fdea 	bl	8016aa4 <iprintf>
      break;
 800eed0:	e009      	b.n	800eee6 <tcp_input+0x366>
    }
    prev = pcb;
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	61fb      	str	r3, [r7, #28]
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	f47f af5e 	bne.w	800eda0 <tcp_input+0x220>
 800eee4:	e000      	b.n	800eee8 <tcp_input+0x368>
      break;
 800eee6:	bf00      	nop
  }

  if (pcb == NULL) {
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f040 80aa 	bne.w	800f044 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eef0:	4b51      	ldr	r3, [pc, #324]	; (800f038 <tcp_input+0x4b8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	61fb      	str	r3, [r7, #28]
 800eef6:	e03f      	b.n	800ef78 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b0a      	cmp	r3, #10
 800eefe:	d006      	beq.n	800ef0e <tcp_input+0x38e>
 800ef00:	4b48      	ldr	r3, [pc, #288]	; (800f024 <tcp_input+0x4a4>)
 800ef02:	f240 121f 	movw	r2, #287	; 0x11f
 800ef06:	494d      	ldr	r1, [pc, #308]	; (800f03c <tcp_input+0x4bc>)
 800ef08:	4848      	ldr	r0, [pc, #288]	; (800f02c <tcp_input+0x4ac>)
 800ef0a:	f007 fdcb 	bl	8016aa4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	7a1b      	ldrb	r3, [r3, #8]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d009      	beq.n	800ef2a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	7a1a      	ldrb	r2, [r3, #8]
 800ef1a:	4b41      	ldr	r3, [pc, #260]	; (800f020 <tcp_input+0x4a0>)
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef22:	3301      	adds	r3, #1
 800ef24:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d122      	bne.n	800ef70 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	8b1a      	ldrh	r2, [r3, #24]
 800ef2e:	4b3b      	ldr	r3, [pc, #236]	; (800f01c <tcp_input+0x49c>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	881b      	ldrh	r3, [r3, #0]
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d11b      	bne.n	800ef72 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	8ada      	ldrh	r2, [r3, #22]
 800ef3e:	4b37      	ldr	r3, [pc, #220]	; (800f01c <tcp_input+0x49c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	885b      	ldrh	r3, [r3, #2]
 800ef44:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d113      	bne.n	800ef72 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	4b34      	ldr	r3, [pc, #208]	; (800f020 <tcp_input+0x4a0>)
 800ef50:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d10d      	bne.n	800ef72 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	4b31      	ldr	r3, [pc, #196]	; (800f020 <tcp_input+0x4a0>)
 800ef5c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d107      	bne.n	800ef72 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ef62:	69f8      	ldr	r0, [r7, #28]
 800ef64:	f000 fb56 	bl	800f614 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7fd ff3f 	bl	800cdec <pbuf_free>
        return;
 800ef6e:	e1fd      	b.n	800f36c <tcp_input+0x7ec>
        continue;
 800ef70:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	61fb      	str	r3, [r7, #28]
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1bc      	bne.n	800eef8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef82:	4b2f      	ldr	r3, [pc, #188]	; (800f040 <tcp_input+0x4c0>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	617b      	str	r3, [r7, #20]
 800ef88:	e02a      	b.n	800efe0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	7a1b      	ldrb	r3, [r3, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00c      	beq.n	800efac <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	7a1a      	ldrb	r2, [r3, #8]
 800ef96:	4b22      	ldr	r3, [pc, #136]	; (800f020 <tcp_input+0x4a0>)
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d002      	beq.n	800efac <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	61bb      	str	r3, [r7, #24]
        continue;
 800efaa:	e016      	b.n	800efda <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	8ada      	ldrh	r2, [r3, #22]
 800efb0:	4b1a      	ldr	r3, [pc, #104]	; (800f01c <tcp_input+0x49c>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	885b      	ldrh	r3, [r3, #2]
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	429a      	cmp	r2, r3
 800efba:	d10c      	bne.n	800efd6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	4b17      	ldr	r3, [pc, #92]	; (800f020 <tcp_input+0x4a0>)
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d00f      	beq.n	800efe8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00d      	beq.n	800efea <tcp_input+0x46a>
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d009      	beq.n	800efea <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	617b      	str	r3, [r7, #20]
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1d1      	bne.n	800ef8a <tcp_input+0x40a>
 800efe6:	e000      	b.n	800efea <tcp_input+0x46a>
            break;
 800efe8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d029      	beq.n	800f044 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00a      	beq.n	800f00c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	68da      	ldr	r2, [r3, #12]
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800effe:	4b10      	ldr	r3, [pc, #64]	; (800f040 <tcp_input+0x4c0>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f006:	4a0e      	ldr	r2, [pc, #56]	; (800f040 <tcp_input+0x4c0>)
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f00c:	6978      	ldr	r0, [r7, #20]
 800f00e:	f000 fa03 	bl	800f418 <tcp_listen_input>
      }
      pbuf_free(p);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fd feea 	bl	800cdec <pbuf_free>
      return;
 800f018:	e1a8      	b.n	800f36c <tcp_input+0x7ec>
 800f01a:	bf00      	nop
 800f01c:	20008ca4 	.word	0x20008ca4
 800f020:	2000570c 	.word	0x2000570c
 800f024:	08018e7c 	.word	0x08018e7c
 800f028:	08018fa8 	.word	0x08018fa8
 800f02c:	08018ec8 	.word	0x08018ec8
 800f030:	20008c88 	.word	0x20008c88
 800f034:	08018fd4 	.word	0x08018fd4
 800f038:	20008c8c 	.word	0x20008c8c
 800f03c:	08019000 	.word	0x08019000
 800f040:	20008c84 	.word	0x20008c84
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 8158 	beq.w	800f2fc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f04c:	4b95      	ldr	r3, [pc, #596]	; (800f2a4 <tcp_input+0x724>)
 800f04e:	2200      	movs	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	891a      	ldrh	r2, [r3, #8]
 800f056:	4b93      	ldr	r3, [pc, #588]	; (800f2a4 <tcp_input+0x724>)
 800f058:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f05a:	4a92      	ldr	r2, [pc, #584]	; (800f2a4 <tcp_input+0x724>)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f060:	4b91      	ldr	r3, [pc, #580]	; (800f2a8 <tcp_input+0x728>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a8f      	ldr	r2, [pc, #572]	; (800f2a4 <tcp_input+0x724>)
 800f066:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f068:	4b90      	ldr	r3, [pc, #576]	; (800f2ac <tcp_input+0x72c>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f06e:	4b90      	ldr	r3, [pc, #576]	; (800f2b0 <tcp_input+0x730>)
 800f070:	2200      	movs	r2, #0
 800f072:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f074:	4b8f      	ldr	r3, [pc, #572]	; (800f2b4 <tcp_input+0x734>)
 800f076:	2200      	movs	r2, #0
 800f078:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f07a:	4b8f      	ldr	r3, [pc, #572]	; (800f2b8 <tcp_input+0x738>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	f003 0308 	and.w	r3, r3, #8
 800f082:	2b00      	cmp	r3, #0
 800f084:	d006      	beq.n	800f094 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	7b5b      	ldrb	r3, [r3, #13]
 800f08a:	f043 0301 	orr.w	r3, r3, #1
 800f08e:	b2da      	uxtb	r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d017      	beq.n	800f0cc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f09c:	69f8      	ldr	r0, [r7, #28]
 800f09e:	f7ff f929 	bl	800e2f4 <tcp_process_refused_data>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	f113 0f0d 	cmn.w	r3, #13
 800f0a8:	d007      	beq.n	800f0ba <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00c      	beq.n	800f0cc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f0b2:	4b82      	ldr	r3, [pc, #520]	; (800f2bc <tcp_input+0x73c>)
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d008      	beq.n	800f0cc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f040 80e3 	bne.w	800f28a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f0c4:	69f8      	ldr	r0, [r7, #28]
 800f0c6:	f003 f9ad 	bl	8012424 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f0ca:	e0de      	b.n	800f28a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f0cc:	4a7c      	ldr	r2, [pc, #496]	; (800f2c0 <tcp_input+0x740>)
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f0d2:	69f8      	ldr	r0, [r7, #28]
 800f0d4:	f000 fb18 	bl	800f708 <tcp_process>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f0dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0e0:	f113 0f0d 	cmn.w	r3, #13
 800f0e4:	f000 80d3 	beq.w	800f28e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f0e8:	4b71      	ldr	r3, [pc, #452]	; (800f2b0 <tcp_input+0x730>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 0308 	and.w	r3, r3, #8
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d015      	beq.n	800f120 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d008      	beq.n	800f110 <tcp_input+0x590>
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f104:	69fa      	ldr	r2, [r7, #28]
 800f106:	6912      	ldr	r2, [r2, #16]
 800f108:	f06f 010d 	mvn.w	r1, #13
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f110:	69f9      	ldr	r1, [r7, #28]
 800f112:	486c      	ldr	r0, [pc, #432]	; (800f2c4 <tcp_input+0x744>)
 800f114:	f7ff fbbc 	bl	800e890 <tcp_pcb_remove>
        tcp_free(pcb);
 800f118:	69f8      	ldr	r0, [r7, #28]
 800f11a:	f7fe f9a9 	bl	800d470 <tcp_free>
 800f11e:	e0da      	b.n	800f2d6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f124:	4b63      	ldr	r3, [pc, #396]	; (800f2b4 <tcp_input+0x734>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d01d      	beq.n	800f168 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f12c:	4b61      	ldr	r3, [pc, #388]	; (800f2b4 <tcp_input+0x734>)
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00a      	beq.n	800f152 <tcp_input+0x5d2>
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f142:	69fa      	ldr	r2, [r7, #28]
 800f144:	6910      	ldr	r0, [r2, #16]
 800f146:	89fa      	ldrh	r2, [r7, #14]
 800f148:	69f9      	ldr	r1, [r7, #28]
 800f14a:	4798      	blx	r3
 800f14c:	4603      	mov	r3, r0
 800f14e:	74fb      	strb	r3, [r7, #19]
 800f150:	e001      	b.n	800f156 <tcp_input+0x5d6>
 800f152:	2300      	movs	r3, #0
 800f154:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f156:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f15a:	f113 0f0d 	cmn.w	r3, #13
 800f15e:	f000 8098 	beq.w	800f292 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f162:	4b54      	ldr	r3, [pc, #336]	; (800f2b4 <tcp_input+0x734>)
 800f164:	2200      	movs	r2, #0
 800f166:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f168:	69f8      	ldr	r0, [r7, #28]
 800f16a:	f000 f915 	bl	800f398 <tcp_input_delayed_close>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	f040 8090 	bne.w	800f296 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f176:	4b4d      	ldr	r3, [pc, #308]	; (800f2ac <tcp_input+0x72c>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d041      	beq.n	800f202 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f182:	2b00      	cmp	r3, #0
 800f184:	d006      	beq.n	800f194 <tcp_input+0x614>
 800f186:	4b50      	ldr	r3, [pc, #320]	; (800f2c8 <tcp_input+0x748>)
 800f188:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f18c:	494f      	ldr	r1, [pc, #316]	; (800f2cc <tcp_input+0x74c>)
 800f18e:	4850      	ldr	r0, [pc, #320]	; (800f2d0 <tcp_input+0x750>)
 800f190:	f007 fc88 	bl	8016aa4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f003 0310 	and.w	r3, r3, #16
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d008      	beq.n	800f1b2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f1a0:	4b42      	ldr	r3, [pc, #264]	; (800f2ac <tcp_input+0x72c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fd fe21 	bl	800cdec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f1aa:	69f8      	ldr	r0, [r7, #28]
 800f1ac:	f7fe fc48 	bl	800da40 <tcp_abort>
            goto aborted;
 800f1b0:	e091      	b.n	800f2d6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00c      	beq.n	800f1d6 <tcp_input+0x656>
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	6918      	ldr	r0, [r3, #16]
 800f1c6:	4b39      	ldr	r3, [pc, #228]	; (800f2ac <tcp_input+0x72c>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	69f9      	ldr	r1, [r7, #28]
 800f1ce:	47a0      	blx	r4
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	74fb      	strb	r3, [r7, #19]
 800f1d4:	e008      	b.n	800f1e8 <tcp_input+0x668>
 800f1d6:	4b35      	ldr	r3, [pc, #212]	; (800f2ac <tcp_input+0x72c>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	69f9      	ldr	r1, [r7, #28]
 800f1de:	2000      	movs	r0, #0
 800f1e0:	f7ff f95e 	bl	800e4a0 <tcp_recv_null>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f1e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1ec:	f113 0f0d 	cmn.w	r3, #13
 800f1f0:	d053      	beq.n	800f29a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f1f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d003      	beq.n	800f202 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f1fa:	4b2c      	ldr	r3, [pc, #176]	; (800f2ac <tcp_input+0x72c>)
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f202:	4b2b      	ldr	r3, [pc, #172]	; (800f2b0 <tcp_input+0x730>)
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	f003 0320 	and.w	r3, r3, #32
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d030      	beq.n	800f270 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f212:	2b00      	cmp	r3, #0
 800f214:	d009      	beq.n	800f22a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f21a:	7b5a      	ldrb	r2, [r3, #13]
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f220:	f042 0220 	orr.w	r2, r2, #32
 800f224:	b2d2      	uxtb	r2, r2
 800f226:	735a      	strb	r2, [r3, #13]
 800f228:	e022      	b.n	800f270 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f22e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f232:	d005      	beq.n	800f240 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f238:	3301      	adds	r3, #1
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00b      	beq.n	800f262 <tcp_input+0x6e2>
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	6918      	ldr	r0, [r3, #16]
 800f254:	2300      	movs	r3, #0
 800f256:	2200      	movs	r2, #0
 800f258:	69f9      	ldr	r1, [r7, #28]
 800f25a:	47a0      	blx	r4
 800f25c:	4603      	mov	r3, r0
 800f25e:	74fb      	strb	r3, [r7, #19]
 800f260:	e001      	b.n	800f266 <tcp_input+0x6e6>
 800f262:	2300      	movs	r3, #0
 800f264:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f266:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f26a:	f113 0f0d 	cmn.w	r3, #13
 800f26e:	d016      	beq.n	800f29e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f270:	4b13      	ldr	r3, [pc, #76]	; (800f2c0 <tcp_input+0x740>)
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f276:	69f8      	ldr	r0, [r7, #28]
 800f278:	f000 f88e 	bl	800f398 <tcp_input_delayed_close>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d128      	bne.n	800f2d4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f282:	69f8      	ldr	r0, [r7, #28]
 800f284:	f002 fac8 	bl	8011818 <tcp_output>
 800f288:	e025      	b.n	800f2d6 <tcp_input+0x756>
        goto aborted;
 800f28a:	bf00      	nop
 800f28c:	e023      	b.n	800f2d6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f28e:	bf00      	nop
 800f290:	e021      	b.n	800f2d6 <tcp_input+0x756>
              goto aborted;
 800f292:	bf00      	nop
 800f294:	e01f      	b.n	800f2d6 <tcp_input+0x756>
          goto aborted;
 800f296:	bf00      	nop
 800f298:	e01d      	b.n	800f2d6 <tcp_input+0x756>
            goto aborted;
 800f29a:	bf00      	nop
 800f29c:	e01b      	b.n	800f2d6 <tcp_input+0x756>
              goto aborted;
 800f29e:	bf00      	nop
 800f2a0:	e019      	b.n	800f2d6 <tcp_input+0x756>
 800f2a2:	bf00      	nop
 800f2a4:	20008c94 	.word	0x20008c94
 800f2a8:	20008ca4 	.word	0x20008ca4
 800f2ac:	20008cc4 	.word	0x20008cc4
 800f2b0:	20008cc1 	.word	0x20008cc1
 800f2b4:	20008cbc 	.word	0x20008cbc
 800f2b8:	20008cc0 	.word	0x20008cc0
 800f2bc:	20008cbe 	.word	0x20008cbe
 800f2c0:	20008cc8 	.word	0x20008cc8
 800f2c4:	20008c88 	.word	0x20008c88
 800f2c8:	08018e7c 	.word	0x08018e7c
 800f2cc:	08019030 	.word	0x08019030
 800f2d0:	08018ec8 	.word	0x08018ec8
          goto aborted;
 800f2d4:	bf00      	nop
    tcp_input_pcb = NULL;
 800f2d6:	4b27      	ldr	r3, [pc, #156]	; (800f374 <tcp_input+0x7f4>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f2dc:	4b26      	ldr	r3, [pc, #152]	; (800f378 <tcp_input+0x7f8>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f2e2:	4b26      	ldr	r3, [pc, #152]	; (800f37c <tcp_input+0x7fc>)
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d03f      	beq.n	800f36a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f2ea:	4b24      	ldr	r3, [pc, #144]	; (800f37c <tcp_input+0x7fc>)
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fd fd7c 	bl	800cdec <pbuf_free>
      inseg.p = NULL;
 800f2f4:	4b21      	ldr	r3, [pc, #132]	; (800f37c <tcp_input+0x7fc>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f2fa:	e036      	b.n	800f36a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f2fc:	4b20      	ldr	r3, [pc, #128]	; (800f380 <tcp_input+0x800>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	899b      	ldrh	r3, [r3, #12]
 800f302:	b29b      	uxth	r3, r3
 800f304:	4618      	mov	r0, r3
 800f306:	f7fc fa13 	bl	800b730 <lwip_htons>
 800f30a:	4603      	mov	r3, r0
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	f003 0304 	and.w	r3, r3, #4
 800f312:	2b00      	cmp	r3, #0
 800f314:	d118      	bne.n	800f348 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f316:	4b1b      	ldr	r3, [pc, #108]	; (800f384 <tcp_input+0x804>)
 800f318:	6819      	ldr	r1, [r3, #0]
 800f31a:	4b1b      	ldr	r3, [pc, #108]	; (800f388 <tcp_input+0x808>)
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	4b1a      	ldr	r3, [pc, #104]	; (800f38c <tcp_input+0x80c>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f326:	4b16      	ldr	r3, [pc, #88]	; (800f380 <tcp_input+0x800>)
 800f328:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f32a:	885b      	ldrh	r3, [r3, #2]
 800f32c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f32e:	4a14      	ldr	r2, [pc, #80]	; (800f380 <tcp_input+0x800>)
 800f330:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f332:	8812      	ldrh	r2, [r2, #0]
 800f334:	b292      	uxth	r2, r2
 800f336:	9202      	str	r2, [sp, #8]
 800f338:	9301      	str	r3, [sp, #4]
 800f33a:	4b15      	ldr	r3, [pc, #84]	; (800f390 <tcp_input+0x810>)
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	4b15      	ldr	r3, [pc, #84]	; (800f394 <tcp_input+0x814>)
 800f340:	4602      	mov	r2, r0
 800f342:	2000      	movs	r0, #0
 800f344:	f003 f81c 	bl	8012380 <tcp_rst>
    pbuf_free(p);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f7fd fd4f 	bl	800cdec <pbuf_free>
  return;
 800f34e:	e00c      	b.n	800f36a <tcp_input+0x7ea>
    goto dropped;
 800f350:	bf00      	nop
 800f352:	e006      	b.n	800f362 <tcp_input+0x7e2>
    goto dropped;
 800f354:	bf00      	nop
 800f356:	e004      	b.n	800f362 <tcp_input+0x7e2>
    goto dropped;
 800f358:	bf00      	nop
 800f35a:	e002      	b.n	800f362 <tcp_input+0x7e2>
      goto dropped;
 800f35c:	bf00      	nop
 800f35e:	e000      	b.n	800f362 <tcp_input+0x7e2>
      goto dropped;
 800f360:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7fd fd42 	bl	800cdec <pbuf_free>
 800f368:	e000      	b.n	800f36c <tcp_input+0x7ec>
  return;
 800f36a:	bf00      	nop
}
 800f36c:	3724      	adds	r7, #36	; 0x24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd90      	pop	{r4, r7, pc}
 800f372:	bf00      	nop
 800f374:	20008cc8 	.word	0x20008cc8
 800f378:	20008cc4 	.word	0x20008cc4
 800f37c:	20008c94 	.word	0x20008c94
 800f380:	20008ca4 	.word	0x20008ca4
 800f384:	20008cb8 	.word	0x20008cb8
 800f388:	20008cbe 	.word	0x20008cbe
 800f38c:	20008cb4 	.word	0x20008cb4
 800f390:	2000571c 	.word	0x2000571c
 800f394:	20005720 	.word	0x20005720

0800f398 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d106      	bne.n	800f3b4 <tcp_input_delayed_close+0x1c>
 800f3a6:	4b17      	ldr	r3, [pc, #92]	; (800f404 <tcp_input_delayed_close+0x6c>)
 800f3a8:	f240 225a 	movw	r2, #602	; 0x25a
 800f3ac:	4916      	ldr	r1, [pc, #88]	; (800f408 <tcp_input_delayed_close+0x70>)
 800f3ae:	4817      	ldr	r0, [pc, #92]	; (800f40c <tcp_input_delayed_close+0x74>)
 800f3b0:	f007 fb78 	bl	8016aa4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f3b4:	4b16      	ldr	r3, [pc, #88]	; (800f410 <tcp_input_delayed_close+0x78>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f003 0310 	and.w	r3, r3, #16
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d01c      	beq.n	800f3fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	8b5b      	ldrh	r3, [r3, #26]
 800f3c4:	f003 0310 	and.w	r3, r3, #16
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10d      	bne.n	800f3e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d008      	beq.n	800f3e8 <tcp_input_delayed_close+0x50>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	6912      	ldr	r2, [r2, #16]
 800f3e0:	f06f 010e 	mvn.w	r1, #14
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	480a      	ldr	r0, [pc, #40]	; (800f414 <tcp_input_delayed_close+0x7c>)
 800f3ec:	f7ff fa50 	bl	800e890 <tcp_pcb_remove>
    tcp_free(pcb);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7fe f83d 	bl	800d470 <tcp_free>
    return 1;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e000      	b.n	800f3fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	08018e7c 	.word	0x08018e7c
 800f408:	0801904c 	.word	0x0801904c
 800f40c:	08018ec8 	.word	0x08018ec8
 800f410:	20008cc1 	.word	0x20008cc1
 800f414:	20008c88 	.word	0x20008c88

0800f418 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b08b      	sub	sp, #44	; 0x2c
 800f41c:	af04      	add	r7, sp, #16
 800f41e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f420:	4b6f      	ldr	r3, [pc, #444]	; (800f5e0 <tcp_listen_input+0x1c8>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 0304 	and.w	r3, r3, #4
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f040 80d2 	bne.w	800f5d2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d106      	bne.n	800f442 <tcp_listen_input+0x2a>
 800f434:	4b6b      	ldr	r3, [pc, #428]	; (800f5e4 <tcp_listen_input+0x1cc>)
 800f436:	f240 2281 	movw	r2, #641	; 0x281
 800f43a:	496b      	ldr	r1, [pc, #428]	; (800f5e8 <tcp_listen_input+0x1d0>)
 800f43c:	486b      	ldr	r0, [pc, #428]	; (800f5ec <tcp_listen_input+0x1d4>)
 800f43e:	f007 fb31 	bl	8016aa4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f442:	4b67      	ldr	r3, [pc, #412]	; (800f5e0 <tcp_listen_input+0x1c8>)
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	f003 0310 	and.w	r3, r3, #16
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d019      	beq.n	800f482 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f44e:	4b68      	ldr	r3, [pc, #416]	; (800f5f0 <tcp_listen_input+0x1d8>)
 800f450:	6819      	ldr	r1, [r3, #0]
 800f452:	4b68      	ldr	r3, [pc, #416]	; (800f5f4 <tcp_listen_input+0x1dc>)
 800f454:	881b      	ldrh	r3, [r3, #0]
 800f456:	461a      	mov	r2, r3
 800f458:	4b67      	ldr	r3, [pc, #412]	; (800f5f8 <tcp_listen_input+0x1e0>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f45e:	4b67      	ldr	r3, [pc, #412]	; (800f5fc <tcp_listen_input+0x1e4>)
 800f460:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f462:	885b      	ldrh	r3, [r3, #2]
 800f464:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f466:	4a65      	ldr	r2, [pc, #404]	; (800f5fc <tcp_listen_input+0x1e4>)
 800f468:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46a:	8812      	ldrh	r2, [r2, #0]
 800f46c:	b292      	uxth	r2, r2
 800f46e:	9202      	str	r2, [sp, #8]
 800f470:	9301      	str	r3, [sp, #4]
 800f472:	4b63      	ldr	r3, [pc, #396]	; (800f600 <tcp_listen_input+0x1e8>)
 800f474:	9300      	str	r3, [sp, #0]
 800f476:	4b63      	ldr	r3, [pc, #396]	; (800f604 <tcp_listen_input+0x1ec>)
 800f478:	4602      	mov	r2, r0
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f002 ff80 	bl	8012380 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f480:	e0a9      	b.n	800f5d6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f482:	4b57      	ldr	r3, [pc, #348]	; (800f5e0 <tcp_listen_input+0x1c8>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f003 0302 	and.w	r3, r3, #2
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 80a3 	beq.w	800f5d6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	7d5b      	ldrb	r3, [r3, #21]
 800f494:	4618      	mov	r0, r3
 800f496:	f7ff f927 	bl	800e6e8 <tcp_alloc>
 800f49a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d111      	bne.n	800f4c6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	699b      	ldr	r3, [r3, #24]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00a      	beq.n	800f4c0 <tcp_listen_input+0xa8>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	6910      	ldr	r0, [r2, #16]
 800f4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	4798      	blx	r3
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	73bb      	strb	r3, [r7, #14]
      return;
 800f4be:	e08b      	b.n	800f5d8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f4c0:	23f0      	movs	r3, #240	; 0xf0
 800f4c2:	73bb      	strb	r3, [r7, #14]
      return;
 800f4c4:	e088      	b.n	800f5d8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f4c6:	4b50      	ldr	r3, [pc, #320]	; (800f608 <tcp_listen_input+0x1f0>)
 800f4c8:	695a      	ldr	r2, [r3, #20]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f4ce:	4b4e      	ldr	r3, [pc, #312]	; (800f608 <tcp_listen_input+0x1f0>)
 800f4d0:	691a      	ldr	r2, [r3, #16]
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	8ada      	ldrh	r2, [r3, #22]
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f4de:	4b47      	ldr	r3, [pc, #284]	; (800f5fc <tcp_listen_input+0x1e4>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	881b      	ldrh	r3, [r3, #0]
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	2203      	movs	r2, #3
 800f4ee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f4f0:	4b41      	ldr	r3, [pc, #260]	; (800f5f8 <tcp_listen_input+0x1e0>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f502:	6978      	ldr	r0, [r7, #20]
 800f504:	f7ff fa58 	bl	800e9b8 <tcp_next_iss>
 800f508:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	693a      	ldr	r2, [r7, #16]
 800f514:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f522:	4b35      	ldr	r3, [pc, #212]	; (800f5f8 <tcp_listen_input+0x1e0>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	1e5a      	subs	r2, r3, #1
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	691a      	ldr	r2, [r3, #16]
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	7a5b      	ldrb	r3, [r3, #9]
 800f53e:	f003 030c 	and.w	r3, r3, #12
 800f542:	b2da      	uxtb	r2, r3
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	7a1a      	ldrb	r2, [r3, #8]
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f550:	4b2e      	ldr	r3, [pc, #184]	; (800f60c <tcp_listen_input+0x1f4>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	60da      	str	r2, [r3, #12]
 800f558:	4a2c      	ldr	r2, [pc, #176]	; (800f60c <tcp_listen_input+0x1f4>)
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	6013      	str	r3, [r2, #0]
 800f55e:	f003 f8d1 	bl	8012704 <tcp_timer_needed>
 800f562:	4b2b      	ldr	r3, [pc, #172]	; (800f610 <tcp_listen_input+0x1f8>)
 800f564:	2201      	movs	r2, #1
 800f566:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f568:	6978      	ldr	r0, [r7, #20]
 800f56a:	f001 fd8f 	bl	801108c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f56e:	4b23      	ldr	r3, [pc, #140]	; (800f5fc <tcp_listen_input+0x1e4>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	89db      	ldrh	r3, [r3, #14]
 800f574:	b29a      	uxth	r2, r3
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	3304      	adds	r3, #4
 800f590:	4618      	mov	r0, r3
 800f592:	f005 f84f 	bl	8014634 <ip4_route>
 800f596:	4601      	mov	r1, r0
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	3304      	adds	r3, #4
 800f59c:	461a      	mov	r2, r3
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f7ff fa30 	bl	800ea04 <tcp_eff_send_mss_netif>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f5ac:	2112      	movs	r1, #18
 800f5ae:	6978      	ldr	r0, [r7, #20]
 800f5b0:	f002 f844 	bl	801163c <tcp_enqueue_flags>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d004      	beq.n	800f5ca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	6978      	ldr	r0, [r7, #20]
 800f5c4:	f7fe f97e 	bl	800d8c4 <tcp_abandon>
      return;
 800f5c8:	e006      	b.n	800f5d8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f5ca:	6978      	ldr	r0, [r7, #20]
 800f5cc:	f002 f924 	bl	8011818 <tcp_output>
  return;
 800f5d0:	e001      	b.n	800f5d6 <tcp_listen_input+0x1be>
    return;
 800f5d2:	bf00      	nop
 800f5d4:	e000      	b.n	800f5d8 <tcp_listen_input+0x1c0>
  return;
 800f5d6:	bf00      	nop
}
 800f5d8:	371c      	adds	r7, #28
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd90      	pop	{r4, r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	20008cc0 	.word	0x20008cc0
 800f5e4:	08018e7c 	.word	0x08018e7c
 800f5e8:	08019074 	.word	0x08019074
 800f5ec:	08018ec8 	.word	0x08018ec8
 800f5f0:	20008cb8 	.word	0x20008cb8
 800f5f4:	20008cbe 	.word	0x20008cbe
 800f5f8:	20008cb4 	.word	0x20008cb4
 800f5fc:	20008ca4 	.word	0x20008ca4
 800f600:	2000571c 	.word	0x2000571c
 800f604:	20005720 	.word	0x20005720
 800f608:	2000570c 	.word	0x2000570c
 800f60c:	20008c88 	.word	0x20008c88
 800f610:	20008c90 	.word	0x20008c90

0800f614 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af04      	add	r7, sp, #16
 800f61a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f61c:	4b2f      	ldr	r3, [pc, #188]	; (800f6dc <tcp_timewait_input+0xc8>)
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	f003 0304 	and.w	r3, r3, #4
 800f624:	2b00      	cmp	r3, #0
 800f626:	d153      	bne.n	800f6d0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d106      	bne.n	800f63c <tcp_timewait_input+0x28>
 800f62e:	4b2c      	ldr	r3, [pc, #176]	; (800f6e0 <tcp_timewait_input+0xcc>)
 800f630:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f634:	492b      	ldr	r1, [pc, #172]	; (800f6e4 <tcp_timewait_input+0xd0>)
 800f636:	482c      	ldr	r0, [pc, #176]	; (800f6e8 <tcp_timewait_input+0xd4>)
 800f638:	f007 fa34 	bl	8016aa4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f63c:	4b27      	ldr	r3, [pc, #156]	; (800f6dc <tcp_timewait_input+0xc8>)
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	f003 0302 	and.w	r3, r3, #2
 800f644:	2b00      	cmp	r3, #0
 800f646:	d02a      	beq.n	800f69e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f648:	4b28      	ldr	r3, [pc, #160]	; (800f6ec <tcp_timewait_input+0xd8>)
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	2b00      	cmp	r3, #0
 800f654:	db2d      	blt.n	800f6b2 <tcp_timewait_input+0x9e>
 800f656:	4b25      	ldr	r3, [pc, #148]	; (800f6ec <tcp_timewait_input+0xd8>)
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65e:	6879      	ldr	r1, [r7, #4]
 800f660:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f662:	440b      	add	r3, r1
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	dc23      	bgt.n	800f6b2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f66a:	4b21      	ldr	r3, [pc, #132]	; (800f6f0 <tcp_timewait_input+0xdc>)
 800f66c:	6819      	ldr	r1, [r3, #0]
 800f66e:	4b21      	ldr	r3, [pc, #132]	; (800f6f4 <tcp_timewait_input+0xe0>)
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	461a      	mov	r2, r3
 800f674:	4b1d      	ldr	r3, [pc, #116]	; (800f6ec <tcp_timewait_input+0xd8>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f67a:	4b1f      	ldr	r3, [pc, #124]	; (800f6f8 <tcp_timewait_input+0xe4>)
 800f67c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f67e:	885b      	ldrh	r3, [r3, #2]
 800f680:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f682:	4a1d      	ldr	r2, [pc, #116]	; (800f6f8 <tcp_timewait_input+0xe4>)
 800f684:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f686:	8812      	ldrh	r2, [r2, #0]
 800f688:	b292      	uxth	r2, r2
 800f68a:	9202      	str	r2, [sp, #8]
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	4b1b      	ldr	r3, [pc, #108]	; (800f6fc <tcp_timewait_input+0xe8>)
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	4b1b      	ldr	r3, [pc, #108]	; (800f700 <tcp_timewait_input+0xec>)
 800f694:	4602      	mov	r2, r0
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f002 fe72 	bl	8012380 <tcp_rst>
      return;
 800f69c:	e01b      	b.n	800f6d6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f69e:	4b0f      	ldr	r3, [pc, #60]	; (800f6dc <tcp_timewait_input+0xc8>)
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f6aa:	4b16      	ldr	r3, [pc, #88]	; (800f704 <tcp_timewait_input+0xf0>)
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f6b2:	4b10      	ldr	r3, [pc, #64]	; (800f6f4 <tcp_timewait_input+0xe0>)
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00c      	beq.n	800f6d4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	8b5b      	ldrh	r3, [r3, #26]
 800f6be:	f043 0302 	orr.w	r3, r3, #2
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f002 f8a5 	bl	8011818 <tcp_output>
  }
  return;
 800f6ce:	e001      	b.n	800f6d4 <tcp_timewait_input+0xc0>
    return;
 800f6d0:	bf00      	nop
 800f6d2:	e000      	b.n	800f6d6 <tcp_timewait_input+0xc2>
  return;
 800f6d4:	bf00      	nop
}
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	20008cc0 	.word	0x20008cc0
 800f6e0:	08018e7c 	.word	0x08018e7c
 800f6e4:	08019094 	.word	0x08019094
 800f6e8:	08018ec8 	.word	0x08018ec8
 800f6ec:	20008cb4 	.word	0x20008cb4
 800f6f0:	20008cb8 	.word	0x20008cb8
 800f6f4:	20008cbe 	.word	0x20008cbe
 800f6f8:	20008ca4 	.word	0x20008ca4
 800f6fc:	2000571c 	.word	0x2000571c
 800f700:	20005720 	.word	0x20005720
 800f704:	20008c7c 	.word	0x20008c7c

0800f708 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f708:	b590      	push	{r4, r7, lr}
 800f70a:	b08d      	sub	sp, #52	; 0x34
 800f70c:	af04      	add	r7, sp, #16
 800f70e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f710:	2300      	movs	r3, #0
 800f712:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f714:	2300      	movs	r3, #0
 800f716:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d106      	bne.n	800f72c <tcp_process+0x24>
 800f71e:	4b9d      	ldr	r3, [pc, #628]	; (800f994 <tcp_process+0x28c>)
 800f720:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f724:	499c      	ldr	r1, [pc, #624]	; (800f998 <tcp_process+0x290>)
 800f726:	489d      	ldr	r0, [pc, #628]	; (800f99c <tcp_process+0x294>)
 800f728:	f007 f9bc 	bl	8016aa4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f72c:	4b9c      	ldr	r3, [pc, #624]	; (800f9a0 <tcp_process+0x298>)
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f003 0304 	and.w	r3, r3, #4
 800f734:	2b00      	cmp	r3, #0
 800f736:	d04e      	beq.n	800f7d6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d108      	bne.n	800f752 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f744:	4b97      	ldr	r3, [pc, #604]	; (800f9a4 <tcp_process+0x29c>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d123      	bne.n	800f794 <tcp_process+0x8c>
        acceptable = 1;
 800f74c:	2301      	movs	r3, #1
 800f74e:	76fb      	strb	r3, [r7, #27]
 800f750:	e020      	b.n	800f794 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f756:	4b94      	ldr	r3, [pc, #592]	; (800f9a8 <tcp_process+0x2a0>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d102      	bne.n	800f764 <tcp_process+0x5c>
        acceptable = 1;
 800f75e:	2301      	movs	r3, #1
 800f760:	76fb      	strb	r3, [r7, #27]
 800f762:	e017      	b.n	800f794 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f764:	4b90      	ldr	r3, [pc, #576]	; (800f9a8 <tcp_process+0x2a0>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	db10      	blt.n	800f794 <tcp_process+0x8c>
 800f772:	4b8d      	ldr	r3, [pc, #564]	; (800f9a8 <tcp_process+0x2a0>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77a:	6879      	ldr	r1, [r7, #4]
 800f77c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f77e:	440b      	add	r3, r1
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	2b00      	cmp	r3, #0
 800f784:	dc06      	bgt.n	800f794 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8b5b      	ldrh	r3, [r3, #26]
 800f78a:	f043 0302 	orr.w	r3, r3, #2
 800f78e:	b29a      	uxth	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f794:	7efb      	ldrb	r3, [r7, #27]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d01b      	beq.n	800f7d2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	7d1b      	ldrb	r3, [r3, #20]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d106      	bne.n	800f7b0 <tcp_process+0xa8>
 800f7a2:	4b7c      	ldr	r3, [pc, #496]	; (800f994 <tcp_process+0x28c>)
 800f7a4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f7a8:	4980      	ldr	r1, [pc, #512]	; (800f9ac <tcp_process+0x2a4>)
 800f7aa:	487c      	ldr	r0, [pc, #496]	; (800f99c <tcp_process+0x294>)
 800f7ac:	f007 f97a 	bl	8016aa4 <iprintf>
      recv_flags |= TF_RESET;
 800f7b0:	4b7f      	ldr	r3, [pc, #508]	; (800f9b0 <tcp_process+0x2a8>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f043 0308 	orr.w	r3, r3, #8
 800f7b8:	b2da      	uxtb	r2, r3
 800f7ba:	4b7d      	ldr	r3, [pc, #500]	; (800f9b0 <tcp_process+0x2a8>)
 800f7bc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	8b5b      	ldrh	r3, [r3, #26]
 800f7c2:	f023 0301 	bic.w	r3, r3, #1
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f7cc:	f06f 030d 	mvn.w	r3, #13
 800f7d0:	e37a      	b.n	800fec8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e378      	b.n	800fec8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f7d6:	4b72      	ldr	r3, [pc, #456]	; (800f9a0 <tcp_process+0x298>)
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d010      	beq.n	800f804 <tcp_process+0xfc>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	7d1b      	ldrb	r3, [r3, #20]
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	d00c      	beq.n	800f804 <tcp_process+0xfc>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	7d1b      	ldrb	r3, [r3, #20]
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	d008      	beq.n	800f804 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	8b5b      	ldrh	r3, [r3, #26]
 800f7f6:	f043 0302 	orr.w	r3, r3, #2
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	e361      	b.n	800fec8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	8b5b      	ldrh	r3, [r3, #26]
 800f808:	f003 0310 	and.w	r3, r3, #16
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d103      	bne.n	800f818 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f810:	4b68      	ldr	r3, [pc, #416]	; (800f9b4 <tcp_process+0x2ac>)
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f001 fc2f 	bl	801108c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	7d1b      	ldrb	r3, [r3, #20]
 800f832:	3b02      	subs	r3, #2
 800f834:	2b07      	cmp	r3, #7
 800f836:	f200 8337 	bhi.w	800fea8 <tcp_process+0x7a0>
 800f83a:	a201      	add	r2, pc, #4	; (adr r2, 800f840 <tcp_process+0x138>)
 800f83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f840:	0800f861 	.word	0x0800f861
 800f844:	0800fa91 	.word	0x0800fa91
 800f848:	0800fc09 	.word	0x0800fc09
 800f84c:	0800fc33 	.word	0x0800fc33
 800f850:	0800fd57 	.word	0x0800fd57
 800f854:	0800fc09 	.word	0x0800fc09
 800f858:	0800fde3 	.word	0x0800fde3
 800f85c:	0800fe73 	.word	0x0800fe73
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f860:	4b4f      	ldr	r3, [pc, #316]	; (800f9a0 <tcp_process+0x298>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	f003 0310 	and.w	r3, r3, #16
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f000 80e4 	beq.w	800fa36 <tcp_process+0x32e>
 800f86e:	4b4c      	ldr	r3, [pc, #304]	; (800f9a0 <tcp_process+0x298>)
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	f003 0302 	and.w	r3, r3, #2
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 80dd 	beq.w	800fa36 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	4b48      	ldr	r3, [pc, #288]	; (800f9a4 <tcp_process+0x29c>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	429a      	cmp	r2, r3
 800f888:	f040 80d5 	bne.w	800fa36 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f88c:	4b46      	ldr	r3, [pc, #280]	; (800f9a8 <tcp_process+0x2a0>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	1c5a      	adds	r2, r3, #1
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f89e:	4b41      	ldr	r3, [pc, #260]	; (800f9a4 <tcp_process+0x29c>)
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f8a6:	4b44      	ldr	r3, [pc, #272]	; (800f9b8 <tcp_process+0x2b0>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	89db      	ldrh	r3, [r3, #14]
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f8c0:	4b39      	ldr	r3, [pc, #228]	; (800f9a8 <tcp_process+0x2a0>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	1e5a      	subs	r2, r3, #1
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2204      	movs	r2, #4
 800f8ce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f004 feab 	bl	8014634 <ip4_route>
 800f8de:	4601      	mov	r1, r0
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7ff f88c 	bl	800ea04 <tcp_eff_send_mss_netif>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8f8:	009a      	lsls	r2, r3, #2
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	f241 111c 	movw	r1, #4380	; 0x111c
 800f904:	428b      	cmp	r3, r1
 800f906:	bf38      	it	cc
 800f908:	460b      	movcc	r3, r1
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d204      	bcs.n	800f918 <tcp_process+0x210>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	b29b      	uxth	r3, r3
 800f916:	e00d      	b.n	800f934 <tcp_process+0x22c>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f922:	4293      	cmp	r3, r2
 800f924:	d904      	bls.n	800f930 <tcp_process+0x228>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	e001      	b.n	800f934 <tcp_process+0x22c>
 800f930:	f241 131c 	movw	r3, #4380	; 0x111c
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f940:	2b00      	cmp	r3, #0
 800f942:	d106      	bne.n	800f952 <tcp_process+0x24a>
 800f944:	4b13      	ldr	r3, [pc, #76]	; (800f994 <tcp_process+0x28c>)
 800f946:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f94a:	491c      	ldr	r1, [pc, #112]	; (800f9bc <tcp_process+0x2b4>)
 800f94c:	4813      	ldr	r0, [pc, #76]	; (800f99c <tcp_process+0x294>)
 800f94e:	f007 f8a9 	bl	8016aa4 <iprintf>
        --pcb->snd_queuelen;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f958:	3b01      	subs	r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f966:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d12a      	bne.n	800f9c4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f972:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d106      	bne.n	800f988 <tcp_process+0x280>
 800f97a:	4b06      	ldr	r3, [pc, #24]	; (800f994 <tcp_process+0x28c>)
 800f97c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f980:	490f      	ldr	r1, [pc, #60]	; (800f9c0 <tcp_process+0x2b8>)
 800f982:	4806      	ldr	r0, [pc, #24]	; (800f99c <tcp_process+0x294>)
 800f984:	f007 f88e 	bl	8016aa4 <iprintf>
          pcb->unsent = rseg->next;
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f990:	e01c      	b.n	800f9cc <tcp_process+0x2c4>
 800f992:	bf00      	nop
 800f994:	08018e7c 	.word	0x08018e7c
 800f998:	080190b4 	.word	0x080190b4
 800f99c:	08018ec8 	.word	0x08018ec8
 800f9a0:	20008cc0 	.word	0x20008cc0
 800f9a4:	20008cb8 	.word	0x20008cb8
 800f9a8:	20008cb4 	.word	0x20008cb4
 800f9ac:	080190d0 	.word	0x080190d0
 800f9b0:	20008cc1 	.word	0x20008cc1
 800f9b4:	20008c7c 	.word	0x20008c7c
 800f9b8:	20008ca4 	.word	0x20008ca4
 800f9bc:	080190f0 	.word	0x080190f0
 800f9c0:	08019108 	.word	0x08019108
        } else {
          pcb->unacked = rseg->next;
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f9cc:	69f8      	ldr	r0, [r7, #28]
 800f9ce:	f7fe fd22 	bl	800e416 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d104      	bne.n	800f9e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9e2:	e006      	b.n	800f9f2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00a      	beq.n	800fa12 <tcp_process+0x30a>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	6910      	ldr	r0, [r2, #16]
 800fa06:	2200      	movs	r2, #0
 800fa08:	6879      	ldr	r1, [r7, #4]
 800fa0a:	4798      	blx	r3
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	76bb      	strb	r3, [r7, #26]
 800fa10:	e001      	b.n	800fa16 <tcp_process+0x30e>
 800fa12:	2300      	movs	r3, #0
 800fa14:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fa16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa1a:	f113 0f0d 	cmn.w	r3, #13
 800fa1e:	d102      	bne.n	800fa26 <tcp_process+0x31e>
          return ERR_ABRT;
 800fa20:	f06f 030c 	mvn.w	r3, #12
 800fa24:	e250      	b.n	800fec8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	8b5b      	ldrh	r3, [r3, #26]
 800fa2a:	f043 0302 	orr.w	r3, r3, #2
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fa34:	e23a      	b.n	800feac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fa36:	4b98      	ldr	r3, [pc, #608]	; (800fc98 <tcp_process+0x590>)
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	f003 0310 	and.w	r3, r3, #16
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 8234 	beq.w	800feac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa44:	4b95      	ldr	r3, [pc, #596]	; (800fc9c <tcp_process+0x594>)
 800fa46:	6819      	ldr	r1, [r3, #0]
 800fa48:	4b95      	ldr	r3, [pc, #596]	; (800fca0 <tcp_process+0x598>)
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4b95      	ldr	r3, [pc, #596]	; (800fca4 <tcp_process+0x59c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa54:	4b94      	ldr	r3, [pc, #592]	; (800fca8 <tcp_process+0x5a0>)
 800fa56:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa58:	885b      	ldrh	r3, [r3, #2]
 800fa5a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa5c:	4a92      	ldr	r2, [pc, #584]	; (800fca8 <tcp_process+0x5a0>)
 800fa5e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa60:	8812      	ldrh	r2, [r2, #0]
 800fa62:	b292      	uxth	r2, r2
 800fa64:	9202      	str	r2, [sp, #8]
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	4b90      	ldr	r3, [pc, #576]	; (800fcac <tcp_process+0x5a4>)
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	4b90      	ldr	r3, [pc, #576]	; (800fcb0 <tcp_process+0x5a8>)
 800fa6e:	4602      	mov	r2, r0
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f002 fc85 	bl	8012380 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa7c:	2b05      	cmp	r3, #5
 800fa7e:	f200 8215 	bhi.w	800feac <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f002 fa4f 	bl	8011f2c <tcp_rexmit_rto>
      break;
 800fa8e:	e20d      	b.n	800feac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fa90:	4b81      	ldr	r3, [pc, #516]	; (800fc98 <tcp_process+0x590>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	f003 0310 	and.w	r3, r3, #16
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 80a1 	beq.w	800fbe0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa9e:	4b7f      	ldr	r3, [pc, #508]	; (800fc9c <tcp_process+0x594>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	3b01      	subs	r3, #1
 800faaa:	2b00      	cmp	r3, #0
 800faac:	db7e      	blt.n	800fbac <tcp_process+0x4a4>
 800faae:	4b7b      	ldr	r3, [pc, #492]	; (800fc9c <tcp_process+0x594>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	dc77      	bgt.n	800fbac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2204      	movs	r2, #4
 800fac0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d102      	bne.n	800fad0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800faca:	23fa      	movs	r3, #250	; 0xfa
 800facc:	76bb      	strb	r3, [r7, #26]
 800face:	e01d      	b.n	800fb0c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fad4:	699b      	ldr	r3, [r3, #24]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d106      	bne.n	800fae8 <tcp_process+0x3e0>
 800fada:	4b76      	ldr	r3, [pc, #472]	; (800fcb4 <tcp_process+0x5ac>)
 800fadc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fae0:	4975      	ldr	r1, [pc, #468]	; (800fcb8 <tcp_process+0x5b0>)
 800fae2:	4876      	ldr	r0, [pc, #472]	; (800fcbc <tcp_process+0x5b4>)
 800fae4:	f006 ffde 	bl	8016aa4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faec:	699b      	ldr	r3, [r3, #24]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d00a      	beq.n	800fb08 <tcp_process+0x400>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	6910      	ldr	r0, [r2, #16]
 800fafc:	2200      	movs	r2, #0
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	4798      	blx	r3
 800fb02:	4603      	mov	r3, r0
 800fb04:	76bb      	strb	r3, [r7, #26]
 800fb06:	e001      	b.n	800fb0c <tcp_process+0x404>
 800fb08:	23f0      	movs	r3, #240	; 0xf0
 800fb0a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fb0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00a      	beq.n	800fb2a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fb14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb18:	f113 0f0d 	cmn.w	r3, #13
 800fb1c:	d002      	beq.n	800fb24 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f7fd ff8e 	bl	800da40 <tcp_abort>
            }
            return ERR_ABRT;
 800fb24:	f06f 030c 	mvn.w	r3, #12
 800fb28:	e1ce      	b.n	800fec8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 fae0 	bl	80100f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fb30:	4b63      	ldr	r3, [pc, #396]	; (800fcc0 <tcp_process+0x5b8>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d005      	beq.n	800fb44 <tcp_process+0x43c>
            recv_acked--;
 800fb38:	4b61      	ldr	r3, [pc, #388]	; (800fcc0 <tcp_process+0x5b8>)
 800fb3a:	881b      	ldrh	r3, [r3, #0]
 800fb3c:	3b01      	subs	r3, #1
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	4b5f      	ldr	r3, [pc, #380]	; (800fcc0 <tcp_process+0x5b8>)
 800fb42:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb48:	009a      	lsls	r2, r3, #2
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	f241 111c 	movw	r1, #4380	; 0x111c
 800fb54:	428b      	cmp	r3, r1
 800fb56:	bf38      	it	cc
 800fb58:	460b      	movcc	r3, r1
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d204      	bcs.n	800fb68 <tcp_process+0x460>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	e00d      	b.n	800fb84 <tcp_process+0x47c>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d904      	bls.n	800fb80 <tcp_process+0x478>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb7a:	005b      	lsls	r3, r3, #1
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	e001      	b.n	800fb84 <tcp_process+0x47c>
 800fb80:	f241 131c 	movw	r3, #4380	; 0x111c
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fb8a:	4b4e      	ldr	r3, [pc, #312]	; (800fcc4 <tcp_process+0x5bc>)
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	f003 0320 	and.w	r3, r3, #32
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d037      	beq.n	800fc06 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	8b5b      	ldrh	r3, [r3, #26]
 800fb9a:	f043 0302 	orr.w	r3, r3, #2
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2207      	movs	r2, #7
 800fba8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fbaa:	e02c      	b.n	800fc06 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbac:	4b3b      	ldr	r3, [pc, #236]	; (800fc9c <tcp_process+0x594>)
 800fbae:	6819      	ldr	r1, [r3, #0]
 800fbb0:	4b3b      	ldr	r3, [pc, #236]	; (800fca0 <tcp_process+0x598>)
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4b3b      	ldr	r3, [pc, #236]	; (800fca4 <tcp_process+0x59c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbbc:	4b3a      	ldr	r3, [pc, #232]	; (800fca8 <tcp_process+0x5a0>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc0:	885b      	ldrh	r3, [r3, #2]
 800fbc2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbc4:	4a38      	ldr	r2, [pc, #224]	; (800fca8 <tcp_process+0x5a0>)
 800fbc6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc8:	8812      	ldrh	r2, [r2, #0]
 800fbca:	b292      	uxth	r2, r2
 800fbcc:	9202      	str	r2, [sp, #8]
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	4b36      	ldr	r3, [pc, #216]	; (800fcac <tcp_process+0x5a4>)
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	4b36      	ldr	r3, [pc, #216]	; (800fcb0 <tcp_process+0x5a8>)
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f002 fbd1 	bl	8012380 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fbde:	e167      	b.n	800feb0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fbe0:	4b2d      	ldr	r3, [pc, #180]	; (800fc98 <tcp_process+0x590>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	f003 0302 	and.w	r3, r3, #2
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 8161 	beq.w	800feb0 <tcp_process+0x7a8>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf2:	1e5a      	subs	r2, r3, #1
 800fbf4:	4b2b      	ldr	r3, [pc, #172]	; (800fca4 <tcp_process+0x59c>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	f040 8159 	bne.w	800feb0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f002 f9b6 	bl	8011f70 <tcp_rexmit>
      break;
 800fc04:	e154      	b.n	800feb0 <tcp_process+0x7a8>
 800fc06:	e153      	b.n	800feb0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fa71 	bl	80100f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fc0e:	4b2d      	ldr	r3, [pc, #180]	; (800fcc4 <tcp_process+0x5bc>)
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	f003 0320 	and.w	r3, r3, #32
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f000 814c 	beq.w	800feb4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	8b5b      	ldrh	r3, [r3, #26]
 800fc20:	f043 0302 	orr.w	r3, r3, #2
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2207      	movs	r2, #7
 800fc2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc30:	e140      	b.n	800feb4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 fa5c 	bl	80100f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fc38:	4b22      	ldr	r3, [pc, #136]	; (800fcc4 <tcp_process+0x5bc>)
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	f003 0320 	and.w	r3, r3, #32
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d071      	beq.n	800fd28 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc44:	4b14      	ldr	r3, [pc, #80]	; (800fc98 <tcp_process+0x590>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	f003 0310 	and.w	r3, r3, #16
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d060      	beq.n	800fd12 <tcp_process+0x60a>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc54:	4b11      	ldr	r3, [pc, #68]	; (800fc9c <tcp_process+0x594>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d15a      	bne.n	800fd12 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d156      	bne.n	800fd12 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	8b5b      	ldrh	r3, [r3, #26]
 800fc68:	f043 0302 	orr.w	r3, r3, #2
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7fe fdbc 	bl	800e7f0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fc78:	4b13      	ldr	r3, [pc, #76]	; (800fcc8 <tcp_process+0x5c0>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d105      	bne.n	800fc8e <tcp_process+0x586>
 800fc82:	4b11      	ldr	r3, [pc, #68]	; (800fcc8 <tcp_process+0x5c0>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	4a0f      	ldr	r2, [pc, #60]	; (800fcc8 <tcp_process+0x5c0>)
 800fc8a:	6013      	str	r3, [r2, #0]
 800fc8c:	e02e      	b.n	800fcec <tcp_process+0x5e4>
 800fc8e:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <tcp_process+0x5c0>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	617b      	str	r3, [r7, #20]
 800fc94:	e027      	b.n	800fce6 <tcp_process+0x5de>
 800fc96:	bf00      	nop
 800fc98:	20008cc0 	.word	0x20008cc0
 800fc9c:	20008cb8 	.word	0x20008cb8
 800fca0:	20008cbe 	.word	0x20008cbe
 800fca4:	20008cb4 	.word	0x20008cb4
 800fca8:	20008ca4 	.word	0x20008ca4
 800fcac:	2000571c 	.word	0x2000571c
 800fcb0:	20005720 	.word	0x20005720
 800fcb4:	08018e7c 	.word	0x08018e7c
 800fcb8:	0801911c 	.word	0x0801911c
 800fcbc:	08018ec8 	.word	0x08018ec8
 800fcc0:	20008cbc 	.word	0x20008cbc
 800fcc4:	20008cc1 	.word	0x20008cc1
 800fcc8:	20008c88 	.word	0x20008c88
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d104      	bne.n	800fce0 <tcp_process+0x5d8>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	68da      	ldr	r2, [r3, #12]
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	60da      	str	r2, [r3, #12]
 800fcde:	e005      	b.n	800fcec <tcp_process+0x5e4>
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	617b      	str	r3, [r7, #20]
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1ef      	bne.n	800fccc <tcp_process+0x5c4>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	60da      	str	r2, [r3, #12]
 800fcf2:	4b77      	ldr	r3, [pc, #476]	; (800fed0 <tcp_process+0x7c8>)
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	220a      	movs	r2, #10
 800fcfc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fcfe:	4b75      	ldr	r3, [pc, #468]	; (800fed4 <tcp_process+0x7cc>)
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	60da      	str	r2, [r3, #12]
 800fd06:	4a73      	ldr	r2, [pc, #460]	; (800fed4 <tcp_process+0x7cc>)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6013      	str	r3, [r2, #0]
 800fd0c:	f002 fcfa 	bl	8012704 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fd10:	e0d2      	b.n	800feb8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	8b5b      	ldrh	r3, [r3, #26]
 800fd16:	f043 0302 	orr.w	r3, r3, #2
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2208      	movs	r2, #8
 800fd24:	751a      	strb	r2, [r3, #20]
      break;
 800fd26:	e0c7      	b.n	800feb8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd28:	4b6b      	ldr	r3, [pc, #428]	; (800fed8 <tcp_process+0x7d0>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	f003 0310 	and.w	r3, r3, #16
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 80c1 	beq.w	800feb8 <tcp_process+0x7b0>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd3a:	4b68      	ldr	r3, [pc, #416]	; (800fedc <tcp_process+0x7d4>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	f040 80ba 	bne.w	800feb8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f040 80b5 	bne.w	800feb8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2206      	movs	r2, #6
 800fd52:	751a      	strb	r2, [r3, #20]
      break;
 800fd54:	e0b0      	b.n	800feb8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f9ca 	bl	80100f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd5c:	4b60      	ldr	r3, [pc, #384]	; (800fee0 <tcp_process+0x7d8>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	f003 0320 	and.w	r3, r3, #32
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80a9 	beq.w	800febc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8b5b      	ldrh	r3, [r3, #26]
 800fd6e:	f043 0302 	orr.w	r3, r3, #2
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7fe fd39 	bl	800e7f0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd7e:	4b59      	ldr	r3, [pc, #356]	; (800fee4 <tcp_process+0x7dc>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d105      	bne.n	800fd94 <tcp_process+0x68c>
 800fd88:	4b56      	ldr	r3, [pc, #344]	; (800fee4 <tcp_process+0x7dc>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	4a55      	ldr	r2, [pc, #340]	; (800fee4 <tcp_process+0x7dc>)
 800fd90:	6013      	str	r3, [r2, #0]
 800fd92:	e013      	b.n	800fdbc <tcp_process+0x6b4>
 800fd94:	4b53      	ldr	r3, [pc, #332]	; (800fee4 <tcp_process+0x7dc>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	613b      	str	r3, [r7, #16]
 800fd9a:	e00c      	b.n	800fdb6 <tcp_process+0x6ae>
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d104      	bne.n	800fdb0 <tcp_process+0x6a8>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	68da      	ldr	r2, [r3, #12]
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	60da      	str	r2, [r3, #12]
 800fdae:	e005      	b.n	800fdbc <tcp_process+0x6b4>
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	613b      	str	r3, [r7, #16]
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1ef      	bne.n	800fd9c <tcp_process+0x694>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	60da      	str	r2, [r3, #12]
 800fdc2:	4b43      	ldr	r3, [pc, #268]	; (800fed0 <tcp_process+0x7c8>)
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	220a      	movs	r2, #10
 800fdcc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fdce:	4b41      	ldr	r3, [pc, #260]	; (800fed4 <tcp_process+0x7cc>)
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	60da      	str	r2, [r3, #12]
 800fdd6:	4a3f      	ldr	r2, [pc, #252]	; (800fed4 <tcp_process+0x7cc>)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	f002 fc92 	bl	8012704 <tcp_timer_needed>
      }
      break;
 800fde0:	e06c      	b.n	800febc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f984 	bl	80100f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fde8:	4b3b      	ldr	r3, [pc, #236]	; (800fed8 <tcp_process+0x7d0>)
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	f003 0310 	and.w	r3, r3, #16
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d065      	beq.n	800fec0 <tcp_process+0x7b8>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdf8:	4b38      	ldr	r3, [pc, #224]	; (800fedc <tcp_process+0x7d4>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d15f      	bne.n	800fec0 <tcp_process+0x7b8>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d15b      	bne.n	800fec0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7fe fcf1 	bl	800e7f0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe0e:	4b35      	ldr	r3, [pc, #212]	; (800fee4 <tcp_process+0x7dc>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d105      	bne.n	800fe24 <tcp_process+0x71c>
 800fe18:	4b32      	ldr	r3, [pc, #200]	; (800fee4 <tcp_process+0x7dc>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	4a31      	ldr	r2, [pc, #196]	; (800fee4 <tcp_process+0x7dc>)
 800fe20:	6013      	str	r3, [r2, #0]
 800fe22:	e013      	b.n	800fe4c <tcp_process+0x744>
 800fe24:	4b2f      	ldr	r3, [pc, #188]	; (800fee4 <tcp_process+0x7dc>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	60fb      	str	r3, [r7, #12]
 800fe2a:	e00c      	b.n	800fe46 <tcp_process+0x73e>
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d104      	bne.n	800fe40 <tcp_process+0x738>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	68da      	ldr	r2, [r3, #12]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	60da      	str	r2, [r3, #12]
 800fe3e:	e005      	b.n	800fe4c <tcp_process+0x744>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	60fb      	str	r3, [r7, #12]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1ef      	bne.n	800fe2c <tcp_process+0x724>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	60da      	str	r2, [r3, #12]
 800fe52:	4b1f      	ldr	r3, [pc, #124]	; (800fed0 <tcp_process+0x7c8>)
 800fe54:	2201      	movs	r2, #1
 800fe56:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	220a      	movs	r2, #10
 800fe5c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe5e:	4b1d      	ldr	r3, [pc, #116]	; (800fed4 <tcp_process+0x7cc>)
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	60da      	str	r2, [r3, #12]
 800fe66:	4a1b      	ldr	r2, [pc, #108]	; (800fed4 <tcp_process+0x7cc>)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6013      	str	r3, [r2, #0]
 800fe6c:	f002 fc4a 	bl	8012704 <tcp_timer_needed>
      }
      break;
 800fe70:	e026      	b.n	800fec0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 f93c 	bl	80100f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe78:	4b17      	ldr	r3, [pc, #92]	; (800fed8 <tcp_process+0x7d0>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	f003 0310 	and.w	r3, r3, #16
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d01f      	beq.n	800fec4 <tcp_process+0x7bc>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe88:	4b14      	ldr	r3, [pc, #80]	; (800fedc <tcp_process+0x7d4>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d119      	bne.n	800fec4 <tcp_process+0x7bc>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d115      	bne.n	800fec4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fe98:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <tcp_process+0x7d8>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	f043 0310 	orr.w	r3, r3, #16
 800fea0:	b2da      	uxtb	r2, r3
 800fea2:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <tcp_process+0x7d8>)
 800fea4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fea6:	e00d      	b.n	800fec4 <tcp_process+0x7bc>
    default:
      break;
 800fea8:	bf00      	nop
 800feaa:	e00c      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800feac:	bf00      	nop
 800feae:	e00a      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800feb0:	bf00      	nop
 800feb2:	e008      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800feb4:	bf00      	nop
 800feb6:	e006      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800feb8:	bf00      	nop
 800feba:	e004      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800febc:	bf00      	nop
 800febe:	e002      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800fec0:	bf00      	nop
 800fec2:	e000      	b.n	800fec6 <tcp_process+0x7be>
      break;
 800fec4:	bf00      	nop
  }
  return ERR_OK;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3724      	adds	r7, #36	; 0x24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd90      	pop	{r4, r7, pc}
 800fed0:	20008c90 	.word	0x20008c90
 800fed4:	20008c8c 	.word	0x20008c8c
 800fed8:	20008cc0 	.word	0x20008cc0
 800fedc:	20008cb8 	.word	0x20008cb8
 800fee0:	20008cc1 	.word	0x20008cc1
 800fee4:	20008c88 	.word	0x20008c88

0800fee8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fee8:	b590      	push	{r4, r7, lr}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d106      	bne.n	800ff06 <tcp_oos_insert_segment+0x1e>
 800fef8:	4b3b      	ldr	r3, [pc, #236]	; (800ffe8 <tcp_oos_insert_segment+0x100>)
 800fefa:	f240 421f 	movw	r2, #1055	; 0x41f
 800fefe:	493b      	ldr	r1, [pc, #236]	; (800ffec <tcp_oos_insert_segment+0x104>)
 800ff00:	483b      	ldr	r0, [pc, #236]	; (800fff0 <tcp_oos_insert_segment+0x108>)
 800ff02:	f006 fdcf 	bl	8016aa4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	899b      	ldrh	r3, [r3, #12]
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7fb fc0e 	bl	800b730 <lwip_htons>
 800ff14:	4603      	mov	r3, r0
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	f003 0301 	and.w	r3, r3, #1
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d028      	beq.n	800ff72 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ff20:	6838      	ldr	r0, [r7, #0]
 800ff22:	f7fe fa63 	bl	800e3ec <tcp_segs_free>
    next = NULL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	603b      	str	r3, [r7, #0]
 800ff2a:	e056      	b.n	800ffda <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	899b      	ldrh	r3, [r3, #12]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fb fbfb 	bl	800b730 <lwip_htons>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	f003 0301 	and.w	r3, r3, #1
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00d      	beq.n	800ff62 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	899b      	ldrh	r3, [r3, #12]
 800ff4c:	b29c      	uxth	r4, r3
 800ff4e:	2001      	movs	r0, #1
 800ff50:	f7fb fbee 	bl	800b730 <lwip_htons>
 800ff54:	4603      	mov	r3, r0
 800ff56:	461a      	mov	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	4322      	orrs	r2, r4
 800ff5e:	b292      	uxth	r2, r2
 800ff60:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f7fe fa52 	bl	800e416 <tcp_seg_free>
    while (next &&
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00e      	beq.n	800ff96 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	891b      	ldrh	r3, [r3, #8]
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <tcp_oos_insert_segment+0x10c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	441a      	add	r2, r3
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	8909      	ldrh	r1, [r1, #8]
 800ff8e:	440b      	add	r3, r1
 800ff90:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	daca      	bge.n	800ff2c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01e      	beq.n	800ffda <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	891b      	ldrh	r3, [r3, #8]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4b14      	ldr	r3, [pc, #80]	; (800fff4 <tcp_oos_insert_segment+0x10c>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	441a      	add	r2, r3
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dd12      	ble.n	800ffda <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	4b0d      	ldr	r3, [pc, #52]	; (800fff4 <tcp_oos_insert_segment+0x10c>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	1ad3      	subs	r3, r2, r3
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	891b      	ldrh	r3, [r3, #8]
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	f7fc fd83 	bl	800cae0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	601a      	str	r2, [r3, #0]
}
 800ffe0:	bf00      	nop
 800ffe2:	3714      	adds	r7, #20
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd90      	pop	{r4, r7, pc}
 800ffe8:	08018e7c 	.word	0x08018e7c
 800ffec:	0801913c 	.word	0x0801913c
 800fff0:	08018ec8 	.word	0x08018ec8
 800fff4:	20008cb4 	.word	0x20008cb4

0800fff8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fff8:	b5b0      	push	{r4, r5, r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	60f8      	str	r0, [r7, #12]
 8010000:	60b9      	str	r1, [r7, #8]
 8010002:	607a      	str	r2, [r7, #4]
 8010004:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010006:	e03e      	b.n	8010086 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	4618      	mov	r0, r3
 8010018:	f7fc ff70 	bl	800cefc <pbuf_clen>
 801001c:	4603      	mov	r3, r0
 801001e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010026:	8a7a      	ldrh	r2, [r7, #18]
 8010028:	429a      	cmp	r2, r3
 801002a:	d906      	bls.n	801003a <tcp_free_acked_segments+0x42>
 801002c:	4b2a      	ldr	r3, [pc, #168]	; (80100d8 <tcp_free_acked_segments+0xe0>)
 801002e:	f240 4257 	movw	r2, #1111	; 0x457
 8010032:	492a      	ldr	r1, [pc, #168]	; (80100dc <tcp_free_acked_segments+0xe4>)
 8010034:	482a      	ldr	r0, [pc, #168]	; (80100e0 <tcp_free_acked_segments+0xe8>)
 8010036:	f006 fd35 	bl	8016aa4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010040:	8a7b      	ldrh	r3, [r7, #18]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	b29a      	uxth	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	891a      	ldrh	r2, [r3, #8]
 8010050:	4b24      	ldr	r3, [pc, #144]	; (80100e4 <tcp_free_acked_segments+0xec>)
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	4413      	add	r3, r2
 8010056:	b29a      	uxth	r2, r3
 8010058:	4b22      	ldr	r3, [pc, #136]	; (80100e4 <tcp_free_acked_segments+0xec>)
 801005a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801005c:	6978      	ldr	r0, [r7, #20]
 801005e:	f7fe f9da 	bl	800e416 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00c      	beq.n	8010086 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d109      	bne.n	8010086 <tcp_free_acked_segments+0x8e>
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d106      	bne.n	8010086 <tcp_free_acked_segments+0x8e>
 8010078:	4b17      	ldr	r3, [pc, #92]	; (80100d8 <tcp_free_acked_segments+0xe0>)
 801007a:	f240 4261 	movw	r2, #1121	; 0x461
 801007e:	491a      	ldr	r1, [pc, #104]	; (80100e8 <tcp_free_acked_segments+0xf0>)
 8010080:	4817      	ldr	r0, [pc, #92]	; (80100e0 <tcp_free_acked_segments+0xe8>)
 8010082:	f006 fd0f 	bl	8016aa4 <iprintf>
  while (seg_list != NULL &&
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d020      	beq.n	80100ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	f7fb fb61 	bl	800b75a <lwip_htonl>
 8010098:	4604      	mov	r4, r0
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	891b      	ldrh	r3, [r3, #8]
 801009e:	461d      	mov	r5, r3
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	899b      	ldrh	r3, [r3, #12]
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fb fb41 	bl	800b730 <lwip_htons>
 80100ae:	4603      	mov	r3, r0
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	f003 0303 	and.w	r3, r3, #3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <tcp_free_acked_segments+0xc6>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e000      	b.n	80100c0 <tcp_free_acked_segments+0xc8>
 80100be:	2300      	movs	r3, #0
 80100c0:	442b      	add	r3, r5
 80100c2:	18e2      	adds	r2, r4, r3
 80100c4:	4b09      	ldr	r3, [pc, #36]	; (80100ec <tcp_free_acked_segments+0xf4>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	dd9c      	ble.n	8010008 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80100ce:	68bb      	ldr	r3, [r7, #8]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bdb0      	pop	{r4, r5, r7, pc}
 80100d8:	08018e7c 	.word	0x08018e7c
 80100dc:	08019164 	.word	0x08019164
 80100e0:	08018ec8 	.word	0x08018ec8
 80100e4:	20008cbc 	.word	0x20008cbc
 80100e8:	0801918c 	.word	0x0801918c
 80100ec:	20008cb8 	.word	0x20008cb8

080100f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80100f0:	b5b0      	push	{r4, r5, r7, lr}
 80100f2:	b094      	sub	sp, #80	; 0x50
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80100f8:	2300      	movs	r3, #0
 80100fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <tcp_receive+0x20>
 8010102:	4b91      	ldr	r3, [pc, #580]	; (8010348 <tcp_receive+0x258>)
 8010104:	f240 427b 	movw	r2, #1147	; 0x47b
 8010108:	4990      	ldr	r1, [pc, #576]	; (801034c <tcp_receive+0x25c>)
 801010a:	4891      	ldr	r0, [pc, #580]	; (8010350 <tcp_receive+0x260>)
 801010c:	f006 fcca 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	7d1b      	ldrb	r3, [r3, #20]
 8010114:	2b03      	cmp	r3, #3
 8010116:	d806      	bhi.n	8010126 <tcp_receive+0x36>
 8010118:	4b8b      	ldr	r3, [pc, #556]	; (8010348 <tcp_receive+0x258>)
 801011a:	f240 427c 	movw	r2, #1148	; 0x47c
 801011e:	498d      	ldr	r1, [pc, #564]	; (8010354 <tcp_receive+0x264>)
 8010120:	488b      	ldr	r0, [pc, #556]	; (8010350 <tcp_receive+0x260>)
 8010122:	f006 fcbf 	bl	8016aa4 <iprintf>

  if (flags & TCP_ACK) {
 8010126:	4b8c      	ldr	r3, [pc, #560]	; (8010358 <tcp_receive+0x268>)
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 8264 	beq.w	80105fc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801013a:	461a      	mov	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010140:	4413      	add	r3, r2
 8010142:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010148:	4b84      	ldr	r3, [pc, #528]	; (801035c <tcp_receive+0x26c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	db1b      	blt.n	801018a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010156:	4b81      	ldr	r3, [pc, #516]	; (801035c <tcp_receive+0x26c>)
 8010158:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801015a:	429a      	cmp	r2, r3
 801015c:	d106      	bne.n	801016c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010162:	4b7f      	ldr	r3, [pc, #508]	; (8010360 <tcp_receive+0x270>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	2b00      	cmp	r3, #0
 801016a:	db0e      	blt.n	801018a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010170:	4b7b      	ldr	r3, [pc, #492]	; (8010360 <tcp_receive+0x270>)
 8010172:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010174:	429a      	cmp	r2, r3
 8010176:	d125      	bne.n	80101c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010178:	4b7a      	ldr	r3, [pc, #488]	; (8010364 <tcp_receive+0x274>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	89db      	ldrh	r3, [r3, #14]
 801017e:	b29a      	uxth	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010186:	429a      	cmp	r2, r3
 8010188:	d91c      	bls.n	80101c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801018a:	4b76      	ldr	r3, [pc, #472]	; (8010364 <tcp_receive+0x274>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	89db      	ldrh	r3, [r3, #14]
 8010190:	b29a      	uxth	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d205      	bcs.n	80101b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80101b4:	4b69      	ldr	r3, [pc, #420]	; (801035c <tcp_receive+0x26c>)
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80101bc:	4b68      	ldr	r3, [pc, #416]	; (8010360 <tcp_receive+0x270>)
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80101c4:	4b66      	ldr	r3, [pc, #408]	; (8010360 <tcp_receive+0x270>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	dc58      	bgt.n	8010284 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80101d2:	4b65      	ldr	r3, [pc, #404]	; (8010368 <tcp_receive+0x278>)
 80101d4:	881b      	ldrh	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d14b      	bne.n	8010272 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80101e4:	4413      	add	r3, r2
 80101e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d142      	bne.n	8010272 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	db3d      	blt.n	8010272 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101fa:	4b59      	ldr	r3, [pc, #356]	; (8010360 <tcp_receive+0x270>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d137      	bne.n	8010272 <tcp_receive+0x182>
              found_dupack = 1;
 8010202:	2301      	movs	r3, #1
 8010204:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801020c:	2bff      	cmp	r3, #255	; 0xff
 801020e:	d007      	beq.n	8010220 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010216:	3301      	adds	r3, #1
 8010218:	b2da      	uxtb	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010226:	2b03      	cmp	r3, #3
 8010228:	d91b      	bls.n	8010262 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010234:	4413      	add	r3, r2
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801023e:	429a      	cmp	r2, r3
 8010240:	d30a      	bcc.n	8010258 <tcp_receive+0x168>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801024c:	4413      	add	r3, r2
 801024e:	b29a      	uxth	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010256:	e004      	b.n	8010262 <tcp_receive+0x172>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801025e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010268:	2b02      	cmp	r3, #2
 801026a:	d902      	bls.n	8010272 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f001 feeb 	bl	8012048 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010274:	2b00      	cmp	r3, #0
 8010276:	f040 8161 	bne.w	801053c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010282:	e15b      	b.n	801053c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010284:	4b36      	ldr	r3, [pc, #216]	; (8010360 <tcp_receive+0x270>)
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	3b01      	subs	r3, #1
 8010290:	2b00      	cmp	r3, #0
 8010292:	f2c0 814e 	blt.w	8010532 <tcp_receive+0x442>
 8010296:	4b32      	ldr	r3, [pc, #200]	; (8010360 <tcp_receive+0x270>)
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f300 8146 	bgt.w	8010532 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	8b5b      	ldrh	r3, [r3, #26]
 80102aa:	f003 0304 	and.w	r3, r3, #4
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d010      	beq.n	80102d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8b5b      	ldrh	r3, [r3, #26]
 80102b6:	f023 0304 	bic.w	r3, r3, #4
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80102e2:	10db      	asrs	r3, r3, #3
 80102e4:	b21b      	sxth	r3, r3
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	4413      	add	r3, r2
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	b21a      	sxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80102fc:	4b18      	ldr	r3, [pc, #96]	; (8010360 <tcp_receive+0x270>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	b29a      	uxth	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010306:	b29b      	uxth	r3, r3
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010314:	4b12      	ldr	r3, [pc, #72]	; (8010360 <tcp_receive+0x270>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	7d1b      	ldrb	r3, [r3, #20]
 8010320:	2b03      	cmp	r3, #3
 8010322:	f240 8097 	bls.w	8010454 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010332:	429a      	cmp	r2, r3
 8010334:	d245      	bcs.n	80103c2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	8b5b      	ldrh	r3, [r3, #26]
 801033a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801033e:	2b00      	cmp	r3, #0
 8010340:	d014      	beq.n	801036c <tcp_receive+0x27c>
 8010342:	2301      	movs	r3, #1
 8010344:	e013      	b.n	801036e <tcp_receive+0x27e>
 8010346:	bf00      	nop
 8010348:	08018e7c 	.word	0x08018e7c
 801034c:	080191ac 	.word	0x080191ac
 8010350:	08018ec8 	.word	0x08018ec8
 8010354:	080191c8 	.word	0x080191c8
 8010358:	20008cc0 	.word	0x20008cc0
 801035c:	20008cb4 	.word	0x20008cb4
 8010360:	20008cb8 	.word	0x20008cb8
 8010364:	20008ca4 	.word	0x20008ca4
 8010368:	20008cbe 	.word	0x20008cbe
 801036c:	2302      	movs	r3, #2
 801036e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010372:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010376:	b29a      	uxth	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801037c:	fb12 f303 	smulbb	r3, r2, r3
 8010380:	b29b      	uxth	r3, r3
 8010382:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010384:	4293      	cmp	r3, r2
 8010386:	bf28      	it	cs
 8010388:	4613      	movcs	r3, r2
 801038a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010394:	4413      	add	r3, r2
 8010396:	b29a      	uxth	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801039e:	429a      	cmp	r2, r3
 80103a0:	d309      	bcc.n	80103b6 <tcp_receive+0x2c6>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103aa:	4413      	add	r3, r2
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103b4:	e04e      	b.n	8010454 <tcp_receive+0x364>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103c0:	e048      	b.n	8010454 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103ca:	4413      	add	r3, r2
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d309      	bcc.n	80103ec <tcp_receive+0x2fc>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103e0:	4413      	add	r3, r2
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80103ea:	e004      	b.n	80103f6 <tcp_receive+0x306>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010402:	429a      	cmp	r2, r3
 8010404:	d326      	bcc.n	8010454 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010426:	4413      	add	r3, r2
 8010428:	b29a      	uxth	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010430:	429a      	cmp	r2, r3
 8010432:	d30a      	bcc.n	801044a <tcp_receive+0x35a>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801043e:	4413      	add	r3, r2
 8010440:	b29a      	uxth	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010448:	e004      	b.n	8010454 <tcp_receive+0x364>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010450:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801045c:	4a98      	ldr	r2, [pc, #608]	; (80106c0 <tcp_receive+0x5d0>)
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7ff fdca 	bl	800fff8 <tcp_free_acked_segments>
 8010464:	4602      	mov	r2, r0
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010472:	4a94      	ldr	r2, [pc, #592]	; (80106c4 <tcp_receive+0x5d4>)
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7ff fdbf 	bl	800fff8 <tcp_free_acked_segments>
 801047a:	4602      	mov	r2, r0
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010484:	2b00      	cmp	r3, #0
 8010486:	d104      	bne.n	8010492 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801048e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010490:	e002      	b.n	8010498 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d103      	bne.n	80104ae <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80104b4:	4b84      	ldr	r3, [pc, #528]	; (80106c8 <tcp_receive+0x5d8>)
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	4413      	add	r3, r2
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	8b5b      	ldrh	r3, [r3, #26]
 80104c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d035      	beq.n	801053a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d118      	bne.n	8010508 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00c      	beq.n	80104f8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fb f935 	bl	800b75a <lwip_htonl>
 80104f0:	4603      	mov	r3, r0
 80104f2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dc20      	bgt.n	801053a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	8b5b      	ldrh	r3, [r3, #26]
 80104fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010500:	b29a      	uxth	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010506:	e018      	b.n	801053a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010510:	68db      	ldr	r3, [r3, #12]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	f7fb f920 	bl	800b75a <lwip_htonl>
 801051a:	4603      	mov	r3, r0
 801051c:	1ae3      	subs	r3, r4, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	dc0b      	bgt.n	801053a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	8b5b      	ldrh	r3, [r3, #26]
 8010526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801052a:	b29a      	uxth	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010530:	e003      	b.n	801053a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f001 ff76 	bl	8012424 <tcp_send_empty_ack>
 8010538:	e000      	b.n	801053c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801053a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010540:	2b00      	cmp	r3, #0
 8010542:	d05b      	beq.n	80105fc <tcp_receive+0x50c>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010548:	4b60      	ldr	r3, [pc, #384]	; (80106cc <tcp_receive+0x5dc>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	da54      	bge.n	80105fc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010552:	4b5f      	ldr	r3, [pc, #380]	; (80106d0 <tcp_receive+0x5e0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	b29a      	uxth	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801055c:	b29b      	uxth	r3, r3
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	b29b      	uxth	r3, r3
 8010562:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010566:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010570:	10db      	asrs	r3, r3, #3
 8010572:	b21b      	sxth	r3, r3
 8010574:	b29b      	uxth	r3, r3
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	b29b      	uxth	r3, r3
 801057a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010584:	b29a      	uxth	r2, r3
 8010586:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801058a:	4413      	add	r3, r2
 801058c:	b29b      	uxth	r3, r3
 801058e:	b21a      	sxth	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010594:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010598:	2b00      	cmp	r3, #0
 801059a:	da05      	bge.n	80105a8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801059c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105a0:	425b      	negs	r3, r3
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80105a8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105b2:	109b      	asrs	r3, r3, #2
 80105b4:	b21b      	sxth	r3, r3
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	1ad3      	subs	r3, r2, r3
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105cc:	4413      	add	r3, r2
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	b21a      	sxth	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105dc:	10db      	asrs	r3, r3, #3
 80105de:	b21b      	sxth	r3, r3
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	4413      	add	r3, r2
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	b21a      	sxth	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80105fc:	4b35      	ldr	r3, [pc, #212]	; (80106d4 <tcp_receive+0x5e4>)
 80105fe:	881b      	ldrh	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 84e2 	beq.w	8010fca <tcp_receive+0xeda>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7d1b      	ldrb	r3, [r3, #20]
 801060a:	2b06      	cmp	r3, #6
 801060c:	f200 84dd 	bhi.w	8010fca <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010614:	4b30      	ldr	r3, [pc, #192]	; (80106d8 <tcp_receive+0x5e8>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	3b01      	subs	r3, #1
 801061c:	2b00      	cmp	r3, #0
 801061e:	f2c0 808f 	blt.w	8010740 <tcp_receive+0x650>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010626:	4b2b      	ldr	r3, [pc, #172]	; (80106d4 <tcp_receive+0x5e4>)
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	4619      	mov	r1, r3
 801062c:	4b2a      	ldr	r3, [pc, #168]	; (80106d8 <tcp_receive+0x5e8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	440b      	add	r3, r1
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	3301      	adds	r3, #1
 8010636:	2b00      	cmp	r3, #0
 8010638:	f300 8082 	bgt.w	8010740 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801063c:	4b27      	ldr	r3, [pc, #156]	; (80106dc <tcp_receive+0x5ec>)
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010646:	4b24      	ldr	r3, [pc, #144]	; (80106d8 <tcp_receive+0x5e8>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801064e:	4b23      	ldr	r3, [pc, #140]	; (80106dc <tcp_receive+0x5ec>)
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <tcp_receive+0x574>
 8010656:	4b22      	ldr	r3, [pc, #136]	; (80106e0 <tcp_receive+0x5f0>)
 8010658:	f240 5294 	movw	r2, #1428	; 0x594
 801065c:	4921      	ldr	r1, [pc, #132]	; (80106e4 <tcp_receive+0x5f4>)
 801065e:	4822      	ldr	r0, [pc, #136]	; (80106e8 <tcp_receive+0x5f8>)
 8010660:	f006 fa20 	bl	8016aa4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801066a:	4293      	cmp	r3, r2
 801066c:	d906      	bls.n	801067c <tcp_receive+0x58c>
 801066e:	4b1c      	ldr	r3, [pc, #112]	; (80106e0 <tcp_receive+0x5f0>)
 8010670:	f240 5295 	movw	r2, #1429	; 0x595
 8010674:	491d      	ldr	r1, [pc, #116]	; (80106ec <tcp_receive+0x5fc>)
 8010676:	481c      	ldr	r0, [pc, #112]	; (80106e8 <tcp_receive+0x5f8>)
 8010678:	f006 fa14 	bl	8016aa4 <iprintf>
      off = (u16_t)off32;
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010682:	4b16      	ldr	r3, [pc, #88]	; (80106dc <tcp_receive+0x5ec>)
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	891b      	ldrh	r3, [r3, #8]
 8010688:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801068c:	429a      	cmp	r2, r3
 801068e:	d906      	bls.n	801069e <tcp_receive+0x5ae>
 8010690:	4b13      	ldr	r3, [pc, #76]	; (80106e0 <tcp_receive+0x5f0>)
 8010692:	f240 5297 	movw	r2, #1431	; 0x597
 8010696:	4916      	ldr	r1, [pc, #88]	; (80106f0 <tcp_receive+0x600>)
 8010698:	4813      	ldr	r0, [pc, #76]	; (80106e8 <tcp_receive+0x5f8>)
 801069a:	f006 fa03 	bl	8016aa4 <iprintf>
      inseg.len -= off;
 801069e:	4b0f      	ldr	r3, [pc, #60]	; (80106dc <tcp_receive+0x5ec>)
 80106a0:	891a      	ldrh	r2, [r3, #8]
 80106a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	4b0c      	ldr	r3, [pc, #48]	; (80106dc <tcp_receive+0x5ec>)
 80106ac:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80106ae:	4b0b      	ldr	r3, [pc, #44]	; (80106dc <tcp_receive+0x5ec>)
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	891a      	ldrh	r2, [r3, #8]
 80106b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80106bc:	e02a      	b.n	8010714 <tcp_receive+0x624>
 80106be:	bf00      	nop
 80106c0:	080191e4 	.word	0x080191e4
 80106c4:	080191ec 	.word	0x080191ec
 80106c8:	20008cbc 	.word	0x20008cbc
 80106cc:	20008cb8 	.word	0x20008cb8
 80106d0:	20008c7c 	.word	0x20008c7c
 80106d4:	20008cbe 	.word	0x20008cbe
 80106d8:	20008cb4 	.word	0x20008cb4
 80106dc:	20008c94 	.word	0x20008c94
 80106e0:	08018e7c 	.word	0x08018e7c
 80106e4:	080191f4 	.word	0x080191f4
 80106e8:	08018ec8 	.word	0x08018ec8
 80106ec:	08019204 	.word	0x08019204
 80106f0:	08019214 	.word	0x08019214
        off -= p->len;
 80106f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106f6:	895b      	ldrh	r3, [r3, #10]
 80106f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010704:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010706:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801070a:	2200      	movs	r2, #0
 801070c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801070e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010716:	895b      	ldrh	r3, [r3, #10]
 8010718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801071c:	429a      	cmp	r2, r3
 801071e:	d8e9      	bhi.n	80106f4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010720:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010724:	4619      	mov	r1, r3
 8010726:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010728:	f7fc fada 	bl	800cce0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010730:	4a91      	ldr	r2, [pc, #580]	; (8010978 <tcp_receive+0x888>)
 8010732:	6013      	str	r3, [r2, #0]
 8010734:	4b91      	ldr	r3, [pc, #580]	; (801097c <tcp_receive+0x88c>)
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	4a8f      	ldr	r2, [pc, #572]	; (8010978 <tcp_receive+0x888>)
 801073a:	6812      	ldr	r2, [r2, #0]
 801073c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801073e:	e00d      	b.n	801075c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010740:	4b8d      	ldr	r3, [pc, #564]	; (8010978 <tcp_receive+0x888>)
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010748:	1ad3      	subs	r3, r2, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	da06      	bge.n	801075c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	8b5b      	ldrh	r3, [r3, #26]
 8010752:	f043 0302 	orr.w	r3, r3, #2
 8010756:	b29a      	uxth	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801075c:	4b86      	ldr	r3, [pc, #536]	; (8010978 <tcp_receive+0x888>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	f2c0 842a 	blt.w	8010fc0 <tcp_receive+0xed0>
 801076c:	4b82      	ldr	r3, [pc, #520]	; (8010978 <tcp_receive+0x888>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010778:	440b      	add	r3, r1
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	3301      	adds	r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	f300 841e 	bgt.w	8010fc0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010788:	4b7b      	ldr	r3, [pc, #492]	; (8010978 <tcp_receive+0x888>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	429a      	cmp	r2, r3
 801078e:	f040 829a 	bne.w	8010cc6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010792:	4b7a      	ldr	r3, [pc, #488]	; (801097c <tcp_receive+0x88c>)
 8010794:	891c      	ldrh	r4, [r3, #8]
 8010796:	4b79      	ldr	r3, [pc, #484]	; (801097c <tcp_receive+0x88c>)
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	899b      	ldrh	r3, [r3, #12]
 801079c:	b29b      	uxth	r3, r3
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fa ffc6 	bl	800b730 <lwip_htons>
 80107a4:	4603      	mov	r3, r0
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	f003 0303 	and.w	r3, r3, #3
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d001      	beq.n	80107b4 <tcp_receive+0x6c4>
 80107b0:	2301      	movs	r3, #1
 80107b2:	e000      	b.n	80107b6 <tcp_receive+0x6c6>
 80107b4:	2300      	movs	r3, #0
 80107b6:	4423      	add	r3, r4
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	4b71      	ldr	r3, [pc, #452]	; (8010980 <tcp_receive+0x890>)
 80107bc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107c2:	4b6f      	ldr	r3, [pc, #444]	; (8010980 <tcp_receive+0x890>)
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d275      	bcs.n	80108b6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80107ca:	4b6c      	ldr	r3, [pc, #432]	; (801097c <tcp_receive+0x88c>)
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	899b      	ldrh	r3, [r3, #12]
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fa ffac 	bl	800b730 <lwip_htons>
 80107d8:	4603      	mov	r3, r0
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	f003 0301 	and.w	r3, r3, #1
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01f      	beq.n	8010824 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80107e4:	4b65      	ldr	r3, [pc, #404]	; (801097c <tcp_receive+0x88c>)
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	899b      	ldrh	r3, [r3, #12]
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	b21b      	sxth	r3, r3
 80107ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80107f2:	b21c      	sxth	r4, r3
 80107f4:	4b61      	ldr	r3, [pc, #388]	; (801097c <tcp_receive+0x88c>)
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	899b      	ldrh	r3, [r3, #12]
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fa ff97 	bl	800b730 <lwip_htons>
 8010802:	4603      	mov	r3, r0
 8010804:	b2db      	uxtb	r3, r3
 8010806:	b29b      	uxth	r3, r3
 8010808:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801080c:	b29b      	uxth	r3, r3
 801080e:	4618      	mov	r0, r3
 8010810:	f7fa ff8e 	bl	800b730 <lwip_htons>
 8010814:	4603      	mov	r3, r0
 8010816:	b21b      	sxth	r3, r3
 8010818:	4323      	orrs	r3, r4
 801081a:	b21a      	sxth	r2, r3
 801081c:	4b57      	ldr	r3, [pc, #348]	; (801097c <tcp_receive+0x88c>)
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	b292      	uxth	r2, r2
 8010822:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010828:	4b54      	ldr	r3, [pc, #336]	; (801097c <tcp_receive+0x88c>)
 801082a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801082c:	4b53      	ldr	r3, [pc, #332]	; (801097c <tcp_receive+0x88c>)
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	899b      	ldrh	r3, [r3, #12]
 8010832:	b29b      	uxth	r3, r3
 8010834:	4618      	mov	r0, r3
 8010836:	f7fa ff7b 	bl	800b730 <lwip_htons>
 801083a:	4603      	mov	r3, r0
 801083c:	b2db      	uxtb	r3, r3
 801083e:	f003 0302 	and.w	r3, r3, #2
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <tcp_receive+0x762>
            inseg.len -= 1;
 8010846:	4b4d      	ldr	r3, [pc, #308]	; (801097c <tcp_receive+0x88c>)
 8010848:	891b      	ldrh	r3, [r3, #8]
 801084a:	3b01      	subs	r3, #1
 801084c:	b29a      	uxth	r2, r3
 801084e:	4b4b      	ldr	r3, [pc, #300]	; (801097c <tcp_receive+0x88c>)
 8010850:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010852:	4b4a      	ldr	r3, [pc, #296]	; (801097c <tcp_receive+0x88c>)
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	4a49      	ldr	r2, [pc, #292]	; (801097c <tcp_receive+0x88c>)
 8010858:	8912      	ldrh	r2, [r2, #8]
 801085a:	4611      	mov	r1, r2
 801085c:	4618      	mov	r0, r3
 801085e:	f7fc f93f 	bl	800cae0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010862:	4b46      	ldr	r3, [pc, #280]	; (801097c <tcp_receive+0x88c>)
 8010864:	891c      	ldrh	r4, [r3, #8]
 8010866:	4b45      	ldr	r3, [pc, #276]	; (801097c <tcp_receive+0x88c>)
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	899b      	ldrh	r3, [r3, #12]
 801086c:	b29b      	uxth	r3, r3
 801086e:	4618      	mov	r0, r3
 8010870:	f7fa ff5e 	bl	800b730 <lwip_htons>
 8010874:	4603      	mov	r3, r0
 8010876:	b2db      	uxtb	r3, r3
 8010878:	f003 0303 	and.w	r3, r3, #3
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <tcp_receive+0x794>
 8010880:	2301      	movs	r3, #1
 8010882:	e000      	b.n	8010886 <tcp_receive+0x796>
 8010884:	2300      	movs	r3, #0
 8010886:	4423      	add	r3, r4
 8010888:	b29a      	uxth	r2, r3
 801088a:	4b3d      	ldr	r3, [pc, #244]	; (8010980 <tcp_receive+0x890>)
 801088c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801088e:	4b3c      	ldr	r3, [pc, #240]	; (8010980 <tcp_receive+0x890>)
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	4b38      	ldr	r3, [pc, #224]	; (8010978 <tcp_receive+0x888>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	441a      	add	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801089e:	6879      	ldr	r1, [r7, #4]
 80108a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108a2:	440b      	add	r3, r1
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d006      	beq.n	80108b6 <tcp_receive+0x7c6>
 80108a8:	4b36      	ldr	r3, [pc, #216]	; (8010984 <tcp_receive+0x894>)
 80108aa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80108ae:	4936      	ldr	r1, [pc, #216]	; (8010988 <tcp_receive+0x898>)
 80108b0:	4836      	ldr	r0, [pc, #216]	; (801098c <tcp_receive+0x89c>)
 80108b2:	f006 f8f7 	bl	8016aa4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 80e7 	beq.w	8010a8e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108c0:	4b2e      	ldr	r3, [pc, #184]	; (801097c <tcp_receive+0x88c>)
 80108c2:	68db      	ldr	r3, [r3, #12]
 80108c4:	899b      	ldrh	r3, [r3, #12]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fa ff31 	bl	800b730 <lwip_htons>
 80108ce:	4603      	mov	r3, r0
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	f003 0301 	and.w	r3, r3, #1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d010      	beq.n	80108fc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80108da:	e00a      	b.n	80108f2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f7fd fd92 	bl	800e416 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1f0      	bne.n	80108dc <tcp_receive+0x7ec>
 80108fa:	e0c8      	b.n	8010a8e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010900:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010902:	e052      	b.n	80109aa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	899b      	ldrh	r3, [r3, #12]
 801090a:	b29b      	uxth	r3, r3
 801090c:	4618      	mov	r0, r3
 801090e:	f7fa ff0f 	bl	800b730 <lwip_htons>
 8010912:	4603      	mov	r3, r0
 8010914:	b2db      	uxtb	r3, r3
 8010916:	f003 0301 	and.w	r3, r3, #1
 801091a:	2b00      	cmp	r3, #0
 801091c:	d03d      	beq.n	801099a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801091e:	4b17      	ldr	r3, [pc, #92]	; (801097c <tcp_receive+0x88c>)
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	899b      	ldrh	r3, [r3, #12]
 8010924:	b29b      	uxth	r3, r3
 8010926:	4618      	mov	r0, r3
 8010928:	f7fa ff02 	bl	800b730 <lwip_htons>
 801092c:	4603      	mov	r3, r0
 801092e:	b2db      	uxtb	r3, r3
 8010930:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010934:	2b00      	cmp	r3, #0
 8010936:	d130      	bne.n	801099a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010938:	4b10      	ldr	r3, [pc, #64]	; (801097c <tcp_receive+0x88c>)
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	899b      	ldrh	r3, [r3, #12]
 801093e:	b29c      	uxth	r4, r3
 8010940:	2001      	movs	r0, #1
 8010942:	f7fa fef5 	bl	800b730 <lwip_htons>
 8010946:	4603      	mov	r3, r0
 8010948:	461a      	mov	r2, r3
 801094a:	4b0c      	ldr	r3, [pc, #48]	; (801097c <tcp_receive+0x88c>)
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	4322      	orrs	r2, r4
 8010950:	b292      	uxth	r2, r2
 8010952:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010954:	4b09      	ldr	r3, [pc, #36]	; (801097c <tcp_receive+0x88c>)
 8010956:	891c      	ldrh	r4, [r3, #8]
 8010958:	4b08      	ldr	r3, [pc, #32]	; (801097c <tcp_receive+0x88c>)
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	899b      	ldrh	r3, [r3, #12]
 801095e:	b29b      	uxth	r3, r3
 8010960:	4618      	mov	r0, r3
 8010962:	f7fa fee5 	bl	800b730 <lwip_htons>
 8010966:	4603      	mov	r3, r0
 8010968:	b2db      	uxtb	r3, r3
 801096a:	f003 0303 	and.w	r3, r3, #3
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00e      	beq.n	8010990 <tcp_receive+0x8a0>
 8010972:	2301      	movs	r3, #1
 8010974:	e00d      	b.n	8010992 <tcp_receive+0x8a2>
 8010976:	bf00      	nop
 8010978:	20008cb4 	.word	0x20008cb4
 801097c:	20008c94 	.word	0x20008c94
 8010980:	20008cbe 	.word	0x20008cbe
 8010984:	08018e7c 	.word	0x08018e7c
 8010988:	08019224 	.word	0x08019224
 801098c:	08018ec8 	.word	0x08018ec8
 8010990:	2300      	movs	r3, #0
 8010992:	4423      	add	r3, r4
 8010994:	b29a      	uxth	r2, r3
 8010996:	4b98      	ldr	r3, [pc, #608]	; (8010bf8 <tcp_receive+0xb08>)
 8010998:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801099a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801099c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801099e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80109a4:	6938      	ldr	r0, [r7, #16]
 80109a6:	f7fd fd36 	bl	800e416 <tcp_seg_free>
            while (next &&
 80109aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00e      	beq.n	80109ce <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80109b0:	4b91      	ldr	r3, [pc, #580]	; (8010bf8 <tcp_receive+0xb08>)
 80109b2:	881b      	ldrh	r3, [r3, #0]
 80109b4:	461a      	mov	r2, r3
 80109b6:	4b91      	ldr	r3, [pc, #580]	; (8010bfc <tcp_receive+0xb0c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	441a      	add	r2, r3
 80109bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109c4:	8909      	ldrh	r1, [r1, #8]
 80109c6:	440b      	add	r3, r1
 80109c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	da9a      	bge.n	8010904 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80109ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d059      	beq.n	8010a88 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80109d4:	4b88      	ldr	r3, [pc, #544]	; (8010bf8 <tcp_receive+0xb08>)
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	461a      	mov	r2, r3
 80109da:	4b88      	ldr	r3, [pc, #544]	; (8010bfc <tcp_receive+0xb0c>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	441a      	add	r2, r3
 80109e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	dd4d      	ble.n	8010a88 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80109ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	4b81      	ldr	r3, [pc, #516]	; (8010bfc <tcp_receive+0xb0c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	1ad3      	subs	r3, r2, r3
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	4b80      	ldr	r3, [pc, #512]	; (8010c00 <tcp_receive+0xb10>)
 8010a00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a02:	4b7f      	ldr	r3, [pc, #508]	; (8010c00 <tcp_receive+0xb10>)
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	899b      	ldrh	r3, [r3, #12]
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fa fe90 	bl	800b730 <lwip_htons>
 8010a10:	4603      	mov	r3, r0
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	f003 0302 	and.w	r3, r3, #2
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d005      	beq.n	8010a28 <tcp_receive+0x938>
                inseg.len -= 1;
 8010a1c:	4b78      	ldr	r3, [pc, #480]	; (8010c00 <tcp_receive+0xb10>)
 8010a1e:	891b      	ldrh	r3, [r3, #8]
 8010a20:	3b01      	subs	r3, #1
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	4b76      	ldr	r3, [pc, #472]	; (8010c00 <tcp_receive+0xb10>)
 8010a26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010a28:	4b75      	ldr	r3, [pc, #468]	; (8010c00 <tcp_receive+0xb10>)
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	4a74      	ldr	r2, [pc, #464]	; (8010c00 <tcp_receive+0xb10>)
 8010a2e:	8912      	ldrh	r2, [r2, #8]
 8010a30:	4611      	mov	r1, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fc f854 	bl	800cae0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010a38:	4b71      	ldr	r3, [pc, #452]	; (8010c00 <tcp_receive+0xb10>)
 8010a3a:	891c      	ldrh	r4, [r3, #8]
 8010a3c:	4b70      	ldr	r3, [pc, #448]	; (8010c00 <tcp_receive+0xb10>)
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	899b      	ldrh	r3, [r3, #12]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fa fe73 	bl	800b730 <lwip_htons>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	f003 0303 	and.w	r3, r3, #3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d001      	beq.n	8010a5a <tcp_receive+0x96a>
 8010a56:	2301      	movs	r3, #1
 8010a58:	e000      	b.n	8010a5c <tcp_receive+0x96c>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	4423      	add	r3, r4
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	4b65      	ldr	r3, [pc, #404]	; (8010bf8 <tcp_receive+0xb08>)
 8010a62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010a64:	4b64      	ldr	r3, [pc, #400]	; (8010bf8 <tcp_receive+0xb08>)
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4b64      	ldr	r3, [pc, #400]	; (8010bfc <tcp_receive+0xb0c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	441a      	add	r2, r3
 8010a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d006      	beq.n	8010a88 <tcp_receive+0x998>
 8010a7a:	4b62      	ldr	r3, [pc, #392]	; (8010c04 <tcp_receive+0xb14>)
 8010a7c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010a80:	4961      	ldr	r1, [pc, #388]	; (8010c08 <tcp_receive+0xb18>)
 8010a82:	4862      	ldr	r0, [pc, #392]	; (8010c0c <tcp_receive+0xb1c>)
 8010a84:	f006 f80e 	bl	8016aa4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a8c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010a8e:	4b5a      	ldr	r3, [pc, #360]	; (8010bf8 <tcp_receive+0xb08>)
 8010a90:	881b      	ldrh	r3, [r3, #0]
 8010a92:	461a      	mov	r2, r3
 8010a94:	4b59      	ldr	r3, [pc, #356]	; (8010bfc <tcp_receive+0xb0c>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	441a      	add	r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010aa2:	4b55      	ldr	r3, [pc, #340]	; (8010bf8 <tcp_receive+0xb08>)
 8010aa4:	881b      	ldrh	r3, [r3, #0]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d206      	bcs.n	8010ab8 <tcp_receive+0x9c8>
 8010aaa:	4b56      	ldr	r3, [pc, #344]	; (8010c04 <tcp_receive+0xb14>)
 8010aac:	f240 6207 	movw	r2, #1543	; 0x607
 8010ab0:	4957      	ldr	r1, [pc, #348]	; (8010c10 <tcp_receive+0xb20>)
 8010ab2:	4856      	ldr	r0, [pc, #344]	; (8010c0c <tcp_receive+0xb1c>)
 8010ab4:	f005 fff6 	bl	8016aa4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010abc:	4b4e      	ldr	r3, [pc, #312]	; (8010bf8 <tcp_receive+0xb08>)
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7fc ffc5 	bl	800da58 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010ace:	4b4c      	ldr	r3, [pc, #304]	; (8010c00 <tcp_receive+0xb10>)
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	891b      	ldrh	r3, [r3, #8]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d006      	beq.n	8010ae6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010ad8:	4b49      	ldr	r3, [pc, #292]	; (8010c00 <tcp_receive+0xb10>)
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	4a4d      	ldr	r2, [pc, #308]	; (8010c14 <tcp_receive+0xb24>)
 8010ade:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010ae0:	4b47      	ldr	r3, [pc, #284]	; (8010c00 <tcp_receive+0xb10>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ae6:	4b46      	ldr	r3, [pc, #280]	; (8010c00 <tcp_receive+0xb10>)
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	899b      	ldrh	r3, [r3, #12]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fa fe1e 	bl	800b730 <lwip_htons>
 8010af4:	4603      	mov	r3, r0
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	f000 80b8 	beq.w	8010c72 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b02:	4b45      	ldr	r3, [pc, #276]	; (8010c18 <tcp_receive+0xb28>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	f043 0320 	orr.w	r3, r3, #32
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	4b42      	ldr	r3, [pc, #264]	; (8010c18 <tcp_receive+0xb28>)
 8010b0e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010b10:	e0af      	b.n	8010c72 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b16:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	4a36      	ldr	r2, [pc, #216]	; (8010bfc <tcp_receive+0xb0c>)
 8010b22:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	891b      	ldrh	r3, [r3, #8]
 8010b28:	461c      	mov	r4, r3
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	68db      	ldr	r3, [r3, #12]
 8010b2e:	899b      	ldrh	r3, [r3, #12]
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fa fdfc 	bl	800b730 <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	f003 0303 	and.w	r3, r3, #3
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d001      	beq.n	8010b48 <tcp_receive+0xa58>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e000      	b.n	8010b4a <tcp_receive+0xa5a>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	191a      	adds	r2, r3, r4
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b50:	441a      	add	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b5a:	461c      	mov	r4, r3
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	891b      	ldrh	r3, [r3, #8]
 8010b60:	461d      	mov	r5, r3
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	899b      	ldrh	r3, [r3, #12]
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fa fde0 	bl	800b730 <lwip_htons>
 8010b70:	4603      	mov	r3, r0
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	f003 0303 	and.w	r3, r3, #3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d001      	beq.n	8010b80 <tcp_receive+0xa90>
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e000      	b.n	8010b82 <tcp_receive+0xa92>
 8010b80:	2300      	movs	r3, #0
 8010b82:	442b      	add	r3, r5
 8010b84:	429c      	cmp	r4, r3
 8010b86:	d206      	bcs.n	8010b96 <tcp_receive+0xaa6>
 8010b88:	4b1e      	ldr	r3, [pc, #120]	; (8010c04 <tcp_receive+0xb14>)
 8010b8a:	f240 622b 	movw	r2, #1579	; 0x62b
 8010b8e:	4923      	ldr	r1, [pc, #140]	; (8010c1c <tcp_receive+0xb2c>)
 8010b90:	481e      	ldr	r0, [pc, #120]	; (8010c0c <tcp_receive+0xb1c>)
 8010b92:	f005 ff87 	bl	8016aa4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	891b      	ldrh	r3, [r3, #8]
 8010b9a:	461c      	mov	r4, r3
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	899b      	ldrh	r3, [r3, #12]
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fa fdc3 	bl	800b730 <lwip_htons>
 8010baa:	4603      	mov	r3, r0
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	f003 0303 	and.w	r3, r3, #3
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d001      	beq.n	8010bba <tcp_receive+0xaca>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e000      	b.n	8010bbc <tcp_receive+0xacc>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	1919      	adds	r1, r3, r4
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010bc2:	b28b      	uxth	r3, r1
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7fc ff43 	bl	800da58 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	891b      	ldrh	r3, [r3, #8]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d028      	beq.n	8010c2e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010bdc:	4b0d      	ldr	r3, [pc, #52]	; (8010c14 <tcp_receive+0xb24>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d01d      	beq.n	8010c20 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010be4:	4b0b      	ldr	r3, [pc, #44]	; (8010c14 <tcp_receive+0xb24>)
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	4619      	mov	r1, r3
 8010bee:	4610      	mov	r0, r2
 8010bf0:	f7fc f9be 	bl	800cf70 <pbuf_cat>
 8010bf4:	e018      	b.n	8010c28 <tcp_receive+0xb38>
 8010bf6:	bf00      	nop
 8010bf8:	20008cbe 	.word	0x20008cbe
 8010bfc:	20008cb4 	.word	0x20008cb4
 8010c00:	20008c94 	.word	0x20008c94
 8010c04:	08018e7c 	.word	0x08018e7c
 8010c08:	0801925c 	.word	0x0801925c
 8010c0c:	08018ec8 	.word	0x08018ec8
 8010c10:	08019298 	.word	0x08019298
 8010c14:	20008cc4 	.word	0x20008cc4
 8010c18:	20008cc1 	.word	0x20008cc1
 8010c1c:	080192b8 	.word	0x080192b8
            } else {
              recv_data = cseg->p;
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	4a70      	ldr	r2, [pc, #448]	; (8010de8 <tcp_receive+0xcf8>)
 8010c26:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	899b      	ldrh	r3, [r3, #12]
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fa fd7a 	bl	800b730 <lwip_htons>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	f003 0301 	and.w	r3, r3, #1
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00d      	beq.n	8010c64 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010c48:	4b68      	ldr	r3, [pc, #416]	; (8010dec <tcp_receive+0xcfc>)
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	f043 0320 	orr.w	r3, r3, #32
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	4b66      	ldr	r3, [pc, #408]	; (8010dec <tcp_receive+0xcfc>)
 8010c54:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	7d1b      	ldrb	r3, [r3, #20]
 8010c5a:	2b04      	cmp	r3, #4
 8010c5c:	d102      	bne.n	8010c64 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2207      	movs	r2, #7
 8010c62:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010c6c:	68b8      	ldr	r0, [r7, #8]
 8010c6e:	f7fd fbd2 	bl	800e416 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d008      	beq.n	8010c8c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	685a      	ldr	r2, [r3, #4]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010c86:	429a      	cmp	r2, r3
 8010c88:	f43f af43 	beq.w	8010b12 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	8b5b      	ldrh	r3, [r3, #26]
 8010c90:	f003 0301 	and.w	r3, r3, #1
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d00e      	beq.n	8010cb6 <tcp_receive+0xbc6>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	8b5b      	ldrh	r3, [r3, #26]
 8010c9c:	f023 0301 	bic.w	r3, r3, #1
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	835a      	strh	r2, [r3, #26]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	8b5b      	ldrh	r3, [r3, #26]
 8010caa:	f043 0302 	orr.w	r3, r3, #2
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010cb4:	e188      	b.n	8010fc8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	8b5b      	ldrh	r3, [r3, #26]
 8010cba:	f043 0301 	orr.w	r3, r3, #1
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010cc4:	e180      	b.n	8010fc8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d106      	bne.n	8010cdc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010cce:	4848      	ldr	r0, [pc, #288]	; (8010df0 <tcp_receive+0xd00>)
 8010cd0:	f7fd fbba 	bl	800e448 <tcp_seg_copy>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	675a      	str	r2, [r3, #116]	; 0x74
 8010cda:	e16d      	b.n	8010fb8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ce6:	e157      	b.n	8010f98 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	685a      	ldr	r2, [r3, #4]
 8010cee:	4b41      	ldr	r3, [pc, #260]	; (8010df4 <tcp_receive+0xd04>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d11d      	bne.n	8010d32 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010cf6:	4b3e      	ldr	r3, [pc, #248]	; (8010df0 <tcp_receive+0xd00>)
 8010cf8:	891a      	ldrh	r2, [r3, #8]
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	891b      	ldrh	r3, [r3, #8]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	f240 814f 	bls.w	8010fa2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d04:	483a      	ldr	r0, [pc, #232]	; (8010df0 <tcp_receive+0xd00>)
 8010d06:	f7fd fb9f 	bl	800e448 <tcp_seg_copy>
 8010d0a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f000 8149 	beq.w	8010fa6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d003      	beq.n	8010d22 <tcp_receive+0xc32>
                    prev->next = cseg;
 8010d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d1c:	697a      	ldr	r2, [r7, #20]
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	e002      	b.n	8010d28 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d2a:	6978      	ldr	r0, [r7, #20]
 8010d2c:	f7ff f8dc 	bl	800fee8 <tcp_oos_insert_segment>
                }
                break;
 8010d30:	e139      	b.n	8010fa6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d117      	bne.n	8010d68 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010d38:	4b2e      	ldr	r3, [pc, #184]	; (8010df4 <tcp_receive+0xd04>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	da57      	bge.n	8010df8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d48:	4829      	ldr	r0, [pc, #164]	; (8010df0 <tcp_receive+0xd00>)
 8010d4a:	f7fd fb7d 	bl	800e448 <tcp_seg_copy>
 8010d4e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f000 8129 	beq.w	8010faa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	69ba      	ldr	r2, [r7, #24]
 8010d5c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d60:	69b8      	ldr	r0, [r7, #24]
 8010d62:	f7ff f8c1 	bl	800fee8 <tcp_oos_insert_segment>
                  }
                  break;
 8010d66:	e120      	b.n	8010faa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010d68:	4b22      	ldr	r3, [pc, #136]	; (8010df4 <tcp_receive+0xd04>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	1ad3      	subs	r3, r2, r3
 8010d74:	3b01      	subs	r3, #1
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	db3e      	blt.n	8010df8 <tcp_receive+0xd08>
 8010d7a:	4b1e      	ldr	r3, [pc, #120]	; (8010df4 <tcp_receive+0xd04>)
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	3301      	adds	r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	dc35      	bgt.n	8010df8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d8c:	4818      	ldr	r0, [pc, #96]	; (8010df0 <tcp_receive+0xd00>)
 8010d8e:	f7fd fb5b 	bl	800e448 <tcp_seg_copy>
 8010d92:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f000 8109 	beq.w	8010fae <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010da4:	8912      	ldrh	r2, [r2, #8]
 8010da6:	441a      	add	r2, r3
 8010da8:	4b12      	ldr	r3, [pc, #72]	; (8010df4 <tcp_receive+0xd04>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	dd12      	ble.n	8010dd8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010db2:	4b10      	ldr	r3, [pc, #64]	; (8010df4 <tcp_receive+0xd04>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	1ad3      	subs	r3, r2, r3
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dca:	685a      	ldr	r2, [r3, #4]
 8010dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dce:	891b      	ldrh	r3, [r3, #8]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	f7fb fe84 	bl	800cae0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dda:	69fa      	ldr	r2, [r7, #28]
 8010ddc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010de0:	69f8      	ldr	r0, [r7, #28]
 8010de2:	f7ff f881 	bl	800fee8 <tcp_oos_insert_segment>
                  }
                  break;
 8010de6:	e0e2      	b.n	8010fae <tcp_receive+0xebe>
 8010de8:	20008cc4 	.word	0x20008cc4
 8010dec:	20008cc1 	.word	0x20008cc1
 8010df0:	20008c94 	.word	0x20008c94
 8010df4:	20008cb4 	.word	0x20008cb4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f040 80c6 	bne.w	8010f92 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010e06:	4b80      	ldr	r3, [pc, #512]	; (8011008 <tcp_receive+0xf18>)
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f340 80bd 	ble.w	8010f92 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	899b      	ldrh	r3, [r3, #12]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fa fc85 	bl	800b730 <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	f003 0301 	and.w	r3, r3, #1
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f040 80bf 	bne.w	8010fb2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010e34:	4875      	ldr	r0, [pc, #468]	; (801100c <tcp_receive+0xf1c>)
 8010e36:	f7fd fb07 	bl	800e448 <tcp_seg_copy>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f000 80b6 	beq.w	8010fb6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e52:	8912      	ldrh	r2, [r2, #8]
 8010e54:	441a      	add	r2, r3
 8010e56:	4b6c      	ldr	r3, [pc, #432]	; (8011008 <tcp_receive+0xf18>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	dd12      	ble.n	8010e86 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010e60:	4b69      	ldr	r3, [pc, #420]	; (8011008 <tcp_receive+0xf18>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7c:	891b      	ldrh	r3, [r3, #8]
 8010e7e:	4619      	mov	r1, r3
 8010e80:	4610      	mov	r0, r2
 8010e82:	f7fb fe2d 	bl	800cae0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010e86:	4b62      	ldr	r3, [pc, #392]	; (8011010 <tcp_receive+0xf20>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	4b5e      	ldr	r3, [pc, #376]	; (8011008 <tcp_receive+0xf18>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	441a      	add	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e96:	6879      	ldr	r1, [r7, #4]
 8010e98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e9a:	440b      	add	r3, r1
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f340 8089 	ble.w	8010fb6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	899b      	ldrh	r3, [r3, #12]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fa fc3e 	bl	800b730 <lwip_htons>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d022      	beq.n	8010f06 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	899b      	ldrh	r3, [r3, #12]
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	b21b      	sxth	r3, r3
 8010ecc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ed0:	b21c      	sxth	r4, r3
 8010ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	899b      	ldrh	r3, [r3, #12]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7fa fc27 	bl	800b730 <lwip_htons>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fa fc1e 	bl	800b730 <lwip_htons>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	b21b      	sxth	r3, r3
 8010ef8:	4323      	orrs	r3, r4
 8010efa:	b21a      	sxth	r2, r3
 8010efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	b292      	uxth	r2, r2
 8010f04:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f10:	4413      	add	r3, r2
 8010f12:	b299      	uxth	r1, r3
 8010f14:	4b3c      	ldr	r3, [pc, #240]	; (8011008 <tcp_receive+0xf18>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	1a8a      	subs	r2, r1, r2
 8010f20:	b292      	uxth	r2, r2
 8010f22:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	685a      	ldr	r2, [r3, #4]
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	891b      	ldrh	r3, [r3, #8]
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f7fb fdd4 	bl	800cae0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	891c      	ldrh	r4, [r3, #8]
 8010f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	899b      	ldrh	r3, [r3, #12]
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fa fbf1 	bl	800b730 <lwip_htons>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	f003 0303 	and.w	r3, r3, #3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <tcp_receive+0xe6e>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e000      	b.n	8010f60 <tcp_receive+0xe70>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	4423      	add	r3, r4
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	4b2a      	ldr	r3, [pc, #168]	; (8011010 <tcp_receive+0xf20>)
 8010f66:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f68:	4b29      	ldr	r3, [pc, #164]	; (8011010 <tcp_receive+0xf20>)
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4b26      	ldr	r3, [pc, #152]	; (8011008 <tcp_receive+0xf18>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	441a      	add	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f78:	6879      	ldr	r1, [r7, #4]
 8010f7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f7c:	440b      	add	r3, r1
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d019      	beq.n	8010fb6 <tcp_receive+0xec6>
 8010f82:	4b24      	ldr	r3, [pc, #144]	; (8011014 <tcp_receive+0xf24>)
 8010f84:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010f88:	4923      	ldr	r1, [pc, #140]	; (8011018 <tcp_receive+0xf28>)
 8010f8a:	4824      	ldr	r0, [pc, #144]	; (801101c <tcp_receive+0xf2c>)
 8010f8c:	f005 fd8a 	bl	8016aa4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010f90:	e011      	b.n	8010fb6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f47f aea4 	bne.w	8010ce8 <tcp_receive+0xbf8>
 8010fa0:	e00a      	b.n	8010fb8 <tcp_receive+0xec8>
                break;
 8010fa2:	bf00      	nop
 8010fa4:	e008      	b.n	8010fb8 <tcp_receive+0xec8>
                break;
 8010fa6:	bf00      	nop
 8010fa8:	e006      	b.n	8010fb8 <tcp_receive+0xec8>
                  break;
 8010faa:	bf00      	nop
 8010fac:	e004      	b.n	8010fb8 <tcp_receive+0xec8>
                  break;
 8010fae:	bf00      	nop
 8010fb0:	e002      	b.n	8010fb8 <tcp_receive+0xec8>
                  break;
 8010fb2:	bf00      	nop
 8010fb4:	e000      	b.n	8010fb8 <tcp_receive+0xec8>
                break;
 8010fb6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f001 fa33 	bl	8012424 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010fbe:	e003      	b.n	8010fc8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f001 fa2f 	bl	8012424 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fc6:	e01a      	b.n	8010ffe <tcp_receive+0xf0e>
 8010fc8:	e019      	b.n	8010ffe <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010fca:	4b0f      	ldr	r3, [pc, #60]	; (8011008 <tcp_receive+0xf18>)
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	db0a      	blt.n	8010fee <tcp_receive+0xefe>
 8010fd8:	4b0b      	ldr	r3, [pc, #44]	; (8011008 <tcp_receive+0xf18>)
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe0:	6879      	ldr	r1, [r7, #4]
 8010fe2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fe4:	440b      	add	r3, r1
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	3301      	adds	r3, #1
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	dd07      	ble.n	8010ffe <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	8b5b      	ldrh	r3, [r3, #26]
 8010ff2:	f043 0302 	orr.w	r3, r3, #2
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010ffc:	e7ff      	b.n	8010ffe <tcp_receive+0xf0e>
 8010ffe:	bf00      	nop
 8011000:	3750      	adds	r7, #80	; 0x50
 8011002:	46bd      	mov	sp, r7
 8011004:	bdb0      	pop	{r4, r5, r7, pc}
 8011006:	bf00      	nop
 8011008:	20008cb4 	.word	0x20008cb4
 801100c:	20008c94 	.word	0x20008c94
 8011010:	20008cbe 	.word	0x20008cbe
 8011014:	08018e7c 	.word	0x08018e7c
 8011018:	08019224 	.word	0x08019224
 801101c:	08018ec8 	.word	0x08018ec8

08011020 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011026:	4b15      	ldr	r3, [pc, #84]	; (801107c <tcp_get_next_optbyte+0x5c>)
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	b291      	uxth	r1, r2
 801102e:	4a13      	ldr	r2, [pc, #76]	; (801107c <tcp_get_next_optbyte+0x5c>)
 8011030:	8011      	strh	r1, [r2, #0]
 8011032:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011034:	4b12      	ldr	r3, [pc, #72]	; (8011080 <tcp_get_next_optbyte+0x60>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d004      	beq.n	8011046 <tcp_get_next_optbyte+0x26>
 801103c:	4b11      	ldr	r3, [pc, #68]	; (8011084 <tcp_get_next_optbyte+0x64>)
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	88fa      	ldrh	r2, [r7, #6]
 8011042:	429a      	cmp	r2, r3
 8011044:	d208      	bcs.n	8011058 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011046:	4b10      	ldr	r3, [pc, #64]	; (8011088 <tcp_get_next_optbyte+0x68>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	3314      	adds	r3, #20
 801104c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801104e:	88fb      	ldrh	r3, [r7, #6]
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	4413      	add	r3, r2
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	e00b      	b.n	8011070 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011058:	88fb      	ldrh	r3, [r7, #6]
 801105a:	b2da      	uxtb	r2, r3
 801105c:	4b09      	ldr	r3, [pc, #36]	; (8011084 <tcp_get_next_optbyte+0x64>)
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	b2db      	uxtb	r3, r3
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011066:	4b06      	ldr	r3, [pc, #24]	; (8011080 <tcp_get_next_optbyte+0x60>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	797b      	ldrb	r3, [r7, #5]
 801106c:	4413      	add	r3, r2
 801106e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011070:	4618      	mov	r0, r3
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr
 801107c:	20008cb0 	.word	0x20008cb0
 8011080:	20008cac 	.word	0x20008cac
 8011084:	20008caa 	.word	0x20008caa
 8011088:	20008ca4 	.word	0x20008ca4

0801108c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d106      	bne.n	80110a8 <tcp_parseopt+0x1c>
 801109a:	4b32      	ldr	r3, [pc, #200]	; (8011164 <tcp_parseopt+0xd8>)
 801109c:	f240 727d 	movw	r2, #1917	; 0x77d
 80110a0:	4931      	ldr	r1, [pc, #196]	; (8011168 <tcp_parseopt+0xdc>)
 80110a2:	4832      	ldr	r0, [pc, #200]	; (801116c <tcp_parseopt+0xe0>)
 80110a4:	f005 fcfe 	bl	8016aa4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80110a8:	4b31      	ldr	r3, [pc, #196]	; (8011170 <tcp_parseopt+0xe4>)
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d055      	beq.n	801115c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110b0:	4b30      	ldr	r3, [pc, #192]	; (8011174 <tcp_parseopt+0xe8>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	801a      	strh	r2, [r3, #0]
 80110b6:	e045      	b.n	8011144 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80110b8:	f7ff ffb2 	bl	8011020 <tcp_get_next_optbyte>
 80110bc:	4603      	mov	r3, r0
 80110be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80110c0:	7bfb      	ldrb	r3, [r7, #15]
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d006      	beq.n	80110d4 <tcp_parseopt+0x48>
 80110c6:	2b02      	cmp	r3, #2
 80110c8:	dc2b      	bgt.n	8011122 <tcp_parseopt+0x96>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d041      	beq.n	8011152 <tcp_parseopt+0xc6>
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d127      	bne.n	8011122 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80110d2:	e037      	b.n	8011144 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80110d4:	f7ff ffa4 	bl	8011020 <tcp_get_next_optbyte>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b04      	cmp	r3, #4
 80110dc:	d13b      	bne.n	8011156 <tcp_parseopt+0xca>
 80110de:	4b25      	ldr	r3, [pc, #148]	; (8011174 <tcp_parseopt+0xe8>)
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	3301      	adds	r3, #1
 80110e4:	4a22      	ldr	r2, [pc, #136]	; (8011170 <tcp_parseopt+0xe4>)
 80110e6:	8812      	ldrh	r2, [r2, #0]
 80110e8:	4293      	cmp	r3, r2
 80110ea:	da34      	bge.n	8011156 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80110ec:	f7ff ff98 	bl	8011020 <tcp_get_next_optbyte>
 80110f0:	4603      	mov	r3, r0
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	021b      	lsls	r3, r3, #8
 80110f6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80110f8:	f7ff ff92 	bl	8011020 <tcp_get_next_optbyte>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b29a      	uxth	r2, r3
 8011100:	89bb      	ldrh	r3, [r7, #12]
 8011102:	4313      	orrs	r3, r2
 8011104:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011106:	89bb      	ldrh	r3, [r7, #12]
 8011108:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801110c:	d804      	bhi.n	8011118 <tcp_parseopt+0x8c>
 801110e:	89bb      	ldrh	r3, [r7, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d001      	beq.n	8011118 <tcp_parseopt+0x8c>
 8011114:	89ba      	ldrh	r2, [r7, #12]
 8011116:	e001      	b.n	801111c <tcp_parseopt+0x90>
 8011118:	f44f 7206 	mov.w	r2, #536	; 0x218
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011120:	e010      	b.n	8011144 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011122:	f7ff ff7d 	bl	8011020 <tcp_get_next_optbyte>
 8011126:	4603      	mov	r3, r0
 8011128:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801112a:	7afb      	ldrb	r3, [r7, #11]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d914      	bls.n	801115a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011130:	7afb      	ldrb	r3, [r7, #11]
 8011132:	b29a      	uxth	r2, r3
 8011134:	4b0f      	ldr	r3, [pc, #60]	; (8011174 <tcp_parseopt+0xe8>)
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	4413      	add	r3, r2
 801113a:	b29b      	uxth	r3, r3
 801113c:	3b02      	subs	r3, #2
 801113e:	b29a      	uxth	r2, r3
 8011140:	4b0c      	ldr	r3, [pc, #48]	; (8011174 <tcp_parseopt+0xe8>)
 8011142:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011144:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <tcp_parseopt+0xe8>)
 8011146:	881a      	ldrh	r2, [r3, #0]
 8011148:	4b09      	ldr	r3, [pc, #36]	; (8011170 <tcp_parseopt+0xe4>)
 801114a:	881b      	ldrh	r3, [r3, #0]
 801114c:	429a      	cmp	r2, r3
 801114e:	d3b3      	bcc.n	80110b8 <tcp_parseopt+0x2c>
 8011150:	e004      	b.n	801115c <tcp_parseopt+0xd0>
          return;
 8011152:	bf00      	nop
 8011154:	e002      	b.n	801115c <tcp_parseopt+0xd0>
            return;
 8011156:	bf00      	nop
 8011158:	e000      	b.n	801115c <tcp_parseopt+0xd0>
            return;
 801115a:	bf00      	nop
      }
    }
  }
}
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	08018e7c 	.word	0x08018e7c
 8011168:	080192e0 	.word	0x080192e0
 801116c:	08018ec8 	.word	0x08018ec8
 8011170:	20008ca8 	.word	0x20008ca8
 8011174:	20008cb0 	.word	0x20008cb0

08011178 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011178:	b480      	push	{r7}
 801117a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801117c:	4b05      	ldr	r3, [pc, #20]	; (8011194 <tcp_trigger_input_pcb_close+0x1c>)
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	f043 0310 	orr.w	r3, r3, #16
 8011184:	b2da      	uxtb	r2, r3
 8011186:	4b03      	ldr	r3, [pc, #12]	; (8011194 <tcp_trigger_input_pcb_close+0x1c>)
 8011188:	701a      	strb	r2, [r3, #0]
}
 801118a:	bf00      	nop
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	20008cc1 	.word	0x20008cc1

08011198 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00a      	beq.n	80111c0 <tcp_route+0x28>
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	7a1b      	ldrb	r3, [r3, #8]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d006      	beq.n	80111c0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	7a1b      	ldrb	r3, [r3, #8]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fb fab8 	bl	800c72c <netif_get_by_index>
 80111bc:	4603      	mov	r3, r0
 80111be:	e003      	b.n	80111c8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f003 fa37 	bl	8014634 <ip4_route>
 80111c6:	4603      	mov	r3, r0
  }
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3710      	adds	r7, #16
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b087      	sub	sp, #28
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	603b      	str	r3, [r7, #0]
 80111dc:	4613      	mov	r3, r2
 80111de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d105      	bne.n	80111f2 <tcp_create_segment+0x22>
 80111e6:	4b44      	ldr	r3, [pc, #272]	; (80112f8 <tcp_create_segment+0x128>)
 80111e8:	22a3      	movs	r2, #163	; 0xa3
 80111ea:	4944      	ldr	r1, [pc, #272]	; (80112fc <tcp_create_segment+0x12c>)
 80111ec:	4844      	ldr	r0, [pc, #272]	; (8011300 <tcp_create_segment+0x130>)
 80111ee:	f005 fc59 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d105      	bne.n	8011204 <tcp_create_segment+0x34>
 80111f8:	4b3f      	ldr	r3, [pc, #252]	; (80112f8 <tcp_create_segment+0x128>)
 80111fa:	22a4      	movs	r2, #164	; 0xa4
 80111fc:	4941      	ldr	r1, [pc, #260]	; (8011304 <tcp_create_segment+0x134>)
 80111fe:	4840      	ldr	r0, [pc, #256]	; (8011300 <tcp_create_segment+0x130>)
 8011200:	f005 fc50 	bl	8016aa4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011204:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	b2db      	uxtb	r3, r3
 801120c:	f003 0304 	and.w	r3, r3, #4
 8011210:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011212:	2003      	movs	r0, #3
 8011214:	f7fa ff04 	bl	800c020 <memp_malloc>
 8011218:	6138      	str	r0, [r7, #16]
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d104      	bne.n	801122a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011220:	68b8      	ldr	r0, [r7, #8]
 8011222:	f7fb fde3 	bl	800cdec <pbuf_free>
    return NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	e061      	b.n	80112ee <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011230:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2200      	movs	r2, #0
 8011236:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	68ba      	ldr	r2, [r7, #8]
 801123c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	891a      	ldrh	r2, [r3, #8]
 8011242:	7dfb      	ldrb	r3, [r7, #23]
 8011244:	b29b      	uxth	r3, r3
 8011246:	429a      	cmp	r2, r3
 8011248:	d205      	bcs.n	8011256 <tcp_create_segment+0x86>
 801124a:	4b2b      	ldr	r3, [pc, #172]	; (80112f8 <tcp_create_segment+0x128>)
 801124c:	22b0      	movs	r2, #176	; 0xb0
 801124e:	492e      	ldr	r1, [pc, #184]	; (8011308 <tcp_create_segment+0x138>)
 8011250:	482b      	ldr	r0, [pc, #172]	; (8011300 <tcp_create_segment+0x130>)
 8011252:	f005 fc27 	bl	8016aa4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	891a      	ldrh	r2, [r3, #8]
 801125a:	7dfb      	ldrb	r3, [r7, #23]
 801125c:	b29b      	uxth	r3, r3
 801125e:	1ad3      	subs	r3, r2, r3
 8011260:	b29a      	uxth	r2, r3
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011266:	2114      	movs	r1, #20
 8011268:	68b8      	ldr	r0, [r7, #8]
 801126a:	f7fb fd29 	bl	800ccc0 <pbuf_add_header>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d004      	beq.n	801127e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011274:	6938      	ldr	r0, [r7, #16]
 8011276:	f7fd f8ce 	bl	800e416 <tcp_seg_free>
    return NULL;
 801127a:	2300      	movs	r3, #0
 801127c:	e037      	b.n	80112ee <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	8ada      	ldrh	r2, [r3, #22]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	68dc      	ldr	r4, [r3, #12]
 8011290:	4610      	mov	r0, r2
 8011292:	f7fa fa4d 	bl	800b730 <lwip_htons>
 8011296:	4603      	mov	r3, r0
 8011298:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	8b1a      	ldrh	r2, [r3, #24]
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	68dc      	ldr	r4, [r3, #12]
 80112a2:	4610      	mov	r0, r2
 80112a4:	f7fa fa44 	bl	800b730 <lwip_htons>
 80112a8:	4603      	mov	r3, r0
 80112aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	68dc      	ldr	r4, [r3, #12]
 80112b0:	6838      	ldr	r0, [r7, #0]
 80112b2:	f7fa fa52 	bl	800b75a <lwip_htonl>
 80112b6:	4603      	mov	r3, r0
 80112b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80112ba:	7dfb      	ldrb	r3, [r7, #23]
 80112bc:	089b      	lsrs	r3, r3, #2
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	3305      	adds	r3, #5
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	031b      	lsls	r3, r3, #12
 80112c8:	b29a      	uxth	r2, r3
 80112ca:	79fb      	ldrb	r3, [r7, #7]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	4313      	orrs	r3, r2
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	68dc      	ldr	r4, [r3, #12]
 80112d6:	4610      	mov	r0, r2
 80112d8:	f7fa fa2a 	bl	800b730 <lwip_htons>
 80112dc:	4603      	mov	r3, r0
 80112de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	749a      	strb	r2, [r3, #18]
 80112e8:	2200      	movs	r2, #0
 80112ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80112ec:	693b      	ldr	r3, [r7, #16]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	371c      	adds	r7, #28
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd90      	pop	{r4, r7, pc}
 80112f6:	bf00      	nop
 80112f8:	080192fc 	.word	0x080192fc
 80112fc:	08019330 	.word	0x08019330
 8011300:	08019350 	.word	0x08019350
 8011304:	08019378 	.word	0x08019378
 8011308:	0801939c 	.word	0x0801939c

0801130c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801130c:	b590      	push	{r4, r7, lr}
 801130e:	b08b      	sub	sp, #44	; 0x2c
 8011310:	af02      	add	r7, sp, #8
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	460b      	mov	r3, r1
 8011316:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011318:	2300      	movs	r3, #0
 801131a:	61fb      	str	r3, [r7, #28]
 801131c:	2300      	movs	r3, #0
 801131e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d106      	bne.n	8011338 <tcp_split_unsent_seg+0x2c>
 801132a:	4b95      	ldr	r3, [pc, #596]	; (8011580 <tcp_split_unsent_seg+0x274>)
 801132c:	f240 324b 	movw	r2, #843	; 0x34b
 8011330:	4994      	ldr	r1, [pc, #592]	; (8011584 <tcp_split_unsent_seg+0x278>)
 8011332:	4895      	ldr	r0, [pc, #596]	; (8011588 <tcp_split_unsent_seg+0x27c>)
 8011334:	f005 fbb6 	bl	8016aa4 <iprintf>

  useg = pcb->unsent;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801133c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d102      	bne.n	801134a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011344:	f04f 33ff 	mov.w	r3, #4294967295
 8011348:	e116      	b.n	8011578 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801134a:	887b      	ldrh	r3, [r7, #2]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d109      	bne.n	8011364 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011350:	4b8b      	ldr	r3, [pc, #556]	; (8011580 <tcp_split_unsent_seg+0x274>)
 8011352:	f240 3253 	movw	r2, #851	; 0x353
 8011356:	498d      	ldr	r1, [pc, #564]	; (801158c <tcp_split_unsent_seg+0x280>)
 8011358:	488b      	ldr	r0, [pc, #556]	; (8011588 <tcp_split_unsent_seg+0x27c>)
 801135a:	f005 fba3 	bl	8016aa4 <iprintf>
    return ERR_VAL;
 801135e:	f06f 0305 	mvn.w	r3, #5
 8011362:	e109      	b.n	8011578 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	891b      	ldrh	r3, [r3, #8]
 8011368:	887a      	ldrh	r2, [r7, #2]
 801136a:	429a      	cmp	r2, r3
 801136c:	d301      	bcc.n	8011372 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801136e:	2300      	movs	r3, #0
 8011370:	e102      	b.n	8011578 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011376:	887a      	ldrh	r2, [r7, #2]
 8011378:	429a      	cmp	r2, r3
 801137a:	d906      	bls.n	801138a <tcp_split_unsent_seg+0x7e>
 801137c:	4b80      	ldr	r3, [pc, #512]	; (8011580 <tcp_split_unsent_seg+0x274>)
 801137e:	f240 325b 	movw	r2, #859	; 0x35b
 8011382:	4983      	ldr	r1, [pc, #524]	; (8011590 <tcp_split_unsent_seg+0x284>)
 8011384:	4880      	ldr	r0, [pc, #512]	; (8011588 <tcp_split_unsent_seg+0x27c>)
 8011386:	f005 fb8d 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	891b      	ldrh	r3, [r3, #8]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d106      	bne.n	80113a0 <tcp_split_unsent_seg+0x94>
 8011392:	4b7b      	ldr	r3, [pc, #492]	; (8011580 <tcp_split_unsent_seg+0x274>)
 8011394:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011398:	497e      	ldr	r1, [pc, #504]	; (8011594 <tcp_split_unsent_seg+0x288>)
 801139a:	487b      	ldr	r0, [pc, #492]	; (8011588 <tcp_split_unsent_seg+0x27c>)
 801139c:	f005 fb82 	bl	8016aa4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	7a9b      	ldrb	r3, [r3, #10]
 80113a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80113a6:	7bfb      	ldrb	r3, [r7, #15]
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	f003 0304 	and.w	r3, r3, #4
 80113b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	891a      	ldrh	r2, [r3, #8]
 80113b6:	887b      	ldrh	r3, [r7, #2]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80113bc:	7bbb      	ldrb	r3, [r7, #14]
 80113be:	b29a      	uxth	r2, r3
 80113c0:	89bb      	ldrh	r3, [r7, #12]
 80113c2:	4413      	add	r3, r2
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113ca:	4619      	mov	r1, r3
 80113cc:	2036      	movs	r0, #54	; 0x36
 80113ce:	f7fb fa29 	bl	800c824 <pbuf_alloc>
 80113d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	f000 80b7 	beq.w	801154a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	891a      	ldrh	r2, [r3, #8]
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	891b      	ldrh	r3, [r3, #8]
 80113e6:	1ad3      	subs	r3, r2, r3
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	887b      	ldrh	r3, [r7, #2]
 80113ec:	4413      	add	r3, r2
 80113ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	6858      	ldr	r0, [r3, #4]
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	685a      	ldr	r2, [r3, #4]
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
 80113fa:	18d1      	adds	r1, r2, r3
 80113fc:	897b      	ldrh	r3, [r7, #10]
 80113fe:	89ba      	ldrh	r2, [r7, #12]
 8011400:	f7fb feee 	bl	800d1e0 <pbuf_copy_partial>
 8011404:	4603      	mov	r3, r0
 8011406:	461a      	mov	r2, r3
 8011408:	89bb      	ldrh	r3, [r7, #12]
 801140a:	4293      	cmp	r3, r2
 801140c:	f040 809f 	bne.w	801154e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	899b      	ldrh	r3, [r3, #12]
 8011416:	b29b      	uxth	r3, r3
 8011418:	4618      	mov	r0, r3
 801141a:	f7fa f989 	bl	800b730 <lwip_htons>
 801141e:	4603      	mov	r3, r0
 8011420:	b2db      	uxtb	r3, r3
 8011422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011426:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011428:	2300      	movs	r3, #0
 801142a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801142c:	7efb      	ldrb	r3, [r7, #27]
 801142e:	f003 0308 	and.w	r3, r3, #8
 8011432:	2b00      	cmp	r3, #0
 8011434:	d007      	beq.n	8011446 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011436:	7efb      	ldrb	r3, [r7, #27]
 8011438:	f023 0308 	bic.w	r3, r3, #8
 801143c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801143e:	7ebb      	ldrb	r3, [r7, #26]
 8011440:	f043 0308 	orr.w	r3, r3, #8
 8011444:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011446:	7efb      	ldrb	r3, [r7, #27]
 8011448:	f003 0301 	and.w	r3, r3, #1
 801144c:	2b00      	cmp	r3, #0
 801144e:	d007      	beq.n	8011460 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011450:	7efb      	ldrb	r3, [r7, #27]
 8011452:	f023 0301 	bic.w	r3, r3, #1
 8011456:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011458:	7ebb      	ldrb	r3, [r7, #26]
 801145a:	f043 0301 	orr.w	r3, r3, #1
 801145e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	4618      	mov	r0, r3
 8011468:	f7fa f977 	bl	800b75a <lwip_htonl>
 801146c:	4602      	mov	r2, r0
 801146e:	887b      	ldrh	r3, [r7, #2]
 8011470:	18d1      	adds	r1, r2, r3
 8011472:	7eba      	ldrb	r2, [r7, #26]
 8011474:	7bfb      	ldrb	r3, [r7, #15]
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	460b      	mov	r3, r1
 801147a:	6939      	ldr	r1, [r7, #16]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7ff fea7 	bl	80111d0 <tcp_create_segment>
 8011482:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d063      	beq.n	8011552 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	4618      	mov	r0, r3
 8011490:	f7fb fd34 	bl	800cefc <pbuf_clen>
 8011494:	4603      	mov	r3, r0
 8011496:	461a      	mov	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801149e:	1a9b      	subs	r3, r3, r2
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	6858      	ldr	r0, [r3, #4]
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	891a      	ldrh	r2, [r3, #8]
 80114b2:	89bb      	ldrh	r3, [r7, #12]
 80114b4:	1ad3      	subs	r3, r2, r3
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	4619      	mov	r1, r3
 80114ba:	f7fb fb11 	bl	800cae0 <pbuf_realloc>
  useg->len -= remainder;
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	891a      	ldrh	r2, [r3, #8]
 80114c2:	89bb      	ldrh	r3, [r7, #12]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	899b      	ldrh	r3, [r3, #12]
 80114d2:	b29c      	uxth	r4, r3
 80114d4:	7efb      	ldrb	r3, [r7, #27]
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4618      	mov	r0, r3
 80114da:	f7fa f929 	bl	800b730 <lwip_htons>
 80114de:	4603      	mov	r3, r0
 80114e0:	461a      	mov	r2, r3
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	4322      	orrs	r2, r4
 80114e8:	b292      	uxth	r2, r2
 80114ea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fb fd03 	bl	800cefc <pbuf_clen>
 80114f6:	4603      	mov	r3, r0
 80114f8:	461a      	mov	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011500:	4413      	add	r3, r2
 8011502:	b29a      	uxth	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	4618      	mov	r0, r3
 8011510:	f7fb fcf4 	bl	800cefc <pbuf_clen>
 8011514:	4603      	mov	r3, r0
 8011516:	461a      	mov	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801151e:	4413      	add	r3, r2
 8011520:	b29a      	uxth	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	69fa      	ldr	r2, [r7, #28]
 8011534:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d103      	bne.n	8011546 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2200      	movs	r2, #0
 8011542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011546:	2300      	movs	r3, #0
 8011548:	e016      	b.n	8011578 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801154a:	bf00      	nop
 801154c:	e002      	b.n	8011554 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801154e:	bf00      	nop
 8011550:	e000      	b.n	8011554 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011552:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d006      	beq.n	8011568 <tcp_split_unsent_seg+0x25c>
 801155a:	4b09      	ldr	r3, [pc, #36]	; (8011580 <tcp_split_unsent_seg+0x274>)
 801155c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011560:	490d      	ldr	r1, [pc, #52]	; (8011598 <tcp_split_unsent_seg+0x28c>)
 8011562:	4809      	ldr	r0, [pc, #36]	; (8011588 <tcp_split_unsent_seg+0x27c>)
 8011564:	f005 fa9e 	bl	8016aa4 <iprintf>
  if (p != NULL) {
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d002      	beq.n	8011574 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801156e:	6938      	ldr	r0, [r7, #16]
 8011570:	f7fb fc3c 	bl	800cdec <pbuf_free>
  }

  return ERR_MEM;
 8011574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011578:	4618      	mov	r0, r3
 801157a:	3724      	adds	r7, #36	; 0x24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd90      	pop	{r4, r7, pc}
 8011580:	080192fc 	.word	0x080192fc
 8011584:	08019690 	.word	0x08019690
 8011588:	08019350 	.word	0x08019350
 801158c:	080196b4 	.word	0x080196b4
 8011590:	080196d8 	.word	0x080196d8
 8011594:	080196e8 	.word	0x080196e8
 8011598:	080196f8 	.word	0x080196f8

0801159c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801159c:	b590      	push	{r4, r7, lr}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d106      	bne.n	80115b8 <tcp_send_fin+0x1c>
 80115aa:	4b21      	ldr	r3, [pc, #132]	; (8011630 <tcp_send_fin+0x94>)
 80115ac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80115b0:	4920      	ldr	r1, [pc, #128]	; (8011634 <tcp_send_fin+0x98>)
 80115b2:	4821      	ldr	r0, [pc, #132]	; (8011638 <tcp_send_fin+0x9c>)
 80115b4:	f005 fa76 	bl	8016aa4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d02e      	beq.n	801161e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c4:	60fb      	str	r3, [r7, #12]
 80115c6:	e002      	b.n	80115ce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1f8      	bne.n	80115c8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	899b      	ldrh	r3, [r3, #12]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fa f8a6 	bl	800b730 <lwip_htons>
 80115e4:	4603      	mov	r3, r0
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	f003 0307 	and.w	r3, r3, #7
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d116      	bne.n	801161e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	899b      	ldrh	r3, [r3, #12]
 80115f6:	b29c      	uxth	r4, r3
 80115f8:	2001      	movs	r0, #1
 80115fa:	f7fa f899 	bl	800b730 <lwip_htons>
 80115fe:	4603      	mov	r3, r0
 8011600:	461a      	mov	r2, r3
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	4322      	orrs	r2, r4
 8011608:	b292      	uxth	r2, r2
 801160a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	8b5b      	ldrh	r3, [r3, #26]
 8011610:	f043 0320 	orr.w	r3, r3, #32
 8011614:	b29a      	uxth	r2, r3
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	e004      	b.n	8011628 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801161e:	2101      	movs	r1, #1
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 f80b 	bl	801163c <tcp_enqueue_flags>
 8011626:	4603      	mov	r3, r0
}
 8011628:	4618      	mov	r0, r3
 801162a:	3714      	adds	r7, #20
 801162c:	46bd      	mov	sp, r7
 801162e:	bd90      	pop	{r4, r7, pc}
 8011630:	080192fc 	.word	0x080192fc
 8011634:	08019704 	.word	0x08019704
 8011638:	08019350 	.word	0x08019350

0801163c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b08a      	sub	sp, #40	; 0x28
 8011640:	af02      	add	r7, sp, #8
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	460b      	mov	r3, r1
 8011646:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011650:	78fb      	ldrb	r3, [r7, #3]
 8011652:	f003 0303 	and.w	r3, r3, #3
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_enqueue_flags+0x2c>
 801165a:	4b67      	ldr	r3, [pc, #412]	; (80117f8 <tcp_enqueue_flags+0x1bc>)
 801165c:	f240 4211 	movw	r2, #1041	; 0x411
 8011660:	4966      	ldr	r1, [pc, #408]	; (80117fc <tcp_enqueue_flags+0x1c0>)
 8011662:	4867      	ldr	r0, [pc, #412]	; (8011800 <tcp_enqueue_flags+0x1c4>)
 8011664:	f005 fa1e 	bl	8016aa4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <tcp_enqueue_flags+0x40>
 801166e:	4b62      	ldr	r3, [pc, #392]	; (80117f8 <tcp_enqueue_flags+0x1bc>)
 8011670:	f240 4213 	movw	r2, #1043	; 0x413
 8011674:	4963      	ldr	r1, [pc, #396]	; (8011804 <tcp_enqueue_flags+0x1c8>)
 8011676:	4862      	ldr	r0, [pc, #392]	; (8011800 <tcp_enqueue_flags+0x1c4>)
 8011678:	f005 fa14 	bl	8016aa4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	f003 0302 	and.w	r3, r3, #2
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011686:	2301      	movs	r3, #1
 8011688:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801168a:	7ffb      	ldrb	r3, [r7, #31]
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	b2db      	uxtb	r3, r3
 8011690:	f003 0304 	and.w	r3, r3, #4
 8011694:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011696:	7dfb      	ldrb	r3, [r7, #23]
 8011698:	b29b      	uxth	r3, r3
 801169a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801169e:	4619      	mov	r1, r3
 80116a0:	2036      	movs	r0, #54	; 0x36
 80116a2:	f7fb f8bf 	bl	800c824 <pbuf_alloc>
 80116a6:	6138      	str	r0, [r7, #16]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d109      	bne.n	80116c2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	8b5b      	ldrh	r3, [r3, #26]
 80116b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80116bc:	f04f 33ff 	mov.w	r3, #4294967295
 80116c0:	e095      	b.n	80117ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	895a      	ldrh	r2, [r3, #10]
 80116c6:	7dfb      	ldrb	r3, [r7, #23]
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d206      	bcs.n	80116dc <tcp_enqueue_flags+0xa0>
 80116ce:	4b4a      	ldr	r3, [pc, #296]	; (80117f8 <tcp_enqueue_flags+0x1bc>)
 80116d0:	f240 4239 	movw	r2, #1081	; 0x439
 80116d4:	494c      	ldr	r1, [pc, #304]	; (8011808 <tcp_enqueue_flags+0x1cc>)
 80116d6:	484a      	ldr	r0, [pc, #296]	; (8011800 <tcp_enqueue_flags+0x1c4>)
 80116d8:	f005 f9e4 	bl	8016aa4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80116e0:	78fa      	ldrb	r2, [r7, #3]
 80116e2:	7ffb      	ldrb	r3, [r7, #31]
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	460b      	mov	r3, r1
 80116e8:	6939      	ldr	r1, [r7, #16]
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7ff fd70 	bl	80111d0 <tcp_create_segment>
 80116f0:	60f8      	str	r0, [r7, #12]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d109      	bne.n	801170c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	8b5b      	ldrh	r3, [r3, #26]
 80116fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011706:	f04f 33ff 	mov.w	r3, #4294967295
 801170a:	e070      	b.n	80117ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	f003 0303 	and.w	r3, r3, #3
 8011714:	2b00      	cmp	r3, #0
 8011716:	d006      	beq.n	8011726 <tcp_enqueue_flags+0xea>
 8011718:	4b37      	ldr	r3, [pc, #220]	; (80117f8 <tcp_enqueue_flags+0x1bc>)
 801171a:	f240 4242 	movw	r2, #1090	; 0x442
 801171e:	493b      	ldr	r1, [pc, #236]	; (801180c <tcp_enqueue_flags+0x1d0>)
 8011720:	4837      	ldr	r0, [pc, #220]	; (8011800 <tcp_enqueue_flags+0x1c4>)
 8011722:	f005 f9bf 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	891b      	ldrh	r3, [r3, #8]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d006      	beq.n	801173c <tcp_enqueue_flags+0x100>
 801172e:	4b32      	ldr	r3, [pc, #200]	; (80117f8 <tcp_enqueue_flags+0x1bc>)
 8011730:	f240 4243 	movw	r2, #1091	; 0x443
 8011734:	4936      	ldr	r1, [pc, #216]	; (8011810 <tcp_enqueue_flags+0x1d4>)
 8011736:	4832      	ldr	r0, [pc, #200]	; (8011800 <tcp_enqueue_flags+0x1c4>)
 8011738:	f005 f9b4 	bl	8016aa4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011740:	2b00      	cmp	r3, #0
 8011742:	d103      	bne.n	801174c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	68fa      	ldr	r2, [r7, #12]
 8011748:	66da      	str	r2, [r3, #108]	; 0x6c
 801174a:	e00d      	b.n	8011768 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011750:	61bb      	str	r3, [r7, #24]
 8011752:	e002      	b.n	801175a <tcp_enqueue_flags+0x11e>
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	61bb      	str	r3, [r7, #24]
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1f8      	bne.n	8011754 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011762:	69bb      	ldr	r3, [r7, #24]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011770:	78fb      	ldrb	r3, [r7, #3]
 8011772:	f003 0302 	and.w	r3, r3, #2
 8011776:	2b00      	cmp	r3, #0
 8011778:	d104      	bne.n	8011784 <tcp_enqueue_flags+0x148>
 801177a:	78fb      	ldrb	r3, [r7, #3]
 801177c:	f003 0301 	and.w	r3, r3, #1
 8011780:	2b00      	cmp	r3, #0
 8011782:	d004      	beq.n	801178e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011788:	1c5a      	adds	r2, r3, #1
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801178e:	78fb      	ldrb	r3, [r7, #3]
 8011790:	f003 0301 	and.w	r3, r3, #1
 8011794:	2b00      	cmp	r3, #0
 8011796:	d006      	beq.n	80117a6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	8b5b      	ldrh	r3, [r3, #26]
 801179c:	f043 0320 	orr.w	r3, r3, #32
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fb fba6 	bl	800cefc <pbuf_clen>
 80117b0:	4603      	mov	r3, r0
 80117b2:	461a      	mov	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117ba:	4413      	add	r3, r2
 80117bc:	b29a      	uxth	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00e      	beq.n	80117ec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d10a      	bne.n	80117ec <tcp_enqueue_flags+0x1b0>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d106      	bne.n	80117ec <tcp_enqueue_flags+0x1b0>
 80117de:	4b06      	ldr	r3, [pc, #24]	; (80117f8 <tcp_enqueue_flags+0x1bc>)
 80117e0:	f240 4265 	movw	r2, #1125	; 0x465
 80117e4:	490b      	ldr	r1, [pc, #44]	; (8011814 <tcp_enqueue_flags+0x1d8>)
 80117e6:	4806      	ldr	r0, [pc, #24]	; (8011800 <tcp_enqueue_flags+0x1c4>)
 80117e8:	f005 f95c 	bl	8016aa4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3720      	adds	r7, #32
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	080192fc 	.word	0x080192fc
 80117fc:	08019720 	.word	0x08019720
 8011800:	08019350 	.word	0x08019350
 8011804:	08019778 	.word	0x08019778
 8011808:	08019798 	.word	0x08019798
 801180c:	080197d4 	.word	0x080197d4
 8011810:	080197ec 	.word	0x080197ec
 8011814:	08019818 	.word	0x08019818

08011818 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011818:	b5b0      	push	{r4, r5, r7, lr}
 801181a:	b08a      	sub	sp, #40	; 0x28
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <tcp_output+0x1c>
 8011826:	4b8a      	ldr	r3, [pc, #552]	; (8011a50 <tcp_output+0x238>)
 8011828:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801182c:	4989      	ldr	r1, [pc, #548]	; (8011a54 <tcp_output+0x23c>)
 801182e:	488a      	ldr	r0, [pc, #552]	; (8011a58 <tcp_output+0x240>)
 8011830:	f005 f938 	bl	8016aa4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	7d1b      	ldrb	r3, [r3, #20]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d106      	bne.n	801184a <tcp_output+0x32>
 801183c:	4b84      	ldr	r3, [pc, #528]	; (8011a50 <tcp_output+0x238>)
 801183e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011842:	4986      	ldr	r1, [pc, #536]	; (8011a5c <tcp_output+0x244>)
 8011844:	4884      	ldr	r0, [pc, #528]	; (8011a58 <tcp_output+0x240>)
 8011846:	f005 f92d 	bl	8016aa4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801184a:	4b85      	ldr	r3, [pc, #532]	; (8011a60 <tcp_output+0x248>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	429a      	cmp	r2, r3
 8011852:	d101      	bne.n	8011858 <tcp_output+0x40>
    return ERR_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	e1ce      	b.n	8011bf6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011864:	4293      	cmp	r3, r2
 8011866:	bf28      	it	cs
 8011868:	4613      	movcs	r3, r2
 801186a:	b29b      	uxth	r3, r3
 801186c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011872:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10b      	bne.n	8011892 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	8b5b      	ldrh	r3, [r3, #26]
 801187e:	f003 0302 	and.w	r3, r3, #2
 8011882:	2b00      	cmp	r3, #0
 8011884:	f000 81aa 	beq.w	8011bdc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fdcb 	bl	8012424 <tcp_send_empty_ack>
 801188e:	4603      	mov	r3, r0
 8011890:	e1b1      	b.n	8011bf6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011892:	6879      	ldr	r1, [r7, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	3304      	adds	r3, #4
 8011898:	461a      	mov	r2, r3
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f7ff fc7c 	bl	8011198 <tcp_route>
 80118a0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d102      	bne.n	80118ae <tcp_output+0x96>
    return ERR_RTE;
 80118a8:	f06f 0303 	mvn.w	r3, #3
 80118ac:	e1a3      	b.n	8011bf6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d003      	beq.n	80118bc <tcp_output+0xa4>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d111      	bne.n	80118e0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d002      	beq.n	80118c8 <tcp_output+0xb0>
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	3304      	adds	r3, #4
 80118c6:	e000      	b.n	80118ca <tcp_output+0xb2>
 80118c8:	2300      	movs	r3, #0
 80118ca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d102      	bne.n	80118d8 <tcp_output+0xc0>
      return ERR_RTE;
 80118d2:	f06f 0303 	mvn.w	r3, #3
 80118d6:	e18e      	b.n	8011bf6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80118e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7f9 ff37 	bl	800b75a <lwip_htonl>
 80118ec:	4602      	mov	r2, r0
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118f6:	8912      	ldrh	r2, [r2, #8]
 80118f8:	4413      	add	r3, r2
 80118fa:	69ba      	ldr	r2, [r7, #24]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d227      	bcs.n	8011950 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011906:	461a      	mov	r2, r3
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	4293      	cmp	r3, r2
 801190c:	d114      	bne.n	8011938 <tcp_output+0x120>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011912:	2b00      	cmp	r3, #0
 8011914:	d110      	bne.n	8011938 <tcp_output+0x120>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10b      	bne.n	8011938 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2201      	movs	r2, #1
 801192c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	8b5b      	ldrh	r3, [r3, #26]
 801193c:	f003 0302 	and.w	r3, r3, #2
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 814d 	beq.w	8011be0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 fd6c 	bl	8012424 <tcp_send_empty_ack>
 801194c:	4603      	mov	r3, r0
 801194e:	e152      	b.n	8011bf6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801195c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	2b00      	cmp	r3, #0
 8011962:	f000 811c 	beq.w	8011b9e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011966:	e002      	b.n	801196e <tcp_output+0x156>
 8011968:	6a3b      	ldr	r3, [r7, #32]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	623b      	str	r3, [r7, #32]
 801196e:	6a3b      	ldr	r3, [r7, #32]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d1f8      	bne.n	8011968 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011976:	e112      	b.n	8011b9e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	899b      	ldrh	r3, [r3, #12]
 801197e:	b29b      	uxth	r3, r3
 8011980:	4618      	mov	r0, r3
 8011982:	f7f9 fed5 	bl	800b730 <lwip_htons>
 8011986:	4603      	mov	r3, r0
 8011988:	b2db      	uxtb	r3, r3
 801198a:	f003 0304 	and.w	r3, r3, #4
 801198e:	2b00      	cmp	r3, #0
 8011990:	d006      	beq.n	80119a0 <tcp_output+0x188>
 8011992:	4b2f      	ldr	r3, [pc, #188]	; (8011a50 <tcp_output+0x238>)
 8011994:	f240 5236 	movw	r2, #1334	; 0x536
 8011998:	4932      	ldr	r1, [pc, #200]	; (8011a64 <tcp_output+0x24c>)
 801199a:	482f      	ldr	r0, [pc, #188]	; (8011a58 <tcp_output+0x240>)
 801199c:	f005 f882 	bl	8016aa4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d01f      	beq.n	80119e8 <tcp_output+0x1d0>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	8b5b      	ldrh	r3, [r3, #26]
 80119ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d119      	bne.n	80119e8 <tcp_output+0x1d0>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00b      	beq.n	80119d4 <tcp_output+0x1bc>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d110      	bne.n	80119e8 <tcp_output+0x1d0>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ca:	891a      	ldrh	r2, [r3, #8]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d209      	bcs.n	80119e8 <tcp_output+0x1d0>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d004      	beq.n	80119e8 <tcp_output+0x1d0>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119e4:	2b08      	cmp	r3, #8
 80119e6:	d901      	bls.n	80119ec <tcp_output+0x1d4>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e000      	b.n	80119ee <tcp_output+0x1d6>
 80119ec:	2300      	movs	r3, #0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d106      	bne.n	8011a00 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	8b5b      	ldrh	r3, [r3, #26]
 80119f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f000 80e4 	beq.w	8011bc8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	7d1b      	ldrb	r3, [r3, #20]
 8011a04:	2b02      	cmp	r3, #2
 8011a06:	d00d      	beq.n	8011a24 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	899b      	ldrh	r3, [r3, #12]
 8011a0e:	b29c      	uxth	r4, r3
 8011a10:	2010      	movs	r0, #16
 8011a12:	f7f9 fe8d 	bl	800b730 <lwip_htons>
 8011a16:	4603      	mov	r3, r0
 8011a18:	461a      	mov	r2, r3
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	4322      	orrs	r2, r4
 8011a20:	b292      	uxth	r2, r2
 8011a22:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011a24:	697a      	ldr	r2, [r7, #20]
 8011a26:	6879      	ldr	r1, [r7, #4]
 8011a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a2a:	f000 f909 	bl	8011c40 <tcp_output_segment>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d016      	beq.n	8011a68 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8b5b      	ldrh	r3, [r3, #26]
 8011a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a42:	b29a      	uxth	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	835a      	strh	r2, [r3, #26]
      return err;
 8011a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a4c:	e0d3      	b.n	8011bf6 <tcp_output+0x3de>
 8011a4e:	bf00      	nop
 8011a50:	080192fc 	.word	0x080192fc
 8011a54:	08019840 	.word	0x08019840
 8011a58:	08019350 	.word	0x08019350
 8011a5c:	08019858 	.word	0x08019858
 8011a60:	20008cc8 	.word	0x20008cc8
 8011a64:	08019880 	.word	0x08019880
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	7d1b      	ldrb	r3, [r3, #20]
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	d006      	beq.n	8011a86 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	8b5b      	ldrh	r3, [r3, #26]
 8011a7c:	f023 0303 	bic.w	r3, r3, #3
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	68db      	ldr	r3, [r3, #12]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f9 fe64 	bl	800b75a <lwip_htonl>
 8011a92:	4604      	mov	r4, r0
 8011a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a96:	891b      	ldrh	r3, [r3, #8]
 8011a98:	461d      	mov	r5, r3
 8011a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	899b      	ldrh	r3, [r3, #12]
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7f9 fe44 	bl	800b730 <lwip_htons>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	f003 0303 	and.w	r3, r3, #3
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d001      	beq.n	8011ab8 <tcp_output+0x2a0>
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	e000      	b.n	8011aba <tcp_output+0x2a2>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	442b      	add	r3, r5
 8011abc:	4423      	add	r3, r4
 8011abe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	1ad3      	subs	r3, r2, r3
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	da02      	bge.n	8011ad2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	891b      	ldrh	r3, [r3, #8]
 8011ad6:	461c      	mov	r4, r3
 8011ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ada:	68db      	ldr	r3, [r3, #12]
 8011adc:	899b      	ldrh	r3, [r3, #12]
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7f9 fe25 	bl	800b730 <lwip_htons>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	f003 0303 	and.w	r3, r3, #3
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d001      	beq.n	8011af6 <tcp_output+0x2de>
 8011af2:	2301      	movs	r3, #1
 8011af4:	e000      	b.n	8011af8 <tcp_output+0x2e0>
 8011af6:	2300      	movs	r3, #0
 8011af8:	4423      	add	r3, r4
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d049      	beq.n	8011b92 <tcp_output+0x37a>
      seg->next = NULL;
 8011afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d105      	bne.n	8011b18 <tcp_output+0x300>
        pcb->unacked = seg;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b10:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	623b      	str	r3, [r7, #32]
 8011b16:	e03f      	b.n	8011b98 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7f9 fe1b 	bl	800b75a <lwip_htonl>
 8011b24:	4604      	mov	r4, r0
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7f9 fe14 	bl	800b75a <lwip_htonl>
 8011b32:	4603      	mov	r3, r0
 8011b34:	1ae3      	subs	r3, r4, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	da24      	bge.n	8011b84 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	3370      	adds	r3, #112	; 0x70
 8011b3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b40:	e002      	b.n	8011b48 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d011      	beq.n	8011b74 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7f9 fdfe 	bl	800b75a <lwip_htonl>
 8011b5e:	4604      	mov	r4, r0
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7f9 fdf7 	bl	800b75a <lwip_htonl>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	dbe6      	blt.n	8011b42 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b80:	601a      	str	r2, [r3, #0]
 8011b82:	e009      	b.n	8011b98 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b84:	6a3b      	ldr	r3, [r7, #32]
 8011b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b88:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	623b      	str	r3, [r7, #32]
 8011b90:	e002      	b.n	8011b98 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b94:	f7fc fc3f 	bl	800e416 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d012      	beq.n	8011bca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7f9 fdd5 	bl	800b75a <lwip_htonl>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bba:	8912      	ldrh	r2, [r2, #8]
 8011bbc:	4413      	add	r3, r2
  while (seg != NULL &&
 8011bbe:	69ba      	ldr	r2, [r7, #24]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	f4bf aed9 	bcs.w	8011978 <tcp_output+0x160>
 8011bc6:	e000      	b.n	8011bca <tcp_output+0x3b2>
      break;
 8011bc8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d108      	bne.n	8011be4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011bda:	e004      	b.n	8011be6 <tcp_output+0x3ce>
    goto output_done;
 8011bdc:	bf00      	nop
 8011bde:	e002      	b.n	8011be6 <tcp_output+0x3ce>
    goto output_done;
 8011be0:	bf00      	nop
 8011be2:	e000      	b.n	8011be6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011be4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	8b5b      	ldrh	r3, [r3, #26]
 8011bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011bee:	b29a      	uxth	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3728      	adds	r7, #40	; 0x28
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8011bfe:	bf00      	nop

08011c00 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <tcp_output_segment_busy+0x1c>
 8011c0e:	4b09      	ldr	r3, [pc, #36]	; (8011c34 <tcp_output_segment_busy+0x34>)
 8011c10:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c14:	4908      	ldr	r1, [pc, #32]	; (8011c38 <tcp_output_segment_busy+0x38>)
 8011c16:	4809      	ldr	r0, [pc, #36]	; (8011c3c <tcp_output_segment_busy+0x3c>)
 8011c18:	f004 ff44 	bl	8016aa4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	7b9b      	ldrb	r3, [r3, #14]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d001      	beq.n	8011c2a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011c26:	2301      	movs	r3, #1
 8011c28:	e000      	b.n	8011c2c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011c2a:	2300      	movs	r3, #0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	080192fc 	.word	0x080192fc
 8011c38:	08019898 	.word	0x08019898
 8011c3c:	08019350 	.word	0x08019350

08011c40 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011c40:	b5b0      	push	{r4, r5, r7, lr}
 8011c42:	b08c      	sub	sp, #48	; 0x30
 8011c44:	af04      	add	r7, sp, #16
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d106      	bne.n	8011c60 <tcp_output_segment+0x20>
 8011c52:	4b63      	ldr	r3, [pc, #396]	; (8011de0 <tcp_output_segment+0x1a0>)
 8011c54:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011c58:	4962      	ldr	r1, [pc, #392]	; (8011de4 <tcp_output_segment+0x1a4>)
 8011c5a:	4863      	ldr	r0, [pc, #396]	; (8011de8 <tcp_output_segment+0x1a8>)
 8011c5c:	f004 ff22 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <tcp_output_segment+0x34>
 8011c66:	4b5e      	ldr	r3, [pc, #376]	; (8011de0 <tcp_output_segment+0x1a0>)
 8011c68:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011c6c:	495f      	ldr	r1, [pc, #380]	; (8011dec <tcp_output_segment+0x1ac>)
 8011c6e:	485e      	ldr	r0, [pc, #376]	; (8011de8 <tcp_output_segment+0x1a8>)
 8011c70:	f004 ff18 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d106      	bne.n	8011c88 <tcp_output_segment+0x48>
 8011c7a:	4b59      	ldr	r3, [pc, #356]	; (8011de0 <tcp_output_segment+0x1a0>)
 8011c7c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011c80:	495b      	ldr	r1, [pc, #364]	; (8011df0 <tcp_output_segment+0x1b0>)
 8011c82:	4859      	ldr	r0, [pc, #356]	; (8011de8 <tcp_output_segment+0x1a8>)
 8011c84:	f004 ff0e 	bl	8016aa4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f7ff ffb9 	bl	8011c00 <tcp_output_segment_busy>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d001      	beq.n	8011c98 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011c94:	2300      	movs	r3, #0
 8011c96:	e09f      	b.n	8011dd8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	68dc      	ldr	r4, [r3, #12]
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7f9 fd5a 	bl	800b75a <lwip_htonl>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	68dc      	ldr	r4, [r3, #12]
 8011cb2:	4610      	mov	r0, r2
 8011cb4:	f7f9 fd3c 	bl	800b730 <lwip_htons>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011cc4:	441a      	add	r2, r3
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	3314      	adds	r3, #20
 8011cd0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	7a9b      	ldrb	r3, [r3, #10]
 8011cd6:	f003 0301 	and.w	r3, r3, #1
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d015      	beq.n	8011d0a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	6879      	ldr	r1, [r7, #4]
 8011ce6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011cea:	f7fc fe8b 	bl	800ea04 <tcp_eff_send_mss_netif>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011cf2:	8b7b      	ldrh	r3, [r7, #26]
 8011cf4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7f9 fd2e 	bl	800b75a <lwip_htonl>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	3304      	adds	r3, #4
 8011d08:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	da02      	bge.n	8011d1a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	2200      	movs	r2, #0
 8011d18:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d10c      	bne.n	8011d3c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011d22:	4b34      	ldr	r3, [pc, #208]	; (8011df4 <tcp_output_segment+0x1b4>)
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7f9 fd12 	bl	800b75a <lwip_htonl>
 8011d36:	4602      	mov	r2, r0
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	68da      	ldr	r2, [r3, #12]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	8959      	ldrh	r1, [r3, #10]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	8b3a      	ldrh	r2, [r7, #24]
 8011d56:	1a8a      	subs	r2, r1, r2
 8011d58:	b292      	uxth	r2, r2
 8011d5a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	8919      	ldrh	r1, [r3, #8]
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	8b3a      	ldrh	r2, [r7, #24]
 8011d68:	1a8a      	subs	r2, r1, r2
 8011d6a:	b292      	uxth	r2, r2
 8011d6c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	68fa      	ldr	r2, [r7, #12]
 8011d74:	68d2      	ldr	r2, [r2, #12]
 8011d76:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	741a      	strb	r2, [r3, #16]
 8011d80:	2200      	movs	r2, #0
 8011d82:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	f103 0214 	add.w	r2, r3, #20
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	7a9b      	ldrb	r3, [r3, #10]
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	f003 0304 	and.w	r3, r3, #4
 8011d96:	4413      	add	r3, r2
 8011d98:	69fa      	ldr	r2, [r7, #28]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d006      	beq.n	8011dac <tcp_output_segment+0x16c>
 8011d9e:	4b10      	ldr	r3, [pc, #64]	; (8011de0 <tcp_output_segment+0x1a0>)
 8011da0:	f240 621c 	movw	r2, #1564	; 0x61c
 8011da4:	4914      	ldr	r1, [pc, #80]	; (8011df8 <tcp_output_segment+0x1b8>)
 8011da6:	4810      	ldr	r0, [pc, #64]	; (8011de8 <tcp_output_segment+0x1a8>)
 8011da8:	f004 fe7c 	bl	8016aa4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6858      	ldr	r0, [r3, #4]
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	1d1c      	adds	r4, r3, #4
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	7add      	ldrb	r5, [r3, #11]
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	7a9b      	ldrb	r3, [r3, #10]
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	9202      	str	r2, [sp, #8]
 8011dc2:	2206      	movs	r2, #6
 8011dc4:	9201      	str	r2, [sp, #4]
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	462b      	mov	r3, r5
 8011dca:	4622      	mov	r2, r4
 8011dcc:	f002 fdf0 	bl	80149b0 <ip4_output_if>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3720      	adds	r7, #32
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bdb0      	pop	{r4, r5, r7, pc}
 8011de0:	080192fc 	.word	0x080192fc
 8011de4:	080198c0 	.word	0x080198c0
 8011de8:	08019350 	.word	0x08019350
 8011dec:	080198e0 	.word	0x080198e0
 8011df0:	08019900 	.word	0x08019900
 8011df4:	20008c7c 	.word	0x20008c7c
 8011df8:	08019924 	.word	0x08019924

08011dfc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011dfc:	b5b0      	push	{r4, r5, r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d106      	bne.n	8011e18 <tcp_rexmit_rto_prepare+0x1c>
 8011e0a:	4b31      	ldr	r3, [pc, #196]	; (8011ed0 <tcp_rexmit_rto_prepare+0xd4>)
 8011e0c:	f240 6263 	movw	r2, #1635	; 0x663
 8011e10:	4930      	ldr	r1, [pc, #192]	; (8011ed4 <tcp_rexmit_rto_prepare+0xd8>)
 8011e12:	4831      	ldr	r0, [pc, #196]	; (8011ed8 <tcp_rexmit_rto_prepare+0xdc>)
 8011e14:	f004 fe46 	bl	8016aa4 <iprintf>

  if (pcb->unacked == NULL) {
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d102      	bne.n	8011e26 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011e20:	f06f 0305 	mvn.w	r3, #5
 8011e24:	e050      	b.n	8011ec8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	e00b      	b.n	8011e46 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f7ff fee6 	bl	8011c00 <tcp_output_segment_busy>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d002      	beq.n	8011e40 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011e3a:	f06f 0305 	mvn.w	r3, #5
 8011e3e:	e043      	b.n	8011ec8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d1ef      	bne.n	8011e2e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7ff fed6 	bl	8011c00 <tcp_output_segment_busy>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011e5a:	f06f 0305 	mvn.w	r3, #5
 8011e5e:	e033      	b.n	8011ec8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	8b5b      	ldrh	r3, [r3, #26]
 8011e7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7f9 fc65 	bl	800b75a <lwip_htonl>
 8011e90:	4604      	mov	r4, r0
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	891b      	ldrh	r3, [r3, #8]
 8011e96:	461d      	mov	r5, r3
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	899b      	ldrh	r3, [r3, #12]
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7f9 fc45 	bl	800b730 <lwip_htons>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	f003 0303 	and.w	r3, r3, #3
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d001      	beq.n	8011eb6 <tcp_rexmit_rto_prepare+0xba>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e000      	b.n	8011eb8 <tcp_rexmit_rto_prepare+0xbc>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	442b      	add	r3, r5
 8011eba:	18e2      	adds	r2, r4, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3710      	adds	r7, #16
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bdb0      	pop	{r4, r5, r7, pc}
 8011ed0:	080192fc 	.word	0x080192fc
 8011ed4:	08019938 	.word	0x08019938
 8011ed8:	08019350 	.word	0x08019350

08011edc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d106      	bne.n	8011ef8 <tcp_rexmit_rto_commit+0x1c>
 8011eea:	4b0d      	ldr	r3, [pc, #52]	; (8011f20 <tcp_rexmit_rto_commit+0x44>)
 8011eec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011ef0:	490c      	ldr	r1, [pc, #48]	; (8011f24 <tcp_rexmit_rto_commit+0x48>)
 8011ef2:	480d      	ldr	r0, [pc, #52]	; (8011f28 <tcp_rexmit_rto_commit+0x4c>)
 8011ef4:	f004 fdd6 	bl	8016aa4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011efe:	2bff      	cmp	r3, #255	; 0xff
 8011f00:	d007      	beq.n	8011f12 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f08:	3301      	adds	r3, #1
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7ff fc80 	bl	8011818 <tcp_output>
}
 8011f18:	bf00      	nop
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	080192fc 	.word	0x080192fc
 8011f24:	0801995c 	.word	0x0801995c
 8011f28:	08019350 	.word	0x08019350

08011f2c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d106      	bne.n	8011f48 <tcp_rexmit_rto+0x1c>
 8011f3a:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <tcp_rexmit_rto+0x38>)
 8011f3c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011f40:	4909      	ldr	r1, [pc, #36]	; (8011f68 <tcp_rexmit_rto+0x3c>)
 8011f42:	480a      	ldr	r0, [pc, #40]	; (8011f6c <tcp_rexmit_rto+0x40>)
 8011f44:	f004 fdae 	bl	8016aa4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7ff ff57 	bl	8011dfc <tcp_rexmit_rto_prepare>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d102      	bne.n	8011f5a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7ff ffc1 	bl	8011edc <tcp_rexmit_rto_commit>
  }
}
 8011f5a:	bf00      	nop
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	080192fc 	.word	0x080192fc
 8011f68:	08019980 	.word	0x08019980
 8011f6c:	08019350 	.word	0x08019350

08011f70 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011f70:	b590      	push	{r4, r7, lr}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d106      	bne.n	8011f8c <tcp_rexmit+0x1c>
 8011f7e:	4b2f      	ldr	r3, [pc, #188]	; (801203c <tcp_rexmit+0xcc>)
 8011f80:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011f84:	492e      	ldr	r1, [pc, #184]	; (8012040 <tcp_rexmit+0xd0>)
 8011f86:	482f      	ldr	r0, [pc, #188]	; (8012044 <tcp_rexmit+0xd4>)
 8011f88:	f004 fd8c 	bl	8016aa4 <iprintf>

  if (pcb->unacked == NULL) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d102      	bne.n	8011f9a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011f94:	f06f 0305 	mvn.w	r3, #5
 8011f98:	e04c      	b.n	8012034 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f9e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011fa0:	68b8      	ldr	r0, [r7, #8]
 8011fa2:	f7ff fe2d 	bl	8011c00 <tcp_output_segment_busy>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011fac:	f06f 0305 	mvn.w	r3, #5
 8011fb0:	e040      	b.n	8012034 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	336c      	adds	r3, #108	; 0x6c
 8011fbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011fc0:	e002      	b.n	8011fc8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d011      	beq.n	8011ff4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7f9 fbbe 	bl	800b75a <lwip_htonl>
 8011fde:	4604      	mov	r4, r0
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7f9 fbb7 	bl	800b75a <lwip_htonl>
 8011fec:	4603      	mov	r3, r0
 8011fee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	dbe6      	blt.n	8011fc2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	68ba      	ldr	r2, [r7, #8]
 8012000:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d103      	bne.n	8012012 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2200      	movs	r2, #0
 801200e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012018:	2bff      	cmp	r3, #255	; 0xff
 801201a:	d007      	beq.n	801202c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012022:	3301      	adds	r3, #1
 8012024:	b2da      	uxtb	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012032:	2300      	movs	r3, #0
}
 8012034:	4618      	mov	r0, r3
 8012036:	3714      	adds	r7, #20
 8012038:	46bd      	mov	sp, r7
 801203a:	bd90      	pop	{r4, r7, pc}
 801203c:	080192fc 	.word	0x080192fc
 8012040:	0801999c 	.word	0x0801999c
 8012044:	08019350 	.word	0x08019350

08012048 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d106      	bne.n	8012064 <tcp_rexmit_fast+0x1c>
 8012056:	4b2a      	ldr	r3, [pc, #168]	; (8012100 <tcp_rexmit_fast+0xb8>)
 8012058:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801205c:	4929      	ldr	r1, [pc, #164]	; (8012104 <tcp_rexmit_fast+0xbc>)
 801205e:	482a      	ldr	r0, [pc, #168]	; (8012108 <tcp_rexmit_fast+0xc0>)
 8012060:	f004 fd20 	bl	8016aa4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012068:	2b00      	cmp	r3, #0
 801206a:	d045      	beq.n	80120f8 <tcp_rexmit_fast+0xb0>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8b5b      	ldrh	r3, [r3, #26]
 8012070:	f003 0304 	and.w	r3, r3, #4
 8012074:	2b00      	cmp	r3, #0
 8012076:	d13f      	bne.n	80120f8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7ff ff79 	bl	8011f70 <tcp_rexmit>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d139      	bne.n	80120f8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012090:	4293      	cmp	r3, r2
 8012092:	bf28      	it	cs
 8012094:	4613      	movcs	r3, r2
 8012096:	b29b      	uxth	r3, r3
 8012098:	2b00      	cmp	r3, #0
 801209a:	da00      	bge.n	801209e <tcp_rexmit_fast+0x56>
 801209c:	3301      	adds	r3, #1
 801209e:	105b      	asrs	r3, r3, #1
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80120ae:	461a      	mov	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d206      	bcs.n	80120c8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	b29a      	uxth	r2, r3
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120d2:	4619      	mov	r1, r3
 80120d4:	0049      	lsls	r1, r1, #1
 80120d6:	440b      	add	r3, r1
 80120d8:	b29b      	uxth	r3, r3
 80120da:	4413      	add	r3, r2
 80120dc:	b29a      	uxth	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	8b5b      	ldrh	r3, [r3, #26]
 80120e8:	f043 0304 	orr.w	r3, r3, #4
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2200      	movs	r2, #0
 80120f6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80120f8:	bf00      	nop
 80120fa:	3708      	adds	r7, #8
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	080192fc 	.word	0x080192fc
 8012104:	080199b4 	.word	0x080199b4
 8012108:	08019350 	.word	0x08019350

0801210c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	607b      	str	r3, [r7, #4]
 8012116:	460b      	mov	r3, r1
 8012118:	817b      	strh	r3, [r7, #10]
 801211a:	4613      	mov	r3, r2
 801211c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801211e:	897a      	ldrh	r2, [r7, #10]
 8012120:	893b      	ldrh	r3, [r7, #8]
 8012122:	4413      	add	r3, r2
 8012124:	b29b      	uxth	r3, r3
 8012126:	3314      	adds	r3, #20
 8012128:	b29b      	uxth	r3, r3
 801212a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801212e:	4619      	mov	r1, r3
 8012130:	2022      	movs	r0, #34	; 0x22
 8012132:	f7fa fb77 	bl	800c824 <pbuf_alloc>
 8012136:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d04d      	beq.n	80121da <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801213e:	897b      	ldrh	r3, [r7, #10]
 8012140:	3313      	adds	r3, #19
 8012142:	697a      	ldr	r2, [r7, #20]
 8012144:	8952      	ldrh	r2, [r2, #10]
 8012146:	4293      	cmp	r3, r2
 8012148:	db06      	blt.n	8012158 <tcp_output_alloc_header_common+0x4c>
 801214a:	4b26      	ldr	r3, [pc, #152]	; (80121e4 <tcp_output_alloc_header_common+0xd8>)
 801214c:	f240 7223 	movw	r2, #1827	; 0x723
 8012150:	4925      	ldr	r1, [pc, #148]	; (80121e8 <tcp_output_alloc_header_common+0xdc>)
 8012152:	4826      	ldr	r0, [pc, #152]	; (80121ec <tcp_output_alloc_header_common+0xe0>)
 8012154:	f004 fca6 	bl	8016aa4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801215e:	8c3b      	ldrh	r3, [r7, #32]
 8012160:	4618      	mov	r0, r3
 8012162:	f7f9 fae5 	bl	800b730 <lwip_htons>
 8012166:	4603      	mov	r3, r0
 8012168:	461a      	mov	r2, r3
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801216e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012170:	4618      	mov	r0, r3
 8012172:	f7f9 fadd 	bl	800b730 <lwip_htons>
 8012176:	4603      	mov	r3, r0
 8012178:	461a      	mov	r2, r3
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f7f9 fae8 	bl	800b75a <lwip_htonl>
 801218a:	4602      	mov	r2, r0
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012190:	897b      	ldrh	r3, [r7, #10]
 8012192:	089b      	lsrs	r3, r3, #2
 8012194:	b29b      	uxth	r3, r3
 8012196:	3305      	adds	r3, #5
 8012198:	b29b      	uxth	r3, r3
 801219a:	031b      	lsls	r3, r3, #12
 801219c:	b29a      	uxth	r2, r3
 801219e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	4313      	orrs	r3, r2
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7f9 fac1 	bl	800b730 <lwip_htons>
 80121ae:	4603      	mov	r3, r0
 80121b0:	461a      	mov	r2, r3
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80121b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7f9 fab9 	bl	800b730 <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	461a      	mov	r2, r3
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	2200      	movs	r2, #0
 80121ca:	741a      	strb	r2, [r3, #16]
 80121cc:	2200      	movs	r2, #0
 80121ce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	2200      	movs	r2, #0
 80121d4:	749a      	strb	r2, [r3, #18]
 80121d6:	2200      	movs	r2, #0
 80121d8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80121da:	697b      	ldr	r3, [r7, #20]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3718      	adds	r7, #24
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	080192fc 	.word	0x080192fc
 80121e8:	080199d4 	.word	0x080199d4
 80121ec:	08019350 	.word	0x08019350

080121f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80121f0:	b5b0      	push	{r4, r5, r7, lr}
 80121f2:	b08a      	sub	sp, #40	; 0x28
 80121f4:	af04      	add	r7, sp, #16
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	607b      	str	r3, [r7, #4]
 80121fa:	460b      	mov	r3, r1
 80121fc:	817b      	strh	r3, [r7, #10]
 80121fe:	4613      	mov	r3, r2
 8012200:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d106      	bne.n	8012216 <tcp_output_alloc_header+0x26>
 8012208:	4b15      	ldr	r3, [pc, #84]	; (8012260 <tcp_output_alloc_header+0x70>)
 801220a:	f240 7242 	movw	r2, #1858	; 0x742
 801220e:	4915      	ldr	r1, [pc, #84]	; (8012264 <tcp_output_alloc_header+0x74>)
 8012210:	4815      	ldr	r0, [pc, #84]	; (8012268 <tcp_output_alloc_header+0x78>)
 8012212:	f004 fc47 	bl	8016aa4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	8adb      	ldrh	r3, [r3, #22]
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	8b12      	ldrh	r2, [r2, #24]
 8012222:	68f9      	ldr	r1, [r7, #12]
 8012224:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012226:	893d      	ldrh	r5, [r7, #8]
 8012228:	897c      	ldrh	r4, [r7, #10]
 801222a:	9103      	str	r1, [sp, #12]
 801222c:	2110      	movs	r1, #16
 801222e:	9102      	str	r1, [sp, #8]
 8012230:	9201      	str	r2, [sp, #4]
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	462a      	mov	r2, r5
 8012238:	4621      	mov	r1, r4
 801223a:	f7ff ff67 	bl	801210c <tcp_output_alloc_header_common>
 801223e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d006      	beq.n	8012254 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801224a:	68fa      	ldr	r2, [r7, #12]
 801224c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801224e:	441a      	add	r2, r3
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012254:	697b      	ldr	r3, [r7, #20]
}
 8012256:	4618      	mov	r0, r3
 8012258:	3718      	adds	r7, #24
 801225a:	46bd      	mov	sp, r7
 801225c:	bdb0      	pop	{r4, r5, r7, pc}
 801225e:	bf00      	nop
 8012260:	080192fc 	.word	0x080192fc
 8012264:	08019a04 	.word	0x08019a04
 8012268:	08019350 	.word	0x08019350

0801226c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	4611      	mov	r1, r2
 8012278:	461a      	mov	r2, r3
 801227a:	460b      	mov	r3, r1
 801227c:	71fb      	strb	r3, [r7, #7]
 801227e:	4613      	mov	r3, r2
 8012280:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012282:	2300      	movs	r3, #0
 8012284:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d106      	bne.n	801229a <tcp_output_fill_options+0x2e>
 801228c:	4b13      	ldr	r3, [pc, #76]	; (80122dc <tcp_output_fill_options+0x70>)
 801228e:	f240 7256 	movw	r2, #1878	; 0x756
 8012292:	4913      	ldr	r1, [pc, #76]	; (80122e0 <tcp_output_fill_options+0x74>)
 8012294:	4813      	ldr	r0, [pc, #76]	; (80122e4 <tcp_output_fill_options+0x78>)
 8012296:	f004 fc05 	bl	8016aa4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	3314      	adds	r3, #20
 80122a4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	f103 0214 	add.w	r2, r3, #20
 80122ac:	8bfb      	ldrh	r3, [r7, #30]
 80122ae:	009b      	lsls	r3, r3, #2
 80122b0:	4619      	mov	r1, r3
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	009b      	lsls	r3, r3, #2
 80122b6:	f003 0304 	and.w	r3, r3, #4
 80122ba:	440b      	add	r3, r1
 80122bc:	4413      	add	r3, r2
 80122be:	697a      	ldr	r2, [r7, #20]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d006      	beq.n	80122d2 <tcp_output_fill_options+0x66>
 80122c4:	4b05      	ldr	r3, [pc, #20]	; (80122dc <tcp_output_fill_options+0x70>)
 80122c6:	f240 7275 	movw	r2, #1909	; 0x775
 80122ca:	4907      	ldr	r1, [pc, #28]	; (80122e8 <tcp_output_fill_options+0x7c>)
 80122cc:	4805      	ldr	r0, [pc, #20]	; (80122e4 <tcp_output_fill_options+0x78>)
 80122ce:	f004 fbe9 	bl	8016aa4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80122d2:	bf00      	nop
 80122d4:	3720      	adds	r7, #32
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	080192fc 	.word	0x080192fc
 80122e0:	08019a2c 	.word	0x08019a2c
 80122e4:	08019350 	.word	0x08019350
 80122e8:	08019924 	.word	0x08019924

080122ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08a      	sub	sp, #40	; 0x28
 80122f0:	af04      	add	r7, sp, #16
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	607a      	str	r2, [r7, #4]
 80122f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d106      	bne.n	801230e <tcp_output_control_segment+0x22>
 8012300:	4b1c      	ldr	r3, [pc, #112]	; (8012374 <tcp_output_control_segment+0x88>)
 8012302:	f240 7287 	movw	r2, #1927	; 0x787
 8012306:	491c      	ldr	r1, [pc, #112]	; (8012378 <tcp_output_control_segment+0x8c>)
 8012308:	481c      	ldr	r0, [pc, #112]	; (801237c <tcp_output_control_segment+0x90>)
 801230a:	f004 fbcb 	bl	8016aa4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	6879      	ldr	r1, [r7, #4]
 8012312:	68f8      	ldr	r0, [r7, #12]
 8012314:	f7fe ff40 	bl	8011198 <tcp_route>
 8012318:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d102      	bne.n	8012326 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012320:	23fc      	movs	r3, #252	; 0xfc
 8012322:	75fb      	strb	r3, [r7, #23]
 8012324:	e01c      	b.n	8012360 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d006      	beq.n	801233a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	7adb      	ldrb	r3, [r3, #11]
 8012330:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	7a9b      	ldrb	r3, [r3, #10]
 8012336:	757b      	strb	r3, [r7, #21]
 8012338:	e003      	b.n	8012342 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801233a:	23ff      	movs	r3, #255	; 0xff
 801233c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801233e:	2300      	movs	r3, #0
 8012340:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012342:	7dba      	ldrb	r2, [r7, #22]
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	9302      	str	r3, [sp, #8]
 8012348:	2306      	movs	r3, #6
 801234a:	9301      	str	r3, [sp, #4]
 801234c:	7d7b      	ldrb	r3, [r7, #21]
 801234e:	9300      	str	r3, [sp, #0]
 8012350:	4613      	mov	r3, r2
 8012352:	683a      	ldr	r2, [r7, #0]
 8012354:	6879      	ldr	r1, [r7, #4]
 8012356:	68b8      	ldr	r0, [r7, #8]
 8012358:	f002 fb2a 	bl	80149b0 <ip4_output_if>
 801235c:	4603      	mov	r3, r0
 801235e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012360:	68b8      	ldr	r0, [r7, #8]
 8012362:	f7fa fd43 	bl	800cdec <pbuf_free>
  return err;
 8012366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801236a:	4618      	mov	r0, r3
 801236c:	3718      	adds	r7, #24
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	080192fc 	.word	0x080192fc
 8012378:	08019a54 	.word	0x08019a54
 801237c:	08019350 	.word	0x08019350

08012380 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012380:	b590      	push	{r4, r7, lr}
 8012382:	b08b      	sub	sp, #44	; 0x2c
 8012384:	af04      	add	r7, sp, #16
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	607a      	str	r2, [r7, #4]
 801238c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d106      	bne.n	80123a2 <tcp_rst+0x22>
 8012394:	4b1f      	ldr	r3, [pc, #124]	; (8012414 <tcp_rst+0x94>)
 8012396:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801239a:	491f      	ldr	r1, [pc, #124]	; (8012418 <tcp_rst+0x98>)
 801239c:	481f      	ldr	r0, [pc, #124]	; (801241c <tcp_rst+0x9c>)
 801239e:	f004 fb81 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d106      	bne.n	80123b6 <tcp_rst+0x36>
 80123a8:	4b1a      	ldr	r3, [pc, #104]	; (8012414 <tcp_rst+0x94>)
 80123aa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80123ae:	491c      	ldr	r1, [pc, #112]	; (8012420 <tcp_rst+0xa0>)
 80123b0:	481a      	ldr	r0, [pc, #104]	; (801241c <tcp_rst+0x9c>)
 80123b2:	f004 fb77 	bl	8016aa4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80123b6:	2300      	movs	r3, #0
 80123b8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80123ba:	f246 0308 	movw	r3, #24584	; 0x6008
 80123be:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
 80123c2:	b29c      	uxth	r4, r3
 80123c4:	68b8      	ldr	r0, [r7, #8]
 80123c6:	f7f9 f9c8 	bl	800b75a <lwip_htonl>
 80123ca:	4602      	mov	r2, r0
 80123cc:	8abb      	ldrh	r3, [r7, #20]
 80123ce:	9303      	str	r3, [sp, #12]
 80123d0:	2314      	movs	r3, #20
 80123d2:	9302      	str	r3, [sp, #8]
 80123d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	4613      	mov	r3, r2
 80123de:	2200      	movs	r2, #0
 80123e0:	4621      	mov	r1, r4
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7ff fe92 	bl	801210c <tcp_output_alloc_header_common>
 80123e8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00c      	beq.n	801240a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80123f0:	7dfb      	ldrb	r3, [r7, #23]
 80123f2:	2200      	movs	r2, #0
 80123f4:	6939      	ldr	r1, [r7, #16]
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f7ff ff38 	bl	801226c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	683a      	ldr	r2, [r7, #0]
 8012400:	6939      	ldr	r1, [r7, #16]
 8012402:	68f8      	ldr	r0, [r7, #12]
 8012404:	f7ff ff72 	bl	80122ec <tcp_output_control_segment>
 8012408:	e000      	b.n	801240c <tcp_rst+0x8c>
    return;
 801240a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801240c:	371c      	adds	r7, #28
 801240e:	46bd      	mov	sp, r7
 8012410:	bd90      	pop	{r4, r7, pc}
 8012412:	bf00      	nop
 8012414:	080192fc 	.word	0x080192fc
 8012418:	08019a80 	.word	0x08019a80
 801241c:	08019350 	.word	0x08019350
 8012420:	08019a9c 	.word	0x08019a9c

08012424 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012424:	b590      	push	{r4, r7, lr}
 8012426:	b087      	sub	sp, #28
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801242c:	2300      	movs	r3, #0
 801242e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012430:	2300      	movs	r3, #0
 8012432:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <tcp_send_empty_ack+0x24>
 801243a:	4b28      	ldr	r3, [pc, #160]	; (80124dc <tcp_send_empty_ack+0xb8>)
 801243c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012440:	4927      	ldr	r1, [pc, #156]	; (80124e0 <tcp_send_empty_ack+0xbc>)
 8012442:	4828      	ldr	r0, [pc, #160]	; (80124e4 <tcp_send_empty_ack+0xc0>)
 8012444:	f004 fb2e 	bl	8016aa4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012448:	7dfb      	ldrb	r3, [r7, #23]
 801244a:	009b      	lsls	r3, r3, #2
 801244c:	b2db      	uxtb	r3, r3
 801244e:	f003 0304 	and.w	r3, r3, #4
 8012452:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012454:	7d7b      	ldrb	r3, [r7, #21]
 8012456:	b29c      	uxth	r4, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801245c:	4618      	mov	r0, r3
 801245e:	f7f9 f97c 	bl	800b75a <lwip_htonl>
 8012462:	4603      	mov	r3, r0
 8012464:	2200      	movs	r2, #0
 8012466:	4621      	mov	r1, r4
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff fec1 	bl	80121f0 <tcp_output_alloc_header>
 801246e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d109      	bne.n	801248a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8b5b      	ldrh	r3, [r3, #26]
 801247a:	f043 0303 	orr.w	r3, r3, #3
 801247e:	b29a      	uxth	r2, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012484:	f06f 0301 	mvn.w	r3, #1
 8012488:	e023      	b.n	80124d2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801248a:	7dbb      	ldrb	r3, [r7, #22]
 801248c:	7dfa      	ldrb	r2, [r7, #23]
 801248e:	6939      	ldr	r1, [r7, #16]
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7ff feeb 	bl	801226c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	3304      	adds	r3, #4
 801249c:	6939      	ldr	r1, [r7, #16]
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff ff24 	bl	80122ec <tcp_output_control_segment>
 80124a4:	4603      	mov	r3, r0
 80124a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80124a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d007      	beq.n	80124c0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	8b5b      	ldrh	r3, [r3, #26]
 80124b4:	f043 0303 	orr.w	r3, r3, #3
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	835a      	strh	r2, [r3, #26]
 80124be:	e006      	b.n	80124ce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	8b5b      	ldrh	r3, [r3, #26]
 80124c4:	f023 0303 	bic.w	r3, r3, #3
 80124c8:	b29a      	uxth	r2, r3
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80124ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	371c      	adds	r7, #28
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd90      	pop	{r4, r7, pc}
 80124da:	bf00      	nop
 80124dc:	080192fc 	.word	0x080192fc
 80124e0:	08019ab8 	.word	0x08019ab8
 80124e4:	08019350 	.word	0x08019350

080124e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80124e8:	b590      	push	{r4, r7, lr}
 80124ea:	b087      	sub	sp, #28
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124f0:	2300      	movs	r3, #0
 80124f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d106      	bne.n	8012508 <tcp_keepalive+0x20>
 80124fa:	4b18      	ldr	r3, [pc, #96]	; (801255c <tcp_keepalive+0x74>)
 80124fc:	f640 0224 	movw	r2, #2084	; 0x824
 8012500:	4917      	ldr	r1, [pc, #92]	; (8012560 <tcp_keepalive+0x78>)
 8012502:	4818      	ldr	r0, [pc, #96]	; (8012564 <tcp_keepalive+0x7c>)
 8012504:	f004 face 	bl	8016aa4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012508:	7dfb      	ldrb	r3, [r7, #23]
 801250a:	b29c      	uxth	r4, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012510:	3b01      	subs	r3, #1
 8012512:	4618      	mov	r0, r3
 8012514:	f7f9 f921 	bl	800b75a <lwip_htonl>
 8012518:	4603      	mov	r3, r0
 801251a:	2200      	movs	r2, #0
 801251c:	4621      	mov	r1, r4
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f7ff fe66 	bl	80121f0 <tcp_output_alloc_header>
 8012524:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d102      	bne.n	8012532 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801252c:	f04f 33ff 	mov.w	r3, #4294967295
 8012530:	e010      	b.n	8012554 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012532:	7dfb      	ldrb	r3, [r7, #23]
 8012534:	2200      	movs	r2, #0
 8012536:	6939      	ldr	r1, [r7, #16]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff fe97 	bl	801226c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	3304      	adds	r3, #4
 8012544:	6939      	ldr	r1, [r7, #16]
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7ff fed0 	bl	80122ec <tcp_output_control_segment>
 801254c:	4603      	mov	r3, r0
 801254e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012550:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012554:	4618      	mov	r0, r3
 8012556:	371c      	adds	r7, #28
 8012558:	46bd      	mov	sp, r7
 801255a:	bd90      	pop	{r4, r7, pc}
 801255c:	080192fc 	.word	0x080192fc
 8012560:	08019ad8 	.word	0x08019ad8
 8012564:	08019350 	.word	0x08019350

08012568 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012568:	b590      	push	{r4, r7, lr}
 801256a:	b08b      	sub	sp, #44	; 0x2c
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012570:	2300      	movs	r3, #0
 8012572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d106      	bne.n	801258a <tcp_zero_window_probe+0x22>
 801257c:	4b4c      	ldr	r3, [pc, #304]	; (80126b0 <tcp_zero_window_probe+0x148>)
 801257e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012582:	494c      	ldr	r1, [pc, #304]	; (80126b4 <tcp_zero_window_probe+0x14c>)
 8012584:	484c      	ldr	r0, [pc, #304]	; (80126b8 <tcp_zero_window_probe+0x150>)
 8012586:	f004 fa8d 	bl	8016aa4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801258e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d101      	bne.n	801259a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012596:	2300      	movs	r3, #0
 8012598:	e086      	b.n	80126a8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80125a0:	2bff      	cmp	r3, #255	; 0xff
 80125a2:	d007      	beq.n	80125b4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80125aa:	3301      	adds	r3, #1
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	899b      	ldrh	r3, [r3, #12]
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f9 f8b7 	bl	800b730 <lwip_htons>
 80125c2:	4603      	mov	r3, r0
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	f003 0301 	and.w	r3, r3, #1
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d005      	beq.n	80125da <tcp_zero_window_probe+0x72>
 80125ce:	6a3b      	ldr	r3, [r7, #32]
 80125d0:	891b      	ldrh	r3, [r3, #8]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d101      	bne.n	80125da <tcp_zero_window_probe+0x72>
 80125d6:	2301      	movs	r3, #1
 80125d8:	e000      	b.n	80125dc <tcp_zero_window_probe+0x74>
 80125da:	2300      	movs	r3, #0
 80125dc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80125de:	7ffb      	ldrb	r3, [r7, #31]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	bf0c      	ite	eq
 80125e4:	2301      	moveq	r3, #1
 80125e6:	2300      	movne	r3, #0
 80125e8:	b2db      	uxtb	r3, r3
 80125ea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80125ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f0:	b299      	uxth	r1, r3
 80125f2:	6a3b      	ldr	r3, [r7, #32]
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	8bba      	ldrh	r2, [r7, #28]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ff fdf8 	bl	80121f0 <tcp_output_alloc_header>
 8012600:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d102      	bne.n	801260e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012608:	f04f 33ff 	mov.w	r3, #4294967295
 801260c:	e04c      	b.n	80126a8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012614:	7ffb      	ldrb	r3, [r7, #31]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d011      	beq.n	801263e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	b29b      	uxth	r3, r3
 8012620:	b21b      	sxth	r3, r3
 8012622:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012626:	b21c      	sxth	r4, r3
 8012628:	2011      	movs	r0, #17
 801262a:	f7f9 f881 	bl	800b730 <lwip_htons>
 801262e:	4603      	mov	r3, r0
 8012630:	b21b      	sxth	r3, r3
 8012632:	4323      	orrs	r3, r4
 8012634:	b21b      	sxth	r3, r3
 8012636:	b29a      	uxth	r2, r3
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	819a      	strh	r2, [r3, #12]
 801263c:	e010      	b.n	8012660 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	3314      	adds	r3, #20
 8012644:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012646:	6a3b      	ldr	r3, [r7, #32]
 8012648:	6858      	ldr	r0, [r3, #4]
 801264a:	6a3b      	ldr	r3, [r7, #32]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	891a      	ldrh	r2, [r3, #8]
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	891b      	ldrh	r3, [r3, #8]
 8012654:	1ad3      	subs	r3, r2, r3
 8012656:	b29b      	uxth	r3, r3
 8012658:	2201      	movs	r2, #1
 801265a:	6939      	ldr	r1, [r7, #16]
 801265c:	f7fa fdc0 	bl	800d1e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012660:	6a3b      	ldr	r3, [r7, #32]
 8012662:	68db      	ldr	r3, [r3, #12]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	4618      	mov	r0, r3
 8012668:	f7f9 f877 	bl	800b75a <lwip_htonl>
 801266c:	4603      	mov	r3, r0
 801266e:	3301      	adds	r3, #1
 8012670:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	1ad3      	subs	r3, r2, r3
 801267a:	2b00      	cmp	r3, #0
 801267c:	da02      	bge.n	8012684 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012688:	2200      	movs	r2, #0
 801268a:	69b9      	ldr	r1, [r7, #24]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7ff fded 	bl	801226c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	3304      	adds	r3, #4
 8012698:	69b9      	ldr	r1, [r7, #24]
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7ff fe26 	bl	80122ec <tcp_output_control_segment>
 80126a0:	4603      	mov	r3, r0
 80126a2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80126a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	372c      	adds	r7, #44	; 0x2c
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd90      	pop	{r4, r7, pc}
 80126b0:	080192fc 	.word	0x080192fc
 80126b4:	08019af4 	.word	0x08019af4
 80126b8:	08019350 	.word	0x08019350

080126bc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80126c4:	f7fa ff0c 	bl	800d4e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80126c8:	4b0a      	ldr	r3, [pc, #40]	; (80126f4 <tcpip_tcp_timer+0x38>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d103      	bne.n	80126d8 <tcpip_tcp_timer+0x1c>
 80126d0:	4b09      	ldr	r3, [pc, #36]	; (80126f8 <tcpip_tcp_timer+0x3c>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d005      	beq.n	80126e4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126d8:	2200      	movs	r2, #0
 80126da:	4908      	ldr	r1, [pc, #32]	; (80126fc <tcpip_tcp_timer+0x40>)
 80126dc:	20fa      	movs	r0, #250	; 0xfa
 80126de:	f000 f8f3 	bl	80128c8 <sys_timeout>
 80126e2:	e003      	b.n	80126ec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80126e4:	4b06      	ldr	r3, [pc, #24]	; (8012700 <tcpip_tcp_timer+0x44>)
 80126e6:	2200      	movs	r2, #0
 80126e8:	601a      	str	r2, [r3, #0]
  }
}
 80126ea:	bf00      	nop
 80126ec:	bf00      	nop
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	20008c88 	.word	0x20008c88
 80126f8:	20008c8c 	.word	0x20008c8c
 80126fc:	080126bd 	.word	0x080126bd
 8012700:	20008cd4 	.word	0x20008cd4

08012704 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012708:	4b0a      	ldr	r3, [pc, #40]	; (8012734 <tcp_timer_needed+0x30>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d10f      	bne.n	8012730 <tcp_timer_needed+0x2c>
 8012710:	4b09      	ldr	r3, [pc, #36]	; (8012738 <tcp_timer_needed+0x34>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d103      	bne.n	8012720 <tcp_timer_needed+0x1c>
 8012718:	4b08      	ldr	r3, [pc, #32]	; (801273c <tcp_timer_needed+0x38>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d007      	beq.n	8012730 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012720:	4b04      	ldr	r3, [pc, #16]	; (8012734 <tcp_timer_needed+0x30>)
 8012722:	2201      	movs	r2, #1
 8012724:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012726:	2200      	movs	r2, #0
 8012728:	4905      	ldr	r1, [pc, #20]	; (8012740 <tcp_timer_needed+0x3c>)
 801272a:	20fa      	movs	r0, #250	; 0xfa
 801272c:	f000 f8cc 	bl	80128c8 <sys_timeout>
  }
}
 8012730:	bf00      	nop
 8012732:	bd80      	pop	{r7, pc}
 8012734:	20008cd4 	.word	0x20008cd4
 8012738:	20008c88 	.word	0x20008c88
 801273c:	20008c8c 	.word	0x20008c8c
 8012740:	080126bd 	.word	0x080126bd

08012744 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b086      	sub	sp, #24
 8012748:	af00      	add	r7, sp, #0
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012750:	2006      	movs	r0, #6
 8012752:	f7f9 fc65 	bl	800c020 <memp_malloc>
 8012756:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d109      	bne.n	8012772 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d151      	bne.n	8012808 <sys_timeout_abs+0xc4>
 8012764:	4b2a      	ldr	r3, [pc, #168]	; (8012810 <sys_timeout_abs+0xcc>)
 8012766:	22be      	movs	r2, #190	; 0xbe
 8012768:	492a      	ldr	r1, [pc, #168]	; (8012814 <sys_timeout_abs+0xd0>)
 801276a:	482b      	ldr	r0, [pc, #172]	; (8012818 <sys_timeout_abs+0xd4>)
 801276c:	f004 f99a 	bl	8016aa4 <iprintf>
    return;
 8012770:	e04a      	b.n	8012808 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	2200      	movs	r2, #0
 8012776:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	68fa      	ldr	r2, [r7, #12]
 8012788:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801278a:	4b24      	ldr	r3, [pc, #144]	; (801281c <sys_timeout_abs+0xd8>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d103      	bne.n	801279a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012792:	4a22      	ldr	r2, [pc, #136]	; (801281c <sys_timeout_abs+0xd8>)
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	6013      	str	r3, [r2, #0]
    return;
 8012798:	e037      	b.n	801280a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	685a      	ldr	r2, [r3, #4]
 801279e:	4b1f      	ldr	r3, [pc, #124]	; (801281c <sys_timeout_abs+0xd8>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	1ad3      	subs	r3, r2, r3
 80127a6:	0fdb      	lsrs	r3, r3, #31
 80127a8:	f003 0301 	and.w	r3, r3, #1
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d007      	beq.n	80127c2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80127b2:	4b1a      	ldr	r3, [pc, #104]	; (801281c <sys_timeout_abs+0xd8>)
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80127ba:	4a18      	ldr	r2, [pc, #96]	; (801281c <sys_timeout_abs+0xd8>)
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	6013      	str	r3, [r2, #0]
 80127c0:	e023      	b.n	801280a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80127c2:	4b16      	ldr	r3, [pc, #88]	; (801281c <sys_timeout_abs+0xd8>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	617b      	str	r3, [r7, #20]
 80127c8:	e01a      	b.n	8012800 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00b      	beq.n	80127ea <sys_timeout_abs+0xa6>
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	685a      	ldr	r2, [r3, #4]
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	1ad3      	subs	r3, r2, r3
 80127de:	0fdb      	lsrs	r3, r3, #31
 80127e0:	f003 0301 	and.w	r3, r3, #1
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d007      	beq.n	80127fa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	693a      	ldr	r2, [r7, #16]
 80127f6:	601a      	str	r2, [r3, #0]
        break;
 80127f8:	e007      	b.n	801280a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	617b      	str	r3, [r7, #20]
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1e1      	bne.n	80127ca <sys_timeout_abs+0x86>
 8012806:	e000      	b.n	801280a <sys_timeout_abs+0xc6>
    return;
 8012808:	bf00      	nop
      }
    }
  }
}
 801280a:	3718      	adds	r7, #24
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	08019b18 	.word	0x08019b18
 8012814:	08019b4c 	.word	0x08019b4c
 8012818:	08019b8c 	.word	0x08019b8c
 801281c:	20008ccc 	.word	0x20008ccc

08012820 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b086      	sub	sp, #24
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	4798      	blx	r3

  now = sys_now();
 8012832:	f7f8 fd61 	bl	800b2f8 <sys_now>
 8012836:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	4b0f      	ldr	r3, [pc, #60]	; (801287c <lwip_cyclic_timer+0x5c>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4413      	add	r3, r2
 8012842:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	1ad3      	subs	r3, r2, r3
 801284a:	0fdb      	lsrs	r3, r3, #31
 801284c:	f003 0301 	and.w	r3, r3, #1
 8012850:	b2db      	uxtb	r3, r3
 8012852:	2b00      	cmp	r3, #0
 8012854:	d009      	beq.n	801286a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	4413      	add	r3, r2
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	4907      	ldr	r1, [pc, #28]	; (8012880 <lwip_cyclic_timer+0x60>)
 8012862:	4618      	mov	r0, r3
 8012864:	f7ff ff6e 	bl	8012744 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012868:	e004      	b.n	8012874 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	4904      	ldr	r1, [pc, #16]	; (8012880 <lwip_cyclic_timer+0x60>)
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f7ff ff68 	bl	8012744 <sys_timeout_abs>
}
 8012874:	bf00      	nop
 8012876:	3718      	adds	r7, #24
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20008cd0 	.word	0x20008cd0
 8012880:	08012821 	.word	0x08012821

08012884 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801288a:	2301      	movs	r3, #1
 801288c:	607b      	str	r3, [r7, #4]
 801288e:	e00e      	b.n	80128ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012890:	4a0b      	ldr	r2, [pc, #44]	; (80128c0 <sys_timeouts_init+0x3c>)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	00db      	lsls	r3, r3, #3
 801289c:	4a08      	ldr	r2, [pc, #32]	; (80128c0 <sys_timeouts_init+0x3c>)
 801289e:	4413      	add	r3, r2
 80128a0:	461a      	mov	r2, r3
 80128a2:	4908      	ldr	r1, [pc, #32]	; (80128c4 <sys_timeouts_init+0x40>)
 80128a4:	f000 f810 	bl	80128c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3301      	adds	r3, #1
 80128ac:	607b      	str	r3, [r7, #4]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2b02      	cmp	r3, #2
 80128b2:	d9ed      	bls.n	8012890 <sys_timeouts_init+0xc>
  }
}
 80128b4:	bf00      	nop
 80128b6:	bf00      	nop
 80128b8:	3708      	adds	r7, #8
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	0801a8f0 	.word	0x0801a8f0
 80128c4:	08012821 	.word	0x08012821

080128c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b086      	sub	sp, #24
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	60b9      	str	r1, [r7, #8]
 80128d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128da:	d306      	bcc.n	80128ea <sys_timeout+0x22>
 80128dc:	4b0a      	ldr	r3, [pc, #40]	; (8012908 <sys_timeout+0x40>)
 80128de:	f240 1229 	movw	r2, #297	; 0x129
 80128e2:	490a      	ldr	r1, [pc, #40]	; (801290c <sys_timeout+0x44>)
 80128e4:	480a      	ldr	r0, [pc, #40]	; (8012910 <sys_timeout+0x48>)
 80128e6:	f004 f8dd 	bl	8016aa4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80128ea:	f7f8 fd05 	bl	800b2f8 <sys_now>
 80128ee:	4602      	mov	r2, r0
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	4413      	add	r3, r2
 80128f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	6978      	ldr	r0, [r7, #20]
 80128fc:	f7ff ff22 	bl	8012744 <sys_timeout_abs>
#endif
}
 8012900:	bf00      	nop
 8012902:	3718      	adds	r7, #24
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	08019b18 	.word	0x08019b18
 801290c:	08019bb4 	.word	0x08019bb4
 8012910:	08019b8c 	.word	0x08019b8c

08012914 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801291a:	f7f8 fced 	bl	800b2f8 <sys_now>
 801291e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012920:	4b1a      	ldr	r3, [pc, #104]	; (801298c <sys_check_timeouts+0x78>)
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	b2db      	uxtb	r3, r3
 8012926:	2b00      	cmp	r3, #0
 8012928:	d001      	beq.n	801292e <sys_check_timeouts+0x1a>
 801292a:	f7f9 ff25 	bl	800c778 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801292e:	4b18      	ldr	r3, [pc, #96]	; (8012990 <sys_check_timeouts+0x7c>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d022      	beq.n	8012980 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	0fdb      	lsrs	r3, r3, #31
 8012944:	f003 0301 	and.w	r3, r3, #1
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	d11a      	bne.n	8012984 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	4a0f      	ldr	r2, [pc, #60]	; (8012990 <sys_check_timeouts+0x7c>)
 8012954:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	4a0b      	ldr	r2, [pc, #44]	; (8012994 <sys_check_timeouts+0x80>)
 8012968:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801296a:	68b9      	ldr	r1, [r7, #8]
 801296c:	2006      	movs	r0, #6
 801296e:	f7f9 fbc7 	bl	800c100 <memp_free>
    if (handler != NULL) {
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d0d3      	beq.n	8012920 <sys_check_timeouts+0xc>
      handler(arg);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6838      	ldr	r0, [r7, #0]
 801297c:	4798      	blx	r3
  do {
 801297e:	e7cf      	b.n	8012920 <sys_check_timeouts+0xc>
      return;
 8012980:	bf00      	nop
 8012982:	e000      	b.n	8012986 <sys_check_timeouts+0x72>
      return;
 8012984:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012986:	3710      	adds	r7, #16
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	20008c79 	.word	0x20008c79
 8012990:	20008ccc 	.word	0x20008ccc
 8012994:	20008cd0 	.word	0x20008cd0

08012998 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801299c:	f004 f910 	bl	8016bc0 <rand>
 80129a0:	4603      	mov	r3, r0
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	4b01      	ldr	r3, [pc, #4]	; (80129b8 <udp_init+0x20>)
 80129b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80129b4:	bf00      	nop
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	20000028 	.word	0x20000028

080129bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80129bc:	b480      	push	{r7}
 80129be:	b083      	sub	sp, #12
 80129c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80129c2:	2300      	movs	r3, #0
 80129c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80129c6:	4b17      	ldr	r3, [pc, #92]	; (8012a24 <udp_new_port+0x68>)
 80129c8:	881b      	ldrh	r3, [r3, #0]
 80129ca:	1c5a      	adds	r2, r3, #1
 80129cc:	b291      	uxth	r1, r2
 80129ce:	4a15      	ldr	r2, [pc, #84]	; (8012a24 <udp_new_port+0x68>)
 80129d0:	8011      	strh	r1, [r2, #0]
 80129d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d103      	bne.n	80129e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80129da:	4b12      	ldr	r3, [pc, #72]	; (8012a24 <udp_new_port+0x68>)
 80129dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80129e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80129e2:	4b11      	ldr	r3, [pc, #68]	; (8012a28 <udp_new_port+0x6c>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	603b      	str	r3, [r7, #0]
 80129e8:	e011      	b.n	8012a0e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	8a5a      	ldrh	r2, [r3, #18]
 80129ee:	4b0d      	ldr	r3, [pc, #52]	; (8012a24 <udp_new_port+0x68>)
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d108      	bne.n	8012a08 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80129f6:	88fb      	ldrh	r3, [r7, #6]
 80129f8:	3301      	adds	r3, #1
 80129fa:	80fb      	strh	r3, [r7, #6]
 80129fc:	88fb      	ldrh	r3, [r7, #6]
 80129fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a02:	d3e0      	bcc.n	80129c6 <udp_new_port+0xa>
        return 0;
 8012a04:	2300      	movs	r3, #0
 8012a06:	e007      	b.n	8012a18 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	603b      	str	r3, [r7, #0]
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d1ea      	bne.n	80129ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012a14:	4b03      	ldr	r3, [pc, #12]	; (8012a24 <udp_new_port+0x68>)
 8012a16:	881b      	ldrh	r3, [r3, #0]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	370c      	adds	r7, #12
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr
 8012a24:	20000028 	.word	0x20000028
 8012a28:	20008cd8 	.word	0x20008cd8

08012a2c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	4613      	mov	r3, r2
 8012a38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d105      	bne.n	8012a4c <udp_input_local_match+0x20>
 8012a40:	4b27      	ldr	r3, [pc, #156]	; (8012ae0 <udp_input_local_match+0xb4>)
 8012a42:	2287      	movs	r2, #135	; 0x87
 8012a44:	4927      	ldr	r1, [pc, #156]	; (8012ae4 <udp_input_local_match+0xb8>)
 8012a46:	4828      	ldr	r0, [pc, #160]	; (8012ae8 <udp_input_local_match+0xbc>)
 8012a48:	f004 f82c 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d105      	bne.n	8012a5e <udp_input_local_match+0x32>
 8012a52:	4b23      	ldr	r3, [pc, #140]	; (8012ae0 <udp_input_local_match+0xb4>)
 8012a54:	2288      	movs	r2, #136	; 0x88
 8012a56:	4925      	ldr	r1, [pc, #148]	; (8012aec <udp_input_local_match+0xc0>)
 8012a58:	4823      	ldr	r0, [pc, #140]	; (8012ae8 <udp_input_local_match+0xbc>)
 8012a5a:	f004 f823 	bl	8016aa4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	7a1b      	ldrb	r3, [r3, #8]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d00b      	beq.n	8012a7e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	7a1a      	ldrb	r2, [r3, #8]
 8012a6a:	4b21      	ldr	r3, [pc, #132]	; (8012af0 <udp_input_local_match+0xc4>)
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a72:	3301      	adds	r3, #1
 8012a74:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d001      	beq.n	8012a7e <udp_input_local_match+0x52>
    return 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e02b      	b.n	8012ad6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012a7e:	79fb      	ldrb	r3, [r7, #7]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d018      	beq.n	8012ab6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d013      	beq.n	8012ab2 <udp_input_local_match+0x86>
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00f      	beq.n	8012ab2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a92:	4b17      	ldr	r3, [pc, #92]	; (8012af0 <udp_input_local_match+0xc4>)
 8012a94:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9a:	d00a      	beq.n	8012ab2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	681a      	ldr	r2, [r3, #0]
 8012aa0:	4b13      	ldr	r3, [pc, #76]	; (8012af0 <udp_input_local_match+0xc4>)
 8012aa2:	695b      	ldr	r3, [r3, #20]
 8012aa4:	405a      	eors	r2, r3
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	3308      	adds	r3, #8
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d110      	bne.n	8012ad4 <udp_input_local_match+0xa8>
          return 1;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e00f      	b.n	8012ad6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d009      	beq.n	8012ad0 <udp_input_local_match+0xa4>
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d005      	beq.n	8012ad0 <udp_input_local_match+0xa4>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <udp_input_local_match+0xc4>)
 8012aca:	695b      	ldr	r3, [r3, #20]
 8012acc:	429a      	cmp	r2, r3
 8012ace:	d101      	bne.n	8012ad4 <udp_input_local_match+0xa8>
        return 1;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e000      	b.n	8012ad6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012ad4:	2300      	movs	r3, #0
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	08019c00 	.word	0x08019c00
 8012ae4:	08019c30 	.word	0x08019c30
 8012ae8:	08019c54 	.word	0x08019c54
 8012aec:	08019c7c 	.word	0x08019c7c
 8012af0:	2000570c 	.word	0x2000570c

08012af4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012af4:	b590      	push	{r4, r7, lr}
 8012af6:	b08d      	sub	sp, #52	; 0x34
 8012af8:	af02      	add	r7, sp, #8
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d105      	bne.n	8012b14 <udp_input+0x20>
 8012b08:	4b7c      	ldr	r3, [pc, #496]	; (8012cfc <udp_input+0x208>)
 8012b0a:	22cf      	movs	r2, #207	; 0xcf
 8012b0c:	497c      	ldr	r1, [pc, #496]	; (8012d00 <udp_input+0x20c>)
 8012b0e:	487d      	ldr	r0, [pc, #500]	; (8012d04 <udp_input+0x210>)
 8012b10:	f003 ffc8 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d105      	bne.n	8012b26 <udp_input+0x32>
 8012b1a:	4b78      	ldr	r3, [pc, #480]	; (8012cfc <udp_input+0x208>)
 8012b1c:	22d0      	movs	r2, #208	; 0xd0
 8012b1e:	497a      	ldr	r1, [pc, #488]	; (8012d08 <udp_input+0x214>)
 8012b20:	4878      	ldr	r0, [pc, #480]	; (8012d04 <udp_input+0x210>)
 8012b22:	f003 ffbf 	bl	8016aa4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	895b      	ldrh	r3, [r3, #10]
 8012b2a:	2b07      	cmp	r3, #7
 8012b2c:	d803      	bhi.n	8012b36 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7fa f95c 	bl	800cdec <pbuf_free>
    goto end;
 8012b34:	e0de      	b.n	8012cf4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012b3c:	4b73      	ldr	r3, [pc, #460]	; (8012d0c <udp_input+0x218>)
 8012b3e:	695b      	ldr	r3, [r3, #20]
 8012b40:	4a72      	ldr	r2, [pc, #456]	; (8012d0c <udp_input+0x218>)
 8012b42:	6812      	ldr	r2, [r2, #0]
 8012b44:	4611      	mov	r1, r2
 8012b46:	4618      	mov	r0, r3
 8012b48:	f002 f80a 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7f8 fdea 	bl	800b730 <lwip_htons>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	885b      	ldrh	r3, [r3, #2]
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7f8 fde2 	bl	800b730 <lwip_htons>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012b70:	2300      	movs	r3, #0
 8012b72:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012b74:	2300      	movs	r3, #0
 8012b76:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b7c:	4b64      	ldr	r3, [pc, #400]	; (8012d10 <udp_input+0x21c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	627b      	str	r3, [r7, #36]	; 0x24
 8012b82:	e054      	b.n	8012c2e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	8a5b      	ldrh	r3, [r3, #18]
 8012b88:	89fa      	ldrh	r2, [r7, #14]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d14a      	bne.n	8012c24 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012b8e:	7cfb      	ldrb	r3, [r7, #19]
 8012b90:	461a      	mov	r2, r3
 8012b92:	6839      	ldr	r1, [r7, #0]
 8012b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b96:	f7ff ff49 	bl	8012a2c <udp_input_local_match>
 8012b9a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d041      	beq.n	8012c24 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	7c1b      	ldrb	r3, [r3, #16]
 8012ba4:	f003 0304 	and.w	r3, r3, #4
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d11d      	bne.n	8012be8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d102      	bne.n	8012bb8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb4:	61fb      	str	r3, [r7, #28]
 8012bb6:	e017      	b.n	8012be8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012bb8:	7cfb      	ldrb	r3, [r7, #19]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d014      	beq.n	8012be8 <udp_input+0xf4>
 8012bbe:	4b53      	ldr	r3, [pc, #332]	; (8012d0c <udp_input+0x218>)
 8012bc0:	695b      	ldr	r3, [r3, #20]
 8012bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc6:	d10f      	bne.n	8012be8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012bc8:	69fb      	ldr	r3, [r7, #28]
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	3304      	adds	r3, #4
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d008      	beq.n	8012be8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	3304      	adds	r3, #4
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d101      	bne.n	8012be8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	8a9b      	ldrh	r3, [r3, #20]
 8012bec:	8a3a      	ldrh	r2, [r7, #16]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d118      	bne.n	8012c24 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d005      	beq.n	8012c06 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfc:	685a      	ldr	r2, [r3, #4]
 8012bfe:	4b43      	ldr	r3, [pc, #268]	; (8012d0c <udp_input+0x218>)
 8012c00:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d10e      	bne.n	8012c24 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d014      	beq.n	8012c36 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0e:	68da      	ldr	r2, [r3, #12]
 8012c10:	6a3b      	ldr	r3, [r7, #32]
 8012c12:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012c14:	4b3e      	ldr	r3, [pc, #248]	; (8012d10 <udp_input+0x21c>)
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012c1c:	4a3c      	ldr	r2, [pc, #240]	; (8012d10 <udp_input+0x21c>)
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c20:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012c22:	e008      	b.n	8012c36 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c26:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1a7      	bne.n	8012b84 <udp_input+0x90>
 8012c34:	e000      	b.n	8012c38 <udp_input+0x144>
        break;
 8012c36:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d101      	bne.n	8012c42 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d002      	beq.n	8012c4e <udp_input+0x15a>
    for_us = 1;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	76fb      	strb	r3, [r7, #27]
 8012c4c:	e00a      	b.n	8012c64 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	3304      	adds	r3, #4
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	4b2d      	ldr	r3, [pc, #180]	; (8012d0c <udp_input+0x218>)
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	bf0c      	ite	eq
 8012c5c:	2301      	moveq	r3, #1
 8012c5e:	2300      	movne	r3, #0
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012c64:	7efb      	ldrb	r3, [r7, #27]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d041      	beq.n	8012cee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012c6a:	2108      	movs	r1, #8
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7fa f837 	bl	800cce0 <pbuf_remove_header>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00a      	beq.n	8012c8e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012c78:	4b20      	ldr	r3, [pc, #128]	; (8012cfc <udp_input+0x208>)
 8012c7a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012c7e:	4925      	ldr	r1, [pc, #148]	; (8012d14 <udp_input+0x220>)
 8012c80:	4820      	ldr	r0, [pc, #128]	; (8012d04 <udp_input+0x210>)
 8012c82:	f003 ff0f 	bl	8016aa4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f7fa f8b0 	bl	800cdec <pbuf_free>
      goto end;
 8012c8c:	e032      	b.n	8012cf4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d012      	beq.n	8012cba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	699b      	ldr	r3, [r3, #24]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d00a      	beq.n	8012cb2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	699c      	ldr	r4, [r3, #24]
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	69d8      	ldr	r0, [r3, #28]
 8012ca4:	8a3b      	ldrh	r3, [r7, #16]
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	4b1b      	ldr	r3, [pc, #108]	; (8012d18 <udp_input+0x224>)
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012cae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012cb0:	e021      	b.n	8012cf6 <udp_input+0x202>
        pbuf_free(p);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f7fa f89a 	bl	800cdec <pbuf_free>
        goto end;
 8012cb8:	e01c      	b.n	8012cf4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012cba:	7cfb      	ldrb	r3, [r7, #19]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d112      	bne.n	8012ce6 <udp_input+0x1f2>
 8012cc0:	4b12      	ldr	r3, [pc, #72]	; (8012d0c <udp_input+0x218>)
 8012cc2:	695b      	ldr	r3, [r3, #20]
 8012cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012cc8:	2be0      	cmp	r3, #224	; 0xe0
 8012cca:	d00c      	beq.n	8012ce6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012ccc:	4b0f      	ldr	r3, [pc, #60]	; (8012d0c <udp_input+0x218>)
 8012cce:	899b      	ldrh	r3, [r3, #12]
 8012cd0:	3308      	adds	r3, #8
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	b21b      	sxth	r3, r3
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7fa f874 	bl	800cdc6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012cde:	2103      	movs	r1, #3
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f001 fc1d 	bl	8014520 <icmp_dest_unreach>
      pbuf_free(p);
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7fa f880 	bl	800cdec <pbuf_free>
  return;
 8012cec:	e003      	b.n	8012cf6 <udp_input+0x202>
    pbuf_free(p);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7fa f87c 	bl	800cdec <pbuf_free>
  return;
 8012cf4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012cf6:	372c      	adds	r7, #44	; 0x2c
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd90      	pop	{r4, r7, pc}
 8012cfc:	08019c00 	.word	0x08019c00
 8012d00:	08019ca4 	.word	0x08019ca4
 8012d04:	08019c54 	.word	0x08019c54
 8012d08:	08019cbc 	.word	0x08019cbc
 8012d0c:	2000570c 	.word	0x2000570c
 8012d10:	20008cd8 	.word	0x20008cd8
 8012d14:	08019cd8 	.word	0x08019cd8
 8012d18:	2000571c 	.word	0x2000571c

08012d1c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d109      	bne.n	8012d40 <udp_send+0x24>
 8012d2c:	4b11      	ldr	r3, [pc, #68]	; (8012d74 <udp_send+0x58>)
 8012d2e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012d32:	4911      	ldr	r1, [pc, #68]	; (8012d78 <udp_send+0x5c>)
 8012d34:	4811      	ldr	r0, [pc, #68]	; (8012d7c <udp_send+0x60>)
 8012d36:	f003 feb5 	bl	8016aa4 <iprintf>
 8012d3a:	f06f 030f 	mvn.w	r3, #15
 8012d3e:	e015      	b.n	8012d6c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d109      	bne.n	8012d5a <udp_send+0x3e>
 8012d46:	4b0b      	ldr	r3, [pc, #44]	; (8012d74 <udp_send+0x58>)
 8012d48:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012d4c:	490c      	ldr	r1, [pc, #48]	; (8012d80 <udp_send+0x64>)
 8012d4e:	480b      	ldr	r0, [pc, #44]	; (8012d7c <udp_send+0x60>)
 8012d50:	f003 fea8 	bl	8016aa4 <iprintf>
 8012d54:	f06f 030f 	mvn.w	r3, #15
 8012d58:	e008      	b.n	8012d6c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	1d1a      	adds	r2, r3, #4
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8a9b      	ldrh	r3, [r3, #20]
 8012d62:	6839      	ldr	r1, [r7, #0]
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 f80d 	bl	8012d84 <udp_sendto>
 8012d6a:	4603      	mov	r3, r0
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3708      	adds	r7, #8
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	08019c00 	.word	0x08019c00
 8012d78:	08019cf4 	.word	0x08019cf4
 8012d7c:	08019c54 	.word	0x08019c54
 8012d80:	08019d0c 	.word	0x08019d0c

08012d84 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b088      	sub	sp, #32
 8012d88:	af02      	add	r7, sp, #8
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	607a      	str	r2, [r7, #4]
 8012d90:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d109      	bne.n	8012dac <udp_sendto+0x28>
 8012d98:	4b23      	ldr	r3, [pc, #140]	; (8012e28 <udp_sendto+0xa4>)
 8012d9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012d9e:	4923      	ldr	r1, [pc, #140]	; (8012e2c <udp_sendto+0xa8>)
 8012da0:	4823      	ldr	r0, [pc, #140]	; (8012e30 <udp_sendto+0xac>)
 8012da2:	f003 fe7f 	bl	8016aa4 <iprintf>
 8012da6:	f06f 030f 	mvn.w	r3, #15
 8012daa:	e038      	b.n	8012e1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d109      	bne.n	8012dc6 <udp_sendto+0x42>
 8012db2:	4b1d      	ldr	r3, [pc, #116]	; (8012e28 <udp_sendto+0xa4>)
 8012db4:	f240 2219 	movw	r2, #537	; 0x219
 8012db8:	491e      	ldr	r1, [pc, #120]	; (8012e34 <udp_sendto+0xb0>)
 8012dba:	481d      	ldr	r0, [pc, #116]	; (8012e30 <udp_sendto+0xac>)
 8012dbc:	f003 fe72 	bl	8016aa4 <iprintf>
 8012dc0:	f06f 030f 	mvn.w	r3, #15
 8012dc4:	e02b      	b.n	8012e1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d109      	bne.n	8012de0 <udp_sendto+0x5c>
 8012dcc:	4b16      	ldr	r3, [pc, #88]	; (8012e28 <udp_sendto+0xa4>)
 8012dce:	f240 221a 	movw	r2, #538	; 0x21a
 8012dd2:	4919      	ldr	r1, [pc, #100]	; (8012e38 <udp_sendto+0xb4>)
 8012dd4:	4816      	ldr	r0, [pc, #88]	; (8012e30 <udp_sendto+0xac>)
 8012dd6:	f003 fe65 	bl	8016aa4 <iprintf>
 8012dda:	f06f 030f 	mvn.w	r3, #15
 8012dde:	e01e      	b.n	8012e1e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	7a1b      	ldrb	r3, [r3, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d006      	beq.n	8012df6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	7a1b      	ldrb	r3, [r3, #8]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7f9 fc9d 	bl	800c72c <netif_get_by_index>
 8012df2:	6178      	str	r0, [r7, #20]
 8012df4:	e003      	b.n	8012dfe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f001 fc1c 	bl	8014634 <ip4_route>
 8012dfc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d102      	bne.n	8012e0a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012e04:	f06f 0303 	mvn.w	r3, #3
 8012e08:	e009      	b.n	8012e1e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012e0a:	887a      	ldrh	r2, [r7, #2]
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	4613      	mov	r3, r2
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	68b9      	ldr	r1, [r7, #8]
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f000 f810 	bl	8012e3c <udp_sendto_if>
 8012e1c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3718      	adds	r7, #24
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	08019c00 	.word	0x08019c00
 8012e2c:	08019d24 	.word	0x08019d24
 8012e30:	08019c54 	.word	0x08019c54
 8012e34:	08019d3c 	.word	0x08019d3c
 8012e38:	08019d58 	.word	0x08019d58

08012e3c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b088      	sub	sp, #32
 8012e40:	af02      	add	r7, sp, #8
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d109      	bne.n	8012e64 <udp_sendto_if+0x28>
 8012e50:	4b2e      	ldr	r3, [pc, #184]	; (8012f0c <udp_sendto_if+0xd0>)
 8012e52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e56:	492e      	ldr	r1, [pc, #184]	; (8012f10 <udp_sendto_if+0xd4>)
 8012e58:	482e      	ldr	r0, [pc, #184]	; (8012f14 <udp_sendto_if+0xd8>)
 8012e5a:	f003 fe23 	bl	8016aa4 <iprintf>
 8012e5e:	f06f 030f 	mvn.w	r3, #15
 8012e62:	e04f      	b.n	8012f04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d109      	bne.n	8012e7e <udp_sendto_if+0x42>
 8012e6a:	4b28      	ldr	r3, [pc, #160]	; (8012f0c <udp_sendto_if+0xd0>)
 8012e6c:	f240 2281 	movw	r2, #641	; 0x281
 8012e70:	4929      	ldr	r1, [pc, #164]	; (8012f18 <udp_sendto_if+0xdc>)
 8012e72:	4828      	ldr	r0, [pc, #160]	; (8012f14 <udp_sendto_if+0xd8>)
 8012e74:	f003 fe16 	bl	8016aa4 <iprintf>
 8012e78:	f06f 030f 	mvn.w	r3, #15
 8012e7c:	e042      	b.n	8012f04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d109      	bne.n	8012e98 <udp_sendto_if+0x5c>
 8012e84:	4b21      	ldr	r3, [pc, #132]	; (8012f0c <udp_sendto_if+0xd0>)
 8012e86:	f240 2282 	movw	r2, #642	; 0x282
 8012e8a:	4924      	ldr	r1, [pc, #144]	; (8012f1c <udp_sendto_if+0xe0>)
 8012e8c:	4821      	ldr	r0, [pc, #132]	; (8012f14 <udp_sendto_if+0xd8>)
 8012e8e:	f003 fe09 	bl	8016aa4 <iprintf>
 8012e92:	f06f 030f 	mvn.w	r3, #15
 8012e96:	e035      	b.n	8012f04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012e98:	6a3b      	ldr	r3, [r7, #32]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d109      	bne.n	8012eb2 <udp_sendto_if+0x76>
 8012e9e:	4b1b      	ldr	r3, [pc, #108]	; (8012f0c <udp_sendto_if+0xd0>)
 8012ea0:	f240 2283 	movw	r2, #643	; 0x283
 8012ea4:	491e      	ldr	r1, [pc, #120]	; (8012f20 <udp_sendto_if+0xe4>)
 8012ea6:	481b      	ldr	r0, [pc, #108]	; (8012f14 <udp_sendto_if+0xd8>)
 8012ea8:	f003 fdfc 	bl	8016aa4 <iprintf>
 8012eac:	f06f 030f 	mvn.w	r3, #15
 8012eb0:	e028      	b.n	8012f04 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d009      	beq.n	8012ecc <udp_sendto_if+0x90>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d005      	beq.n	8012ecc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ec8:	2be0      	cmp	r3, #224	; 0xe0
 8012eca:	d103      	bne.n	8012ed4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012ecc:	6a3b      	ldr	r3, [r7, #32]
 8012ece:	3304      	adds	r3, #4
 8012ed0:	617b      	str	r3, [r7, #20]
 8012ed2:	e00b      	b.n	8012eec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	6a3b      	ldr	r3, [r7, #32]
 8012eda:	3304      	adds	r3, #4
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d002      	beq.n	8012ee8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012ee2:	f06f 0303 	mvn.w	r3, #3
 8012ee6:	e00d      	b.n	8012f04 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012eec:	887a      	ldrh	r2, [r7, #2]
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	9301      	str	r3, [sp, #4]
 8012ef2:	6a3b      	ldr	r3, [r7, #32]
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f000 f811 	bl	8012f24 <udp_sendto_if_src>
 8012f02:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3718      	adds	r7, #24
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	08019c00 	.word	0x08019c00
 8012f10:	08019d74 	.word	0x08019d74
 8012f14:	08019c54 	.word	0x08019c54
 8012f18:	08019d90 	.word	0x08019d90
 8012f1c:	08019dac 	.word	0x08019dac
 8012f20:	08019dcc 	.word	0x08019dcc

08012f24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b08c      	sub	sp, #48	; 0x30
 8012f28:	af04      	add	r7, sp, #16
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
 8012f30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d109      	bne.n	8012f4c <udp_sendto_if_src+0x28>
 8012f38:	4b65      	ldr	r3, [pc, #404]	; (80130d0 <udp_sendto_if_src+0x1ac>)
 8012f3a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012f3e:	4965      	ldr	r1, [pc, #404]	; (80130d4 <udp_sendto_if_src+0x1b0>)
 8012f40:	4865      	ldr	r0, [pc, #404]	; (80130d8 <udp_sendto_if_src+0x1b4>)
 8012f42:	f003 fdaf 	bl	8016aa4 <iprintf>
 8012f46:	f06f 030f 	mvn.w	r3, #15
 8012f4a:	e0bc      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d109      	bne.n	8012f66 <udp_sendto_if_src+0x42>
 8012f52:	4b5f      	ldr	r3, [pc, #380]	; (80130d0 <udp_sendto_if_src+0x1ac>)
 8012f54:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012f58:	4960      	ldr	r1, [pc, #384]	; (80130dc <udp_sendto_if_src+0x1b8>)
 8012f5a:	485f      	ldr	r0, [pc, #380]	; (80130d8 <udp_sendto_if_src+0x1b4>)
 8012f5c:	f003 fda2 	bl	8016aa4 <iprintf>
 8012f60:	f06f 030f 	mvn.w	r3, #15
 8012f64:	e0af      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d109      	bne.n	8012f80 <udp_sendto_if_src+0x5c>
 8012f6c:	4b58      	ldr	r3, [pc, #352]	; (80130d0 <udp_sendto_if_src+0x1ac>)
 8012f6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012f72:	495b      	ldr	r1, [pc, #364]	; (80130e0 <udp_sendto_if_src+0x1bc>)
 8012f74:	4858      	ldr	r0, [pc, #352]	; (80130d8 <udp_sendto_if_src+0x1b4>)
 8012f76:	f003 fd95 	bl	8016aa4 <iprintf>
 8012f7a:	f06f 030f 	mvn.w	r3, #15
 8012f7e:	e0a2      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d109      	bne.n	8012f9a <udp_sendto_if_src+0x76>
 8012f86:	4b52      	ldr	r3, [pc, #328]	; (80130d0 <udp_sendto_if_src+0x1ac>)
 8012f88:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012f8c:	4955      	ldr	r1, [pc, #340]	; (80130e4 <udp_sendto_if_src+0x1c0>)
 8012f8e:	4852      	ldr	r0, [pc, #328]	; (80130d8 <udp_sendto_if_src+0x1b4>)
 8012f90:	f003 fd88 	bl	8016aa4 <iprintf>
 8012f94:	f06f 030f 	mvn.w	r3, #15
 8012f98:	e095      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d109      	bne.n	8012fb4 <udp_sendto_if_src+0x90>
 8012fa0:	4b4b      	ldr	r3, [pc, #300]	; (80130d0 <udp_sendto_if_src+0x1ac>)
 8012fa2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012fa6:	4950      	ldr	r1, [pc, #320]	; (80130e8 <udp_sendto_if_src+0x1c4>)
 8012fa8:	484b      	ldr	r0, [pc, #300]	; (80130d8 <udp_sendto_if_src+0x1b4>)
 8012faa:	f003 fd7b 	bl	8016aa4 <iprintf>
 8012fae:	f06f 030f 	mvn.w	r3, #15
 8012fb2:	e088      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	8a5b      	ldrh	r3, [r3, #18]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d10f      	bne.n	8012fdc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012fbc:	68f9      	ldr	r1, [r7, #12]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	8a5b      	ldrh	r3, [r3, #18]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f000 f893 	bl	80130f0 <udp_bind>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012fce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d002      	beq.n	8012fdc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012fd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012fda:	e074      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	891b      	ldrh	r3, [r3, #8]
 8012fe0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d902      	bls.n	8012fee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fec:	e06b      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012fee:	2108      	movs	r1, #8
 8012ff0:	68b8      	ldr	r0, [r7, #8]
 8012ff2:	f7f9 fe65 	bl	800ccc0 <pbuf_add_header>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d015      	beq.n	8013028 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012ffc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013000:	2108      	movs	r1, #8
 8013002:	2022      	movs	r0, #34	; 0x22
 8013004:	f7f9 fc0e 	bl	800c824 <pbuf_alloc>
 8013008:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d102      	bne.n	8013016 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013010:	f04f 33ff 	mov.w	r3, #4294967295
 8013014:	e057      	b.n	80130c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	891b      	ldrh	r3, [r3, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d006      	beq.n	801302c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801301e:	68b9      	ldr	r1, [r7, #8]
 8013020:	69f8      	ldr	r0, [r7, #28]
 8013022:	f7f9 fffb 	bl	800d01c <pbuf_chain>
 8013026:	e001      	b.n	801302c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	895b      	ldrh	r3, [r3, #10]
 8013030:	2b07      	cmp	r3, #7
 8013032:	d806      	bhi.n	8013042 <udp_sendto_if_src+0x11e>
 8013034:	4b26      	ldr	r3, [pc, #152]	; (80130d0 <udp_sendto_if_src+0x1ac>)
 8013036:	f240 320d 	movw	r2, #781	; 0x30d
 801303a:	492c      	ldr	r1, [pc, #176]	; (80130ec <udp_sendto_if_src+0x1c8>)
 801303c:	4826      	ldr	r0, [pc, #152]	; (80130d8 <udp_sendto_if_src+0x1b4>)
 801303e:	f003 fd31 	bl	8016aa4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	8a5b      	ldrh	r3, [r3, #18]
 801304c:	4618      	mov	r0, r3
 801304e:	f7f8 fb6f 	bl	800b730 <lwip_htons>
 8013052:	4603      	mov	r3, r0
 8013054:	461a      	mov	r2, r3
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801305a:	887b      	ldrh	r3, [r7, #2]
 801305c:	4618      	mov	r0, r3
 801305e:	f7f8 fb67 	bl	800b730 <lwip_htons>
 8013062:	4603      	mov	r3, r0
 8013064:	461a      	mov	r2, r3
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	2200      	movs	r2, #0
 801306e:	719a      	strb	r2, [r3, #6]
 8013070:	2200      	movs	r2, #0
 8013072:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	891b      	ldrh	r3, [r3, #8]
 8013078:	4618      	mov	r0, r3
 801307a:	f7f8 fb59 	bl	800b730 <lwip_htons>
 801307e:	4603      	mov	r3, r0
 8013080:	461a      	mov	r2, r3
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013086:	2311      	movs	r3, #17
 8013088:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	7adb      	ldrb	r3, [r3, #11]
 801308e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	7a9b      	ldrb	r3, [r3, #10]
 8013094:	7cb9      	ldrb	r1, [r7, #18]
 8013096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013098:	9202      	str	r2, [sp, #8]
 801309a:	7cfa      	ldrb	r2, [r7, #19]
 801309c:	9201      	str	r2, [sp, #4]
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	460b      	mov	r3, r1
 80130a2:	687a      	ldr	r2, [r7, #4]
 80130a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130a6:	69f8      	ldr	r0, [r7, #28]
 80130a8:	f001 fcac 	bl	8014a04 <ip4_output_if_src>
 80130ac:	4603      	mov	r3, r0
 80130ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80130b0:	69fa      	ldr	r2, [r7, #28]
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d004      	beq.n	80130c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80130b8:	69f8      	ldr	r0, [r7, #28]
 80130ba:	f7f9 fe97 	bl	800cdec <pbuf_free>
    q = NULL;
 80130be:	2300      	movs	r3, #0
 80130c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80130c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3720      	adds	r7, #32
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	08019c00 	.word	0x08019c00
 80130d4:	08019dec 	.word	0x08019dec
 80130d8:	08019c54 	.word	0x08019c54
 80130dc:	08019e0c 	.word	0x08019e0c
 80130e0:	08019e2c 	.word	0x08019e2c
 80130e4:	08019e50 	.word	0x08019e50
 80130e8:	08019e74 	.word	0x08019e74
 80130ec:	08019e98 	.word	0x08019e98

080130f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	4613      	mov	r3, r2
 80130fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d101      	bne.n	8013108 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013104:	4b39      	ldr	r3, [pc, #228]	; (80131ec <udp_bind+0xfc>)
 8013106:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d109      	bne.n	8013122 <udp_bind+0x32>
 801310e:	4b38      	ldr	r3, [pc, #224]	; (80131f0 <udp_bind+0x100>)
 8013110:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013114:	4937      	ldr	r1, [pc, #220]	; (80131f4 <udp_bind+0x104>)
 8013116:	4838      	ldr	r0, [pc, #224]	; (80131f8 <udp_bind+0x108>)
 8013118:	f003 fcc4 	bl	8016aa4 <iprintf>
 801311c:	f06f 030f 	mvn.w	r3, #15
 8013120:	e060      	b.n	80131e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013122:	2300      	movs	r3, #0
 8013124:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013126:	4b35      	ldr	r3, [pc, #212]	; (80131fc <udp_bind+0x10c>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	617b      	str	r3, [r7, #20]
 801312c:	e009      	b.n	8013142 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	429a      	cmp	r2, r3
 8013134:	d102      	bne.n	801313c <udp_bind+0x4c>
      rebind = 1;
 8013136:	2301      	movs	r3, #1
 8013138:	74fb      	strb	r3, [r7, #19]
      break;
 801313a:	e005      	b.n	8013148 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	617b      	str	r3, [r7, #20]
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d1f2      	bne.n	801312e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013148:	88fb      	ldrh	r3, [r7, #6]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d109      	bne.n	8013162 <udp_bind+0x72>
    port = udp_new_port();
 801314e:	f7ff fc35 	bl	80129bc <udp_new_port>
 8013152:	4603      	mov	r3, r0
 8013154:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013156:	88fb      	ldrh	r3, [r7, #6]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d12c      	bne.n	80131b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801315c:	f06f 0307 	mvn.w	r3, #7
 8013160:	e040      	b.n	80131e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013162:	4b26      	ldr	r3, [pc, #152]	; (80131fc <udp_bind+0x10c>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	e022      	b.n	80131b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801316a:	68fa      	ldr	r2, [r7, #12]
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	429a      	cmp	r2, r3
 8013170:	d01b      	beq.n	80131aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	8a5b      	ldrh	r3, [r3, #18]
 8013176:	88fa      	ldrh	r2, [r7, #6]
 8013178:	429a      	cmp	r2, r3
 801317a:	d116      	bne.n	80131aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013184:	429a      	cmp	r2, r3
 8013186:	d00d      	beq.n	80131a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00a      	beq.n	80131a4 <udp_bind+0xb4>
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d006      	beq.n	80131a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013196:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013198:	2b00      	cmp	r3, #0
 801319a:	d003      	beq.n	80131a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d102      	bne.n	80131aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80131a4:	f06f 0307 	mvn.w	r3, #7
 80131a8:	e01c      	b.n	80131e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	617b      	str	r3, [r7, #20]
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d1d9      	bne.n	801316a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d002      	beq.n	80131c2 <udp_bind+0xd2>
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	e000      	b.n	80131c4 <udp_bind+0xd4>
 80131c2:	2300      	movs	r3, #0
 80131c4:	68fa      	ldr	r2, [r7, #12]
 80131c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	88fa      	ldrh	r2, [r7, #6]
 80131cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80131ce:	7cfb      	ldrb	r3, [r7, #19]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d106      	bne.n	80131e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80131d4:	4b09      	ldr	r3, [pc, #36]	; (80131fc <udp_bind+0x10c>)
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80131dc:	4a07      	ldr	r2, [pc, #28]	; (80131fc <udp_bind+0x10c>)
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80131e2:	2300      	movs	r3, #0
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3718      	adds	r7, #24
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	0801a908 	.word	0x0801a908
 80131f0:	08019c00 	.word	0x08019c00
 80131f4:	08019ec8 	.word	0x08019ec8
 80131f8:	08019c54 	.word	0x08019c54
 80131fc:	20008cd8 	.word	0x20008cd8

08013200 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b086      	sub	sp, #24
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	4613      	mov	r3, r2
 801320c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d109      	bne.n	8013228 <udp_connect+0x28>
 8013214:	4b2c      	ldr	r3, [pc, #176]	; (80132c8 <udp_connect+0xc8>)
 8013216:	f240 4235 	movw	r2, #1077	; 0x435
 801321a:	492c      	ldr	r1, [pc, #176]	; (80132cc <udp_connect+0xcc>)
 801321c:	482c      	ldr	r0, [pc, #176]	; (80132d0 <udp_connect+0xd0>)
 801321e:	f003 fc41 	bl	8016aa4 <iprintf>
 8013222:	f06f 030f 	mvn.w	r3, #15
 8013226:	e04b      	b.n	80132c0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d109      	bne.n	8013242 <udp_connect+0x42>
 801322e:	4b26      	ldr	r3, [pc, #152]	; (80132c8 <udp_connect+0xc8>)
 8013230:	f240 4236 	movw	r2, #1078	; 0x436
 8013234:	4927      	ldr	r1, [pc, #156]	; (80132d4 <udp_connect+0xd4>)
 8013236:	4826      	ldr	r0, [pc, #152]	; (80132d0 <udp_connect+0xd0>)
 8013238:	f003 fc34 	bl	8016aa4 <iprintf>
 801323c:	f06f 030f 	mvn.w	r3, #15
 8013240:	e03e      	b.n	80132c0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	8a5b      	ldrh	r3, [r3, #18]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d10f      	bne.n	801326a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801324a:	68f9      	ldr	r1, [r7, #12]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	8a5b      	ldrh	r3, [r3, #18]
 8013250:	461a      	mov	r2, r3
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f7ff ff4c 	bl	80130f0 <udp_bind>
 8013258:	4603      	mov	r3, r0
 801325a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801325c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d002      	beq.n	801326a <udp_connect+0x6a>
      return err;
 8013264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013268:	e02a      	b.n	80132c0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d002      	beq.n	8013276 <udp_connect+0x76>
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	e000      	b.n	8013278 <udp_connect+0x78>
 8013276:	2300      	movs	r3, #0
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	88fa      	ldrh	r2, [r7, #6]
 8013280:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	7c1b      	ldrb	r3, [r3, #16]
 8013286:	f043 0304 	orr.w	r3, r3, #4
 801328a:	b2da      	uxtb	r2, r3
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013290:	4b11      	ldr	r3, [pc, #68]	; (80132d8 <udp_connect+0xd8>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	617b      	str	r3, [r7, #20]
 8013296:	e008      	b.n	80132aa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013298:	68fa      	ldr	r2, [r7, #12]
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	429a      	cmp	r2, r3
 801329e:	d101      	bne.n	80132a4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	e00d      	b.n	80132c0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	617b      	str	r3, [r7, #20]
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d1f3      	bne.n	8013298 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80132b0:	4b09      	ldr	r3, [pc, #36]	; (80132d8 <udp_connect+0xd8>)
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80132b8:	4a07      	ldr	r2, [pc, #28]	; (80132d8 <udp_connect+0xd8>)
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80132be:	2300      	movs	r3, #0
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3718      	adds	r7, #24
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	08019c00 	.word	0x08019c00
 80132cc:	08019ee0 	.word	0x08019ee0
 80132d0:	08019c54 	.word	0x08019c54
 80132d4:	08019efc 	.word	0x08019efc
 80132d8:	20008cd8 	.word	0x20008cd8

080132dc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d107      	bne.n	80132fa <udp_disconnect+0x1e>
 80132ea:	4b0d      	ldr	r3, [pc, #52]	; (8013320 <udp_disconnect+0x44>)
 80132ec:	f240 426a 	movw	r2, #1130	; 0x46a
 80132f0:	490c      	ldr	r1, [pc, #48]	; (8013324 <udp_disconnect+0x48>)
 80132f2:	480d      	ldr	r0, [pc, #52]	; (8013328 <udp_disconnect+0x4c>)
 80132f4:	f003 fbd6 	bl	8016aa4 <iprintf>
 80132f8:	e00f      	b.n	801331a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2200      	movs	r2, #0
 8013304:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	7c1b      	ldrb	r3, [r3, #16]
 8013310:	f023 0304 	bic.w	r3, r3, #4
 8013314:	b2da      	uxtb	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	741a      	strb	r2, [r3, #16]
}
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	08019c00 	.word	0x08019c00
 8013324:	08019f18 	.word	0x08019f18
 8013328:	08019c54 	.word	0x08019c54

0801332c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d107      	bne.n	801334e <udp_recv+0x22>
 801333e:	4b08      	ldr	r3, [pc, #32]	; (8013360 <udp_recv+0x34>)
 8013340:	f240 428a 	movw	r2, #1162	; 0x48a
 8013344:	4907      	ldr	r1, [pc, #28]	; (8013364 <udp_recv+0x38>)
 8013346:	4808      	ldr	r0, [pc, #32]	; (8013368 <udp_recv+0x3c>)
 8013348:	f003 fbac 	bl	8016aa4 <iprintf>
 801334c:	e005      	b.n	801335a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	68ba      	ldr	r2, [r7, #8]
 8013352:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	61da      	str	r2, [r3, #28]
}
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	08019c00 	.word	0x08019c00
 8013364:	08019f34 	.word	0x08019f34
 8013368:	08019c54 	.word	0x08019c54

0801336c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d107      	bne.n	801338a <udp_remove+0x1e>
 801337a:	4b19      	ldr	r3, [pc, #100]	; (80133e0 <udp_remove+0x74>)
 801337c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013380:	4918      	ldr	r1, [pc, #96]	; (80133e4 <udp_remove+0x78>)
 8013382:	4819      	ldr	r0, [pc, #100]	; (80133e8 <udp_remove+0x7c>)
 8013384:	f003 fb8e 	bl	8016aa4 <iprintf>
 8013388:	e026      	b.n	80133d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801338a:	4b18      	ldr	r3, [pc, #96]	; (80133ec <udp_remove+0x80>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	429a      	cmp	r2, r3
 8013392:	d105      	bne.n	80133a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013394:	4b15      	ldr	r3, [pc, #84]	; (80133ec <udp_remove+0x80>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	4a14      	ldr	r2, [pc, #80]	; (80133ec <udp_remove+0x80>)
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	e017      	b.n	80133d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133a0:	4b12      	ldr	r3, [pc, #72]	; (80133ec <udp_remove+0x80>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	60fb      	str	r3, [r7, #12]
 80133a6:	e010      	b.n	80133ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d009      	beq.n	80133c4 <udp_remove+0x58>
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d104      	bne.n	80133c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	68da      	ldr	r2, [r3, #12]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	60da      	str	r2, [r3, #12]
        break;
 80133c2:	e005      	b.n	80133d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	60fb      	str	r3, [r7, #12]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d1eb      	bne.n	80133a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80133d0:	6879      	ldr	r1, [r7, #4]
 80133d2:	2000      	movs	r0, #0
 80133d4:	f7f8 fe94 	bl	800c100 <memp_free>
}
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	08019c00 	.word	0x08019c00
 80133e4:	08019f4c 	.word	0x08019f4c
 80133e8:	08019c54 	.word	0x08019c54
 80133ec:	20008cd8 	.word	0x20008cd8

080133f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80133f6:	2000      	movs	r0, #0
 80133f8:	f7f8 fe12 	bl	800c020 <memp_malloc>
 80133fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013404:	2220      	movs	r2, #32
 8013406:	2100      	movs	r1, #0
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f003 fb43 	bl	8016a94 <memset>
    pcb->ttl = UDP_TTL;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	22ff      	movs	r2, #255	; 0xff
 8013412:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013414:	687b      	ldr	r3, [r7, #4]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3708      	adds	r7, #8
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
	...

08013420 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d01e      	beq.n	801346e <udp_netif_ip_addr_changed+0x4e>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d01a      	beq.n	801346e <udp_netif_ip_addr_changed+0x4e>
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d017      	beq.n	801346e <udp_netif_ip_addr_changed+0x4e>
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d013      	beq.n	801346e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013446:	4b0d      	ldr	r3, [pc, #52]	; (801347c <udp_netif_ip_addr_changed+0x5c>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	e00c      	b.n	8013468 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	429a      	cmp	r2, r3
 8013458:	d103      	bne.n	8013462 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	60fb      	str	r3, [r7, #12]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1ef      	bne.n	801344e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801346e:	bf00      	nop
 8013470:	3714      	adds	r7, #20
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop
 801347c:	20008cd8 	.word	0x20008cd8

08013480 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013488:	4915      	ldr	r1, [pc, #84]	; (80134e0 <etharp_free_entry+0x60>)
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d013      	beq.n	80134c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801349c:	4910      	ldr	r1, [pc, #64]	; (80134e0 <etharp_free_entry+0x60>)
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	4613      	mov	r3, r2
 80134a2:	005b      	lsls	r3, r3, #1
 80134a4:	4413      	add	r3, r2
 80134a6:	00db      	lsls	r3, r3, #3
 80134a8:	440b      	add	r3, r1
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7f9 fc9d 	bl	800cdec <pbuf_free>
    arp_table[i].q = NULL;
 80134b2:	490b      	ldr	r1, [pc, #44]	; (80134e0 <etharp_free_entry+0x60>)
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	4613      	mov	r3, r2
 80134b8:	005b      	lsls	r3, r3, #1
 80134ba:	4413      	add	r3, r2
 80134bc:	00db      	lsls	r3, r3, #3
 80134be:	440b      	add	r3, r1
 80134c0:	2200      	movs	r2, #0
 80134c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80134c4:	4906      	ldr	r1, [pc, #24]	; (80134e0 <etharp_free_entry+0x60>)
 80134c6:	687a      	ldr	r2, [r7, #4]
 80134c8:	4613      	mov	r3, r2
 80134ca:	005b      	lsls	r3, r3, #1
 80134cc:	4413      	add	r3, r2
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	440b      	add	r3, r1
 80134d2:	3314      	adds	r3, #20
 80134d4:	2200      	movs	r2, #0
 80134d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80134d8:	bf00      	nop
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	20008cdc 	.word	0x20008cdc

080134e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80134ea:	2300      	movs	r3, #0
 80134ec:	607b      	str	r3, [r7, #4]
 80134ee:	e096      	b.n	801361e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80134f0:	494f      	ldr	r1, [pc, #316]	; (8013630 <etharp_tmr+0x14c>)
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	4613      	mov	r3, r2
 80134f6:	005b      	lsls	r3, r3, #1
 80134f8:	4413      	add	r3, r2
 80134fa:	00db      	lsls	r3, r3, #3
 80134fc:	440b      	add	r3, r1
 80134fe:	3314      	adds	r3, #20
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013504:	78fb      	ldrb	r3, [r7, #3]
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 8086 	beq.w	8013618 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801350c:	4948      	ldr	r1, [pc, #288]	; (8013630 <etharp_tmr+0x14c>)
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	4613      	mov	r3, r2
 8013512:	005b      	lsls	r3, r3, #1
 8013514:	4413      	add	r3, r2
 8013516:	00db      	lsls	r3, r3, #3
 8013518:	440b      	add	r3, r1
 801351a:	3312      	adds	r3, #18
 801351c:	881b      	ldrh	r3, [r3, #0]
 801351e:	3301      	adds	r3, #1
 8013520:	b298      	uxth	r0, r3
 8013522:	4943      	ldr	r1, [pc, #268]	; (8013630 <etharp_tmr+0x14c>)
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	4613      	mov	r3, r2
 8013528:	005b      	lsls	r3, r3, #1
 801352a:	4413      	add	r3, r2
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	440b      	add	r3, r1
 8013530:	3312      	adds	r3, #18
 8013532:	4602      	mov	r2, r0
 8013534:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013536:	493e      	ldr	r1, [pc, #248]	; (8013630 <etharp_tmr+0x14c>)
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	4613      	mov	r3, r2
 801353c:	005b      	lsls	r3, r3, #1
 801353e:	4413      	add	r3, r2
 8013540:	00db      	lsls	r3, r3, #3
 8013542:	440b      	add	r3, r1
 8013544:	3312      	adds	r3, #18
 8013546:	881b      	ldrh	r3, [r3, #0]
 8013548:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801354c:	d215      	bcs.n	801357a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801354e:	4938      	ldr	r1, [pc, #224]	; (8013630 <etharp_tmr+0x14c>)
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	4613      	mov	r3, r2
 8013554:	005b      	lsls	r3, r3, #1
 8013556:	4413      	add	r3, r2
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	440b      	add	r3, r1
 801355c:	3314      	adds	r3, #20
 801355e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013560:	2b01      	cmp	r3, #1
 8013562:	d10e      	bne.n	8013582 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013564:	4932      	ldr	r1, [pc, #200]	; (8013630 <etharp_tmr+0x14c>)
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	4613      	mov	r3, r2
 801356a:	005b      	lsls	r3, r3, #1
 801356c:	4413      	add	r3, r2
 801356e:	00db      	lsls	r3, r3, #3
 8013570:	440b      	add	r3, r1
 8013572:	3312      	adds	r3, #18
 8013574:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013576:	2b04      	cmp	r3, #4
 8013578:	d903      	bls.n	8013582 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff ff80 	bl	8013480 <etharp_free_entry>
 8013580:	e04a      	b.n	8013618 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013582:	492b      	ldr	r1, [pc, #172]	; (8013630 <etharp_tmr+0x14c>)
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	4613      	mov	r3, r2
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	4413      	add	r3, r2
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	440b      	add	r3, r1
 8013590:	3314      	adds	r3, #20
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	2b03      	cmp	r3, #3
 8013596:	d10a      	bne.n	80135ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013598:	4925      	ldr	r1, [pc, #148]	; (8013630 <etharp_tmr+0x14c>)
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	4613      	mov	r3, r2
 801359e:	005b      	lsls	r3, r3, #1
 80135a0:	4413      	add	r3, r2
 80135a2:	00db      	lsls	r3, r3, #3
 80135a4:	440b      	add	r3, r1
 80135a6:	3314      	adds	r3, #20
 80135a8:	2204      	movs	r2, #4
 80135aa:	701a      	strb	r2, [r3, #0]
 80135ac:	e034      	b.n	8013618 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80135ae:	4920      	ldr	r1, [pc, #128]	; (8013630 <etharp_tmr+0x14c>)
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	4613      	mov	r3, r2
 80135b4:	005b      	lsls	r3, r3, #1
 80135b6:	4413      	add	r3, r2
 80135b8:	00db      	lsls	r3, r3, #3
 80135ba:	440b      	add	r3, r1
 80135bc:	3314      	adds	r3, #20
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b04      	cmp	r3, #4
 80135c2:	d10a      	bne.n	80135da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80135c4:	491a      	ldr	r1, [pc, #104]	; (8013630 <etharp_tmr+0x14c>)
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	4613      	mov	r3, r2
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	4413      	add	r3, r2
 80135ce:	00db      	lsls	r3, r3, #3
 80135d0:	440b      	add	r3, r1
 80135d2:	3314      	adds	r3, #20
 80135d4:	2202      	movs	r2, #2
 80135d6:	701a      	strb	r2, [r3, #0]
 80135d8:	e01e      	b.n	8013618 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135da:	4915      	ldr	r1, [pc, #84]	; (8013630 <etharp_tmr+0x14c>)
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	4613      	mov	r3, r2
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	4413      	add	r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	440b      	add	r3, r1
 80135e8:	3314      	adds	r3, #20
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d113      	bne.n	8013618 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80135f0:	490f      	ldr	r1, [pc, #60]	; (8013630 <etharp_tmr+0x14c>)
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	4613      	mov	r3, r2
 80135f6:	005b      	lsls	r3, r3, #1
 80135f8:	4413      	add	r3, r2
 80135fa:	00db      	lsls	r3, r3, #3
 80135fc:	440b      	add	r3, r1
 80135fe:	3308      	adds	r3, #8
 8013600:	6818      	ldr	r0, [r3, #0]
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	4613      	mov	r3, r2
 8013606:	005b      	lsls	r3, r3, #1
 8013608:	4413      	add	r3, r2
 801360a:	00db      	lsls	r3, r3, #3
 801360c:	4a08      	ldr	r2, [pc, #32]	; (8013630 <etharp_tmr+0x14c>)
 801360e:	4413      	add	r3, r2
 8013610:	3304      	adds	r3, #4
 8013612:	4619      	mov	r1, r3
 8013614:	f000 fe6e 	bl	80142f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	3301      	adds	r3, #1
 801361c:	607b      	str	r3, [r7, #4]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2b09      	cmp	r3, #9
 8013622:	f77f af65 	ble.w	80134f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8013626:	bf00      	nop
 8013628:	bf00      	nop
 801362a:	3708      	adds	r7, #8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	20008cdc 	.word	0x20008cdc

08013634 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b08a      	sub	sp, #40	; 0x28
 8013638:	af00      	add	r7, sp, #0
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	460b      	mov	r3, r1
 801363e:	607a      	str	r2, [r7, #4]
 8013640:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013642:	230a      	movs	r3, #10
 8013644:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013646:	230a      	movs	r3, #10
 8013648:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801364a:	230a      	movs	r3, #10
 801364c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013652:	230a      	movs	r3, #10
 8013654:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013656:	2300      	movs	r3, #0
 8013658:	83bb      	strh	r3, [r7, #28]
 801365a:	2300      	movs	r3, #0
 801365c:	837b      	strh	r3, [r7, #26]
 801365e:	2300      	movs	r3, #0
 8013660:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013662:	2300      	movs	r3, #0
 8013664:	843b      	strh	r3, [r7, #32]
 8013666:	e0ae      	b.n	80137c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013668:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801366c:	49a6      	ldr	r1, [pc, #664]	; (8013908 <etharp_find_entry+0x2d4>)
 801366e:	4613      	mov	r3, r2
 8013670:	005b      	lsls	r3, r3, #1
 8013672:	4413      	add	r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	440b      	add	r3, r1
 8013678:	3314      	adds	r3, #20
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801367e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013682:	2b0a      	cmp	r3, #10
 8013684:	d105      	bne.n	8013692 <etharp_find_entry+0x5e>
 8013686:	7dfb      	ldrb	r3, [r7, #23]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d102      	bne.n	8013692 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801368c:	8c3b      	ldrh	r3, [r7, #32]
 801368e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013690:	e095      	b.n	80137be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013692:	7dfb      	ldrb	r3, [r7, #23]
 8013694:	2b00      	cmp	r3, #0
 8013696:	f000 8092 	beq.w	80137be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801369a:	7dfb      	ldrb	r3, [r7, #23]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d009      	beq.n	80136b4 <etharp_find_entry+0x80>
 80136a0:	7dfb      	ldrb	r3, [r7, #23]
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d806      	bhi.n	80136b4 <etharp_find_entry+0x80>
 80136a6:	4b99      	ldr	r3, [pc, #612]	; (801390c <etharp_find_entry+0x2d8>)
 80136a8:	f240 1223 	movw	r2, #291	; 0x123
 80136ac:	4998      	ldr	r1, [pc, #608]	; (8013910 <etharp_find_entry+0x2dc>)
 80136ae:	4899      	ldr	r0, [pc, #612]	; (8013914 <etharp_find_entry+0x2e0>)
 80136b0:	f003 f9f8 	bl	8016aa4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d020      	beq.n	80136fc <etharp_find_entry+0xc8>
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	6819      	ldr	r1, [r3, #0]
 80136be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136c2:	4891      	ldr	r0, [pc, #580]	; (8013908 <etharp_find_entry+0x2d4>)
 80136c4:	4613      	mov	r3, r2
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	4413      	add	r3, r2
 80136ca:	00db      	lsls	r3, r3, #3
 80136cc:	4403      	add	r3, r0
 80136ce:	3304      	adds	r3, #4
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	4299      	cmp	r1, r3
 80136d4:	d112      	bne.n	80136fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00c      	beq.n	80136f6 <etharp_find_entry+0xc2>
 80136dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136e0:	4989      	ldr	r1, [pc, #548]	; (8013908 <etharp_find_entry+0x2d4>)
 80136e2:	4613      	mov	r3, r2
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	4413      	add	r3, r2
 80136e8:	00db      	lsls	r3, r3, #3
 80136ea:	440b      	add	r3, r1
 80136ec:	3308      	adds	r3, #8
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d102      	bne.n	80136fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80136f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136fa:	e100      	b.n	80138fe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80136fc:	7dfb      	ldrb	r3, [r7, #23]
 80136fe:	2b01      	cmp	r3, #1
 8013700:	d140      	bne.n	8013784 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013706:	4980      	ldr	r1, [pc, #512]	; (8013908 <etharp_find_entry+0x2d4>)
 8013708:	4613      	mov	r3, r2
 801370a:	005b      	lsls	r3, r3, #1
 801370c:	4413      	add	r3, r2
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	440b      	add	r3, r1
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d01a      	beq.n	801374e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013718:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801371c:	497a      	ldr	r1, [pc, #488]	; (8013908 <etharp_find_entry+0x2d4>)
 801371e:	4613      	mov	r3, r2
 8013720:	005b      	lsls	r3, r3, #1
 8013722:	4413      	add	r3, r2
 8013724:	00db      	lsls	r3, r3, #3
 8013726:	440b      	add	r3, r1
 8013728:	3312      	adds	r3, #18
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	8bba      	ldrh	r2, [r7, #28]
 801372e:	429a      	cmp	r2, r3
 8013730:	d845      	bhi.n	80137be <etharp_find_entry+0x18a>
            old_queue = i;
 8013732:	8c3b      	ldrh	r3, [r7, #32]
 8013734:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801373a:	4973      	ldr	r1, [pc, #460]	; (8013908 <etharp_find_entry+0x2d4>)
 801373c:	4613      	mov	r3, r2
 801373e:	005b      	lsls	r3, r3, #1
 8013740:	4413      	add	r3, r2
 8013742:	00db      	lsls	r3, r3, #3
 8013744:	440b      	add	r3, r1
 8013746:	3312      	adds	r3, #18
 8013748:	881b      	ldrh	r3, [r3, #0]
 801374a:	83bb      	strh	r3, [r7, #28]
 801374c:	e037      	b.n	80137be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801374e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013752:	496d      	ldr	r1, [pc, #436]	; (8013908 <etharp_find_entry+0x2d4>)
 8013754:	4613      	mov	r3, r2
 8013756:	005b      	lsls	r3, r3, #1
 8013758:	4413      	add	r3, r2
 801375a:	00db      	lsls	r3, r3, #3
 801375c:	440b      	add	r3, r1
 801375e:	3312      	adds	r3, #18
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	8b7a      	ldrh	r2, [r7, #26]
 8013764:	429a      	cmp	r2, r3
 8013766:	d82a      	bhi.n	80137be <etharp_find_entry+0x18a>
            old_pending = i;
 8013768:	8c3b      	ldrh	r3, [r7, #32]
 801376a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801376c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013770:	4965      	ldr	r1, [pc, #404]	; (8013908 <etharp_find_entry+0x2d4>)
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	3312      	adds	r3, #18
 801377e:	881b      	ldrh	r3, [r3, #0]
 8013780:	837b      	strh	r3, [r7, #26]
 8013782:	e01c      	b.n	80137be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013784:	7dfb      	ldrb	r3, [r7, #23]
 8013786:	2b01      	cmp	r3, #1
 8013788:	d919      	bls.n	80137be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801378a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801378e:	495e      	ldr	r1, [pc, #376]	; (8013908 <etharp_find_entry+0x2d4>)
 8013790:	4613      	mov	r3, r2
 8013792:	005b      	lsls	r3, r3, #1
 8013794:	4413      	add	r3, r2
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	440b      	add	r3, r1
 801379a:	3312      	adds	r3, #18
 801379c:	881b      	ldrh	r3, [r3, #0]
 801379e:	8b3a      	ldrh	r2, [r7, #24]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d80c      	bhi.n	80137be <etharp_find_entry+0x18a>
            old_stable = i;
 80137a4:	8c3b      	ldrh	r3, [r7, #32]
 80137a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80137a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137ac:	4956      	ldr	r1, [pc, #344]	; (8013908 <etharp_find_entry+0x2d4>)
 80137ae:	4613      	mov	r3, r2
 80137b0:	005b      	lsls	r3, r3, #1
 80137b2:	4413      	add	r3, r2
 80137b4:	00db      	lsls	r3, r3, #3
 80137b6:	440b      	add	r3, r1
 80137b8:	3312      	adds	r3, #18
 80137ba:	881b      	ldrh	r3, [r3, #0]
 80137bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137be:	8c3b      	ldrh	r3, [r7, #32]
 80137c0:	3301      	adds	r3, #1
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	843b      	strh	r3, [r7, #32]
 80137c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137ca:	2b09      	cmp	r3, #9
 80137cc:	f77f af4c 	ble.w	8013668 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80137d0:	7afb      	ldrb	r3, [r7, #11]
 80137d2:	f003 0302 	and.w	r3, r3, #2
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d108      	bne.n	80137ec <etharp_find_entry+0x1b8>
 80137da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137de:	2b0a      	cmp	r3, #10
 80137e0:	d107      	bne.n	80137f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80137e2:	7afb      	ldrb	r3, [r7, #11]
 80137e4:	f003 0301 	and.w	r3, r3, #1
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d102      	bne.n	80137f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80137ec:	f04f 33ff 	mov.w	r3, #4294967295
 80137f0:	e085      	b.n	80138fe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80137f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137f6:	2b09      	cmp	r3, #9
 80137f8:	dc02      	bgt.n	8013800 <etharp_find_entry+0x1cc>
    i = empty;
 80137fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137fc:	843b      	strh	r3, [r7, #32]
 80137fe:	e039      	b.n	8013874 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013800:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013804:	2b09      	cmp	r3, #9
 8013806:	dc14      	bgt.n	8013832 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801380a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801380c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013810:	493d      	ldr	r1, [pc, #244]	; (8013908 <etharp_find_entry+0x2d4>)
 8013812:	4613      	mov	r3, r2
 8013814:	005b      	lsls	r3, r3, #1
 8013816:	4413      	add	r3, r2
 8013818:	00db      	lsls	r3, r3, #3
 801381a:	440b      	add	r3, r1
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d018      	beq.n	8013854 <etharp_find_entry+0x220>
 8013822:	4b3a      	ldr	r3, [pc, #232]	; (801390c <etharp_find_entry+0x2d8>)
 8013824:	f240 126d 	movw	r2, #365	; 0x16d
 8013828:	493b      	ldr	r1, [pc, #236]	; (8013918 <etharp_find_entry+0x2e4>)
 801382a:	483a      	ldr	r0, [pc, #232]	; (8013914 <etharp_find_entry+0x2e0>)
 801382c:	f003 f93a 	bl	8016aa4 <iprintf>
 8013830:	e010      	b.n	8013854 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013832:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013836:	2b09      	cmp	r3, #9
 8013838:	dc02      	bgt.n	8013840 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801383a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801383c:	843b      	strh	r3, [r7, #32]
 801383e:	e009      	b.n	8013854 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013840:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013844:	2b09      	cmp	r3, #9
 8013846:	dc02      	bgt.n	801384e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013848:	8bfb      	ldrh	r3, [r7, #30]
 801384a:	843b      	strh	r3, [r7, #32]
 801384c:	e002      	b.n	8013854 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801384e:	f04f 33ff 	mov.w	r3, #4294967295
 8013852:	e054      	b.n	80138fe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013854:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013858:	2b09      	cmp	r3, #9
 801385a:	dd06      	ble.n	801386a <etharp_find_entry+0x236>
 801385c:	4b2b      	ldr	r3, [pc, #172]	; (801390c <etharp_find_entry+0x2d8>)
 801385e:	f240 127f 	movw	r2, #383	; 0x17f
 8013862:	492e      	ldr	r1, [pc, #184]	; (801391c <etharp_find_entry+0x2e8>)
 8013864:	482b      	ldr	r0, [pc, #172]	; (8013914 <etharp_find_entry+0x2e0>)
 8013866:	f003 f91d 	bl	8016aa4 <iprintf>
    etharp_free_entry(i);
 801386a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801386e:	4618      	mov	r0, r3
 8013870:	f7ff fe06 	bl	8013480 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013874:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013878:	2b09      	cmp	r3, #9
 801387a:	dd06      	ble.n	801388a <etharp_find_entry+0x256>
 801387c:	4b23      	ldr	r3, [pc, #140]	; (801390c <etharp_find_entry+0x2d8>)
 801387e:	f240 1283 	movw	r2, #387	; 0x183
 8013882:	4926      	ldr	r1, [pc, #152]	; (801391c <etharp_find_entry+0x2e8>)
 8013884:	4823      	ldr	r0, [pc, #140]	; (8013914 <etharp_find_entry+0x2e0>)
 8013886:	f003 f90d 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801388a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801388e:	491e      	ldr	r1, [pc, #120]	; (8013908 <etharp_find_entry+0x2d4>)
 8013890:	4613      	mov	r3, r2
 8013892:	005b      	lsls	r3, r3, #1
 8013894:	4413      	add	r3, r2
 8013896:	00db      	lsls	r3, r3, #3
 8013898:	440b      	add	r3, r1
 801389a:	3314      	adds	r3, #20
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d006      	beq.n	80138b0 <etharp_find_entry+0x27c>
 80138a2:	4b1a      	ldr	r3, [pc, #104]	; (801390c <etharp_find_entry+0x2d8>)
 80138a4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80138a8:	491d      	ldr	r1, [pc, #116]	; (8013920 <etharp_find_entry+0x2ec>)
 80138aa:	481a      	ldr	r0, [pc, #104]	; (8013914 <etharp_find_entry+0x2e0>)
 80138ac:	f003 f8fa 	bl	8016aa4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00b      	beq.n	80138ce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80138b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6819      	ldr	r1, [r3, #0]
 80138be:	4812      	ldr	r0, [pc, #72]	; (8013908 <etharp_find_entry+0x2d4>)
 80138c0:	4613      	mov	r3, r2
 80138c2:	005b      	lsls	r3, r3, #1
 80138c4:	4413      	add	r3, r2
 80138c6:	00db      	lsls	r3, r3, #3
 80138c8:	4403      	add	r3, r0
 80138ca:	3304      	adds	r3, #4
 80138cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80138ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138d2:	490d      	ldr	r1, [pc, #52]	; (8013908 <etharp_find_entry+0x2d4>)
 80138d4:	4613      	mov	r3, r2
 80138d6:	005b      	lsls	r3, r3, #1
 80138d8:	4413      	add	r3, r2
 80138da:	00db      	lsls	r3, r3, #3
 80138dc:	440b      	add	r3, r1
 80138de:	3312      	adds	r3, #18
 80138e0:	2200      	movs	r2, #0
 80138e2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80138e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138e8:	4907      	ldr	r1, [pc, #28]	; (8013908 <etharp_find_entry+0x2d4>)
 80138ea:	4613      	mov	r3, r2
 80138ec:	005b      	lsls	r3, r3, #1
 80138ee:	4413      	add	r3, r2
 80138f0:	00db      	lsls	r3, r3, #3
 80138f2:	440b      	add	r3, r1
 80138f4:	3308      	adds	r3, #8
 80138f6:	687a      	ldr	r2, [r7, #4]
 80138f8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80138fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3728      	adds	r7, #40	; 0x28
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	20008cdc 	.word	0x20008cdc
 801390c:	08019f64 	.word	0x08019f64
 8013910:	08019f9c 	.word	0x08019f9c
 8013914:	08019fdc 	.word	0x08019fdc
 8013918:	0801a004 	.word	0x0801a004
 801391c:	0801a01c 	.word	0x0801a01c
 8013920:	0801a030 	.word	0x0801a030

08013924 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b088      	sub	sp, #32
 8013928:	af02      	add	r7, sp, #8
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
 8013930:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013938:	2b06      	cmp	r3, #6
 801393a:	d006      	beq.n	801394a <etharp_update_arp_entry+0x26>
 801393c:	4b48      	ldr	r3, [pc, #288]	; (8013a60 <etharp_update_arp_entry+0x13c>)
 801393e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013942:	4948      	ldr	r1, [pc, #288]	; (8013a64 <etharp_update_arp_entry+0x140>)
 8013944:	4848      	ldr	r0, [pc, #288]	; (8013a68 <etharp_update_arp_entry+0x144>)
 8013946:	f003 f8ad 	bl	8016aa4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d012      	beq.n	8013976 <etharp_update_arp_entry+0x52>
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d00e      	beq.n	8013976 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	68f9      	ldr	r1, [r7, #12]
 801395e:	4618      	mov	r0, r3
 8013960:	f001 f8fe 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8013964:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013966:	2b00      	cmp	r3, #0
 8013968:	d105      	bne.n	8013976 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013972:	2be0      	cmp	r3, #224	; 0xe0
 8013974:	d102      	bne.n	801397c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013976:	f06f 030f 	mvn.w	r3, #15
 801397a:	e06c      	b.n	8013a56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801397c:	78fb      	ldrb	r3, [r7, #3]
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	4619      	mov	r1, r3
 8013982:	68b8      	ldr	r0, [r7, #8]
 8013984:	f7ff fe56 	bl	8013634 <etharp_find_entry>
 8013988:	4603      	mov	r3, r0
 801398a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801398c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013990:	2b00      	cmp	r3, #0
 8013992:	da02      	bge.n	801399a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013994:	8afb      	ldrh	r3, [r7, #22]
 8013996:	b25b      	sxtb	r3, r3
 8013998:	e05d      	b.n	8013a56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801399a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801399e:	4933      	ldr	r1, [pc, #204]	; (8013a6c <etharp_update_arp_entry+0x148>)
 80139a0:	4613      	mov	r3, r2
 80139a2:	005b      	lsls	r3, r3, #1
 80139a4:	4413      	add	r3, r2
 80139a6:	00db      	lsls	r3, r3, #3
 80139a8:	440b      	add	r3, r1
 80139aa:	3314      	adds	r3, #20
 80139ac:	2202      	movs	r2, #2
 80139ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80139b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139b4:	492d      	ldr	r1, [pc, #180]	; (8013a6c <etharp_update_arp_entry+0x148>)
 80139b6:	4613      	mov	r3, r2
 80139b8:	005b      	lsls	r3, r3, #1
 80139ba:	4413      	add	r3, r2
 80139bc:	00db      	lsls	r3, r3, #3
 80139be:	440b      	add	r3, r1
 80139c0:	3308      	adds	r3, #8
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80139c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139ca:	4613      	mov	r3, r2
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	4413      	add	r3, r2
 80139d0:	00db      	lsls	r3, r3, #3
 80139d2:	3308      	adds	r3, #8
 80139d4:	4a25      	ldr	r2, [pc, #148]	; (8013a6c <etharp_update_arp_entry+0x148>)
 80139d6:	4413      	add	r3, r2
 80139d8:	3304      	adds	r3, #4
 80139da:	2206      	movs	r2, #6
 80139dc:	6879      	ldr	r1, [r7, #4]
 80139de:	4618      	mov	r0, r3
 80139e0:	f003 f84a 	bl	8016a78 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80139e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139e8:	4920      	ldr	r1, [pc, #128]	; (8013a6c <etharp_update_arp_entry+0x148>)
 80139ea:	4613      	mov	r3, r2
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	4413      	add	r3, r2
 80139f0:	00db      	lsls	r3, r3, #3
 80139f2:	440b      	add	r3, r1
 80139f4:	3312      	adds	r3, #18
 80139f6:	2200      	movs	r2, #0
 80139f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80139fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139fe:	491b      	ldr	r1, [pc, #108]	; (8013a6c <etharp_update_arp_entry+0x148>)
 8013a00:	4613      	mov	r3, r2
 8013a02:	005b      	lsls	r3, r3, #1
 8013a04:	4413      	add	r3, r2
 8013a06:	00db      	lsls	r3, r3, #3
 8013a08:	440b      	add	r3, r1
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d021      	beq.n	8013a54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013a10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a14:	4915      	ldr	r1, [pc, #84]	; (8013a6c <etharp_update_arp_entry+0x148>)
 8013a16:	4613      	mov	r3, r2
 8013a18:	005b      	lsls	r3, r3, #1
 8013a1a:	4413      	add	r3, r2
 8013a1c:	00db      	lsls	r3, r3, #3
 8013a1e:	440b      	add	r3, r1
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013a24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a28:	4910      	ldr	r1, [pc, #64]	; (8013a6c <etharp_update_arp_entry+0x148>)
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	4413      	add	r3, r2
 8013a30:	00db      	lsls	r3, r3, #3
 8013a32:	440b      	add	r3, r1
 8013a34:	2200      	movs	r2, #0
 8013a36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013a3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a42:	9300      	str	r3, [sp, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6939      	ldr	r1, [r7, #16]
 8013a48:	68f8      	ldr	r0, [r7, #12]
 8013a4a:	f002 f827 	bl	8015a9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013a4e:	6938      	ldr	r0, [r7, #16]
 8013a50:	f7f9 f9cc 	bl	800cdec <pbuf_free>
  }
  return ERR_OK;
 8013a54:	2300      	movs	r3, #0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3718      	adds	r7, #24
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	08019f64 	.word	0x08019f64
 8013a64:	0801a05c 	.word	0x0801a05c
 8013a68:	08019fdc 	.word	0x08019fdc
 8013a6c:	20008cdc 	.word	0x20008cdc

08013a70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a78:	2300      	movs	r3, #0
 8013a7a:	60fb      	str	r3, [r7, #12]
 8013a7c:	e01e      	b.n	8013abc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013a7e:	4913      	ldr	r1, [pc, #76]	; (8013acc <etharp_cleanup_netif+0x5c>)
 8013a80:	68fa      	ldr	r2, [r7, #12]
 8013a82:	4613      	mov	r3, r2
 8013a84:	005b      	lsls	r3, r3, #1
 8013a86:	4413      	add	r3, r2
 8013a88:	00db      	lsls	r3, r3, #3
 8013a8a:	440b      	add	r3, r1
 8013a8c:	3314      	adds	r3, #20
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013a92:	7afb      	ldrb	r3, [r7, #11]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00e      	beq.n	8013ab6 <etharp_cleanup_netif+0x46>
 8013a98:	490c      	ldr	r1, [pc, #48]	; (8013acc <etharp_cleanup_netif+0x5c>)
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	4413      	add	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	440b      	add	r3, r1
 8013aa6:	3308      	adds	r3, #8
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d102      	bne.n	8013ab6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	f7ff fce5 	bl	8013480 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	60fb      	str	r3, [r7, #12]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2b09      	cmp	r3, #9
 8013ac0:	dddd      	ble.n	8013a7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013ac2:	bf00      	nop
 8013ac4:	bf00      	nop
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	20008cdc 	.word	0x20008cdc

08013ad0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013ad0:	b5b0      	push	{r4, r5, r7, lr}
 8013ad2:	b08a      	sub	sp, #40	; 0x28
 8013ad4:	af04      	add	r7, sp, #16
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d107      	bne.n	8013af0 <etharp_input+0x20>
 8013ae0:	4b3d      	ldr	r3, [pc, #244]	; (8013bd8 <etharp_input+0x108>)
 8013ae2:	f240 228a 	movw	r2, #650	; 0x28a
 8013ae6:	493d      	ldr	r1, [pc, #244]	; (8013bdc <etharp_input+0x10c>)
 8013ae8:	483d      	ldr	r0, [pc, #244]	; (8013be0 <etharp_input+0x110>)
 8013aea:	f002 ffdb 	bl	8016aa4 <iprintf>
 8013aee:	e06f      	b.n	8013bd0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b00:	d10c      	bne.n	8013b1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b06:	2b06      	cmp	r3, #6
 8013b08:	d108      	bne.n	8013b1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b0e:	2b04      	cmp	r3, #4
 8013b10:	d104      	bne.n	8013b1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	885b      	ldrh	r3, [r3, #2]
 8013b16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b18:	2b08      	cmp	r3, #8
 8013b1a:	d003      	beq.n	8013b24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f7f9 f965 	bl	800cdec <pbuf_free>
    return;
 8013b22:	e055      	b.n	8013bd0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	330e      	adds	r3, #14
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	3318      	adds	r3, #24
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	3304      	adds	r3, #4
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d102      	bne.n	8013b44 <etharp_input+0x74>
    for_us = 0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	75fb      	strb	r3, [r7, #23]
 8013b42:	e009      	b.n	8013b58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	3304      	adds	r3, #4
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	bf0c      	ite	eq
 8013b50:	2301      	moveq	r3, #1
 8013b52:	2300      	movne	r3, #0
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	f103 0208 	add.w	r2, r3, #8
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d001      	beq.n	8013b68 <etharp_input+0x98>
 8013b64:	2301      	movs	r3, #1
 8013b66:	e000      	b.n	8013b6a <etharp_input+0x9a>
 8013b68:	2302      	movs	r3, #2
 8013b6a:	f107 010c 	add.w	r1, r7, #12
 8013b6e:	6838      	ldr	r0, [r7, #0]
 8013b70:	f7ff fed8 	bl	8013924 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013b74:	693b      	ldr	r3, [r7, #16]
 8013b76:	88db      	ldrh	r3, [r3, #6]
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b7e:	d003      	beq.n	8013b88 <etharp_input+0xb8>
 8013b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b84:	d01e      	beq.n	8013bc4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013b86:	e020      	b.n	8013bca <etharp_input+0xfa>
      if (for_us) {
 8013b88:	7dfb      	ldrb	r3, [r7, #23]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d01c      	beq.n	8013bc8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013ba4:	693a      	ldr	r2, [r7, #16]
 8013ba6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013ba8:	2102      	movs	r1, #2
 8013baa:	9103      	str	r1, [sp, #12]
 8013bac:	f107 010c 	add.w	r1, r7, #12
 8013bb0:	9102      	str	r1, [sp, #8]
 8013bb2:	9201      	str	r2, [sp, #4]
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	4622      	mov	r2, r4
 8013bba:	4601      	mov	r1, r0
 8013bbc:	6838      	ldr	r0, [r7, #0]
 8013bbe:	f000 faeb 	bl	8014198 <etharp_raw>
      break;
 8013bc2:	e001      	b.n	8013bc8 <etharp_input+0xf8>
      break;
 8013bc4:	bf00      	nop
 8013bc6:	e000      	b.n	8013bca <etharp_input+0xfa>
      break;
 8013bc8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7f9 f90e 	bl	800cdec <pbuf_free>
}
 8013bd0:	3718      	adds	r7, #24
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	08019f64 	.word	0x08019f64
 8013bdc:	0801a0b4 	.word	0x0801a0b4
 8013be0:	08019fdc 	.word	0x08019fdc

08013be4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af02      	add	r7, sp, #8
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013bf2:	79fa      	ldrb	r2, [r7, #7]
 8013bf4:	4944      	ldr	r1, [pc, #272]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013bf6:	4613      	mov	r3, r2
 8013bf8:	005b      	lsls	r3, r3, #1
 8013bfa:	4413      	add	r3, r2
 8013bfc:	00db      	lsls	r3, r3, #3
 8013bfe:	440b      	add	r3, r1
 8013c00:	3314      	adds	r3, #20
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d806      	bhi.n	8013c16 <etharp_output_to_arp_index+0x32>
 8013c08:	4b40      	ldr	r3, [pc, #256]	; (8013d0c <etharp_output_to_arp_index+0x128>)
 8013c0a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013c0e:	4940      	ldr	r1, [pc, #256]	; (8013d10 <etharp_output_to_arp_index+0x12c>)
 8013c10:	4840      	ldr	r0, [pc, #256]	; (8013d14 <etharp_output_to_arp_index+0x130>)
 8013c12:	f002 ff47 	bl	8016aa4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013c16:	79fa      	ldrb	r2, [r7, #7]
 8013c18:	493b      	ldr	r1, [pc, #236]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	005b      	lsls	r3, r3, #1
 8013c1e:	4413      	add	r3, r2
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	440b      	add	r3, r1
 8013c24:	3314      	adds	r3, #20
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d153      	bne.n	8013cd4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013c2c:	79fa      	ldrb	r2, [r7, #7]
 8013c2e:	4936      	ldr	r1, [pc, #216]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c30:	4613      	mov	r3, r2
 8013c32:	005b      	lsls	r3, r3, #1
 8013c34:	4413      	add	r3, r2
 8013c36:	00db      	lsls	r3, r3, #3
 8013c38:	440b      	add	r3, r1
 8013c3a:	3312      	adds	r3, #18
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013c42:	d919      	bls.n	8013c78 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013c44:	79fa      	ldrb	r2, [r7, #7]
 8013c46:	4613      	mov	r3, r2
 8013c48:	005b      	lsls	r3, r3, #1
 8013c4a:	4413      	add	r3, r2
 8013c4c:	00db      	lsls	r3, r3, #3
 8013c4e:	4a2e      	ldr	r2, [pc, #184]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c50:	4413      	add	r3, r2
 8013c52:	3304      	adds	r3, #4
 8013c54:	4619      	mov	r1, r3
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f000 fb4c 	bl	80142f4 <etharp_request>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d138      	bne.n	8013cd4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013c62:	79fa      	ldrb	r2, [r7, #7]
 8013c64:	4928      	ldr	r1, [pc, #160]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c66:	4613      	mov	r3, r2
 8013c68:	005b      	lsls	r3, r3, #1
 8013c6a:	4413      	add	r3, r2
 8013c6c:	00db      	lsls	r3, r3, #3
 8013c6e:	440b      	add	r3, r1
 8013c70:	3314      	adds	r3, #20
 8013c72:	2203      	movs	r2, #3
 8013c74:	701a      	strb	r2, [r3, #0]
 8013c76:	e02d      	b.n	8013cd4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013c78:	79fa      	ldrb	r2, [r7, #7]
 8013c7a:	4923      	ldr	r1, [pc, #140]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	005b      	lsls	r3, r3, #1
 8013c80:	4413      	add	r3, r2
 8013c82:	00db      	lsls	r3, r3, #3
 8013c84:	440b      	add	r3, r1
 8013c86:	3312      	adds	r3, #18
 8013c88:	881b      	ldrh	r3, [r3, #0]
 8013c8a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013c8e:	d321      	bcc.n	8013cd4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013c90:	79fa      	ldrb	r2, [r7, #7]
 8013c92:	4613      	mov	r3, r2
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	4413      	add	r3, r2
 8013c98:	00db      	lsls	r3, r3, #3
 8013c9a:	4a1b      	ldr	r2, [pc, #108]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013c9c:	4413      	add	r3, r2
 8013c9e:	1d19      	adds	r1, r3, #4
 8013ca0:	79fa      	ldrb	r2, [r7, #7]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	005b      	lsls	r3, r3, #1
 8013ca6:	4413      	add	r3, r2
 8013ca8:	00db      	lsls	r3, r3, #3
 8013caa:	3308      	adds	r3, #8
 8013cac:	4a16      	ldr	r2, [pc, #88]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013cae:	4413      	add	r3, r2
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	68f8      	ldr	r0, [r7, #12]
 8013cb6:	f000 fafb 	bl	80142b0 <etharp_request_dst>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d109      	bne.n	8013cd4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013cc0:	79fa      	ldrb	r2, [r7, #7]
 8013cc2:	4911      	ldr	r1, [pc, #68]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	005b      	lsls	r3, r3, #1
 8013cc8:	4413      	add	r3, r2
 8013cca:	00db      	lsls	r3, r3, #3
 8013ccc:	440b      	add	r3, r1
 8013cce:	3314      	adds	r3, #20
 8013cd0:	2203      	movs	r2, #3
 8013cd2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013cda:	79fa      	ldrb	r2, [r7, #7]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	3308      	adds	r3, #8
 8013ce6:	4a08      	ldr	r2, [pc, #32]	; (8013d08 <etharp_output_to_arp_index+0x124>)
 8013ce8:	4413      	add	r3, r2
 8013cea:	3304      	adds	r3, #4
 8013cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013cf0:	9200      	str	r2, [sp, #0]
 8013cf2:	460a      	mov	r2, r1
 8013cf4:	68b9      	ldr	r1, [r7, #8]
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f001 fed0 	bl	8015a9c <ethernet_output>
 8013cfc:	4603      	mov	r3, r0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3710      	adds	r7, #16
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	20008cdc 	.word	0x20008cdc
 8013d0c:	08019f64 	.word	0x08019f64
 8013d10:	0801a0d4 	.word	0x0801a0d4
 8013d14:	08019fdc 	.word	0x08019fdc

08013d18 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b08a      	sub	sp, #40	; 0x28
 8013d1c:	af02      	add	r7, sp, #8
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <etharp_output+0x24>
 8013d2e:	4b73      	ldr	r3, [pc, #460]	; (8013efc <etharp_output+0x1e4>)
 8013d30:	f240 321e 	movw	r2, #798	; 0x31e
 8013d34:	4972      	ldr	r1, [pc, #456]	; (8013f00 <etharp_output+0x1e8>)
 8013d36:	4873      	ldr	r0, [pc, #460]	; (8013f04 <etharp_output+0x1ec>)
 8013d38:	f002 feb4 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <etharp_output+0x38>
 8013d42:	4b6e      	ldr	r3, [pc, #440]	; (8013efc <etharp_output+0x1e4>)
 8013d44:	f240 321f 	movw	r2, #799	; 0x31f
 8013d48:	496f      	ldr	r1, [pc, #444]	; (8013f08 <etharp_output+0x1f0>)
 8013d4a:	486e      	ldr	r0, [pc, #440]	; (8013f04 <etharp_output+0x1ec>)
 8013d4c:	f002 feaa 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d106      	bne.n	8013d64 <etharp_output+0x4c>
 8013d56:	4b69      	ldr	r3, [pc, #420]	; (8013efc <etharp_output+0x1e4>)
 8013d58:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013d5c:	496b      	ldr	r1, [pc, #428]	; (8013f0c <etharp_output+0x1f4>)
 8013d5e:	4869      	ldr	r0, [pc, #420]	; (8013f04 <etharp_output+0x1ec>)
 8013d60:	f002 fea0 	bl	8016aa4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	68f9      	ldr	r1, [r7, #12]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 fef8 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8013d70:	4603      	mov	r3, r0
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d002      	beq.n	8013d7c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013d76:	4b66      	ldr	r3, [pc, #408]	; (8013f10 <etharp_output+0x1f8>)
 8013d78:	61fb      	str	r3, [r7, #28]
 8013d7a:	e0af      	b.n	8013edc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d84:	2be0      	cmp	r3, #224	; 0xe0
 8013d86:	d118      	bne.n	8013dba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013d88:	2301      	movs	r3, #1
 8013d8a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013d90:	235e      	movs	r3, #94	; 0x5e
 8013d92:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	3301      	adds	r3, #1
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	3302      	adds	r3, #2
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	3303      	adds	r3, #3
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013db2:	f107 0310 	add.w	r3, r7, #16
 8013db6:	61fb      	str	r3, [r7, #28]
 8013db8:	e090      	b.n	8013edc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	405a      	eors	r2, r3
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	3308      	adds	r3, #8
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4013      	ands	r3, r2
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d012      	beq.n	8013df8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dd8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	d00b      	beq.n	8013df8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	330c      	adds	r3, #12
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d003      	beq.n	8013df2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	330c      	adds	r3, #12
 8013dee:	61bb      	str	r3, [r7, #24]
 8013df0:	e002      	b.n	8013df8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013df2:	f06f 0303 	mvn.w	r3, #3
 8013df6:	e07d      	b.n	8013ef4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013df8:	4b46      	ldr	r3, [pc, #280]	; (8013f14 <etharp_output+0x1fc>)
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	4a46      	ldr	r2, [pc, #280]	; (8013f18 <etharp_output+0x200>)
 8013e00:	460b      	mov	r3, r1
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	440b      	add	r3, r1
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	4413      	add	r3, r2
 8013e0a:	3314      	adds	r3, #20
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d925      	bls.n	8013e5e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e12:	4b40      	ldr	r3, [pc, #256]	; (8013f14 <etharp_output+0x1fc>)
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	4619      	mov	r1, r3
 8013e18:	4a3f      	ldr	r2, [pc, #252]	; (8013f18 <etharp_output+0x200>)
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	005b      	lsls	r3, r3, #1
 8013e1e:	440b      	add	r3, r1
 8013e20:	00db      	lsls	r3, r3, #3
 8013e22:	4413      	add	r3, r2
 8013e24:	3308      	adds	r3, #8
 8013e26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d117      	bne.n	8013e5e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	4b38      	ldr	r3, [pc, #224]	; (8013f14 <etharp_output+0x1fc>)
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	4618      	mov	r0, r3
 8013e38:	4937      	ldr	r1, [pc, #220]	; (8013f18 <etharp_output+0x200>)
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4403      	add	r3, r0
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	440b      	add	r3, r1
 8013e44:	3304      	adds	r3, #4
 8013e46:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d108      	bne.n	8013e5e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013e4c:	4b31      	ldr	r3, [pc, #196]	; (8013f14 <etharp_output+0x1fc>)
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	461a      	mov	r2, r3
 8013e52:	68b9      	ldr	r1, [r7, #8]
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7ff fec5 	bl	8013be4 <etharp_output_to_arp_index>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	e04a      	b.n	8013ef4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013e5e:	2300      	movs	r3, #0
 8013e60:	75fb      	strb	r3, [r7, #23]
 8013e62:	e031      	b.n	8013ec8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e64:	7dfa      	ldrb	r2, [r7, #23]
 8013e66:	492c      	ldr	r1, [pc, #176]	; (8013f18 <etharp_output+0x200>)
 8013e68:	4613      	mov	r3, r2
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	4413      	add	r3, r2
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	440b      	add	r3, r1
 8013e72:	3314      	adds	r3, #20
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d923      	bls.n	8013ec2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013e7a:	7dfa      	ldrb	r2, [r7, #23]
 8013e7c:	4926      	ldr	r1, [pc, #152]	; (8013f18 <etharp_output+0x200>)
 8013e7e:	4613      	mov	r3, r2
 8013e80:	005b      	lsls	r3, r3, #1
 8013e82:	4413      	add	r3, r2
 8013e84:	00db      	lsls	r3, r3, #3
 8013e86:	440b      	add	r3, r1
 8013e88:	3308      	adds	r3, #8
 8013e8a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e8c:	68fa      	ldr	r2, [r7, #12]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d117      	bne.n	8013ec2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	6819      	ldr	r1, [r3, #0]
 8013e96:	7dfa      	ldrb	r2, [r7, #23]
 8013e98:	481f      	ldr	r0, [pc, #124]	; (8013f18 <etharp_output+0x200>)
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	00db      	lsls	r3, r3, #3
 8013ea2:	4403      	add	r3, r0
 8013ea4:	3304      	adds	r3, #4
 8013ea6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013ea8:	4299      	cmp	r1, r3
 8013eaa:	d10a      	bne.n	8013ec2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013eac:	4a19      	ldr	r2, [pc, #100]	; (8013f14 <etharp_output+0x1fc>)
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013eb2:	7dfb      	ldrb	r3, [r7, #23]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	68b9      	ldr	r1, [r7, #8]
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f7ff fe93 	bl	8013be4 <etharp_output_to_arp_index>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	e018      	b.n	8013ef4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	75fb      	strb	r3, [r7, #23]
 8013ec8:	7dfb      	ldrb	r3, [r7, #23]
 8013eca:	2b09      	cmp	r3, #9
 8013ecc:	d9ca      	bls.n	8013e64 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	69b9      	ldr	r1, [r7, #24]
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f000 f822 	bl	8013f1c <etharp_query>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	e00b      	b.n	8013ef4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	69fb      	ldr	r3, [r7, #28]
 8013eea:	68b9      	ldr	r1, [r7, #8]
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f001 fdd5 	bl	8015a9c <ethernet_output>
 8013ef2:	4603      	mov	r3, r0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3720      	adds	r7, #32
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	08019f64 	.word	0x08019f64
 8013f00:	0801a0b4 	.word	0x0801a0b4
 8013f04:	08019fdc 	.word	0x08019fdc
 8013f08:	0801a104 	.word	0x0801a104
 8013f0c:	0801a0a4 	.word	0x0801a0a4
 8013f10:	0801a90c 	.word	0x0801a90c
 8013f14:	20008dcc 	.word	0x20008dcc
 8013f18:	20008cdc 	.word	0x20008cdc

08013f1c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b08c      	sub	sp, #48	; 0x30
 8013f20:	af02      	add	r7, sp, #8
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	3326      	adds	r3, #38	; 0x26
 8013f2c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013f2e:	23ff      	movs	r3, #255	; 0xff
 8013f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013f34:	2300      	movs	r3, #0
 8013f36:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	68f9      	ldr	r1, [r7, #12]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f000 fe0e 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8013f44:	4603      	mov	r3, r0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d10c      	bne.n	8013f64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f52:	2be0      	cmp	r3, #224	; 0xe0
 8013f54:	d006      	beq.n	8013f64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d003      	beq.n	8013f64 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d102      	bne.n	8013f6a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f64:	f06f 030f 	mvn.w	r3, #15
 8013f68:	e101      	b.n	801416e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	2101      	movs	r1, #1
 8013f6e:	68b8      	ldr	r0, [r7, #8]
 8013f70:	f7ff fb60 	bl	8013634 <etharp_find_entry>
 8013f74:	4603      	mov	r3, r0
 8013f76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	da02      	bge.n	8013f86 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013f80:	8a7b      	ldrh	r3, [r7, #18]
 8013f82:	b25b      	sxtb	r3, r3
 8013f84:	e0f3      	b.n	801416e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013f86:	8a7b      	ldrh	r3, [r7, #18]
 8013f88:	2b7e      	cmp	r3, #126	; 0x7e
 8013f8a:	d906      	bls.n	8013f9a <etharp_query+0x7e>
 8013f8c:	4b7a      	ldr	r3, [pc, #488]	; (8014178 <etharp_query+0x25c>)
 8013f8e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013f92:	497a      	ldr	r1, [pc, #488]	; (801417c <etharp_query+0x260>)
 8013f94:	487a      	ldr	r0, [pc, #488]	; (8014180 <etharp_query+0x264>)
 8013f96:	f002 fd85 	bl	8016aa4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013f9a:	8a7b      	ldrh	r3, [r7, #18]
 8013f9c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013f9e:	7c7a      	ldrb	r2, [r7, #17]
 8013fa0:	4978      	ldr	r1, [pc, #480]	; (8014184 <etharp_query+0x268>)
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	4413      	add	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	440b      	add	r3, r1
 8013fac:	3314      	adds	r3, #20
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d115      	bne.n	8013fe0 <etharp_query+0xc4>
    is_new_entry = 1;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013fb8:	7c7a      	ldrb	r2, [r7, #17]
 8013fba:	4972      	ldr	r1, [pc, #456]	; (8014184 <etharp_query+0x268>)
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3314      	adds	r3, #20
 8013fc8:	2201      	movs	r2, #1
 8013fca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013fcc:	7c7a      	ldrb	r2, [r7, #17]
 8013fce:	496d      	ldr	r1, [pc, #436]	; (8014184 <etharp_query+0x268>)
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	00db      	lsls	r3, r3, #3
 8013fd8:	440b      	add	r3, r1
 8013fda:	3308      	adds	r3, #8
 8013fdc:	68fa      	ldr	r2, [r7, #12]
 8013fde:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013fe0:	7c7a      	ldrb	r2, [r7, #17]
 8013fe2:	4968      	ldr	r1, [pc, #416]	; (8014184 <etharp_query+0x268>)
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4413      	add	r3, r2
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	440b      	add	r3, r1
 8013fee:	3314      	adds	r3, #20
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d011      	beq.n	801401a <etharp_query+0xfe>
 8013ff6:	7c7a      	ldrb	r2, [r7, #17]
 8013ff8:	4962      	ldr	r1, [pc, #392]	; (8014184 <etharp_query+0x268>)
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4413      	add	r3, r2
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	440b      	add	r3, r1
 8014004:	3314      	adds	r3, #20
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	2b01      	cmp	r3, #1
 801400a:	d806      	bhi.n	801401a <etharp_query+0xfe>
 801400c:	4b5a      	ldr	r3, [pc, #360]	; (8014178 <etharp_query+0x25c>)
 801400e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014012:	495d      	ldr	r1, [pc, #372]	; (8014188 <etharp_query+0x26c>)
 8014014:	485a      	ldr	r0, [pc, #360]	; (8014180 <etharp_query+0x264>)
 8014016:	f002 fd45 	bl	8016aa4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801401a:	6a3b      	ldr	r3, [r7, #32]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d102      	bne.n	8014026 <etharp_query+0x10a>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10c      	bne.n	8014040 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014026:	68b9      	ldr	r1, [r7, #8]
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f000 f963 	bl	80142f4 <etharp_request>
 801402e:	4603      	mov	r3, r0
 8014030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d102      	bne.n	8014040 <etharp_query+0x124>
      return result;
 801403a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801403e:	e096      	b.n	801416e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d106      	bne.n	8014054 <etharp_query+0x138>
 8014046:	4b4c      	ldr	r3, [pc, #304]	; (8014178 <etharp_query+0x25c>)
 8014048:	f240 32e1 	movw	r2, #993	; 0x3e1
 801404c:	494f      	ldr	r1, [pc, #316]	; (801418c <etharp_query+0x270>)
 801404e:	484c      	ldr	r0, [pc, #304]	; (8014180 <etharp_query+0x264>)
 8014050:	f002 fd28 	bl	8016aa4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014054:	7c7a      	ldrb	r2, [r7, #17]
 8014056:	494b      	ldr	r1, [pc, #300]	; (8014184 <etharp_query+0x268>)
 8014058:	4613      	mov	r3, r2
 801405a:	005b      	lsls	r3, r3, #1
 801405c:	4413      	add	r3, r2
 801405e:	00db      	lsls	r3, r3, #3
 8014060:	440b      	add	r3, r1
 8014062:	3314      	adds	r3, #20
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	2b01      	cmp	r3, #1
 8014068:	d917      	bls.n	801409a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801406a:	4a49      	ldr	r2, [pc, #292]	; (8014190 <etharp_query+0x274>)
 801406c:	7c7b      	ldrb	r3, [r7, #17]
 801406e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014070:	7c7a      	ldrb	r2, [r7, #17]
 8014072:	4613      	mov	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	4413      	add	r3, r2
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	3308      	adds	r3, #8
 801407c:	4a41      	ldr	r2, [pc, #260]	; (8014184 <etharp_query+0x268>)
 801407e:	4413      	add	r3, r2
 8014080:	3304      	adds	r3, #4
 8014082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014086:	9200      	str	r2, [sp, #0]
 8014088:	697a      	ldr	r2, [r7, #20]
 801408a:	6879      	ldr	r1, [r7, #4]
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f001 fd05 	bl	8015a9c <ethernet_output>
 8014092:	4603      	mov	r3, r0
 8014094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014098:	e067      	b.n	801416a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801409a:	7c7a      	ldrb	r2, [r7, #17]
 801409c:	4939      	ldr	r1, [pc, #228]	; (8014184 <etharp_query+0x268>)
 801409e:	4613      	mov	r3, r2
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	440b      	add	r3, r1
 80140a8:	3314      	adds	r3, #20
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d15c      	bne.n	801416a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80140b0:	2300      	movs	r3, #0
 80140b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140b8:	e01c      	b.n	80140f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	895a      	ldrh	r2, [r3, #10]
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	891b      	ldrh	r3, [r3, #8]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d10a      	bne.n	80140dc <etharp_query+0x1c0>
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d006      	beq.n	80140dc <etharp_query+0x1c0>
 80140ce:	4b2a      	ldr	r3, [pc, #168]	; (8014178 <etharp_query+0x25c>)
 80140d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80140d4:	492f      	ldr	r1, [pc, #188]	; (8014194 <etharp_query+0x278>)
 80140d6:	482a      	ldr	r0, [pc, #168]	; (8014180 <etharp_query+0x264>)
 80140d8:	f002 fce4 	bl	8016aa4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80140dc:	69fb      	ldr	r3, [r7, #28]
 80140de:	7b1b      	ldrb	r3, [r3, #12]
 80140e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <etharp_query+0x1d2>
        copy_needed = 1;
 80140e8:	2301      	movs	r3, #1
 80140ea:	61bb      	str	r3, [r7, #24]
        break;
 80140ec:	e005      	b.n	80140fa <etharp_query+0x1de>
      }
      p = p->next;
 80140ee:	69fb      	ldr	r3, [r7, #28]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1df      	bne.n	80140ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d007      	beq.n	8014110 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014106:	200e      	movs	r0, #14
 8014108:	f7f9 f96e 	bl	800d3e8 <pbuf_clone>
 801410c:	61f8      	str	r0, [r7, #28]
 801410e:	e004      	b.n	801411a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014114:	69f8      	ldr	r0, [r7, #28]
 8014116:	f7f8 ff09 	bl	800cf2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d021      	beq.n	8014164 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014120:	7c7a      	ldrb	r2, [r7, #17]
 8014122:	4918      	ldr	r1, [pc, #96]	; (8014184 <etharp_query+0x268>)
 8014124:	4613      	mov	r3, r2
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	4413      	add	r3, r2
 801412a:	00db      	lsls	r3, r3, #3
 801412c:	440b      	add	r3, r1
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d00a      	beq.n	801414a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014134:	7c7a      	ldrb	r2, [r7, #17]
 8014136:	4913      	ldr	r1, [pc, #76]	; (8014184 <etharp_query+0x268>)
 8014138:	4613      	mov	r3, r2
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	4413      	add	r3, r2
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	440b      	add	r3, r1
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4618      	mov	r0, r3
 8014146:	f7f8 fe51 	bl	800cdec <pbuf_free>
      }
      arp_table[i].q = p;
 801414a:	7c7a      	ldrb	r2, [r7, #17]
 801414c:	490d      	ldr	r1, [pc, #52]	; (8014184 <etharp_query+0x268>)
 801414e:	4613      	mov	r3, r2
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	4413      	add	r3, r2
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	440b      	add	r3, r1
 8014158:	69fa      	ldr	r2, [r7, #28]
 801415a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801415c:	2300      	movs	r3, #0
 801415e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014162:	e002      	b.n	801416a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014164:	23ff      	movs	r3, #255	; 0xff
 8014166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801416a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801416e:	4618      	mov	r0, r3
 8014170:	3728      	adds	r7, #40	; 0x28
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	bf00      	nop
 8014178:	08019f64 	.word	0x08019f64
 801417c:	0801a110 	.word	0x0801a110
 8014180:	08019fdc 	.word	0x08019fdc
 8014184:	20008cdc 	.word	0x20008cdc
 8014188:	0801a120 	.word	0x0801a120
 801418c:	0801a104 	.word	0x0801a104
 8014190:	20008dcc 	.word	0x20008dcc
 8014194:	0801a148 	.word	0x0801a148

08014198 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b08a      	sub	sp, #40	; 0x28
 801419c:	af02      	add	r7, sp, #8
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	607a      	str	r2, [r7, #4]
 80141a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80141a6:	2300      	movs	r3, #0
 80141a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d106      	bne.n	80141be <etharp_raw+0x26>
 80141b0:	4b3a      	ldr	r3, [pc, #232]	; (801429c <etharp_raw+0x104>)
 80141b2:	f240 4257 	movw	r2, #1111	; 0x457
 80141b6:	493a      	ldr	r1, [pc, #232]	; (80142a0 <etharp_raw+0x108>)
 80141b8:	483a      	ldr	r0, [pc, #232]	; (80142a4 <etharp_raw+0x10c>)
 80141ba:	f002 fc73 	bl	8016aa4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80141be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141c2:	211c      	movs	r1, #28
 80141c4:	200e      	movs	r0, #14
 80141c6:	f7f8 fb2d 	bl	800c824 <pbuf_alloc>
 80141ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80141d2:	f04f 33ff 	mov.w	r3, #4294967295
 80141d6:	e05d      	b.n	8014294 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	895b      	ldrh	r3, [r3, #10]
 80141dc:	2b1b      	cmp	r3, #27
 80141de:	d806      	bhi.n	80141ee <etharp_raw+0x56>
 80141e0:	4b2e      	ldr	r3, [pc, #184]	; (801429c <etharp_raw+0x104>)
 80141e2:	f240 4262 	movw	r2, #1122	; 0x462
 80141e6:	4930      	ldr	r1, [pc, #192]	; (80142a8 <etharp_raw+0x110>)
 80141e8:	482e      	ldr	r0, [pc, #184]	; (80142a4 <etharp_raw+0x10c>)
 80141ea:	f002 fc5b 	bl	8016aa4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80141ee:	69bb      	ldr	r3, [r7, #24]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80141f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7f7 fa9a 	bl	800b730 <lwip_htons>
 80141fc:	4603      	mov	r3, r0
 80141fe:	461a      	mov	r2, r3
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801420a:	2b06      	cmp	r3, #6
 801420c:	d006      	beq.n	801421c <etharp_raw+0x84>
 801420e:	4b23      	ldr	r3, [pc, #140]	; (801429c <etharp_raw+0x104>)
 8014210:	f240 4269 	movw	r2, #1129	; 0x469
 8014214:	4925      	ldr	r1, [pc, #148]	; (80142ac <etharp_raw+0x114>)
 8014216:	4823      	ldr	r0, [pc, #140]	; (80142a4 <etharp_raw+0x10c>)
 8014218:	f002 fc44 	bl	8016aa4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	3308      	adds	r3, #8
 8014220:	2206      	movs	r2, #6
 8014222:	6839      	ldr	r1, [r7, #0]
 8014224:	4618      	mov	r0, r3
 8014226:	f002 fc27 	bl	8016a78 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	3312      	adds	r3, #18
 801422e:	2206      	movs	r2, #6
 8014230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014232:	4618      	mov	r0, r3
 8014234:	f002 fc20 	bl	8016a78 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	330e      	adds	r3, #14
 801423c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801423e:	6812      	ldr	r2, [r2, #0]
 8014240:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	3318      	adds	r3, #24
 8014246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014248:	6812      	ldr	r2, [r2, #0]
 801424a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	2200      	movs	r2, #0
 8014250:	701a      	strb	r2, [r3, #0]
 8014252:	2200      	movs	r2, #0
 8014254:	f042 0201 	orr.w	r2, r2, #1
 8014258:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	2200      	movs	r2, #0
 801425e:	f042 0208 	orr.w	r2, r2, #8
 8014262:	709a      	strb	r2, [r3, #2]
 8014264:	2200      	movs	r2, #0
 8014266:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	2206      	movs	r2, #6
 801426c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	2204      	movs	r2, #4
 8014272:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014274:	f640 0306 	movw	r3, #2054	; 0x806
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	68ba      	ldr	r2, [r7, #8]
 801427e:	69b9      	ldr	r1, [r7, #24]
 8014280:	68f8      	ldr	r0, [r7, #12]
 8014282:	f001 fc0b 	bl	8015a9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014286:	69b8      	ldr	r0, [r7, #24]
 8014288:	f7f8 fdb0 	bl	800cdec <pbuf_free>
  p = NULL;
 801428c:	2300      	movs	r3, #0
 801428e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014290:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014294:	4618      	mov	r0, r3
 8014296:	3720      	adds	r7, #32
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	08019f64 	.word	0x08019f64
 80142a0:	0801a0b4 	.word	0x0801a0b4
 80142a4:	08019fdc 	.word	0x08019fdc
 80142a8:	0801a164 	.word	0x0801a164
 80142ac:	0801a198 	.word	0x0801a198

080142b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b088      	sub	sp, #32
 80142b4:	af04      	add	r7, sp, #16
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142cc:	2201      	movs	r2, #1
 80142ce:	9203      	str	r2, [sp, #12]
 80142d0:	68ba      	ldr	r2, [r7, #8]
 80142d2:	9202      	str	r2, [sp, #8]
 80142d4:	4a06      	ldr	r2, [pc, #24]	; (80142f0 <etharp_request_dst+0x40>)
 80142d6:	9201      	str	r2, [sp, #4]
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	4603      	mov	r3, r0
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	68f8      	ldr	r0, [r7, #12]
 80142e0:	f7ff ff5a 	bl	8014198 <etharp_raw>
 80142e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	0801a914 	.word	0x0801a914

080142f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80142fe:	4a05      	ldr	r2, [pc, #20]	; (8014314 <etharp_request+0x20>)
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff ffd4 	bl	80142b0 <etharp_request_dst>
 8014308:	4603      	mov	r3, r0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3708      	adds	r7, #8
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	0801a90c 	.word	0x0801a90c

08014318 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b08e      	sub	sp, #56	; 0x38
 801431c:	af04      	add	r7, sp, #16
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014322:	4b79      	ldr	r3, [pc, #484]	; (8014508 <icmp_input+0x1f0>)
 8014324:	689b      	ldr	r3, [r3, #8]
 8014326:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	f003 030f 	and.w	r3, r3, #15
 8014330:	b2db      	uxtb	r3, r3
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	b2db      	uxtb	r3, r3
 8014336:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801433a:	2b13      	cmp	r3, #19
 801433c:	f240 80cd 	bls.w	80144da <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	895b      	ldrh	r3, [r3, #10]
 8014344:	2b03      	cmp	r3, #3
 8014346:	f240 80ca 	bls.w	80144de <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014354:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014358:	2b00      	cmp	r3, #0
 801435a:	f000 80b7 	beq.w	80144cc <icmp_input+0x1b4>
 801435e:	2b08      	cmp	r3, #8
 8014360:	f040 80b7 	bne.w	80144d2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014364:	4b69      	ldr	r3, [pc, #420]	; (801450c <icmp_input+0x1f4>)
 8014366:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014368:	4b67      	ldr	r3, [pc, #412]	; (8014508 <icmp_input+0x1f0>)
 801436a:	695b      	ldr	r3, [r3, #20]
 801436c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014370:	2be0      	cmp	r3, #224	; 0xe0
 8014372:	f000 80bb 	beq.w	80144ec <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014376:	4b64      	ldr	r3, [pc, #400]	; (8014508 <icmp_input+0x1f0>)
 8014378:	695b      	ldr	r3, [r3, #20]
 801437a:	4a63      	ldr	r2, [pc, #396]	; (8014508 <icmp_input+0x1f0>)
 801437c:	6812      	ldr	r2, [r2, #0]
 801437e:	4611      	mov	r1, r2
 8014380:	4618      	mov	r0, r3
 8014382:	f000 fbed 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	f040 80b1 	bne.w	80144f0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	891b      	ldrh	r3, [r3, #8]
 8014392:	2b07      	cmp	r3, #7
 8014394:	f240 80a5 	bls.w	80144e2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801439a:	330e      	adds	r3, #14
 801439c:	4619      	mov	r1, r3
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f7f8 fc8e 	bl	800ccc0 <pbuf_add_header>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d04b      	beq.n	8014442 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	891a      	ldrh	r2, [r3, #8]
 80143ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143b0:	4413      	add	r3, r2
 80143b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	891b      	ldrh	r3, [r3, #8]
 80143b8:	8b7a      	ldrh	r2, [r7, #26]
 80143ba:	429a      	cmp	r2, r3
 80143bc:	f0c0 809a 	bcc.w	80144f4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80143c0:	8b7b      	ldrh	r3, [r7, #26]
 80143c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143c6:	4619      	mov	r1, r3
 80143c8:	200e      	movs	r0, #14
 80143ca:	f7f8 fa2b 	bl	800c824 <pbuf_alloc>
 80143ce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	f000 8090 	beq.w	80144f8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	895b      	ldrh	r3, [r3, #10]
 80143dc:	461a      	mov	r2, r3
 80143de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143e0:	3308      	adds	r3, #8
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d203      	bcs.n	80143ee <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80143e6:	6978      	ldr	r0, [r7, #20]
 80143e8:	f7f8 fd00 	bl	800cdec <pbuf_free>
          goto icmperr;
 80143ec:	e085      	b.n	80144fa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	685b      	ldr	r3, [r3, #4]
 80143f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80143f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143f6:	4618      	mov	r0, r3
 80143f8:	f002 fb3e 	bl	8016a78 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80143fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143fe:	4619      	mov	r1, r3
 8014400:	6978      	ldr	r0, [r7, #20]
 8014402:	f7f8 fc6d 	bl	800cce0 <pbuf_remove_header>
 8014406:	4603      	mov	r3, r0
 8014408:	2b00      	cmp	r3, #0
 801440a:	d009      	beq.n	8014420 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801440c:	4b40      	ldr	r3, [pc, #256]	; (8014510 <icmp_input+0x1f8>)
 801440e:	22b6      	movs	r2, #182	; 0xb6
 8014410:	4940      	ldr	r1, [pc, #256]	; (8014514 <icmp_input+0x1fc>)
 8014412:	4841      	ldr	r0, [pc, #260]	; (8014518 <icmp_input+0x200>)
 8014414:	f002 fb46 	bl	8016aa4 <iprintf>
          pbuf_free(r);
 8014418:	6978      	ldr	r0, [r7, #20]
 801441a:	f7f8 fce7 	bl	800cdec <pbuf_free>
          goto icmperr;
 801441e:	e06c      	b.n	80144fa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014420:	6879      	ldr	r1, [r7, #4]
 8014422:	6978      	ldr	r0, [r7, #20]
 8014424:	f7f8 fe0a 	bl	800d03c <pbuf_copy>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	d003      	beq.n	8014436 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801442e:	6978      	ldr	r0, [r7, #20]
 8014430:	f7f8 fcdc 	bl	800cdec <pbuf_free>
          goto icmperr;
 8014434:	e061      	b.n	80144fa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f7f8 fcd8 	bl	800cdec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	607b      	str	r3, [r7, #4]
 8014440:	e00f      	b.n	8014462 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014444:	330e      	adds	r3, #14
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7f8 fc49 	bl	800cce0 <pbuf_remove_header>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d006      	beq.n	8014462 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014454:	4b2e      	ldr	r3, [pc, #184]	; (8014510 <icmp_input+0x1f8>)
 8014456:	22c7      	movs	r2, #199	; 0xc7
 8014458:	4930      	ldr	r1, [pc, #192]	; (801451c <icmp_input+0x204>)
 801445a:	482f      	ldr	r0, [pc, #188]	; (8014518 <icmp_input+0x200>)
 801445c:	f002 fb22 	bl	8016aa4 <iprintf>
          goto icmperr;
 8014460:	e04b      	b.n	80144fa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801446a:	4619      	mov	r1, r3
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f7f8 fc27 	bl	800ccc0 <pbuf_add_header>
 8014472:	4603      	mov	r3, r0
 8014474:	2b00      	cmp	r3, #0
 8014476:	d12b      	bne.n	80144d0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801447e:	69fb      	ldr	r3, [r7, #28]
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014486:	4b20      	ldr	r3, [pc, #128]	; (8014508 <icmp_input+0x1f0>)
 8014488:	691a      	ldr	r2, [r3, #16]
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	2200      	movs	r2, #0
 8014492:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	2200      	movs	r2, #0
 8014498:	709a      	strb	r2, [r3, #2]
 801449a:	2200      	movs	r2, #0
 801449c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	22ff      	movs	r2, #255	; 0xff
 80144a2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2200      	movs	r2, #0
 80144a8:	729a      	strb	r2, [r3, #10]
 80144aa:	2200      	movs	r2, #0
 80144ac:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	9302      	str	r3, [sp, #8]
 80144b2:	2301      	movs	r3, #1
 80144b4:	9301      	str	r3, [sp, #4]
 80144b6:	2300      	movs	r3, #0
 80144b8:	9300      	str	r3, [sp, #0]
 80144ba:	23ff      	movs	r3, #255	; 0xff
 80144bc:	2200      	movs	r2, #0
 80144be:	69f9      	ldr	r1, [r7, #28]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 fa75 	bl	80149b0 <ip4_output_if>
 80144c6:	4603      	mov	r3, r0
 80144c8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80144ca:	e001      	b.n	80144d0 <icmp_input+0x1b8>
      break;
 80144cc:	bf00      	nop
 80144ce:	e000      	b.n	80144d2 <icmp_input+0x1ba>
      break;
 80144d0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f7f8 fc8a 	bl	800cdec <pbuf_free>
  return;
 80144d8:	e013      	b.n	8014502 <icmp_input+0x1ea>
    goto lenerr;
 80144da:	bf00      	nop
 80144dc:	e002      	b.n	80144e4 <icmp_input+0x1cc>
    goto lenerr;
 80144de:	bf00      	nop
 80144e0:	e000      	b.n	80144e4 <icmp_input+0x1cc>
        goto lenerr;
 80144e2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7f8 fc81 	bl	800cdec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80144ea:	e00a      	b.n	8014502 <icmp_input+0x1ea>
        goto icmperr;
 80144ec:	bf00      	nop
 80144ee:	e004      	b.n	80144fa <icmp_input+0x1e2>
        goto icmperr;
 80144f0:	bf00      	nop
 80144f2:	e002      	b.n	80144fa <icmp_input+0x1e2>
          goto icmperr;
 80144f4:	bf00      	nop
 80144f6:	e000      	b.n	80144fa <icmp_input+0x1e2>
          goto icmperr;
 80144f8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7f8 fc76 	bl	800cdec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014500:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014502:	3728      	adds	r7, #40	; 0x28
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	2000570c 	.word	0x2000570c
 801450c:	20005720 	.word	0x20005720
 8014510:	0801a1dc 	.word	0x0801a1dc
 8014514:	0801a214 	.word	0x0801a214
 8014518:	0801a24c 	.word	0x0801a24c
 801451c:	0801a274 	.word	0x0801a274

08014520 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	460b      	mov	r3, r1
 801452a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801452c:	78fb      	ldrb	r3, [r7, #3]
 801452e:	461a      	mov	r2, r3
 8014530:	2103      	movs	r1, #3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f000 f814 	bl	8014560 <icmp_send_response>
}
 8014538:	bf00      	nop
 801453a:	3708      	adds	r7, #8
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	460b      	mov	r3, r1
 801454a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801454c:	78fb      	ldrb	r3, [r7, #3]
 801454e:	461a      	mov	r2, r3
 8014550:	210b      	movs	r1, #11
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 f804 	bl	8014560 <icmp_send_response>
}
 8014558:	bf00      	nop
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b08c      	sub	sp, #48	; 0x30
 8014564:	af04      	add	r7, sp, #16
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	460b      	mov	r3, r1
 801456a:	70fb      	strb	r3, [r7, #3]
 801456c:	4613      	mov	r3, r2
 801456e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014570:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014574:	2124      	movs	r1, #36	; 0x24
 8014576:	2022      	movs	r0, #34	; 0x22
 8014578:	f7f8 f954 	bl	800c824 <pbuf_alloc>
 801457c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801457e:	69fb      	ldr	r3, [r7, #28]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d04c      	beq.n	801461e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	895b      	ldrh	r3, [r3, #10]
 8014588:	2b23      	cmp	r3, #35	; 0x23
 801458a:	d806      	bhi.n	801459a <icmp_send_response+0x3a>
 801458c:	4b26      	ldr	r3, [pc, #152]	; (8014628 <icmp_send_response+0xc8>)
 801458e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014592:	4926      	ldr	r1, [pc, #152]	; (801462c <icmp_send_response+0xcc>)
 8014594:	4826      	ldr	r0, [pc, #152]	; (8014630 <icmp_send_response+0xd0>)
 8014596:	f002 fa85 	bl	8016aa4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80145a0:	69fb      	ldr	r3, [r7, #28]
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	78fa      	ldrb	r2, [r7, #3]
 80145aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	78ba      	ldrb	r2, [r7, #2]
 80145b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	2200      	movs	r2, #0
 80145b6:	711a      	strb	r2, [r3, #4]
 80145b8:	2200      	movs	r2, #0
 80145ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	2200      	movs	r2, #0
 80145c0:	719a      	strb	r2, [r3, #6]
 80145c2:	2200      	movs	r2, #0
 80145c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	f103 0008 	add.w	r0, r3, #8
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	221c      	movs	r2, #28
 80145d4:	4619      	mov	r1, r3
 80145d6:	f002 fa4f 	bl	8016a78 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80145e0:	f107 030c 	add.w	r3, r7, #12
 80145e4:	4618      	mov	r0, r3
 80145e6:	f000 f825 	bl	8014634 <ip4_route>
 80145ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d011      	beq.n	8014616 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	2200      	movs	r2, #0
 80145f6:	709a      	strb	r2, [r3, #2]
 80145f8:	2200      	movs	r2, #0
 80145fa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80145fc:	f107 020c 	add.w	r2, r7, #12
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	9302      	str	r3, [sp, #8]
 8014604:	2301      	movs	r3, #1
 8014606:	9301      	str	r3, [sp, #4]
 8014608:	2300      	movs	r3, #0
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	23ff      	movs	r3, #255	; 0xff
 801460e:	2100      	movs	r1, #0
 8014610:	69f8      	ldr	r0, [r7, #28]
 8014612:	f000 f9cd 	bl	80149b0 <ip4_output_if>
  }
  pbuf_free(q);
 8014616:	69f8      	ldr	r0, [r7, #28]
 8014618:	f7f8 fbe8 	bl	800cdec <pbuf_free>
 801461c:	e000      	b.n	8014620 <icmp_send_response+0xc0>
    return;
 801461e:	bf00      	nop
}
 8014620:	3720      	adds	r7, #32
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	0801a1dc 	.word	0x0801a1dc
 801462c:	0801a2a8 	.word	0x0801a2a8
 8014630:	0801a24c 	.word	0x0801a24c

08014634 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014634:	b480      	push	{r7}
 8014636:	b085      	sub	sp, #20
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801463c:	4b33      	ldr	r3, [pc, #204]	; (801470c <ip4_route+0xd8>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	60fb      	str	r3, [r7, #12]
 8014642:	e036      	b.n	80146b2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801464a:	f003 0301 	and.w	r3, r3, #1
 801464e:	b2db      	uxtb	r3, r3
 8014650:	2b00      	cmp	r3, #0
 8014652:	d02b      	beq.n	80146ac <ip4_route+0x78>
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801465a:	089b      	lsrs	r3, r3, #2
 801465c:	f003 0301 	and.w	r3, r3, #1
 8014660:	b2db      	uxtb	r3, r3
 8014662:	2b00      	cmp	r3, #0
 8014664:	d022      	beq.n	80146ac <ip4_route+0x78>
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	3304      	adds	r3, #4
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d01d      	beq.n	80146ac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681a      	ldr	r2, [r3, #0]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	3304      	adds	r3, #4
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	405a      	eors	r2, r3
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	3308      	adds	r3, #8
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	4013      	ands	r3, r2
 8014684:	2b00      	cmp	r3, #0
 8014686:	d101      	bne.n	801468c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	e038      	b.n	80146fe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014692:	f003 0302 	and.w	r3, r3, #2
 8014696:	2b00      	cmp	r3, #0
 8014698:	d108      	bne.n	80146ac <ip4_route+0x78>
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	330c      	adds	r3, #12
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d101      	bne.n	80146ac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	e028      	b.n	80146fe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	60fb      	str	r3, [r7, #12]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d1c5      	bne.n	8014644 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146b8:	4b15      	ldr	r3, [pc, #84]	; (8014710 <ip4_route+0xdc>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d01a      	beq.n	80146f6 <ip4_route+0xc2>
 80146c0:	4b13      	ldr	r3, [pc, #76]	; (8014710 <ip4_route+0xdc>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146c8:	f003 0301 	and.w	r3, r3, #1
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d012      	beq.n	80146f6 <ip4_route+0xc2>
 80146d0:	4b0f      	ldr	r3, [pc, #60]	; (8014710 <ip4_route+0xdc>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146d8:	f003 0304 	and.w	r3, r3, #4
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d00a      	beq.n	80146f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80146e0:	4b0b      	ldr	r3, [pc, #44]	; (8014710 <ip4_route+0xdc>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	3304      	adds	r3, #4
 80146e6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d004      	beq.n	80146f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	b2db      	uxtb	r3, r3
 80146f2:	2b7f      	cmp	r3, #127	; 0x7f
 80146f4:	d101      	bne.n	80146fa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80146f6:	2300      	movs	r3, #0
 80146f8:	e001      	b.n	80146fe <ip4_route+0xca>
  }

  return netif_default;
 80146fa:	4b05      	ldr	r3, [pc, #20]	; (8014710 <ip4_route+0xdc>)
 80146fc:	681b      	ldr	r3, [r3, #0]
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3714      	adds	r7, #20
 8014702:	46bd      	mov	sp, r7
 8014704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014708:	4770      	bx	lr
 801470a:	bf00      	nop
 801470c:	20008c70 	.word	0x20008c70
 8014710:	20008c74 	.word	0x20008c74

08014714 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014722:	f003 0301 	and.w	r3, r3, #1
 8014726:	b2db      	uxtb	r3, r3
 8014728:	2b00      	cmp	r3, #0
 801472a:	d016      	beq.n	801475a <ip4_input_accept+0x46>
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	3304      	adds	r3, #4
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d011      	beq.n	801475a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014736:	4b0b      	ldr	r3, [pc, #44]	; (8014764 <ip4_input_accept+0x50>)
 8014738:	695a      	ldr	r2, [r3, #20]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	3304      	adds	r3, #4
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	429a      	cmp	r2, r3
 8014742:	d008      	beq.n	8014756 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014744:	4b07      	ldr	r3, [pc, #28]	; (8014764 <ip4_input_accept+0x50>)
 8014746:	695b      	ldr	r3, [r3, #20]
 8014748:	6879      	ldr	r1, [r7, #4]
 801474a:	4618      	mov	r0, r3
 801474c:	f000 fa08 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8014750:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014756:	2301      	movs	r3, #1
 8014758:	e000      	b.n	801475c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801475a:	2300      	movs	r3, #0
}
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	2000570c 	.word	0x2000570c

08014768 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b086      	sub	sp, #24
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
 8014770:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	091b      	lsrs	r3, r3, #4
 801477e:	b2db      	uxtb	r3, r3
 8014780:	2b04      	cmp	r3, #4
 8014782:	d004      	beq.n	801478e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f7f8 fb31 	bl	800cdec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801478a:	2300      	movs	r3, #0
 801478c:	e107      	b.n	801499e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	f003 030f 	and.w	r3, r3, #15
 8014796:	b2db      	uxtb	r3, r3
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	b2db      	uxtb	r3, r3
 801479c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	885b      	ldrh	r3, [r3, #2]
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f6 ffc3 	bl	800b730 <lwip_htons>
 80147aa:	4603      	mov	r3, r0
 80147ac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	891b      	ldrh	r3, [r3, #8]
 80147b2:	89ba      	ldrh	r2, [r7, #12]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d204      	bcs.n	80147c2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80147b8:	89bb      	ldrh	r3, [r7, #12]
 80147ba:	4619      	mov	r1, r3
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f7f8 f98f 	bl	800cae0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	895b      	ldrh	r3, [r3, #10]
 80147c6:	89fa      	ldrh	r2, [r7, #14]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d807      	bhi.n	80147dc <ip4_input+0x74>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	891b      	ldrh	r3, [r3, #8]
 80147d0:	89ba      	ldrh	r2, [r7, #12]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d802      	bhi.n	80147dc <ip4_input+0x74>
 80147d6:	89fb      	ldrh	r3, [r7, #14]
 80147d8:	2b13      	cmp	r3, #19
 80147da:	d804      	bhi.n	80147e6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7f8 fb05 	bl	800cdec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80147e2:	2300      	movs	r3, #0
 80147e4:	e0db      	b.n	801499e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	4a6f      	ldr	r2, [pc, #444]	; (80149a8 <ip4_input+0x240>)
 80147ec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	68db      	ldr	r3, [r3, #12]
 80147f2:	4a6d      	ldr	r2, [pc, #436]	; (80149a8 <ip4_input+0x240>)
 80147f4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80147f6:	4b6c      	ldr	r3, [pc, #432]	; (80149a8 <ip4_input+0x240>)
 80147f8:	695b      	ldr	r3, [r3, #20]
 80147fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147fe:	2be0      	cmp	r3, #224	; 0xe0
 8014800:	d112      	bne.n	8014828 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014808:	f003 0301 	and.w	r3, r3, #1
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b00      	cmp	r3, #0
 8014810:	d007      	beq.n	8014822 <ip4_input+0xba>
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	3304      	adds	r3, #4
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <ip4_input+0xba>
      netif = inp;
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	613b      	str	r3, [r7, #16]
 8014820:	e02a      	b.n	8014878 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014822:	2300      	movs	r3, #0
 8014824:	613b      	str	r3, [r7, #16]
 8014826:	e027      	b.n	8014878 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014828:	6838      	ldr	r0, [r7, #0]
 801482a:	f7ff ff73 	bl	8014714 <ip4_input_accept>
 801482e:	4603      	mov	r3, r0
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <ip4_input+0xd2>
      netif = inp;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	613b      	str	r3, [r7, #16]
 8014838:	e01e      	b.n	8014878 <ip4_input+0x110>
    } else {
      netif = NULL;
 801483a:	2300      	movs	r3, #0
 801483c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801483e:	4b5a      	ldr	r3, [pc, #360]	; (80149a8 <ip4_input+0x240>)
 8014840:	695b      	ldr	r3, [r3, #20]
 8014842:	b2db      	uxtb	r3, r3
 8014844:	2b7f      	cmp	r3, #127	; 0x7f
 8014846:	d017      	beq.n	8014878 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014848:	4b58      	ldr	r3, [pc, #352]	; (80149ac <ip4_input+0x244>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	613b      	str	r3, [r7, #16]
 801484e:	e00e      	b.n	801486e <ip4_input+0x106>
          if (netif == inp) {
 8014850:	693a      	ldr	r2, [r7, #16]
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	429a      	cmp	r2, r3
 8014856:	d006      	beq.n	8014866 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014858:	6938      	ldr	r0, [r7, #16]
 801485a:	f7ff ff5b 	bl	8014714 <ip4_input_accept>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d108      	bne.n	8014876 <ip4_input+0x10e>
 8014864:	e000      	b.n	8014868 <ip4_input+0x100>
            continue;
 8014866:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	613b      	str	r3, [r7, #16]
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d1ed      	bne.n	8014850 <ip4_input+0xe8>
 8014874:	e000      	b.n	8014878 <ip4_input+0x110>
            break;
 8014876:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014878:	4b4b      	ldr	r3, [pc, #300]	; (80149a8 <ip4_input+0x240>)
 801487a:	691b      	ldr	r3, [r3, #16]
 801487c:	6839      	ldr	r1, [r7, #0]
 801487e:	4618      	mov	r0, r3
 8014880:	f000 f96e 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 8014884:	4603      	mov	r3, r0
 8014886:	2b00      	cmp	r3, #0
 8014888:	d105      	bne.n	8014896 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801488a:	4b47      	ldr	r3, [pc, #284]	; (80149a8 <ip4_input+0x240>)
 801488c:	691b      	ldr	r3, [r3, #16]
 801488e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014892:	2be0      	cmp	r3, #224	; 0xe0
 8014894:	d104      	bne.n	80148a0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7f8 faa8 	bl	800cdec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801489c:	2300      	movs	r3, #0
 801489e:	e07e      	b.n	801499e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d104      	bne.n	80148b0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7f8 faa0 	bl	800cdec <pbuf_free>
    return ERR_OK;
 80148ac:	2300      	movs	r3, #0
 80148ae:	e076      	b.n	801499e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	88db      	ldrh	r3, [r3, #6]
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	461a      	mov	r2, r3
 80148b8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80148bc:	4013      	ands	r3, r2
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d00b      	beq.n	80148da <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f000 fd22 	bl	801530c <ip4_reass>
 80148c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d101      	bne.n	80148d4 <ip4_input+0x16c>
      return ERR_OK;
 80148d0:	2300      	movs	r3, #0
 80148d2:	e064      	b.n	801499e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80148da:	4a33      	ldr	r2, [pc, #204]	; (80149a8 <ip4_input+0x240>)
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80148e0:	4a31      	ldr	r2, [pc, #196]	; (80149a8 <ip4_input+0x240>)
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80148e6:	4a30      	ldr	r2, [pc, #192]	; (80149a8 <ip4_input+0x240>)
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	f003 030f 	and.w	r3, r3, #15
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	b29a      	uxth	r2, r3
 80148fc:	4b2a      	ldr	r3, [pc, #168]	; (80149a8 <ip4_input+0x240>)
 80148fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014900:	89fb      	ldrh	r3, [r7, #14]
 8014902:	4619      	mov	r1, r3
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7f8 f9eb 	bl	800cce0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	7a5b      	ldrb	r3, [r3, #9]
 801490e:	2b11      	cmp	r3, #17
 8014910:	d006      	beq.n	8014920 <ip4_input+0x1b8>
 8014912:	2b11      	cmp	r3, #17
 8014914:	dc13      	bgt.n	801493e <ip4_input+0x1d6>
 8014916:	2b01      	cmp	r3, #1
 8014918:	d00c      	beq.n	8014934 <ip4_input+0x1cc>
 801491a:	2b06      	cmp	r3, #6
 801491c:	d005      	beq.n	801492a <ip4_input+0x1c2>
 801491e:	e00e      	b.n	801493e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014920:	6839      	ldr	r1, [r7, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f7fe f8e6 	bl	8012af4 <udp_input>
        break;
 8014928:	e026      	b.n	8014978 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801492a:	6839      	ldr	r1, [r7, #0]
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f7fa f927 	bl	800eb80 <tcp_input>
        break;
 8014932:	e021      	b.n	8014978 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7ff fcee 	bl	8014318 <icmp_input>
        break;
 801493c:	e01c      	b.n	8014978 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801493e:	4b1a      	ldr	r3, [pc, #104]	; (80149a8 <ip4_input+0x240>)
 8014940:	695b      	ldr	r3, [r3, #20]
 8014942:	6939      	ldr	r1, [r7, #16]
 8014944:	4618      	mov	r0, r3
 8014946:	f000 f90b 	bl	8014b60 <ip4_addr_isbroadcast_u32>
 801494a:	4603      	mov	r3, r0
 801494c:	2b00      	cmp	r3, #0
 801494e:	d10f      	bne.n	8014970 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014950:	4b15      	ldr	r3, [pc, #84]	; (80149a8 <ip4_input+0x240>)
 8014952:	695b      	ldr	r3, [r3, #20]
 8014954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014958:	2be0      	cmp	r3, #224	; 0xe0
 801495a:	d009      	beq.n	8014970 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801495c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014960:	4619      	mov	r1, r3
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f7f8 fa2f 	bl	800cdc6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014968:	2102      	movs	r1, #2
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7ff fdd8 	bl	8014520 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f7f8 fa3b 	bl	800cdec <pbuf_free>
        break;
 8014976:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014978:	4b0b      	ldr	r3, [pc, #44]	; (80149a8 <ip4_input+0x240>)
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801497e:	4b0a      	ldr	r3, [pc, #40]	; (80149a8 <ip4_input+0x240>)
 8014980:	2200      	movs	r2, #0
 8014982:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014984:	4b08      	ldr	r3, [pc, #32]	; (80149a8 <ip4_input+0x240>)
 8014986:	2200      	movs	r2, #0
 8014988:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801498a:	4b07      	ldr	r3, [pc, #28]	; (80149a8 <ip4_input+0x240>)
 801498c:	2200      	movs	r2, #0
 801498e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014990:	4b05      	ldr	r3, [pc, #20]	; (80149a8 <ip4_input+0x240>)
 8014992:	2200      	movs	r2, #0
 8014994:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014996:	4b04      	ldr	r3, [pc, #16]	; (80149a8 <ip4_input+0x240>)
 8014998:	2200      	movs	r2, #0
 801499a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801499c:	2300      	movs	r3, #0
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3718      	adds	r7, #24
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	2000570c 	.word	0x2000570c
 80149ac:	20008c70 	.word	0x20008c70

080149b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b08a      	sub	sp, #40	; 0x28
 80149b4:	af04      	add	r7, sp, #16
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
 80149bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d009      	beq.n	80149dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d003      	beq.n	80149d6 <ip4_output_if+0x26>
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d102      	bne.n	80149dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	3304      	adds	r3, #4
 80149da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80149dc:	78fa      	ldrb	r2, [r7, #3]
 80149de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e0:	9302      	str	r3, [sp, #8]
 80149e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149e6:	9301      	str	r3, [sp, #4]
 80149e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80149ec:	9300      	str	r3, [sp, #0]
 80149ee:	4613      	mov	r3, r2
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	6979      	ldr	r1, [r7, #20]
 80149f4:	68f8      	ldr	r0, [r7, #12]
 80149f6:	f000 f805 	bl	8014a04 <ip4_output_if_src>
 80149fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3718      	adds	r7, #24
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b088      	sub	sp, #32
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
 8014a10:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	7b9b      	ldrb	r3, [r3, #14]
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d006      	beq.n	8014a28 <ip4_output_if_src+0x24>
 8014a1a:	4b4b      	ldr	r3, [pc, #300]	; (8014b48 <ip4_output_if_src+0x144>)
 8014a1c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014a20:	494a      	ldr	r1, [pc, #296]	; (8014b4c <ip4_output_if_src+0x148>)
 8014a22:	484b      	ldr	r0, [pc, #300]	; (8014b50 <ip4_output_if_src+0x14c>)
 8014a24:	f002 f83e 	bl	8016aa4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d060      	beq.n	8014af0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014a2e:	2314      	movs	r3, #20
 8014a30:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014a32:	2114      	movs	r1, #20
 8014a34:	68f8      	ldr	r0, [r7, #12]
 8014a36:	f7f8 f943 	bl	800ccc0 <pbuf_add_header>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d002      	beq.n	8014a46 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014a40:	f06f 0301 	mvn.w	r3, #1
 8014a44:	e07c      	b.n	8014b40 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	895b      	ldrh	r3, [r3, #10]
 8014a50:	2b13      	cmp	r3, #19
 8014a52:	d806      	bhi.n	8014a62 <ip4_output_if_src+0x5e>
 8014a54:	4b3c      	ldr	r3, [pc, #240]	; (8014b48 <ip4_output_if_src+0x144>)
 8014a56:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014a5a:	493e      	ldr	r1, [pc, #248]	; (8014b54 <ip4_output_if_src+0x150>)
 8014a5c:	483c      	ldr	r0, [pc, #240]	; (8014b50 <ip4_output_if_src+0x14c>)
 8014a5e:	f002 f821 	bl	8016aa4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	78fa      	ldrb	r2, [r7, #3]
 8014a66:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014a6e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681a      	ldr	r2, [r3, #0]
 8014a74:	69fb      	ldr	r3, [r7, #28]
 8014a76:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014a78:	8b7b      	ldrh	r3, [r7, #26]
 8014a7a:	089b      	lsrs	r3, r3, #2
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a84:	b2da      	uxtb	r2, r3
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014a8a:	69fb      	ldr	r3, [r7, #28]
 8014a8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014a90:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	891b      	ldrh	r3, [r3, #8]
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7f6 fe4a 	bl	800b730 <lwip_htons>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	461a      	mov	r2, r3
 8014aa0:	69fb      	ldr	r3, [r7, #28]
 8014aa2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	719a      	strb	r2, [r3, #6]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014aae:	4b2a      	ldr	r3, [pc, #168]	; (8014b58 <ip4_output_if_src+0x154>)
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f6 fe3c 	bl	800b730 <lwip_htons>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	461a      	mov	r2, r3
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014ac0:	4b25      	ldr	r3, [pc, #148]	; (8014b58 <ip4_output_if_src+0x154>)
 8014ac2:	881b      	ldrh	r3, [r3, #0]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	b29a      	uxth	r2, r3
 8014ac8:	4b23      	ldr	r3, [pc, #140]	; (8014b58 <ip4_output_if_src+0x154>)
 8014aca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d104      	bne.n	8014adc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014ad2:	4b22      	ldr	r3, [pc, #136]	; (8014b5c <ip4_output_if_src+0x158>)
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	60da      	str	r2, [r3, #12]
 8014ada:	e003      	b.n	8014ae4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	69fb      	ldr	r3, [r7, #28]
 8014ae2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	729a      	strb	r2, [r3, #10]
 8014aea:	2200      	movs	r2, #0
 8014aec:	72da      	strb	r2, [r3, #11]
 8014aee:	e00f      	b.n	8014b10 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	895b      	ldrh	r3, [r3, #10]
 8014af4:	2b13      	cmp	r3, #19
 8014af6:	d802      	bhi.n	8014afe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014af8:	f06f 0301 	mvn.w	r3, #1
 8014afc:	e020      	b.n	8014b40 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	691b      	ldr	r3, [r3, #16]
 8014b08:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014b0a:	f107 0314 	add.w	r3, r7, #20
 8014b0e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d00c      	beq.n	8014b32 <ip4_output_if_src+0x12e>
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	891a      	ldrh	r2, [r3, #8]
 8014b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d906      	bls.n	8014b32 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b28:	68f8      	ldr	r0, [r7, #12]
 8014b2a:	f000 fde3 	bl	80156f4 <ip4_frag>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	e006      	b.n	8014b40 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	695b      	ldr	r3, [r3, #20]
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	68f9      	ldr	r1, [r7, #12]
 8014b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b3c:	4798      	blx	r3
 8014b3e:	4603      	mov	r3, r0
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3720      	adds	r7, #32
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	0801a2d4 	.word	0x0801a2d4
 8014b4c:	0801a308 	.word	0x0801a308
 8014b50:	0801a314 	.word	0x0801a314
 8014b54:	0801a33c 	.word	0x0801a33c
 8014b58:	20008dce 	.word	0x20008dce
 8014b5c:	0801a908 	.word	0x0801a908

08014b60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014b60:	b480      	push	{r7}
 8014b62:	b085      	sub	sp, #20
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b74:	d002      	beq.n	8014b7c <ip4_addr_isbroadcast_u32+0x1c>
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d101      	bne.n	8014b80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e02a      	b.n	8014bd6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b86:	f003 0302 	and.w	r3, r3, #2
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d101      	bne.n	8014b92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	e021      	b.n	8014bd6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	3304      	adds	r3, #4
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d101      	bne.n	8014ba2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	e019      	b.n	8014bd6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014ba2:	68fa      	ldr	r2, [r7, #12]
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	3304      	adds	r3, #4
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	405a      	eors	r2, r3
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	3308      	adds	r3, #8
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	4013      	ands	r3, r2
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d10d      	bne.n	8014bd4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	3308      	adds	r3, #8
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	43da      	mvns	r2, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	3308      	adds	r3, #8
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d101      	bne.n	8014bd4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	e000      	b.n	8014bd6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014bd4:	2300      	movs	r3, #0
  }
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
	...

08014be4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8014bec:	2210      	movs	r2, #16
 8014bee:	4904      	ldr	r1, [pc, #16]	; (8014c00 <ip4addr_ntoa+0x1c>)
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f000 f807 	bl	8014c04 <ip4addr_ntoa_r>
 8014bf6:	4603      	mov	r3, r0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	20008dd0 	.word	0x20008dd0

08014c04 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b08d      	sub	sp, #52	; 0x34
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8014c10:	2300      	movs	r3, #0
 8014c12:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8014c1e:	f107 0318 	add.w	r3, r7, #24
 8014c22:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8014c24:	2300      	movs	r3, #0
 8014c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c2a:	e058      	b.n	8014cde <ip4addr_ntoa_r+0xda>
    i = 0;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8014c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c34:	781a      	ldrb	r2, [r3, #0]
 8014c36:	4b32      	ldr	r3, [pc, #200]	; (8014d00 <ip4addr_ntoa_r+0xfc>)
 8014c38:	fba3 1302 	umull	r1, r3, r3, r2
 8014c3c:	08d9      	lsrs	r1, r3, #3
 8014c3e:	460b      	mov	r3, r1
 8014c40:	009b      	lsls	r3, r3, #2
 8014c42:	440b      	add	r3, r1
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	1ad3      	subs	r3, r2, r3
 8014c48:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8014c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	4a2c      	ldr	r2, [pc, #176]	; (8014d00 <ip4addr_ntoa_r+0xfc>)
 8014c50:	fba2 2303 	umull	r2, r3, r2, r3
 8014c54:	08db      	lsrs	r3, r3, #3
 8014c56:	b2da      	uxtb	r2, r3
 8014c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c5a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8014c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c60:	1c5a      	adds	r2, r3, #1
 8014c62:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8014c66:	4619      	mov	r1, r3
 8014c68:	7ffb      	ldrb	r3, [r7, #31]
 8014c6a:	3330      	adds	r3, #48	; 0x30
 8014c6c:	b2da      	uxtb	r2, r3
 8014c6e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8014c72:	443b      	add	r3, r7
 8014c74:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8014c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d1d8      	bne.n	8014c32 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8014c80:	e011      	b.n	8014ca6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8014c82:	6a3b      	ldr	r3, [r7, #32]
 8014c84:	1c5a      	adds	r2, r3, #1
 8014c86:	623a      	str	r2, [r7, #32]
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	dc01      	bgt.n	8014c92 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	e030      	b.n	8014cf4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8014c92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c98:	1c59      	adds	r1, r3, #1
 8014c9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014c9c:	3230      	adds	r2, #48	; 0x30
 8014c9e:	443a      	add	r2, r7
 8014ca0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8014ca4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8014ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014caa:	1e5a      	subs	r2, r3, #1
 8014cac:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d1e6      	bne.n	8014c82 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	1c5a      	adds	r2, r3, #1
 8014cb8:	623a      	str	r2, [r7, #32]
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	dc01      	bgt.n	8014cc4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	e017      	b.n	8014cf4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8014cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc6:	1c5a      	adds	r2, r3, #1
 8014cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014cca:	222e      	movs	r2, #46	; 0x2e
 8014ccc:	701a      	strb	r2, [r3, #0]
    ap++;
 8014cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8014cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cd8:	3301      	adds	r3, #1
 8014cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ce2:	2b03      	cmp	r3, #3
 8014ce4:	d9a2      	bls.n	8014c2c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8014ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cee:	2200      	movs	r2, #0
 8014cf0:	701a      	strb	r2, [r3, #0]
  return buf;
 8014cf2:	68bb      	ldr	r3, [r7, #8]
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3734      	adds	r7, #52	; 0x34
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr
 8014d00:	cccccccd 	.word	0xcccccccd

08014d04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b084      	sub	sp, #16
 8014d08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014d0e:	4b12      	ldr	r3, [pc, #72]	; (8014d58 <ip_reass_tmr+0x54>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014d14:	e018      	b.n	8014d48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	7fdb      	ldrb	r3, [r3, #31]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d00b      	beq.n	8014d36 <ip_reass_tmr+0x32>
      r->timer--;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	7fdb      	ldrb	r3, [r3, #31]
 8014d22:	3b01      	subs	r3, #1
 8014d24:	b2da      	uxtb	r2, r3
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	60fb      	str	r3, [r7, #12]
 8014d34:	e008      	b.n	8014d48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014d40:	68b9      	ldr	r1, [r7, #8]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 f80a 	bl	8014d5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d1e3      	bne.n	8014d16 <ip_reass_tmr+0x12>
    }
  }
}
 8014d4e:	bf00      	nop
 8014d50:	bf00      	nop
 8014d52:	3710      	adds	r7, #16
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	20008de0 	.word	0x20008de0

08014d5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b088      	sub	sp, #32
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014d6a:	683a      	ldr	r2, [r7, #0]
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d105      	bne.n	8014d7e <ip_reass_free_complete_datagram+0x22>
 8014d72:	4b45      	ldr	r3, [pc, #276]	; (8014e88 <ip_reass_free_complete_datagram+0x12c>)
 8014d74:	22ab      	movs	r2, #171	; 0xab
 8014d76:	4945      	ldr	r1, [pc, #276]	; (8014e8c <ip_reass_free_complete_datagram+0x130>)
 8014d78:	4845      	ldr	r0, [pc, #276]	; (8014e90 <ip_reass_free_complete_datagram+0x134>)
 8014d7a:	f001 fe93 	bl	8016aa4 <iprintf>
  if (prev != NULL) {
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d00a      	beq.n	8014d9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d005      	beq.n	8014d9a <ip_reass_free_complete_datagram+0x3e>
 8014d8e:	4b3e      	ldr	r3, [pc, #248]	; (8014e88 <ip_reass_free_complete_datagram+0x12c>)
 8014d90:	22ad      	movs	r2, #173	; 0xad
 8014d92:	4940      	ldr	r1, [pc, #256]	; (8014e94 <ip_reass_free_complete_datagram+0x138>)
 8014d94:	483e      	ldr	r0, [pc, #248]	; (8014e90 <ip_reass_free_complete_datagram+0x134>)
 8014d96:	f001 fe85 	bl	8016aa4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	889b      	ldrh	r3, [r3, #4]
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d12a      	bne.n	8014e02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	681a      	ldr	r2, [r3, #0]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014dba:	69bb      	ldr	r3, [r7, #24]
 8014dbc:	6858      	ldr	r0, [r3, #4]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	3308      	adds	r3, #8
 8014dc2:	2214      	movs	r2, #20
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	f001 fe57 	bl	8016a78 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014dca:	2101      	movs	r1, #1
 8014dcc:	69b8      	ldr	r0, [r7, #24]
 8014dce:	f7ff fbb7 	bl	8014540 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014dd2:	69b8      	ldr	r0, [r7, #24]
 8014dd4:	f7f8 f892 	bl	800cefc <pbuf_clen>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ddc:	8bfa      	ldrh	r2, [r7, #30]
 8014dde:	8a7b      	ldrh	r3, [r7, #18]
 8014de0:	4413      	add	r3, r2
 8014de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014de6:	db05      	blt.n	8014df4 <ip_reass_free_complete_datagram+0x98>
 8014de8:	4b27      	ldr	r3, [pc, #156]	; (8014e88 <ip_reass_free_complete_datagram+0x12c>)
 8014dea:	22bc      	movs	r2, #188	; 0xbc
 8014dec:	492a      	ldr	r1, [pc, #168]	; (8014e98 <ip_reass_free_complete_datagram+0x13c>)
 8014dee:	4828      	ldr	r0, [pc, #160]	; (8014e90 <ip_reass_free_complete_datagram+0x134>)
 8014df0:	f001 fe58 	bl	8016aa4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014df4:	8bfa      	ldrh	r2, [r7, #30]
 8014df6:	8a7b      	ldrh	r3, [r7, #18]
 8014df8:	4413      	add	r3, r2
 8014dfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014dfc:	69b8      	ldr	r0, [r7, #24]
 8014dfe:	f7f7 fff5 	bl	800cdec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014e08:	e01f      	b.n	8014e4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014e10:	69bb      	ldr	r3, [r7, #24]
 8014e12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f7f8 f86e 	bl	800cefc <pbuf_clen>
 8014e20:	4603      	mov	r3, r0
 8014e22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014e24:	8bfa      	ldrh	r2, [r7, #30]
 8014e26:	8a7b      	ldrh	r3, [r7, #18]
 8014e28:	4413      	add	r3, r2
 8014e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e2e:	db05      	blt.n	8014e3c <ip_reass_free_complete_datagram+0xe0>
 8014e30:	4b15      	ldr	r3, [pc, #84]	; (8014e88 <ip_reass_free_complete_datagram+0x12c>)
 8014e32:	22cc      	movs	r2, #204	; 0xcc
 8014e34:	4918      	ldr	r1, [pc, #96]	; (8014e98 <ip_reass_free_complete_datagram+0x13c>)
 8014e36:	4816      	ldr	r0, [pc, #88]	; (8014e90 <ip_reass_free_complete_datagram+0x134>)
 8014e38:	f001 fe34 	bl	8016aa4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e3c:	8bfa      	ldrh	r2, [r7, #30]
 8014e3e:	8a7b      	ldrh	r3, [r7, #18]
 8014e40:	4413      	add	r3, r2
 8014e42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f7f7 ffd1 	bl	800cdec <pbuf_free>
  while (p != NULL) {
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d1dc      	bne.n	8014e0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014e50:	6839      	ldr	r1, [r7, #0]
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f000 f8c2 	bl	8014fdc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014e58:	4b10      	ldr	r3, [pc, #64]	; (8014e9c <ip_reass_free_complete_datagram+0x140>)
 8014e5a:	881b      	ldrh	r3, [r3, #0]
 8014e5c:	8bfa      	ldrh	r2, [r7, #30]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d905      	bls.n	8014e6e <ip_reass_free_complete_datagram+0x112>
 8014e62:	4b09      	ldr	r3, [pc, #36]	; (8014e88 <ip_reass_free_complete_datagram+0x12c>)
 8014e64:	22d2      	movs	r2, #210	; 0xd2
 8014e66:	490e      	ldr	r1, [pc, #56]	; (8014ea0 <ip_reass_free_complete_datagram+0x144>)
 8014e68:	4809      	ldr	r0, [pc, #36]	; (8014e90 <ip_reass_free_complete_datagram+0x134>)
 8014e6a:	f001 fe1b 	bl	8016aa4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014e6e:	4b0b      	ldr	r3, [pc, #44]	; (8014e9c <ip_reass_free_complete_datagram+0x140>)
 8014e70:	881a      	ldrh	r2, [r3, #0]
 8014e72:	8bfb      	ldrh	r3, [r7, #30]
 8014e74:	1ad3      	subs	r3, r2, r3
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	4b08      	ldr	r3, [pc, #32]	; (8014e9c <ip_reass_free_complete_datagram+0x140>)
 8014e7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014e7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3720      	adds	r7, #32
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	0801a36c 	.word	0x0801a36c
 8014e8c:	0801a3a8 	.word	0x0801a3a8
 8014e90:	0801a3b4 	.word	0x0801a3b4
 8014e94:	0801a3dc 	.word	0x0801a3dc
 8014e98:	0801a3f0 	.word	0x0801a3f0
 8014e9c:	20008de4 	.word	0x20008de4
 8014ea0:	0801a410 	.word	0x0801a410

08014ea4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b08a      	sub	sp, #40	; 0x28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014ec2:	4b28      	ldr	r3, [pc, #160]	; (8014f64 <ip_reass_remove_oldest_datagram+0xc0>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014ec8:	e030      	b.n	8014f2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ecc:	695a      	ldr	r2, [r3, #20]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d10c      	bne.n	8014ef0 <ip_reass_remove_oldest_datagram+0x4c>
 8014ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ed8:	699a      	ldr	r2, [r3, #24]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	691b      	ldr	r3, [r3, #16]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d106      	bne.n	8014ef0 <ip_reass_remove_oldest_datagram+0x4c>
 8014ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee4:	899a      	ldrh	r2, [r3, #12]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	889b      	ldrh	r3, [r3, #4]
 8014eea:	b29b      	uxth	r3, r3
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d014      	beq.n	8014f1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d104      	bne.n	8014f06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	61bb      	str	r3, [r7, #24]
 8014f04:	e009      	b.n	8014f1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f08:	7fda      	ldrb	r2, [r3, #31]
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	7fdb      	ldrb	r3, [r3, #31]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d803      	bhi.n	8014f1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f16:	69fb      	ldr	r3, [r7, #28]
 8014f18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d001      	beq.n	8014f26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d1cb      	bne.n	8014eca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014f32:	6a3b      	ldr	r3, [r7, #32]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d008      	beq.n	8014f4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014f38:	69b9      	ldr	r1, [r7, #24]
 8014f3a:	6a38      	ldr	r0, [r7, #32]
 8014f3c:	f7ff ff0e 	bl	8014d5c <ip_reass_free_complete_datagram>
 8014f40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014f42:	697a      	ldr	r2, [r7, #20]
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	4413      	add	r3, r2
 8014f48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	da02      	bge.n	8014f58 <ip_reass_remove_oldest_datagram+0xb4>
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	dcac      	bgt.n	8014eb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014f58:	697b      	ldr	r3, [r7, #20]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3728      	adds	r7, #40	; 0x28
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	20008de0 	.word	0x20008de0

08014f68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014f72:	2004      	movs	r0, #4
 8014f74:	f7f7 f854 	bl	800c020 <memp_malloc>
 8014f78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d110      	bne.n	8014fa2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014f80:	6839      	ldr	r1, [r7, #0]
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f7ff ff8e 	bl	8014ea4 <ip_reass_remove_oldest_datagram>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	4293      	cmp	r3, r2
 8014f8e:	dc03      	bgt.n	8014f98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014f90:	2004      	movs	r0, #4
 8014f92:	f7f7 f845 	bl	800c020 <memp_malloc>
 8014f96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d101      	bne.n	8014fa2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	e016      	b.n	8014fd0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014fa2:	2220      	movs	r2, #32
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f001 fd74 	bl	8016a94 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	220f      	movs	r2, #15
 8014fb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014fb2:	4b09      	ldr	r3, [pc, #36]	; (8014fd8 <ip_reass_enqueue_new_datagram+0x70>)
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014fba:	4a07      	ldr	r2, [pc, #28]	; (8014fd8 <ip_reass_enqueue_new_datagram+0x70>)
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	3308      	adds	r3, #8
 8014fc4:	2214      	movs	r2, #20
 8014fc6:	6879      	ldr	r1, [r7, #4]
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f001 fd55 	bl	8016a78 <memcpy>
  return ipr;
 8014fce:	68fb      	ldr	r3, [r7, #12]
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	20008de0 	.word	0x20008de0

08014fdc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014fe6:	4b10      	ldr	r3, [pc, #64]	; (8015028 <ip_reass_dequeue_datagram+0x4c>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d104      	bne.n	8014ffa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a0c      	ldr	r2, [pc, #48]	; (8015028 <ip_reass_dequeue_datagram+0x4c>)
 8014ff6:	6013      	str	r3, [r2, #0]
 8014ff8:	e00d      	b.n	8015016 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d106      	bne.n	801500e <ip_reass_dequeue_datagram+0x32>
 8015000:	4b0a      	ldr	r3, [pc, #40]	; (801502c <ip_reass_dequeue_datagram+0x50>)
 8015002:	f240 1245 	movw	r2, #325	; 0x145
 8015006:	490a      	ldr	r1, [pc, #40]	; (8015030 <ip_reass_dequeue_datagram+0x54>)
 8015008:	480a      	ldr	r0, [pc, #40]	; (8015034 <ip_reass_dequeue_datagram+0x58>)
 801500a:	f001 fd4b 	bl	8016aa4 <iprintf>
    prev->next = ipr->next;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015016:	6879      	ldr	r1, [r7, #4]
 8015018:	2004      	movs	r0, #4
 801501a:	f7f7 f871 	bl	800c100 <memp_free>
}
 801501e:	bf00      	nop
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	20008de0 	.word	0x20008de0
 801502c:	0801a36c 	.word	0x0801a36c
 8015030:	0801a434 	.word	0x0801a434
 8015034:	0801a3b4 	.word	0x0801a3b4

08015038 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b08c      	sub	sp, #48	; 0x30
 801503c:	af00      	add	r7, sp, #0
 801503e:	60f8      	str	r0, [r7, #12]
 8015040:	60b9      	str	r1, [r7, #8]
 8015042:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015044:	2300      	movs	r3, #0
 8015046:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015048:	2301      	movs	r3, #1
 801504a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	885b      	ldrh	r3, [r3, #2]
 8015056:	b29b      	uxth	r3, r3
 8015058:	4618      	mov	r0, r3
 801505a:	f7f6 fb69 	bl	800b730 <lwip_htons>
 801505e:	4603      	mov	r3, r0
 8015060:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	f003 030f 	and.w	r3, r3, #15
 801506a:	b2db      	uxtb	r3, r3
 801506c:	009b      	lsls	r3, r3, #2
 801506e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015070:	7e7b      	ldrb	r3, [r7, #25]
 8015072:	b29b      	uxth	r3, r3
 8015074:	8b7a      	ldrh	r2, [r7, #26]
 8015076:	429a      	cmp	r2, r3
 8015078:	d202      	bcs.n	8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801507a:	f04f 33ff 	mov.w	r3, #4294967295
 801507e:	e135      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015080:	7e7b      	ldrb	r3, [r7, #25]
 8015082:	b29b      	uxth	r3, r3
 8015084:	8b7a      	ldrh	r2, [r7, #26]
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801508a:	69fb      	ldr	r3, [r7, #28]
 801508c:	88db      	ldrh	r3, [r3, #6]
 801508e:	b29b      	uxth	r3, r3
 8015090:	4618      	mov	r0, r3
 8015092:	f7f6 fb4d 	bl	800b730 <lwip_htons>
 8015096:	4603      	mov	r3, r0
 8015098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801509c:	b29b      	uxth	r3, r3
 801509e:	00db      	lsls	r3, r3, #3
 80150a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	685b      	ldr	r3, [r3, #4]
 80150a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80150a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150aa:	2200      	movs	r2, #0
 80150ac:	701a      	strb	r2, [r3, #0]
 80150ae:	2200      	movs	r2, #0
 80150b0:	705a      	strb	r2, [r3, #1]
 80150b2:	2200      	movs	r2, #0
 80150b4:	709a      	strb	r2, [r3, #2]
 80150b6:	2200      	movs	r2, #0
 80150b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80150ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150bc:	8afa      	ldrh	r2, [r7, #22]
 80150be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80150c0:	8afa      	ldrh	r2, [r7, #22]
 80150c2:	8b7b      	ldrh	r3, [r7, #26]
 80150c4:	4413      	add	r3, r2
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80150cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ce:	88db      	ldrh	r3, [r3, #6]
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	8afa      	ldrh	r2, [r7, #22]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d902      	bls.n	80150de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150d8:	f04f 33ff 	mov.w	r3, #4294967295
 80150dc:	e106      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	627b      	str	r3, [r7, #36]	; 0x24
 80150e4:	e068      	b.n	80151b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80150e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80150ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ee:	889b      	ldrh	r3, [r3, #4]
 80150f0:	b29a      	uxth	r2, r3
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	889b      	ldrh	r3, [r3, #4]
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d235      	bcs.n	8015168 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80150fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015100:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015104:	2b00      	cmp	r3, #0
 8015106:	d020      	beq.n	801514a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801510a:	889b      	ldrh	r3, [r3, #4]
 801510c:	b29a      	uxth	r2, r3
 801510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015110:	88db      	ldrh	r3, [r3, #6]
 8015112:	b29b      	uxth	r3, r3
 8015114:	429a      	cmp	r2, r3
 8015116:	d307      	bcc.n	8015128 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801511a:	88db      	ldrh	r3, [r3, #6]
 801511c:	b29a      	uxth	r2, r3
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	889b      	ldrh	r3, [r3, #4]
 8015122:	b29b      	uxth	r3, r3
 8015124:	429a      	cmp	r2, r3
 8015126:	d902      	bls.n	801512e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015128:	f04f 33ff 	mov.w	r3, #4294967295
 801512c:	e0de      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015130:	68ba      	ldr	r2, [r7, #8]
 8015132:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015136:	88db      	ldrh	r3, [r3, #6]
 8015138:	b29a      	uxth	r2, r3
 801513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513c:	889b      	ldrh	r3, [r3, #4]
 801513e:	b29b      	uxth	r3, r3
 8015140:	429a      	cmp	r2, r3
 8015142:	d03d      	beq.n	80151c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015148:	e03a      	b.n	80151c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514c:	88db      	ldrh	r3, [r3, #6]
 801514e:	b29a      	uxth	r2, r3
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	889b      	ldrh	r3, [r3, #4]
 8015154:	b29b      	uxth	r3, r3
 8015156:	429a      	cmp	r2, r3
 8015158:	d902      	bls.n	8015160 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801515a:	f04f 33ff 	mov.w	r3, #4294967295
 801515e:	e0c5      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	68ba      	ldr	r2, [r7, #8]
 8015164:	605a      	str	r2, [r3, #4]
      break;
 8015166:	e02b      	b.n	80151c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516a:	889b      	ldrh	r3, [r3, #4]
 801516c:	b29a      	uxth	r2, r3
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	889b      	ldrh	r3, [r3, #4]
 8015172:	b29b      	uxth	r3, r3
 8015174:	429a      	cmp	r2, r3
 8015176:	d102      	bne.n	801517e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015178:	f04f 33ff 	mov.w	r3, #4294967295
 801517c:	e0b6      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015180:	889b      	ldrh	r3, [r3, #4]
 8015182:	b29a      	uxth	r2, r3
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	88db      	ldrh	r3, [r3, #6]
 8015188:	b29b      	uxth	r3, r3
 801518a:	429a      	cmp	r2, r3
 801518c:	d202      	bcs.n	8015194 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801518e:	f04f 33ff 	mov.w	r3, #4294967295
 8015192:	e0ab      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015196:	2b00      	cmp	r3, #0
 8015198:	d009      	beq.n	80151ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519c:	88db      	ldrh	r3, [r3, #6]
 801519e:	b29a      	uxth	r2, r3
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	889b      	ldrh	r3, [r3, #4]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d001      	beq.n	80151ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80151aa:	2300      	movs	r3, #0
 80151ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80151b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d193      	bne.n	80150e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80151be:	e000      	b.n	80151c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80151c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80151c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d12d      	bne.n	8015224 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80151c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d01c      	beq.n	8015208 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80151ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d0:	88db      	ldrh	r3, [r3, #6]
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d6:	889b      	ldrh	r3, [r3, #4]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	429a      	cmp	r2, r3
 80151dc:	d906      	bls.n	80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80151de:	4b45      	ldr	r3, [pc, #276]	; (80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80151e4:	4944      	ldr	r1, [pc, #272]	; (80152f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80151e6:	4845      	ldr	r0, [pc, #276]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151e8:	f001 fc5c 	bl	8016aa4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80151ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ee:	68ba      	ldr	r2, [r7, #8]
 80151f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80151f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f4:	88db      	ldrh	r3, [r3, #6]
 80151f6:	b29a      	uxth	r2, r3
 80151f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fa:	889b      	ldrh	r3, [r3, #4]
 80151fc:	b29b      	uxth	r3, r3
 80151fe:	429a      	cmp	r2, r3
 8015200:	d010      	beq.n	8015224 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015202:	2300      	movs	r3, #0
 8015204:	623b      	str	r3, [r7, #32]
 8015206:	e00d      	b.n	8015224 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d006      	beq.n	801521e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015210:	4b38      	ldr	r3, [pc, #224]	; (80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015212:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015216:	493a      	ldr	r1, [pc, #232]	; (8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015218:	4838      	ldr	r0, [pc, #224]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801521a:	f001 fc43 	bl	8016aa4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	68ba      	ldr	r2, [r7, #8]
 8015222:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d105      	bne.n	8015236 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	7f9b      	ldrb	r3, [r3, #30]
 801522e:	f003 0301 	and.w	r3, r3, #1
 8015232:	2b00      	cmp	r3, #0
 8015234:	d059      	beq.n	80152ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015236:	6a3b      	ldr	r3, [r7, #32]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d04f      	beq.n	80152dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d006      	beq.n	8015252 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	889b      	ldrh	r3, [r3, #4]
 801524c:	b29b      	uxth	r3, r3
 801524e:	2b00      	cmp	r3, #0
 8015250:	d002      	beq.n	8015258 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015252:	2300      	movs	r3, #0
 8015254:	623b      	str	r3, [r7, #32]
 8015256:	e041      	b.n	80152dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801525a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015262:	e012      	b.n	801528a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015266:	685b      	ldr	r3, [r3, #4]
 8015268:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801526c:	88db      	ldrh	r3, [r3, #6]
 801526e:	b29a      	uxth	r2, r3
 8015270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015272:	889b      	ldrh	r3, [r3, #4]
 8015274:	b29b      	uxth	r3, r3
 8015276:	429a      	cmp	r2, r3
 8015278:	d002      	beq.n	8015280 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801527a:	2300      	movs	r3, #0
 801527c:	623b      	str	r3, [r7, #32]
            break;
 801527e:	e007      	b.n	8015290 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015282:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528c:	2b00      	cmp	r3, #0
 801528e:	d1e9      	bne.n	8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015290:	6a3b      	ldr	r3, [r7, #32]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d022      	beq.n	80152dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	685b      	ldr	r3, [r3, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d106      	bne.n	80152ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801529e:	4b15      	ldr	r3, [pc, #84]	; (80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152a0:	f240 12df 	movw	r2, #479	; 0x1df
 80152a4:	4917      	ldr	r1, [pc, #92]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152a6:	4815      	ldr	r0, [pc, #84]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152a8:	f001 fbfc 	bl	8016aa4 <iprintf>
          LWIP_ASSERT("sanity check",
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	685b      	ldr	r3, [r3, #4]
 80152b0:	685b      	ldr	r3, [r3, #4]
 80152b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d106      	bne.n	80152c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80152b8:	4b0e      	ldr	r3, [pc, #56]	; (80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80152be:	4911      	ldr	r1, [pc, #68]	; (8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152c0:	480e      	ldr	r0, [pc, #56]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152c2:	f001 fbef 	bl	8016aa4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80152c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d006      	beq.n	80152dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80152ce:	4b09      	ldr	r3, [pc, #36]	; (80152f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80152d4:	490c      	ldr	r1, [pc, #48]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80152d6:	4809      	ldr	r0, [pc, #36]	; (80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152d8:	f001 fbe4 	bl	8016aa4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80152dc:	6a3b      	ldr	r3, [r7, #32]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	bf14      	ite	ne
 80152e2:	2301      	movne	r3, #1
 80152e4:	2300      	moveq	r3, #0
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	e000      	b.n	80152ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80152ea:	2300      	movs	r3, #0
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3730      	adds	r7, #48	; 0x30
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	0801a36c 	.word	0x0801a36c
 80152f8:	0801a450 	.word	0x0801a450
 80152fc:	0801a3b4 	.word	0x0801a3b4
 8015300:	0801a470 	.word	0x0801a470
 8015304:	0801a4a8 	.word	0x0801a4a8
 8015308:	0801a4b8 	.word	0x0801a4b8

0801530c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b08e      	sub	sp, #56	; 0x38
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	f003 030f 	and.w	r3, r3, #15
 8015322:	b2db      	uxtb	r3, r3
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	b2db      	uxtb	r3, r3
 8015328:	2b14      	cmp	r3, #20
 801532a:	f040 8171 	bne.w	8015610 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015330:	88db      	ldrh	r3, [r3, #6]
 8015332:	b29b      	uxth	r3, r3
 8015334:	4618      	mov	r0, r3
 8015336:	f7f6 f9fb 	bl	800b730 <lwip_htons>
 801533a:	4603      	mov	r3, r0
 801533c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015340:	b29b      	uxth	r3, r3
 8015342:	00db      	lsls	r3, r3, #3
 8015344:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015348:	885b      	ldrh	r3, [r3, #2]
 801534a:	b29b      	uxth	r3, r3
 801534c:	4618      	mov	r0, r3
 801534e:	f7f6 f9ef 	bl	800b730 <lwip_htons>
 8015352:	4603      	mov	r3, r0
 8015354:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	f003 030f 	and.w	r3, r3, #15
 801535e:	b2db      	uxtb	r3, r3
 8015360:	009b      	lsls	r3, r3, #2
 8015362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801536a:	b29b      	uxth	r3, r3
 801536c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801536e:	429a      	cmp	r2, r3
 8015370:	f0c0 8150 	bcc.w	8015614 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015378:	b29b      	uxth	r3, r3
 801537a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801537c:	1ad3      	subs	r3, r2, r3
 801537e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f7f7 fdbb 	bl	800cefc <pbuf_clen>
 8015386:	4603      	mov	r3, r0
 8015388:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801538a:	4b8c      	ldr	r3, [pc, #560]	; (80155bc <ip4_reass+0x2b0>)
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	461a      	mov	r2, r3
 8015390:	8c3b      	ldrh	r3, [r7, #32]
 8015392:	4413      	add	r3, r2
 8015394:	2b0a      	cmp	r3, #10
 8015396:	dd10      	ble.n	80153ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015398:	8c3b      	ldrh	r3, [r7, #32]
 801539a:	4619      	mov	r1, r3
 801539c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801539e:	f7ff fd81 	bl	8014ea4 <ip_reass_remove_oldest_datagram>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	f000 8137 	beq.w	8015618 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80153aa:	4b84      	ldr	r3, [pc, #528]	; (80155bc <ip4_reass+0x2b0>)
 80153ac:	881b      	ldrh	r3, [r3, #0]
 80153ae:	461a      	mov	r2, r3
 80153b0:	8c3b      	ldrh	r3, [r7, #32]
 80153b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153b4:	2b0a      	cmp	r3, #10
 80153b6:	f300 812f 	bgt.w	8015618 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153ba:	4b81      	ldr	r3, [pc, #516]	; (80155c0 <ip4_reass+0x2b4>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	633b      	str	r3, [r7, #48]	; 0x30
 80153c0:	e015      	b.n	80153ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80153c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c4:	695a      	ldr	r2, [r3, #20]
 80153c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10c      	bne.n	80153e8 <ip4_reass+0xdc>
 80153ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d0:	699a      	ldr	r2, [r3, #24]
 80153d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d4:	691b      	ldr	r3, [r3, #16]
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d106      	bne.n	80153e8 <ip4_reass+0xdc>
 80153da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153dc:	899a      	ldrh	r2, [r3, #12]
 80153de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e0:	889b      	ldrh	r3, [r3, #4]
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d006      	beq.n	80153f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	633b      	str	r3, [r7, #48]	; 0x30
 80153ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d1e6      	bne.n	80153c2 <ip4_reass+0xb6>
 80153f4:	e000      	b.n	80153f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80153f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80153f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d109      	bne.n	8015412 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80153fe:	8c3b      	ldrh	r3, [r7, #32]
 8015400:	4619      	mov	r1, r3
 8015402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015404:	f7ff fdb0 	bl	8014f68 <ip_reass_enqueue_new_datagram>
 8015408:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540c:	2b00      	cmp	r3, #0
 801540e:	d11c      	bne.n	801544a <ip4_reass+0x13e>
      goto nullreturn;
 8015410:	e105      	b.n	801561e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015414:	88db      	ldrh	r3, [r3, #6]
 8015416:	b29b      	uxth	r3, r3
 8015418:	4618      	mov	r0, r3
 801541a:	f7f6 f989 	bl	800b730 <lwip_htons>
 801541e:	4603      	mov	r3, r0
 8015420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015424:	2b00      	cmp	r3, #0
 8015426:	d110      	bne.n	801544a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542a:	89db      	ldrh	r3, [r3, #14]
 801542c:	4618      	mov	r0, r3
 801542e:	f7f6 f97f 	bl	800b730 <lwip_htons>
 8015432:	4603      	mov	r3, r0
 8015434:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015438:	2b00      	cmp	r3, #0
 801543a:	d006      	beq.n	801544a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543e:	3308      	adds	r3, #8
 8015440:	2214      	movs	r2, #20
 8015442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015444:	4618      	mov	r0, r3
 8015446:	f001 fb17 	bl	8016a78 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801544c:	88db      	ldrh	r3, [r3, #6]
 801544e:	b29b      	uxth	r3, r3
 8015450:	f003 0320 	and.w	r3, r3, #32
 8015454:	2b00      	cmp	r3, #0
 8015456:	bf0c      	ite	eq
 8015458:	2301      	moveq	r3, #1
 801545a:	2300      	movne	r3, #0
 801545c:	b2db      	uxtb	r3, r3
 801545e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015460:	69fb      	ldr	r3, [r7, #28]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d00e      	beq.n	8015484 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015466:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801546a:	4413      	add	r3, r2
 801546c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801546e:	8b7a      	ldrh	r2, [r7, #26]
 8015470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015472:	429a      	cmp	r2, r3
 8015474:	f0c0 80a0 	bcc.w	80155b8 <ip4_reass+0x2ac>
 8015478:	8b7b      	ldrh	r3, [r7, #26]
 801547a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801547e:	4293      	cmp	r3, r2
 8015480:	f200 809a 	bhi.w	80155b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015484:	69fa      	ldr	r2, [r7, #28]
 8015486:	6879      	ldr	r1, [r7, #4]
 8015488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801548a:	f7ff fdd5 	bl	8015038 <ip_reass_chain_frag_into_datagram_and_validate>
 801548e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015496:	f000 809b 	beq.w	80155d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801549a:	4b48      	ldr	r3, [pc, #288]	; (80155bc <ip4_reass+0x2b0>)
 801549c:	881a      	ldrh	r2, [r3, #0]
 801549e:	8c3b      	ldrh	r3, [r7, #32]
 80154a0:	4413      	add	r3, r2
 80154a2:	b29a      	uxth	r2, r3
 80154a4:	4b45      	ldr	r3, [pc, #276]	; (80155bc <ip4_reass+0x2b0>)
 80154a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00d      	beq.n	80154ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80154ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80154b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154b2:	4413      	add	r3, r2
 80154b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80154b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b8:	8a7a      	ldrh	r2, [r7, #18]
 80154ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80154bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154be:	7f9b      	ldrb	r3, [r3, #30]
 80154c0:	f043 0301 	orr.w	r3, r3, #1
 80154c4:	b2da      	uxtb	r2, r3
 80154c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	2b01      	cmp	r3, #1
 80154ce:	d171      	bne.n	80155b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80154d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d2:	8b9b      	ldrh	r3, [r3, #28]
 80154d4:	3314      	adds	r3, #20
 80154d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80154d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154da:	685b      	ldr	r3, [r3, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80154e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80154ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ec:	3308      	adds	r3, #8
 80154ee:	2214      	movs	r2, #20
 80154f0:	4619      	mov	r1, r3
 80154f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154f4:	f001 fac0 	bl	8016a78 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80154f8:	8a3b      	ldrh	r3, [r7, #16]
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7f6 f918 	bl	800b730 <lwip_htons>
 8015500:	4603      	mov	r3, r0
 8015502:	461a      	mov	r2, r3
 8015504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015506:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550a:	2200      	movs	r2, #0
 801550c:	719a      	strb	r2, [r3, #6]
 801550e:	2200      	movs	r2, #0
 8015510:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015514:	2200      	movs	r2, #0
 8015516:	729a      	strb	r2, [r3, #10]
 8015518:	2200      	movs	r2, #0
 801551a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015522:	e00d      	b.n	8015540 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801552a:	2114      	movs	r1, #20
 801552c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801552e:	f7f7 fbd7 	bl	800cce0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015532:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f7f7 fd1b 	bl	800cf70 <pbuf_cat>
      r = iprh->next_pbuf;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015542:	2b00      	cmp	r3, #0
 8015544:	d1ee      	bne.n	8015524 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015546:	4b1e      	ldr	r3, [pc, #120]	; (80155c0 <ip4_reass+0x2b4>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801554c:	429a      	cmp	r2, r3
 801554e:	d102      	bne.n	8015556 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015550:	2300      	movs	r3, #0
 8015552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015554:	e010      	b.n	8015578 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015556:	4b1a      	ldr	r3, [pc, #104]	; (80155c0 <ip4_reass+0x2b4>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801555c:	e007      	b.n	801556e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015564:	429a      	cmp	r2, r3
 8015566:	d006      	beq.n	8015576 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015570:	2b00      	cmp	r3, #0
 8015572:	d1f4      	bne.n	801555e <ip4_reass+0x252>
 8015574:	e000      	b.n	8015578 <ip4_reass+0x26c>
          break;
 8015576:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801557a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801557c:	f7ff fd2e 	bl	8014fdc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7f7 fcbb 	bl	800cefc <pbuf_clen>
 8015586:	4603      	mov	r3, r0
 8015588:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801558a:	4b0c      	ldr	r3, [pc, #48]	; (80155bc <ip4_reass+0x2b0>)
 801558c:	881b      	ldrh	r3, [r3, #0]
 801558e:	8c3a      	ldrh	r2, [r7, #32]
 8015590:	429a      	cmp	r2, r3
 8015592:	d906      	bls.n	80155a2 <ip4_reass+0x296>
 8015594:	4b0b      	ldr	r3, [pc, #44]	; (80155c4 <ip4_reass+0x2b8>)
 8015596:	f240 229b 	movw	r2, #667	; 0x29b
 801559a:	490b      	ldr	r1, [pc, #44]	; (80155c8 <ip4_reass+0x2bc>)
 801559c:	480b      	ldr	r0, [pc, #44]	; (80155cc <ip4_reass+0x2c0>)
 801559e:	f001 fa81 	bl	8016aa4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80155a2:	4b06      	ldr	r3, [pc, #24]	; (80155bc <ip4_reass+0x2b0>)
 80155a4:	881a      	ldrh	r2, [r3, #0]
 80155a6:	8c3b      	ldrh	r3, [r7, #32]
 80155a8:	1ad3      	subs	r3, r2, r3
 80155aa:	b29a      	uxth	r2, r3
 80155ac:	4b03      	ldr	r3, [pc, #12]	; (80155bc <ip4_reass+0x2b0>)
 80155ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	e038      	b.n	8015626 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80155b4:	2300      	movs	r3, #0
 80155b6:	e036      	b.n	8015626 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80155b8:	bf00      	nop
 80155ba:	e00a      	b.n	80155d2 <ip4_reass+0x2c6>
 80155bc:	20008de4 	.word	0x20008de4
 80155c0:	20008de0 	.word	0x20008de0
 80155c4:	0801a36c 	.word	0x0801a36c
 80155c8:	0801a4dc 	.word	0x0801a4dc
 80155cc:	0801a3b4 	.word	0x0801a3b4
    goto nullreturn_ipr;
 80155d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80155d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d106      	bne.n	80155e6 <ip4_reass+0x2da>
 80155d8:	4b15      	ldr	r3, [pc, #84]	; (8015630 <ip4_reass+0x324>)
 80155da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80155de:	4915      	ldr	r1, [pc, #84]	; (8015634 <ip4_reass+0x328>)
 80155e0:	4815      	ldr	r0, [pc, #84]	; (8015638 <ip4_reass+0x32c>)
 80155e2:	f001 fa5f 	bl	8016aa4 <iprintf>
  if (ipr->p == NULL) {
 80155e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d116      	bne.n	801561c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80155ee:	4b13      	ldr	r3, [pc, #76]	; (801563c <ip4_reass+0x330>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d006      	beq.n	8015606 <ip4_reass+0x2fa>
 80155f8:	4b0d      	ldr	r3, [pc, #52]	; (8015630 <ip4_reass+0x324>)
 80155fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80155fe:	4910      	ldr	r1, [pc, #64]	; (8015640 <ip4_reass+0x334>)
 8015600:	480d      	ldr	r0, [pc, #52]	; (8015638 <ip4_reass+0x32c>)
 8015602:	f001 fa4f 	bl	8016aa4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015606:	2100      	movs	r1, #0
 8015608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801560a:	f7ff fce7 	bl	8014fdc <ip_reass_dequeue_datagram>
 801560e:	e006      	b.n	801561e <ip4_reass+0x312>
    goto nullreturn;
 8015610:	bf00      	nop
 8015612:	e004      	b.n	801561e <ip4_reass+0x312>
    goto nullreturn;
 8015614:	bf00      	nop
 8015616:	e002      	b.n	801561e <ip4_reass+0x312>
      goto nullreturn;
 8015618:	bf00      	nop
 801561a:	e000      	b.n	801561e <ip4_reass+0x312>
  }

nullreturn:
 801561c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f7f7 fbe4 	bl	800cdec <pbuf_free>
  return NULL;
 8015624:	2300      	movs	r3, #0
}
 8015626:	4618      	mov	r0, r3
 8015628:	3738      	adds	r7, #56	; 0x38
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	0801a36c 	.word	0x0801a36c
 8015634:	0801a4f8 	.word	0x0801a4f8
 8015638:	0801a3b4 	.word	0x0801a3b4
 801563c:	20008de0 	.word	0x20008de0
 8015640:	0801a504 	.word	0x0801a504

08015644 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015648:	2005      	movs	r0, #5
 801564a:	f7f6 fce9 	bl	800c020 <memp_malloc>
 801564e:	4603      	mov	r3, r0
}
 8015650:	4618      	mov	r0, r3
 8015652:	bd80      	pop	{r7, pc}

08015654 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d106      	bne.n	8015670 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015662:	4b07      	ldr	r3, [pc, #28]	; (8015680 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015664:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015668:	4906      	ldr	r1, [pc, #24]	; (8015684 <ip_frag_free_pbuf_custom_ref+0x30>)
 801566a:	4807      	ldr	r0, [pc, #28]	; (8015688 <ip_frag_free_pbuf_custom_ref+0x34>)
 801566c:	f001 fa1a 	bl	8016aa4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015670:	6879      	ldr	r1, [r7, #4]
 8015672:	2005      	movs	r0, #5
 8015674:	f7f6 fd44 	bl	800c100 <memp_free>
}
 8015678:	bf00      	nop
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}
 8015680:	0801a36c 	.word	0x0801a36c
 8015684:	0801a524 	.word	0x0801a524
 8015688:	0801a3b4 	.word	0x0801a3b4

0801568c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d106      	bne.n	80156ac <ipfrag_free_pbuf_custom+0x20>
 801569e:	4b11      	ldr	r3, [pc, #68]	; (80156e4 <ipfrag_free_pbuf_custom+0x58>)
 80156a0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80156a4:	4910      	ldr	r1, [pc, #64]	; (80156e8 <ipfrag_free_pbuf_custom+0x5c>)
 80156a6:	4811      	ldr	r0, [pc, #68]	; (80156ec <ipfrag_free_pbuf_custom+0x60>)
 80156a8:	f001 f9fc 	bl	8016aa4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80156ac:	68fa      	ldr	r2, [r7, #12]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d006      	beq.n	80156c2 <ipfrag_free_pbuf_custom+0x36>
 80156b4:	4b0b      	ldr	r3, [pc, #44]	; (80156e4 <ipfrag_free_pbuf_custom+0x58>)
 80156b6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80156ba:	490d      	ldr	r1, [pc, #52]	; (80156f0 <ipfrag_free_pbuf_custom+0x64>)
 80156bc:	480b      	ldr	r0, [pc, #44]	; (80156ec <ipfrag_free_pbuf_custom+0x60>)
 80156be:	f001 f9f1 	bl	8016aa4 <iprintf>
  if (pcr->original != NULL) {
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	695b      	ldr	r3, [r3, #20]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d004      	beq.n	80156d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	695b      	ldr	r3, [r3, #20]
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7f7 fb8c 	bl	800cdec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80156d4:	68f8      	ldr	r0, [r7, #12]
 80156d6:	f7ff ffbd 	bl	8015654 <ip_frag_free_pbuf_custom_ref>
}
 80156da:	bf00      	nop
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	0801a36c 	.word	0x0801a36c
 80156e8:	0801a530 	.word	0x0801a530
 80156ec:	0801a3b4 	.word	0x0801a3b4
 80156f0:	0801a53c 	.word	0x0801a53c

080156f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b094      	sub	sp, #80	; 0x50
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	60b9      	str	r1, [r7, #8]
 80156fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015700:	2300      	movs	r3, #0
 8015702:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801570a:	3b14      	subs	r3, #20
 801570c:	2b00      	cmp	r3, #0
 801570e:	da00      	bge.n	8015712 <ip4_frag+0x1e>
 8015710:	3307      	adds	r3, #7
 8015712:	10db      	asrs	r3, r3, #3
 8015714:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015716:	2314      	movs	r3, #20
 8015718:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015722:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	f003 030f 	and.w	r3, r3, #15
 801572c:	b2db      	uxtb	r3, r3
 801572e:	009b      	lsls	r3, r3, #2
 8015730:	b2db      	uxtb	r3, r3
 8015732:	2b14      	cmp	r3, #20
 8015734:	d002      	beq.n	801573c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015736:	f06f 0305 	mvn.w	r3, #5
 801573a:	e110      	b.n	801595e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	895b      	ldrh	r3, [r3, #10]
 8015740:	2b13      	cmp	r3, #19
 8015742:	d809      	bhi.n	8015758 <ip4_frag+0x64>
 8015744:	4b88      	ldr	r3, [pc, #544]	; (8015968 <ip4_frag+0x274>)
 8015746:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801574a:	4988      	ldr	r1, [pc, #544]	; (801596c <ip4_frag+0x278>)
 801574c:	4888      	ldr	r0, [pc, #544]	; (8015970 <ip4_frag+0x27c>)
 801574e:	f001 f9a9 	bl	8016aa4 <iprintf>
 8015752:	f06f 0305 	mvn.w	r3, #5
 8015756:	e102      	b.n	801595e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575a:	88db      	ldrh	r3, [r3, #6]
 801575c:	b29b      	uxth	r3, r3
 801575e:	4618      	mov	r0, r3
 8015760:	f7f5 ffe6 	bl	800b730 <lwip_htons>
 8015764:	4603      	mov	r3, r0
 8015766:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015768:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801576a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801576e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015772:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015778:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	891b      	ldrh	r3, [r3, #8]
 801577e:	3b14      	subs	r3, #20
 8015780:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015784:	e0e1      	b.n	801594a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015786:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015788:	00db      	lsls	r3, r3, #3
 801578a:	b29b      	uxth	r3, r3
 801578c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015790:	4293      	cmp	r3, r2
 8015792:	bf28      	it	cs
 8015794:	4613      	movcs	r3, r2
 8015796:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015798:	f44f 7220 	mov.w	r2, #640	; 0x280
 801579c:	2114      	movs	r1, #20
 801579e:	200e      	movs	r0, #14
 80157a0:	f7f7 f840 	bl	800c824 <pbuf_alloc>
 80157a4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80157a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f000 80d5 	beq.w	8015958 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80157ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b0:	895b      	ldrh	r3, [r3, #10]
 80157b2:	2b13      	cmp	r3, #19
 80157b4:	d806      	bhi.n	80157c4 <ip4_frag+0xd0>
 80157b6:	4b6c      	ldr	r3, [pc, #432]	; (8015968 <ip4_frag+0x274>)
 80157b8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80157bc:	496d      	ldr	r1, [pc, #436]	; (8015974 <ip4_frag+0x280>)
 80157be:	486c      	ldr	r0, [pc, #432]	; (8015970 <ip4_frag+0x27c>)
 80157c0:	f001 f970 	bl	8016aa4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80157c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	2214      	movs	r2, #20
 80157ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80157cc:	4618      	mov	r0, r3
 80157ce:	f001 f953 	bl	8016a78 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80157d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d4:	685b      	ldr	r3, [r3, #4]
 80157d6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80157d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80157de:	e064      	b.n	80158aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	895a      	ldrh	r2, [r3, #10]
 80157e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	895b      	ldrh	r3, [r3, #10]
 80157ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d906      	bls.n	8015802 <ip4_frag+0x10e>
 80157f4:	4b5c      	ldr	r3, [pc, #368]	; (8015968 <ip4_frag+0x274>)
 80157f6:	f240 322d 	movw	r2, #813	; 0x32d
 80157fa:	495f      	ldr	r1, [pc, #380]	; (8015978 <ip4_frag+0x284>)
 80157fc:	485c      	ldr	r0, [pc, #368]	; (8015970 <ip4_frag+0x27c>)
 80157fe:	f001 f951 	bl	8016aa4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015802:	8bfa      	ldrh	r2, [r7, #30]
 8015804:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015808:	4293      	cmp	r3, r2
 801580a:	bf28      	it	cs
 801580c:	4613      	movcs	r3, r2
 801580e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015812:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015816:	2b00      	cmp	r3, #0
 8015818:	d105      	bne.n	8015826 <ip4_frag+0x132>
        poff = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	60fb      	str	r3, [r7, #12]
        continue;
 8015824:	e041      	b.n	80158aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015826:	f7ff ff0d 	bl	8015644 <ip_frag_alloc_pbuf_custom_ref>
 801582a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801582c:	69bb      	ldr	r3, [r7, #24]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d103      	bne.n	801583a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015834:	f7f7 fada 	bl	800cdec <pbuf_free>
        goto memerr;
 8015838:	e08f      	b.n	801595a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801583a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015842:	4413      	add	r3, r2
 8015844:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015848:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801584c:	9201      	str	r2, [sp, #4]
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	4603      	mov	r3, r0
 8015852:	2241      	movs	r2, #65	; 0x41
 8015854:	2000      	movs	r0, #0
 8015856:	f7f7 f90f 	bl	800ca78 <pbuf_alloced_custom>
 801585a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d106      	bne.n	8015870 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015862:	69b8      	ldr	r0, [r7, #24]
 8015864:	f7ff fef6 	bl	8015654 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801586a:	f7f7 fabf 	bl	800cdec <pbuf_free>
        goto memerr;
 801586e:	e074      	b.n	801595a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f7f7 fb5b 	bl	800cf2c <pbuf_ref>
      pcr->original = p;
 8015876:	69bb      	ldr	r3, [r7, #24]
 8015878:	68fa      	ldr	r2, [r7, #12]
 801587a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	4a3f      	ldr	r2, [pc, #252]	; (801597c <ip4_frag+0x288>)
 8015880:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015882:	6979      	ldr	r1, [r7, #20]
 8015884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015886:	f7f7 fb73 	bl	800cf70 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801588a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801588e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015892:	1ad3      	subs	r3, r2, r3
 8015894:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015898:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801589c:	2b00      	cmp	r3, #0
 801589e:	d004      	beq.n	80158aa <ip4_frag+0x1b6>
        poff = 0;
 80158a0:	2300      	movs	r3, #0
 80158a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80158aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d196      	bne.n	80157e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80158b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80158b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80158b8:	4413      	add	r3, r2
 80158ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80158c0:	f1a3 0213 	sub.w	r2, r3, #19
 80158c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158c8:	429a      	cmp	r2, r3
 80158ca:	bfcc      	ite	gt
 80158cc:	2301      	movgt	r3, #1
 80158ce:	2300      	movle	r3, #0
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80158d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80158d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80158de:	6a3b      	ldr	r3, [r7, #32]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d002      	beq.n	80158ea <ip4_frag+0x1f6>
 80158e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d003      	beq.n	80158f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80158ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80158f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80158f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7f5 ff1b 	bl	800b730 <lwip_htons>
 80158fa:	4603      	mov	r3, r0
 80158fc:	461a      	mov	r2, r3
 80158fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015900:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015904:	3314      	adds	r3, #20
 8015906:	b29b      	uxth	r3, r3
 8015908:	4618      	mov	r0, r3
 801590a:	f7f5 ff11 	bl	800b730 <lwip_htons>
 801590e:	4603      	mov	r3, r0
 8015910:	461a      	mov	r2, r3
 8015912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015914:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015918:	2200      	movs	r2, #0
 801591a:	729a      	strb	r2, [r3, #10]
 801591c:	2200      	movs	r2, #0
 801591e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	695b      	ldr	r3, [r3, #20]
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015928:	68b8      	ldr	r0, [r7, #8]
 801592a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801592c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801592e:	f7f7 fa5d 	bl	800cdec <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015932:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015936:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015938:	1ad3      	subs	r3, r2, r3
 801593a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801593e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015942:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015944:	4413      	add	r3, r2
 8015946:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801594a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801594e:	2b00      	cmp	r3, #0
 8015950:	f47f af19 	bne.w	8015786 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015954:	2300      	movs	r3, #0
 8015956:	e002      	b.n	801595e <ip4_frag+0x26a>
      goto memerr;
 8015958:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801595a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801595e:	4618      	mov	r0, r3
 8015960:	3748      	adds	r7, #72	; 0x48
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	0801a36c 	.word	0x0801a36c
 801596c:	0801a548 	.word	0x0801a548
 8015970:	0801a3b4 	.word	0x0801a3b4
 8015974:	0801a564 	.word	0x0801a564
 8015978:	0801a584 	.word	0x0801a584
 801597c:	0801568d 	.word	0x0801568d

08015980 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b086      	sub	sp, #24
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801598a:	230e      	movs	r3, #14
 801598c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	895b      	ldrh	r3, [r3, #10]
 8015992:	2b0e      	cmp	r3, #14
 8015994:	d96e      	bls.n	8015a74 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	7bdb      	ldrb	r3, [r3, #15]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d106      	bne.n	80159ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80159a4:	3301      	adds	r3, #1
 80159a6:	b2da      	uxtb	r2, r3
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	685b      	ldr	r3, [r3, #4]
 80159b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	7b1a      	ldrb	r2, [r3, #12]
 80159b6:	7b5b      	ldrb	r3, [r3, #13]
 80159b8:	021b      	lsls	r3, r3, #8
 80159ba:	4313      	orrs	r3, r2
 80159bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	f003 0301 	and.w	r3, r3, #1
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d023      	beq.n	8015a12 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d10f      	bne.n	80159f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	785b      	ldrb	r3, [r3, #1]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d11b      	bne.n	8015a12 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80159de:	2b5e      	cmp	r3, #94	; 0x5e
 80159e0:	d117      	bne.n	8015a12 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	7b5b      	ldrb	r3, [r3, #13]
 80159e6:	f043 0310 	orr.w	r3, r3, #16
 80159ea:	b2da      	uxtb	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	735a      	strb	r2, [r3, #13]
 80159f0:	e00f      	b.n	8015a12 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80159f2:	693b      	ldr	r3, [r7, #16]
 80159f4:	2206      	movs	r2, #6
 80159f6:	4928      	ldr	r1, [pc, #160]	; (8015a98 <ethernet_input+0x118>)
 80159f8:	4618      	mov	r0, r3
 80159fa:	f001 f82d 	bl	8016a58 <memcmp>
 80159fe:	4603      	mov	r3, r0
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d106      	bne.n	8015a12 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	7b5b      	ldrb	r3, [r3, #13]
 8015a08:	f043 0308 	orr.w	r3, r3, #8
 8015a0c:	b2da      	uxtb	r2, r3
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015a12:	89fb      	ldrh	r3, [r7, #14]
 8015a14:	2b08      	cmp	r3, #8
 8015a16:	d003      	beq.n	8015a20 <ethernet_input+0xa0>
 8015a18:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015a1c:	d014      	beq.n	8015a48 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015a1e:	e032      	b.n	8015a86 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a26:	f003 0308 	and.w	r3, r3, #8
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d024      	beq.n	8015a78 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a2e:	8afb      	ldrh	r3, [r7, #22]
 8015a30:	4619      	mov	r1, r3
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f7f7 f954 	bl	800cce0 <pbuf_remove_header>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d11e      	bne.n	8015a7c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015a3e:	6839      	ldr	r1, [r7, #0]
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7fe fe91 	bl	8014768 <ip4_input>
      break;
 8015a46:	e013      	b.n	8015a70 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a4e:	f003 0308 	and.w	r3, r3, #8
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d014      	beq.n	8015a80 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a56:	8afb      	ldrh	r3, [r7, #22]
 8015a58:	4619      	mov	r1, r3
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f7f7 f940 	bl	800cce0 <pbuf_remove_header>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d10e      	bne.n	8015a84 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015a66:	6839      	ldr	r1, [r7, #0]
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	f7fe f831 	bl	8013ad0 <etharp_input>
      break;
 8015a6e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015a70:	2300      	movs	r3, #0
 8015a72:	e00c      	b.n	8015a8e <ethernet_input+0x10e>
    goto free_and_return;
 8015a74:	bf00      	nop
 8015a76:	e006      	b.n	8015a86 <ethernet_input+0x106>
        goto free_and_return;
 8015a78:	bf00      	nop
 8015a7a:	e004      	b.n	8015a86 <ethernet_input+0x106>
        goto free_and_return;
 8015a7c:	bf00      	nop
 8015a7e:	e002      	b.n	8015a86 <ethernet_input+0x106>
        goto free_and_return;
 8015a80:	bf00      	nop
 8015a82:	e000      	b.n	8015a86 <ethernet_input+0x106>
        goto free_and_return;
 8015a84:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f7f7 f9b0 	bl	800cdec <pbuf_free>
  return ERR_OK;
 8015a8c:	2300      	movs	r3, #0
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3718      	adds	r7, #24
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	0801a90c 	.word	0x0801a90c

08015a9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b086      	sub	sp, #24
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
 8015aa8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015aaa:	8c3b      	ldrh	r3, [r7, #32]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f5 fe3f 	bl	800b730 <lwip_htons>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015ab6:	210e      	movs	r1, #14
 8015ab8:	68b8      	ldr	r0, [r7, #8]
 8015aba:	f7f7 f901 	bl	800ccc0 <pbuf_add_header>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d125      	bne.n	8015b10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	8afa      	ldrh	r2, [r7, #22]
 8015ace:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	2206      	movs	r2, #6
 8015ad4:	6839      	ldr	r1, [r7, #0]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f000 ffce 	bl	8016a78 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	3306      	adds	r3, #6
 8015ae0:	2206      	movs	r2, #6
 8015ae2:	6879      	ldr	r1, [r7, #4]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f000 ffc7 	bl	8016a78 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015af0:	2b06      	cmp	r3, #6
 8015af2:	d006      	beq.n	8015b02 <ethernet_output+0x66>
 8015af4:	4b0a      	ldr	r3, [pc, #40]	; (8015b20 <ethernet_output+0x84>)
 8015af6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015afa:	490a      	ldr	r1, [pc, #40]	; (8015b24 <ethernet_output+0x88>)
 8015afc:	480a      	ldr	r0, [pc, #40]	; (8015b28 <ethernet_output+0x8c>)
 8015afe:	f000 ffd1 	bl	8016aa4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	699b      	ldr	r3, [r3, #24]
 8015b06:	68b9      	ldr	r1, [r7, #8]
 8015b08:	68f8      	ldr	r0, [r7, #12]
 8015b0a:	4798      	blx	r3
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	e002      	b.n	8015b16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015b10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015b12:	f06f 0301 	mvn.w	r3, #1
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3718      	adds	r7, #24
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	0801a594 	.word	0x0801a594
 8015b24:	0801a5cc 	.word	0x0801a5cc
 8015b28:	0801a600 	.word	0x0801a600

08015b2c <analog_to_digital_converter_test>:




result_test analog_to_digital_converter_test()
{
 8015b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b2e:	b093      	sub	sp, #76	; 0x4c
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
	result_test result;
	uint32_t adcVal1;
	uint32_t expected_adc_value=0;
 8015b34:	2300      	movs	r3, #0
 8015b36:	647b      	str	r3, [r7, #68]	; 0x44
	 //	Enable ADC and start ADC conversion
	 HAL_ADC_Start(ADC_1);
 8015b38:	4822      	ldr	r0, [pc, #136]	; (8015bc4 <analog_to_digital_converter_test+0x98>)
 8015b3a:	f7ec f9d5 	bl	8001ee8 <HAL_ADC_Start>
	 //	Wait for ADC conversion to be completed
	 HAL_ADC_PollForConversion(ADC_1, 10);
 8015b3e:	210a      	movs	r1, #10
 8015b40:	4820      	ldr	r0, [pc, #128]	; (8015bc4 <analog_to_digital_converter_test+0x98>)
 8015b42:	f7ec fa9f 	bl	8002084 <HAL_ADC_PollForConversion>

	 //	Get ADC value from ADC data register
	  adcVal1 = HAL_ADC_GetValue(ADC_1);
 8015b46:	481f      	ldr	r0, [pc, #124]	; (8015bc4 <analog_to_digital_converter_test+0x98>)
 8015b48:	f7ec fc37 	bl	80023ba <HAL_ADC_GetValue>
 8015b4c:	6438      	str	r0, [r7, #64]	; 0x40

	if(expected_adc_value-100 < adcVal1 && adcVal1 < expected_adc_value+100 )
 8015b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b50:	3b64      	subs	r3, #100	; 0x64
 8015b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d90f      	bls.n	8015b78 <analog_to_digital_converter_test+0x4c>
 8015b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b5a:	3364      	adds	r3, #100	; 0x64
 8015b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d20a      	bcs.n	8015b78 <analog_to_digital_converter_test+0x4c>
	{
		result.bool_test=TRUE;
 8015b62:	2301      	movs	r3, #1
 8015b64:	733b      	strb	r3, [r7, #12]
		memcpy(result.msg , "Success",  8);
 8015b66:	f107 030c 	add.w	r3, r7, #12
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	2208      	movs	r2, #8
 8015b6e:	4916      	ldr	r1, [pc, #88]	; (8015bc8 <analog_to_digital_converter_test+0x9c>)
 8015b70:	4618      	mov	r0, r3
 8015b72:	f000 ff81 	bl	8016a78 <memcpy>
 8015b76:	e009      	b.n	8015b8c <analog_to_digital_converter_test+0x60>
	}
	else
	{
		result.bool_test=FALSE;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	733b      	strb	r3, [r7, #12]
		memcpy(result.msg , "URT-4, bad receive data",  24);
 8015b7c:	f107 030c 	add.w	r3, r7, #12
 8015b80:	3301      	adds	r3, #1
 8015b82:	2218      	movs	r2, #24
 8015b84:	4911      	ldr	r1, [pc, #68]	; (8015bcc <analog_to_digital_converter_test+0xa0>)
 8015b86:	4618      	mov	r0, r3
 8015b88:	f000 ff76 	bl	8016a78 <memcpy>
	}
	return result;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f107 040c 	add.w	r4, r7, #12
 8015b92:	469c      	mov	ip, r3
 8015b94:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8015b98:	4665      	mov	r5, ip
 8015b9a:	4626      	mov	r6, r4
 8015b9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015b9e:	6028      	str	r0, [r5, #0]
 8015ba0:	6069      	str	r1, [r5, #4]
 8015ba2:	60aa      	str	r2, [r5, #8]
 8015ba4:	60eb      	str	r3, [r5, #12]
 8015ba6:	3410      	adds	r4, #16
 8015ba8:	f10c 0c10 	add.w	ip, ip, #16
 8015bac:	4574      	cmp	r4, lr
 8015bae:	d1f3      	bne.n	8015b98 <analog_to_digital_converter_test+0x6c>
 8015bb0:	4663      	mov	r3, ip
 8015bb2:	4622      	mov	r2, r4
 8015bb4:	8811      	ldrh	r1, [r2, #0]
 8015bb6:	7892      	ldrb	r2, [r2, #2]
 8015bb8:	8019      	strh	r1, [r3, #0]
 8015bba:	709a      	strb	r2, [r3, #2]
}
 8015bbc:	6878      	ldr	r0, [r7, #4]
 8015bbe:	374c      	adds	r7, #76	; 0x4c
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bc4:	200001ec 	.word	0x200001ec
 8015bc8:	0801a628 	.word	0x0801a628
 8015bcc:	0801a630 	.word	0x0801a630

08015bd0 <ADC_tests>:



void ADC_tests( result_test*result)
{
 8015bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bd2:	b091      	sub	sp, #68	; 0x44
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	63f8      	str	r0, [r7, #60]	; 0x3c

	HAL_UART_Transmit(UART_DEBUG, "start initialization", 21, TIMEOUT_TIME_100);
 8015bd8:	2364      	movs	r3, #100	; 0x64
 8015bda:	2215      	movs	r2, #21
 8015bdc:	4912      	ldr	r1, [pc, #72]	; (8015c28 <ADC_tests+0x58>)
 8015bde:	4813      	ldr	r0, [pc, #76]	; (8015c2c <ADC_tests+0x5c>)
 8015be0:	f7f3 f926 	bl	8008e30 <HAL_UART_Transmit>

	*result=analog_to_digital_converter_test();
 8015be4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8015be6:	463b      	mov	r3, r7
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7ff ff9f 	bl	8015b2c <analog_to_digital_converter_test>
 8015bee:	463b      	mov	r3, r7
 8015bf0:	4620      	mov	r0, r4
 8015bf2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	f8d1 c000 	ldr.w	ip, [r1]
 8015bfe:	684e      	ldr	r6, [r1, #4]
 8015c00:	688d      	ldr	r5, [r1, #8]
 8015c02:	68c9      	ldr	r1, [r1, #12]
 8015c04:	f8c2 c000 	str.w	ip, [r2]
 8015c08:	6056      	str	r6, [r2, #4]
 8015c0a:	6095      	str	r5, [r2, #8]
 8015c0c:	60d1      	str	r1, [r2, #12]
 8015c0e:	3310      	adds	r3, #16
 8015c10:	3010      	adds	r0, #16
 8015c12:	42a3      	cmp	r3, r4
 8015c14:	d1ef      	bne.n	8015bf6 <ADC_tests+0x26>
 8015c16:	4602      	mov	r2, r0
 8015c18:	8819      	ldrh	r1, [r3, #0]
 8015c1a:	789b      	ldrb	r3, [r3, #2]
 8015c1c:	8011      	strh	r1, [r2, #0]
 8015c1e:	7093      	strb	r3, [r2, #2]

}
 8015c20:	bf00      	nop
 8015c22:	3744      	adds	r7, #68	; 0x44
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c28:	0801a648 	.word	0x0801a648
 8015c2c:	20000694 	.word	0x20000694

08015c30 <HAL_UART_RxCpltCallback>:

/**
  * @brief This function is called when *any* UART completes receiving X bytes.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8015c30:	b480      	push	{r7}
 8015c32:	b083      	sub	sp, #12
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
	if(huart==UART_5)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	4a09      	ldr	r2, [pc, #36]	; (8015c60 <HAL_UART_RxCpltCallback+0x30>)
 8015c3c:	4293      	cmp	r3, r2
 8015c3e:	d102      	bne.n	8015c46 <HAL_UART_RxCpltCallback+0x16>
		receivere_UART5_flag_RxCpltCallback = TRUE;
 8015c40:	4b08      	ldr	r3, [pc, #32]	; (8015c64 <HAL_UART_RxCpltCallback+0x34>)
 8015c42:	2201      	movs	r2, #1
 8015c44:	701a      	strb	r2, [r3, #0]
	if(huart==UART_4)
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	4a07      	ldr	r2, [pc, #28]	; (8015c68 <HAL_UART_RxCpltCallback+0x38>)
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d102      	bne.n	8015c54 <HAL_UART_RxCpltCallback+0x24>
		receivere_UART4_flag_RxCpltCallback = TRUE;
 8015c4e:	4b07      	ldr	r3, [pc, #28]	; (8015c6c <HAL_UART_RxCpltCallback+0x3c>)
 8015c50:	2201      	movs	r2, #1
 8015c52:	701a      	strb	r2, [r3, #0]
}
 8015c54:	bf00      	nop
 8015c56:	370c      	adds	r7, #12
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5e:	4770      	bx	lr
 8015c60:	2000060c 	.word	0x2000060c
 8015c64:	20008de6 	.word	0x20008de6
 8015c68:	20000584 	.word	0x20000584
 8015c6c:	20008de7 	.word	0x20008de7

08015c70 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8015c70:	b480      	push	{r7}
 8015c72:	b083      	sub	sp, #12
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
	flag_R_slave=TRUE;
 8015c78:	4b04      	ldr	r3, [pc, #16]	; (8015c8c <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8015c7a:	2201      	movs	r2, #1
 8015c7c:	701a      	strb	r2, [r3, #0]
}
 8015c7e:	bf00      	nop
 8015c80:	370c      	adds	r7, #12
 8015c82:	46bd      	mov	sp, r7
 8015c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c88:	4770      	bx	lr
 8015c8a:	bf00      	nop
 8015c8c:	20008de9 	.word	0x20008de9

08015c90 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
	flag_R_Master=TRUE;
 8015c98:	4b04      	ldr	r3, [pc, #16]	; (8015cac <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8015c9a:	2201      	movs	r2, #1
 8015c9c:	701a      	strb	r2, [r3, #0]

 }
 8015c9e:	bf00      	nop
 8015ca0:	370c      	adds	r7, #12
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop
 8015cac:	20008de8 	.word	0x20008de8

08015cb0 <HAL_ADC_ConvCpltCallback>:

// ADC interrupt Callback (convert data finish)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8015cb0:	b480      	push	{r7}
 8015cb2:	b083      	sub	sp, #12
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
	flag_ADC_ConvCpltCallback = TRUE;
 8015cb8:	4b04      	ldr	r3, [pc, #16]	; (8015ccc <HAL_ADC_ConvCpltCallback+0x1c>)
 8015cba:	2201      	movs	r2, #1
 8015cbc:	701a      	strb	r2, [r3, #0]
}
 8015cbe:	bf00      	nop
 8015cc0:	370c      	adds	r7, #12
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc8:	4770      	bx	lr
 8015cca:	bf00      	nop
 8015ccc:	20008dea 	.word	0x20008dea

08015cd0 <HAL_TIM_PeriodElapsedCallback>:


// == Timer Callback ======================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	b083      	sub	sp, #12
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
	time_flag_PeriodElapsedCallback=TRUE;
 8015cd8:	4b04      	ldr	r3, [pc, #16]	; (8015cec <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8015cda:	2201      	movs	r2, #1
 8015cdc:	701a      	strb	r2, [r3, #0]

}
 8015cde:	bf00      	nop
 8015ce0:	370c      	adds	r7, #12
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	20008deb 	.word	0x20008deb

08015cf0 <test_transmit_receive_data_I2C>:




result_test test_transmit_receive_data_I2C(const char* data,uint8_t lenght)
{
 8015cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cf2:	b093      	sub	sp, #76	; 0x4c
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	60f8      	str	r0, [r7, #12]
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	71fb      	strb	r3, [r7, #7]
	result_test result;
	int waiting_counter=0;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, &data_buff_receiver1_Slave_I2C, lenght);
 8015d02:	79fb      	ldrb	r3, [r7, #7]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	461a      	mov	r2, r3
 8015d08:	496b      	ldr	r1, [pc, #428]	; (8015eb8 <test_transmit_receive_data_I2C+0x1c8>)
 8015d0a:	486c      	ldr	r0, [pc, #432]	; (8015ebc <test_transmit_receive_data_I2C+0x1cc>)
 8015d0c:	f7ef faf4 	bl	80052f8 <HAL_I2C_Slave_Receive_DMA>
	HAL_I2C_Master_Transmit_DMA(I2C_MASTER, 44, data, lenght);
 8015d10:	79fb      	ldrb	r3, [r7, #7]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	68ba      	ldr	r2, [r7, #8]
 8015d16:	212c      	movs	r1, #44	; 0x2c
 8015d18:	4869      	ldr	r0, [pc, #420]	; (8015ec0 <test_transmit_receive_data_I2C+0x1d0>)
 8015d1a:	f7ef f857 	bl	8004dcc <HAL_I2C_Master_Transmit_DMA>

	while (1)
	{
		if(flag_R_slave==TRUE)
 8015d1e:	4b69      	ldr	r3, [pc, #420]	; (8015ec4 <test_transmit_receive_data_I2C+0x1d4>)
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d13c      	bne.n	8015da0 <test_transmit_receive_data_I2C+0xb0>
		{

			if( check_data(data,data_buff_receiver1_Slave_I2C,lenght)==FALSE )
 8015d26:	79fb      	ldrb	r3, [r7, #7]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	4963      	ldr	r1, [pc, #396]	; (8015eb8 <test_transmit_receive_data_I2C+0x1c8>)
 8015d2c:	68b8      	ldr	r0, [r7, #8]
 8015d2e:	f000 f93f 	bl	8015fb0 <check_data>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d122      	bne.n	8015d7e <test_transmit_receive_data_I2C+0x8e>
			{
				result.bool_test=FALSE;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-5, bad receive data",  24);
 8015d3c:	f107 0310 	add.w	r3, r7, #16
 8015d40:	3301      	adds	r3, #1
 8015d42:	2218      	movs	r2, #24
 8015d44:	4960      	ldr	r1, [pc, #384]	; (8015ec8 <test_transmit_receive_data_I2C+0x1d8>)
 8015d46:	4618      	mov	r0, r3
 8015d48:	f000 fe96 	bl	8016a78 <memcpy>
				return result;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f107 0410 	add.w	r4, r7, #16
 8015d52:	469c      	mov	ip, r3
 8015d54:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8015d58:	4665      	mov	r5, ip
 8015d5a:	4626      	mov	r6, r4
 8015d5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015d5e:	6028      	str	r0, [r5, #0]
 8015d60:	6069      	str	r1, [r5, #4]
 8015d62:	60aa      	str	r2, [r5, #8]
 8015d64:	60eb      	str	r3, [r5, #12]
 8015d66:	3410      	adds	r4, #16
 8015d68:	f10c 0c10 	add.w	ip, ip, #16
 8015d6c:	4574      	cmp	r4, lr
 8015d6e:	d1f3      	bne.n	8015d58 <test_transmit_receive_data_I2C+0x68>
 8015d70:	4663      	mov	r3, ip
 8015d72:	4622      	mov	r2, r4
 8015d74:	8811      	ldrh	r1, [r2, #0]
 8015d76:	7892      	ldrb	r2, [r2, #2]
 8015d78:	8019      	strh	r1, [r3, #0]
 8015d7a:	709a      	strb	r2, [r3, #2]
 8015d7c:	e098      	b.n	8015eb0 <test_transmit_receive_data_I2C+0x1c0>
			}


			HAL_I2C_Master_Receive_DMA(I2C_MASTER,44, &data_buff_receiver_Master_I2C, lenght);
 8015d7e:	79fb      	ldrb	r3, [r7, #7]
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	4a52      	ldr	r2, [pc, #328]	; (8015ecc <test_transmit_receive_data_I2C+0x1dc>)
 8015d84:	212c      	movs	r1, #44	; 0x2c
 8015d86:	484e      	ldr	r0, [pc, #312]	; (8015ec0 <test_transmit_receive_data_I2C+0x1d0>)
 8015d88:	f7ef f910 	bl	8004fac <HAL_I2C_Master_Receive_DMA>
			HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE,data_buff_receiver1_Slave_I2C, lenght);
 8015d8c:	79fb      	ldrb	r3, [r7, #7]
 8015d8e:	b29b      	uxth	r3, r3
 8015d90:	461a      	mov	r2, r3
 8015d92:	4949      	ldr	r1, [pc, #292]	; (8015eb8 <test_transmit_receive_data_I2C+0x1c8>)
 8015d94:	4849      	ldr	r0, [pc, #292]	; (8015ebc <test_transmit_receive_data_I2C+0x1cc>)
 8015d96:	f7ef f9f9 	bl	800518c <HAL_I2C_Slave_Transmit_DMA>
			flag_R_slave=FALSE;
 8015d9a:	4b4a      	ldr	r3, [pc, #296]	; (8015ec4 <test_transmit_receive_data_I2C+0x1d4>)
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	701a      	strb	r2, [r3, #0]
		}
		if(flag_R_Master==TRUE)
 8015da0:	4b4b      	ldr	r3, [pc, #300]	; (8015ed0 <test_transmit_receive_data_I2C+0x1e0>)
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	2b01      	cmp	r3, #1
 8015da6:	d144      	bne.n	8015e32 <test_transmit_receive_data_I2C+0x142>
		{
			if( check_data(data,data_buff_receiver_Master_I2C,lenght)==FALSE )
 8015da8:	79fb      	ldrb	r3, [r7, #7]
 8015daa:	461a      	mov	r2, r3
 8015dac:	4947      	ldr	r1, [pc, #284]	; (8015ecc <test_transmit_receive_data_I2C+0x1dc>)
 8015dae:	68b8      	ldr	r0, [r7, #8]
 8015db0:	f000 f8fe 	bl	8015fb0 <check_data>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d122      	bne.n	8015e00 <test_transmit_receive_data_I2C+0x110>
			{
				result.bool_test=FALSE;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-4, bad receive data",  24);
 8015dbe:	f107 0310 	add.w	r3, r7, #16
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	2218      	movs	r2, #24
 8015dc6:	4943      	ldr	r1, [pc, #268]	; (8015ed4 <test_transmit_receive_data_I2C+0x1e4>)
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f000 fe55 	bl	8016a78 <memcpy>
				return result;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f107 0410 	add.w	r4, r7, #16
 8015dd4:	469c      	mov	ip, r3
 8015dd6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8015dda:	4665      	mov	r5, ip
 8015ddc:	4626      	mov	r6, r4
 8015dde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015de0:	6028      	str	r0, [r5, #0]
 8015de2:	6069      	str	r1, [r5, #4]
 8015de4:	60aa      	str	r2, [r5, #8]
 8015de6:	60eb      	str	r3, [r5, #12]
 8015de8:	3410      	adds	r4, #16
 8015dea:	f10c 0c10 	add.w	ip, ip, #16
 8015dee:	4574      	cmp	r4, lr
 8015df0:	d1f3      	bne.n	8015dda <test_transmit_receive_data_I2C+0xea>
 8015df2:	4663      	mov	r3, ip
 8015df4:	4622      	mov	r2, r4
 8015df6:	8811      	ldrh	r1, [r2, #0]
 8015df8:	7892      	ldrb	r2, [r2, #2]
 8015dfa:	8019      	strh	r1, [r3, #0]
 8015dfc:	709a      	strb	r2, [r3, #2]
 8015dfe:	e057      	b.n	8015eb0 <test_transmit_receive_data_I2C+0x1c0>
			}
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 8015e00:	2180      	movs	r1, #128	; 0x80
 8015e02:	4835      	ldr	r0, [pc, #212]	; (8015ed8 <test_transmit_receive_data_I2C+0x1e8>)
 8015e04:	f7ee ff13 	bl	8004c2e <HAL_GPIO_TogglePin>
			flag_R_Master=FALSE;
 8015e08:	4b31      	ldr	r3, [pc, #196]	; (8015ed0 <test_transmit_receive_data_I2C+0x1e0>)
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	701a      	strb	r2, [r3, #0]
			break;
 8015e0e:	bf00      	nop
			return result;
		}

	}

	result.bool_test=TRUE;
 8015e10:	2301      	movs	r3, #1
 8015e12:	743b      	strb	r3, [r7, #16]
	memcpy(result.msg , "Success",  8);
 8015e14:	f107 0310 	add.w	r3, r7, #16
 8015e18:	3301      	adds	r3, #1
 8015e1a:	2208      	movs	r2, #8
 8015e1c:	492f      	ldr	r1, [pc, #188]	; (8015edc <test_transmit_receive_data_I2C+0x1ec>)
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f000 fe2a 	bl	8016a78 <memcpy>
	return result;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f107 0410 	add.w	r4, r7, #16
 8015e2a:	469c      	mov	ip, r3
 8015e2c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8015e30:	e02c      	b.n	8015e8c <test_transmit_receive_data_I2C+0x19c>
		HAL_Delay(10);
 8015e32:	200a      	movs	r0, #10
 8015e34:	f7eb fff0 	bl	8001e18 <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 8015e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8015e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e40:	2b05      	cmp	r3, #5
 8015e42:	f77f af6c 	ble.w	8015d1e <test_transmit_receive_data_I2C+0x2e>
			result.bool_test=FALSE;
 8015e46:	2300      	movs	r3, #0
 8015e48:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , "bad conotion between UART",  26);
 8015e4a:	f107 0310 	add.w	r3, r7, #16
 8015e4e:	3301      	adds	r3, #1
 8015e50:	221a      	movs	r2, #26
 8015e52:	4923      	ldr	r1, [pc, #140]	; (8015ee0 <test_transmit_receive_data_I2C+0x1f0>)
 8015e54:	4618      	mov	r0, r3
 8015e56:	f000 fe0f 	bl	8016a78 <memcpy>
			return result;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f107 0410 	add.w	r4, r7, #16
 8015e60:	469c      	mov	ip, r3
 8015e62:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8015e66:	4665      	mov	r5, ip
 8015e68:	4626      	mov	r6, r4
 8015e6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015e6c:	6028      	str	r0, [r5, #0]
 8015e6e:	6069      	str	r1, [r5, #4]
 8015e70:	60aa      	str	r2, [r5, #8]
 8015e72:	60eb      	str	r3, [r5, #12]
 8015e74:	3410      	adds	r4, #16
 8015e76:	f10c 0c10 	add.w	ip, ip, #16
 8015e7a:	4574      	cmp	r4, lr
 8015e7c:	d1f3      	bne.n	8015e66 <test_transmit_receive_data_I2C+0x176>
 8015e7e:	4663      	mov	r3, ip
 8015e80:	4622      	mov	r2, r4
 8015e82:	8811      	ldrh	r1, [r2, #0]
 8015e84:	7892      	ldrb	r2, [r2, #2]
 8015e86:	8019      	strh	r1, [r3, #0]
 8015e88:	709a      	strb	r2, [r3, #2]
 8015e8a:	e011      	b.n	8015eb0 <test_transmit_receive_data_I2C+0x1c0>
	return result;
 8015e8c:	4665      	mov	r5, ip
 8015e8e:	4626      	mov	r6, r4
 8015e90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015e92:	6028      	str	r0, [r5, #0]
 8015e94:	6069      	str	r1, [r5, #4]
 8015e96:	60aa      	str	r2, [r5, #8]
 8015e98:	60eb      	str	r3, [r5, #12]
 8015e9a:	3410      	adds	r4, #16
 8015e9c:	f10c 0c10 	add.w	ip, ip, #16
 8015ea0:	4574      	cmp	r4, lr
 8015ea2:	d1f3      	bne.n	8015e8c <test_transmit_receive_data_I2C+0x19c>
 8015ea4:	4663      	mov	r3, ip
 8015ea6:	4622      	mov	r2, r4
 8015ea8:	8811      	ldrh	r1, [r2, #0]
 8015eaa:	7892      	ldrb	r2, [r2, #2]
 8015eac:	8019      	strh	r1, [r3, #0]
 8015eae:	709a      	strb	r2, [r3, #2]
}
 8015eb0:	68f8      	ldr	r0, [r7, #12]
 8015eb2:	374c      	adds	r7, #76	; 0x4c
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eb8:	20008e00 	.word	0x20008e00
 8015ebc:	2000029c 	.word	0x2000029c
 8015ec0:	20000248 	.word	0x20000248
 8015ec4:	20008de9 	.word	0x20008de9
 8015ec8:	0801a660 	.word	0x0801a660
 8015ecc:	20008dec 	.word	0x20008dec
 8015ed0:	20008de8 	.word	0x20008de8
 8015ed4:	0801a678 	.word	0x0801a678
 8015ed8:	40020400 	.word	0x40020400
 8015edc:	0801a6ac 	.word	0x0801a6ac
 8015ee0:	0801a690 	.word	0x0801a690

08015ee4 <I2C_tests>:


void I2C_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 8015ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ee6:	b093      	sub	sp, #76	; 0x4c
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6478      	str	r0, [r7, #68]	; 0x44
 8015eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015eee:	460b      	mov	r3, r1
 8015ef0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015ef4:	4613      	mov	r3, r2
 8015ef6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data_buff_receiver_Master_I2C[SIZEOF_DATA_BUFF]=0;
 8015efa:	4b18      	ldr	r3, [pc, #96]	; (8015f5c <I2C_tests+0x78>)
 8015efc:	2200      	movs	r2, #0
 8015efe:	749a      	strb	r2, [r3, #18]
	data_buff_receiver1_Slave_I2C[SIZEOF_DATA_BUFF]=0;
 8015f00:	4b17      	ldr	r3, [pc, #92]	; (8015f60 <I2C_tests+0x7c>)
 8015f02:	2200      	movs	r2, #0
 8015f04:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(UART_DEBUG, "start initialization", 21, TIMEOUT_TIME_100);
 8015f06:	2364      	movs	r3, #100	; 0x64
 8015f08:	2215      	movs	r2, #21
 8015f0a:	4916      	ldr	r1, [pc, #88]	; (8015f64 <I2C_tests+0x80>)
 8015f0c:	4816      	ldr	r0, [pc, #88]	; (8015f68 <I2C_tests+0x84>)
 8015f0e:	f7f2 ff8f 	bl	8008e30 <HAL_UART_Transmit>

	*result=test_transmit_receive_data_I2C(data,lenght);
 8015f12:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8015f14:	463b      	mov	r3, r7
 8015f16:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8015f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7ff fee7 	bl	8015cf0 <test_transmit_receive_data_I2C>
 8015f22:	463b      	mov	r3, r7
 8015f24:	4620      	mov	r0, r4
 8015f26:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	f8d1 c000 	ldr.w	ip, [r1]
 8015f32:	684e      	ldr	r6, [r1, #4]
 8015f34:	688d      	ldr	r5, [r1, #8]
 8015f36:	68c9      	ldr	r1, [r1, #12]
 8015f38:	f8c2 c000 	str.w	ip, [r2]
 8015f3c:	6056      	str	r6, [r2, #4]
 8015f3e:	6095      	str	r5, [r2, #8]
 8015f40:	60d1      	str	r1, [r2, #12]
 8015f42:	3310      	adds	r3, #16
 8015f44:	3010      	adds	r0, #16
 8015f46:	42a3      	cmp	r3, r4
 8015f48:	d1ef      	bne.n	8015f2a <I2C_tests+0x46>
 8015f4a:	4602      	mov	r2, r0
 8015f4c:	8819      	ldrh	r1, [r3, #0]
 8015f4e:	789b      	ldrb	r3, [r3, #2]
 8015f50:	8011      	strh	r1, [r2, #0]
 8015f52:	7093      	strb	r3, [r2, #2]

}
 8015f54:	bf00      	nop
 8015f56:	374c      	adds	r7, #76	; 0x4c
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f5c:	20008dec 	.word	0x20008dec
 8015f60:	20008e00 	.word	0x20008e00
 8015f64:	0801a6b4 	.word	0x0801a6b4
 8015f68:	20000694 	.word	0x20000694

08015f6c <rtg_main>:
 *	NETMASK: 	255.255.255.0 (or 0.0.0.0/24)
 *	GATEWAY: 	192.168.1.100 (not in use but required by IDE)
 *	Port:		7 (recommended 50,000+)
 */

void rtg_main() {
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	af00      	add	r7, sp, #0
	printf("Start of program\n\r");
 8015f70:	4803      	ldr	r0, [pc, #12]	; (8015f80 <rtg_main+0x14>)
 8015f72:	f000 fd97 	bl	8016aa4 <iprintf>
	udpServer_init();					//UDP server initialization
 8015f76:	f000 fabd 	bl	80164f4 <udpServer_init>
	while (1) {
		handle_reception_network();
 8015f7a:	f000 fcc7 	bl	801690c <handle_reception_network>
	while (1) {
 8015f7e:	e7fc      	b.n	8015f7a <rtg_main+0xe>
 8015f80:	0801a6cc 	.word	0x0801a6cc

08015f84 <print_result_test>:
#include "RTG.h"


void print_result_test( result_test result){
 8015f84:	b084      	sub	sp, #16
 8015f86:	b580      	push	{r7, lr}
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	f107 0c08 	add.w	ip, r7, #8
 8015f8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf("\r\n result -> %s \r\n", result.msg);
 8015f92:	f107 0309 	add.w	r3, r7, #9
 8015f96:	4619      	mov	r1, r3
 8015f98:	4804      	ldr	r0, [pc, #16]	; (8015fac <print_result_test+0x28>)
 8015f9a:	f000 fd83 	bl	8016aa4 <iprintf>
}
 8015f9e:	bf00      	nop
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015fa6:	b004      	add	sp, #16
 8015fa8:	4770      	bx	lr
 8015faa:	bf00      	nop
 8015fac:	0801a6e0 	.word	0x0801a6e0

08015fb0 <check_data>:


uint8_t check_data(const char* data,const char* data_buff_receiver1,uint8_t lenght){
 8015fb0:	b480      	push	{r7}
 8015fb2:	b087      	sub	sp, #28
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	60b9      	str	r1, [r7, #8]
 8015fba:	4613      	mov	r3, r2
 8015fbc:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < lenght ;i++ )
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	75fb      	strb	r3, [r7, #23]
 8015fc2:	e00e      	b.n	8015fe2 <check_data+0x32>
	{
		if( *(data+i)!=*(data_buff_receiver1+i) )
 8015fc4:	7dfb      	ldrb	r3, [r7, #23]
 8015fc6:	68fa      	ldr	r2, [r7, #12]
 8015fc8:	4413      	add	r3, r2
 8015fca:	781a      	ldrb	r2, [r3, #0]
 8015fcc:	7dfb      	ldrb	r3, [r7, #23]
 8015fce:	68b9      	ldr	r1, [r7, #8]
 8015fd0:	440b      	add	r3, r1
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d001      	beq.n	8015fdc <check_data+0x2c>
			return FALSE;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	e007      	b.n	8015fec <check_data+0x3c>
	for (uint8_t i = 0; i < lenght ;i++ )
 8015fdc:	7dfb      	ldrb	r3, [r7, #23]
 8015fde:	3301      	adds	r3, #1
 8015fe0:	75fb      	strb	r3, [r7, #23]
 8015fe2:	7dfa      	ldrb	r2, [r7, #23]
 8015fe4:	79fb      	ldrb	r3, [r7, #7]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d3ec      	bcc.n	8015fc4 <check_data+0x14>
	}

	return TRUE;
 8015fea:	2301      	movs	r3, #1
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	371c      	adds	r7, #28
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr

08015ff8 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	b29a      	uxth	r2, r3
 8016008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801600c:	68b9      	ldr	r1, [r7, #8]
 801600e:	4804      	ldr	r0, [pc, #16]	; (8016020 <_write+0x28>)
 8016010:	f7f2 ff0e 	bl	8008e30 <HAL_UART_Transmit>
	return len;
 8016014:	687b      	ldr	r3, [r7, #4]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3710      	adds	r7, #16
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	20000694 	.word	0x20000694

08016024 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 801602a:	2300      	movs	r3, #0
 801602c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 801602e:	1df9      	adds	r1, r7, #7
 8016030:	f04f 33ff 	mov.w	r3, #4294967295
 8016034:	2201      	movs	r2, #1
 8016036:	4807      	ldr	r0, [pc, #28]	; (8016054 <__io_getchar+0x30>)
 8016038:	f7f2 ff7d 	bl	8008f36 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 801603c:	1df9      	adds	r1, r7, #7
 801603e:	f04f 33ff 	mov.w	r3, #4294967295
 8016042:	2201      	movs	r2, #1
 8016044:	4803      	ldr	r0, [pc, #12]	; (8016054 <__io_getchar+0x30>)
 8016046:	f7f2 fef3 	bl	8008e30 <HAL_UART_Transmit>
	return ch;
 801604a:	79fb      	ldrb	r3, [r7, #7]
}
 801604c:	4618      	mov	r0, r3
 801604e:	3708      	adds	r7, #8
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}
 8016054:	20000694 	.word	0x20000694

08016058 <_read>:

int _read(int file, char *ptr, int len) {
 8016058:	b580      	push	{r7, lr}
 801605a:	b088      	sub	sp, #32
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8016064:	2300      	movs	r3, #0
 8016066:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = 0;
 8016068:	2300      	movs	r3, #0
 801606a:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 801606c:	e016      	b.n	801609c <_read+0x44>
		ch = __io_getchar();
 801606e:	f7ff ffd9 	bl	8016024 <__io_getchar>
 8016072:	4603      	mov	r3, r0
 8016074:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	7dfa      	ldrb	r2, [r7, #23]
 801607a:	701a      	strb	r2, [r3, #0]
		ptr++;
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	3301      	adds	r3, #1
 8016080:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8016082:	7dfb      	ldrb	r3, [r7, #23]
 8016084:	2b0d      	cmp	r3, #13
 8016086:	d002      	beq.n	801608e <_read+0x36>
 8016088:	7dfb      	ldrb	r3, [r7, #23]
 801608a:	2b0a      	cmp	r3, #10
 801608c:	d103      	bne.n	8016096 <_read+0x3e>
			*(ptr) = 0;
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	2200      	movs	r2, #0
 8016092:	701a      	strb	r2, [r3, #0]
			break;
 8016094:	e006      	b.n	80160a4 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 8016096:	69fb      	ldr	r3, [r7, #28]
 8016098:	3301      	adds	r3, #1
 801609a:	61fb      	str	r3, [r7, #28]
 801609c:	69fa      	ldr	r2, [r7, #28]
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	dbe4      	blt.n	801606e <_read+0x16>
		}
	}
	return DataIdx + 1;
 80160a4:	69fb      	ldr	r3, [r7, #28]
 80160a6:	3301      	adds	r3, #1
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3720      	adds	r7, #32
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <test_transmit_receive_data>:
uint8_t data_buff_receiver2[SIZEOF_DATA_BUFF];
uint8_t data_buff_receiver1[SIZEOF_DATA_BUFF];



result_test test_transmit_receive_data(const char* data,uint8_t lenght){
 80160b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160b2:	b093      	sub	sp, #76	; 0x4c
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4613      	mov	r3, r2
 80160bc:	71fb      	strb	r3, [r7, #7]

	int waiting_counter=0;
 80160be:	2300      	movs	r3, #0
 80160c0:	647b      	str	r3, [r7, #68]	; 0x44
	result_test result;
	//Prepare Receive UART to receive data
	HAL_UART_Receive_IT(UART_5, data_buff_receiver1, lenght);
 80160c2:	79fb      	ldrb	r3, [r7, #7]
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	461a      	mov	r2, r3
 80160c8:	496d      	ldr	r1, [pc, #436]	; (8016280 <test_transmit_receive_data+0x1d0>)
 80160ca:	486e      	ldr	r0, [pc, #440]	; (8016284 <test_transmit_receive_data+0x1d4>)
 80160cc:	f7f3 f856 	bl	800917c <HAL_UART_Receive_IT>

	HAL_UART_Transmit_IT(UART_4, data, lenght);
 80160d0:	79fb      	ldrb	r3, [r7, #7]
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	461a      	mov	r2, r3
 80160d6:	68b9      	ldr	r1, [r7, #8]
 80160d8:	486b      	ldr	r0, [pc, #428]	; (8016288 <test_transmit_receive_data+0x1d8>)
 80160da:	f7f2 fff1 	bl	80090c0 <HAL_UART_Transmit_IT>


	while(1)
	{
		if(receivere_UART5_flag_RxCpltCallback==TRUE)
 80160de:	4b6b      	ldr	r3, [pc, #428]	; (801628c <test_transmit_receive_data+0x1dc>)
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d13c      	bne.n	8016160 <test_transmit_receive_data+0xb0>
		{
			if( check_data(data,data_buff_receiver1,lenght)==FALSE )
 80160e6:	79fb      	ldrb	r3, [r7, #7]
 80160e8:	461a      	mov	r2, r3
 80160ea:	4965      	ldr	r1, [pc, #404]	; (8016280 <test_transmit_receive_data+0x1d0>)
 80160ec:	68b8      	ldr	r0, [r7, #8]
 80160ee:	f7ff ff5f 	bl	8015fb0 <check_data>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d122      	bne.n	801613e <test_transmit_receive_data+0x8e>
			{
				result.bool_test=FALSE;
 80160f8:	2300      	movs	r3, #0
 80160fa:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-5, bad receive data",  24);
 80160fc:	f107 0310 	add.w	r3, r7, #16
 8016100:	3301      	adds	r3, #1
 8016102:	2218      	movs	r2, #24
 8016104:	4962      	ldr	r1, [pc, #392]	; (8016290 <test_transmit_receive_data+0x1e0>)
 8016106:	4618      	mov	r0, r3
 8016108:	f000 fcb6 	bl	8016a78 <memcpy>
				return result;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f107 0410 	add.w	r4, r7, #16
 8016112:	469c      	mov	ip, r3
 8016114:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016118:	4665      	mov	r5, ip
 801611a:	4626      	mov	r6, r4
 801611c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801611e:	6028      	str	r0, [r5, #0]
 8016120:	6069      	str	r1, [r5, #4]
 8016122:	60aa      	str	r2, [r5, #8]
 8016124:	60eb      	str	r3, [r5, #12]
 8016126:	3410      	adds	r4, #16
 8016128:	f10c 0c10 	add.w	ip, ip, #16
 801612c:	4574      	cmp	r4, lr
 801612e:	d1f3      	bne.n	8016118 <test_transmit_receive_data+0x68>
 8016130:	4663      	mov	r3, ip
 8016132:	4622      	mov	r2, r4
 8016134:	8811      	ldrh	r1, [r2, #0]
 8016136:	7892      	ldrb	r2, [r2, #2]
 8016138:	8019      	strh	r1, [r3, #0]
 801613a:	709a      	strb	r2, [r3, #2]
 801613c:	e09b      	b.n	8016276 <test_transmit_receive_data+0x1c6>
			}
			HAL_UART_Receive_IT(UART_4, data_buff_receiver2, lenght);
 801613e:	79fb      	ldrb	r3, [r7, #7]
 8016140:	b29b      	uxth	r3, r3
 8016142:	461a      	mov	r2, r3
 8016144:	4953      	ldr	r1, [pc, #332]	; (8016294 <test_transmit_receive_data+0x1e4>)
 8016146:	4850      	ldr	r0, [pc, #320]	; (8016288 <test_transmit_receive_data+0x1d8>)
 8016148:	f7f3 f818 	bl	800917c <HAL_UART_Receive_IT>
			HAL_UART_Transmit_IT(UART_5, data_buff_receiver1, lenght);
 801614c:	79fb      	ldrb	r3, [r7, #7]
 801614e:	b29b      	uxth	r3, r3
 8016150:	461a      	mov	r2, r3
 8016152:	494b      	ldr	r1, [pc, #300]	; (8016280 <test_transmit_receive_data+0x1d0>)
 8016154:	484b      	ldr	r0, [pc, #300]	; (8016284 <test_transmit_receive_data+0x1d4>)
 8016156:	f7f2 ffb3 	bl	80090c0 <HAL_UART_Transmit_IT>

			receivere_UART5_flag_RxCpltCallback = FALSE;
 801615a:	4b4c      	ldr	r3, [pc, #304]	; (801628c <test_transmit_receive_data+0x1dc>)
 801615c:	2200      	movs	r2, #0
 801615e:	701a      	strb	r2, [r3, #0]
		}

		if(receivere_UART4_flag_RxCpltCallback==TRUE)
 8016160:	4b4d      	ldr	r3, [pc, #308]	; (8016298 <test_transmit_receive_data+0x1e8>)
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	2b01      	cmp	r3, #1
 8016166:	d147      	bne.n	80161f8 <test_transmit_receive_data+0x148>
		{
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 8016168:	2180      	movs	r1, #128	; 0x80
 801616a:	484c      	ldr	r0, [pc, #304]	; (801629c <test_transmit_receive_data+0x1ec>)
 801616c:	f7ee fd5f 	bl	8004c2e <HAL_GPIO_TogglePin>

			if( check_data(data,data_buff_receiver1,lenght)==FALSE )
 8016170:	79fb      	ldrb	r3, [r7, #7]
 8016172:	461a      	mov	r2, r3
 8016174:	4942      	ldr	r1, [pc, #264]	; (8016280 <test_transmit_receive_data+0x1d0>)
 8016176:	68b8      	ldr	r0, [r7, #8]
 8016178:	f7ff ff1a 	bl	8015fb0 <check_data>
 801617c:	4603      	mov	r3, r0
 801617e:	2b00      	cmp	r3, #0
 8016180:	d122      	bne.n	80161c8 <test_transmit_receive_data+0x118>
			{
				result.bool_test=FALSE;
 8016182:	2300      	movs	r3, #0
 8016184:	743b      	strb	r3, [r7, #16]
				memcpy(result.msg , "URT-4, bad receive data",  24);
 8016186:	f107 0310 	add.w	r3, r7, #16
 801618a:	3301      	adds	r3, #1
 801618c:	2218      	movs	r2, #24
 801618e:	4944      	ldr	r1, [pc, #272]	; (80162a0 <test_transmit_receive_data+0x1f0>)
 8016190:	4618      	mov	r0, r3
 8016192:	f000 fc71 	bl	8016a78 <memcpy>
				return result;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	f107 0410 	add.w	r4, r7, #16
 801619c:	469c      	mov	ip, r3
 801619e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80161a2:	4665      	mov	r5, ip
 80161a4:	4626      	mov	r6, r4
 80161a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80161a8:	6028      	str	r0, [r5, #0]
 80161aa:	6069      	str	r1, [r5, #4]
 80161ac:	60aa      	str	r2, [r5, #8]
 80161ae:	60eb      	str	r3, [r5, #12]
 80161b0:	3410      	adds	r4, #16
 80161b2:	f10c 0c10 	add.w	ip, ip, #16
 80161b6:	4574      	cmp	r4, lr
 80161b8:	d1f3      	bne.n	80161a2 <test_transmit_receive_data+0xf2>
 80161ba:	4663      	mov	r3, ip
 80161bc:	4622      	mov	r2, r4
 80161be:	8811      	ldrh	r1, [r2, #0]
 80161c0:	7892      	ldrb	r2, [r2, #2]
 80161c2:	8019      	strh	r1, [r3, #0]
 80161c4:	709a      	strb	r2, [r3, #2]
 80161c6:	e056      	b.n	8016276 <test_transmit_receive_data+0x1c6>
			}
			receivere_UART4_flag_RxCpltCallback= FALSE;
 80161c8:	4b33      	ldr	r3, [pc, #204]	; (8016298 <test_transmit_receive_data+0x1e8>)
 80161ca:	2200      	movs	r2, #0
 80161cc:	701a      	strb	r2, [r3, #0]
			break;
 80161ce:	bf00      	nop
			memcpy(result.msg , "bad conotion between UART",  26);
			return result;
		}

	}
	printf("\r\n  end \r\n");
 80161d0:	4834      	ldr	r0, [pc, #208]	; (80162a4 <test_transmit_receive_data+0x1f4>)
 80161d2:	f000 fced 	bl	8016bb0 <puts>
	result.bool_test=TRUE;
 80161d6:	2301      	movs	r3, #1
 80161d8:	743b      	strb	r3, [r7, #16]
	memcpy(result.msg , "Success",  8);
 80161da:	f107 0310 	add.w	r3, r7, #16
 80161de:	3301      	adds	r3, #1
 80161e0:	2208      	movs	r2, #8
 80161e2:	4931      	ldr	r1, [pc, #196]	; (80162a8 <test_transmit_receive_data+0x1f8>)
 80161e4:	4618      	mov	r0, r3
 80161e6:	f000 fc47 	bl	8016a78 <memcpy>

	return result;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f107 0410 	add.w	r4, r7, #16
 80161f0:	469c      	mov	ip, r3
 80161f2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80161f6:	e02c      	b.n	8016252 <test_transmit_receive_data+0x1a2>
		HAL_Delay(10);
 80161f8:	200a      	movs	r0, #10
 80161fa:	f7eb fe0d 	bl	8001e18 <HAL_Delay>
		if((++waiting_counter) > MAX_WAITING_COUNTER)
 80161fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016200:	3301      	adds	r3, #1
 8016202:	647b      	str	r3, [r7, #68]	; 0x44
 8016204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016206:	2b05      	cmp	r3, #5
 8016208:	f77f af69 	ble.w	80160de <test_transmit_receive_data+0x2e>
			result.bool_test=FALSE;
 801620c:	2300      	movs	r3, #0
 801620e:	743b      	strb	r3, [r7, #16]
			memcpy(result.msg , "bad conotion between UART",  26);
 8016210:	f107 0310 	add.w	r3, r7, #16
 8016214:	3301      	adds	r3, #1
 8016216:	221a      	movs	r2, #26
 8016218:	4924      	ldr	r1, [pc, #144]	; (80162ac <test_transmit_receive_data+0x1fc>)
 801621a:	4618      	mov	r0, r3
 801621c:	f000 fc2c 	bl	8016a78 <memcpy>
			return result;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f107 0410 	add.w	r4, r7, #16
 8016226:	469c      	mov	ip, r3
 8016228:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801622c:	4665      	mov	r5, ip
 801622e:	4626      	mov	r6, r4
 8016230:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016232:	6028      	str	r0, [r5, #0]
 8016234:	6069      	str	r1, [r5, #4]
 8016236:	60aa      	str	r2, [r5, #8]
 8016238:	60eb      	str	r3, [r5, #12]
 801623a:	3410      	adds	r4, #16
 801623c:	f10c 0c10 	add.w	ip, ip, #16
 8016240:	4574      	cmp	r4, lr
 8016242:	d1f3      	bne.n	801622c <test_transmit_receive_data+0x17c>
 8016244:	4663      	mov	r3, ip
 8016246:	4622      	mov	r2, r4
 8016248:	8811      	ldrh	r1, [r2, #0]
 801624a:	7892      	ldrb	r2, [r2, #2]
 801624c:	8019      	strh	r1, [r3, #0]
 801624e:	709a      	strb	r2, [r3, #2]
 8016250:	e011      	b.n	8016276 <test_transmit_receive_data+0x1c6>
	return result;
 8016252:	4665      	mov	r5, ip
 8016254:	4626      	mov	r6, r4
 8016256:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016258:	6028      	str	r0, [r5, #0]
 801625a:	6069      	str	r1, [r5, #4]
 801625c:	60aa      	str	r2, [r5, #8]
 801625e:	60eb      	str	r3, [r5, #12]
 8016260:	3410      	adds	r4, #16
 8016262:	f10c 0c10 	add.w	ip, ip, #16
 8016266:	4574      	cmp	r4, lr
 8016268:	d1f3      	bne.n	8016252 <test_transmit_receive_data+0x1a2>
 801626a:	4663      	mov	r3, ip
 801626c:	4622      	mov	r2, r4
 801626e:	8811      	ldrh	r1, [r2, #0]
 8016270:	7892      	ldrb	r2, [r2, #2]
 8016272:	8019      	strh	r1, [r3, #0]
 8016274:	709a      	strb	r2, [r3, #2]

}
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	374c      	adds	r7, #76	; 0x4c
 801627a:	46bd      	mov	sp, r7
 801627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801627e:	bf00      	nop
 8016280:	20008e28 	.word	0x20008e28
 8016284:	2000060c 	.word	0x2000060c
 8016288:	20000584 	.word	0x20000584
 801628c:	20008de6 	.word	0x20008de6
 8016290:	0801a6f4 	.word	0x0801a6f4
 8016294:	20008e14 	.word	0x20008e14
 8016298:	20008de7 	.word	0x20008de7
 801629c:	40020400 	.word	0x40020400
 80162a0:	0801a70c 	.word	0x0801a70c
 80162a4:	0801a740 	.word	0x0801a740
 80162a8:	0801a74c 	.word	0x0801a74c
 80162ac:	0801a724 	.word	0x0801a724

080162b0 <UART_tests>:


void UART_tests(char* data,uint8_t lenght,uint8_t iterations,result_test*result)
{
 80162b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162b2:	b093      	sub	sp, #76	; 0x4c
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6478      	str	r0, [r7, #68]	; 0x44
 80162b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80162ba:	460b      	mov	r3, r1
 80162bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80162c0:	4613      	mov	r3, r2
 80162c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	printf("\r\n*** **** ****\r\n");
 80162c6:	4817      	ldr	r0, [pc, #92]	; (8016324 <UART_tests+0x74>)
 80162c8:	f000 fc72 	bl	8016bb0 <puts>

	HAL_UART_Transmit(UART_DEBUG, "start initialization", 21, TIMEOUT_TIME_100);
 80162cc:	2364      	movs	r3, #100	; 0x64
 80162ce:	2215      	movs	r2, #21
 80162d0:	4915      	ldr	r1, [pc, #84]	; (8016328 <UART_tests+0x78>)
 80162d2:	4816      	ldr	r0, [pc, #88]	; (801632c <UART_tests+0x7c>)
 80162d4:	f7f2 fdac 	bl	8008e30 <HAL_UART_Transmit>

	*result=test_transmit_receive_data(data,lenght);
 80162d8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80162da:	463b      	mov	r3, r7
 80162dc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80162e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7ff fee4 	bl	80160b0 <test_transmit_receive_data>
 80162e8:	463b      	mov	r3, r7
 80162ea:	4620      	mov	r0, r4
 80162ec:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80162f0:	4602      	mov	r2, r0
 80162f2:	4619      	mov	r1, r3
 80162f4:	f8d1 c000 	ldr.w	ip, [r1]
 80162f8:	684e      	ldr	r6, [r1, #4]
 80162fa:	688d      	ldr	r5, [r1, #8]
 80162fc:	68c9      	ldr	r1, [r1, #12]
 80162fe:	f8c2 c000 	str.w	ip, [r2]
 8016302:	6056      	str	r6, [r2, #4]
 8016304:	6095      	str	r5, [r2, #8]
 8016306:	60d1      	str	r1, [r2, #12]
 8016308:	3310      	adds	r3, #16
 801630a:	3010      	adds	r0, #16
 801630c:	42a3      	cmp	r3, r4
 801630e:	d1ef      	bne.n	80162f0 <UART_tests+0x40>
 8016310:	4602      	mov	r2, r0
 8016312:	8819      	ldrh	r1, [r3, #0]
 8016314:	789b      	ldrb	r3, [r3, #2]
 8016316:	8011      	strh	r1, [r2, #0]
 8016318:	7093      	strb	r3, [r2, #2]

}
 801631a:	bf00      	nop
 801631c:	374c      	adds	r7, #76	; 0x4c
 801631e:	46bd      	mov	sp, r7
 8016320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016322:	bf00      	nop
 8016324:	0801a754 	.word	0x0801a754
 8016328:	0801a768 	.word	0x0801a768
 801632c:	20000694 	.word	0x20000694

08016330 <save_client_data>:
u16_t port_global;
struct pbuf *p_global;
const char* remoteIP_global;

void save_client_data(int len)
{
 8016330:	b480      	push	{r7}
 8016332:	b083      	sub	sp, #12
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]





}
 8016338:	bf00      	nop
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr

08016344 <send_to_cient>:

void send_to_cient(my_message receive_client_message )
{
 8016344:	b084      	sub	sp, #16
 8016346:	b580      	push	{r7, lr}
 8016348:	b09a      	sub	sp, #104	; 0x68
 801634a:	af00      	add	r7, sp, #0
 801634c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 8016350:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	/* copy the data into the buffer  */
	char buf[100];
	uint8_t id;
	printf("\r\n send data... \r\n");
 8016354:	482e      	ldr	r0, [pc, #184]	; (8016410 <send_to_cient+0xcc>)
 8016356:	f000 fc2b 	bl	8016bb0 <puts>
	buf[0]=receive_client_message.id;
 801635a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801635e:	713b      	strb	r3, [r7, #4]
	buf[1]=receive_client_message.Peripheral;
 8016360:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8016364:	717b      	strb	r3, [r7, #5]
	buf[1]=receive_client_message.Iterations;
 8016366:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801636a:	717b      	strb	r3, [r7, #5]
	buf[2]=receive_client_message.length;
 801636c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016370:	71bb      	strb	r3, [r7, #6]
	buf[3]='A';
 8016372:	2341      	movs	r3, #65	; 0x41
 8016374:	71fb      	strb	r3, [r7, #7]
	buf[4]='M';
 8016376:	234d      	movs	r3, #77	; 0x4d
 8016378:	723b      	strb	r3, [r7, #8]
	buf[5]=0;
 801637a:	2300      	movs	r3, #0
 801637c:	727b      	strb	r3, [r7, #9]
	addr_global->addr=16885952;
 801637e:	4b25      	ldr	r3, [pc, #148]	; (8016414 <send_to_cient+0xd0>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	4a25      	ldr	r2, [pc, #148]	; (8016418 <send_to_cient+0xd4>)
 8016384:	601a      	str	r2, [r3, #0]
	printf("\r\n addr_global:->%d \r\n",addr_global->addr);
 8016386:	4b23      	ldr	r3, [pc, #140]	; (8016414 <send_to_cient+0xd0>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4619      	mov	r1, r3
 801638e:	4823      	ldr	r0, [pc, #140]	; (801641c <send_to_cient+0xd8>)
 8016390:	f000 fb88 	bl	8016aa4 <iprintf>
	printf("\r\n port_global:->%d \r\n",port_global);
 8016394:	4b22      	ldr	r3, [pc, #136]	; (8016420 <send_to_cient+0xdc>)
 8016396:	881b      	ldrh	r3, [r3, #0]
 8016398:	4619      	mov	r1, r3
 801639a:	4822      	ldr	r0, [pc, #136]	; (8016424 <send_to_cient+0xe0>)
 801639c:	f000 fb82 	bl	8016aa4 <iprintf>

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,14, PBUF_RAM);
 80163a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163a4:	210e      	movs	r1, #14
 80163a6:	2036      	movs	r0, #54	; 0x36
 80163a8:	f7f6 fa3c 	bl	800c824 <pbuf_alloc>
 80163ac:	4603      	mov	r3, r0
 80163ae:	4a1e      	ldr	r2, [pc, #120]	; (8016428 <send_to_cient+0xe4>)
 80163b0:	6013      	str	r3, [r2, #0]
	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, 14);
 80163b2:	4b1d      	ldr	r3, [pc, #116]	; (8016428 <send_to_cient+0xe4>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	1d39      	adds	r1, r7, #4
 80163b8:	220e      	movs	r2, #14
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7f6 ff82 	bl	800d2c4 <pbuf_take>
	/* Connect to the remote client */
	udp_connect(upcb_global, addr_global, port_global);
 80163c0:	4b1a      	ldr	r3, [pc, #104]	; (801642c <send_to_cient+0xe8>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	4a13      	ldr	r2, [pc, #76]	; (8016414 <send_to_cient+0xd0>)
 80163c6:	6811      	ldr	r1, [r2, #0]
 80163c8:	4a15      	ldr	r2, [pc, #84]	; (8016420 <send_to_cient+0xdc>)
 80163ca:	8812      	ldrh	r2, [r2, #0]
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7fc ff17 	bl	8013200 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb_global, txBuf);
 80163d2:	4b16      	ldr	r3, [pc, #88]	; (801642c <send_to_cient+0xe8>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4a14      	ldr	r2, [pc, #80]	; (8016428 <send_to_cient+0xe4>)
 80163d8:	6812      	ldr	r2, [r2, #0]
 80163da:	4611      	mov	r1, r2
 80163dc:	4618      	mov	r0, r3
 80163de:	f7fc fc9d 	bl	8012d1c <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb_global);
 80163e2:	4b12      	ldr	r3, [pc, #72]	; (801642c <send_to_cient+0xe8>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7fc ff78 	bl	80132dc <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 80163ec:	4b0e      	ldr	r3, [pc, #56]	; (8016428 <send_to_cient+0xe4>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7f6 fcfb 	bl	800cdec <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p_global);
 80163f6:	4b0e      	ldr	r3, [pc, #56]	; (8016430 <send_to_cient+0xec>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7f6 fcf6 	bl	800cdec <pbuf_free>
}
 8016400:	bf00      	nop
 8016402:	3768      	adds	r7, #104	; 0x68
 8016404:	46bd      	mov	sp, r7
 8016406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801640a:	b004      	add	sp, #16
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	0801a780 	.word	0x0801a780
 8016414:	20008e40 	.word	0x20008e40
 8016418:	0101a8c0 	.word	0x0101a8c0
 801641c:	0801a794 	.word	0x0801a794
 8016420:	20008e84 	.word	0x20008e84
 8016424:	0801a7ac 	.word	0x0801a7ac
 8016428:	20008e7c 	.word	0x20008e7c
 801642c:	20008e80 	.word	0x20008e80
 8016430:	20008e88 	.word	0x20008e88

08016434 <initialization_receive_client_message>:

int initialization_receive_client_message(struct pbuf *p)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b082      	sub	sp, #8
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
	receive_client_message.id= *(uint8_t *)(p->payload + 0);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	781a      	ldrb	r2, [r3, #0]
 8016442:	4b10      	ldr	r3, [pc, #64]	; (8016484 <initialization_receive_client_message+0x50>)
 8016444:	701a      	strb	r2, [r3, #0]
	receive_client_message.Peripheral= *(uint8_t *)(p->payload + 1);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	785a      	ldrb	r2, [r3, #1]
 801644c:	4b0d      	ldr	r3, [pc, #52]	; (8016484 <initialization_receive_client_message+0x50>)
 801644e:	705a      	strb	r2, [r3, #1]
	receive_client_message.Iterations= *(uint8_t *)(p->payload + 2);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	789a      	ldrb	r2, [r3, #2]
 8016456:	4b0b      	ldr	r3, [pc, #44]	; (8016484 <initialization_receive_client_message+0x50>)
 8016458:	709a      	strb	r2, [r3, #2]
	receive_client_message.length= *(uint8_t *)(p->payload + 3);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	78da      	ldrb	r2, [r3, #3]
 8016460:	4b08      	ldr	r3, [pc, #32]	; (8016484 <initialization_receive_client_message+0x50>)
 8016462:	70da      	strb	r2, [r3, #3]

	memcpy(receive_client_message.msg , (p->payload + 4),  receive_client_message.length);
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	685b      	ldr	r3, [r3, #4]
 8016468:	3304      	adds	r3, #4
 801646a:	4a06      	ldr	r2, [pc, #24]	; (8016484 <initialization_receive_client_message+0x50>)
 801646c:	78d2      	ldrb	r2, [r2, #3]
 801646e:	4619      	mov	r1, r3
 8016470:	4805      	ldr	r0, [pc, #20]	; (8016488 <initialization_receive_client_message+0x54>)
 8016472:	f000 fb01 	bl	8016a78 <memcpy>

	return 4+receive_client_message.length;
 8016476:	4b03      	ldr	r3, [pc, #12]	; (8016484 <initialization_receive_client_message+0x50>)
 8016478:	78db      	ldrb	r3, [r3, #3]
 801647a:	3304      	adds	r3, #4
}
 801647c:	4618      	mov	r0, r3
 801647e:	3708      	adds	r7, #8
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}
 8016484:	20008e44 	.word	0x20008e44
 8016488:	20008e48 	.word	0x20008e48

0801648c <udp_receive_callback>:

void udp_receive_callback(
		void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b086      	sub	sp, #24
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
 8016498:	603b      	str	r3, [r7, #0]
	flag_message_From_client=TRUE;
 801649a:	4b10      	ldr	r3, [pc, #64]	; (80164dc <udp_receive_callback+0x50>)
 801649c:	2201      	movs	r2, #1
 801649e:	601a      	str	r2, [r3, #0]
	/* Get the IP of the Client */
	/* Get the IP of the Client */
	addr_global=addr;
 80164a0:	4a0f      	ldr	r2, [pc, #60]	; (80164e0 <udp_receive_callback+0x54>)
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	6013      	str	r3, [r2, #0]
    remoteIP_global = ipaddr_ntoa(addr);
 80164a6:	6838      	ldr	r0, [r7, #0]
 80164a8:	f7fe fb9c 	bl	8014be4 <ip4addr_ntoa>
 80164ac:	4603      	mov	r3, r0
 80164ae:	4a0d      	ldr	r2, [pc, #52]	; (80164e4 <udp_receive_callback+0x58>)
 80164b0:	6013      	str	r3, [r2, #0]

	upcb_global=upcb;
 80164b2:	4a0d      	ldr	r2, [pc, #52]	; (80164e8 <udp_receive_callback+0x5c>)
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	6013      	str	r3, [r2, #0]

	port_global=port;
 80164b8:	4a0c      	ldr	r2, [pc, #48]	; (80164ec <udp_receive_callback+0x60>)
 80164ba:	8c3b      	ldrh	r3, [r7, #32]
 80164bc:	8013      	strh	r3, [r2, #0]
	p_global=p;
 80164be:	4a0c      	ldr	r2, [pc, #48]	; (80164f0 <udp_receive_callback+0x64>)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6013      	str	r3, [r2, #0]

	const int len =initialization_receive_client_message(p);
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7ff ffb5 	bl	8016434 <initialization_receive_client_message>
 80164ca:	6178      	str	r0, [r7, #20]

	save_client_data(len);
 80164cc:	6978      	ldr	r0, [r7, #20]
 80164ce:	f7ff ff2f 	bl	8016330 <save_client_data>



}
 80164d2:	bf00      	nop
 80164d4:	3718      	adds	r7, #24
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	20008e3c 	.word	0x20008e3c
 80164e0:	20008e40 	.word	0x20008e40
 80164e4:	20008e8c 	.word	0x20008e8c
 80164e8:	20008e80 	.word	0x20008e80
 80164ec:	20008e84 	.word	0x20008e84
 80164f0:	20008e88 	.word	0x20008e88

080164f4 <udpServer_init>:

void udpServer_init(void) {
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb* upcb = udp_new();
 80164fa:	f7fc ff79 	bl	80133f0 <udp_new>
 80164fe:	4603      	mov	r3, r0
 8016500:	607b      	str	r3, [r7, #4]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 7 is the server UDP port
 8016502:	2207      	movs	r2, #7
 8016504:	490b      	ldr	r1, [pc, #44]	; (8016534 <udpServer_init+0x40>)
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f7fc fdf2 	bl	80130f0 <udp_bind>
 801650c:	4603      	mov	r3, r0
 801650e:	70fb      	strb	r3, [r7, #3]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 8016510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d105      	bne.n	8016524 <udpServer_init+0x30>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8016518:	2200      	movs	r2, #0
 801651a:	4907      	ldr	r1, [pc, #28]	; (8016538 <udpServer_init+0x44>)
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f7fc ff05 	bl	801332c <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 8016522:	e002      	b.n	801652a <udpServer_init+0x36>
	   udp_remove(upcb);
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f7fc ff21 	bl	801336c <udp_remove>
}
 801652a:	bf00      	nop
 801652c:	3708      	adds	r7, #8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	0801a908 	.word	0x0801a908
 8016538:	0801648d 	.word	0x0801648d

0801653c <run_client_test>:

result_test  run_client_test(my_message receive_client_message)
{
 801653c:	b084      	sub	sp, #16
 801653e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016540:	b09b      	sub	sp, #108	; 0x6c
 8016542:	af0a      	add	r7, sp, #40	; 0x28
 8016544:	6078      	str	r0, [r7, #4]
 8016546:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	result_test result={FALSE,"ERROR"};
 801654e:	4bc3      	ldr	r3, [pc, #780]	; (801685c <run_client_test+0x320>)
 8016550:	f107 0408 	add.w	r4, r7, #8
 8016554:	461d      	mov	r5, r3
 8016556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801655a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801655c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801655e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016562:	682b      	ldr	r3, [r5, #0]
 8016564:	461a      	mov	r2, r3
 8016566:	8022      	strh	r2, [r4, #0]
 8016568:	3402      	adds	r4, #2
 801656a:	0c1b      	lsrs	r3, r3, #16
 801656c:	7023      	strb	r3, [r4, #0]
	uint8_t iteration=receive_client_message.Iterations;
 801656e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	switch(receive_client_message.Peripheral)
 8016576:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801657a:	3b01      	subs	r3, #1
 801657c:	2b0f      	cmp	r3, #15
 801657e:	f200 81a5 	bhi.w	80168cc <run_client_test+0x390>
 8016582:	a201      	add	r2, pc, #4	; (adr r2, 8016588 <run_client_test+0x4c>)
 8016584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016588:	08016813 	.word	0x08016813
 801658c:	080165c9 	.word	0x080165c9
 8016590:	080168cd 	.word	0x080168cd
 8016594:	080168cd 	.word	0x080168cd
 8016598:	08016693 	.word	0x08016693
 801659c:	080168cd 	.word	0x080168cd
 80165a0:	080168cd 	.word	0x080168cd
 80165a4:	080168cd 	.word	0x080168cd
 80165a8:	080168cd 	.word	0x080168cd
 80165ac:	080168cd 	.word	0x080168cd
 80165b0:	080168cd 	.word	0x080168cd
 80165b4:	080168cd 	.word	0x080168cd
 80165b8:	080168cd 	.word	0x080168cd
 80165bc:	080168cd 	.word	0x080168cd
 80165c0:	080168cd 	.word	0x080168cd
 80165c4:	0801675d 	.word	0x0801675d
  	{
	int result1 ;
  		case TEST_UART:
  			for (uint8_t i = 0; i < iteration ; i++)
 80165c8:	2300      	movs	r3, #0
 80165ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80165ce:	e02f      	b.n	8016630 <run_client_test+0xf4>
  			{
  				UART_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 80165d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165d4:	4619      	mov	r1, r3
 80165d6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80165da:	461c      	mov	r4, r3
 80165dc:	f107 0208 	add.w	r2, r7, #8
 80165e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80165e4:	1d18      	adds	r0, r3, #4
 80165e6:	4613      	mov	r3, r2
 80165e8:	4622      	mov	r2, r4
 80165ea:	f7ff fe61 	bl	80162b0 <UART_tests>
  				if(result.bool_test ==FALSE )
 80165ee:	7a3b      	ldrb	r3, [r7, #8]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d118      	bne.n	8016626 <run_client_test+0xea>
  					return result;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f107 0408 	add.w	r4, r7, #8
 80165fa:	469c      	mov	ip, r3
 80165fc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016600:	4665      	mov	r5, ip
 8016602:	4626      	mov	r6, r4
 8016604:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016606:	6028      	str	r0, [r5, #0]
 8016608:	6069      	str	r1, [r5, #4]
 801660a:	60aa      	str	r2, [r5, #8]
 801660c:	60eb      	str	r3, [r5, #12]
 801660e:	3410      	adds	r4, #16
 8016610:	f10c 0c10 	add.w	ip, ip, #16
 8016614:	4574      	cmp	r4, lr
 8016616:	d1f3      	bne.n	8016600 <run_client_test+0xc4>
 8016618:	4663      	mov	r3, ip
 801661a:	4622      	mov	r2, r4
 801661c:	8811      	ldrh	r1, [r2, #0]
 801661e:	7892      	ldrb	r2, [r2, #2]
 8016620:	8019      	strh	r1, [r3, #0]
 8016622:	709a      	strb	r2, [r3, #2]
 8016624:	e16b      	b.n	80168fe <run_client_test+0x3c2>
  			for (uint8_t i = 0; i < iteration ; i++)
 8016626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801662a:	3301      	adds	r3, #1
 801662c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016630:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8016634:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016638:	429a      	cmp	r2, r3
 801663a:	d3c9      	bcc.n	80165d0 <run_client_test+0x94>
  			}
  			print_result_test(result);
 801663c:	466c      	mov	r4, sp
 801663e:	f107 0518 	add.w	r5, r7, #24
 8016642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801664a:	682b      	ldr	r3, [r5, #0]
 801664c:	461a      	mov	r2, r3
 801664e:	8022      	strh	r2, [r4, #0]
 8016650:	3402      	adds	r4, #2
 8016652:	0c1b      	lsrs	r3, r3, #16
 8016654:	7023      	strb	r3, [r4, #0]
 8016656:	f107 0308 	add.w	r3, r7, #8
 801665a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801665c:	f7ff fc92 	bl	8015f84 <print_result_test>
  			return result;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f107 0408 	add.w	r4, r7, #8
 8016666:	469c      	mov	ip, r3
 8016668:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 801666c:	4665      	mov	r5, ip
 801666e:	4626      	mov	r6, r4
 8016670:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016672:	6028      	str	r0, [r5, #0]
 8016674:	6069      	str	r1, [r5, #4]
 8016676:	60aa      	str	r2, [r5, #8]
 8016678:	60eb      	str	r3, [r5, #12]
 801667a:	3410      	adds	r4, #16
 801667c:	f10c 0c10 	add.w	ip, ip, #16
 8016680:	4574      	cmp	r4, lr
 8016682:	d1f3      	bne.n	801666c <run_client_test+0x130>
 8016684:	4663      	mov	r3, ip
 8016686:	4622      	mov	r2, r4
 8016688:	8811      	ldrh	r1, [r2, #0]
 801668a:	7892      	ldrb	r2, [r2, #2]
 801668c:	8019      	strh	r1, [r3, #0]
 801668e:	709a      	strb	r2, [r3, #2]
 8016690:	e135      	b.n	80168fe <run_client_test+0x3c2>


  		case TEST_I2C:

  			for (uint8_t i = 0; i < iteration ; i++)
 8016692:	2300      	movs	r3, #0
 8016694:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8016698:	e02f      	b.n	80166fa <run_client_test+0x1be>
  			{
  				I2C_tests(receive_client_message.msg,receive_client_message.length,receive_client_message.Iterations,&result);
 801669a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801669e:	4619      	mov	r1, r3
 80166a0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80166a4:	461c      	mov	r4, r3
 80166a6:	f107 0208 	add.w	r2, r7, #8
 80166aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166ae:	1d18      	adds	r0, r3, #4
 80166b0:	4613      	mov	r3, r2
 80166b2:	4622      	mov	r2, r4
 80166b4:	f7ff fc16 	bl	8015ee4 <I2C_tests>
  			  	if(result.bool_test ==FALSE )
 80166b8:	7a3b      	ldrb	r3, [r7, #8]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d118      	bne.n	80166f0 <run_client_test+0x1b4>
  			  		return result;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	f107 0408 	add.w	r4, r7, #8
 80166c4:	469c      	mov	ip, r3
 80166c6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80166ca:	4665      	mov	r5, ip
 80166cc:	4626      	mov	r6, r4
 80166ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80166d0:	6028      	str	r0, [r5, #0]
 80166d2:	6069      	str	r1, [r5, #4]
 80166d4:	60aa      	str	r2, [r5, #8]
 80166d6:	60eb      	str	r3, [r5, #12]
 80166d8:	3410      	adds	r4, #16
 80166da:	f10c 0c10 	add.w	ip, ip, #16
 80166de:	4574      	cmp	r4, lr
 80166e0:	d1f3      	bne.n	80166ca <run_client_test+0x18e>
 80166e2:	4663      	mov	r3, ip
 80166e4:	4622      	mov	r2, r4
 80166e6:	8811      	ldrh	r1, [r2, #0]
 80166e8:	7892      	ldrb	r2, [r2, #2]
 80166ea:	8019      	strh	r1, [r3, #0]
 80166ec:	709a      	strb	r2, [r3, #2]
 80166ee:	e106      	b.n	80168fe <run_client_test+0x3c2>
  			for (uint8_t i = 0; i < iteration ; i++)
 80166f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80166f4:	3301      	adds	r3, #1
 80166f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80166fa:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80166fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016702:	429a      	cmp	r2, r3
 8016704:	d3c9      	bcc.n	801669a <run_client_test+0x15e>
  			}
  			print_result_test(result);
 8016706:	466c      	mov	r4, sp
 8016708:	f107 0518 	add.w	r5, r7, #24
 801670c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801670e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016714:	682b      	ldr	r3, [r5, #0]
 8016716:	461a      	mov	r2, r3
 8016718:	8022      	strh	r2, [r4, #0]
 801671a:	3402      	adds	r4, #2
 801671c:	0c1b      	lsrs	r3, r3, #16
 801671e:	7023      	strb	r3, [r4, #0]
 8016720:	f107 0308 	add.w	r3, r7, #8
 8016724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016726:	f7ff fc2d 	bl	8015f84 <print_result_test>
  			return result;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f107 0408 	add.w	r4, r7, #8
 8016730:	469c      	mov	ip, r3
 8016732:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016736:	4665      	mov	r5, ip
 8016738:	4626      	mov	r6, r4
 801673a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801673c:	6028      	str	r0, [r5, #0]
 801673e:	6069      	str	r1, [r5, #4]
 8016740:	60aa      	str	r2, [r5, #8]
 8016742:	60eb      	str	r3, [r5, #12]
 8016744:	3410      	adds	r4, #16
 8016746:	f10c 0c10 	add.w	ip, ip, #16
 801674a:	4574      	cmp	r4, lr
 801674c:	d1f3      	bne.n	8016736 <run_client_test+0x1fa>
 801674e:	4663      	mov	r3, ip
 8016750:	4622      	mov	r2, r4
 8016752:	8811      	ldrh	r1, [r2, #0]
 8016754:	7892      	ldrb	r2, [r2, #2]
 8016756:	8019      	strh	r1, [r3, #0]
 8016758:	709a      	strb	r2, [r3, #2]
 801675a:	e0d0      	b.n	80168fe <run_client_test+0x3c2>


  		case TEST_ADC:
  			for (uint8_t i = 0; i < iteration ; i++)
 801675c:	2300      	movs	r3, #0
 801675e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8016762:	e025      	b.n	80167b0 <run_client_test+0x274>
  			{
  				ADC_tests(&result);
 8016764:	f107 0308 	add.w	r3, r7, #8
 8016768:	4618      	mov	r0, r3
 801676a:	f7ff fa31 	bl	8015bd0 <ADC_tests>
  			  	if(result.bool_test ==FALSE )
 801676e:	7a3b      	ldrb	r3, [r7, #8]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d118      	bne.n	80167a6 <run_client_test+0x26a>
  			  		return result;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f107 0408 	add.w	r4, r7, #8
 801677a:	469c      	mov	ip, r3
 801677c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016780:	4665      	mov	r5, ip
 8016782:	4626      	mov	r6, r4
 8016784:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016786:	6028      	str	r0, [r5, #0]
 8016788:	6069      	str	r1, [r5, #4]
 801678a:	60aa      	str	r2, [r5, #8]
 801678c:	60eb      	str	r3, [r5, #12]
 801678e:	3410      	adds	r4, #16
 8016790:	f10c 0c10 	add.w	ip, ip, #16
 8016794:	4574      	cmp	r4, lr
 8016796:	d1f3      	bne.n	8016780 <run_client_test+0x244>
 8016798:	4663      	mov	r3, ip
 801679a:	4622      	mov	r2, r4
 801679c:	8811      	ldrh	r1, [r2, #0]
 801679e:	7892      	ldrb	r2, [r2, #2]
 80167a0:	8019      	strh	r1, [r3, #0]
 80167a2:	709a      	strb	r2, [r3, #2]
 80167a4:	e0ab      	b.n	80168fe <run_client_test+0x3c2>
  			for (uint8_t i = 0; i < iteration ; i++)
 80167a6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80167aa:	3301      	adds	r3, #1
 80167ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80167b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80167b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d3d3      	bcc.n	8016764 <run_client_test+0x228>
  			}
  			 print_result_test(result);
 80167bc:	466c      	mov	r4, sp
 80167be:	f107 0518 	add.w	r5, r7, #24
 80167c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167ca:	682b      	ldr	r3, [r5, #0]
 80167cc:	461a      	mov	r2, r3
 80167ce:	8022      	strh	r2, [r4, #0]
 80167d0:	3402      	adds	r4, #2
 80167d2:	0c1b      	lsrs	r3, r3, #16
 80167d4:	7023      	strb	r3, [r4, #0]
 80167d6:	f107 0308 	add.w	r3, r7, #8
 80167da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80167dc:	f7ff fbd2 	bl	8015f84 <print_result_test>
  			 return result;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f107 0408 	add.w	r4, r7, #8
 80167e6:	469c      	mov	ip, r3
 80167e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80167ec:	4665      	mov	r5, ip
 80167ee:	4626      	mov	r6, r4
 80167f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80167f2:	6028      	str	r0, [r5, #0]
 80167f4:	6069      	str	r1, [r5, #4]
 80167f6:	60aa      	str	r2, [r5, #8]
 80167f8:	60eb      	str	r3, [r5, #12]
 80167fa:	3410      	adds	r4, #16
 80167fc:	f10c 0c10 	add.w	ip, ip, #16
 8016800:	4574      	cmp	r4, lr
 8016802:	d1f3      	bne.n	80167ec <run_client_test+0x2b0>
 8016804:	4663      	mov	r3, ip
 8016806:	4622      	mov	r2, r4
 8016808:	8811      	ldrh	r1, [r2, #0]
 801680a:	7892      	ldrb	r2, [r2, #2]
 801680c:	8019      	strh	r1, [r3, #0]
 801680e:	709a      	strb	r2, [r3, #2]
 8016810:	e075      	b.n	80168fe <run_client_test+0x3c2>

  		case Test_TIMER:

  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016812:	2300      	movs	r3, #0
 8016814:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8016818:	e027      	b.n	801686a <run_client_test+0x32e>
  		  	{
  		  		timer_test(&result);
 801681a:	f107 0308 	add.w	r3, r7, #8
 801681e:	4618      	mov	r0, r3
 8016820:	f000 f8cc 	bl	80169bc <timer_test>
  		  		if(result.bool_test ==FALSE )
 8016824:	7a3b      	ldrb	r3, [r7, #8]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d11a      	bne.n	8016860 <run_client_test+0x324>
  		  			return result;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f107 0408 	add.w	r4, r7, #8
 8016830:	469c      	mov	ip, r3
 8016832:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8016836:	4665      	mov	r5, ip
 8016838:	4626      	mov	r6, r4
 801683a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801683c:	6028      	str	r0, [r5, #0]
 801683e:	6069      	str	r1, [r5, #4]
 8016840:	60aa      	str	r2, [r5, #8]
 8016842:	60eb      	str	r3, [r5, #12]
 8016844:	3410      	adds	r4, #16
 8016846:	f10c 0c10 	add.w	ip, ip, #16
 801684a:	4574      	cmp	r4, lr
 801684c:	d1f3      	bne.n	8016836 <run_client_test+0x2fa>
 801684e:	4663      	mov	r3, ip
 8016850:	4622      	mov	r2, r4
 8016852:	8811      	ldrh	r1, [r2, #0]
 8016854:	7892      	ldrb	r2, [r2, #2]
 8016856:	8019      	strh	r1, [r3, #0]
 8016858:	709a      	strb	r2, [r3, #2]
 801685a:	e050      	b.n	80168fe <run_client_test+0x3c2>
 801685c:	0801a7c4 	.word	0x0801a7c4
  		  	for (uint8_t i = 0; i < iteration ; i++)
 8016860:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016864:	3301      	adds	r3, #1
 8016866:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 801686a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801686e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8016872:	429a      	cmp	r2, r3
 8016874:	d3d1      	bcc.n	801681a <run_client_test+0x2de>
  		  	}
  		  			 print_result_test(result);
 8016876:	466c      	mov	r4, sp
 8016878:	f107 0518 	add.w	r5, r7, #24
 801687c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801687e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016884:	682b      	ldr	r3, [r5, #0]
 8016886:	461a      	mov	r2, r3
 8016888:	8022      	strh	r2, [r4, #0]
 801688a:	3402      	adds	r4, #2
 801688c:	0c1b      	lsrs	r3, r3, #16
 801688e:	7023      	strb	r3, [r4, #0]
 8016890:	f107 0308 	add.w	r3, r7, #8
 8016894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016896:	f7ff fb75 	bl	8015f84 <print_result_test>
  		  			 return result;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f107 0408 	add.w	r4, r7, #8
 80168a0:	469c      	mov	ip, r3
 80168a2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80168a6:	4665      	mov	r5, ip
 80168a8:	4626      	mov	r6, r4
 80168aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80168ac:	6028      	str	r0, [r5, #0]
 80168ae:	6069      	str	r1, [r5, #4]
 80168b0:	60aa      	str	r2, [r5, #8]
 80168b2:	60eb      	str	r3, [r5, #12]
 80168b4:	3410      	adds	r4, #16
 80168b6:	f10c 0c10 	add.w	ip, ip, #16
 80168ba:	4574      	cmp	r4, lr
 80168bc:	d1f3      	bne.n	80168a6 <run_client_test+0x36a>
 80168be:	4663      	mov	r3, ip
 80168c0:	4622      	mov	r2, r4
 80168c2:	8811      	ldrh	r1, [r2, #0]
 80168c4:	7892      	ldrb	r2, [r2, #2]
 80168c6:	8019      	strh	r1, [r3, #0]
 80168c8:	709a      	strb	r2, [r3, #2]
 80168ca:	e018      	b.n	80168fe <run_client_test+0x3c2>
  		default:

  			break;
 80168cc:	bf00      	nop
  	}

	return result;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f107 0408 	add.w	r4, r7, #8
 80168d4:	469c      	mov	ip, r3
 80168d6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80168da:	4665      	mov	r5, ip
 80168dc:	4626      	mov	r6, r4
 80168de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80168e0:	6028      	str	r0, [r5, #0]
 80168e2:	6069      	str	r1, [r5, #4]
 80168e4:	60aa      	str	r2, [r5, #8]
 80168e6:	60eb      	str	r3, [r5, #12]
 80168e8:	3410      	adds	r4, #16
 80168ea:	f10c 0c10 	add.w	ip, ip, #16
 80168ee:	4574      	cmp	r4, lr
 80168f0:	d1f3      	bne.n	80168da <run_client_test+0x39e>
 80168f2:	4663      	mov	r3, ip
 80168f4:	4622      	mov	r2, r4
 80168f6:	8811      	ldrh	r1, [r2, #0]
 80168f8:	7892      	ldrb	r2, [r2, #2]
 80168fa:	8019      	strh	r1, [r3, #0]
 80168fc:	709a      	strb	r2, [r3, #2]
}
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	3744      	adds	r7, #68	; 0x44
 8016902:	46bd      	mov	sp, r7
 8016904:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016908:	b004      	add	sp, #16
 801690a:	4770      	bx	lr

0801690c <handle_reception_network>:


result_test result;
void handle_reception_network()
{
 801690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801690e:	b09d      	sub	sp, #116	; 0x74
 8016910:	af0c      	add	r7, sp, #48	; 0x30
	ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
 8016912:	4826      	ldr	r0, [pc, #152]	; (80169ac <handle_reception_network+0xa0>)
 8016914:	f7f4 fc88 	bl	800b228 <ethernetif_input>
	sys_check_timeouts();			//Handle which checks timeout expiration
 8016918:	f7fb fffc 	bl	8012914 <sys_check_timeouts>


	if(flag_message_From_client==TRUE)
 801691c:	4b24      	ldr	r3, [pc, #144]	; (80169b0 <handle_reception_network+0xa4>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2b01      	cmp	r3, #1
 8016922:	d13e      	bne.n	80169a2 <handle_reception_network+0x96>
	{
		result=run_client_test(receive_client_message);
 8016924:	4b23      	ldr	r3, [pc, #140]	; (80169b4 <handle_reception_network+0xa8>)
 8016926:	607b      	str	r3, [r7, #4]
 8016928:	f107 0c08 	add.w	ip, r7, #8
 801692c:	4e22      	ldr	r6, [pc, #136]	; (80169b8 <handle_reception_network+0xac>)
 801692e:	466c      	mov	r4, sp
 8016930:	f106 050c 	add.w	r5, r6, #12
 8016934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801693a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801693c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016940:	c403      	stmia	r4!, {r0, r1}
 8016942:	8022      	strh	r2, [r4, #0]
 8016944:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8016948:	4660      	mov	r0, ip
 801694a:	f7ff fdf7 	bl	801653c <run_client_test>
 801694e:	f107 0408 	add.w	r4, r7, #8
 8016952:	687e      	ldr	r6, [r7, #4]
 8016954:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8016958:	4635      	mov	r5, r6
 801695a:	4623      	mov	r3, r4
 801695c:	6818      	ldr	r0, [r3, #0]
 801695e:	6859      	ldr	r1, [r3, #4]
 8016960:	689a      	ldr	r2, [r3, #8]
 8016962:	68db      	ldr	r3, [r3, #12]
 8016964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016966:	3410      	adds	r4, #16
 8016968:	3610      	adds	r6, #16
 801696a:	4564      	cmp	r4, ip
 801696c:	d1f4      	bne.n	8016958 <handle_reception_network+0x4c>
 801696e:	4633      	mov	r3, r6
 8016970:	4622      	mov	r2, r4
 8016972:	8811      	ldrh	r1, [r2, #0]
 8016974:	7892      	ldrb	r2, [r2, #2]
 8016976:	8019      	strh	r1, [r3, #0]
 8016978:	709a      	strb	r2, [r3, #2]
		send_to_cient(receive_client_message  ) ;
 801697a:	4e0f      	ldr	r6, [pc, #60]	; (80169b8 <handle_reception_network+0xac>)
 801697c:	466c      	mov	r4, sp
 801697e:	f106 0510 	add.w	r5, r6, #16
 8016982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801698a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801698e:	6020      	str	r0, [r4, #0]
 8016990:	3404      	adds	r4, #4
 8016992:	8021      	strh	r1, [r4, #0]
 8016994:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8016998:	f7ff fcd4 	bl	8016344 <send_to_cient>

		flag_message_From_client=FALSE;
 801699c:	4b04      	ldr	r3, [pc, #16]	; (80169b0 <handle_reception_network+0xa4>)
 801699e:	2200      	movs	r2, #0
 80169a0:	601a      	str	r2, [r3, #0]
	}
}
 80169a2:	bf00      	nop
 80169a4:	3744      	adds	r7, #68	; 0x44
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169aa:	bf00      	nop
 80169ac:	20000c2c 	.word	0x20000c2c
 80169b0:	20008e3c 	.word	0x20008e3c
 80169b4:	20008e90 	.word	0x20008e90
 80169b8:	20008e44 	.word	0x20008e44

080169bc <timer_test>:

#include "RTG.h"

void timer_test( result_test*result)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b086      	sub	sp, #24
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]

int counter=0;
 80169c4:	2300      	movs	r3, #0
 80169c6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Base_Start_IT(TIM_2); //Initiate timer 2
 80169c8:	480e      	ldr	r0, [pc, #56]	; (8016a04 <timer_test+0x48>)
 80169ca:	f7f1 fd73 	bl	80084b4 <HAL_TIM_Base_Start_IT>
int new_TIM_counter,old_TIM_counter;
	while (1)
	{
		if(time_flag_PeriodElapsedCallback==TRUE)
 80169ce:	4b0e      	ldr	r3, [pc, #56]	; (8016a08 <timer_test+0x4c>)
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	2b01      	cmp	r3, #1
 80169d4:	d106      	bne.n	80169e4 <timer_test+0x28>
		{
			printf("\r\n counter-> %d \r\n",counter);
 80169d6:	6979      	ldr	r1, [r7, #20]
 80169d8:	480c      	ldr	r0, [pc, #48]	; (8016a0c <timer_test+0x50>)
 80169da:	f000 f863 	bl	8016aa4 <iprintf>
			time_flag_PeriodElapsedCallback=FALSE;
 80169de:	4b0a      	ldr	r3, [pc, #40]	; (8016a08 <timer_test+0x4c>)
 80169e0:	2200      	movs	r2, #0
 80169e2:	701a      	strb	r2, [r3, #0]
		}

		new_TIM_counter = __HAL_TIM_GET_COUNTER(TIM_2); //Get the TIM3 Counter Register value on runtime
 80169e4:	4b07      	ldr	r3, [pc, #28]	; (8016a04 <timer_test+0x48>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ea:	60fb      	str	r3, [r7, #12]
		if (new_TIM_counter < old_TIM_counter) //Check if period looped
 80169ec:	68fa      	ldr	r2, [r7, #12]
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	429a      	cmp	r2, r3
 80169f2:	da01      	bge.n	80169f8 <timer_test+0x3c>
		{
			counter=0;
 80169f4:	2300      	movs	r3, #0
 80169f6:	617b      	str	r3, [r7, #20]
		}
		counter++;
 80169f8:	697b      	ldr	r3, [r7, #20]
 80169fa:	3301      	adds	r3, #1
 80169fc:	617b      	str	r3, [r7, #20]
		old_TIM_counter = new_TIM_counter; //save old counter
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	613b      	str	r3, [r7, #16]
		if(time_flag_PeriodElapsedCallback==TRUE)
 8016a02:	e7e4      	b.n	80169ce <timer_test+0x12>
 8016a04:	20000538 	.word	0x20000538
 8016a08:	20008deb 	.word	0x20008deb
 8016a0c:	0801a7f8 	.word	0x0801a7f8

08016a10 <__libc_init_array>:
 8016a10:	b570      	push	{r4, r5, r6, lr}
 8016a12:	4d0d      	ldr	r5, [pc, #52]	; (8016a48 <__libc_init_array+0x38>)
 8016a14:	4c0d      	ldr	r4, [pc, #52]	; (8016a4c <__libc_init_array+0x3c>)
 8016a16:	1b64      	subs	r4, r4, r5
 8016a18:	10a4      	asrs	r4, r4, #2
 8016a1a:	2600      	movs	r6, #0
 8016a1c:	42a6      	cmp	r6, r4
 8016a1e:	d109      	bne.n	8016a34 <__libc_init_array+0x24>
 8016a20:	4d0b      	ldr	r5, [pc, #44]	; (8016a50 <__libc_init_array+0x40>)
 8016a22:	4c0c      	ldr	r4, [pc, #48]	; (8016a54 <__libc_init_array+0x44>)
 8016a24:	f001 f904 	bl	8017c30 <_init>
 8016a28:	1b64      	subs	r4, r4, r5
 8016a2a:	10a4      	asrs	r4, r4, #2
 8016a2c:	2600      	movs	r6, #0
 8016a2e:	42a6      	cmp	r6, r4
 8016a30:	d105      	bne.n	8016a3e <__libc_init_array+0x2e>
 8016a32:	bd70      	pop	{r4, r5, r6, pc}
 8016a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a38:	4798      	blx	r3
 8016a3a:	3601      	adds	r6, #1
 8016a3c:	e7ee      	b.n	8016a1c <__libc_init_array+0xc>
 8016a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a42:	4798      	blx	r3
 8016a44:	3601      	adds	r6, #1
 8016a46:	e7f2      	b.n	8016a2e <__libc_init_array+0x1e>
 8016a48:	0801aa6c 	.word	0x0801aa6c
 8016a4c:	0801aa6c 	.word	0x0801aa6c
 8016a50:	0801aa6c 	.word	0x0801aa6c
 8016a54:	0801aa70 	.word	0x0801aa70

08016a58 <memcmp>:
 8016a58:	b510      	push	{r4, lr}
 8016a5a:	3901      	subs	r1, #1
 8016a5c:	4402      	add	r2, r0
 8016a5e:	4290      	cmp	r0, r2
 8016a60:	d101      	bne.n	8016a66 <memcmp+0xe>
 8016a62:	2000      	movs	r0, #0
 8016a64:	e005      	b.n	8016a72 <memcmp+0x1a>
 8016a66:	7803      	ldrb	r3, [r0, #0]
 8016a68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016a6c:	42a3      	cmp	r3, r4
 8016a6e:	d001      	beq.n	8016a74 <memcmp+0x1c>
 8016a70:	1b18      	subs	r0, r3, r4
 8016a72:	bd10      	pop	{r4, pc}
 8016a74:	3001      	adds	r0, #1
 8016a76:	e7f2      	b.n	8016a5e <memcmp+0x6>

08016a78 <memcpy>:
 8016a78:	440a      	add	r2, r1
 8016a7a:	4291      	cmp	r1, r2
 8016a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a80:	d100      	bne.n	8016a84 <memcpy+0xc>
 8016a82:	4770      	bx	lr
 8016a84:	b510      	push	{r4, lr}
 8016a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a8e:	4291      	cmp	r1, r2
 8016a90:	d1f9      	bne.n	8016a86 <memcpy+0xe>
 8016a92:	bd10      	pop	{r4, pc}

08016a94 <memset>:
 8016a94:	4402      	add	r2, r0
 8016a96:	4603      	mov	r3, r0
 8016a98:	4293      	cmp	r3, r2
 8016a9a:	d100      	bne.n	8016a9e <memset+0xa>
 8016a9c:	4770      	bx	lr
 8016a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8016aa2:	e7f9      	b.n	8016a98 <memset+0x4>

08016aa4 <iprintf>:
 8016aa4:	b40f      	push	{r0, r1, r2, r3}
 8016aa6:	4b0a      	ldr	r3, [pc, #40]	; (8016ad0 <iprintf+0x2c>)
 8016aa8:	b513      	push	{r0, r1, r4, lr}
 8016aaa:	681c      	ldr	r4, [r3, #0]
 8016aac:	b124      	cbz	r4, 8016ab8 <iprintf+0x14>
 8016aae:	69a3      	ldr	r3, [r4, #24]
 8016ab0:	b913      	cbnz	r3, 8016ab8 <iprintf+0x14>
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	f000 faba 	bl	801702c <__sinit>
 8016ab8:	ab05      	add	r3, sp, #20
 8016aba:	9a04      	ldr	r2, [sp, #16]
 8016abc:	68a1      	ldr	r1, [r4, #8]
 8016abe:	9301      	str	r3, [sp, #4]
 8016ac0:	4620      	mov	r0, r4
 8016ac2:	f000 fcdd 	bl	8017480 <_vfiprintf_r>
 8016ac6:	b002      	add	sp, #8
 8016ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016acc:	b004      	add	sp, #16
 8016ace:	4770      	bx	lr
 8016ad0:	2000002c 	.word	0x2000002c

08016ad4 <_puts_r>:
 8016ad4:	b570      	push	{r4, r5, r6, lr}
 8016ad6:	460e      	mov	r6, r1
 8016ad8:	4605      	mov	r5, r0
 8016ada:	b118      	cbz	r0, 8016ae4 <_puts_r+0x10>
 8016adc:	6983      	ldr	r3, [r0, #24]
 8016ade:	b90b      	cbnz	r3, 8016ae4 <_puts_r+0x10>
 8016ae0:	f000 faa4 	bl	801702c <__sinit>
 8016ae4:	69ab      	ldr	r3, [r5, #24]
 8016ae6:	68ac      	ldr	r4, [r5, #8]
 8016ae8:	b913      	cbnz	r3, 8016af0 <_puts_r+0x1c>
 8016aea:	4628      	mov	r0, r5
 8016aec:	f000 fa9e 	bl	801702c <__sinit>
 8016af0:	4b2c      	ldr	r3, [pc, #176]	; (8016ba4 <_puts_r+0xd0>)
 8016af2:	429c      	cmp	r4, r3
 8016af4:	d120      	bne.n	8016b38 <_puts_r+0x64>
 8016af6:	686c      	ldr	r4, [r5, #4]
 8016af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016afa:	07db      	lsls	r3, r3, #31
 8016afc:	d405      	bmi.n	8016b0a <_puts_r+0x36>
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	0598      	lsls	r0, r3, #22
 8016b02:	d402      	bmi.n	8016b0a <_puts_r+0x36>
 8016b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b06:	f000 fb41 	bl	801718c <__retarget_lock_acquire_recursive>
 8016b0a:	89a3      	ldrh	r3, [r4, #12]
 8016b0c:	0719      	lsls	r1, r3, #28
 8016b0e:	d51d      	bpl.n	8016b4c <_puts_r+0x78>
 8016b10:	6923      	ldr	r3, [r4, #16]
 8016b12:	b1db      	cbz	r3, 8016b4c <_puts_r+0x78>
 8016b14:	3e01      	subs	r6, #1
 8016b16:	68a3      	ldr	r3, [r4, #8]
 8016b18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	60a3      	str	r3, [r4, #8]
 8016b20:	bb39      	cbnz	r1, 8016b72 <_puts_r+0x9e>
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	da38      	bge.n	8016b98 <_puts_r+0xc4>
 8016b26:	4622      	mov	r2, r4
 8016b28:	210a      	movs	r1, #10
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	f000 f886 	bl	8016c3c <__swbuf_r>
 8016b30:	3001      	adds	r0, #1
 8016b32:	d011      	beq.n	8016b58 <_puts_r+0x84>
 8016b34:	250a      	movs	r5, #10
 8016b36:	e011      	b.n	8016b5c <_puts_r+0x88>
 8016b38:	4b1b      	ldr	r3, [pc, #108]	; (8016ba8 <_puts_r+0xd4>)
 8016b3a:	429c      	cmp	r4, r3
 8016b3c:	d101      	bne.n	8016b42 <_puts_r+0x6e>
 8016b3e:	68ac      	ldr	r4, [r5, #8]
 8016b40:	e7da      	b.n	8016af8 <_puts_r+0x24>
 8016b42:	4b1a      	ldr	r3, [pc, #104]	; (8016bac <_puts_r+0xd8>)
 8016b44:	429c      	cmp	r4, r3
 8016b46:	bf08      	it	eq
 8016b48:	68ec      	ldreq	r4, [r5, #12]
 8016b4a:	e7d5      	b.n	8016af8 <_puts_r+0x24>
 8016b4c:	4621      	mov	r1, r4
 8016b4e:	4628      	mov	r0, r5
 8016b50:	f000 f8c6 	bl	8016ce0 <__swsetup_r>
 8016b54:	2800      	cmp	r0, #0
 8016b56:	d0dd      	beq.n	8016b14 <_puts_r+0x40>
 8016b58:	f04f 35ff 	mov.w	r5, #4294967295
 8016b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b5e:	07da      	lsls	r2, r3, #31
 8016b60:	d405      	bmi.n	8016b6e <_puts_r+0x9a>
 8016b62:	89a3      	ldrh	r3, [r4, #12]
 8016b64:	059b      	lsls	r3, r3, #22
 8016b66:	d402      	bmi.n	8016b6e <_puts_r+0x9a>
 8016b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b6a:	f000 fb10 	bl	801718e <__retarget_lock_release_recursive>
 8016b6e:	4628      	mov	r0, r5
 8016b70:	bd70      	pop	{r4, r5, r6, pc}
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	da04      	bge.n	8016b80 <_puts_r+0xac>
 8016b76:	69a2      	ldr	r2, [r4, #24]
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	dc06      	bgt.n	8016b8a <_puts_r+0xb6>
 8016b7c:	290a      	cmp	r1, #10
 8016b7e:	d004      	beq.n	8016b8a <_puts_r+0xb6>
 8016b80:	6823      	ldr	r3, [r4, #0]
 8016b82:	1c5a      	adds	r2, r3, #1
 8016b84:	6022      	str	r2, [r4, #0]
 8016b86:	7019      	strb	r1, [r3, #0]
 8016b88:	e7c5      	b.n	8016b16 <_puts_r+0x42>
 8016b8a:	4622      	mov	r2, r4
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	f000 f855 	bl	8016c3c <__swbuf_r>
 8016b92:	3001      	adds	r0, #1
 8016b94:	d1bf      	bne.n	8016b16 <_puts_r+0x42>
 8016b96:	e7df      	b.n	8016b58 <_puts_r+0x84>
 8016b98:	6823      	ldr	r3, [r4, #0]
 8016b9a:	250a      	movs	r5, #10
 8016b9c:	1c5a      	adds	r2, r3, #1
 8016b9e:	6022      	str	r2, [r4, #0]
 8016ba0:	701d      	strb	r5, [r3, #0]
 8016ba2:	e7db      	b.n	8016b5c <_puts_r+0x88>
 8016ba4:	0801a9f0 	.word	0x0801a9f0
 8016ba8:	0801aa10 	.word	0x0801aa10
 8016bac:	0801a9d0 	.word	0x0801a9d0

08016bb0 <puts>:
 8016bb0:	4b02      	ldr	r3, [pc, #8]	; (8016bbc <puts+0xc>)
 8016bb2:	4601      	mov	r1, r0
 8016bb4:	6818      	ldr	r0, [r3, #0]
 8016bb6:	f7ff bf8d 	b.w	8016ad4 <_puts_r>
 8016bba:	bf00      	nop
 8016bbc:	2000002c 	.word	0x2000002c

08016bc0 <rand>:
 8016bc0:	4b16      	ldr	r3, [pc, #88]	; (8016c1c <rand+0x5c>)
 8016bc2:	b510      	push	{r4, lr}
 8016bc4:	681c      	ldr	r4, [r3, #0]
 8016bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016bc8:	b9b3      	cbnz	r3, 8016bf8 <rand+0x38>
 8016bca:	2018      	movs	r0, #24
 8016bcc:	f000 fb46 	bl	801725c <malloc>
 8016bd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8016bd2:	b928      	cbnz	r0, 8016be0 <rand+0x20>
 8016bd4:	4602      	mov	r2, r0
 8016bd6:	4b12      	ldr	r3, [pc, #72]	; (8016c20 <rand+0x60>)
 8016bd8:	4812      	ldr	r0, [pc, #72]	; (8016c24 <rand+0x64>)
 8016bda:	214e      	movs	r1, #78	; 0x4e
 8016bdc:	f000 f8ee 	bl	8016dbc <__assert_func>
 8016be0:	4a11      	ldr	r2, [pc, #68]	; (8016c28 <rand+0x68>)
 8016be2:	4b12      	ldr	r3, [pc, #72]	; (8016c2c <rand+0x6c>)
 8016be4:	e9c0 2300 	strd	r2, r3, [r0]
 8016be8:	4b11      	ldr	r3, [pc, #68]	; (8016c30 <rand+0x70>)
 8016bea:	6083      	str	r3, [r0, #8]
 8016bec:	230b      	movs	r3, #11
 8016bee:	8183      	strh	r3, [r0, #12]
 8016bf0:	2201      	movs	r2, #1
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016bf8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016bfa:	4a0e      	ldr	r2, [pc, #56]	; (8016c34 <rand+0x74>)
 8016bfc:	6920      	ldr	r0, [r4, #16]
 8016bfe:	6963      	ldr	r3, [r4, #20]
 8016c00:	490d      	ldr	r1, [pc, #52]	; (8016c38 <rand+0x78>)
 8016c02:	4342      	muls	r2, r0
 8016c04:	fb01 2203 	mla	r2, r1, r3, r2
 8016c08:	fba0 0101 	umull	r0, r1, r0, r1
 8016c0c:	1c43      	adds	r3, r0, #1
 8016c0e:	eb42 0001 	adc.w	r0, r2, r1
 8016c12:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016c16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016c1a:	bd10      	pop	{r4, pc}
 8016c1c:	2000002c 	.word	0x2000002c
 8016c20:	0801a920 	.word	0x0801a920
 8016c24:	0801a937 	.word	0x0801a937
 8016c28:	abcd330e 	.word	0xabcd330e
 8016c2c:	e66d1234 	.word	0xe66d1234
 8016c30:	0005deec 	.word	0x0005deec
 8016c34:	5851f42d 	.word	0x5851f42d
 8016c38:	4c957f2d 	.word	0x4c957f2d

08016c3c <__swbuf_r>:
 8016c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c3e:	460e      	mov	r6, r1
 8016c40:	4614      	mov	r4, r2
 8016c42:	4605      	mov	r5, r0
 8016c44:	b118      	cbz	r0, 8016c4e <__swbuf_r+0x12>
 8016c46:	6983      	ldr	r3, [r0, #24]
 8016c48:	b90b      	cbnz	r3, 8016c4e <__swbuf_r+0x12>
 8016c4a:	f000 f9ef 	bl	801702c <__sinit>
 8016c4e:	4b21      	ldr	r3, [pc, #132]	; (8016cd4 <__swbuf_r+0x98>)
 8016c50:	429c      	cmp	r4, r3
 8016c52:	d12b      	bne.n	8016cac <__swbuf_r+0x70>
 8016c54:	686c      	ldr	r4, [r5, #4]
 8016c56:	69a3      	ldr	r3, [r4, #24]
 8016c58:	60a3      	str	r3, [r4, #8]
 8016c5a:	89a3      	ldrh	r3, [r4, #12]
 8016c5c:	071a      	lsls	r2, r3, #28
 8016c5e:	d52f      	bpl.n	8016cc0 <__swbuf_r+0x84>
 8016c60:	6923      	ldr	r3, [r4, #16]
 8016c62:	b36b      	cbz	r3, 8016cc0 <__swbuf_r+0x84>
 8016c64:	6923      	ldr	r3, [r4, #16]
 8016c66:	6820      	ldr	r0, [r4, #0]
 8016c68:	1ac0      	subs	r0, r0, r3
 8016c6a:	6963      	ldr	r3, [r4, #20]
 8016c6c:	b2f6      	uxtb	r6, r6
 8016c6e:	4283      	cmp	r3, r0
 8016c70:	4637      	mov	r7, r6
 8016c72:	dc04      	bgt.n	8016c7e <__swbuf_r+0x42>
 8016c74:	4621      	mov	r1, r4
 8016c76:	4628      	mov	r0, r5
 8016c78:	f000 f944 	bl	8016f04 <_fflush_r>
 8016c7c:	bb30      	cbnz	r0, 8016ccc <__swbuf_r+0x90>
 8016c7e:	68a3      	ldr	r3, [r4, #8]
 8016c80:	3b01      	subs	r3, #1
 8016c82:	60a3      	str	r3, [r4, #8]
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	1c5a      	adds	r2, r3, #1
 8016c88:	6022      	str	r2, [r4, #0]
 8016c8a:	701e      	strb	r6, [r3, #0]
 8016c8c:	6963      	ldr	r3, [r4, #20]
 8016c8e:	3001      	adds	r0, #1
 8016c90:	4283      	cmp	r3, r0
 8016c92:	d004      	beq.n	8016c9e <__swbuf_r+0x62>
 8016c94:	89a3      	ldrh	r3, [r4, #12]
 8016c96:	07db      	lsls	r3, r3, #31
 8016c98:	d506      	bpl.n	8016ca8 <__swbuf_r+0x6c>
 8016c9a:	2e0a      	cmp	r6, #10
 8016c9c:	d104      	bne.n	8016ca8 <__swbuf_r+0x6c>
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f000 f92f 	bl	8016f04 <_fflush_r>
 8016ca6:	b988      	cbnz	r0, 8016ccc <__swbuf_r+0x90>
 8016ca8:	4638      	mov	r0, r7
 8016caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cac:	4b0a      	ldr	r3, [pc, #40]	; (8016cd8 <__swbuf_r+0x9c>)
 8016cae:	429c      	cmp	r4, r3
 8016cb0:	d101      	bne.n	8016cb6 <__swbuf_r+0x7a>
 8016cb2:	68ac      	ldr	r4, [r5, #8]
 8016cb4:	e7cf      	b.n	8016c56 <__swbuf_r+0x1a>
 8016cb6:	4b09      	ldr	r3, [pc, #36]	; (8016cdc <__swbuf_r+0xa0>)
 8016cb8:	429c      	cmp	r4, r3
 8016cba:	bf08      	it	eq
 8016cbc:	68ec      	ldreq	r4, [r5, #12]
 8016cbe:	e7ca      	b.n	8016c56 <__swbuf_r+0x1a>
 8016cc0:	4621      	mov	r1, r4
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	f000 f80c 	bl	8016ce0 <__swsetup_r>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d0cb      	beq.n	8016c64 <__swbuf_r+0x28>
 8016ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8016cd0:	e7ea      	b.n	8016ca8 <__swbuf_r+0x6c>
 8016cd2:	bf00      	nop
 8016cd4:	0801a9f0 	.word	0x0801a9f0
 8016cd8:	0801aa10 	.word	0x0801aa10
 8016cdc:	0801a9d0 	.word	0x0801a9d0

08016ce0 <__swsetup_r>:
 8016ce0:	4b32      	ldr	r3, [pc, #200]	; (8016dac <__swsetup_r+0xcc>)
 8016ce2:	b570      	push	{r4, r5, r6, lr}
 8016ce4:	681d      	ldr	r5, [r3, #0]
 8016ce6:	4606      	mov	r6, r0
 8016ce8:	460c      	mov	r4, r1
 8016cea:	b125      	cbz	r5, 8016cf6 <__swsetup_r+0x16>
 8016cec:	69ab      	ldr	r3, [r5, #24]
 8016cee:	b913      	cbnz	r3, 8016cf6 <__swsetup_r+0x16>
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	f000 f99b 	bl	801702c <__sinit>
 8016cf6:	4b2e      	ldr	r3, [pc, #184]	; (8016db0 <__swsetup_r+0xd0>)
 8016cf8:	429c      	cmp	r4, r3
 8016cfa:	d10f      	bne.n	8016d1c <__swsetup_r+0x3c>
 8016cfc:	686c      	ldr	r4, [r5, #4]
 8016cfe:	89a3      	ldrh	r3, [r4, #12]
 8016d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d04:	0719      	lsls	r1, r3, #28
 8016d06:	d42c      	bmi.n	8016d62 <__swsetup_r+0x82>
 8016d08:	06dd      	lsls	r5, r3, #27
 8016d0a:	d411      	bmi.n	8016d30 <__swsetup_r+0x50>
 8016d0c:	2309      	movs	r3, #9
 8016d0e:	6033      	str	r3, [r6, #0]
 8016d10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016d14:	81a3      	strh	r3, [r4, #12]
 8016d16:	f04f 30ff 	mov.w	r0, #4294967295
 8016d1a:	e03e      	b.n	8016d9a <__swsetup_r+0xba>
 8016d1c:	4b25      	ldr	r3, [pc, #148]	; (8016db4 <__swsetup_r+0xd4>)
 8016d1e:	429c      	cmp	r4, r3
 8016d20:	d101      	bne.n	8016d26 <__swsetup_r+0x46>
 8016d22:	68ac      	ldr	r4, [r5, #8]
 8016d24:	e7eb      	b.n	8016cfe <__swsetup_r+0x1e>
 8016d26:	4b24      	ldr	r3, [pc, #144]	; (8016db8 <__swsetup_r+0xd8>)
 8016d28:	429c      	cmp	r4, r3
 8016d2a:	bf08      	it	eq
 8016d2c:	68ec      	ldreq	r4, [r5, #12]
 8016d2e:	e7e6      	b.n	8016cfe <__swsetup_r+0x1e>
 8016d30:	0758      	lsls	r0, r3, #29
 8016d32:	d512      	bpl.n	8016d5a <__swsetup_r+0x7a>
 8016d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d36:	b141      	cbz	r1, 8016d4a <__swsetup_r+0x6a>
 8016d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d3c:	4299      	cmp	r1, r3
 8016d3e:	d002      	beq.n	8016d46 <__swsetup_r+0x66>
 8016d40:	4630      	mov	r0, r6
 8016d42:	f000 fa93 	bl	801726c <_free_r>
 8016d46:	2300      	movs	r3, #0
 8016d48:	6363      	str	r3, [r4, #52]	; 0x34
 8016d4a:	89a3      	ldrh	r3, [r4, #12]
 8016d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016d50:	81a3      	strh	r3, [r4, #12]
 8016d52:	2300      	movs	r3, #0
 8016d54:	6063      	str	r3, [r4, #4]
 8016d56:	6923      	ldr	r3, [r4, #16]
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	f043 0308 	orr.w	r3, r3, #8
 8016d60:	81a3      	strh	r3, [r4, #12]
 8016d62:	6923      	ldr	r3, [r4, #16]
 8016d64:	b94b      	cbnz	r3, 8016d7a <__swsetup_r+0x9a>
 8016d66:	89a3      	ldrh	r3, [r4, #12]
 8016d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d70:	d003      	beq.n	8016d7a <__swsetup_r+0x9a>
 8016d72:	4621      	mov	r1, r4
 8016d74:	4630      	mov	r0, r6
 8016d76:	f000 fa31 	bl	80171dc <__smakebuf_r>
 8016d7a:	89a0      	ldrh	r0, [r4, #12]
 8016d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d80:	f010 0301 	ands.w	r3, r0, #1
 8016d84:	d00a      	beq.n	8016d9c <__swsetup_r+0xbc>
 8016d86:	2300      	movs	r3, #0
 8016d88:	60a3      	str	r3, [r4, #8]
 8016d8a:	6963      	ldr	r3, [r4, #20]
 8016d8c:	425b      	negs	r3, r3
 8016d8e:	61a3      	str	r3, [r4, #24]
 8016d90:	6923      	ldr	r3, [r4, #16]
 8016d92:	b943      	cbnz	r3, 8016da6 <__swsetup_r+0xc6>
 8016d94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d98:	d1ba      	bne.n	8016d10 <__swsetup_r+0x30>
 8016d9a:	bd70      	pop	{r4, r5, r6, pc}
 8016d9c:	0781      	lsls	r1, r0, #30
 8016d9e:	bf58      	it	pl
 8016da0:	6963      	ldrpl	r3, [r4, #20]
 8016da2:	60a3      	str	r3, [r4, #8]
 8016da4:	e7f4      	b.n	8016d90 <__swsetup_r+0xb0>
 8016da6:	2000      	movs	r0, #0
 8016da8:	e7f7      	b.n	8016d9a <__swsetup_r+0xba>
 8016daa:	bf00      	nop
 8016dac:	2000002c 	.word	0x2000002c
 8016db0:	0801a9f0 	.word	0x0801a9f0
 8016db4:	0801aa10 	.word	0x0801aa10
 8016db8:	0801a9d0 	.word	0x0801a9d0

08016dbc <__assert_func>:
 8016dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016dbe:	4614      	mov	r4, r2
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	4b09      	ldr	r3, [pc, #36]	; (8016de8 <__assert_func+0x2c>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	4605      	mov	r5, r0
 8016dc8:	68d8      	ldr	r0, [r3, #12]
 8016dca:	b14c      	cbz	r4, 8016de0 <__assert_func+0x24>
 8016dcc:	4b07      	ldr	r3, [pc, #28]	; (8016dec <__assert_func+0x30>)
 8016dce:	9100      	str	r1, [sp, #0]
 8016dd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016dd4:	4906      	ldr	r1, [pc, #24]	; (8016df0 <__assert_func+0x34>)
 8016dd6:	462b      	mov	r3, r5
 8016dd8:	f000 f9a6 	bl	8017128 <fiprintf>
 8016ddc:	f000 fe7a 	bl	8017ad4 <abort>
 8016de0:	4b04      	ldr	r3, [pc, #16]	; (8016df4 <__assert_func+0x38>)
 8016de2:	461c      	mov	r4, r3
 8016de4:	e7f3      	b.n	8016dce <__assert_func+0x12>
 8016de6:	bf00      	nop
 8016de8:	2000002c 	.word	0x2000002c
 8016dec:	0801a992 	.word	0x0801a992
 8016df0:	0801a99f 	.word	0x0801a99f
 8016df4:	0801a9cd 	.word	0x0801a9cd

08016df8 <__sflush_r>:
 8016df8:	898a      	ldrh	r2, [r1, #12]
 8016dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfe:	4605      	mov	r5, r0
 8016e00:	0710      	lsls	r0, r2, #28
 8016e02:	460c      	mov	r4, r1
 8016e04:	d458      	bmi.n	8016eb8 <__sflush_r+0xc0>
 8016e06:	684b      	ldr	r3, [r1, #4]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	dc05      	bgt.n	8016e18 <__sflush_r+0x20>
 8016e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	dc02      	bgt.n	8016e18 <__sflush_r+0x20>
 8016e12:	2000      	movs	r0, #0
 8016e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e1a:	2e00      	cmp	r6, #0
 8016e1c:	d0f9      	beq.n	8016e12 <__sflush_r+0x1a>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e24:	682f      	ldr	r7, [r5, #0]
 8016e26:	602b      	str	r3, [r5, #0]
 8016e28:	d032      	beq.n	8016e90 <__sflush_r+0x98>
 8016e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e2c:	89a3      	ldrh	r3, [r4, #12]
 8016e2e:	075a      	lsls	r2, r3, #29
 8016e30:	d505      	bpl.n	8016e3e <__sflush_r+0x46>
 8016e32:	6863      	ldr	r3, [r4, #4]
 8016e34:	1ac0      	subs	r0, r0, r3
 8016e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e38:	b10b      	cbz	r3, 8016e3e <__sflush_r+0x46>
 8016e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e3c:	1ac0      	subs	r0, r0, r3
 8016e3e:	2300      	movs	r3, #0
 8016e40:	4602      	mov	r2, r0
 8016e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e44:	6a21      	ldr	r1, [r4, #32]
 8016e46:	4628      	mov	r0, r5
 8016e48:	47b0      	blx	r6
 8016e4a:	1c43      	adds	r3, r0, #1
 8016e4c:	89a3      	ldrh	r3, [r4, #12]
 8016e4e:	d106      	bne.n	8016e5e <__sflush_r+0x66>
 8016e50:	6829      	ldr	r1, [r5, #0]
 8016e52:	291d      	cmp	r1, #29
 8016e54:	d82c      	bhi.n	8016eb0 <__sflush_r+0xb8>
 8016e56:	4a2a      	ldr	r2, [pc, #168]	; (8016f00 <__sflush_r+0x108>)
 8016e58:	40ca      	lsrs	r2, r1
 8016e5a:	07d6      	lsls	r6, r2, #31
 8016e5c:	d528      	bpl.n	8016eb0 <__sflush_r+0xb8>
 8016e5e:	2200      	movs	r2, #0
 8016e60:	6062      	str	r2, [r4, #4]
 8016e62:	04d9      	lsls	r1, r3, #19
 8016e64:	6922      	ldr	r2, [r4, #16]
 8016e66:	6022      	str	r2, [r4, #0]
 8016e68:	d504      	bpl.n	8016e74 <__sflush_r+0x7c>
 8016e6a:	1c42      	adds	r2, r0, #1
 8016e6c:	d101      	bne.n	8016e72 <__sflush_r+0x7a>
 8016e6e:	682b      	ldr	r3, [r5, #0]
 8016e70:	b903      	cbnz	r3, 8016e74 <__sflush_r+0x7c>
 8016e72:	6560      	str	r0, [r4, #84]	; 0x54
 8016e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e76:	602f      	str	r7, [r5, #0]
 8016e78:	2900      	cmp	r1, #0
 8016e7a:	d0ca      	beq.n	8016e12 <__sflush_r+0x1a>
 8016e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e80:	4299      	cmp	r1, r3
 8016e82:	d002      	beq.n	8016e8a <__sflush_r+0x92>
 8016e84:	4628      	mov	r0, r5
 8016e86:	f000 f9f1 	bl	801726c <_free_r>
 8016e8a:	2000      	movs	r0, #0
 8016e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8016e8e:	e7c1      	b.n	8016e14 <__sflush_r+0x1c>
 8016e90:	6a21      	ldr	r1, [r4, #32]
 8016e92:	2301      	movs	r3, #1
 8016e94:	4628      	mov	r0, r5
 8016e96:	47b0      	blx	r6
 8016e98:	1c41      	adds	r1, r0, #1
 8016e9a:	d1c7      	bne.n	8016e2c <__sflush_r+0x34>
 8016e9c:	682b      	ldr	r3, [r5, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d0c4      	beq.n	8016e2c <__sflush_r+0x34>
 8016ea2:	2b1d      	cmp	r3, #29
 8016ea4:	d001      	beq.n	8016eaa <__sflush_r+0xb2>
 8016ea6:	2b16      	cmp	r3, #22
 8016ea8:	d101      	bne.n	8016eae <__sflush_r+0xb6>
 8016eaa:	602f      	str	r7, [r5, #0]
 8016eac:	e7b1      	b.n	8016e12 <__sflush_r+0x1a>
 8016eae:	89a3      	ldrh	r3, [r4, #12]
 8016eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eb4:	81a3      	strh	r3, [r4, #12]
 8016eb6:	e7ad      	b.n	8016e14 <__sflush_r+0x1c>
 8016eb8:	690f      	ldr	r7, [r1, #16]
 8016eba:	2f00      	cmp	r7, #0
 8016ebc:	d0a9      	beq.n	8016e12 <__sflush_r+0x1a>
 8016ebe:	0793      	lsls	r3, r2, #30
 8016ec0:	680e      	ldr	r6, [r1, #0]
 8016ec2:	bf08      	it	eq
 8016ec4:	694b      	ldreq	r3, [r1, #20]
 8016ec6:	600f      	str	r7, [r1, #0]
 8016ec8:	bf18      	it	ne
 8016eca:	2300      	movne	r3, #0
 8016ecc:	eba6 0807 	sub.w	r8, r6, r7
 8016ed0:	608b      	str	r3, [r1, #8]
 8016ed2:	f1b8 0f00 	cmp.w	r8, #0
 8016ed6:	dd9c      	ble.n	8016e12 <__sflush_r+0x1a>
 8016ed8:	6a21      	ldr	r1, [r4, #32]
 8016eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016edc:	4643      	mov	r3, r8
 8016ede:	463a      	mov	r2, r7
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	47b0      	blx	r6
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	dc06      	bgt.n	8016ef6 <__sflush_r+0xfe>
 8016ee8:	89a3      	ldrh	r3, [r4, #12]
 8016eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eee:	81a3      	strh	r3, [r4, #12]
 8016ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef4:	e78e      	b.n	8016e14 <__sflush_r+0x1c>
 8016ef6:	4407      	add	r7, r0
 8016ef8:	eba8 0800 	sub.w	r8, r8, r0
 8016efc:	e7e9      	b.n	8016ed2 <__sflush_r+0xda>
 8016efe:	bf00      	nop
 8016f00:	20400001 	.word	0x20400001

08016f04 <_fflush_r>:
 8016f04:	b538      	push	{r3, r4, r5, lr}
 8016f06:	690b      	ldr	r3, [r1, #16]
 8016f08:	4605      	mov	r5, r0
 8016f0a:	460c      	mov	r4, r1
 8016f0c:	b913      	cbnz	r3, 8016f14 <_fflush_r+0x10>
 8016f0e:	2500      	movs	r5, #0
 8016f10:	4628      	mov	r0, r5
 8016f12:	bd38      	pop	{r3, r4, r5, pc}
 8016f14:	b118      	cbz	r0, 8016f1e <_fflush_r+0x1a>
 8016f16:	6983      	ldr	r3, [r0, #24]
 8016f18:	b90b      	cbnz	r3, 8016f1e <_fflush_r+0x1a>
 8016f1a:	f000 f887 	bl	801702c <__sinit>
 8016f1e:	4b14      	ldr	r3, [pc, #80]	; (8016f70 <_fflush_r+0x6c>)
 8016f20:	429c      	cmp	r4, r3
 8016f22:	d11b      	bne.n	8016f5c <_fflush_r+0x58>
 8016f24:	686c      	ldr	r4, [r5, #4]
 8016f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d0ef      	beq.n	8016f0e <_fflush_r+0xa>
 8016f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f30:	07d0      	lsls	r0, r2, #31
 8016f32:	d404      	bmi.n	8016f3e <_fflush_r+0x3a>
 8016f34:	0599      	lsls	r1, r3, #22
 8016f36:	d402      	bmi.n	8016f3e <_fflush_r+0x3a>
 8016f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f3a:	f000 f927 	bl	801718c <__retarget_lock_acquire_recursive>
 8016f3e:	4628      	mov	r0, r5
 8016f40:	4621      	mov	r1, r4
 8016f42:	f7ff ff59 	bl	8016df8 <__sflush_r>
 8016f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f48:	07da      	lsls	r2, r3, #31
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	d4e0      	bmi.n	8016f10 <_fflush_r+0xc>
 8016f4e:	89a3      	ldrh	r3, [r4, #12]
 8016f50:	059b      	lsls	r3, r3, #22
 8016f52:	d4dd      	bmi.n	8016f10 <_fflush_r+0xc>
 8016f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f56:	f000 f91a 	bl	801718e <__retarget_lock_release_recursive>
 8016f5a:	e7d9      	b.n	8016f10 <_fflush_r+0xc>
 8016f5c:	4b05      	ldr	r3, [pc, #20]	; (8016f74 <_fflush_r+0x70>)
 8016f5e:	429c      	cmp	r4, r3
 8016f60:	d101      	bne.n	8016f66 <_fflush_r+0x62>
 8016f62:	68ac      	ldr	r4, [r5, #8]
 8016f64:	e7df      	b.n	8016f26 <_fflush_r+0x22>
 8016f66:	4b04      	ldr	r3, [pc, #16]	; (8016f78 <_fflush_r+0x74>)
 8016f68:	429c      	cmp	r4, r3
 8016f6a:	bf08      	it	eq
 8016f6c:	68ec      	ldreq	r4, [r5, #12]
 8016f6e:	e7da      	b.n	8016f26 <_fflush_r+0x22>
 8016f70:	0801a9f0 	.word	0x0801a9f0
 8016f74:	0801aa10 	.word	0x0801aa10
 8016f78:	0801a9d0 	.word	0x0801a9d0

08016f7c <std>:
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	b510      	push	{r4, lr}
 8016f80:	4604      	mov	r4, r0
 8016f82:	e9c0 3300 	strd	r3, r3, [r0]
 8016f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f8a:	6083      	str	r3, [r0, #8]
 8016f8c:	8181      	strh	r1, [r0, #12]
 8016f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8016f90:	81c2      	strh	r2, [r0, #14]
 8016f92:	6183      	str	r3, [r0, #24]
 8016f94:	4619      	mov	r1, r3
 8016f96:	2208      	movs	r2, #8
 8016f98:	305c      	adds	r0, #92	; 0x5c
 8016f9a:	f7ff fd7b 	bl	8016a94 <memset>
 8016f9e:	4b05      	ldr	r3, [pc, #20]	; (8016fb4 <std+0x38>)
 8016fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8016fa2:	4b05      	ldr	r3, [pc, #20]	; (8016fb8 <std+0x3c>)
 8016fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016fa6:	4b05      	ldr	r3, [pc, #20]	; (8016fbc <std+0x40>)
 8016fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016faa:	4b05      	ldr	r3, [pc, #20]	; (8016fc0 <std+0x44>)
 8016fac:	6224      	str	r4, [r4, #32]
 8016fae:	6323      	str	r3, [r4, #48]	; 0x30
 8016fb0:	bd10      	pop	{r4, pc}
 8016fb2:	bf00      	nop
 8016fb4:	08017a29 	.word	0x08017a29
 8016fb8:	08017a4b 	.word	0x08017a4b
 8016fbc:	08017a83 	.word	0x08017a83
 8016fc0:	08017aa7 	.word	0x08017aa7

08016fc4 <_cleanup_r>:
 8016fc4:	4901      	ldr	r1, [pc, #4]	; (8016fcc <_cleanup_r+0x8>)
 8016fc6:	f000 b8c1 	b.w	801714c <_fwalk_reent>
 8016fca:	bf00      	nop
 8016fcc:	08016f05 	.word	0x08016f05

08016fd0 <__sfmoreglue>:
 8016fd0:	b570      	push	{r4, r5, r6, lr}
 8016fd2:	2268      	movs	r2, #104	; 0x68
 8016fd4:	1e4d      	subs	r5, r1, #1
 8016fd6:	4355      	muls	r5, r2
 8016fd8:	460e      	mov	r6, r1
 8016fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016fde:	f000 f9b1 	bl	8017344 <_malloc_r>
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	b140      	cbz	r0, 8016ff8 <__sfmoreglue+0x28>
 8016fe6:	2100      	movs	r1, #0
 8016fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8016fec:	300c      	adds	r0, #12
 8016fee:	60a0      	str	r0, [r4, #8]
 8016ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ff4:	f7ff fd4e 	bl	8016a94 <memset>
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	bd70      	pop	{r4, r5, r6, pc}

08016ffc <__sfp_lock_acquire>:
 8016ffc:	4801      	ldr	r0, [pc, #4]	; (8017004 <__sfp_lock_acquire+0x8>)
 8016ffe:	f000 b8c5 	b.w	801718c <__retarget_lock_acquire_recursive>
 8017002:	bf00      	nop
 8017004:	20008ec9 	.word	0x20008ec9

08017008 <__sfp_lock_release>:
 8017008:	4801      	ldr	r0, [pc, #4]	; (8017010 <__sfp_lock_release+0x8>)
 801700a:	f000 b8c0 	b.w	801718e <__retarget_lock_release_recursive>
 801700e:	bf00      	nop
 8017010:	20008ec9 	.word	0x20008ec9

08017014 <__sinit_lock_acquire>:
 8017014:	4801      	ldr	r0, [pc, #4]	; (801701c <__sinit_lock_acquire+0x8>)
 8017016:	f000 b8b9 	b.w	801718c <__retarget_lock_acquire_recursive>
 801701a:	bf00      	nop
 801701c:	20008eca 	.word	0x20008eca

08017020 <__sinit_lock_release>:
 8017020:	4801      	ldr	r0, [pc, #4]	; (8017028 <__sinit_lock_release+0x8>)
 8017022:	f000 b8b4 	b.w	801718e <__retarget_lock_release_recursive>
 8017026:	bf00      	nop
 8017028:	20008eca 	.word	0x20008eca

0801702c <__sinit>:
 801702c:	b510      	push	{r4, lr}
 801702e:	4604      	mov	r4, r0
 8017030:	f7ff fff0 	bl	8017014 <__sinit_lock_acquire>
 8017034:	69a3      	ldr	r3, [r4, #24]
 8017036:	b11b      	cbz	r3, 8017040 <__sinit+0x14>
 8017038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801703c:	f7ff bff0 	b.w	8017020 <__sinit_lock_release>
 8017040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017044:	6523      	str	r3, [r4, #80]	; 0x50
 8017046:	4b13      	ldr	r3, [pc, #76]	; (8017094 <__sinit+0x68>)
 8017048:	4a13      	ldr	r2, [pc, #76]	; (8017098 <__sinit+0x6c>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	62a2      	str	r2, [r4, #40]	; 0x28
 801704e:	42a3      	cmp	r3, r4
 8017050:	bf04      	itt	eq
 8017052:	2301      	moveq	r3, #1
 8017054:	61a3      	streq	r3, [r4, #24]
 8017056:	4620      	mov	r0, r4
 8017058:	f000 f820 	bl	801709c <__sfp>
 801705c:	6060      	str	r0, [r4, #4]
 801705e:	4620      	mov	r0, r4
 8017060:	f000 f81c 	bl	801709c <__sfp>
 8017064:	60a0      	str	r0, [r4, #8]
 8017066:	4620      	mov	r0, r4
 8017068:	f000 f818 	bl	801709c <__sfp>
 801706c:	2200      	movs	r2, #0
 801706e:	60e0      	str	r0, [r4, #12]
 8017070:	2104      	movs	r1, #4
 8017072:	6860      	ldr	r0, [r4, #4]
 8017074:	f7ff ff82 	bl	8016f7c <std>
 8017078:	68a0      	ldr	r0, [r4, #8]
 801707a:	2201      	movs	r2, #1
 801707c:	2109      	movs	r1, #9
 801707e:	f7ff ff7d 	bl	8016f7c <std>
 8017082:	68e0      	ldr	r0, [r4, #12]
 8017084:	2202      	movs	r2, #2
 8017086:	2112      	movs	r1, #18
 8017088:	f7ff ff78 	bl	8016f7c <std>
 801708c:	2301      	movs	r3, #1
 801708e:	61a3      	str	r3, [r4, #24]
 8017090:	e7d2      	b.n	8017038 <__sinit+0xc>
 8017092:	bf00      	nop
 8017094:	0801a91c 	.word	0x0801a91c
 8017098:	08016fc5 	.word	0x08016fc5

0801709c <__sfp>:
 801709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801709e:	4607      	mov	r7, r0
 80170a0:	f7ff ffac 	bl	8016ffc <__sfp_lock_acquire>
 80170a4:	4b1e      	ldr	r3, [pc, #120]	; (8017120 <__sfp+0x84>)
 80170a6:	681e      	ldr	r6, [r3, #0]
 80170a8:	69b3      	ldr	r3, [r6, #24]
 80170aa:	b913      	cbnz	r3, 80170b2 <__sfp+0x16>
 80170ac:	4630      	mov	r0, r6
 80170ae:	f7ff ffbd 	bl	801702c <__sinit>
 80170b2:	3648      	adds	r6, #72	; 0x48
 80170b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80170b8:	3b01      	subs	r3, #1
 80170ba:	d503      	bpl.n	80170c4 <__sfp+0x28>
 80170bc:	6833      	ldr	r3, [r6, #0]
 80170be:	b30b      	cbz	r3, 8017104 <__sfp+0x68>
 80170c0:	6836      	ldr	r6, [r6, #0]
 80170c2:	e7f7      	b.n	80170b4 <__sfp+0x18>
 80170c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170c8:	b9d5      	cbnz	r5, 8017100 <__sfp+0x64>
 80170ca:	4b16      	ldr	r3, [pc, #88]	; (8017124 <__sfp+0x88>)
 80170cc:	60e3      	str	r3, [r4, #12]
 80170ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80170d2:	6665      	str	r5, [r4, #100]	; 0x64
 80170d4:	f000 f859 	bl	801718a <__retarget_lock_init_recursive>
 80170d8:	f7ff ff96 	bl	8017008 <__sfp_lock_release>
 80170dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80170e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80170e4:	6025      	str	r5, [r4, #0]
 80170e6:	61a5      	str	r5, [r4, #24]
 80170e8:	2208      	movs	r2, #8
 80170ea:	4629      	mov	r1, r5
 80170ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80170f0:	f7ff fcd0 	bl	8016a94 <memset>
 80170f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80170f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80170fc:	4620      	mov	r0, r4
 80170fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017100:	3468      	adds	r4, #104	; 0x68
 8017102:	e7d9      	b.n	80170b8 <__sfp+0x1c>
 8017104:	2104      	movs	r1, #4
 8017106:	4638      	mov	r0, r7
 8017108:	f7ff ff62 	bl	8016fd0 <__sfmoreglue>
 801710c:	4604      	mov	r4, r0
 801710e:	6030      	str	r0, [r6, #0]
 8017110:	2800      	cmp	r0, #0
 8017112:	d1d5      	bne.n	80170c0 <__sfp+0x24>
 8017114:	f7ff ff78 	bl	8017008 <__sfp_lock_release>
 8017118:	230c      	movs	r3, #12
 801711a:	603b      	str	r3, [r7, #0]
 801711c:	e7ee      	b.n	80170fc <__sfp+0x60>
 801711e:	bf00      	nop
 8017120:	0801a91c 	.word	0x0801a91c
 8017124:	ffff0001 	.word	0xffff0001

08017128 <fiprintf>:
 8017128:	b40e      	push	{r1, r2, r3}
 801712a:	b503      	push	{r0, r1, lr}
 801712c:	4601      	mov	r1, r0
 801712e:	ab03      	add	r3, sp, #12
 8017130:	4805      	ldr	r0, [pc, #20]	; (8017148 <fiprintf+0x20>)
 8017132:	f853 2b04 	ldr.w	r2, [r3], #4
 8017136:	6800      	ldr	r0, [r0, #0]
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	f000 f9a1 	bl	8017480 <_vfiprintf_r>
 801713e:	b002      	add	sp, #8
 8017140:	f85d eb04 	ldr.w	lr, [sp], #4
 8017144:	b003      	add	sp, #12
 8017146:	4770      	bx	lr
 8017148:	2000002c 	.word	0x2000002c

0801714c <_fwalk_reent>:
 801714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017150:	4606      	mov	r6, r0
 8017152:	4688      	mov	r8, r1
 8017154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017158:	2700      	movs	r7, #0
 801715a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801715e:	f1b9 0901 	subs.w	r9, r9, #1
 8017162:	d505      	bpl.n	8017170 <_fwalk_reent+0x24>
 8017164:	6824      	ldr	r4, [r4, #0]
 8017166:	2c00      	cmp	r4, #0
 8017168:	d1f7      	bne.n	801715a <_fwalk_reent+0xe>
 801716a:	4638      	mov	r0, r7
 801716c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017170:	89ab      	ldrh	r3, [r5, #12]
 8017172:	2b01      	cmp	r3, #1
 8017174:	d907      	bls.n	8017186 <_fwalk_reent+0x3a>
 8017176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801717a:	3301      	adds	r3, #1
 801717c:	d003      	beq.n	8017186 <_fwalk_reent+0x3a>
 801717e:	4629      	mov	r1, r5
 8017180:	4630      	mov	r0, r6
 8017182:	47c0      	blx	r8
 8017184:	4307      	orrs	r7, r0
 8017186:	3568      	adds	r5, #104	; 0x68
 8017188:	e7e9      	b.n	801715e <_fwalk_reent+0x12>

0801718a <__retarget_lock_init_recursive>:
 801718a:	4770      	bx	lr

0801718c <__retarget_lock_acquire_recursive>:
 801718c:	4770      	bx	lr

0801718e <__retarget_lock_release_recursive>:
 801718e:	4770      	bx	lr

08017190 <__swhatbuf_r>:
 8017190:	b570      	push	{r4, r5, r6, lr}
 8017192:	460e      	mov	r6, r1
 8017194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017198:	2900      	cmp	r1, #0
 801719a:	b096      	sub	sp, #88	; 0x58
 801719c:	4614      	mov	r4, r2
 801719e:	461d      	mov	r5, r3
 80171a0:	da08      	bge.n	80171b4 <__swhatbuf_r+0x24>
 80171a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80171a6:	2200      	movs	r2, #0
 80171a8:	602a      	str	r2, [r5, #0]
 80171aa:	061a      	lsls	r2, r3, #24
 80171ac:	d410      	bmi.n	80171d0 <__swhatbuf_r+0x40>
 80171ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171b2:	e00e      	b.n	80171d2 <__swhatbuf_r+0x42>
 80171b4:	466a      	mov	r2, sp
 80171b6:	f000 fca5 	bl	8017b04 <_fstat_r>
 80171ba:	2800      	cmp	r0, #0
 80171bc:	dbf1      	blt.n	80171a2 <__swhatbuf_r+0x12>
 80171be:	9a01      	ldr	r2, [sp, #4]
 80171c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80171c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80171c8:	425a      	negs	r2, r3
 80171ca:	415a      	adcs	r2, r3
 80171cc:	602a      	str	r2, [r5, #0]
 80171ce:	e7ee      	b.n	80171ae <__swhatbuf_r+0x1e>
 80171d0:	2340      	movs	r3, #64	; 0x40
 80171d2:	2000      	movs	r0, #0
 80171d4:	6023      	str	r3, [r4, #0]
 80171d6:	b016      	add	sp, #88	; 0x58
 80171d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080171dc <__smakebuf_r>:
 80171dc:	898b      	ldrh	r3, [r1, #12]
 80171de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171e0:	079d      	lsls	r5, r3, #30
 80171e2:	4606      	mov	r6, r0
 80171e4:	460c      	mov	r4, r1
 80171e6:	d507      	bpl.n	80171f8 <__smakebuf_r+0x1c>
 80171e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80171ec:	6023      	str	r3, [r4, #0]
 80171ee:	6123      	str	r3, [r4, #16]
 80171f0:	2301      	movs	r3, #1
 80171f2:	6163      	str	r3, [r4, #20]
 80171f4:	b002      	add	sp, #8
 80171f6:	bd70      	pop	{r4, r5, r6, pc}
 80171f8:	ab01      	add	r3, sp, #4
 80171fa:	466a      	mov	r2, sp
 80171fc:	f7ff ffc8 	bl	8017190 <__swhatbuf_r>
 8017200:	9900      	ldr	r1, [sp, #0]
 8017202:	4605      	mov	r5, r0
 8017204:	4630      	mov	r0, r6
 8017206:	f000 f89d 	bl	8017344 <_malloc_r>
 801720a:	b948      	cbnz	r0, 8017220 <__smakebuf_r+0x44>
 801720c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017210:	059a      	lsls	r2, r3, #22
 8017212:	d4ef      	bmi.n	80171f4 <__smakebuf_r+0x18>
 8017214:	f023 0303 	bic.w	r3, r3, #3
 8017218:	f043 0302 	orr.w	r3, r3, #2
 801721c:	81a3      	strh	r3, [r4, #12]
 801721e:	e7e3      	b.n	80171e8 <__smakebuf_r+0xc>
 8017220:	4b0d      	ldr	r3, [pc, #52]	; (8017258 <__smakebuf_r+0x7c>)
 8017222:	62b3      	str	r3, [r6, #40]	; 0x28
 8017224:	89a3      	ldrh	r3, [r4, #12]
 8017226:	6020      	str	r0, [r4, #0]
 8017228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	9b00      	ldr	r3, [sp, #0]
 8017230:	6163      	str	r3, [r4, #20]
 8017232:	9b01      	ldr	r3, [sp, #4]
 8017234:	6120      	str	r0, [r4, #16]
 8017236:	b15b      	cbz	r3, 8017250 <__smakebuf_r+0x74>
 8017238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801723c:	4630      	mov	r0, r6
 801723e:	f000 fc73 	bl	8017b28 <_isatty_r>
 8017242:	b128      	cbz	r0, 8017250 <__smakebuf_r+0x74>
 8017244:	89a3      	ldrh	r3, [r4, #12]
 8017246:	f023 0303 	bic.w	r3, r3, #3
 801724a:	f043 0301 	orr.w	r3, r3, #1
 801724e:	81a3      	strh	r3, [r4, #12]
 8017250:	89a0      	ldrh	r0, [r4, #12]
 8017252:	4305      	orrs	r5, r0
 8017254:	81a5      	strh	r5, [r4, #12]
 8017256:	e7cd      	b.n	80171f4 <__smakebuf_r+0x18>
 8017258:	08016fc5 	.word	0x08016fc5

0801725c <malloc>:
 801725c:	4b02      	ldr	r3, [pc, #8]	; (8017268 <malloc+0xc>)
 801725e:	4601      	mov	r1, r0
 8017260:	6818      	ldr	r0, [r3, #0]
 8017262:	f000 b86f 	b.w	8017344 <_malloc_r>
 8017266:	bf00      	nop
 8017268:	2000002c 	.word	0x2000002c

0801726c <_free_r>:
 801726c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801726e:	2900      	cmp	r1, #0
 8017270:	d044      	beq.n	80172fc <_free_r+0x90>
 8017272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017276:	9001      	str	r0, [sp, #4]
 8017278:	2b00      	cmp	r3, #0
 801727a:	f1a1 0404 	sub.w	r4, r1, #4
 801727e:	bfb8      	it	lt
 8017280:	18e4      	addlt	r4, r4, r3
 8017282:	f000 fc73 	bl	8017b6c <__malloc_lock>
 8017286:	4a1e      	ldr	r2, [pc, #120]	; (8017300 <_free_r+0x94>)
 8017288:	9801      	ldr	r0, [sp, #4]
 801728a:	6813      	ldr	r3, [r2, #0]
 801728c:	b933      	cbnz	r3, 801729c <_free_r+0x30>
 801728e:	6063      	str	r3, [r4, #4]
 8017290:	6014      	str	r4, [r2, #0]
 8017292:	b003      	add	sp, #12
 8017294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017298:	f000 bc6e 	b.w	8017b78 <__malloc_unlock>
 801729c:	42a3      	cmp	r3, r4
 801729e:	d908      	bls.n	80172b2 <_free_r+0x46>
 80172a0:	6825      	ldr	r5, [r4, #0]
 80172a2:	1961      	adds	r1, r4, r5
 80172a4:	428b      	cmp	r3, r1
 80172a6:	bf01      	itttt	eq
 80172a8:	6819      	ldreq	r1, [r3, #0]
 80172aa:	685b      	ldreq	r3, [r3, #4]
 80172ac:	1949      	addeq	r1, r1, r5
 80172ae:	6021      	streq	r1, [r4, #0]
 80172b0:	e7ed      	b.n	801728e <_free_r+0x22>
 80172b2:	461a      	mov	r2, r3
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	b10b      	cbz	r3, 80172bc <_free_r+0x50>
 80172b8:	42a3      	cmp	r3, r4
 80172ba:	d9fa      	bls.n	80172b2 <_free_r+0x46>
 80172bc:	6811      	ldr	r1, [r2, #0]
 80172be:	1855      	adds	r5, r2, r1
 80172c0:	42a5      	cmp	r5, r4
 80172c2:	d10b      	bne.n	80172dc <_free_r+0x70>
 80172c4:	6824      	ldr	r4, [r4, #0]
 80172c6:	4421      	add	r1, r4
 80172c8:	1854      	adds	r4, r2, r1
 80172ca:	42a3      	cmp	r3, r4
 80172cc:	6011      	str	r1, [r2, #0]
 80172ce:	d1e0      	bne.n	8017292 <_free_r+0x26>
 80172d0:	681c      	ldr	r4, [r3, #0]
 80172d2:	685b      	ldr	r3, [r3, #4]
 80172d4:	6053      	str	r3, [r2, #4]
 80172d6:	4421      	add	r1, r4
 80172d8:	6011      	str	r1, [r2, #0]
 80172da:	e7da      	b.n	8017292 <_free_r+0x26>
 80172dc:	d902      	bls.n	80172e4 <_free_r+0x78>
 80172de:	230c      	movs	r3, #12
 80172e0:	6003      	str	r3, [r0, #0]
 80172e2:	e7d6      	b.n	8017292 <_free_r+0x26>
 80172e4:	6825      	ldr	r5, [r4, #0]
 80172e6:	1961      	adds	r1, r4, r5
 80172e8:	428b      	cmp	r3, r1
 80172ea:	bf04      	itt	eq
 80172ec:	6819      	ldreq	r1, [r3, #0]
 80172ee:	685b      	ldreq	r3, [r3, #4]
 80172f0:	6063      	str	r3, [r4, #4]
 80172f2:	bf04      	itt	eq
 80172f4:	1949      	addeq	r1, r1, r5
 80172f6:	6021      	streq	r1, [r4, #0]
 80172f8:	6054      	str	r4, [r2, #4]
 80172fa:	e7ca      	b.n	8017292 <_free_r+0x26>
 80172fc:	b003      	add	sp, #12
 80172fe:	bd30      	pop	{r4, r5, pc}
 8017300:	20008ecc 	.word	0x20008ecc

08017304 <sbrk_aligned>:
 8017304:	b570      	push	{r4, r5, r6, lr}
 8017306:	4e0e      	ldr	r6, [pc, #56]	; (8017340 <sbrk_aligned+0x3c>)
 8017308:	460c      	mov	r4, r1
 801730a:	6831      	ldr	r1, [r6, #0]
 801730c:	4605      	mov	r5, r0
 801730e:	b911      	cbnz	r1, 8017316 <sbrk_aligned+0x12>
 8017310:	f000 fb7a 	bl	8017a08 <_sbrk_r>
 8017314:	6030      	str	r0, [r6, #0]
 8017316:	4621      	mov	r1, r4
 8017318:	4628      	mov	r0, r5
 801731a:	f000 fb75 	bl	8017a08 <_sbrk_r>
 801731e:	1c43      	adds	r3, r0, #1
 8017320:	d00a      	beq.n	8017338 <sbrk_aligned+0x34>
 8017322:	1cc4      	adds	r4, r0, #3
 8017324:	f024 0403 	bic.w	r4, r4, #3
 8017328:	42a0      	cmp	r0, r4
 801732a:	d007      	beq.n	801733c <sbrk_aligned+0x38>
 801732c:	1a21      	subs	r1, r4, r0
 801732e:	4628      	mov	r0, r5
 8017330:	f000 fb6a 	bl	8017a08 <_sbrk_r>
 8017334:	3001      	adds	r0, #1
 8017336:	d101      	bne.n	801733c <sbrk_aligned+0x38>
 8017338:	f04f 34ff 	mov.w	r4, #4294967295
 801733c:	4620      	mov	r0, r4
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	20008ed0 	.word	0x20008ed0

08017344 <_malloc_r>:
 8017344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017348:	1ccd      	adds	r5, r1, #3
 801734a:	f025 0503 	bic.w	r5, r5, #3
 801734e:	3508      	adds	r5, #8
 8017350:	2d0c      	cmp	r5, #12
 8017352:	bf38      	it	cc
 8017354:	250c      	movcc	r5, #12
 8017356:	2d00      	cmp	r5, #0
 8017358:	4607      	mov	r7, r0
 801735a:	db01      	blt.n	8017360 <_malloc_r+0x1c>
 801735c:	42a9      	cmp	r1, r5
 801735e:	d905      	bls.n	801736c <_malloc_r+0x28>
 8017360:	230c      	movs	r3, #12
 8017362:	603b      	str	r3, [r7, #0]
 8017364:	2600      	movs	r6, #0
 8017366:	4630      	mov	r0, r6
 8017368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801736c:	4e2e      	ldr	r6, [pc, #184]	; (8017428 <_malloc_r+0xe4>)
 801736e:	f000 fbfd 	bl	8017b6c <__malloc_lock>
 8017372:	6833      	ldr	r3, [r6, #0]
 8017374:	461c      	mov	r4, r3
 8017376:	bb34      	cbnz	r4, 80173c6 <_malloc_r+0x82>
 8017378:	4629      	mov	r1, r5
 801737a:	4638      	mov	r0, r7
 801737c:	f7ff ffc2 	bl	8017304 <sbrk_aligned>
 8017380:	1c43      	adds	r3, r0, #1
 8017382:	4604      	mov	r4, r0
 8017384:	d14d      	bne.n	8017422 <_malloc_r+0xde>
 8017386:	6834      	ldr	r4, [r6, #0]
 8017388:	4626      	mov	r6, r4
 801738a:	2e00      	cmp	r6, #0
 801738c:	d140      	bne.n	8017410 <_malloc_r+0xcc>
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	4631      	mov	r1, r6
 8017392:	4638      	mov	r0, r7
 8017394:	eb04 0803 	add.w	r8, r4, r3
 8017398:	f000 fb36 	bl	8017a08 <_sbrk_r>
 801739c:	4580      	cmp	r8, r0
 801739e:	d13a      	bne.n	8017416 <_malloc_r+0xd2>
 80173a0:	6821      	ldr	r1, [r4, #0]
 80173a2:	3503      	adds	r5, #3
 80173a4:	1a6d      	subs	r5, r5, r1
 80173a6:	f025 0503 	bic.w	r5, r5, #3
 80173aa:	3508      	adds	r5, #8
 80173ac:	2d0c      	cmp	r5, #12
 80173ae:	bf38      	it	cc
 80173b0:	250c      	movcc	r5, #12
 80173b2:	4629      	mov	r1, r5
 80173b4:	4638      	mov	r0, r7
 80173b6:	f7ff ffa5 	bl	8017304 <sbrk_aligned>
 80173ba:	3001      	adds	r0, #1
 80173bc:	d02b      	beq.n	8017416 <_malloc_r+0xd2>
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	442b      	add	r3, r5
 80173c2:	6023      	str	r3, [r4, #0]
 80173c4:	e00e      	b.n	80173e4 <_malloc_r+0xa0>
 80173c6:	6822      	ldr	r2, [r4, #0]
 80173c8:	1b52      	subs	r2, r2, r5
 80173ca:	d41e      	bmi.n	801740a <_malloc_r+0xc6>
 80173cc:	2a0b      	cmp	r2, #11
 80173ce:	d916      	bls.n	80173fe <_malloc_r+0xba>
 80173d0:	1961      	adds	r1, r4, r5
 80173d2:	42a3      	cmp	r3, r4
 80173d4:	6025      	str	r5, [r4, #0]
 80173d6:	bf18      	it	ne
 80173d8:	6059      	strne	r1, [r3, #4]
 80173da:	6863      	ldr	r3, [r4, #4]
 80173dc:	bf08      	it	eq
 80173de:	6031      	streq	r1, [r6, #0]
 80173e0:	5162      	str	r2, [r4, r5]
 80173e2:	604b      	str	r3, [r1, #4]
 80173e4:	4638      	mov	r0, r7
 80173e6:	f104 060b 	add.w	r6, r4, #11
 80173ea:	f000 fbc5 	bl	8017b78 <__malloc_unlock>
 80173ee:	f026 0607 	bic.w	r6, r6, #7
 80173f2:	1d23      	adds	r3, r4, #4
 80173f4:	1af2      	subs	r2, r6, r3
 80173f6:	d0b6      	beq.n	8017366 <_malloc_r+0x22>
 80173f8:	1b9b      	subs	r3, r3, r6
 80173fa:	50a3      	str	r3, [r4, r2]
 80173fc:	e7b3      	b.n	8017366 <_malloc_r+0x22>
 80173fe:	6862      	ldr	r2, [r4, #4]
 8017400:	42a3      	cmp	r3, r4
 8017402:	bf0c      	ite	eq
 8017404:	6032      	streq	r2, [r6, #0]
 8017406:	605a      	strne	r2, [r3, #4]
 8017408:	e7ec      	b.n	80173e4 <_malloc_r+0xa0>
 801740a:	4623      	mov	r3, r4
 801740c:	6864      	ldr	r4, [r4, #4]
 801740e:	e7b2      	b.n	8017376 <_malloc_r+0x32>
 8017410:	4634      	mov	r4, r6
 8017412:	6876      	ldr	r6, [r6, #4]
 8017414:	e7b9      	b.n	801738a <_malloc_r+0x46>
 8017416:	230c      	movs	r3, #12
 8017418:	603b      	str	r3, [r7, #0]
 801741a:	4638      	mov	r0, r7
 801741c:	f000 fbac 	bl	8017b78 <__malloc_unlock>
 8017420:	e7a1      	b.n	8017366 <_malloc_r+0x22>
 8017422:	6025      	str	r5, [r4, #0]
 8017424:	e7de      	b.n	80173e4 <_malloc_r+0xa0>
 8017426:	bf00      	nop
 8017428:	20008ecc 	.word	0x20008ecc

0801742c <__sfputc_r>:
 801742c:	6893      	ldr	r3, [r2, #8]
 801742e:	3b01      	subs	r3, #1
 8017430:	2b00      	cmp	r3, #0
 8017432:	b410      	push	{r4}
 8017434:	6093      	str	r3, [r2, #8]
 8017436:	da08      	bge.n	801744a <__sfputc_r+0x1e>
 8017438:	6994      	ldr	r4, [r2, #24]
 801743a:	42a3      	cmp	r3, r4
 801743c:	db01      	blt.n	8017442 <__sfputc_r+0x16>
 801743e:	290a      	cmp	r1, #10
 8017440:	d103      	bne.n	801744a <__sfputc_r+0x1e>
 8017442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017446:	f7ff bbf9 	b.w	8016c3c <__swbuf_r>
 801744a:	6813      	ldr	r3, [r2, #0]
 801744c:	1c58      	adds	r0, r3, #1
 801744e:	6010      	str	r0, [r2, #0]
 8017450:	7019      	strb	r1, [r3, #0]
 8017452:	4608      	mov	r0, r1
 8017454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017458:	4770      	bx	lr

0801745a <__sfputs_r>:
 801745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801745c:	4606      	mov	r6, r0
 801745e:	460f      	mov	r7, r1
 8017460:	4614      	mov	r4, r2
 8017462:	18d5      	adds	r5, r2, r3
 8017464:	42ac      	cmp	r4, r5
 8017466:	d101      	bne.n	801746c <__sfputs_r+0x12>
 8017468:	2000      	movs	r0, #0
 801746a:	e007      	b.n	801747c <__sfputs_r+0x22>
 801746c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017470:	463a      	mov	r2, r7
 8017472:	4630      	mov	r0, r6
 8017474:	f7ff ffda 	bl	801742c <__sfputc_r>
 8017478:	1c43      	adds	r3, r0, #1
 801747a:	d1f3      	bne.n	8017464 <__sfputs_r+0xa>
 801747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017480 <_vfiprintf_r>:
 8017480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017484:	460d      	mov	r5, r1
 8017486:	b09d      	sub	sp, #116	; 0x74
 8017488:	4614      	mov	r4, r2
 801748a:	4698      	mov	r8, r3
 801748c:	4606      	mov	r6, r0
 801748e:	b118      	cbz	r0, 8017498 <_vfiprintf_r+0x18>
 8017490:	6983      	ldr	r3, [r0, #24]
 8017492:	b90b      	cbnz	r3, 8017498 <_vfiprintf_r+0x18>
 8017494:	f7ff fdca 	bl	801702c <__sinit>
 8017498:	4b89      	ldr	r3, [pc, #548]	; (80176c0 <_vfiprintf_r+0x240>)
 801749a:	429d      	cmp	r5, r3
 801749c:	d11b      	bne.n	80174d6 <_vfiprintf_r+0x56>
 801749e:	6875      	ldr	r5, [r6, #4]
 80174a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174a2:	07d9      	lsls	r1, r3, #31
 80174a4:	d405      	bmi.n	80174b2 <_vfiprintf_r+0x32>
 80174a6:	89ab      	ldrh	r3, [r5, #12]
 80174a8:	059a      	lsls	r2, r3, #22
 80174aa:	d402      	bmi.n	80174b2 <_vfiprintf_r+0x32>
 80174ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174ae:	f7ff fe6d 	bl	801718c <__retarget_lock_acquire_recursive>
 80174b2:	89ab      	ldrh	r3, [r5, #12]
 80174b4:	071b      	lsls	r3, r3, #28
 80174b6:	d501      	bpl.n	80174bc <_vfiprintf_r+0x3c>
 80174b8:	692b      	ldr	r3, [r5, #16]
 80174ba:	b9eb      	cbnz	r3, 80174f8 <_vfiprintf_r+0x78>
 80174bc:	4629      	mov	r1, r5
 80174be:	4630      	mov	r0, r6
 80174c0:	f7ff fc0e 	bl	8016ce0 <__swsetup_r>
 80174c4:	b1c0      	cbz	r0, 80174f8 <_vfiprintf_r+0x78>
 80174c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174c8:	07dc      	lsls	r4, r3, #31
 80174ca:	d50e      	bpl.n	80174ea <_vfiprintf_r+0x6a>
 80174cc:	f04f 30ff 	mov.w	r0, #4294967295
 80174d0:	b01d      	add	sp, #116	; 0x74
 80174d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d6:	4b7b      	ldr	r3, [pc, #492]	; (80176c4 <_vfiprintf_r+0x244>)
 80174d8:	429d      	cmp	r5, r3
 80174da:	d101      	bne.n	80174e0 <_vfiprintf_r+0x60>
 80174dc:	68b5      	ldr	r5, [r6, #8]
 80174de:	e7df      	b.n	80174a0 <_vfiprintf_r+0x20>
 80174e0:	4b79      	ldr	r3, [pc, #484]	; (80176c8 <_vfiprintf_r+0x248>)
 80174e2:	429d      	cmp	r5, r3
 80174e4:	bf08      	it	eq
 80174e6:	68f5      	ldreq	r5, [r6, #12]
 80174e8:	e7da      	b.n	80174a0 <_vfiprintf_r+0x20>
 80174ea:	89ab      	ldrh	r3, [r5, #12]
 80174ec:	0598      	lsls	r0, r3, #22
 80174ee:	d4ed      	bmi.n	80174cc <_vfiprintf_r+0x4c>
 80174f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174f2:	f7ff fe4c 	bl	801718e <__retarget_lock_release_recursive>
 80174f6:	e7e9      	b.n	80174cc <_vfiprintf_r+0x4c>
 80174f8:	2300      	movs	r3, #0
 80174fa:	9309      	str	r3, [sp, #36]	; 0x24
 80174fc:	2320      	movs	r3, #32
 80174fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017502:	f8cd 800c 	str.w	r8, [sp, #12]
 8017506:	2330      	movs	r3, #48	; 0x30
 8017508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80176cc <_vfiprintf_r+0x24c>
 801750c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017510:	f04f 0901 	mov.w	r9, #1
 8017514:	4623      	mov	r3, r4
 8017516:	469a      	mov	sl, r3
 8017518:	f813 2b01 	ldrb.w	r2, [r3], #1
 801751c:	b10a      	cbz	r2, 8017522 <_vfiprintf_r+0xa2>
 801751e:	2a25      	cmp	r2, #37	; 0x25
 8017520:	d1f9      	bne.n	8017516 <_vfiprintf_r+0x96>
 8017522:	ebba 0b04 	subs.w	fp, sl, r4
 8017526:	d00b      	beq.n	8017540 <_vfiprintf_r+0xc0>
 8017528:	465b      	mov	r3, fp
 801752a:	4622      	mov	r2, r4
 801752c:	4629      	mov	r1, r5
 801752e:	4630      	mov	r0, r6
 8017530:	f7ff ff93 	bl	801745a <__sfputs_r>
 8017534:	3001      	adds	r0, #1
 8017536:	f000 80aa 	beq.w	801768e <_vfiprintf_r+0x20e>
 801753a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801753c:	445a      	add	r2, fp
 801753e:	9209      	str	r2, [sp, #36]	; 0x24
 8017540:	f89a 3000 	ldrb.w	r3, [sl]
 8017544:	2b00      	cmp	r3, #0
 8017546:	f000 80a2 	beq.w	801768e <_vfiprintf_r+0x20e>
 801754a:	2300      	movs	r3, #0
 801754c:	f04f 32ff 	mov.w	r2, #4294967295
 8017550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017554:	f10a 0a01 	add.w	sl, sl, #1
 8017558:	9304      	str	r3, [sp, #16]
 801755a:	9307      	str	r3, [sp, #28]
 801755c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017560:	931a      	str	r3, [sp, #104]	; 0x68
 8017562:	4654      	mov	r4, sl
 8017564:	2205      	movs	r2, #5
 8017566:	f814 1b01 	ldrb.w	r1, [r4], #1
 801756a:	4858      	ldr	r0, [pc, #352]	; (80176cc <_vfiprintf_r+0x24c>)
 801756c:	f7e8 fe50 	bl	8000210 <memchr>
 8017570:	9a04      	ldr	r2, [sp, #16]
 8017572:	b9d8      	cbnz	r0, 80175ac <_vfiprintf_r+0x12c>
 8017574:	06d1      	lsls	r1, r2, #27
 8017576:	bf44      	itt	mi
 8017578:	2320      	movmi	r3, #32
 801757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801757e:	0713      	lsls	r3, r2, #28
 8017580:	bf44      	itt	mi
 8017582:	232b      	movmi	r3, #43	; 0x2b
 8017584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017588:	f89a 3000 	ldrb.w	r3, [sl]
 801758c:	2b2a      	cmp	r3, #42	; 0x2a
 801758e:	d015      	beq.n	80175bc <_vfiprintf_r+0x13c>
 8017590:	9a07      	ldr	r2, [sp, #28]
 8017592:	4654      	mov	r4, sl
 8017594:	2000      	movs	r0, #0
 8017596:	f04f 0c0a 	mov.w	ip, #10
 801759a:	4621      	mov	r1, r4
 801759c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175a0:	3b30      	subs	r3, #48	; 0x30
 80175a2:	2b09      	cmp	r3, #9
 80175a4:	d94e      	bls.n	8017644 <_vfiprintf_r+0x1c4>
 80175a6:	b1b0      	cbz	r0, 80175d6 <_vfiprintf_r+0x156>
 80175a8:	9207      	str	r2, [sp, #28]
 80175aa:	e014      	b.n	80175d6 <_vfiprintf_r+0x156>
 80175ac:	eba0 0308 	sub.w	r3, r0, r8
 80175b0:	fa09 f303 	lsl.w	r3, r9, r3
 80175b4:	4313      	orrs	r3, r2
 80175b6:	9304      	str	r3, [sp, #16]
 80175b8:	46a2      	mov	sl, r4
 80175ba:	e7d2      	b.n	8017562 <_vfiprintf_r+0xe2>
 80175bc:	9b03      	ldr	r3, [sp, #12]
 80175be:	1d19      	adds	r1, r3, #4
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	9103      	str	r1, [sp, #12]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	bfbb      	ittet	lt
 80175c8:	425b      	neglt	r3, r3
 80175ca:	f042 0202 	orrlt.w	r2, r2, #2
 80175ce:	9307      	strge	r3, [sp, #28]
 80175d0:	9307      	strlt	r3, [sp, #28]
 80175d2:	bfb8      	it	lt
 80175d4:	9204      	strlt	r2, [sp, #16]
 80175d6:	7823      	ldrb	r3, [r4, #0]
 80175d8:	2b2e      	cmp	r3, #46	; 0x2e
 80175da:	d10c      	bne.n	80175f6 <_vfiprintf_r+0x176>
 80175dc:	7863      	ldrb	r3, [r4, #1]
 80175de:	2b2a      	cmp	r3, #42	; 0x2a
 80175e0:	d135      	bne.n	801764e <_vfiprintf_r+0x1ce>
 80175e2:	9b03      	ldr	r3, [sp, #12]
 80175e4:	1d1a      	adds	r2, r3, #4
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	9203      	str	r2, [sp, #12]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	bfb8      	it	lt
 80175ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80175f2:	3402      	adds	r4, #2
 80175f4:	9305      	str	r3, [sp, #20]
 80175f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80176dc <_vfiprintf_r+0x25c>
 80175fa:	7821      	ldrb	r1, [r4, #0]
 80175fc:	2203      	movs	r2, #3
 80175fe:	4650      	mov	r0, sl
 8017600:	f7e8 fe06 	bl	8000210 <memchr>
 8017604:	b140      	cbz	r0, 8017618 <_vfiprintf_r+0x198>
 8017606:	2340      	movs	r3, #64	; 0x40
 8017608:	eba0 000a 	sub.w	r0, r0, sl
 801760c:	fa03 f000 	lsl.w	r0, r3, r0
 8017610:	9b04      	ldr	r3, [sp, #16]
 8017612:	4303      	orrs	r3, r0
 8017614:	3401      	adds	r4, #1
 8017616:	9304      	str	r3, [sp, #16]
 8017618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801761c:	482c      	ldr	r0, [pc, #176]	; (80176d0 <_vfiprintf_r+0x250>)
 801761e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017622:	2206      	movs	r2, #6
 8017624:	f7e8 fdf4 	bl	8000210 <memchr>
 8017628:	2800      	cmp	r0, #0
 801762a:	d03f      	beq.n	80176ac <_vfiprintf_r+0x22c>
 801762c:	4b29      	ldr	r3, [pc, #164]	; (80176d4 <_vfiprintf_r+0x254>)
 801762e:	bb1b      	cbnz	r3, 8017678 <_vfiprintf_r+0x1f8>
 8017630:	9b03      	ldr	r3, [sp, #12]
 8017632:	3307      	adds	r3, #7
 8017634:	f023 0307 	bic.w	r3, r3, #7
 8017638:	3308      	adds	r3, #8
 801763a:	9303      	str	r3, [sp, #12]
 801763c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801763e:	443b      	add	r3, r7
 8017640:	9309      	str	r3, [sp, #36]	; 0x24
 8017642:	e767      	b.n	8017514 <_vfiprintf_r+0x94>
 8017644:	fb0c 3202 	mla	r2, ip, r2, r3
 8017648:	460c      	mov	r4, r1
 801764a:	2001      	movs	r0, #1
 801764c:	e7a5      	b.n	801759a <_vfiprintf_r+0x11a>
 801764e:	2300      	movs	r3, #0
 8017650:	3401      	adds	r4, #1
 8017652:	9305      	str	r3, [sp, #20]
 8017654:	4619      	mov	r1, r3
 8017656:	f04f 0c0a 	mov.w	ip, #10
 801765a:	4620      	mov	r0, r4
 801765c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017660:	3a30      	subs	r2, #48	; 0x30
 8017662:	2a09      	cmp	r2, #9
 8017664:	d903      	bls.n	801766e <_vfiprintf_r+0x1ee>
 8017666:	2b00      	cmp	r3, #0
 8017668:	d0c5      	beq.n	80175f6 <_vfiprintf_r+0x176>
 801766a:	9105      	str	r1, [sp, #20]
 801766c:	e7c3      	b.n	80175f6 <_vfiprintf_r+0x176>
 801766e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017672:	4604      	mov	r4, r0
 8017674:	2301      	movs	r3, #1
 8017676:	e7f0      	b.n	801765a <_vfiprintf_r+0x1da>
 8017678:	ab03      	add	r3, sp, #12
 801767a:	9300      	str	r3, [sp, #0]
 801767c:	462a      	mov	r2, r5
 801767e:	4b16      	ldr	r3, [pc, #88]	; (80176d8 <_vfiprintf_r+0x258>)
 8017680:	a904      	add	r1, sp, #16
 8017682:	4630      	mov	r0, r6
 8017684:	f3af 8000 	nop.w
 8017688:	4607      	mov	r7, r0
 801768a:	1c78      	adds	r0, r7, #1
 801768c:	d1d6      	bne.n	801763c <_vfiprintf_r+0x1bc>
 801768e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017690:	07d9      	lsls	r1, r3, #31
 8017692:	d405      	bmi.n	80176a0 <_vfiprintf_r+0x220>
 8017694:	89ab      	ldrh	r3, [r5, #12]
 8017696:	059a      	lsls	r2, r3, #22
 8017698:	d402      	bmi.n	80176a0 <_vfiprintf_r+0x220>
 801769a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801769c:	f7ff fd77 	bl	801718e <__retarget_lock_release_recursive>
 80176a0:	89ab      	ldrh	r3, [r5, #12]
 80176a2:	065b      	lsls	r3, r3, #25
 80176a4:	f53f af12 	bmi.w	80174cc <_vfiprintf_r+0x4c>
 80176a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176aa:	e711      	b.n	80174d0 <_vfiprintf_r+0x50>
 80176ac:	ab03      	add	r3, sp, #12
 80176ae:	9300      	str	r3, [sp, #0]
 80176b0:	462a      	mov	r2, r5
 80176b2:	4b09      	ldr	r3, [pc, #36]	; (80176d8 <_vfiprintf_r+0x258>)
 80176b4:	a904      	add	r1, sp, #16
 80176b6:	4630      	mov	r0, r6
 80176b8:	f000 f880 	bl	80177bc <_printf_i>
 80176bc:	e7e4      	b.n	8017688 <_vfiprintf_r+0x208>
 80176be:	bf00      	nop
 80176c0:	0801a9f0 	.word	0x0801a9f0
 80176c4:	0801aa10 	.word	0x0801aa10
 80176c8:	0801a9d0 	.word	0x0801a9d0
 80176cc:	0801aa30 	.word	0x0801aa30
 80176d0:	0801aa3a 	.word	0x0801aa3a
 80176d4:	00000000 	.word	0x00000000
 80176d8:	0801745b 	.word	0x0801745b
 80176dc:	0801aa36 	.word	0x0801aa36

080176e0 <_printf_common>:
 80176e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176e4:	4616      	mov	r6, r2
 80176e6:	4699      	mov	r9, r3
 80176e8:	688a      	ldr	r2, [r1, #8]
 80176ea:	690b      	ldr	r3, [r1, #16]
 80176ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80176f0:	4293      	cmp	r3, r2
 80176f2:	bfb8      	it	lt
 80176f4:	4613      	movlt	r3, r2
 80176f6:	6033      	str	r3, [r6, #0]
 80176f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80176fc:	4607      	mov	r7, r0
 80176fe:	460c      	mov	r4, r1
 8017700:	b10a      	cbz	r2, 8017706 <_printf_common+0x26>
 8017702:	3301      	adds	r3, #1
 8017704:	6033      	str	r3, [r6, #0]
 8017706:	6823      	ldr	r3, [r4, #0]
 8017708:	0699      	lsls	r1, r3, #26
 801770a:	bf42      	ittt	mi
 801770c:	6833      	ldrmi	r3, [r6, #0]
 801770e:	3302      	addmi	r3, #2
 8017710:	6033      	strmi	r3, [r6, #0]
 8017712:	6825      	ldr	r5, [r4, #0]
 8017714:	f015 0506 	ands.w	r5, r5, #6
 8017718:	d106      	bne.n	8017728 <_printf_common+0x48>
 801771a:	f104 0a19 	add.w	sl, r4, #25
 801771e:	68e3      	ldr	r3, [r4, #12]
 8017720:	6832      	ldr	r2, [r6, #0]
 8017722:	1a9b      	subs	r3, r3, r2
 8017724:	42ab      	cmp	r3, r5
 8017726:	dc26      	bgt.n	8017776 <_printf_common+0x96>
 8017728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801772c:	1e13      	subs	r3, r2, #0
 801772e:	6822      	ldr	r2, [r4, #0]
 8017730:	bf18      	it	ne
 8017732:	2301      	movne	r3, #1
 8017734:	0692      	lsls	r2, r2, #26
 8017736:	d42b      	bmi.n	8017790 <_printf_common+0xb0>
 8017738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801773c:	4649      	mov	r1, r9
 801773e:	4638      	mov	r0, r7
 8017740:	47c0      	blx	r8
 8017742:	3001      	adds	r0, #1
 8017744:	d01e      	beq.n	8017784 <_printf_common+0xa4>
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	68e5      	ldr	r5, [r4, #12]
 801774a:	6832      	ldr	r2, [r6, #0]
 801774c:	f003 0306 	and.w	r3, r3, #6
 8017750:	2b04      	cmp	r3, #4
 8017752:	bf08      	it	eq
 8017754:	1aad      	subeq	r5, r5, r2
 8017756:	68a3      	ldr	r3, [r4, #8]
 8017758:	6922      	ldr	r2, [r4, #16]
 801775a:	bf0c      	ite	eq
 801775c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017760:	2500      	movne	r5, #0
 8017762:	4293      	cmp	r3, r2
 8017764:	bfc4      	itt	gt
 8017766:	1a9b      	subgt	r3, r3, r2
 8017768:	18ed      	addgt	r5, r5, r3
 801776a:	2600      	movs	r6, #0
 801776c:	341a      	adds	r4, #26
 801776e:	42b5      	cmp	r5, r6
 8017770:	d11a      	bne.n	80177a8 <_printf_common+0xc8>
 8017772:	2000      	movs	r0, #0
 8017774:	e008      	b.n	8017788 <_printf_common+0xa8>
 8017776:	2301      	movs	r3, #1
 8017778:	4652      	mov	r2, sl
 801777a:	4649      	mov	r1, r9
 801777c:	4638      	mov	r0, r7
 801777e:	47c0      	blx	r8
 8017780:	3001      	adds	r0, #1
 8017782:	d103      	bne.n	801778c <_printf_common+0xac>
 8017784:	f04f 30ff 	mov.w	r0, #4294967295
 8017788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801778c:	3501      	adds	r5, #1
 801778e:	e7c6      	b.n	801771e <_printf_common+0x3e>
 8017790:	18e1      	adds	r1, r4, r3
 8017792:	1c5a      	adds	r2, r3, #1
 8017794:	2030      	movs	r0, #48	; 0x30
 8017796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801779a:	4422      	add	r2, r4
 801779c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80177a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80177a4:	3302      	adds	r3, #2
 80177a6:	e7c7      	b.n	8017738 <_printf_common+0x58>
 80177a8:	2301      	movs	r3, #1
 80177aa:	4622      	mov	r2, r4
 80177ac:	4649      	mov	r1, r9
 80177ae:	4638      	mov	r0, r7
 80177b0:	47c0      	blx	r8
 80177b2:	3001      	adds	r0, #1
 80177b4:	d0e6      	beq.n	8017784 <_printf_common+0xa4>
 80177b6:	3601      	adds	r6, #1
 80177b8:	e7d9      	b.n	801776e <_printf_common+0x8e>
	...

080177bc <_printf_i>:
 80177bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177c0:	7e0f      	ldrb	r7, [r1, #24]
 80177c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80177c4:	2f78      	cmp	r7, #120	; 0x78
 80177c6:	4691      	mov	r9, r2
 80177c8:	4680      	mov	r8, r0
 80177ca:	460c      	mov	r4, r1
 80177cc:	469a      	mov	sl, r3
 80177ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80177d2:	d807      	bhi.n	80177e4 <_printf_i+0x28>
 80177d4:	2f62      	cmp	r7, #98	; 0x62
 80177d6:	d80a      	bhi.n	80177ee <_printf_i+0x32>
 80177d8:	2f00      	cmp	r7, #0
 80177da:	f000 80d8 	beq.w	801798e <_printf_i+0x1d2>
 80177de:	2f58      	cmp	r7, #88	; 0x58
 80177e0:	f000 80a3 	beq.w	801792a <_printf_i+0x16e>
 80177e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80177e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80177ec:	e03a      	b.n	8017864 <_printf_i+0xa8>
 80177ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80177f2:	2b15      	cmp	r3, #21
 80177f4:	d8f6      	bhi.n	80177e4 <_printf_i+0x28>
 80177f6:	a101      	add	r1, pc, #4	; (adr r1, 80177fc <_printf_i+0x40>)
 80177f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80177fc:	08017855 	.word	0x08017855
 8017800:	08017869 	.word	0x08017869
 8017804:	080177e5 	.word	0x080177e5
 8017808:	080177e5 	.word	0x080177e5
 801780c:	080177e5 	.word	0x080177e5
 8017810:	080177e5 	.word	0x080177e5
 8017814:	08017869 	.word	0x08017869
 8017818:	080177e5 	.word	0x080177e5
 801781c:	080177e5 	.word	0x080177e5
 8017820:	080177e5 	.word	0x080177e5
 8017824:	080177e5 	.word	0x080177e5
 8017828:	08017975 	.word	0x08017975
 801782c:	08017899 	.word	0x08017899
 8017830:	08017957 	.word	0x08017957
 8017834:	080177e5 	.word	0x080177e5
 8017838:	080177e5 	.word	0x080177e5
 801783c:	08017997 	.word	0x08017997
 8017840:	080177e5 	.word	0x080177e5
 8017844:	08017899 	.word	0x08017899
 8017848:	080177e5 	.word	0x080177e5
 801784c:	080177e5 	.word	0x080177e5
 8017850:	0801795f 	.word	0x0801795f
 8017854:	682b      	ldr	r3, [r5, #0]
 8017856:	1d1a      	adds	r2, r3, #4
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	602a      	str	r2, [r5, #0]
 801785c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017864:	2301      	movs	r3, #1
 8017866:	e0a3      	b.n	80179b0 <_printf_i+0x1f4>
 8017868:	6820      	ldr	r0, [r4, #0]
 801786a:	6829      	ldr	r1, [r5, #0]
 801786c:	0606      	lsls	r6, r0, #24
 801786e:	f101 0304 	add.w	r3, r1, #4
 8017872:	d50a      	bpl.n	801788a <_printf_i+0xce>
 8017874:	680e      	ldr	r6, [r1, #0]
 8017876:	602b      	str	r3, [r5, #0]
 8017878:	2e00      	cmp	r6, #0
 801787a:	da03      	bge.n	8017884 <_printf_i+0xc8>
 801787c:	232d      	movs	r3, #45	; 0x2d
 801787e:	4276      	negs	r6, r6
 8017880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017884:	485e      	ldr	r0, [pc, #376]	; (8017a00 <_printf_i+0x244>)
 8017886:	230a      	movs	r3, #10
 8017888:	e019      	b.n	80178be <_printf_i+0x102>
 801788a:	680e      	ldr	r6, [r1, #0]
 801788c:	602b      	str	r3, [r5, #0]
 801788e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017892:	bf18      	it	ne
 8017894:	b236      	sxthne	r6, r6
 8017896:	e7ef      	b.n	8017878 <_printf_i+0xbc>
 8017898:	682b      	ldr	r3, [r5, #0]
 801789a:	6820      	ldr	r0, [r4, #0]
 801789c:	1d19      	adds	r1, r3, #4
 801789e:	6029      	str	r1, [r5, #0]
 80178a0:	0601      	lsls	r1, r0, #24
 80178a2:	d501      	bpl.n	80178a8 <_printf_i+0xec>
 80178a4:	681e      	ldr	r6, [r3, #0]
 80178a6:	e002      	b.n	80178ae <_printf_i+0xf2>
 80178a8:	0646      	lsls	r6, r0, #25
 80178aa:	d5fb      	bpl.n	80178a4 <_printf_i+0xe8>
 80178ac:	881e      	ldrh	r6, [r3, #0]
 80178ae:	4854      	ldr	r0, [pc, #336]	; (8017a00 <_printf_i+0x244>)
 80178b0:	2f6f      	cmp	r7, #111	; 0x6f
 80178b2:	bf0c      	ite	eq
 80178b4:	2308      	moveq	r3, #8
 80178b6:	230a      	movne	r3, #10
 80178b8:	2100      	movs	r1, #0
 80178ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80178be:	6865      	ldr	r5, [r4, #4]
 80178c0:	60a5      	str	r5, [r4, #8]
 80178c2:	2d00      	cmp	r5, #0
 80178c4:	bfa2      	ittt	ge
 80178c6:	6821      	ldrge	r1, [r4, #0]
 80178c8:	f021 0104 	bicge.w	r1, r1, #4
 80178cc:	6021      	strge	r1, [r4, #0]
 80178ce:	b90e      	cbnz	r6, 80178d4 <_printf_i+0x118>
 80178d0:	2d00      	cmp	r5, #0
 80178d2:	d04d      	beq.n	8017970 <_printf_i+0x1b4>
 80178d4:	4615      	mov	r5, r2
 80178d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80178da:	fb03 6711 	mls	r7, r3, r1, r6
 80178de:	5dc7      	ldrb	r7, [r0, r7]
 80178e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80178e4:	4637      	mov	r7, r6
 80178e6:	42bb      	cmp	r3, r7
 80178e8:	460e      	mov	r6, r1
 80178ea:	d9f4      	bls.n	80178d6 <_printf_i+0x11a>
 80178ec:	2b08      	cmp	r3, #8
 80178ee:	d10b      	bne.n	8017908 <_printf_i+0x14c>
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	07de      	lsls	r6, r3, #31
 80178f4:	d508      	bpl.n	8017908 <_printf_i+0x14c>
 80178f6:	6923      	ldr	r3, [r4, #16]
 80178f8:	6861      	ldr	r1, [r4, #4]
 80178fa:	4299      	cmp	r1, r3
 80178fc:	bfde      	ittt	le
 80178fe:	2330      	movle	r3, #48	; 0x30
 8017900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017908:	1b52      	subs	r2, r2, r5
 801790a:	6122      	str	r2, [r4, #16]
 801790c:	f8cd a000 	str.w	sl, [sp]
 8017910:	464b      	mov	r3, r9
 8017912:	aa03      	add	r2, sp, #12
 8017914:	4621      	mov	r1, r4
 8017916:	4640      	mov	r0, r8
 8017918:	f7ff fee2 	bl	80176e0 <_printf_common>
 801791c:	3001      	adds	r0, #1
 801791e:	d14c      	bne.n	80179ba <_printf_i+0x1fe>
 8017920:	f04f 30ff 	mov.w	r0, #4294967295
 8017924:	b004      	add	sp, #16
 8017926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801792a:	4835      	ldr	r0, [pc, #212]	; (8017a00 <_printf_i+0x244>)
 801792c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017930:	6829      	ldr	r1, [r5, #0]
 8017932:	6823      	ldr	r3, [r4, #0]
 8017934:	f851 6b04 	ldr.w	r6, [r1], #4
 8017938:	6029      	str	r1, [r5, #0]
 801793a:	061d      	lsls	r5, r3, #24
 801793c:	d514      	bpl.n	8017968 <_printf_i+0x1ac>
 801793e:	07df      	lsls	r7, r3, #31
 8017940:	bf44      	itt	mi
 8017942:	f043 0320 	orrmi.w	r3, r3, #32
 8017946:	6023      	strmi	r3, [r4, #0]
 8017948:	b91e      	cbnz	r6, 8017952 <_printf_i+0x196>
 801794a:	6823      	ldr	r3, [r4, #0]
 801794c:	f023 0320 	bic.w	r3, r3, #32
 8017950:	6023      	str	r3, [r4, #0]
 8017952:	2310      	movs	r3, #16
 8017954:	e7b0      	b.n	80178b8 <_printf_i+0xfc>
 8017956:	6823      	ldr	r3, [r4, #0]
 8017958:	f043 0320 	orr.w	r3, r3, #32
 801795c:	6023      	str	r3, [r4, #0]
 801795e:	2378      	movs	r3, #120	; 0x78
 8017960:	4828      	ldr	r0, [pc, #160]	; (8017a04 <_printf_i+0x248>)
 8017962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017966:	e7e3      	b.n	8017930 <_printf_i+0x174>
 8017968:	0659      	lsls	r1, r3, #25
 801796a:	bf48      	it	mi
 801796c:	b2b6      	uxthmi	r6, r6
 801796e:	e7e6      	b.n	801793e <_printf_i+0x182>
 8017970:	4615      	mov	r5, r2
 8017972:	e7bb      	b.n	80178ec <_printf_i+0x130>
 8017974:	682b      	ldr	r3, [r5, #0]
 8017976:	6826      	ldr	r6, [r4, #0]
 8017978:	6961      	ldr	r1, [r4, #20]
 801797a:	1d18      	adds	r0, r3, #4
 801797c:	6028      	str	r0, [r5, #0]
 801797e:	0635      	lsls	r5, r6, #24
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	d501      	bpl.n	8017988 <_printf_i+0x1cc>
 8017984:	6019      	str	r1, [r3, #0]
 8017986:	e002      	b.n	801798e <_printf_i+0x1d2>
 8017988:	0670      	lsls	r0, r6, #25
 801798a:	d5fb      	bpl.n	8017984 <_printf_i+0x1c8>
 801798c:	8019      	strh	r1, [r3, #0]
 801798e:	2300      	movs	r3, #0
 8017990:	6123      	str	r3, [r4, #16]
 8017992:	4615      	mov	r5, r2
 8017994:	e7ba      	b.n	801790c <_printf_i+0x150>
 8017996:	682b      	ldr	r3, [r5, #0]
 8017998:	1d1a      	adds	r2, r3, #4
 801799a:	602a      	str	r2, [r5, #0]
 801799c:	681d      	ldr	r5, [r3, #0]
 801799e:	6862      	ldr	r2, [r4, #4]
 80179a0:	2100      	movs	r1, #0
 80179a2:	4628      	mov	r0, r5
 80179a4:	f7e8 fc34 	bl	8000210 <memchr>
 80179a8:	b108      	cbz	r0, 80179ae <_printf_i+0x1f2>
 80179aa:	1b40      	subs	r0, r0, r5
 80179ac:	6060      	str	r0, [r4, #4]
 80179ae:	6863      	ldr	r3, [r4, #4]
 80179b0:	6123      	str	r3, [r4, #16]
 80179b2:	2300      	movs	r3, #0
 80179b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179b8:	e7a8      	b.n	801790c <_printf_i+0x150>
 80179ba:	6923      	ldr	r3, [r4, #16]
 80179bc:	462a      	mov	r2, r5
 80179be:	4649      	mov	r1, r9
 80179c0:	4640      	mov	r0, r8
 80179c2:	47d0      	blx	sl
 80179c4:	3001      	adds	r0, #1
 80179c6:	d0ab      	beq.n	8017920 <_printf_i+0x164>
 80179c8:	6823      	ldr	r3, [r4, #0]
 80179ca:	079b      	lsls	r3, r3, #30
 80179cc:	d413      	bmi.n	80179f6 <_printf_i+0x23a>
 80179ce:	68e0      	ldr	r0, [r4, #12]
 80179d0:	9b03      	ldr	r3, [sp, #12]
 80179d2:	4298      	cmp	r0, r3
 80179d4:	bfb8      	it	lt
 80179d6:	4618      	movlt	r0, r3
 80179d8:	e7a4      	b.n	8017924 <_printf_i+0x168>
 80179da:	2301      	movs	r3, #1
 80179dc:	4632      	mov	r2, r6
 80179de:	4649      	mov	r1, r9
 80179e0:	4640      	mov	r0, r8
 80179e2:	47d0      	blx	sl
 80179e4:	3001      	adds	r0, #1
 80179e6:	d09b      	beq.n	8017920 <_printf_i+0x164>
 80179e8:	3501      	adds	r5, #1
 80179ea:	68e3      	ldr	r3, [r4, #12]
 80179ec:	9903      	ldr	r1, [sp, #12]
 80179ee:	1a5b      	subs	r3, r3, r1
 80179f0:	42ab      	cmp	r3, r5
 80179f2:	dcf2      	bgt.n	80179da <_printf_i+0x21e>
 80179f4:	e7eb      	b.n	80179ce <_printf_i+0x212>
 80179f6:	2500      	movs	r5, #0
 80179f8:	f104 0619 	add.w	r6, r4, #25
 80179fc:	e7f5      	b.n	80179ea <_printf_i+0x22e>
 80179fe:	bf00      	nop
 8017a00:	0801aa41 	.word	0x0801aa41
 8017a04:	0801aa52 	.word	0x0801aa52

08017a08 <_sbrk_r>:
 8017a08:	b538      	push	{r3, r4, r5, lr}
 8017a0a:	4d06      	ldr	r5, [pc, #24]	; (8017a24 <_sbrk_r+0x1c>)
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	4604      	mov	r4, r0
 8017a10:	4608      	mov	r0, r1
 8017a12:	602b      	str	r3, [r5, #0]
 8017a14:	f7e9 ffce 	bl	80019b4 <_sbrk>
 8017a18:	1c43      	adds	r3, r0, #1
 8017a1a:	d102      	bne.n	8017a22 <_sbrk_r+0x1a>
 8017a1c:	682b      	ldr	r3, [r5, #0]
 8017a1e:	b103      	cbz	r3, 8017a22 <_sbrk_r+0x1a>
 8017a20:	6023      	str	r3, [r4, #0]
 8017a22:	bd38      	pop	{r3, r4, r5, pc}
 8017a24:	20008ec4 	.word	0x20008ec4

08017a28 <__sread>:
 8017a28:	b510      	push	{r4, lr}
 8017a2a:	460c      	mov	r4, r1
 8017a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a30:	f000 f8a8 	bl	8017b84 <_read_r>
 8017a34:	2800      	cmp	r0, #0
 8017a36:	bfab      	itete	ge
 8017a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8017a3c:	181b      	addge	r3, r3, r0
 8017a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017a42:	bfac      	ite	ge
 8017a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8017a46:	81a3      	strhlt	r3, [r4, #12]
 8017a48:	bd10      	pop	{r4, pc}

08017a4a <__swrite>:
 8017a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a4e:	461f      	mov	r7, r3
 8017a50:	898b      	ldrh	r3, [r1, #12]
 8017a52:	05db      	lsls	r3, r3, #23
 8017a54:	4605      	mov	r5, r0
 8017a56:	460c      	mov	r4, r1
 8017a58:	4616      	mov	r6, r2
 8017a5a:	d505      	bpl.n	8017a68 <__swrite+0x1e>
 8017a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a60:	2302      	movs	r3, #2
 8017a62:	2200      	movs	r2, #0
 8017a64:	f000 f870 	bl	8017b48 <_lseek_r>
 8017a68:	89a3      	ldrh	r3, [r4, #12]
 8017a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a72:	81a3      	strh	r3, [r4, #12]
 8017a74:	4632      	mov	r2, r6
 8017a76:	463b      	mov	r3, r7
 8017a78:	4628      	mov	r0, r5
 8017a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a7e:	f000 b817 	b.w	8017ab0 <_write_r>

08017a82 <__sseek>:
 8017a82:	b510      	push	{r4, lr}
 8017a84:	460c      	mov	r4, r1
 8017a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a8a:	f000 f85d 	bl	8017b48 <_lseek_r>
 8017a8e:	1c43      	adds	r3, r0, #1
 8017a90:	89a3      	ldrh	r3, [r4, #12]
 8017a92:	bf15      	itete	ne
 8017a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a9e:	81a3      	strheq	r3, [r4, #12]
 8017aa0:	bf18      	it	ne
 8017aa2:	81a3      	strhne	r3, [r4, #12]
 8017aa4:	bd10      	pop	{r4, pc}

08017aa6 <__sclose>:
 8017aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aaa:	f000 b81b 	b.w	8017ae4 <_close_r>
	...

08017ab0 <_write_r>:
 8017ab0:	b538      	push	{r3, r4, r5, lr}
 8017ab2:	4d07      	ldr	r5, [pc, #28]	; (8017ad0 <_write_r+0x20>)
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	4608      	mov	r0, r1
 8017ab8:	4611      	mov	r1, r2
 8017aba:	2200      	movs	r2, #0
 8017abc:	602a      	str	r2, [r5, #0]
 8017abe:	461a      	mov	r2, r3
 8017ac0:	f7fe fa9a 	bl	8015ff8 <_write>
 8017ac4:	1c43      	adds	r3, r0, #1
 8017ac6:	d102      	bne.n	8017ace <_write_r+0x1e>
 8017ac8:	682b      	ldr	r3, [r5, #0]
 8017aca:	b103      	cbz	r3, 8017ace <_write_r+0x1e>
 8017acc:	6023      	str	r3, [r4, #0]
 8017ace:	bd38      	pop	{r3, r4, r5, pc}
 8017ad0:	20008ec4 	.word	0x20008ec4

08017ad4 <abort>:
 8017ad4:	b508      	push	{r3, lr}
 8017ad6:	2006      	movs	r0, #6
 8017ad8:	f000 f88e 	bl	8017bf8 <raise>
 8017adc:	2001      	movs	r0, #1
 8017ade:	f7e9 ff2b 	bl	8001938 <_exit>
	...

08017ae4 <_close_r>:
 8017ae4:	b538      	push	{r3, r4, r5, lr}
 8017ae6:	4d06      	ldr	r5, [pc, #24]	; (8017b00 <_close_r+0x1c>)
 8017ae8:	2300      	movs	r3, #0
 8017aea:	4604      	mov	r4, r0
 8017aec:	4608      	mov	r0, r1
 8017aee:	602b      	str	r3, [r5, #0]
 8017af0:	f7e9 ff2c 	bl	800194c <_close>
 8017af4:	1c43      	adds	r3, r0, #1
 8017af6:	d102      	bne.n	8017afe <_close_r+0x1a>
 8017af8:	682b      	ldr	r3, [r5, #0]
 8017afa:	b103      	cbz	r3, 8017afe <_close_r+0x1a>
 8017afc:	6023      	str	r3, [r4, #0]
 8017afe:	bd38      	pop	{r3, r4, r5, pc}
 8017b00:	20008ec4 	.word	0x20008ec4

08017b04 <_fstat_r>:
 8017b04:	b538      	push	{r3, r4, r5, lr}
 8017b06:	4d07      	ldr	r5, [pc, #28]	; (8017b24 <_fstat_r+0x20>)
 8017b08:	2300      	movs	r3, #0
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	4608      	mov	r0, r1
 8017b0e:	4611      	mov	r1, r2
 8017b10:	602b      	str	r3, [r5, #0]
 8017b12:	f7e9 ff27 	bl	8001964 <_fstat>
 8017b16:	1c43      	adds	r3, r0, #1
 8017b18:	d102      	bne.n	8017b20 <_fstat_r+0x1c>
 8017b1a:	682b      	ldr	r3, [r5, #0]
 8017b1c:	b103      	cbz	r3, 8017b20 <_fstat_r+0x1c>
 8017b1e:	6023      	str	r3, [r4, #0]
 8017b20:	bd38      	pop	{r3, r4, r5, pc}
 8017b22:	bf00      	nop
 8017b24:	20008ec4 	.word	0x20008ec4

08017b28 <_isatty_r>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	4d06      	ldr	r5, [pc, #24]	; (8017b44 <_isatty_r+0x1c>)
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	4604      	mov	r4, r0
 8017b30:	4608      	mov	r0, r1
 8017b32:	602b      	str	r3, [r5, #0]
 8017b34:	f7e9 ff26 	bl	8001984 <_isatty>
 8017b38:	1c43      	adds	r3, r0, #1
 8017b3a:	d102      	bne.n	8017b42 <_isatty_r+0x1a>
 8017b3c:	682b      	ldr	r3, [r5, #0]
 8017b3e:	b103      	cbz	r3, 8017b42 <_isatty_r+0x1a>
 8017b40:	6023      	str	r3, [r4, #0]
 8017b42:	bd38      	pop	{r3, r4, r5, pc}
 8017b44:	20008ec4 	.word	0x20008ec4

08017b48 <_lseek_r>:
 8017b48:	b538      	push	{r3, r4, r5, lr}
 8017b4a:	4d07      	ldr	r5, [pc, #28]	; (8017b68 <_lseek_r+0x20>)
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	4608      	mov	r0, r1
 8017b50:	4611      	mov	r1, r2
 8017b52:	2200      	movs	r2, #0
 8017b54:	602a      	str	r2, [r5, #0]
 8017b56:	461a      	mov	r2, r3
 8017b58:	f7e9 ff1f 	bl	800199a <_lseek>
 8017b5c:	1c43      	adds	r3, r0, #1
 8017b5e:	d102      	bne.n	8017b66 <_lseek_r+0x1e>
 8017b60:	682b      	ldr	r3, [r5, #0]
 8017b62:	b103      	cbz	r3, 8017b66 <_lseek_r+0x1e>
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	bd38      	pop	{r3, r4, r5, pc}
 8017b68:	20008ec4 	.word	0x20008ec4

08017b6c <__malloc_lock>:
 8017b6c:	4801      	ldr	r0, [pc, #4]	; (8017b74 <__malloc_lock+0x8>)
 8017b6e:	f7ff bb0d 	b.w	801718c <__retarget_lock_acquire_recursive>
 8017b72:	bf00      	nop
 8017b74:	20008ec8 	.word	0x20008ec8

08017b78 <__malloc_unlock>:
 8017b78:	4801      	ldr	r0, [pc, #4]	; (8017b80 <__malloc_unlock+0x8>)
 8017b7a:	f7ff bb08 	b.w	801718e <__retarget_lock_release_recursive>
 8017b7e:	bf00      	nop
 8017b80:	20008ec8 	.word	0x20008ec8

08017b84 <_read_r>:
 8017b84:	b538      	push	{r3, r4, r5, lr}
 8017b86:	4d07      	ldr	r5, [pc, #28]	; (8017ba4 <_read_r+0x20>)
 8017b88:	4604      	mov	r4, r0
 8017b8a:	4608      	mov	r0, r1
 8017b8c:	4611      	mov	r1, r2
 8017b8e:	2200      	movs	r2, #0
 8017b90:	602a      	str	r2, [r5, #0]
 8017b92:	461a      	mov	r2, r3
 8017b94:	f7fe fa60 	bl	8016058 <_read>
 8017b98:	1c43      	adds	r3, r0, #1
 8017b9a:	d102      	bne.n	8017ba2 <_read_r+0x1e>
 8017b9c:	682b      	ldr	r3, [r5, #0]
 8017b9e:	b103      	cbz	r3, 8017ba2 <_read_r+0x1e>
 8017ba0:	6023      	str	r3, [r4, #0]
 8017ba2:	bd38      	pop	{r3, r4, r5, pc}
 8017ba4:	20008ec4 	.word	0x20008ec4

08017ba8 <_raise_r>:
 8017ba8:	291f      	cmp	r1, #31
 8017baa:	b538      	push	{r3, r4, r5, lr}
 8017bac:	4604      	mov	r4, r0
 8017bae:	460d      	mov	r5, r1
 8017bb0:	d904      	bls.n	8017bbc <_raise_r+0x14>
 8017bb2:	2316      	movs	r3, #22
 8017bb4:	6003      	str	r3, [r0, #0]
 8017bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bba:	bd38      	pop	{r3, r4, r5, pc}
 8017bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017bbe:	b112      	cbz	r2, 8017bc6 <_raise_r+0x1e>
 8017bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017bc4:	b94b      	cbnz	r3, 8017bda <_raise_r+0x32>
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f000 f830 	bl	8017c2c <_getpid_r>
 8017bcc:	462a      	mov	r2, r5
 8017bce:	4601      	mov	r1, r0
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bd6:	f000 b817 	b.w	8017c08 <_kill_r>
 8017bda:	2b01      	cmp	r3, #1
 8017bdc:	d00a      	beq.n	8017bf4 <_raise_r+0x4c>
 8017bde:	1c59      	adds	r1, r3, #1
 8017be0:	d103      	bne.n	8017bea <_raise_r+0x42>
 8017be2:	2316      	movs	r3, #22
 8017be4:	6003      	str	r3, [r0, #0]
 8017be6:	2001      	movs	r0, #1
 8017be8:	e7e7      	b.n	8017bba <_raise_r+0x12>
 8017bea:	2400      	movs	r4, #0
 8017bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bf0:	4628      	mov	r0, r5
 8017bf2:	4798      	blx	r3
 8017bf4:	2000      	movs	r0, #0
 8017bf6:	e7e0      	b.n	8017bba <_raise_r+0x12>

08017bf8 <raise>:
 8017bf8:	4b02      	ldr	r3, [pc, #8]	; (8017c04 <raise+0xc>)
 8017bfa:	4601      	mov	r1, r0
 8017bfc:	6818      	ldr	r0, [r3, #0]
 8017bfe:	f7ff bfd3 	b.w	8017ba8 <_raise_r>
 8017c02:	bf00      	nop
 8017c04:	2000002c 	.word	0x2000002c

08017c08 <_kill_r>:
 8017c08:	b538      	push	{r3, r4, r5, lr}
 8017c0a:	4d07      	ldr	r5, [pc, #28]	; (8017c28 <_kill_r+0x20>)
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	4604      	mov	r4, r0
 8017c10:	4608      	mov	r0, r1
 8017c12:	4611      	mov	r1, r2
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	f7e9 fe7d 	bl	8001914 <_kill>
 8017c1a:	1c43      	adds	r3, r0, #1
 8017c1c:	d102      	bne.n	8017c24 <_kill_r+0x1c>
 8017c1e:	682b      	ldr	r3, [r5, #0]
 8017c20:	b103      	cbz	r3, 8017c24 <_kill_r+0x1c>
 8017c22:	6023      	str	r3, [r4, #0]
 8017c24:	bd38      	pop	{r3, r4, r5, pc}
 8017c26:	bf00      	nop
 8017c28:	20008ec4 	.word	0x20008ec4

08017c2c <_getpid_r>:
 8017c2c:	f7e9 be6a 	b.w	8001904 <_getpid>

08017c30 <_init>:
 8017c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c32:	bf00      	nop
 8017c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c36:	bc08      	pop	{r3}
 8017c38:	469e      	mov	lr, r3
 8017c3a:	4770      	bx	lr

08017c3c <_fini>:
 8017c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c3e:	bf00      	nop
 8017c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c42:	bc08      	pop	{r3}
 8017c44:	469e      	mov	lr, r3
 8017c46:	4770      	bx	lr
